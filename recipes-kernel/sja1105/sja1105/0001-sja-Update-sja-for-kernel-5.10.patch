From 827c85db189da21275044b1c42e7eab3af138eb2 Mon Sep 17 00:00:00 2001
From: Ionut Vicovan <Ionut.Vicovan@nxp.com>
Date: Thu, 16 Jul 2020 10:05:26 +0300
Subject: [PATCH] sja: Update sja for kernel 5.10

Removed unused APIs, updated the ones that changed.
Add a call to 'phy_start' in 'attach_phydev' method in order
to perform aneg settings and schedule a link state check.

Upstream-Status: Backport [https://source.codeaurora.org/external/autobsps32/meta-alb/tree/recipes-kernel/sja1105]

Signed-off-by: Ionut Vicovan <Ionut.Vicovan@nxp.com>
Signed-off-by: Ciprian Marian Costea <ciprianmarian.costea@nxp.com>
[change the subject to compatible with kernel v5.10]
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 switchdev/src/sja1105p_switchdev.c | 120 +----------------------------
 1 file changed, 4 insertions(+), 116 deletions(-)

diff --git a/switchdev/src/sja1105p_switchdev.c b/switchdev/src/sja1105p_switchdev.c
index 9a46fb6..824cdb8 100644
--- a/switchdev/src/sja1105p_switchdev.c
+++ b/switchdev/src/sja1105p_switchdev.c
@@ -65,7 +65,7 @@ static struct nxp_private_data_struct nxp_private_data;
 static int nxp_port_fdb_add(struct ndmsg *ndm, struct nlattr *tb[],
 			    struct net_device *netdev,
 			    const unsigned char *addr, u16 vid,
-			    u16 nlm_flags)
+			    u16 nlm_flags, struct netlink_ext_ack *extack)
 {
 	int err;
 	struct nxp_port_data_struct *nxp_port;
@@ -350,7 +350,7 @@ static void set_port_linkstatus(struct net_device *netdev, linkstatus_t s)
 		rtnl_lock();
 
 	netdev->operstate = (s == UP) ? IF_OPER_UP : IF_OPER_DOWN;
-	dev_change_flags(netdev, flags);
+	dev_change_flags(netdev, flags, NULL);
 
 	if (needlock)
 		rtnl_unlock();
@@ -616,103 +616,6 @@ sja1105p_write_error:
 
 /************************swdev stubs*******************************************/
 
-/* led to get an ID of the switch chip this port is part of.
- * If driver implements this, it indicates that it represents a port of
- * a switch chip.
- */
-static int nxp_port_swdev_parent_id_get(struct net_device *netdev,
-					struct netdev_phys_item_id *psid)
-{
-	struct nxp_port_data_struct *nxp_port = netdev_priv(netdev);
-	u32 n = nxp_port->ppid;
-
-	psid->id[0] = (n >> 24) & 0xFF;
-	psid->id[1] = (n >> 16) & 0xFF;
-	psid->id[2] = (n >>  8) & 0xFF;
-	psid->id[3] = (n >>  0) & 0xFF;
-	psid->id_len = 4;
-
-	if (verbosity > 3)
-		netdev_alert(netdev, "nxp_port_swdev_parent_id_get was called for [%d], ppid is [%lu]\n",
-		nxp_port->port_num, nxp_port->ppid);
-
-	return 0;
-}
-
-/* Called to notify switch device port of bridge port STP state change */
-static int nxp_port_swdev_port_stp_update(struct net_device *netdev, u8 state)
-{
-	char *s;
-	struct nxp_port_data_struct *nxp_port;
-	nxp_port = netdev_priv(netdev);
-
-	/* implementation not needed, as sja1105p does not support STP */
-
-	switch (state) {
-	case BR_STATE_DISABLED:
-		s = "DISABLED";
-		break;
-	case BR_STATE_LISTENING:
-		s = "LISTENING";
-		break;
-	case BR_STATE_LEARNING:
-		s = "LEARNING";
-		break;
-	case BR_STATE_FORWARDING:
-		s = "FORWARDING";
-		break;
-	case BR_STATE_BLOCKING:
-		s = "BLOCKING";
-		break;
-	default:
-		s = "unknown_state";
-	}
-	if (verbosity > 3)
-		netdev_alert(netdev, "nxp_port_swdev_port_stp_update was called [%d], change state to [%s]!\n",
-		nxp_port->port_num, s);
-
-	return 0;
-}
-
-static int nxp_port_attr_get(struct net_device *netdev,
-			     struct switchdev_attr *attr)
-{
-	switch (attr->id) {
-	case SWITCHDEV_ATTR_ID_PORT_PARENT_ID:
-		return nxp_port_swdev_parent_id_get(netdev, &attr->u.ppid);
-	default:
-		return -EOPNOTSUPP;
-	}
-}
-
-static int nxp_port_attr_set(struct net_device *netdev,
-			     const struct switchdev_attr *attr,
-			     struct switchdev_trans *trans)
-{
-	switch (attr->id) {
-	case SWITCHDEV_ATTR_ID_PORT_STP_STATE:
-		return nxp_port_swdev_port_stp_update(netdev,
-						      attr->u.stp_state);
-	default:
-		return -EOPNOTSUPP;
-	}
-}
-
-static int nxp_port_obj_add(struct net_device *netdev,
-				const struct switchdev_obj *obj,
-				struct switchdev_trans *trans)
-{
-	/* Not implemented */
-	return -EOPNOTSUPP;
-}
-
-static int nxp_port_obj_del(struct net_device *netdev,
-				const struct switchdev_obj *obj)
-{
-	/* Not implemented */
-	return -EOPNOTSUPP;
-}
-
 /* Called when ports are toggled to reset delay lines */
 static void nxp_toggle_port(int port_num)
 {
@@ -814,17 +717,6 @@ static const struct net_device_ops nxp_port_netdev_ops = {
 	.ndo_get_phys_port_name		= nxp_port_get_phys_port_name,
 };
 
-/**********************************sw_ops**************************************/
-static const struct switchdev_ops nxp_port_swdev_ops = {
-	.switchdev_port_attr_get	= nxp_port_attr_get,
-	.switchdev_port_attr_set	= nxp_port_attr_set,
-	.switchdev_port_obj_add		= nxp_port_obj_add,
-	.switchdev_port_obj_del		= nxp_port_obj_del,
-};
-
-
-
-
 /******************************registration************************************/
 /* get the device tree node corresponding to a given logical port,
  * returns NULL if not found
@@ -924,10 +816,8 @@ void attach_phydev(struct net_device *netdev)
 	if (err)
 		goto phydev_attach_error;
 
-	/* force one iteration of the phy state machine
-	 * This ensures adjust_link() is called at least once
-	 */
-	phydev->state = PHY_CHANGELINK;
+	/* schedule a link state check */
+	phy_start(phydev);
 
 	if (verbosity > 0)
 		netdev_alert(netdev, "connected phy [%x] (state: [%x], link [%x]) to port [%d], attached_dev [%s]\n",
@@ -1023,8 +913,6 @@ int register_ports(struct nxp_private_data_struct *pr_data)
 
 		/* populate netdev */
 		netdev->netdev_ops = &nxp_port_netdev_ops;
-		SWITCHDEV_SET_OPS(netdev, &nxp_port_swdev_ops);
-
 
 		/* Flags:
 		 * 	- Does not change network namespaces. Device is network
-- 
2.17.1

