From 69dc7255fc3727872eceaf9bf4e81f0841d17857 Mon Sep 17 00:00:00 2001
From: "jan.petrous" <jan.petrous@nxp.com>
Date: Mon, 10 May 2021 16:28:15 +0200
Subject: [PATCH] codedrop: BLN_PFE-DRV_S32G_A53_LNX_BETA_0.9.4

Upstream-Status: Pending

Signed-off-by: Jan Petrous <jan.petrous@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 PFE_S32G_A53_LNX_BETA_0.9.4_ReleaseNotes.txt  |  508 ++++++
 PFE_S32G_A53_LNX_BETA_0.9.4_SCR.txt           |   43 +
 doc/FCI_API_Reference.pdf                     |  Bin 467094 -> 511152 bytes
 doc/PFE_S32G_A53_LNX_UserManual.pdf           |  Bin 136292 -> 174395 bytes
 doc/fsl-pfeng.txt                             |  309 +++-
 sw/bpool/Makefile                             |    5 +-
 sw/bpool/public/bpool.h                       |   14 +-
 sw/bpool/src/bpool.c                          |  130 +-
 sw/build_env.mak                              |   58 +-
 sw/common/Makefile                            |    5 +-
 sw/common/public/blalloc.h                    |    6 +-
 sw/common/public/ct_assert.h                  |   27 +
 sw/common/public/linked_list.h                |    4 +-
 sw/common/src/blalloc.c                       |   17 +-
 sw/elf/Makefile                               |    5 +-
 sw/elf/public/elf.h                           |   40 +-
 sw/elf/src/elf.c                              |  613 ++++----
 sw/fci/Makefile                               |    6 +-
 sw/fci/public/fci.h                           |   11 +-
 sw/fci/src/fci.c                              |   25 +-
 sw/fci/src/fci_connections.c                  |   79 +-
 sw/fci/src/fci_fp.c                           |   18 +-
 sw/fci/src/fci_fp_db.c                        |   48 +
 sw/fci/src/fci_fw_features.c                  |   17 +-
 sw/fci/src/fci_interfaces.c                   |  224 ++-
 sw/fci/src/fci_internal.h                     |    1 +
 sw/fci/src/fci_l2br.c                         |   96 ++
 sw/fci/src/fci_l2br_domains.c                 |   24 +-
 sw/fci/src/fci_qos.c                          |   11 +-
 sw/fifo/Makefile                              |    5 +-
 sw/fifo/public/fifo.h                         |    6 +-
 sw/fifo/src/fifo.c                            |   10 +-
 sw/hal/Makefile                               |    5 +-
 sw/hal/public/hal.h                           |   10 +-
 sw/linux-pfeng/Makefile                       |   52 +-
 sw/linux-pfeng/pfeng-bman.c                   |  431 ++++++
 sw/linux-pfeng/pfeng-debugfs.c                |   85 +-
 sw/linux-pfeng/pfeng-drv.c                    | 1332 +++++++++++++---
 sw/linux-pfeng/pfeng-ethtool.c                |  122 +-
 sw/linux-pfeng/pfeng-fw.c                     |   10 +-
 sw/linux-pfeng/pfeng-hif.c                    |  680 +++++----
 sw/linux-pfeng/pfeng-hw-s32g.c                |  637 --------
 sw/linux-pfeng/pfeng-hwts.c                   |  189 +--
 sw/linux-pfeng/pfeng-mdio.c                   |  144 +-
 sw/linux-pfeng/pfeng-napi.c                   |  977 ------------
 sw/linux-pfeng/pfeng-netif.c                  | 1357 +++++++++++++++++
 sw/linux-pfeng/pfeng-phylink.c                |  475 +++---
 sw/linux-pfeng/pfeng-ptp.c                    |   80 +-
 sw/linux-pfeng/pfeng.h                        |  377 +++--
 sw/oal/Makefile                               |    5 +-
 sw/oal/public/linux/errno.h                   |    9 -
 sw/oal/public/linux/stdbool.h                 |    6 -
 sw/oal/public/linux/stdint.h                  |    6 -
 sw/oal/public/linux/stdlib.h                  |    6 -
 sw/oal/public/linux/string.h                  |    6 -
 sw/oal/public/linux/unistd.h                  |    7 -
 sw/oal/public/oal_irq.h                       |    6 +-
 sw/oal/public/oal_job.h                       |    4 +-
 sw/oal/public/oal_mbox.h                      |    6 +-
 sw/oal/public/oal_mm.h                        |    4 +-
 sw/oal/public/oal_types.h                     |   26 +-
 sw/oal/public/oal_types_linux.h               |   12 +-
 sw/oal/src/oal_irq_linux.c                    |    6 +-
 sw/oal/src/oal_job_linux.c                    |    4 +-
 sw/oal/src/oal_mbox_linux.c                   |    8 +-
 sw/oal/src/oal_mm_linux.c                     |  535 +++++--
 sw/pfe_hif_drv/Makefile                       |    8 +-
 sw/pfe_hif_drv/public/pfe_hif_drv.h           |   73 +-
 sw/pfe_hif_drv/public/pfe_hif_ptp.h           |    3 +-
 sw/pfe_hif_drv/src/pfe_hif_drv_linux.c        | 1081 ++-----------
 sw/pfe_hif_drv/src/pfe_hif_ptp.c              |  114 +-
 sw/pfe_platform/Makefile                      |   21 +-
 sw/pfe_platform/hw/s32g/pfe_bmu_csr.c         |   43 +-
 sw/pfe_platform/hw/s32g/pfe_bmu_csr.h         |   24 +-
 sw/pfe_platform/hw/s32g/pfe_cbus.h            |    2 +-
 sw/pfe_platform/hw/s32g/pfe_class_csr.c       |   35 +-
 sw/pfe_platform/hw/s32g/pfe_class_csr.h       |   22 +-
 sw/pfe_platform/hw/s32g/pfe_emac_csr.c        |  411 ++---
 sw/pfe_platform/hw/s32g/pfe_emac_csr.h        |   70 +-
 sw/pfe_platform/hw/s32g/pfe_global_wsp.h      |    2 +-
 sw/pfe_platform/hw/s32g/pfe_gpi_csr.c         |   20 +-
 sw/pfe_platform/hw/s32g/pfe_gpi_csr.h         |   12 +-
 sw/pfe_platform/hw/s32g/pfe_hif_csr.c         |  389 +++--
 sw/pfe_platform/hw/s32g/pfe_hif_csr.h         |   73 +-
 sw/pfe_platform/hw/s32g/pfe_hif_nocpy_csr.c   |   44 +-
 sw/pfe_platform/hw/s32g/pfe_hif_nocpy_csr.h   |   44 +-
 sw/pfe_platform/hw/s32g/pfe_l2br_table_csr.h  |    2 +-
 sw/pfe_platform/hw/s32g/pfe_platform_master.c |  368 +++--
 sw/pfe_platform/hw/s32g/pfe_platform_slave.c  |   32 +-
 sw/pfe_platform/hw/s32g/pfe_safety_csr.c      |  233 +--
 sw/pfe_platform/hw/s32g/pfe_safety_csr.h      |   10 +-
 sw/pfe_platform/hw/s32g/pfe_tmu_csr.c         |  185 ++-
 sw/pfe_platform/hw/s32g/pfe_tmu_csr.h         |   80 +-
 sw/pfe_platform/hw/s32g/pfe_util_csr.c        |    6 +-
 sw/pfe_platform/hw/s32g/pfe_util_csr.h        |    4 +-
 sw/pfe_platform/hw/s32g/pfe_wdt_csr.c         |  123 +-
 sw/pfe_platform/hw/s32g/pfe_wdt_csr.h         |   14 +-
 sw/pfe_platform/public/pfe_bmu.h              |   34 +-
 sw/pfe_platform/public/pfe_class.h            |   41 +-
 sw/pfe_platform/public/pfe_compiler.h         |   11 +-
 sw/pfe_platform/public/pfe_ct.h               |  328 ++--
 sw/pfe_platform/public/pfe_emac.h             |  107 +-
 sw/pfe_platform/public/pfe_fp.h               |    3 +-
 sw/pfe_platform/public/pfe_fw_feature.h       |   21 +-
 sw/pfe_platform/public/pfe_gpi.h              |   14 +-
 sw/pfe_platform/public/pfe_hif.h              |   14 +-
 sw/pfe_platform/public/pfe_hif_chnl.h         |   74 +-
 sw/pfe_platform/public/pfe_hif_nocpy.h        |   10 +-
 sw/pfe_platform/public/pfe_hif_ring.h         |   20 +-
 sw/pfe_platform/public/pfe_if_db.h            |   13 +-
 sw/pfe_platform/public/pfe_l2br.h             |    7 +
 sw/pfe_platform/public/pfe_l2br_table.h       |    6 +-
 sw/pfe_platform/public/pfe_log_if.h           |   36 +-
 sw/pfe_platform/public/pfe_mac_db.h           |   50 +
 sw/pfe_platform/public/pfe_pe.h               |   29 +-
 sw/pfe_platform/public/pfe_phy_if.h           |   42 +-
 sw/pfe_platform/public/pfe_platform.h         |   21 +-
 sw/pfe_platform/public/pfe_platform_cfg.h     |    5 +-
 sw/pfe_platform/public/pfe_platform_rpc.h     |   42 +-
 sw/pfe_platform/public/pfe_rtable.h           |    4 +-
 sw/pfe_platform/public/pfe_safety.h           |   10 +-
 sw/pfe_platform/public/pfe_tmu.h              |   76 +-
 sw/pfe_platform/public/pfe_util.h             |   20 +-
 sw/pfe_platform/public/pfe_wdt.h              |    6 +-
 sw/pfe_platform/src/pfe_bmu.c                 |   68 +-
 sw/pfe_platform/src/pfe_class.c               |  180 ++-
 sw/pfe_platform/src/pfe_emac.c                |  327 +++-
 sw/pfe_platform/src/pfe_flexible_filter.c     |    4 +-
 sw/pfe_platform/src/pfe_fp.c                  |   25 +-
 sw/pfe_platform/src/pfe_fw_feature.c          |   53 +-
 sw/pfe_platform/src/pfe_gpi.c                 |   48 +-
 sw/pfe_platform/src/pfe_hif.c                 |   18 +-
 sw/pfe_platform/src/pfe_hif_chnl.c            |  157 +-
 sw/pfe_platform/src/pfe_hif_nocpy.c           |   14 +-
 sw/pfe_platform/src/pfe_hif_ring.c            |   26 +-
 sw/pfe_platform/src/pfe_idex.c                |   80 +-
 sw/pfe_platform/src/pfe_if_db.c               |   40 +-
 sw/pfe_platform/src/pfe_l2br.c                |  519 ++++++-
 sw/pfe_platform/src/pfe_l2br_table.c          |  182 ++-
 sw/pfe_platform/src/pfe_log_if.c              |  511 ++++---
 sw/pfe_platform/src/pfe_log_if_slave.c        |  352 +++--
 sw/pfe_platform/src/pfe_mac_db.c              |  451 ++++++
 sw/pfe_platform/src/pfe_pe.c                  |  219 +--
 sw/pfe_platform/src/pfe_phy_if.c              | 1002 +++++++++---
 sw/pfe_platform/src/pfe_phy_if_slave.c        |  421 +++--
 sw/pfe_platform/src/pfe_rtable.c              |  100 +-
 sw/pfe_platform/src/pfe_safety.c              |   20 +-
 sw/pfe_platform/src/pfe_spd.c                 |    6 +-
 sw/pfe_platform/src/pfe_tmu.c                 |  122 +-
 sw/pfe_platform/src/pfe_util.c                |   76 +-
 sw/pfe_platform/src/pfe_wdt.c                 |   14 +-
 sw/xfci/libfci/Makefile                       |    4 +-
 sw/xfci/libfci/public/fpp.h                   |  254 +--
 sw/xfci/libfci/public/fpp_ext.h               |  129 +-
 sw/xfci/libfci/public/libfci.h                |   22 +
 155 files changed, 12415 insertions(+), 7605 deletions(-)
 create mode 100644 PFE_S32G_A53_LNX_BETA_0.9.4_ReleaseNotes.txt
 create mode 100644 PFE_S32G_A53_LNX_BETA_0.9.4_SCR.txt
 create mode 100644 sw/common/public/ct_assert.h
 create mode 100644 sw/fci/src/fci_l2br.c
 create mode 100644 sw/linux-pfeng/pfeng-bman.c
 delete mode 100644 sw/linux-pfeng/pfeng-hw-s32g.c
 delete mode 100644 sw/linux-pfeng/pfeng-napi.c
 create mode 100644 sw/linux-pfeng/pfeng-netif.c
 delete mode 100644 sw/oal/public/linux/errno.h
 delete mode 100644 sw/oal/public/linux/stdbool.h
 delete mode 100644 sw/oal/public/linux/stdint.h
 delete mode 100644 sw/oal/public/linux/stdlib.h
 delete mode 100644 sw/oal/public/linux/string.h
 delete mode 100644 sw/oal/public/linux/unistd.h
 create mode 100644 sw/pfe_platform/public/pfe_mac_db.h
 create mode 100644 sw/pfe_platform/src/pfe_mac_db.c

diff --git a/PFE_S32G_A53_LNX_BETA_0.9.4_ReleaseNotes.txt b/PFE_S32G_A53_LNX_BETA_0.9.4_ReleaseNotes.txt
new file mode 100644
index 0000000..3230347
--- /dev/null
+++ b/PFE_S32G_A53_LNX_BETA_0.9.4_ReleaseNotes.txt
@@ -0,0 +1,508 @@
+****************************************************************************************************
+Release Notes for NXP PFE S32G A53 LNX swv: 0.9.4 BETA
+
+NXP and the NXP logo are trademarks of NXP.
+
+All product or service names are the property of their respective owners.
+Copyright (C) 2018-2021 NXP
+****************************************************************************************************
+
+========================================================
+Installation
+========================================================
+Install the package into the desired directory and follow the enclosed user manual.
+
+========================================================
+Release Location:
+========================================================
+
+This BETA 0.9.4 release sources are internally stored at location:
+https://bitbucket.sw.nxp.com/projects/AUTO_ETH/repos/pfe/browse
+GIT release tag: BLN_PFE-DRV_S32G_A53_LNX_BETA_0.9.4
+
+========================================================
+Release Specifics:
+========================================================
+
+- This release was developed and tested with:
+    - Geany IDE version 1.37
+    - editor VIM - Vi IMproved 8.2
+    - NXP Auto Linux BSP 28
+    - GCC 9.2.0
+- This release was developed and tested using:
+    - Evaluation board: S32G-VNP-EVB
+        S32GRV-PLATEVB 700-30081
+        X-S32G-PROCEVB-S 700-32170
+
+- This release has BETA quality status in terms of testing and quality documentation
+
+========================================================
+Supported Features:
+========================================================
+
+- Integrates the S32G PFE Ethernet driver
+- Supports slow-path functionality
+- Supports fast-path features and configuration API
+
+========================================================
+Supported Derivatives:
+========================================================
+
+- PS32G274ABVUC 0P77B Rev. 2.0
+
+========================================================
+Directory Structure:
+========================================================
+
+- sw/bpool/ library sources (dependency for linux-pfeng)
+- sw/common/ library sources (dependency for linux-pfeng)
+- sw/linux-pfeng/ linux kernel driver sources (the driver project)
+- sw/elf/ library sources (dependency for linux-pfeng)
+- sw/fifo/ library sources (dependency for linux-pfeng)
+- sw/hal/ library sources (dependency for all other modules)
+- sw/oal/ library sources (dependency for all other modules)
+- sw/pfe_hif_drv/ library sources (dependency for linux-pfeng)
+- sw/pfe_platform/ library sources (dependency for linux-pfeng)
+- sw/fci/ library sources (dependency for linux-pfeng)
+- sw/xfci/libfci/ library sources (FCI library and dependency for linux-pfeng)
+- doc/ user's manual, FCI API Reference manual and device-tree
+- PFE_S32G_A53_LNX_BETA_0.9.4_ReleaseNotes.txt: this file
+- LICENSE-GPL2.txt: License text file
+- PFE_S32G_A53_LNX_BETA_0.9.4_SCR.txt: Software Content Register
+
+========================================================
+Compiler Options:
+========================================================
+
+Compiler options are described within Makefile located
+in every SW module directory.
+
+========================================================
+Assumptions:
+========================================================
+
+Compatible firmware: BLN_PFE-FW_S32G_BETA_0.9.4
+
+========================================================
+Known Issues
+========================================================
+
+[AAVB-2073] - [DPAA_QNX] Crippled fragmented reply on first ping after MTU change
+[AAVB-2149] - [PFE_LINUX]Promiscuous mode not working
+[AAVB-2320] - [PFE_LINUX] pfeng: mtu setting doesn't work of value < 68
+[AAVB-2326] - [PFE_PLATFORM] Logical interface 'discard' API missing in slave variant
+[AAVB-2386] - [PFE_PLATFORM] offsetof in ct_assert incompatibe with C language
+[AAVB-2445] - [ALB 25.0]Observed zero throughput numbers for Rx traffic while measuring IPerf3 UDP self termination traffic for 1518B frame size
+[AAVB-2448] - Observed "Zero Throughput numbers" while measuring IPv4/IPv6 routing Bi-directional RAW/UDP traffic
+[AAVB-2695] - [ALB 27.0] [Regression]: Observed ""0"" throughput number for IPv4 64B while measuring Slow path routing performance
+[AAVB-2973] - [PFE_DRV_LINUX] Configured Bridge outputs periodic backtrace
+[AAVB-3187] - [BSP28]Observed zero throughput results for slow path bi-directional tests using spirent
+[AAVB-3192] - [BSP28] Observed zero throughput results while measuring IPerf3 UDP bi-directional ROUTING throughput results
+[AAVB-3196] - [PFE_DRV_LINUX] each pfeX interface should be found by of_find_net_device_by_node 
+[AAVB-3197] - [PFE_DRV_LINUX] pinctrl-0/pinctrl-names properties are ignored
+[AAVB-3198] - [PFE_DRV_LINUX] phy-mode = "rgmii-id" makes the rgmii interface unusable
+
+========================================================
+3rd Party Issues
+========================================================
+
+========================================================
+What's Modified in BETA_0.9.4
+========================================================
+
+# Bug
+[AAVB-2224] - [PFE_LINUX] named memory API cannot be divided
+[AAVB-2313] - [PFE_PLATFORM] In case of error pfe_class_create causes destruction of a mutex which does not exist
+[AAVB-2430] - [PFE_PLATFORM] FCI conntrack query returns wrong IP address
+[AAVB-2441] - [ALB 26.0] VLAN forwarding is not working for pfe0 interface (pfe2 is working)
+[AAVB-2443] - [ALB 25.0]Observed "ping: getnameinfo: Temporary failure in name resolution" while doing ping6 from the DUT
+[AAVB-2446] - [ALB 25.0]ping6 traffic is started working when I run tcpdump on DUT,while doing ping6 from the Linux Host
+[AAVB-2447] - [ALB 25.0]IPerf3 session is not getting connected from the DUT while running UDP bi-directional traffic,if I start IPerf client in Linux Host first, then Iperf client in S32G
+[AAVB-2468] - [S32G Linux] SW forwarding doesn't work well with IPv6
+[AAVB-2469] - [PFE_LINUX] pfeng: udp reassembling failure
+[AAVB-2526] - [PFE_LINUX] pfeng: interface autonegotiation doesn't follow SGMII possibilities
+[AAVB-2538] - [PFE_DRV_LINUX] IPv6 fast-forward is not working
+[AAVB-2624] - [PFE_PLATFORM] Errata ERR050221 workaround: driver shall ensure that safety features are enabled
+[AAVB-2701] - [ALB 27.0-RDB2]Sometimes S32G DUT is getting hanged while adding 100 flexible parser rules
+[AAVB-2720] - [PFE_LINUX] pfeng: kernel 4.19: driver backtrace when util fw version requested
+[AAVB-2914] - [PFE_LINUX] pfeng: insmod reports success ($? = 0) even driver probe failed
+[AAVB-2944] - [PFE_FW] VLAN QinQ doesn't work with 802.1AD ethertype
+[AAVB-2983] - [PFE_PLATFORM] Adding new multicast will break existing multicast streams
+[AAVB-3100] - [PFE_PLATFORM] libFCI: LOGIF QUERY returns bad/wrong data for some match rule arguments
+[AAVB-3195] - [PFE_DRV_LINUX] devm_get_clk_from_child fails if the interface is rgmii-id/rgmii-txid/rgmii-rxid
+[AAVB-3200] - Observed "ADDR: No space left on device" while trying to change the MAC address S32G interface
+[AAVB-3244] - [PFE_PLATFORM] Pause frame is incorrectly generated and blocks transmittion
+[AAVB-3326] - [PFE_LINUX] Slave: hardcoded Master's HIF destination
+[AAVB-3329] - [PFE_PLATFORM] FPP_IF_LOOPBACK flag of logical interfaces is seemingly never set.
+[AAVB-3330] - [PFE_LINUX] Crash in qdisc on tx ring overrun (high rate ip fwding 2 opposite flows)
+
+# New Feature
+[AAVB-1924] - [PFE_PLATFORM] Enable by default the TTL decrement when the packet is routed
+[AAVB-2201] - [PFE_PLATFORM] Flexible Parser statistics API
+[AAVB-2210] - [PFE_PLATFORM] Add L2 bridge MAC table flush API
+[AAVB-2295] - [PFE_LINUX] pfeng: add SGMII autonegotiation
+[AAVB-2465] - [PFE_PLATFORM] Pause Support
+[AAVB-2826] - [PFE_DRV_LINUX] Mulitple HIF channel support
+[AAVB-2828] - [PFE_DRV_LINUX] Multiclient HIF support
+[AAVB-2860] - [PFE_DRV_QNX] eMAC multicast group membership
+[AAVB-3276] - [PFE_DRV_LINUX] Suspend to RAM support
+[AAVB-3277] - [PFE_DRV_LINUX] Integrate new SERDES driver
+[AAVB-3278] - [PFE_DRV_LINUX] Kernel 5.10 support
+
+# Improvement
+[AAVB-2129] - [PFE_Linux] MTU runtime configuration
+[AAVB-2391] - [PFE_LINUX] pfeng: add per-HIF statistics
+[AAVB-2410] - [PFE_PLATFORM] Make routing table configurable
+[AAVB-2470] - [PFE_LINUX] pfeng: move of HIF ring allocated structs from uncachable memory to cachable
+[AAVB-2471] - [PFE_LINUX] pfeng: allocate new RX buffers in chunks
+[AAVB-2475] - [PFE_LINUX] Pause Support
+[AAVB-2595] - [PFE_LINUX] pfeng: manage mdio_bus independently
+[AAVB-2601] - [PFE_LINUX] pfeng: pfe_hif_drv: refactor linux hif driver to use skbuffs
+[AAVB-2644] - [PFE_LINUX] HIF rings should be allocated from cached coherent memory
+[AAVB-2863] - [PFE_DRV_LINUX] BMU memory allocator change
+[AAVB-2991] - [PFE_FW] Discard packets that do not match the IEEE 802.1Q (VLAN) specifications
+[AAVB-2992] - [PFE_FW] Discard packets that do not match the IEEE 802.1AS specifications
+[AAVB-2994] - [PFE_FW] The network stack shall drop Ethernet frames with two or more VLAN tags
+[AAVB-2995] - [PFE_FW] Drop Ethernet frames without a VLAN tag except selected cases
+[AAVB-3049] - [LINUX_PFE] Linux driver includes some user space header files
+[AAVB-3056] - [PFE_LINUX][PFE_QNX][PFE_PLATFORM] clean introduced warnings
+[AAVB-3059] - [PFE_LINUX] Use triggered DMA instead of polling
+[AAVB-3060] - [PFE_LINUX] Interrupt coalescing
+[AAVB-3073] - [PFE_LINUX] Implement page allocation/reuse scheme for Rx buffers
+[AAVB-3074] - [PFE_LINUX] PFE descriptor usage optimization
+[AAVB-3077] - [PFE_PLATFORM] Should support APIs to enable the EMAC loop-back in slave mode
+[AAVB-3098] - [PFE_LINUX] Optimize rx buffer handling, drop embedded skb, clean up pfeng-hif
+[AAVB-3139] - [PFE_LINUX] pfeng: clean clocks on exit
+[AAVB-3173] - [PFE_LINUX] pfeng: get rid of use emac_regs
+[AAVB-3194] - [PFE_LINUX] build warnings being treated as errors
+[AAVB-3205] - [PFE_LINUX] Enable DMA coherency from driver
+[AAVB-3221] - [PFE_PLATFORM] Fix build warnings for SLAVE mode
+[AAVB-3233] - [PFE_DRV_QNX, PFE_DRV_LINUX] Enable print of diagnostic messages
+[AAVB-3300] - [PFE_LINUX] pfeng: support S32G2 cut 1.1/cut 2.0 dynamically
+[AAVB-3322] - [PFE_PLATFORM] API to get rx/tx packet count
+
+========================================================
+What's Modified in BETA_0.9.3
+========================================================
+
+# Bug
+[AAVB-2910] - [PFE_LINUX] pfeng: Slave: Backtraces on MII ioctl
+[AAVB-2965] - Linux pfeng module crash at remove
+
+# New Feature
+[AAVB-1376] - [PFE_QNX][PFE_PLATFORM] Fast-path IPv4/IPv6 Forwarder/Router
+[AAVB-1423] - [PFE_QNX][PFE_PLATFORM] Implement the conntrack manipulation FCI API
+[AAVB-1429] - [PFE_PLATFORM][PFE_QNX] Extend rtable API by query functions
+[AAVB-1495] - [PFE_PLATFORM] Create L2 bridge SW module
+[AAVB-1509] - [PFE_PLATFORM][PFE_QNX] Implement L2 Bridge FCI API
+[AAVB-2340] - [PFE_FW]Firmware variants support shall be added.
+[AAVB-2500] - [PFE_QNX] Add IEEE1588 timestamping support
+[AAVB-2746] - [PFE_PLATFORM] Allow use of NAT with IPv6
+[AAVB-2836] - [PFE_DRV_LINUX] L2 bridge static entry configuration using FCI
+[AAVB-2937] - [PFE_FW] FlexibleFilter per physical interface
+
+# Improvement
+[AAVB-2362] - [PFE_DRV_LINUX] Multicast address management
+[AAVB-2630] - [PFE_LINUX] pfeng: use EMAC port mode specific clocks
+[AAVB-2670] - [PFE_FW] Send egress timestamp report to respective HIF channel
+[AAVB-2818] - [PFE_FW] L3 router with NAT
+[AAVB-2837] - [PFE_DRV_LINUX] PFE 802.1as API
+[AAVB-2845] - [PFE_DRV_LINUX] eMAC multicast group memebership support
+[AAVB-2869] - [PFE_FW] VLAN tagging of L3 routed traffic
+[AAVB-2986] - [PFE_PLATFORM] fix linux build warnings
+[AAVB-2998] - [PFE_LINUX] pfeng: select correct TX clock name
+
+========================================================
+What's Modified in BETA_0.9.2
+========================================================
+
+# Improvement
+[AAVB-1886] - [PFE_PLATFORM] Optimize BD ring access
+[AAVB-1972] - [PFE_LINUX] add S/G support to TX path
+[AAVB-2560] - [PFE_PLATFORM] Add support for adding logical interfaces to UTIL PHY
+[AAVB-2570] - [PFE_PLATFORM] Dispatch HIF traffic using physical interfaces
+[AAVB-2623] - [PFE_LINUX] DMA32 memory should be preferred for rx buffers
+[AAVB-2669] - [PFE_LINUX] pfeng: notice about errata fix usage
+
+# Bug
+[AAVB-2499] - [S32G EVB:ALB 25]Low throughput observed for Bridge scenario
+[AAVB-2523] - [PFE_LINUX] pfeng: phylink backtraces on interface changes
+[AAVB-2586] - [PFE_PLATFORM] PTP-over-Ethernet + VLAN stall
+[AAVB-2610] - [PFE_LINUX] Oal memory cached interface provides non-cached memory
+[AAVB-2614] - [PFE_PLATFORM] Incorrect shaper weight calculation
+[AAVB-2642] - [PFE_LINUX] pfeng: fix 100Base-T1 support
+[AAVB-2643] - [PFE_LINUX] pfeng: fix rgmii-id, rgmii-txid, rgmii-rxid support
+
+# New Feature
+[AAVB-1945] - [PFE_FW,PFE_PLATFORM] Allow adding HIF interfaces to bridge (domain)
+[AAVB-2211] - [PFE_PLATFORM] Add API to get PE firmware version
+[AAVB-2276] - [PFE_FW]L2 bridge learning shall be switchable per port
+
+========================================================
+What's Modified in BETA_0.9.1
+========================================================
+
+# Improvement
+[AAVB-2067] - [PFE_LINUX][PFE_QNX] Notify FCI clients about FCI shutdown
+[AAVB-2568] - [PFE_LINUX] pfeng: enable util fw loading
+[AAVB-2571] - [PFE_PLATFORM] Firmware-based HIF traffic priority mgmt
+[AAVB-2575] - [PFE_PLATFORM] Disable HIF stall workaround
+
+# Bug
+[AAVB-2442] - [ALB 25.0 ]Unable to create bridge configuration
+
+# New Feature
+
+[AAVB-2206] - [PFE_PLATFORM] Egress QoS topology change API
+[AAVB-2472] - [PFE_FW] Implement SPD for IPsec
+[AAVB-2510] - [PFE_LINUX] pfeng: support for master/slave mode
+[AAVB-2534] - [PFE_QNX] PFE isolation support
+[AAVB-2561] - [PFE_PLATFORM] Egress QoS FCI API
+
+========================================================
+What's Modified in BETA_0.9.0
+========================================================
+
+# Improvement
+[AAVB-2436] - [PFE_PLATFORM] Code cleanup
+[AAVB-2494] - [PFE_LINUX] Fix mistake in the sysfs + add new syfs files
+
+# Bug
+[AAVB-2008] - [PC-FPGA-PFE-Linux]: Bridging of the PFE-interfaces eth0/pfe-0 and rename4/pfe-1 is NOT WORKING as expected.
+[AAVB-2297] - [PFE Linux] periodic load/unload of driver sometimes fails
+[AAVB-2345] - [PFE_PLATFORM] Wrong IP address version detection
+[AAVB-2380] - [PFE_LINUX] pfeng: incorrectly use highest speed of PHY
+[AAVB-2444] - [ALB 25.0] Observed crash dump while  running IPerf3 routing traffic 
+[AAVB-2501] - [S23G RDB - ALB25.0]: tcpdump crash on pfe0/pfe2 while running the IPv4 Fast path UDP traffic
+
+# New Feature
+[AAVB-1951] - [PFE_PLATFORM] Add FCI API to get physical/logical interface statistics
+[AAVB-2190] - [PFE_PLATFORM] Let FCI API enable and disable log+phy interfaces
+[AAVB-2212] - [PFE_PLATFORM] Port mirroring control
+[AAVB-2213] - [PFE_PLATFORM] Port mirroring FCI API
+[AAVB-2225] - [PFE_PLATFORM] Multi-instance HIF driver
+[AAVB-2272] - [PFE_PLATFORM] Show required fw version
+[AAVB-2348] - [PFE_DRV_LINUX] Add support for kernel 5.4 to PFE driver
+[AAVB-2423] - [PFE_PLATFORM] Arbitrary data passing (FCI)
+
+========================================================
+What's Modified in EAR_0.8.0 Patch1
+========================================================
+
+# List of Patched Files
+sw/xfci/libfci/Makefile
+sw/pfe_platform/hw
+sw/pfe_platform/hw/s32g
+sw/pfe_platform/hw/s32g/pfe_platform_master.c
+sw/pfe_platform/hw/s32g/pfe_emac_csr.c
+sw/pfe_platform/hw/s32g/pfe_emac_csr.h
+sw/pfe_platform/public/pfe_platform_cfg.h
+
+doc/PFE_S32G_A53_LNX_UserManual.pdf
+
+# Improvement
+[AAVB-2424] - [PFE_LINUX] libfci: allow building library in Yocto
+[AAVB-2390] - [PFE_LINUX] UM: add FCI chapter
+
+========================================================
+What's Modified in EAR_0.8.0
+========================================================
+
+# Improvement
+[AAVB-1584] - [PFE_LINUX] pfeng: sync HIF api
+[AAVB-1540] - [PFE_LINUX] create preallocated dma buffer for TX path
+[AAVB-1541] - [PFE_LINUX] user manual: fix formatting
+[AAVB-1572] - [PFE_LINUX] don't copy frame data to skbuf on receive
+[AAVB-1657] - [PFE_PLATFORM] CLASS PE Interrupt Dispatcher
+[AAVB-1878] - [[PFE_PLATFORM][PFE_LINUX] oal_irq: allow callback mask management
+[AAVB-1910] - [[PFE_QNX][PFE_LINUX] OAL API to manage named memory
+[AAVB-1913] - [[PFE_LINUX] Implement named memory management API
+[AAVB-1977] - [[PFE_LINUX] remove debug ifs component when VDK released
+[AAVB-2322] - [PFE_PLATFORM] Statistics for phy/log interface are reset with all updates on given interface
+[AAVB-2332] - [PFE_PLATFORM] Add FCI usage examples, stage 1
+[AAVB-2333] - [PFE_PLATFORM] Add FCI usage examples, stage 2
+[AAVB-2342] - [PFE_PLATFORM] HIF SC TX workaround
+
+# Bug
+[AAVB-2142] - [PFE_Linux] 32k ping not working on pfe1
+[AAVB-2268] - [PFE_PLATFORM] FPP_CMD_IPVx_RESET does not remove all routes
+[AAVB-2292] - [PFE_PLATFORM] FCI conntracks query doesn't provide route ID
+[AAVB-2305] - [PFE_LINUX] Reserved memory is detected one byte short then declared in DT
+[AAVB-2312] - [PFE_LINUX] pfeng: fix clause 45 support
+[AAVB-2379] - [PFE_LINUX] pfeng: evb: pfe2 clock setting looped forever on console
+
+# New Feature
+[AAVB-2202] - [PFE_PLATFORM] Multi-channel HIF driver
+[AAVB-2273] - [PFE_FW] Logical interface shall have configurable drop action
+[AAVB-2283] - [PFE_PLATFORM][PFE_QNX] Performance improvements stage 2
+[AAVB-2325] - [PFE_PLATFORM] HIF traffic steering
+
+========================================================
+What's Modified in PRE-EAR_0.4.4
+========================================================
+
+# Bug
+
+[AAVB-2014] - [PFE_PLATFORM] pfe_log_if_create should not call pfe_phy_if_add_log_if
+[AAVB-2028] - [PFE_FW][PFE_PLATFORM] PFE HW calculates incorrect IPv4 checksums for small frames
+[AAVB-2063] - [PFE_PLATFORM] Physical interfaces are not created correctly
+[AAVB-2107] - [PFE_PLATFORM] mutex double locked from platform during fci call
+[AAVB-2112] - [PFE_LINUX] libfci_cli does compile under linux
+[AAVB-2113] - [PFE_PLATFORM] TMU configuration
+[AAVB-2131] - [PFE Linux] Fatal errors on driver unload
+[AAVB-2149] - [PFE_LINUX] Promiscuous mode not working
+[AAVB-2150] - [PFE_LINUX] driver crashes when detected non-compatible fw
+[AAVB-2258] - [PFE_PLATFORM] pfe_l2br_table_init_cmd is writing wrong flags
+[AAVB-2259] - [PFE_PLATFORM] Bridge accesses out of boundary memory
+[AAVB-2261] - [PFE_PLATFORM] The initialization of L2 bridge is corrupted by soft reset
+[AAVB-2289] - [PFE_LINUX] FCI is not functional
+
+# New Feature
+
+[AAVB-1968] - [PFE_PLATFORM] HIF channel reset
+[AAVB-1985] - [PFE_PLATFORM] Split pfe_platform.c to master and slave variant
+[AAVB-1990] - [PFE_PLATFORM][PFE_QNX] FCI: Create core API to broadcast messages to all clients
+[AAVB-1992] - [PFE_PLATFORM] Multi-instance physical interfaces
+[AAVB-2016] - [PFE_PLATFORM] Multi-instance logical interfaces
+[AAVB-2019] - [PFE_PLATFORM] Add mdio Clause 45 support
+[AAVB-2053] - [PFE_FW] Implement exception handlers
+[AAVB-2054] - [PFE_FW] Implement a SW watchdog
+[AAVB-2075] - [PFE_FW] Add measurement of frame processing time by FW
+[AAVB-2111] - [PFE_PLATFORM] Extend interface-related RPC commands
+[AAVB-2189] - [PFE_LINUX] pfeng: add mdio support
+[AAVB-2199] - [PFE_FW]Add support for multicast replication
+[AAVB-2231] - [PFE_LINUX] Add total bytes into SG list in TX path
+[AAVB-2298] - [PFE_LINUX] pfeng: add more debug objects
+[AAVB-2300] - [PFE_LINUX] pfeng: support for GCC 9.2.0
+
+# Improvement
+
+[AAVB-1334] - [PFE_PLATFORM] Unify the elf module
+[AAVB-1392] - [PFE_PLATFORM] Do not use -1 as unsigned integer
+[AAVB-1529] - [PFE_PLATFORM] HIF stops operating under heavy traffic conditions
+[AAVB-1656] - [PFE_QNX] Proper mbuf dequeue (IFQ_DEQUEUE)
+[AAVB-1659] - [PFE_PLATFORM] Watchdog timers
+[AAVB-1670] - [PFE_PLATFORM] Sync PE memory updates
+[AAVB-1974] - [PFE_LINUX] pfeng: optimize config storages
+[AAVB-1994] - [PFE_PLATFORM] DMEM heap allocator
+[AAVB-2015] - [PFE_PLATFORM] Physical and logical interface database
+[AAVB-2061] - [PFE_PLATFORM] Review registers against NPU v7.14
+[AAVB-2064] - [PFE_PLATFORM] Improve classifier startup
+[AAVB-2098] - [PFE_PLATFORM] Unify phy_if/log_if db between platfrom driver and fci
+[AAVB-2117] - [PFE_PLATFORM] Remove LS1012 code
+[AAVB-2118] - [PFE_PLATFORM] Allow static block allocator instances
+[AAVB-2147] - [PFE_FW] implement aggregated CLASS PE statistics
+[AAVB-2153] - [PFE_PLATFORM][PFE_FW] Move compiler checks out of pfe_ct.h
+[AAVB-2165] - [PFE_PLATFORM,PFE_LINUX,PFE_MCAL,PFE_QNX] Create global configuration header
+[AAVB-2169] - [PFE_PLATFORM] Extend EMAC text statistics
+[AAVB-2170] - [PFE_FW]Add CPU ID to the firmware.
+[AAVB-2241] - [PFE_PLATFORM] Update FCI reference
+[AAVB-2248] - [PFE_PLATFORM] Extend the sysfs by debug registers
+[AAVB-2250] - [PFE_PLATFORM] Update libfci doc to correct bridge add and bridge update order.
+[AAVB-2252] - [PFE_FW]Allow to pass a 32-bit number together with error message through FP_ERROR
+[AAVB-2302] - [PFE_LINUX] pfeng: add libfci build
+
+========================================================
+What's modified in PRE-EAR_0.4.3
+========================================================
+# Bug
+AAVB-1983	[PFE_LINUX] get driver compilable without extra options
+AAVB-1984	[PFE_LINUX] fix BMU2 buffers error
+AAVB-1989	[PFE_FW] Missing cthdr field in the pfe_ct_version_t
+AAVB-2042	[PFE_LINUX] pfeng: unloading driver never finish
+
+# Improvement
+AAVB-1640	[PFE_LINUX] Create oal util for linux
+AAVB-1665	[PFE_LINUX] pfeng: add FCI subsystem
+AAVB-1914	[PFE_FW] Error reporting
+AAVB-1944	[PFE_LINUX] Create libfci for Linux
+AAVB-2004	Update help text for libfci_cli.
+AAVB-2051	[PFE_LINUX] pfeng: set explicit interface names
+AAVB-2052	[PFE_PLATFORM] oal:mbox: implement timers for Linux
+AAVB-2060	[PFE_LINUX] oal:thread: correctly signal thread join on linux
+AAVB-2094	[PFE_FW] Implement flexible parser
+AAVB-2119	[PFE_PLATFORM][PFE_LINUX][PFE_MCAL] remove VDK support
+AAVB-2146	[PFE_LINUX] pfeng: S32G bringup
+
+========================================================
+What's modified in PRE-EAR_0.4.2
+========================================================
+# Bug
+n/a
+
+# Improvement
+[AAVB-1387] [PFE_PLATFORM] Ensure correct HIF driver worker thread scheduling
+[AAVB-1427] [PFE_PLATFORM] Make FCI endpoint OS-independent
+[AAVB-1484] [PFE_PLATFORM] Optimize frequently used structures
+[AAVB-1521] [PFE_PLATFORM] Set default interface operational mode when interface not being used
+[AAVB-1536] [PFE_PLATFORM] oal_msg: improve msg_signal
+[AAVB-1545] [PFE_PLATFORM] Make NULL argument checks switchable
+[AAVB-1548] [PFE_PLATFORM] Rework the get_text_stat() functions
+[AAVB-1553] [PFE_PLATFORM] HIF polling configurable
+[AAVB-1559] [PFE_PLATFORM] Move HIF header types to pfe_ct.h
+[AAVB-1621] [PFE_PLATFORM] Define firmware-driver control interface
+[AAVB-1633] [PFE_PLATFORM] Sync with latest design (1.0.4)
+[AAVB-1641] [PFE_PLATFORM] Get real system clock frequency for TMU shaper configuration
+[AAVB-1648] [PFE_QNX][PFE_PLATFORM] Thread driven OAL IRQ
+[AAVB-1650] [PFE_LINUX] Sync OAL IRQ module
+[AAVB-1651] [PFE_PLATFORM] HIF Interrupt Dispatcher
+[AAVB-1652] [PFE_PLATFORM] BMU Interrupt Dispatcher
+[AAVB-1654] [PFE_PLATFORM] Remove HIF DRV worker thread
+[AAVB-1655] [PFE_PLATFORM] Init PFE memories before soft reset
+[AAVB-1658] [PFE_PLATFORM] HIF NOCPY Interrupt Dispatcher
+[AAVB-1663] [PFE_PLATFORM][PFE_QNX] Create deferred job OAL abstraction module
+[AAVB-1871] [PFE_PLATFORM] Return all HIF NOCPY BMU buffers on shutdown
+[AAVB-1882] [PFE_PLATFORM] Fix HIF and HIF NOCPY interrupts
+[AAVB-1887] [PFE_LINUX][PFE_PLATFORM] pfeng: integrate enhanced irq manager
+[AAVB-1892] [PFE_PLATFORM] Uninstall IRQ when BMU instance is being destroyed
+[AAVB-1896] [PFE_PLATFORM] Global interrupt dispatcher
+[AAVB-1903] [PFE_PLATFORM] Improve RX buffer management
+[AAVB-1906] [PFE_PLATFORM] PFE AXI address range restriction
+[AAVB-1919] [PFE_PLATFORM] Out of HIF RX buffers event detection
+[AAVB-1925] [PFE_PLATFORM] RX termination
+[AAVB-1953] [PFE_QNX][PFE_LINUX][PFE_PLAFORM] Remove compiler warnings
+[AAVB-1962] [PFE_PLATFORM] More robust HIF ring handling
+
+# New Feature
+[AAVB-1435] [PFE_FW] Prepare statistics gathering
+[AAVB-1499] [PFE_PLATFORM][PFE_QNX][PFE_LINUX] Bind PFE logical interfaces with HIF driver clients
+[AAVB-1608] [PFE_LINUX][PFE_PLATFORM][PFE_QNX] support VDK platform
+[AAVB-1629] [PFE_PLATFORM] Create the TLITE platform driver
+[AAVB-1660] [PFE_PLATFORM] Fabric parity protection
+[AAVB-1920] [PFE_PLATFORM] Ignore the ELF section MIPS.abiflags
+[AAVB-1928] [PFE_PLATFORM][PFE_FW] Add HIF channel ID to HIF TX header (pfe_ct.h)
+[AAVB-1935] [PFE_PLATFORM][PFE_FW] Define IHC flags within HIF TX and RX headers
+[AAVB-1936] [PFE_PLATFORM] Implement the IHC API
+
+
+========================================================
+What's modified in PRE-EAR_0.4.0
+========================================================
+
+# Bug
+AAVB-1422 [PFE_PLATFORM] Read beyond size of object
+
+# New Feature
+AAVB-1156 [PFE_PLATFORM][PFE_QNX] Port the PFE HW library to QNX environment
+AAVB-1157 [PFE_PLATFORM][PFE_QNX] Import the HW initialization module
+AAVB-1158 [PFE_PLATFORM][PFE_QNX] Import the HIF driver
+AAVB-1159 [PFE_PLATFORM][PFE_QNX] Import the firmware driver
+AAVB-1300 [PFE_PLATFORM][PFE_QNX] Add HIF channel abstraction class
+AAVB-1301 [PFE_PLATFORM][PFE_QNX] OS abstraction
+AAVB-1337 [PFE_PLATFORM] Update the pfe_platform to support the latest x86 FPGA HW
+AAVB-1366 [PFE_PLATFORM] Make the HIF working on x86 FPGA HW
+AAVB-1378 [PFE_LINUX] Make sources Linux compilable
+AAVB-1486 [PFE_PLATFORM][PFE_QNX] Create SW module for L2 bridge tables
+AAVB-1488 [PPFE_LINUX] Implement PFE linux driver core
+AAVB-1498 [PFE_QNX][PFE_PLATFORM] Create PFE interface representation type
+
+# Improvement
+AAVB-1388 [PFE_PLATFORM][PFE_QNX] Command-line build
+AAVB-1391 [PFE_PLATFORM] Replace native types by custom types
+AAVB-1397 [PFE_PLATFORM][PFE_QNX] Make RELEASE as default build profile
+AAVB-1398 [PFE_PLATFORM][PFE_QNX] Update headers in all deliverables
+AAVB-1444 [PFE_PLATFORM] Simplify rtable entries representation
+AAVB-1463 [PFE_PLATFORM] Improve PFE HIF ring handling
+AAVB-1466 [PFE_PLATFORM] HIF driver improvement
+AAVB-1534 [PFE_PLATFORM] Generalize the HW initialization
+
diff --git a/PFE_S32G_A53_LNX_BETA_0.9.4_SCR.txt b/PFE_S32G_A53_LNX_BETA_0.9.4_SCR.txt
new file mode 100644
index 0000000..70a9ca7
--- /dev/null
+++ b/PFE_S32G_A53_LNX_BETA_0.9.4_SCR.txt
@@ -0,0 +1,43 @@
+NXP Software Content Register
+
+Release Name:           PFE-DRV_S32G_A53_LNX_BETA_0.9.4
+
+Outgoing License:       GPL-2.0
+
+Package:                PFE-DRV_S32G_A53_LNX
+    Description:        The PFE Linux driver
+    Version:            BETA 0.9.4
+    License:            GPL-2.0
+    Format:             source code
+    Release Location:   CAF
+
+Component:              LINUX_PFENG
+    Location:           sw/linux-pfeng/
+    Description:        Linux NAPI ethernet driver
+    License:            GPL-2.0
+
+Component:              PFE_PLATFORM
+    Location:           sw/pfe_platform/
+                        sw/pfe_hif_drv/
+    Description:        PFE platform
+    License:            GPL-2.0
+
+Component:              SUPPORT_LIBS
+    Location:           sw/bpool/
+                        sw/common/
+                        sw/elf/
+                        sw/hal/
+                        sw/oal/
+                        sw/fifo/
+    Description:        PFE platform dependant library
+    License:            GPL-2.0
+
+Component:              FCI
+    Location:           sw/fci/
+                        sw/xfci/
+    Description:        Fast control interface library
+    License:            GPL-2.0
+
+Component:              ct_assert.h
+    Description:        Compile-time assert implementation
+    License:            GNU All-Permissive License
diff --git a/doc/FCI_API_Reference.pdf b/doc/FCI_API_Reference.pdf
index 93fe5630a9d2b6ba2e60e63b8d00436943fd4dea..bcc8d0a240e20ec26affd15e657e7fe33e771140 100644
GIT binary patch
delta 437942
zcmZ5`V~{3I)aA5o+vd~Ov~AnAt!LVtwr$(C?Vh%6O}l&N{WfAZcK>AEd$OuBs<Ptb
zxhE^7AHOc0C{6^FoilZw5tJ6FrKf<$jqW#Fdu#Fz`t=o8A&rh24$CHIC_t`nna8kz
zNekL})q8Vi>0*Je(8oI7fOHqlx7u^E>Ed^l4n2}?6v;Xn>`c#WM1YnhRXE>YB++X=
zflZ08LWngR%`6LR-h?MPUIkNUzH(rk-k37pr+e$9e8a602_aj?OcVx$!YFM8aRHFr
z%EIXq5Lu1~yJlFmDGD<a5cueVjEk1y&&^?nRC>_wKm0Oh&gB#gdJTM<f~Dl<1fvU>
z7xiod)fuA5Hg;sdfNmQ@@t>nWpbW7&<BH?e1>`=&cNza820MO04gRq`YT4e0j7<R`
zRH2KwBVln1g@C9CR|^L!C1yY<a{RymGiH}`48UW83N#T%A`i^OUZZ7{4MDa8UDPEZ
zh0aQu1IZtdQw2$Cj_D6Ts`iU6kf;OqHjU1>0|QZO3WEjhu)IMwqBik#4bUG1BNQSa
zBT-oDqmD*a98*OLq#zAcnj6z}#6TYBf|*hr_Y77Qq(tM21{ns5cYzA8VLO7vS0(gC
zmuZHy!C9KcGqgDY^mfs$wWtb;Ksm(`z#khxKz@z2MO2s+MX7?5yVT=Zfwu2YAy2EZ
zim+o9(i3O00^IU5T>v<~OL0*Fznt6Dtpf4jO6O)|!uF77=|Bwn4iUl-4j(9waUUP#
z2eH5(86ja|y^(;1sIcBdL%Y*>Exab3VICG9w$H!1Gl1P6UygpgWcrP*4p6m>NsTY<
za5L@U(-5nC`la>lG1EKs?Ge*~*Vo1_8%+Yz)r4c`{2T%XwGgB(#0}hcFw?FWnWKL`
z#CB8EO+a16X8jN4u~r|#GCMa2)<$}rI}^qBt$sv3O{oH}h1se2!>1|4E*f5K#kZah
zUFH2^9}N?U%UX!b{u0|FT%g@8aN}-0vKF9kXacvy^;%Vc6IXZAE45S>&cG6%45GN@
ztg4>)WxI;m!3k$QBE&^Z#6`lGjC-oc8Gj0)$&c7vTt?We!|M^6`u7y(X}IwcLsOiz
zBFwA!&UauF>=!u+rri4^8yy-3-7r7exlV_VWqCuC#aS5(5AEcogfol5#ZR3pw|zgd
zoD0}bSVcWZHm%q9V2fc3f{kipHZ$x*2)?3jXEO%MF-$ztMzgU?G?~+kO+U(;hpL6F
zB0$Y`Pu#Ngv=?S8-QZQjW0(Bo+C!(5YuA2f(=D)#N_sB%u$slC^(bI^M!^Hzi{f6U
z63)Kj0>|t%*j%7g8SuKQnpB^xw>DALL-q3p`Y!@QE0fj$eYvX5O>R?$+SyYx9^7(r
zh_!`N)=!<;Quy@iNP2<cCEoW~SKjH?4=HU@OgGZxe0IJ047s@)g?E;w7CP;X9_0(>
z=}aIbQQ4&*<%b9QZY4`}4V`%E6`Fzigl3C^FS%)>g-s>X;6YRj@sZhbYKq$TP`kJC
zDreV%3I-oZ^yD>6x9Qi~Weqw}a(}Yk-o%$<EX@Yu`+%C>Ud5N=C>uGIB7)bBFGnF?
zjuI>7`yz{X2i?zZIq&6T?>ACWIgJAI!6snhbdGf+FSUquCu#GBC{JO~9O2e)tI*=*
zxL{s7vZIa!=M8f9f@_z3&m;sK)C-z<Ja^<7kE2tAqyulW$<vUU$APGY4YHtv0l&oO
zbuKTUdf`-E%7I>XXvppR)w^-#ZE2AN)nNmcbGzJOq3iOuP}H8@8*x3+Vk0X{8Ya+L
zy_?IyF^x-7<4wPXAlqW&F1Q1(vSY4W^9;*OZS6zc<A9N3;BmjTf8IzuG$b>ouAA82
z(fmbHqE>6gPyS-ROGe1Co2#wbC2c;g(EGul+({3!`(}9Zo3ks%5=NE>4W>Ih7=iBZ
zjn*u)-q%SJ42F5eVfQxw!%twYv=mU-G^yJrMlzm83t=NRCrs2{z-O?=4G)V2qdP4U
z!Qh5c)z*#U5G=bwL8{+s;?<9%Y-U|0QmOpUCqMgGbx7aWH;H1ma9%^N-%O59<tX?)
zGo65n^qo{oYV5do?a_-`8;tZ;RLM5uG^=$CYlcWh8{&x6e5PxVr4a_=S{TF3#^ZNQ
z0a8@{<DjwScb%r+{D=HB3ohrQ?V1V@tmb=Ln+<_bAITqt^<C06wLTC8J#hq*2A&g^
zN!HBX!qt)(z?SMX4nhl@){=9;<3#Sh(6~+0HBA^)AReQzj{+4#l8fmXdvn}ePoW*B
z`M7yEM{^OY?IMK%Lm^h$BuRZR-=2!=Tu_FiX>uK~{P4_A9>5}%(aSX+szn*8+k}<C
zRuSTgeWi`e11Q*_WMx}ECc8p{QlWdFdgik!4BJK4#ZXctIVl1~#i{A)d9?Dg%%qSf
zWU3UD$_(q61<R3_L=S|;97y^LP~V!3s)FezfAOu<M=lGdnz2JB+IfIc>U=erVLoJW
zZ0=rsi1L=*DcvW}1vn1x77Qncu{C@W`YU#&ah`%-YYHt%f%5b};09I&ky{GMpTl6H
z9U|BxA!h%$N`nFdjS(Mlq<$eMGZVZ(W7!;OHZl)+n*3Tcg90I7v(2m*my=9jMzkk8
zp7yGOJ&wLHG(O79!&%8F`xP=C6&j#pl)RV!OFr&Y)CdM01-j{QD!4DNSu^=x136;!
zhi3qv*^)p92D18ugxT_EEf_V2y9hKq3>`E)55y`ewkuG30!FC*fDSY$2K4rq(C8&H
zwku{I3_K6spLlUDsGpa{C!HjS+)*3-d2oE-kb1XlBxO$VVSRZ~j^qJCvwISTb9AAw
ztDaZnXrz3+34M8-w+LxMqxXl@U1ofSbG#4&K|(uLP(j;dWNB7JfA9?Fpjrsv-^Q{;
zoZ@hce)R+MG_kPZadn*#A!6Xbh69?ieP4(f`J<wCRt#45_m#Uge(FD1aPREY5S6%B
zlsHxFM8y(O-PDZn`hF%SEjY6ti5Kh3{+ympW=jBSY}zWj6pxig)o$_;L^>=o%qBeT
zuDp}$J2vv+Z}c*;L|DrefF_3ixj|xT+2nI}Ni_uC;MQeoUmi1@waG)e!cVooo;V6y
zEaYTroi{6*+Dtb=m~TJrd0EcxD>g`@@q*cFdpS2lwt<4FgN@hMP3+f}8s$j(=P=9c
z`xSH^JmvQr8ral1uy|$<Rf<ltq{nTw%01lRUBWc~4G#GEaJU?u;C26L|Ko!a>MQNi
zA)+6sX(Rkk1?2=@alC#R8IJN}B+A*qC^lgFQzaI2=px;h#TGh56m)_fLe<F#A?1H%
zy!d0wP3lEFCuLP=6Mr7T+*G@0_hP|W0X0q3NCdaQ6*WRmd1_G*sLNp}k_-5>b1sxJ
zD3eOikNkS&R!kb@{@8-F097XFRS*T(3tWM6)OsKj->5AcSP})^Nj)&dOoD4zeVJ@6
zlXvz8H2H<*Q@t}B??->rfUGBa$7{^I`0rUmpH8K<v9a7Aw*6m8Z)y84!!hi<>Xxx{
zcR|n|RdpQ)PmOeExoxkXb8gv(vE*MNnF8&v%Jz>BRlNyfm06``J&E)Z9*m>&ZVSMw
z{D9Qg8g3c=OQgc6g9i^7tz4W;ZOTXN!-UZ}|FB*u+|e9U_aL&FStFU)#^TwCYW!Bl
z!D=Y0B_fWS7%;y<)md7Hu#TmjT2KGP-1C!mllO=50{G|}h{X0r;Q57<?Y*=?c#yS|
z>1YA}?YDfl7aF2U6dCUe{rzW+Knl?AAyqc2UYYGYGGSF>mBv}aWVANdz{ipg>r~eU
z>31nYw#8MxN^@AG^(;NX@AuIHEu+x+@<@?VTKU<#Q+NK15sF&Cd!ENhwupI_ic1Z*
z=?GYVmIY$E3b(2J(cA@-^kmb8_Eq|~yI)I*xlT!%HO8W$g{_LMHAZH@a3=8Z$ZlR|
z@Fvo(+L*VlO|HID?NZ*^_v6(!G2yfvKD}1#SOKyhj|8rHY+#()i_EkhQ;QEr+#&e#
z58iR0GNnY0#9yz^D{qew%XQd`TlR;^-c8u$3(6<&Tl|IZ4VI6|`<C0hC6EG2!KELk
z)%)XYBs1qvty%pGKi4>{T1;Rv;Ii%o5T<VHQtNpj&=NJ_Ia25T6Zp&jczJ^hx%*w?
z_K!ZQ|1>-d`cI52zs^zJg^@EzNn^75&ePr<&P@mkiE?sS#Jr!u1r*NPnO;k1#iDr8
z?DLT@gkh##7HHY5IbbndCys0J5lW7xA~XkS2v8OUt>TXvNaB(l^Ad@m$36fl)R=M8
z0lw&IoQGd~Rr=7TS-`=|@cEf!nKdpV6jtp6P!K*yR~9?t=n)ibS_lc0AQP4toS<<W
zDoGMlQmSI%@GNNL;4z4-hPxHeC<Y#y0<>rkLSJrDgV<m6r_c>%s)Cg$5ES9TT3i=W
zqtN+<Cc#PszsbVs%cNw(v%mz=NG(7tbP;Dv9EHsYsE3kdp@EoLjUrIv!<TY%%EPj!
z%p;~80g6rGk>H>Ppf|+Wl9DXsxtyjb+(E+S;UUJR%?oAJ+{xhZQf?~oWzb>LaScV$
z{ql`szsFNINqK}+_7V1=P9d|D<kKot$9MqXAmgNPu($;0iv3_tfq{oGPI<(XyQ$(#
zD)Hnfi=lbMFhEHZbn<{eaEST@WDHnkM4mZ3Moq;yI84t*y41Q&{E1o&quRxM;`d7q
za0qV8{5;|XP;hk9YQPVKM0p9Zw4Wtp;H-2IqL?dyaC)4}ygbdN*u1<y;XEQjcj~jy
zJQ?`tNqI1&9isFwfy@O*ROrHAav{GR!7<U%N8m#PNrBQJu&^no$AeHVugkjrYoG0`
zsku{~Cs)sdTi17iOsCziFHR5Fw9p3%HFefnnQ(TJnRIy7gbvMXtH%=|EN`70Vg2b)
zcJ^<jNS}rV7wJ@XF-)YNoaab(Ef~H!qp8~_*-d@|Q@1bGsfQt%vW<_rM4u{Rv_&<|
z?Tg1f`oK0XzYiC)zp7MMHhK3h8Z2ptS0{IW{RngE##$N(P`A`#Mk_QlRu~Vwk__r{
zbR53Dk7^ZCMOZr=#01KBT#6l4GE2Ss@-es`0~}JoM%8z@#ykxwbuq7u2$`Ef7l{wd
z`Zi&w5^<lmDjL)Mx+DCjO(?6UOr24(BDAc{Qh<~i<LPNf>gHa~IN1^DjZsxoe_yZY
z!t{z)ULDT1W=$KXG`Dtz{0&mqVhgThJ$s?QhV(mm@NEDse)W-CJ5%K7m?*Gt(AhRW
zhsB~5KHg5s16^{*o1oK2;!@Fz6L6aybLyYF2(r%H6Q99wR$G~l?)*?|-3%rUc<J>|
zdVoo#e~Uj--j#FKQ}3609<46*akpH@)^3Wi6q@|>^yu0uO?Az*7WLGmV(q6FNIyIH
zdOi){0l#HZSFFRWK33!}*oN55!p|5G0CG6S87xEN5MP>5e9=`ssYSwc<$Lz`p7Q+l
z$qM*gK9}dly*iAT&G&h03bpgAy?m>mUqHgFwVZ8&Q56Gk{Z^dgyG+*FW%!2|yX;k~
zP_GI22b~O~9F{>ov(T&Ugwig?**C*A9o`3K6T0Kut!M9Jszg3B9j}QNp0?|fQ++?A
z2Wm$;2><ShRzC}C#^9!gxPF)F#SWL|-0a$Dt&bOvrajKa9qiAoJVc~VqHJY>6_H2j
z{mZsi*R$IBx&Cd=I)mhDy62Mh?~%<7fp!ejUg+1N!0boh@^&rlkvnC4UAQFIATR>f
zR~MYf;-mJIh(poVGBE+=Cj#LADoz&G|GW#D|CieE6GUd>1m{)ew_AOthMhK7G<gwi
zEdoBD-^KqZsuvHj#sAPJE}<lgxVf7SpCz&lst>he32+=6;da1g!Xk???Ly*exTEKa
z%s++qv7sir$%YAhca(GGGa-_jYMZ4ROmdnMfAqc=XHzh380H(I^Z<GRW>^>zG5avn
zccaNl(|-{g&mi{?TT_xiNB^Mb2IB}UF=UJ})dl5}5YIyspUMKu!)85+rf6W@HlGGR
z(5quT4qrAx96{Ko6POu+ii-9G7c{S$k&qoJK-HWg3luz&TJZ#Nl27A~fK21&&2So+
zYVV}PX(%df$Va5}0S8V%!Q~;d4MHcF=P~*KK(UQwsTG6Cg+)~(5}sJ=Q9yn`L@I_}
z2WBXZm<AR=z_Ej?!7*BgqL@xYPuRo@?STr3%uhf>LW6=zu?F~(u)v1wL$r9)lKpTJ
zdJRMjd<!W;_6z}^34{%WUsDaYB+1STRLT@r>_5fH$~S?RX9dCtE!i|g0Bl@5(Qrti
zPsK^9;4q>|+pr5piz)>nOcvDg0s)1Vfv^SWyV1b8#x^~fYgg_ny;99G;&l{bYhZ#r
z^*WC{E46HJQ$c~m96EGl%MWncaQiV<DQzFAF~j3S5D*eB5v6f$)+#}s`DV;^G*#Au
zNUlUhA?gH_Q(!_}iK&|u_bk633+K-Cbn8|wugk-*FBjj|*^afB?hWBFpNISP$z9>=
zhu7b|l;FDr9UF!V=GFc)!^z$r(Yuz(u<Okop5RzF&&}XbGQOIjL`pvHVV@<V+Clj+
z6D+lXQpy)sSm2yd<)Cnw8HKaG@J#90v)$MXhtM-s4)6|${^UR)HQz(#QaUIersiS5
zz_~gz&F<{dyy?r!`Ol_EMZ6fePv325a^(C_tI?K2zAVqyxP&l*Jh$~u`8K<jjzWO8
zmpD5(d)$#J@gdEf@C&N^qTc_ep6?MwIx1OqwUWmasMY=QB_B!+T=f|7{)6+pxJm@u
z>(_o(50q_U#PH>s-8Sg+pA#{7zoyO_b@d22Qz_SDa_YV2+3$7fmGlwN3mL8xVm#T+
z<a&uWvV+akHnkQmQ91m&(@YxS$>G=eRClT}#mLYMiPE%#tGwRKPtdk4;P7N>^z-R&
zi@-1#s!(FK`UkkMwWLqS$yCdhN66qlEj#c6XJ=Kc9mF{}<EP1TH{rbq_1X6yc;jo?
z_w_>9G)_m@V|Hs-e%o{n8I<F_znZQ0hT*+?1qGTg5W&V@(aCWNmr$DGUL`*#d*;J1
zMf0~YQs%S-c(9$LWWEefzUmd>a@OOfT~%EEe%~W>EITBY!!H`fFWFT=^TqAnIc<#u
zUI%=t!Q^J{K3JyyNe$_3OJAl{z6%MieG}eiu8-}xUOVwXsJOixy`Oo={m!;f32~TP
z_U2IILewj_P)W8}?EIH_adZd$Pm<~NUy}WBxssh*L7!g1|9vf8xdJ;aHwL!Rjpxs$
zl~PNc%UNGO-I|iic9)pa4b*_;XYcPd9G_HC!Yo$Zs;ebW%7i{b$#+{be&3O>=2mTE
zS^kz~e!Y6HT=D%fLU6E}PW*IXpd_G;Ce^K$3WJS;(Xd{~pC}sSPSnTZVDfc-#o9`y
z?n~^(lmumAN$uwV`^Ryb|Kywae`WP0pl9rzn@BKDC2lj5(9emS8wFXW#<W!o=(p4M
zq)cz;BDN6#J5;%6$^GEIeT#r`H|#~FuO}}b=s_apONrIC%i1{>so+kNVW1mxNDi3_
z_i-D)?&g$rFMG*bZ{vpBm>BGt0|pNc-_N%eavDzyh>q?CO2sWEoctKPo|zBPjpN6{
zre*E#QB2!Y!lDLs6f#u?r-#JoFCuOLKco$})lf#(LeYngUp7>91&BYOV~etqI0K*_
zsG|cfFZIYp#$ZB8Oe=*!35mm}{zUgus}sX8R%|hbSAk+H>)wygRw2^l)sVs#=6Rnh
z4TEE67!p?icYn|Tl&N8}z&I+~R6)6)Kp?HF_&Y>R2}LQF)4fI2Rb^0q(!40$rht*s
zg-@2jMZ*g-AeK#z?_+y#!-a!*Y1QLg9+4i?Fsi_^LIBgd!=OI<h{gI1IfT*S&3Ur|
z`>T?S>gcu`8&R=hrLjvum5oF-jD_8qHRps_#Rz184Mm1^rW;_8aAHM2f<gr20~?L2
zOAYHJ0Z62D(giOWT?9Dr%0H+fg24AJA{P`*AIb(v9C;b3Ej;^(%>WASs)7N5LbQ=8
zzl2EX2prL%d?{8Y)dBbkzsyPu<AOM22gdr~A-UIS`iM(Sb1u0y{sk6=Fplk-C*F!<
z>IOi~c|bm|;hvOH)9Cy2^+y!%ch{%e#f(6Q$9re(Ux(&4JqJ#gj4-~~2hU@E-?Z*d
z!KmF>rmknx$;}i)nVQsk2fdfeD;Kj#P966rXJBtuvyo&XbCC%AYK!jr{a^~6P7B6@
z+i<gOa1xc!L|9x(OO*`(6JxK&|DC)DQ5J{;p^TWgP4rR1h()rsbFWi9>c87lDamtT
zG+3bS;C0&bQ}(sk+ns&Pxb7kq_q{?}uhaHiu5uKHhkA^!DY>ZAx9_(8xU<@{%4W8z
z!vyiK2mJN994Gr+hq?!A3_oE&&vTkzMY%f01M+nXY4?T4R|)W%WA}U5U-jzXfF7v(
z7w^y$-U&5SpJBBbg-F|5C0|cqF%*p63N?kTufcXImFj2`tbEfQcPXu1c0w02eRWh(
zE-_)@AaQSYq==7(hKTaB5_YIY{r#emN5Ee>qvj#o*YAdIOV8lbovP+@DNn$)VO;@X
zLX4{7bE)X_v1DCAZe2k@?7dv-{S3I=l$+6%yDj)%W+nUH>GAMx0J||V#YV%5VBJ-&
zaHU73@V(H>Qv%|JO3V*CNAz3M6cv*jcCrU{XMgRLT_4MT@8eB><MbHFTGuAT_G$`+
z$vMW5d)l{O5-{w*Q`cr?c&C7)xye@dvJ8pIi9k<?r^)Fjq}lr`f(1qn=(YE9SVA%)
zCvw>XE`XbOUsUulq)-|#bNxp9hy?gOXNt<^wO@K@YDrM$B)Gub<sP)>6^JH<tEwdL
zPAV0YGZ7(AZj~W<UxFr;L75OOS7b)fyn3CjPmfz)B&F$%X0-uy@Y`o^dB6F)W3!A|
zjms$4C_7@V^>CR~Vnt!1ym(&m_torks~M;c<;GUdak|^%okGPJx_&EoJ|3CR!8hSu
zU|c3=T;@O<x=tR-Lm7&uKhiAq<|_N9e|Dsqc_=q}XlHOyS2cNU`<L@+S-vsRNEr<j
zz@7?F1Vsn^C*|UG|IwUVtbz;}0D1W472QP^QObgHjohcICE1(0@{l+jt5pX@yEw!j
zNOgf3351^FOGtnA5%L5J<_!_xkrE@8Javv<m{Us36DTWm4ltHK=u5`WWwcoww)G>{
z^sRv6{zkbBuG5IlEHI~w?Ym@w3~T_q(UG7L4qq$I%D3Iqs@1n&9bw`0-cB!~`n1G;
zs>72v;Y@i9BiTYaF5di>1{g!@ZA@^2n`nJ>7u};)?j2_iYTA`mFFRL{sah#H<aAim
zo2LZA8Lgkf*YmHAYXsa>dft4?*3qBCNoy<g{rAXV05<N#9)dV906Tl45~1wBBS&K%
zAs8qKAo0!(1C$MrDg^qkUeC}`G3G`d-T6d60h|PwT&Mmk0*z9X#OthEvuGkgMvA5L
z)Eyaj{5uj|z+srfI}7WQC<xIcJ^Wuw7h&?p<%APCCE)d~22e#<E8UFgr<0^R1`B~P
zER<zRJ^t788W_0~a4|L_DOtZ``TG=<)FyQ3r!)BM2naN)Ww58SfQ^(^eo{s1=><sc
zI^BmENh)%TGdjslLt|caW?5{D3e_GG$tzh$0|tex6YwqmpAnQl%Y0JjWVteZA8zm|
zl_O-OKxSK|(C~}AX5k#TX6cjRyT|dC#mxuK2k;yX`7-{hh>I^qJd?LMdL+I(zfzuK
z$w|+#_M2J;7gN}v1KVZO$^Oi(_M0*j7E{bndqsr=jl04hdCXZz_#cV~=8n5bF;mbu
z(b*OPYFNs}m`8%@pUd-1H#>W;f(Xtf8O&0my+3c1F0yps7+GHQmU)Fvd`4Bx>EQv1
zf*eHbIeVV3G15)ba~zmkf2pD{s~f<#8Gpk8{WpNTX5mVTKqxp>P8Gd!>@+X#aN@AW
zB$|Z)p&a)>!VH>JQ`kt>p;#5Hi|d;}QMh3)MR@fBOR_!33;L&ly;<a#G^`n%sm~d7
zZBeTB3~sA&Kdi~_N)MV+@|5HNsfPE3SI()KqQP7;0-PchIc~C`jo+#y6q8(#8_3Ux
zp##)XO>|o(K&vq?D^-<LUXYG56A18WF&OG&cgHq;U5a~dTBXU=%tqCCr`EKF!8-r9
zAHgy^#?%05M<VGZR^f<@RT;lu-@Y{|Hc=y4El}}%dgPVjlzS{DGxP+J@cd`Q^kI2`
zCz=@XWY^SkK`xKot_)Vam^7#%s<bk9xPd~VK`H2DU^Yt9(*P@D?PqL~GyTH@SQxlC
zskRKnvQMz;H*C3ov?_R!n&|l;);(;3ndyC82DGyPzB{v3tJ8vg+NMYGITfuMWR;N&
zJHBxS=ebwb{VG>6m*W(7MPGg3SkHbEBRS8sk^Df$1x)Q96>X7k1EXbrlm>m>_BVgL
zdkB>@pnXngj|9d0kB#<z56|=AAfh<x8dx{tEHn<WB#ic8UKgFYmpQ=+5or#x85C?i
zG2L+4gS`#d%V<O65o)!fl^5FBJ&GZc+H;vr{n(qR#~*I7!$jo;)y@alku`PKRUj1f
z6NknAc8?spVypT4+!Z_$$QfBBvdBd6klmSIKzMmH55XP6g^KH)+Xnb}6lV{GDs$#n
zw8V-ZDpUQYMT{w=dOu2Nc4iNHab(+*S<Da@sVZ8(B#+;BU7REr`uf(}GyA~xql@JU
zkRgMu83wq}8KqUuKFP{kNy~}U(fOLPA3I5~x?e!?<N?=@`^=Vq-FX}&<_^K>;ud#a
zfZ1KM!S@I!VNR^tw#l0pwG!rn)3kZTZsjouILC!1v0RNwEBG@Xq?g85xZmL&F=ew9
zY0Kh;dZE8jqe0PI@vtp+zLsm$3ajIfd23W-W%-=WHzc@^L94xCr}ewEgrhdP^C(&i
zC{h+H)Iie6u*|4m3%4FQp);n}hrRGQfzx!R`K`tz8Vzkc&omsU0sHsbq%q~Gf_IxU
zl^Ba7wK!KQ2FL{D*TX{qox24aFLs^sl|%C7n5MiMb$gAjVD0&@fXG#u5j(MwDhieA
z1FZ|S2fGd6gD!V_u!ko{awAtZGLz)6OWelgEErTL3Di;~Xf?L9cC$0O;TD|=aKv0R
zg?7+R@~}uhRykv*Zsy~JMGH1W$(A-y*{;b&kJ%ZwMA}tMq%k|H&G~&Ord}<N@h%}t
zK&o0}Uq!XGvNAF28<E%5a&1~}n3eKTh0z`pi$jhQT*Kv=onktx{*_%cGF4KShB^~v
zLaQxiKj<k}aiMREt?36+U1!fX>g5eJ;%(i)eltqX>8k>6V|?;|?48)oM1#c5#qxhl
z2o?ZqDj@XV$~CRM;k+S^>UW|srBft_!Q7f7Gm%U?+JLW7&^)nVZ>F&TCZ>eR2|Iq<
zaP;w+L+B-5Bsqu-W}oHU2RV1j@7Gakkr$A#07H|cs;oKKD@}c+RVV!F8Wv1BDU8fh
zqN9}d<7atuU50}dndHO4I*fA-R6m@A@37?Ff{HlI4Uhm%9eg?kA;NN@n%MZ>tU!^r
zL98-h&@#nvIM@|ILC4H!YoCS%KHwIc+g&sggeoFmr$vHX75XwTP!V8MOx+}%uo#Cg
z5(r}Vr+uhg-0^mgZ(lwDETd%1TOZ~sF{d>S6^8IbH1QEtND2v_X4+dw<h}|knmH6(
z#xYJf7>FduDvEEG6bCARlFYnahk<O=1xFvx3_!sLBOk3Frl#i$V2)s;P9zTs=AuNg
zY8EF&RIg9DqnW8c^1REfL)SvGYKci#9cz37oIw}`$$Q_T;3NxINLjBO=vF3C%X1h9
zA(>{ndSjkZCgy}FHKaW4X3@J8$2mFE>cPcP1NEZ*`K~r&+z|3z!ZRQW4Tr%Z+5J$?
z*UGrb2yvtrB)!a|@o10HWGQS#Y2-;cM?AX;&P9vtnh{Ak&;yg`c(el-hhRhAiN0K_
zmA|8r)b<IGU_xkxAR2#Kgdpjnz%m9M%DRw1BqQfJ2TG+2-4B34NlFvXa3fXhq8(7f
z0nw>O14LxW<h{s9p}@wCUB_Ip4u-VFL-r$+j2{R^D4jwoqDYE5b@{Q?y0Mr<{V2~l
z6CWbVVu$*Dy{5lIgN7|xYIKW@i|KgKcYr&*ZK4r-Kp@RL?2F=^&>cyNiXQp?U~y9d
z(BWl{NttH~aiiUXx80-i`ouTw-Y9_&_+T`@(7iL>y%X*)@oYr(Y_$B@#3gr)C5DTB
z)<coehL+J5AEgSLYAN=?D~;bQns+FVynxW&O(|}tSGlEEc~#?}?sb})MGwnB!+XH+
z1CDJ=GJHGyy@e~ch6m{SiboVW{MxWNT@h5^)@VfH!%e4QK0Ib9a^dIXrc<N^j2}75
z-}?(+?WkDpPOpkL&PDr$NdXfP_U?RO-uczFo0%L|a<#zOcA<bZxYlyqu)-bFnx_SJ
z&lQt;(T-OuvD8!W!9n}!ex0+VtlVZ3)th+;W)IhAAhn*myK?1tp@vU&k-cAE?Eu=%
z;5j1Z9qE({(Yzv}(q+e5+<HO}R9m#-J{)<dxOHywezjBjpdz{)A-j3GeRk$z5_@eZ
z`&eS6|J<x|wJ>V`8ETe;mvTm0<$L4@b4)}LvwHPw;{>$zou(0e;DUvS@~le_`f(H4
zQh?%#O4xB0q5p~sj;>FGDL3^*K5{_1oqam)_kmukrd@H&Tm9pFulfE5P?&ecU~x!G
zkn?X*^OuW3l|EJt<k7l;NV`?Zrf-PM5(877jYDd!49)XopwSyp@1N~h6sk_Q!ql~}
zX%Cb;Pc86{2DIa{1uV%CKV1_`;6*kvFgY*?Wl+YIz{P!Uoz4b59i4i9F5fv-zuR;o
z+p0jfG$L;jisY3bTRtNLuZd)?7LzXu9?Vp0V3OYx%TT?DI9__}pr$#69y&!bQ?&MD
z_3}d~EsZ=Zd$CrI@lsRGhL~~ze@)O9{%|jhwx8Mi;p)_QtZ4B*ZhSFg<9>au>cM-M
zMJwb&yg8_C3cqeF2-*{BMB;HUE*yuV--!9~Y3tS}V=;L@y%H?~^UD<8i9);ImQA~`
zW3XJdTNSI;D|e7i5|3<|vji@^ifpI`GnKx>#wDEkv8a`cyV3e9Xoo5ZZKn-`pX?UC
z4^Le=+O-fvS)Fc=A1&^V?O6<_pc?00NsPtrk+&@d`Jud)4B&_R=RLHow}V*w_Q(9_
zo;a2L!MYR2r&Cpd3FR=l2ycaJqGi%34GfG(*O*af9&Xu;z_h1QkHY@0j46IyLc+f*
z&|aTTcgMCMoZW9*XAz38*SN909~V0VleAn^T^h+t>d~ps&l*~<*uJpxgY|pa1T1HO
z%_^Xm$0tz{+m`P;p2MF%n)ZR^{cDaSjB%-jCQ7+T0*pgIwOVeYcn&noX?d7RgP2h?
z>~7CLi^iH(G8c)+0x<ICLS{l1{iglq0S&tiaSWZdYi5)DI)B$1W>frHE*s5q8QyKz
zEdB>_9!n8v!EZQ<V+gb5Hk~BVL0tRaP~*{y;j2^+YH|0Qtyj0?i9qZ~@85GG%Ert+
zdZ3w@{<6S|!-WPGZMGw+5)l@oI*FaUIwka+BF^M{LJzEv&{^@zCh3P!zy=8<YzOIV
z=0Q(n45t!1?G9()+*Saz>Rk?FyJEf!Scn)?bRb{KxV(c{Ja6|l7)}an|NB=9i)bLU
zsiH0UpsPZtIKi#ES2zYxPbhS@JRZIg3dllE3nur2RTl#%#h4{ya?xEr6ybJ;_nDk-
z{~>&$t|lIS<0sBa0KBWWtn6unl4kUpp&J>_(oY=B<US%d&8!CxY;cxn2lAi}auKPz
z01)Hf<@D032f9X^+BURU0<8K(-`7HBu_Zce6Hao_SLORR4poq}7aMu=K7wRwM?i>M
zzNJcGcE}CLs58Q-{?k1LeYUrXBP8EC%;cp=oK7e<Y&J`3?Sn1+hfX22Nz3(L`9FX4
z|A~(&@2|w66bzy;aIG$L@(~Pj-lITUAx-l~nB$fWuWq{|DClRVe8e!BJ0kUGo|u1x
zPf4<5&xLpZS11+XBO73Du<RvNDX;<|m5m=MTM2i44tEtjt}9zQ9ru*mt$n5?(zTH^
zM~d^T88R&<kk%^TEp2c3DdUb5$0t2zEjYkUcIZ{`Q>qC{6#M3*-qbn*9tN$e;4gXm
zPr-qg`vjm+N+b*}u8@snG1v#vrh5(D|Hu#v0ZdR1&eXk<f7>5dnL3FJlGvd)uNdu@
zy5xV`c~jxTP&~4P1XmfFmEpn7uqe6uw7=f3L|6n-ksGX?(i&uWvg6M9yn01|2y?HO
zf+ro$%avW06MaH+NT4)X+hZtmsad?j!nuG_PFMb48I%26cC~xn(3^jCgN0T<mweQ$
z9%&`FAbG~}@!x?UK5u^vwO_UGPyzze;Z`z^Rp0814#aFCv%Gb^3csr5y~+Fd;qhbN
zqLKZ!!W8CkDqL#uPZI@scBYb5!dUiMrB!|QU6+3v-h2M#kIhZQbFa~OmWR5m7PmD-
zZbJl9dTNa)TZ(ZuwPH4K5$svwB{Etq3=A;uBv{e!gkA!=dHk^rliO+o%x$+WMO5N#
z+5Yk0ayoznIc4VwHRCZo36e+$@9D8=fb*Z2?;#RI77~2I_F}1{7ioS*ehTqs7Za2u
ziSu5@Kz`Jn5oGUj27o(c8ogKZuTFyQqJB+LeYdNMa?`p3X)BO|JQ&0B);q=<P*e#?
z&|kr*hf9Eiu<5QFPnRNz3z#Ia8j=lJah@bioE}@Zzh#h_F_-H$vh<XkXdMHc9f#Dp
zw$>*@xxH=loM$dj$77<v76*fi;brVcZyVO#A^rsZx<i`_+Y6jHBcn!K0j}q5mUZZg
znR3<_#ON4`fH$ZZ1<L>in2l6zLfFOn;@S~2JqUnUDvGSKY-~2-t7=%Ritlu64c13|
zhyt{vMbYd=s?-_k@7dOP7R6jJ$;3PBrs6QA83k`-Rozt;-P~^39%G6hwBVItB}b;e
zJowlJHcI6aG(OSK(~GRSYN*<~)(s7F?mO_@m1Qi$p43~t&8|pNI~*Znh2JQ==DNKe
zr<8!R&7ZW*?0k<;*&`Ptc18tEpkB6Ie8Rpp$Gu`-f?~11gr8PuJT>J{+DrF7EDQRS
zKGuFZ)-KLSGuHuhb|fIS;*}R{OE~s4pDzY)$%2c%wVIFjNOLdm(S$xPey=4AaVIn~
z?F`;gM_cT%5sE{=hj0N{F6*Ej`r`;tGed!~HB|l11wI9!*?^fDNv*1+hEoo+ErtDl
zfj!^+jyG?#^tm_->a+46`^7)%@retm@VAjXc<KcUTof^wOp^IVZP^w_sQZ+2b4B--
zEUj-TE-$u>@deN&W%3S=NTnmB&;ueQ-W&-TrtS)*rw^<Ga_YF`Ad<-_RwWTe_FRE;
zxs@xVODlg*ossb<rX%eXAU}$J%O?Rk3={ttvT!iI_Zu#*zvZCPNn(NjELEhIkwT<6
zN<`o7cGkiUw7jcb&;crwv%34kRBYOKCsTym4lfom|B&mRYLjiY$m--+#P60pcARgd
z*D_Br%YU~NX}P2Keu2hO{Z_J9{xt`bYT(bZa7=@eliZhsVvabOS5MO9E8HxWZWw17
ze_k@jQ}TYXy=(|ykSkc+<46d&@3l}!NYylv5o|z+GmtBbTzUkD*nQ_H0Z)K4ikv7<
zbP)V3;hm12T{4jcG4fG0#tKYH5~1Um<L{6zjn9F?X(|y$`&r@YR>@2J5{(VCr^_?%
zg+GBw=2klQOncW<hEv}XqD^qqkdoIR#PnMoq&2%bPmUX|5C+Vhq@*-;7hJO-UtAxt
zd3(}ErgI{9@+?jZj-s1@a&7RePqi+mF_EvUg0#}kiIlj@J(nc=$IlL?9Z7W0eWJTg
zHJPEWolOoBPjItN%mNaRc_)E+X>ZiXcuoPem$J2p%gcPTszz@nI;@1+GbKQN=42>^
zz&qQgbC;WJ$j9gt+D;gsi*Qc0=;}zjExJpEruRrWv9%<(Xuz59Oh%2$CS6dI1)5ta
z#hL2iG1tW_bq}_bg{Oec8}X1&O1nzip8>lL5NwG=s-ldX2$YWE{UKmt(`Y?InCa8_
z*bxdtg=LkKo(^YDar3qiTQ1$+aS9g`1;viXku{o0hvnvK0>0?Tzymr>aH($SJ3&cL
z%ZzQ|^v*~kVq}1HOm4uJX7<^@gQIPM;tu)7AZS*qV&mrYyvaan7WzCnp4alHGrD!!
zqEVVGgetArigLLSe;BYK5nrWz_DCTMJQX><rBvyV`!^4CJ=aic!U@|s5P2&{JU)=E
z!T}RV<s@)p5YkrVNP!5eL7pfpSCI8V{?nQLQ@sjPrm*#|&D^0!x#$Z#RM-bL+vo4f
zTbO>^E2^5bcXBsMT5#j?N^d)Y@swxr(}Mta%HY!pFi>O&!q9&&!4|X<Wv9o%BJ7<g
z=W>DZe{4<`Ztm24G%$=*r5rF?V3w4_0mr{3>I;KU8Oo`RX>}%ahQ!Xo7n_&>n@|S^
z{!je{HN)G@q?j~)lrt$4tGpa`oT+p{*(g(QtTzQtkj}6EQIL8ScxXjzE1G}>Y#0#A
zsD1-5QEc^r+8xcu%Jc4uK+ax9XwO#s4<mu6imnO(u;M;-Z+9BX?nnO^5WBkX7SfR>
zt}k|!K)#>dH&g0mWBJxE1<jLv3OdA~!C_D#=y~ur+3J-Vs!@UN)#?s&+PYir5Ai9>
z+t?jvkTyd}NAuK^-6%Wani;;O#-3{0j}Jgo?B4WWs|a!pL8q8D@_awk_LMvN)yToj
z=)PrZw)#fp7|N)#vMFb2V7pyoc9KmehHsjxSuSg&k&{XltFfVz#dA9P*U~vhz=bXj
z>=j5Gi%|(4>qAiQRV!~lxX2lG`T1ju64(R^0QN9gr>_YFGoGFkf6zl6O3aGnw}ne<
zK^jjaY0?hwe$KV+QA>I|LyE@+Tl*dr|7vcGrU%IghTck%4A>SDFg>8r_-kxw&qbDK
zb73H=5#OglMq`202E3E6D4OKVSQ|<MG}|3!1T@A^G_4t<e0nYW1qNwJq=YRrQJw2%
z6!XNj!~V%ZYDQJ=1cbdpNnI%0U9fnByv#3o!lt-}eyMm?_J~9C-A9*2voTd$ta^pO
zu$>ad)}YRrt|evwSm(<A-CC@Z&qQd{v{+d!x&Av2FI^Q|q>RjI(byGB8YMa-v1kZe
z94#VY3)?I*f?&|&vI5odsFsmJH|48f%m8$H!zjLp?*X)gocR;Y<aqz^%I`uuVJxZV
z{jaAm*os?8AV1NBF<WL!XGafq1|xw;SFWU1k~xO3UH}{nFh02G5P~!sE&(bSI6KO)
z8U%3KKAz>4QQ>pCl0OTqmnlty3u!V1q!e7OyjxwZMp5<ZL%=OLpsB01bTixr5PyJs
zpndzjYs|d>&BCrBx9#?$O!uFKWxd59<7Gd<;y7e|*Y`7IKME(<(qBpg{zZd%;=KMW
zcM3%-ru#qvxRmSSKmV=}!d^CKxkD09`**7AvFSe1zhBCR1bWyKBY?Q&lxW{+|Dx~U
zxU1FKe+czz+kYubq#RmrzS0`=-KQ-&VO{R~%$DQhC)x{qO7o!Z&)^-$2alg&v*o_a
zf2n-pt#;-rWJ^9_$O8VgAd;POKIyXWz%5xXV7h(UUj~zOtFMfvCl{2PG4u0w+rOT#
z9UZMQ)$dF5&lBfP_I#x<!v+?byPt{a(&LwssMqFIWT=0OdS|1mJxDgl>a|;H3M?c{
zV0)FT3cefBcxaxv!V6#JN{#;f8!F6*2VpRVaq+j&9}~@PJf_IM3|8JWj|1GJa$m5&
zXvoXX9u$5&eWOqhVPjmoeOJ)ZqNprye4(R7Z6Ee0lOwBCIz}RNIa3(ejo&Z^{=vNr
zlru!y`LqjN8%nWGC3tn8{00+dyx{zgUqAuesq^??R44#u7LNbx#&L22QjKE&iDI33
zd)-zPzg3OfdcVDdtUY)bY>)(Od$6W5ly{QqJ*W+o^`>%kNtU=Tzu7%Th>ZXSSiJ(l
zT}7XppM1RdGx#%`)9uA^!ZQqERp~*f(l+>#isks0WiRMKxLwgQm>G0XgwC`FUjFto
zN=RA_`iGlNLccY5;}}q?4lrx8%7Ad<Tf&Tyv)V)&fLEu5Z4sQtlq6v%DSR`<hY=;1
zgh)L@a-oLUcQ)uy{AFV6WHLBoEv|cF`}9K0qSAl2%%II3qoK}cp7>blVoJ?hhj95J
zC^t@Qqv&uDf$QkRXOv&UQR7`!e2aI4S@F`gE>fM|*e|;rtsxUC1XZal47^GKNW>d@
zF;nAKsqQD^%33l9YA-u22jNU>)uFDK5<eSu-@OmW=7g-oMK|Me^ySt>xcsUiQW6c?
zs3VWQ`c0=f1ey{wwx55*R?{*ktrp{LDY$1{JXdi~`%$cQpvI8DCq4!8vNGCLk$)m<
z+B_Fa-5tW14Br&Gjh0T^0~D4Xs2z96zTX|DkYs_^aMD;X;^xn&%S#LQ96!@5Httwj
z6ztRE{*BXCH|WD$<PsT!_baVAaq4#JpyS@gL|@+4?1j>zagPh3MmHL1uI$xRm8y}f
zR9F}9JDMt*`S-Sdw8s;m-h@!f#26}i&Kuj9BOU<Qf@s;Z-PAF*18)AnwldrNwYG~m
z<aT1uz(!PEJQ^`3<z@@=R=6VMc4<p=J@Q#(R|RnQsG(_&qEcW)Wcq%XG~@F1b93|a
zaPqwSy4reqR}j$qyx6~;ewvO=<*db~ShyG@LfRqd@k<^h!V0@#+Sv-xsPnURgnluy
z)eWJXuXDalN`r6p0}|x$!GvM$-G*JHuI}BkeO&+j+|c2BUwl%l0*wBBzg^bAdbxo&
zRW%;w7%urufCpy4wxIY&7U1?xpQ!*n?CUQbZlz@Syue2J2S$l%MLUHi86ioq*eEgT
zSQ91CnNzXROu8W;p;R*tuc$?G)sDO3$V|K=K&g8EY-gLa5tyWP>9r;921Z7|I_5h}
zR_Mo|<hv!_5};IX3Ec>)1GAXuX=}D6*%P45h@u31abG}bA`9GODMk<~_o<RZ5C4RY
z4&Q(=&|UexG&>7D4*>84Y6Uo6;JO&Z#-Duz!|PzLRX?KAsC7v!cFdd>)_tPa;oxwF
z+zjr8^?orB1Dn_mZ9P1}O;?uRbAkRp9sJ$>+&GUt#X+J3J$)~6k}X2>b`9E|ZU+sv
zzY?RpE<C<xMC3LNeEnTMuZJmm<hl5OZ}j;3`d{8y`as+K6NfK<FQ*sGMLqqkE#)8V
z{0btQ`n|ng9$r34vImU<2463WnGQ8TghBV_RY{yV;O@fji^q>?1VKr~*k`1N9pkV3
zVksNRGe90D55hfu5_cT;9Cw+Eq06qz+_53)NkkTvbIzF8{}-f>nUSVO=u$fWKf$DE
zN(4Qc7G;C1Y5EvTycy|#Koy!6RfD`~_L#S*zuz`+>p<H$u*4L5Bml&j2%xaqItv-G
zH>EV98!`lTbP<?DePP7qFozwpB=``HEi4WtA=IL+VeAz&!5qAcSldSe+5uI{Qf6IL
z=O*ta!7PqG@`}51&Szr1M1B#?aSG2G%XJJLgUOBEC;|-jaZtnwB}mCrq0k66b!7S7
z{WB1_2$^mKx@y!<rejJlL`&W*KpJI_j0-tUmQ95)6|h(#6@sa~%5N67(udhN;*7ik
zk244RD5NJqmVyvAB+dAEJ5EC)dPc@&2ff!k4~$d2wSW-G8Y`-1T}SS#ocF1_AjZ=2
zF1Meb>~Ll{f!{5?hl;t6Z(e}6QG=ioVf+FHW_<mc3;k4wpz@*D4nS4JpX!6g)Yfb6
zDg08Z?`A>IA<tsLk0HMo1M`!%3bUX(C-0xnp+U4s(a~L@^pkiM@xdKeZx9vIFPADP
zc9X_SitzqTKWY*SQ`FlsBHKD;8N{e$(hfTjj3HqQbn{fDn@r+>MpK*M80^Q0+z14!
z(}zs56e3KBLd4JfnHB=?gOO1y+~6rj7yxI>QxSrJavFUrFG{OmR9Q!+BC#wa<Hr=a
zmH<~g<<hF*dVE+Blus8$1`BTX#($1KWFz@BH;^LdrDfS4xQsopTQV2gmG^6JNL`GP
zCH<qvrJRt!obUNn5a2IjB|?dES)&hh?n@`4LMz9#vHmw-rl=?#2po7w?KOpn=btE9
z97U+(@Jo)A4E1+Qs`#a)Ju_A!EGV{2HxdpD2UZ${M#Tv2!3d<IIOT#{8O=)B%@S?T
zIEfJ?q_5C1wh@@*+$)aQz3&#fXIlc>AI=_LF7lmhk!<!1Ew?N?aDrncO%%Y)**{07
zD7-c=uX*z{>A`=H7wS(so5MhxoZMy{Fl=e^**(E4c8}|qzJ4i9y#5}zHb3CV5FfAF
zeGdDr>`spoC|mWoIT1+hQ%l&ZnEd)nc5QJXSX3-Hz*(LL_t5Js4FGL-Ce~PL<%pHl
z|6&ie!DyB}k4Q!Xj?JlNReuj;_zi2+qWaCJygnZZiJ>uMWaMGn<%hDU4Du)`HQTf1
zGK0*&d1?FOw@0b*t1iT2PE-~U=oYkY^_-baw3_@$!OOwBP^{#g{nuOLu&QIgEC>%z
z7XmL*e~RBT=u5A{8Ieb)g3+yuR#AMO0=rV^!k3?A?z>jR`_j;VljI8c)$1<#inv~m
z!^!L6=6-#Cxw*X7UfJlPVWChrGkS3ev$BR()kvjD)gWh@ImQuhN4g=}5@CzBM)^Mg
zf4m>*yXfDDOSCnr1_jgHvHyV9h)qi8%rU$FFUTG9Bb~KpH~8d6pmeT1u}#h)EeAeS
z$GOsr5xdtZStCu9AgGxz{jqW<lFX)|+!*Ya@c>soxvScQQnr{KaSNG>kz9YjQ;XXq
z+wnFPQN@G^xQ;01&`%Arp5XE_1ry7X)Ykbor#r-hx6M}SH7IBZI1<Y#G~+obmg@gL
zG8uo{h;^P~f@!xN*MEcJ@3e@41H-+t=VMm9<M)Kc2xM8Xarq5AiV3=(g0Y88U`^sN
z6{if)m2;Kve{LzpAI#^Xf?cCKnQE0Z<%jBh{$Vp`D1xII5O`xL>?y^W5Y+~!qBgxd
z_e~sH1v6XE=Rw=S=nowXpupjhPHMWA@d`s70Wb<Z&&g{JD<&T`OOPiK01+fF0e?kF
z-~tRJHaLC;F2ro}81T_TgP}uc35$JU0E2n2EQQ>IN#pMlK?6#}>0=o?X3BFusS&ME
zUsWi|+|x$I4>+Fge+5>ZVA)w8Y4-9<Nw(Oy72m3RNJ>_JC<SfWNSYZiyuxNS6hdj6
zSSXzpk*K}Werxa7`mhxl14kdwIoZiKn%wFi)t@aT<?@uzyF*nKZMIWst}ON0F_W$-
zib~+kFQVO>YVc`Oidz$d(bdyB|IxvG`@ptzl|l|%5!a)bo(ILoJfzs|o<pWQZbI*V
z{89?dYYu-|Be};yT;S~ViizOA{^o<&g@4^Q^+lwUNpCTXmN8~CRY27E%Oz=@=VAiV
z2DTv*ObL0?hR2wy-fLN2QB$W6fhQl7@m3q<+KViXp&MnC$Um@r5t1uSO*Ng1h#2Er
z>T4-{<&r&NFW4UI$o*Q07GiFZV|NvyKL@g}MP7g)ykSH3|Aa7l;&lQ->Q6;bC@=sE
z*Z<y%zRJ=|%#cJ6z4^q@<-m&j`fA&nCU0&}o2JyaUAB!hPI4;4aFdX;{{D35{2jxA
zE6Pb^vZ{)}fB=oeR66S=WXKj__~?E+>3DnoTNNd+Tv=IkFif&f)tL|mMrEX6kE;W$
zcLe{#pSLRl4ctBqFtBU#VfA9~$cj(gjf0&J40q0=ZPBt*Mfk!g3K#6Z1f9)jsnnXD
z_I%O_DOi2zCwg<(NJkD)DJuvriAHYR+@iw%?Y7eiT_QSu8l~3|NlivmDB4;&FVT%~
zidefnvp8gTJGgPxl1U)n;$v%s{DKcz@YbnB{uu16y0}}uN33E?Ni+XVV!BHs|G(IJ
z2OvR$u3K>0wr!i!wr!i!wo%izr>&Wuw(ag|+qP{R+u#3fyti+6BQv6IWn@%UR8&^x
zJ@=fO;98l0_AF`UzPd3C2QTV6MKI0p#rz)mJ+It7itp|bOd`m_#PHt^5dCsHawx+K
zvvxS+=K}QlpvT6u3haLs*03V*+B71mD?Jk+J@Z!Y8=A_lEY-$HJ&MyDH}Ndw5;^q*
zBgW(-)JLMxP<u|v=+m>ZJ)2mpY9v%GD6**h*0LZ2-dk`j%ecDJPN*Xz)SD0qYY_=8
zKvqY)!mve^mKf&BCgqB-G`X+@AEZx(FlW(erZEZBB6q};p$$%1ikZuAoUM5xo#cln
z3}bP__f6)5V_L8nit_|>g#MxIEIj>|^JRA3?1TN)@7g=J#U@ulS!QCPmQEDW8<}t_
zDkC)lxE0QouJBxtVtKguXs33P7QnJJ{*~iUICI41ZZy+EzqKK35@RZq|KQ;icKs|p
zVE%TVF<9Ec_fSWe=FBixqKFYfUsj~EOt|JfHfdSrH&j0Q6P^9E`bHj^`PjnZ*t^wS
z3OqkMnU<3xb$BP0Cq&T|@srzv(q&z7TUzJ^m`8={<|1)bHBHtiQBM)Hs!?$DNpESD
z)>KC?Z}gY*kv8`}ahWyHFdjBgLZnluYKOn%2`Nwtxhcc5^inBz40np*nls{WCamnn
zZPw@(DT1F}6P195E74M%)>*c$<fP@x06sHf#dVn}prLBlhZ8f-W^}f{9HQq60}d&m
z(I%q}MAoKym&~X{Y!P1LUX|X3CFO-ny18x&$G*+FC1@0EZIn)P&Jl|<Xy2$a<JFA`
zNl)>Bb{$(IJ)_$NlN&SOcsM|)WxFh!W}lv!U%Ti46X7SzZbMD{GVY_lj?g4BGV8Z<
zVih>_XQ62hu;hl37dmvj-*GWbCLLA4wC{(<ak5TyvCW{@n3xzZ<qo>#<F2h*48o+}
zt5V?o5P$KuZ*Lwayv-v-Kmq`T+LOCx$F1-Xt{Wbx`vgFNqp$VY>nS5OA)mK~Y)8aY
z%EehXu)qX8dmC3ykm|+V6toQ04bHgKLYsr^Cj?`hX9VK?Qg6}oZlNsz*<k_rdBCb!
zjc=>TL%K8rQ66VWA6YcaZ<*VRWHz?iO=8cTT`LWq<K;&SJ{^$@7Www>%uet-?#Cz}
z&>q1<$1ioURjGS8Hb$mfJON>;F)~}U%UTUh8!p}Qd`0~@kJFcygv0cIjX$ccuA_>t
zq~l<T!eBq0v$jbvzK-;jya0wj-I~%ik&%od-o%xC2$6r%bd*(_n7*6giz2Kk&c#zM
zjaF;NZmvVvi@Li|x8-N&&Hiu_0rAnPy0e?PNjcKH#nTx-<V6guSU!B2s)6ZLd$w?X
zu+hWWK73k{So0#vQBpv`T+wa^H`=MsD{P>%SuLc9TteVCG1~5_dX&4RuzSMIk7s|t
z;}fj4{7&S507-Uc)>M#sP;?NM|1#>&vvghla-x4RENMK^k$$-SYj5;PzYtxqf165o
z4RiX&E9Vz=KGyhtmkdtc7}62SwQ5#A3{MIQ_dIAQd5CYU#2%q^XZ3R&Q=BUinwEsL
z1bL5d#3JYwqz_&CBG%!&Rdl@QB+}#GnB$#4%hUQBM_6KO|6a*(ZfKAPQF1Ks<&e|i
zAPl0Q;XB`Xt{W4s|I9T7@$bO(4@ZNq3}vC*;`!it<9lLWYjvJAq#^E^Y4pFv5O3jr
z;1-Fu#_)5ooFE;b*^AD2w{o@P2|sZ#XsFAWL-2oAyZ;ifeHafAf7fJ#Kx;n9{n==l
zw!}cL)CZG<kDi1bq#n&dy<h_@ZXSqC%jdO#PURGp?Ua9Z7|p&j2BSy_Y4eps)+nz0
zg0WCyo{3b`kopu0kA<I)m_&=xytVs;Du46QvZB*aH_p~B%sjIvD&66m;>#|q{1K~B
z1D+J7&9aGIo}*F%jU5;3W-E*C0<wU)Rh*nh$sYZPSr3zHftz2!Q{V)M;DDL-y0plp
z7B;_9F`Sd=CR^04VP<lX1ZU!;Fjs5$M}Q)wmzi$K${|w^^p7Mz1i9QslwX}eeoTW;
zI_>5hMT)w@1Zj<G+^ZBBeDU7cJst2<dLo*#R$fS}ez(539lU{peUaN;)(Eu59!Xfo
z4RTcgWJ_16e+xot;ex;b?yvqklydVQ-2zMeratG<2Xc}v#la`sMt3*ODzG8<T}Zud
zu#HJ+<}EaS+O&S@n3}GcW4KxQJy!c%8D61@2~iI^=2h27R{iy3k4~_88+}rK1dgi^
zqaykDs2Tfi`3*z-WI`M;LcCxVN%T##;t!fH=+sZ0)Vs#{O{hS*3oXeIPoMg|>Vdlo
zg{-7k=gk34KUk0HOgS4(opS>#%4`o9H3w28pMHWOPI3)gl>K;Pq^w_<S_sM}OGQs?
zk-GJ3tHLSyh?{NsNue}I{hr2Ips<gDxbsWluF5=FRgZ{40h{IexLkF-rWfU6cDqcb
zKhZ7i{@YS1F&3~#dTuY+%{iQ0J>@Ns?>g$0&FQk#qdl*k@Cp*x>=}FB+oAAxuOKs7
zLLs{aNy*sv*qiS_=bB*g#J@)2a-C02ZFR0TdmoCA&L?uzL{nA!+-MnJ_}tXo?iqA^
zC^I)Uwpo?0Syi9wl-BvgOvcNxC};S7h!q2ARBdvW)(Ys?_EFjA;;&XIKt>?`CwSDm
zGAHfmB$!-V9X^BgqfIAMy<{eLAp)M~JWAabLK*Opq2P&!$j^l+UM&C6U$Lam9&|mu
z-lzR}j%^9UG@)bZ!O1g{oy)_Z@o?N#!BzJ8Hz2s(Aney2bg>w8F^@~(`dBG6$UIvM
zA<TaofSe-rnMgKpwL_dclHcCa$)P__kd+n`E8K)QGFB)`LOy4SQ0rH)Dt=%prH<P=
zSU%UMy^i#Q9Ki$`HiEq$2)dCnMp0c-Da}u~oNHvVP9kBv%{X01<hPL~`-@qF%}m$A
zicj8&a{Sqhc9>L*ls^{eL(X*Hqj&FgS;d1amI}@~Vr0VpVc<ecQV_h_1U)B@0#Z_L
zNGgQPx#gxpLCP%Dx5i~+zm{C_+&lMX;gDw4eTE%%<9MpVW^Q4foH%y*4D>o*)&FM^
z2*RAyElP{P@xOskPL8B)iZ528?rNl73x?li)s*RhIK_EXBe;bTBNvWTc+ER9vwt=J
z_*SqhR2xFlzsZ%-mHG3#{8Mz*z^-Urb-#%jo|#VT?8-TcWVI5T(ly^HRPDzAijrO^
zeyhxXxWlx@%rYlCi_sYaSF2E+mH7fDZ?h{H5{aeg|D3k4O6Mh0tZ#w1^5*e3RNS-#
zh$g3!h`#G)rMv^*=IYxLfy7{#amkFU&*q+Dib7VvCPMqb!N<hOjFHR<?bD7S0s$#d
zS)OkRXG=L>Zf`_7{B46)+A%7QJp!{Azk$Mv^^KQ4BF0N!G0h||I=`O?moIT9E5=$S
zrw)Z;{u#edtN&t%TpHj_ieo=Mf^boiMWEZ>)V6j3OY^p7)!xREr=nvl(Z0THE?n?K
z!BMi4(->R&Jse4~yaqe)H$$o)|F`jqA7Z1~z-??!HT`XDf_Hj3c$;n;*{(6qBnDPb
zY|}GA(MBX$RK9&@Su~9g5rK=8?BB7DK8<J|%ibA;B1qGpEkl5REMjlEP1TduLtJHZ
zVf?diWEg|U#}KT$`1qv?y&20*n6jRF>kH4bV1pc)Qr8^Mp-1hk5KEun(@fD1`=S*;
zQQXSXfm@w1)z|#lwb0RgHoMM@Orc)ez9a>gwp8h&77zBD)v@fZEcDg-+Z`K@suiZN
z>-uD`^ED~=lS06SAuINr8^$7&&WN+>zD(kt*Y*i^g2vY+ICAqW-@FpvV+=CsKBBG4
z-3811J2!U4-&cWNYl5+&;N^uf%gIXjs?YbT)B4wogM)_)>&KJP*S6>9Ng{_2r-s*$
zhuO)++zoW_h#U9EqIJbKqK&!dZR^LImtKAES&r{oAnL#bK~#|BB<v-bwYId=vd8gq
zUA<4TJJ9aum+3B8DCj#7L*(G#JbIpaciyD=boqE&Y`%w+JTR1opOAkD!kee#a(TBZ
z*4YkpQ7l5(dXM&+mZ~sz-uAK%W3svmv-W7Ohey}8G0Z1~tr`?X6Tb;AzhV7}s#H``
z89nIar3QRZtx~olGja4C6A<0uiFy@72!bLcq4uNIoO)vI0`|KCU|Cg{Sh6^qI2AHu
z^__D~)VIW>u!r`xwr~tsN$(@Xk5dhQ1q_NB@KwTeN(A$EQ2K>9cnk;96IJq)XHH=<
z!s)efQ}BB?#;kd-?@9Q@nD*K!36rWGXb=6sv;#7qeH(-(9ULwW^d~#AilxjcI{K&{
z;N!*)a~+Q_900#hkD{&AkGskA+rjHpCV_Q-Pd5aAtH+(eL#xM^m&LZbhf_)a>x<OW
zvUQ}ii<g6ox>U4}A58DV0-OHNciS(wof+wy@B1%@ahIL{-Z{qmmAD{DLOg_PorwId
zF90;5tlwu<xu?%Kx08X3R^#4}%)hZ6;mIL!gLd^Xg9wA1u;);Ngen8{z*-=k5%zG0
zIO1)H7ljJ{f69T-|F@(F{U3$@W_9!hLIgYyVg>Jwe69?Dl(gdEY=bo1P)A6IJe3Z{
z29;$e$E~Nx#2E&aP_OmKc+KmA-mJBw%*Rp$5c+?Hc{Zy)tZc@EM4v{yeP_&d#--)F
z{7njympW1KI4f;gF7@+=INQTf8i+2FcD|i)9VtYqMTcSl0yh-HBxM<njkA#`12=MI
ziAm(Pb~Q18H)0_}hY8cEV7G~(4*oIlW0n(h%~bx$>i0~%{FM7)z*bBwZb9!uj4m>O
z?sg#5D<96cU?dBXP+-5wr7u*nsP_g9U*ORI8<}QdYcYq(EK;@5K5NMgMpDPu$H`V3
zC21AnGt9>{XWKiuI@Ox2Dv8{nC%{bGUi#~m4H^TuT<5%lY$y+(<r#naKo(hEZIZXe
z3?_!4V~@Y`s20^Og<i5<g&)MJ2%lp`c2Tl_DM|i~JRfKgYtCB)aZ2t;ZLIhs5wAAf
zwK?X*T>;Ldfjy&gA7@;#8KRPswb4Zfxg5g2>Ikd^U5jJ84(r=04FmMTQX}6~5CIL0
zH3|<9G#lv1&~UinYM(twxt*vh*qdbwLbW$9;e*zMs4#IJ!S+is>t&ytMWp-42W=4&
zO;THAt<eP+jw}5)JL}@GlGH-q`dj>abi6iZytNRax8lgvna(6}19ALczsZAsav6tI
zW^G>UpZ<^~qeL`ySW*!4<Qd=TCQujvo1zmS5hCQ9&yu}+xhysVK(e6(Gl$^@gXM60
zu9eE%^G(pn_BnncFj!WqdghW>3YS`r6Y_6sAtMQwKNin|40sZ)Xp@Uhjoe9uS>ywB
z^b)`5az%UgY+!3JxL$kV-Q;XuyyGB_PtzCk|CZg=PK#<(qXXwBT0`eopPoLn^DRJN
za^EsYgz&-k>ve`iU`gLn#78<FKko$_y@r4F$#)maYf&)8bfz*}mHdS{N6~;lub4SH
z`__<g0rkz&cD=cs7Mh99!0WXn|KH^dyw$#0uRL7ejFO!wwy#XXyS4d`h!aJAS-;;e
z4)gY>iQ)QmFTk$Pdalw>TZYIV@_>b?eT80}<llz7ay-R2$^wW{*D06Nu7hbB?njhA
z7*u~l4>BxR$;y-ed^%V%>o_q-PK5@CR>~jaD|_5bf5NG2KA4<pmRA0{@ln?Y3hb)z
ztiz*mN&kip6_c?3$Gj;ZbU=Ep4e?zT>9h@418sqDhTFp&Vu;rzZW3w)gc|=p<sx7W
ztOd#$X^(J-Ki-G<QRqJnUf?&-dniL>@sh-GLIN`9Uxwk|la#ZnPp@D%ob@&3BX~nQ
z8#8^alNuvti8{^6D@|R>Gt?HP@Nfz0I=M#G6S|EotEEyFh-X-U)hth7Vyk|uy$B$|
zaNBUm-mw&A&8v{4bKSnpnd(Z2nKL9jV|axdQH<<(wDk-)i{7amd8Y}b>*%oM?%$%I
z^(=1x6Ik}>mAOQZ;fciBEURp~3&YPe(=ED<K#*n4xYp#7=Z1RuXT=5rf$-K{25y8u
z+u{7)v`avAC;OM#p8;J4pLfUDAzpyHLaArlP^06!W*@ho&cQo_0$sf$yXTH%d)Uty
z4M^#Ic!kD1jYp4=se7;6h}MhXlh<$+L+ba$e|{=S8gW~eX-`@t@7}8(M`HT;f|4)$
z94!k4n>-e!1jXj&=zUkJm%lYzeC>HpI>OX^WG?-LEW}IsWxh`6Du{1aDFGfjbZ?8x
zp+g%Hgz0H>gQOUYMtbig5XSvqh%rOjv{m%p2_$L;g858-rR{#Zx!H0G?MnORdw!ZZ
zlgeKEwZoidJwZdG%<jToulYkhiV|2y&VSBA<vc}}zit&F2aVg0<RMDQ_vct3zpg6_
z$ABq07Nc>rrM`i3hQk0!(?PPbsf1gZo8e4gr`{wR@#Nx9j{wDmKwcjm#)cpFDQuOU
zotSHaoaZl3p9euk%Da#83Fab<FYo}XZP38|;okY&>U27RF%jmv?xYigh45DG4d12p
z?X^&hU<|o=`18kf4yNbjF#h6!U{k{6^#4TW**Q`ZYCygs^z5lhIbd`^=Cb{&#1|TQ
zkKT@N;K=&wyzC8=MH*{UCJsVHjGo{QEtO(DZAbX8E`C8o8P%#Sp1$WN|IWeoVBOnc
zba>$FHwYr1e-A!H6Um7G<1^n~f=2vCC5?v_o(S?sT?<T7`pJ~~UdP<CRZC<7YTx7V
zuGmrMkCZw3`x}%Taxw6HYt`#?c}e&mzZ_8uyH$VRsy`G7%M?FL!TVok?(;;rHE04N
zDI|BnL-VQwwbWRrB1oWG*_NTl9+y#;$V4$tTp*qcg4$ZnzlmKxr|#3ZTboq0*aJ3q
zW@??_fN?DrOsN54w546-slcw8k5KYx?3pdTIbvB!X>639ZlGkH11A)lZ+V)_kGa=3
zK67)q&)&=NZNv()Dd7M;ZIrd-ov7g=X~lm?*Vo#EM*<tf&OrnHd)o^=sLUVcLQG@G
z0<Q_1EfL$Q!S1fwu{!CH%o!h#U5BSQccVzo9dbfTcP!l~{ODO&MKRv^DB{HzzI=#5
zv*cXj6XJH4Tp;F`SF@_=A4aVS+ok#-glkn+H$7W(-o~{$0>#A0(@a~Ru>o3L2vBA4
zz~vtpRD;b?;7s)z+FGYwTpyF3PuQs7Ds4>ZVZrJo;@VIy407sSW40$v%r%f!iR#d(
z1#x|}>I6gKvZ~<IZm|y3Dg#~F#$4G0amM7rgh+!2rU2@p!TV-#aKPHR^9^v+$mV!H
z_Q-f|@n%F}M*$u6sP%2mnG)WFVNs{TStIHz`fd$7HD~cD%vrlSd&o0to2wlk+6cPL
z&a^AipkkD9o;&`bm^BUArw_84a~cY&;RbOgQP`TWrZReOV<H>KM~GLN{3Oj2yXx0T
zZ$zc|4BXMgp`}KS<p8zD6ckp%ytbnSR+^9h0vxakjx~de=U*S|B1uf9mDdY3G~qRw
zhUb^(j_2H+8&I*Em;H~Vb7;VsYnx(p!qwIz<`#F`Ik}D${&pgtLdKNx#=MZKR&;BJ
z&t+g>O2jfpeQ^|JTUHogY`^4n={A3?EHzvyfML^q0|)^NA3K-^<T_~twLCYd29`OK
zn*Nfd2sG8?g9f8|uvPX}%u)Jb$Vxdk<=-vcrCuxE?CM?Q9?tUxWh35ywwg^_!Bjiq
zD|g12AT^XCC$uslLC)sWg%5XZG-z^U)>q6c4<w@ATPW7Z3E{s}YxW!^Y>_i~>wq)d
z1NHcWPA5_V`!xvFyLnChwhmFPxZUO)n;W&_m6ycm1dOY14`th@i)ICdVasU5ZT0n6
zw5yeW?`6_7|7jB_BQ&T9i-D6zdS6KR&?HSvh?*eBs(>v897<4N>-ymq{Xsw$FVJOg
zDg_ahmOry){@swI{cOP&rt-z3j~B3524IpmFj%Q%n4h-ahuyZ?8RlBzv)y$nJf>b_
zfAHeK+Rd0S=7iphk1HKUwUJox9vmhzUb_m0r3H3RMchGD8lsRce6lWL+^<qC&=9qM
zuXGX@zVEKnvBlYiWy&RD7NNA(*YBqa&A#j(#L@&pA8OrwQDv_7Z)Rd&Eq3pj0QcnM
zzG(k4*HnykD(RV?z&BWNeiWxAF*7>S`dBGjXGkc+kE2}m9W;|L8dDFwD+9>BM&9WL
zoR+3a`-%4Da({E(sa}$hO!^Y~zdNfPr|*AyDwHD5HPlgAdq4UQ6EmHLtnqtZ<xT98
zkG$f=aqx-+?Rr85eGwmN-L<>zfnQaDBYv8tRg?&vXojlXnC-lOR>B=C#==jcKu+wu
z_lo_#KV5__uNAV~aFvDX-@X&{94Ba)Ucg)(%wwNNx1*TUxK3KWhorVeEsm9Z!3LC<
z?x|JfvQjkLa1P~YAjd9ptZ|~tog>LHCyJZdhGwF#@zf2&-P9=MWIH3g$ZYB+S%)`O
zW%I`$P<f|rGynNXW3zK|5i=7zm{`N|@%=B<fRlsyzcT#u)M5KoX5`RIe^|odpdW}H
z2CH1c&W@=^N?p+4mn<jz?wOr_(lXX(IwB<X;!#V?#0mJ`Pq(x2X~sVyv0JSI09NoJ
zX6put0oGD<Tt=NtOo;C2$cG>c_T*1m$dx8IA<eP{s82e1>1`G-r)NsLhN=qDu40#k
z->!lA8frid(P<&sT(3jKz-6md82QgO8j#q_VNvhJlYA(;RPUHVc)6<$AEO_8b{^r%
z+w?EEmW=UgfwVNfKCu@aLK<g$k9FCYh=Lnx$8@O)i82T+0<x$!=ofsCFkAiJ0+cY8
zh=wR3nxcaBNIh7ln>rUgzt(LVqVcFTB|3s_hPeUAD+|>ne~sBr%rhleYU}btScAy9
z5OmyyKw_z#2#-bsOW_`qU;PG{5by`a3u%s_$5(0*{Tos2jKI6aWgO4z>8K87r?AQ=
z${R0KC1SuW?N*&z<9$Ng%BAy+@eYig%@en2<G&tX^u;{fTP&RDnt!kr=6qHkH56Tr
zz!UJyKGYDb8J%*NDuh;F3t7?mn_s*P?~l6rkHcwYPHdFo7MyyF&&h>P4yVQN=1Oux
zFwYa-Wm{+5#!!7nsI|Q3b>mXUDx&vSUHF^je9obeTC5Waw`J<XYW2DAWkt4V<*(Nt
z6oX}ARoGb+`xZ1|Wq;q;;XwotT_nt71&IKM2xkm#x1n=Ge*NXQgKrY3By`sT4~qc~
z2uc?d7m@K^jLMpLgsCOc+W5}W*^FtMsE(f8BbN|elY>eHO25*TFb9W;&l5UImoP(V
zFEZv<%*E}Bk@X1B=k!#KBfT@~lpx#4tIEHzA$p0gBar334f$*yZUi|zF`PqPUyUP#
z`p<>Vdgs0Ivb<VE{pWiHVNYfL$`g^KWWfYDta2iM<QV>mLuF<ozZWUlTq#^usV_<O
z?hkEb#+P*u)=se*9=^Hs@E|u|PWeJVc)%U0uRSjx*Ob@NdDfoq&&IdT-dGjzyR{Sh
zMsVct`?c}KV<WlYL@nca4A(O~4EFr5gMIFwVf_WY__qyw_-UG7@j3`RSzQI!Jv#x{
z&znx9joc2rEEwc2f^F~wGwCH}d@M`BiL|R0*ofZ^`3yc|?Ogw8gI$z!-VuS*@tj<#
z0kk5l>Z!+si&Kw_{OZSz?J-4@!vJbHDri4UNP%+83CpeSm~8~AG6RQ-T(`(y^alYy
zxG7-K3f1yDZXOWdnL(lGPvHGiSI7WRf^Y3U#$9SA{6`Ue;}-$6gQCg$zpB%|=g6(K
zm&%UA5)xL>Er#Op_Xq_fhn*v8=ZTp<j@BYaOa4K7Nh~4e>jNtW!vs$-o=&!p92Np)
z>TkY3Gj=%V5-<J<gVPZ$06Nok_)#cwsx(=I6C6c#5rWl<eQ#a9i(!L-b&mp=i{jJ_
zX(}qYe-G{=4L-Ll=!UyS4tOE*I`X|!2X`cnZANbf7imE2I@E`ufrxsS8Z=~%rndA2
zZaSi`C|_4*s;co1yt3mg;(dPBKc@MN$`mc*-@wl$v3P8H_k^{dehrW&!ezC-A{iq2
zI&1jlQn^M_ZG(w>1Mcq603RSi*8yee{&mssCs0?2D|PP;dg>h7S2uIp@;U{bsRPdr
zBWFSEWpP?;z)&(&rn#pAH@f=SO+pV6X2<*j+4Eh2+t4Roa6nP(Cl1CQI7AFv#hIj{
zlt=JLOrb_X595%2CcUs146B!~n8l}n5aQuc<p)0_8N<~;(i(&2(*RH!T=nld-lv1w
z6{?uQy9M|dgiyIRmUX2|z}MIb65B|4h1~r&kcUo|P|@#i00qN=yV*VIpDqdiPYh7G
zssnCT(@|z0--ZYn=&B!RLS5O`AIKR~UK8$NlAFOKhk6CacB%9E<H7>ihX6q-#8p(<
zLX%JGyl3UUW?QffE&%!m6UoYsw(f%symQ8iR3WY_JhSl038uAC^aDF{h<!3vxE7D_
zUD+x}nqAQ=Sm#*6a<)9-&ci+!pVZ@hgD`s@9s|p8t(S(n7HT<M7vnd`TWfGHt8b1h
zwH^OBkE~;Q68h6zGAE04u8O_ujo23MAi~MStf!B%*Br;j*#HF`vp$twN|J>$<wbsh
zUk6>KBQqT<maDTeR3C~1jZW}R>iI|VcOy)YkBhH@8ilw%r0&D53_2ofu7_(u3x6i)
zpY4C%I%JL7>5g%|_eXJsj)ivW;e5xChoeQ<IKVu@l6CxcNAqXZGC{ehcq;SkTUwSL
zL>t#Pda)-yYA*m0E{0sXC!fbQ6r4uc7hkeDaGBg5EP@Z5oQb$4AffSx^&>>EdJDV1
zlGf~}z=3O1a(202kmGy|t0`_LvtkkR1i5#$)t*|PoARHuiO4g^p1hV@wF)npAOeFr
zA{(*}@*$Zz_dK%e{QRAsETW1AVRIQ?0SPrerJpNrm;=BsapUMq>Nb=Y?^bJxq84E_
z6Ry9H=`5)S)3TFL9F`V5`FZx*bzhfTTvO}t_Z>RrW$1>Fk|4Z?L=(SZ#SzUKs93HY
zJrvhi>p5!QO<J|>jq3BxAptqoC-r=*Fg&HMp9u~8Q#S|+esP-_WXCo{h#xe;^oKs!
zNE%ya#0QXiB@Sia7h=NfHRs32I<EG=r&Vl<wNH_o%;M)8%O-VX#gi{XGZR=Jaw2ol
zt~{}QN|Ia0;MKE;THaM`d{z?_T;Cct(c0xQrC=JNrRrN+MO5s+$yR`bZ}#5Md#A^2
z#gTvkyXm#)qgU9Qw!j{g6VI$rI&%nNB3^9lNddMl1Voyi`~gol?l(_2u*|7T&^IaB
zHn*0}UZ!e6L>Gk8YEbBh<3v3K8!_i(EfmbOV_bc+bAQ;W<xX$1?q;+Ays4Pth&_wq
zn2d-R$_Lwy!U>-4&T7Ie-64MAbF5y74GWm$Fm7#OZuw1#2aDU1?Ime(qu)D8D$|&j
zgQ9i`A*|f{s*UfSC0i*py$hPw)e}$&d*|T1PUTk?hzw3{vW7O!H>7Lw`mQus(u#>L
zAs?uI@0I|VRF}smXq|y=>3^maF!t}9sVqX^=pbDG(WuY>720+#c~bwGTDm2Rb(V1;
zv6~(2O*k+1QPJd28Xp?z1Ai1_Y>R!*1c3G1Kx~+tvgFcmHc=17$6LNzQWgtH7J*#l
zCq;N`M-!+{hpV4UIhK9P%l|An&4YdN{yk8)-szTZn+pCN5chY70$R)d(z|m~3dT$b
z7(o6JjvxR+LB30<_PQ0z|B*((m5+8f@SEKEa-Wu(ioI;yioHzT@MXs6o;HYL=?B>y
zE*TEe3@a}GGFf&gGZ6D5T&xB=yS|+BvQSPv_7ii$f$fS%kHIgRHXgEi=HQ8jXBG#a
ztvKuB3Fydsxer;Hms$j_^gY6F?s6jO*ddc$*%1NG^zz|qEGmi^hmE^Dkd~F>Yf6QY
zD``X)N$YY-7b|nuio2O2Uf9N~6HN4*awFKKwe>s!=_b?=zPbg^ptO+YBSlZg8G^=U
z<WT!I_!=W0W;tfVCg$o0vZEvxfn+@Wb<FT?aU*7=ZJI4_zA{(Y>a}VX{usB^>H;-~
z+|od58cLdWSZm|y3+s+a2mKAJFjYKPSl9u#kUUR}#ta;bEQ(1=0113X=mDL(l1t9W
zQnwpT*ufHW@}%kyEC<Fdk^$x!J%GW9kjOF1bfAU3Bh6N)U(<^6*{VBQP36Qz=`4II
zXGD@c{b+7%wm;4}2_(4~gOX*qu`bo39~CIf){Rc<Nw>|}yVg+?{RQ74Cdl&Pidm9Z
zn&rlDlGfuQ8o9_LK21M8AHf>jkMDzuK}JcZx!=|o+im2FXb0#=L;d(TIc)~4K+eqk
z-68dL|9HJVk7FligcdVi%X?M`VsFB|dkVRbVQ=(mzE|YgPW?e<OnA*#Ww<6SA_L-M
z>@_pJFt}E0JYi&6V(W%I=h4+$X4X)&MJX#5zCA0YlFQZ>nU#>P7&jk&v%&d92)+D)
zpK%5HkxA+Si>E@}!CddR)2JvemwJvNvl*gzu^2LAhc=S*v>?*5uZIFz60R&q-b=2U
zmu`zG*PUVr-CLgKzyiU`t_%L_&ouyw2QnRZbrxxfUbmWwhj9K{31L6+`Rn2XiJQ>R
zT(rFPuaBqb>hD0bF7&Oqj6pt;H*1ZbYA*+JHpI}wq39f0aQb?q$HWt(g+FO20_C6y
z`mdekm96L~^O(}9^ETjQEbydNg)6X_60_BRaom^pwd!Gs8(cSNFODpp(c}W7=xWJg
z*{UZ>b71{B?h}NFjRc*4U{XCLogTQpvLP@NUj;psG>=&@pZjIq2ToD`(LF3*99dR<
zTF6>=-WXeUrU22doM|?upvy5FWsg0;z8aK;4pia2<CF9R5r^hSyoP?A&BN}!a^fNQ
zJFQZQ%=?GM+J|JGX?~g)EAQtQk9v}f6|Awjn=^jei9L6}!k#9jcivuAxL@p>Uu0&0
zRutL{(!wT5WS@*Z8Z$>Gg1(yJ#2qGrWkR`uvsyHfwPaY?%_%L)-06=`-GIZMIq;sV
z)e<*mN_Q&|N?$>~SRKh_rMW;FFW*VEtS&?mOTh-cNecs|qLfXU3e_i|vRK_?L$2cD
z+tk$N{v0`|Q3Q&(S_+Mc<%1+ycVB>lsRolZ*1EFC+wrzDpC>kl2mvV^4$xaI!TCqS
zd86H3!@f0c{lo1qS?-cTSN&hC8jbMYk%>yy6?##JzgIN$cn11nISaGnh_@B9@yiMv
ztubs+SUy;nMuFF4+%CTWgkhZT;O$UUJMa*ZPr6y#c3IpJmyv94hw_%^MJpGwgm-%`
zz)xpA${K;-Pf_Smvi>?Q!!8dftNcgfeB(@YL+kv|$$pp?kfcjns<5CaN-0RSUs}e_
zE*I9qhuc=`!k8Jv-A+e*6QLqhk?8s7=$RB)6Rueff7pJAAJX^&Hm>&E4jOm7HKI5&
z@ckyb(L<RP7<;8Qd0IqH$gt^R2FvBwBmoRMPa1od_F=niVH=`V%AN$Cn-#&2qJNv&
zPL{x(SHjKM1^ND+==144Uf}5qS<tNi3*{=_D5rVZR`<AywX1<BPeE`ZBTGf7Q8($s
zx?h5ACp~k>np}7Rj28TVa^uUj`GTU2nGQPLP~$}=(N}XXlQGeD_;AChO5oc$B{n+V
zpm)+KEMyxNy(rL>Otc)E6xu)D$XuCrI6hTVp^Qq=4n_q`N~=wKYuj(0a2lLdL`4MZ
z<9Q<H+}m$=2TR7H-~F|vzCvEYn3=Wxu7@otY5=9UM0->OT<HfCU9@XYRb4Nme5RK_
zP~lT~kfV7eK&&XQFR>z3&40%dxUo0Xvz373W0*)B4{`D91v!+qus8hdb5@%Kz0z<_
zrksz1VJv4LOhDn(&pefCVW;{VqFH=btUxr+u&9(JS+?rSkQYeOlc_e`%=mXG-;yOp
zTV<WJ_xK6L3aNa0;IY;Bkg)TG!7T2MQ13y1F9;@#a5$&euKg7cZ@2L<IP6WY2$0>Y
z?&(5-k|vjrAOlYp_ka%Z4JC+xwMK;+l^0RfbNoPH0HcS{`UzEh_#(Y#QwZJoQ+Y8z
z(T~TTdJu4?icPA4{7)J@t|S!AuUVLb`@fh&hpN0H9t(2EWmVc=zpJh5!Ig^|@_Jz*
zD{b=paIoqCi52z`<OaciyZ4MRs91<<2|LTzW0~oP-*E|rdQ(qaR0;6=!Sh)Puz$CF
z<u_a42ri!X`Js~*HS3^~kfxU-SHPOze`d?tk+?YS#9>EkLW}@j$(i;hyR%;ET^?T!
zAa)`xvAveD*g4{lX@DoW-Dd-BvgS#`*+SfR3kS{54WTKQvBH1lQ9kYx=o~llJW|dP
z8L>r?z&eRz&P()x-Kznkx!8x$D!(3NmGqA*%bX91#HaW6t<NHnz+rIa#v4RY-1J0^
zD7Ut89D+ec$R2Wv>oWbfaqbYuxM>L>$%a)--_%i*JBVEU#<<HQp7XC=o1TyAxAF~u
z1+qGLV-8}gtln>Xtz_B{ZXn9s-M04JGi77me9`$<FYEMmr{lQQq<nxIGgI;1G%hQa
zDqa*86FqkVVP4UDYV~h#x*E#@Xn`|HC(le6@ZKasq}N!TbN_nB4E+psE1)T7=8C$v
z>5I8Bybg&F*cfo1uu&(p>kMAM@YJ!+%&{W0UlUPaokzhmQP<Pd)M1d~p)Hi6{zI!a
zBaxLyS1o1x?Bq>-bL~=aIqLe)|E#Y#SpILq9ru4}$@^N`|Ji}S|FLT7?;UY+KBCO)
z!P8Nz6r4k;5gd33@n|AhxtW(A`}x039Kyz|zfO1s!+FfaxA=(v(x17=Sui14HXf*b
zBZLtYvY4Ua2~h_hW6CeyS6zx_o0(p8#it7_OG3XVW#IM}K4QJOrdE)zKqXi@U5;}_
z!^>n*1F$V9SfO|*VGwFnc#|=7E=x^sQ_&2$>3*XY<g9`NSShmOqr$#kEP<3VV-e!x
zNGbB;+eb<F-2RJr{R|y<_MThFBTnaKlYMETo4i3>_UO3ZP0Z{(J5Qf-;PywJpij_3
zq85@_sK^P$^^>Q%;_xTPN=~<M-K2!m=Q+bJ0UhhZJQ?D_2mUZgZ$r%c{wcfCMst?Q
zwVq#7YvxOxy1MMFF3Y^#H>mxS$~T(mG~2h?QwTVv;B?>tz5E3+r%I!-zOk|p7T)c#
zbBL)cRifiDzfKYxm4!-W2^0#Z1W{h_@3nNJq0h0;Osi<slpY#rCsoS}YHM38=VQ)V
z0h*>ot(&oQY^8$`)OZJ0{xUtgQHz#<6QZ7>6`nAl{=xgtnE!R7rPAb|H4fXSN0Ek*
zYokQ?2`aL+zOW}LRL|dN*GjREpxgqTjl~<Q*i;C=1rqMdX=^A9^SaHF`pgR&seHg;
z&4WZ!oimrN5Kigh&+58d=~s8Rrw#9-02?ZW_@C<mFC$+W<O4o`+7Z?#bU^VtxBrx$
zio%dkPSk*V!s?>v@dHoHG<zkeEBSV+870vg<2cm1A2fqct)?~#-#$h422uTnAjh?e
z0Tb%T|5-V&R(-#S`5lY5UOvXSX>G)F`G<vA(7FAsVn7P!nhUQ+(JXlH{W~*`3DAJF
z-<+GJADeVc!P%$cyD;Y#`G=>;_M*0^8_N|YmkTzKoEM?<4@Mf2663|gLJKIEd!{d=
zta(&+=Wpz^0dt!=Rd)Te6p`TH#>;`*G+jtz!*{a3f7EEhZUiNVr|<j%%)-FA_4gVI
z$HGJ7$VPZ2(Z7k?{PUKpImMQXAqQyd<q`-{<b+tG-*R2F6k3CukPRagDOf{_LIevb
zsGwTPDY2B=_y%vJc=t#;gNj)FsK`gxEg}6V+S!>iF)ZYYveHzeSULJvsJynSR#l3u
z<ek3v<L#Eqm<bz>Y8U8e9(yNMxk-@Ep^9#a<{bgPT+UT^ZGXD!*TGx9xdKJCzLLtQ
zq7{I<fHg}DCQLVI0&3_+l*qXU!hK9QJpKOh2jq;fJE<d`ngx>+;An%iynAUzUrFxA
z9yKH%-!CyJqfa0=FQXOy$@&1(TCb>09&VLL3dTS<ev>S|LG~JM<66iVZ`Y{Il0ZwV
zcXr}euGI6k$=r0<E}N+?2Y}DX<*Nu8#1XJRnybZsM(pL3xt`buA}O~f?*;d#=W$S%
ziowae{(>2KM8;tReMCliI&EW{NJnM3jJoYNj_^_~dZ}&x6=){YI6r7pVCb<TSu*t9
zsLwgJQljN^Bx_Io#X^ebe%vA;%bBO;(=n$i8x>odmjWGW8Tdn>3}g@eR!%QSZpDR0
z8VPv=)u$NMEh%*;m{>D}=v<|EN)s{wWM#Y<cQCdNhqk%Lh}~9y>8xy!vJMFQG9DEp
zV=b<=`s@W72gVDwiC+jBT>7lIx9rv(Ng6cXM{#=Sr9M|c*<o^3`k$Ex_qdbc1sE%l
zMvr_qyI%N!(J2f^#FOf31G~D0UoB$|T9_)xkzSt06uSTXcATvH>%aaeGg~T(5GW-w
z3p30AL(<I2oz#6s2k1NekDj?|%XAfrk-HZM5rj-gV2e{I3b%%61~-&=^mML*3}*&b
z>eFx1u|HW~ccbhH)p1KpkKyuaZQD0%dn&ym6rD9QL~jX-A)W@3A*81tiaR_3iCWEC
zV9TiC<=Z9|D$#b8-YY%8wF)DVrcxjE)78qeo}6A|84C@N<GfI*CU0v`lp+4JM+TFB
za+?UMgh@32B}<mX<T`W>RECq=xpjs;OJW%b5RZ(bc9j1RJLnpSB~Jau_wIqp+)H7J
z5JLM}9I8V7IwXQ(r$yGJWbHouQ$x;=uu$qIl}1ds^#s-_zOqe(LQ2yhz!SyAD_^+v
zr5Y7|Wiu6^r@jm0xC(K9$50UFe&w4Gj(XuM{JrAVg<s#Qpx@rOmK(36dVI@1w}y{_
zuA7dJ@k>AI$!F`njB-##rMSVAkz4Il5gj(gR}i+d+O|`IraSGm3AJ1eXv*uZmmNsd
zXuF7ls0-z1DhNqgQkF(!&;&56rlj6u$U`*NenbLNT^cXed4J|BRlE64HFiW)Phin~
z6<P!<kW;u=Qk2`pY5fG(i4)Z{V`Zf|4t48fHSnu<%I01OsRecgKP$*a!LxVL$JP(@
z-qRao1I@nE(C;VK-C<QCXC%MHlqnYXhrB3Q^vdo~73{hAD&gyK5WV2Ze%jeH4%Wm=
z5t#t;Jr~9#y_U6%Gs%h-4pA*0`;{dZDL!l*k9gm`;A_CgIusob=PEZBvRmn(KTbQ3
znATgDld}1|U2DA_Ha%9WpC5L1oIPs2yl<Ts1wZe{`vC>cO?`uo6$5_7aD?Oj1Ex%(
z@0)^?@4dqZMd#0qd|@(wjW=mr*tuviq7VQD$$Vug=F8QqBjqJNgiJw0fj0O|q8_43
z2LprM?eD2r%BBOkf}swb+}*ht+xhqy6T!@=Xb(}&u@?2vh!xO9j$&#;!Lv)%4ogo<
zYl#^We|?#<J|*i*BOwbjOanPk8>H+jC6smaW357S@&``-lxT|)kLVc7)#9Tn{tO0k
zrPsP_%;KPWP-2_$Rnvb)kZX8wYPH3Ofkl<taZ{%Mgdq&A7apr2MKj+i9!?RRxhLr!
zrp>FzYnB`h9?EaUSJo#&(W56xM3Y4aKhq#hymc09BqU8LmKt|to_u0HIzk^(kvk{k
zZ4FXcj9Y}B^=J{L2t=e0pTF;IetH6KOcrxJ&v1}gFlFC^6({tz8sE_h?fpMqM}gN9
zf%`$jx}qodr<>vV{pVSR-y!2kM1*1Eb>|LkS3A8;e$Ef04`#RgDXRu&mD$;@+aD^6
zsoymZS5Nt`kN>@{KFnv<T`~f2`bab6sEN#|zU+&4Np*D4*U#pH|H^J~PdxyMvuYla
zPJ$uqBkVbrY8Gt8eRfDM_#g0|@S%Hr<cB2ONW)%I6QZmL!|dd<@pAt!<2HUwloe^1
zkNp2IoN*FI<Ml%KSjkgKTHuGxr5HuOnjB&d`df3p2@v`$yNv45-o(i0?jZnZtgN6v
z=G+JMl<LK|L&gdwj2SVeWq1eI*ivOERJ0MT0yFACA~nDH?5Oaw2#U#~g-4Mto2ju>
zQixth1%3<dA7zmzW+bMWRvJNIEs)~!qDe1x36F{tQ~ZXbdnEqX`^76fhmsj<AG0pk
z<=4&&$N)H#@6QOuEk;<TTQq#YSwt>YS!tH<+bsA4s7%q2LOwo>uMABu+&(r?1M^nk
zWGmGU1)HSwae|6y$~I!i^6Os&lC&7^QYd{88wrmH8ZqyFyjVUDo1s?KQWiO>BTWzj
zN^gS@su;@kQi^HDAF5`xQg9y$Ep!BxQcdQsr<EcT38(ZoYMitUd|?Fkp={TK=}Cvl
z>hDDfxO9-|>)DrATBY|mk&{zQz`XKDP`tpQJ6^^IL6vnkZ{hUd_V-DUG1!_747Q%_
zB#3Fl$Hr~0R)y4PQCIR@n!jYqUCU&FQ(s-IScZG>7Y@Klf3Z#PBGbNw-bI>#<Ccw*
zj4LJ0)>%NEgx|okr~s*^8OUKuX#H~!-YO1rW)XU3+=Va!;oA?k;fsVnbs!`rDUiC@
z114BSkWXwzAW(`SC4yxZQbaSlEVPx_tT(wGn4KYHN0F+pV9ZjkUCe;8F7hoK**Ln@
zR<nnnFj~~An>-GBPQx{gP)62h%-ooel;rG%_-R{y9D>9~g}}XVf~Iv}2P(=^Yp%f!
z*xj$&6Y!sF<2>~{mg94@bFSp?su@#{rQuS?jPFU^^sd4$MfDc;x2&6Gnlb)*DJYaM
z=!siq$$}Lrw?KBss$JE>-F*#*l);%_CH%aZrhKT(SzV@T(H*&uRN<peesN@6?it8v
z79vft=<Eew1JLRnA3H+Io`joEPIz0)77GtWTfb*i43;rZlzc---mEe{N+NF+mlx~q
z9QQ44==Cq=Y~J5e{(PEq<xBkTXjD?d#|vr(p5hg<j2Zlp<2_z6e<Qn56nU$d9_Oqm
z>4)=^4&}01?8Hh!w9Jb#R!HK9g&%E(l2Fw3{>Xu{%0Q>h8;O^{0+WZ-&I=AcP1!zw
z^5dwaKeONF^EwC=fDxm#^`!Ii+nVT6Sp8o;(#d201H*S5JMRBo5d;YokAFP<uUb;R
zJhpn9tAi@@vf2}-<FG$(o4YS~N|dPiFJgYQ3jLkO%v=y``%642@5l^XuI#r{;SN9O
zw|NJXS9#<5IlAsaTt;DV#ePRi(&Ushx_V)bew0-9!G;B@$tvJ<+4K>yzqq6hgF<u%
z#jGbCWYi0Sg6cHY5&Y+(X5VN#{x!LF)%Y9Sb!OH+oCeu;1vt{%N;;Ms)=`t(@FHHe
z)PP`x8~i2XqGVsHm8=E~SYdXWUkWPoB#r9ljiH|+Rj>U^>b*S>NY1pr$=amWX>mXJ
zbPOl&q&AJd>v_cODyBWTnH^*ZCZw-kj*K<Iy>EdxUAUYb90G4_bLa>XD$4m>pPkKK
zuMhn-!yDVEM>|2ovi0>|YcKDoB|NinZW^PhM`t!(Y_hqYY_EVxj>c&Qxr}pcgA_G_
zIPwV9_3xu|0YUSkNh+x4_^z|@D*iqV!5sSEyVCw)6$;Cu%bWYJMo1JzOdFzjX3LP;
zjlwB*@#c8!Ymf*{!o7A=j(F_t2)G-edz|D=BrOQTc2f4D&UlHd@qG5;J%|IuaUd}u
zal$xYIA8=p>J<RSFfj(Ar$avdXA_zK>QZaXil2wChvxUgw%Ns^!y*R-#p_4ix3wID
ztcwL%eJHBZ9FgNKu_e)8X_8ehm1!dm_hhf3BJQD3*su?y`)ns(?-%RG$IGjRjEag?
z9+qvVvotF-dogXi=bmjkvG<o&e&<S&{!vODPN3LhHSqx9?8Ip1Vs(z8;kdFqXm>%|
zk?z~TOaiK~W<}~lsj;e<@%JqB_Z5~V%>5jb7yk9EOV=EG?C2?_UWD~(HjxFgR+`gO
z$b*wZahwT?@Zo4VH^bROzj?X2Xd=JgOM*Wn+D976G7|1NlJNYkheDaN+6Q5MBjQR9
zI6nThdbMF?7ynj!)xHuI#t9XcymO)U{DcCDneqIe;5<j_bPEVN*!S<>{|n`eYuY)i
z68|@n@?-=%uykO$nD4OC%I;Jkqi${<n<P<s%I?m2zj=vxMtMBCU_Gp(%{u6Wf5nFn
z6(|=$ESb$DZF$MeDF$mVho4|3LfXB{Os-7dyg-hVM7OeT$x{e3E3j^v!vs%2306qn
z!6n5A$*&|WteBQ>IhIrpthSjg4qFwax{||_hLZ~)x%?%{wh%w;>@7e|XoR%Mv$JmF
zi0nubNwi<)4s)14qS<vZ4##q=Kwr_<hhq(GR3&X@WqCGdfJ6P!@Ag}$lS1^0B%@!D
zY5LM+1)iBpCuW|pOShs+q^OU_wdOzs2NePYN#wXXa||TaEAlfF2y+enCNHE=<_#{c
zU(f(imJOyHnn_KW15PCT6(iS{a_D*i@zEsK`i=wrSNGc{((xH$_CDM}|H3=<XpQh}
z>447qL(ROlMgRf3^8tkN8SL%BN*iz5I^y1zj|@S}4f(|!*GAXlW!CP1H8nHe)n5eM
z%Td}6L(;^S*P<a2fW;p!>J<)iy5w9#sOYUyA`(=mmEU+D*J{Gh5LLxH{Ndf-`&;2=
z>+$oWvA2IfYtE~~MBn}JNM6^MA{-J8C5%WkWSJ8~-QpToSIOa4Jj0I*LsZT9z1b3}
zH>xV-SGP^MktZo#4WdWPzw4%0K@;{2-mPo3SMVjG%b+|5pc??W>k0uSOoeV`5+Fy7
z-k?NtJdv!2gmqMQ_+vDLY??`*f@1+bIuHng+cHX}kkdq)>Q-)qCZDNL&FU5b>GoZI
zMtgJ7PWQNPx_LSoPLnZ>ot;UhUE$3vgOgFh&PHm~96`p;y}MT<NtB}r{LP124cL;H
zm4?$tqhJyTf?|UGAGry5?mi!5k-BAee1n%LSK>0KL@X8K%->^OvzRfav=dS>w;-SI
zd%Nv>so*O}zs>x>_6yaWsT}g=*6u3scY|=qfu-G9`F`0F&@>qvPPc#BpczKwjKT5U
zvgBuwmNdenAs1PSplxEV`A~G=Y!4J+F#8puuym^?!qBogV7kG)x!FHDTKr!ujFU4-
z*dGm)mHodXWM5-l@rz&uTpDf<K9LOM)^uRi3mc0=*Hj=$5oD~8+mRL2lZjV<=J4{;
zoKvG_HuA%(%Tyk=ZTh|W#&V~lC@A=V=43&eaJy(rl<$sVCo*|&`p8k+%WG|-_NpAt
z(;`B`3CE^(C|;eW%wV$k1->z#5oB>Gf?ICz%7&@}d2Idp$ogx>!V<&7TkVRfG@h)@
zTo;DZr(c_(2(Cr0>|3)9goy7=b5KE)XQNE~^4Js5Vhrbu#HkRf9LAE0ZBqA0m-?dp
zg0fi&v+brg2v|6?7nMj2sF9bs!A!2Er40P~M#Yh#y=g9AAXVB5j&_j*f+5gCGetl^
zG)1-m*r%x~n23EFVzqF?lVcNBb@*CY<%=w4<oSeqA(~8a5SNo>?W|USb5W!vXa~Pa
zsXKn{B7np^<BCjdQ%qNEt)@QCLz_BVOt9#N9%=3$h6%UQvu*@xjxzqwnGsBAS?u=J
znm<k!?I=aIv=)MXgffl+eBXLKxlXM4K%ck;FfH==Y}W>_AEHg{(LHS(voi3bBl>3A
zt~I}O5<33qHW+}E`VFrgTfX7`df(mPqw4e3GQgki%pzByLBVRA&$g`5BTQ;_+n{I1
zb7NwK`#l={VkX}DI6V<j>P}8}HL<w|<!=U6LOTMna*o%jI}OpqYRwU+1GnhMEs?St
z5Lo(GcrEyn$qKSJP3N<bYfTgarvOI_#uiDF>FN<R&au%|j&B#?0BP`<W9~j6#;BcJ
zIs;bWXO}LYmuv0DR3?QRcke7#v0n`(d!`9)HIPHaB2zK^0SJUVk@+rcOXV2x-kxyy
z=FH5I@5|#T-t(b)8OZOzgN_lG9_%-33X%Qlr2>0C+~`OTK(k;Hey!vf>5*Lf9H}U5
z8`moQ#jcx*lg?r;o-gx%5p|A1nnP>XZrir4Y1_6rZQJJ4wrykDwr$(CF>QQv&Z+v|
zsw7p}`IpMp%39a$1nl#Q)|f!#NPVDo48o?7-!AG01Ps>JwIw$IPZocXJQp#?LoRp`
zr=CoL^}lcZ-!u?V1&03Lm~~QB0Mb7P@Nti0iJ(#~eH|2;pjxJ@d(nxhWdqvH>TcJX
z)N{zd_IXcE{2$}l=+Vb1UgKJa)K~{Syf1zMZogc!STw)Xk_eVwSCsuS$1Ae(yA-Dr
z*wdnq(GrfNn@0E3vK_kk0blW5%G+<w?!Nvlm4c5Ym2w_|&aONDS$+JRnK%HM4H4eC
zsN<fw6{F^ognq0KcBE)RpNXW5`m`)w-tvOy3PE=$;P8NM3Pj&zhVDTPt8i;{c0j9d
zgI40zFqIpTOp7N0#uq(=u_n9KKqNf~F}2FOab5s7ndnXhd0a}-DCJEm(NR@i-Q#sD
z>84}#?uQRj!VswMSys$1aUB5VRp78W48cYdzf2LYchxdnD*m@rLdAET-NIi<$q%O#
zm>cN%U`>IfvGt*ZV^Z}XH%LB0-98tU!n_JElDaq_FOY@V^!N=Xh1(v3rXNr=b**uQ
z5u4|&ba0{@r(f=UFy3dIl^YB7tzPAEGCozJ1y8B4t&MdY@^9e)J`U)rddQM)<b-MA
z9m@ILf{=L0=A-Ts3L<9!R;5rR-!F2$!uW?eHinP868lByIl#=(h;2j5GAb(ilZv^G
zwQ6_)k<;R~d#IcC8bSt$MzN;Uaoyq<QjGuz+B>sMN<_V~A4VCdAO;C4Rg*Py{u+oE
zA+4ln!dG0%FwJ+XW&)sODlX6jMU}C{D4H-0-lzD=XcU$_^W3#ja2<U1Fa3`$YP#m4
zzEY76mND0lRw69kMZ;cu;c&ZxFxcdDcUrqheIp4&=06h#^+#&Tbp2W$wBH}yv;J}b
zUUm2<6^!n=ZJERQvA2RW9I>yip_P*IeEa?ste%J0v0>t3+aO@<1bq>2dW#fh<6j=9
zC9GslcskP4RveMM<VBUSmL~L>oUUs$#28DbXL!C!`*L8y*yElz3`BY5Qu^PJB#AAF
z6D&Qtf~@=LUG_Iq0yYL3kxS73nK$Ebt7Aj{l+V~&Jl?HnfMhukWX;t_m4+9hV>^9G
zr2fWxRr}S785(f>VL<`;&%`T7*k^)Z#6-pti>sZ;2lzFCjA>MK!Gn9gDOcZMDS?VX
zHa8HAgiS6gTb!7<U$e@kK8~8MFx6v57ztGpR3BGA*(vY-DW$5kn*F`qW;`h}R^MRI
zp@}!pWNlB~O&pFy{KO2OzhJdhVhb^6@Q|c<@NmtPO$0#s;8Mv)0+!1ZiFwMW@T9lL
zu!#WGID4ps)LC4Y+9LEN#)DoAMTb6$EEUS6vcv#>gr6%RR#`FHHi{vX)-5JWz}m5Y
zH3q92^Z_Gbpq_QO#z;bhbkKX}QG5^-E~->K5Itf9t&zeWD!tTXMyogUliumlyw{O<
zSA{dK!38MXHbDoBA6SjNRmbRWZ@A=x@?l5Tki@>pFHaQvZ_u6y1hFoShhBm2F^2ea
z<ILFSwB*grC>q*|KqHbG)TXb?Ab%lGNkV{fQMX#9Ngi_2#RO1iSrjoVt2dzoP5fLx
z{96QEOlo(D9^p!ZA}mAu$sP2X4Pa$b)j7=)Edbsi=p<`bz?mNA0G*kb@t2CrOQZ@6
zPHjO8XW}o2br~xoS<Y6@Q}n2}H;DV@-db3(R{@8Xi7FN4bOFz}Bhkxz($FeWt(l9R
z)PJG``X_~%!LW{JASK7s?0Gj8;g$O$hHgAAYv^xWW=VVw`(guWIYzi7OTe#%<<h|P
z^#MM6%?nnETAN#vn+8Y+JbQxsD;<{)<j`N?{kz1(TEu2Q!W`}9lEpS${eN4#N?VMB
z&3LCx;;0enF0@huKNs=PxRgIf^dLsm|KfHpUnPwJ&mLmsi7v!lkxIO8G83BL?J>(6
zM@l%JVa(<6kcQe<e3W?VbQ6bA#hwjlB?DHkf3pBn3r%$x<B-FD6m63WhX&otzZT&O
zJI8_cH(n+^HmZDfq~F>jfpjhDJeJnA0o}mZVaJ0Iv;zrs`vFJUGwkZ>>gz1vz9jRF
zpJ$^{BVQYImxn@Ox)4j?rTVA@hs3n2EQQ;;x1z4D8#pE6_A3M`^a&97pta+BZ3Eb1
zFNWg|>^*0<g1BwR8T0Ncu2*=6*$i)P$s!^3?5>u@6f8YXbJ<GPzE(P&pYc!N5JOLv
zqPCzX(_yJlCYtmQS1Rjw>Rd{v1o(Dv25sIgFIKjfjxZM&!zweWySvu9kv2AV1!91?
z-;Wpj7KO7?ugCW}uaMZ53vOM#egK@|f4Bx6WP<MH^tSFT{LOF(doC_U6{W5!U*@>v
zA*5I0f|$p{&Lc8KB&czZlBpRsA?g^2lrPK+;(n5FiVj<HzK5j;aj_lw!_F0Ky0ry)
zJ6?V%5spqN67~|jEIhdIzr{>{9-&k8z%=weqGo-)(cKR+DkkaA2CgBZT2jA97G~9|
zzSc}_O~bpY^_Uv+44Y@iuhZp2<{afsGVtqMzkguPZiD<cKa~XEh43Gs6I2p##J>=w
zbJhsX_l<u46Y3P&K!eW5^k{;%`^8Y1QfXO|3olf>D188lqR!VxPue#4dYf&wN}SnH
z!|IFgv*)kQ*OiHf>f2ec&yUnPlwFy_HEHGDD3Z#xTwm_T;HRYU4GA%;g(B7A%F60G
zy;k#|kUTr5<>(v6W59`dEyLmzN)I5-)Y51=Emc<d7Zh{%O;;2D+NwRi##-&}53BQ*
z;On!sSFZ<v&pRlj9aZXMD?-`Z@9%TW<L2jR<GK%7(h6AwpFUaJP1vqaWpE22{ce($
z)warPHM;mhlrZ#h%wGi27jz17`SS?67)5zLODr!#I?b6eRK2}6tz>^r;SIp>j?`5P
zmmN?1=Im7$bqa{QiAHRlz`LJ64y!AoJsZYmDJlHZLM=myz=%Y#9)xt8&_#&f)TJL>
z;8}mZiedrPAX?_1j~G%CZ{Mp6k}x%nSXwa)eJ+y5EP|2^9y_aFN?10(>MnS)zZ0l>
zfSN$~sxyJTG&nKLq^?Z$?m7X<5#8D%Z{fCs3wQ2ED?ar~Uk;I}QMw`VQrIkRnrny5
zY6WTK0;s7=oxu}bv+cVQ0uSbEhd5TVIYdprdXDV`{EMH-*@X!A3#?KrQyjr<EU>JL
zQGg=JRz8AYPl-I@B|CFhS`JryZo&9l4klyub*{A4n{Ml_(I1GR(U<`FibwGC!W4XQ
z+IJwV`dSy?*SVEgQMQ+ohNuW77||c|@&q^{HMSwj9<jI(0esFN<3;(nQ_f^WJ|X_h
z-AR0l73RW~Gpb6g1rS$xq#zlHvo-Wj8(i>IYOs&zz%u=Ure?3I>XV;!=Vj@XEWg-Y
zcA7Z9U{<Li?)REC4hjIGbOdzK@Z|0nPbb7HmS&5*G7N)$!)~2C>pML)$ws1E?=?mj
zU?6xh5B}W45KXm?MbIrhc8&^xW9&l`5!#7$X2d{U^q-!TrO{JlhavP214N#w!#_(j
z9v;_>_k^1~&M#6TFC`iOCah1P&UKe!^&^>1-2)a6gCkr!UPD0C4uXw=iUk@=o!LH+
zxCDc{+HBHAPCv7ACeqM#Uxl}iRvf(x9~K*oUjvKjGWu_8oH|8u+J4hnyo3k!x+b#U
zakc^5LG8dnsS{qXKA_qlwFPrzGi)Ub5M_%saFJ1w=3Ex;!b3F6OCr4uH*P~%E5=@?
z6}qafjRz#&X@vk1U;e@GXv!a*Q_9k6hqYszkRApETnCN0%`kZ0ik!h#Xr9})kiSGC
z+Kw@=H}Du^-v#B%SxT3R1LA^<Ug#vDXX6gae7h?*NtE*y^+`!ca%?IVV&pu+r9*jh
z9vhZo1#+SD4xU1;P9}XvP5HyG2vma%e?vv1g4hkV)vf`Q7`uC<AitWKpTllZ2`W@(
zv_|Ur^iio}eBfc5717nIxws3==GoD7VCa?3f<);BcE18=$0+U}4`QvydlN8NlReN2
z_npvFR_UV)cDCzT0_-Q%&c^QEcvkRTMnzs6JcnX1SW-C*Mgy6uu#wHizmv>~Bq^7~
zY>E*-*M9-5Sg=HXOJCg$8|MXYTUTF?Q&==JdY|Ft5c{V|%|(1~TQtC<h&f_v{ECz7
zsfM+)#0*9{{?&a`?Gchgtw|Mvv8*b};BnJMSyS%6@Q3-8JrpPqlLCA+ffkAgeBmSF
zxGXWKH=O^xv2b=6LTqW?!2zt`>H2Y+3hw#x+T|0FP)=E-IQtTX3Tjc8XNU(xt2FEF
zC$s~Tg6@jH5@E?N<XgRwf(dUZkMJG}dNdr~w<hO_s}pJ)cWF<RkX`Ok1je_{sFU<G
zxF=sAy%@y1_rtgLbLBs4kNB0euQQ^T9NQ5@cWn@oegMTZp%)_V!eOAzWQ)YfJDc1*
zF;Na^Stbig^?p(s6xE&piE2jpSCq9`h_gw%(kIEc6zS?K-*nw+#4B&HfqQSkq#CsX
zZNe#~kaFjM^^zPDIXsx&>?*Pj1-h;h1_2}(R&&uRAG7B&-r0%WzkabE0w=nCVDHk|
zWO;Z_F}1AGSUqG`-1z}9Y*DSM(o60S#&9nHx1+`8;Xwaz4cxKH@|~~T?PUp>DU~4D
ziti$;J;|shus?SsoleXQt66f=$OSEQfy2WhiY4-nm@#H6%nMuiE<hZgQ%wS>9n?-z
z1~&mWY?=#|&cZ6Snn@w0>`+t3qJUZmlrzdHMP4CH#};Tzgd_aiCMKhpHWAGmg^36d
z5c(4BhIQ$k)a$0B)G{0ZS~XC<Up*@1I_tZ}ee-BM`nT$1A^W##^Mv@n1j=Vu$37*g
z$(b6~X><%07(OOiy2#&Q__ca_z@*&mxwyE7oak{XTE#Psf2g2CI=Ghxj16ag1L}zR
z-}AmOs|EwF1LE}R26F+>u+&`k5N7~@EnbnSbZT(PE3&waX=F4%(A{cYSX+898%4xJ
z_LC`9$EFFHa^T24!sCpqgPQSX)wTZQ&t~=GbZ8J;JBx=CMfIR(^?-ANdj-DFA1)r{
zMLQF|ZkQ|l7mp)@ps`?DI!wengUgaq{B8AX4?r~XMb%RFY8WjeCycico|YW|%hM1I
z&fOsKwvPedcgvEsc1diFrz@7}YA4g?y7E`g>wtZ)G6z5)sPh9zBHI6<v9JgHFOCUY
z!$ZH-K;DBp<)%kK>On&s$e7Uyji82-YrFO3$dy#Fohy>dvkW89VvEvtD6!p=3vb8e
zW9V<%+h4$M=6;{INYw1M8ouBFGS2LhUvS*P0UdYYkXTe)<YfNl2-}=Y0;^@|b*(Jv
zF0A+l!he4SjCZ#`FmbTx1JA?7A|kaKKCTy7L+I$~SY~b6!ArgzZJx6af)RqmF|gMU
ziC(y&k-Tk1-W-aJHPGwhK|0yTHI265zb5@FSx3pec2T)-TI3Krv}^GN2rz>`!t-fP
zSW9tRtKq(sj|%ZkZNonjDr*Hx^+Fc^<1r|4Y;NQfw4cwG!EYtOv317F+Ao7zd>1|f
z?Sw?jogP&?#9nrA^M@p^fdXf(>Eb;mh+H<Qw&I4|{{YWucvXD)yG4_i@E7;K+Q~{*
zP-ssXg-jtHsB%em?IIXH03lG3C2A4Tbxvrt`aSQ2=$;C)AZQHA{_nYIpZBDM+0f%;
zVn}=vxco{>axjPKC?wwuY9H-C?}vc$rwrG?@$~dHxF5Y&OvTpD=iTM?@^RYj3|oF8
zhyS1(+86|wLhqlpi=jV)9C`u#lo<*R+2J`0E*Gej#XU;#zT=qk0$-*q_r-7{gzQ0U
zNfGZg*smbPV`qoxdUNjqd%Usyz2Asdc8cKXz`gWl&xZX0c!&?wemZFPBJ)3B*y0>t
z{}n{oSvdbko@4xv5sn6su5Dk$iRQoiNbAA6APj%<o?co!Et@$fs7~5k6poTvNNyMw
zpRxY+*W1U&>D<LVrKyA^5-r;P)#voUSjDtJ@wma6z<uUDw-!tF#dlWi0CKpb<CHV<
zQfa#-#iM2`@v^=G`^bnJPIa1<s=e=J=ZPEZUbt!_+C^=X^xgo#t1K`|$St(Rv<Irn
zgf_|Ky1OHv&cLJ3-O>NY+BmG6gq>~BWO&`ck_yxG6vD4lJm#%b-dC*AC5vh2_L)WP
zWbRq0fcuf}824F+CUx3n(@2pa8R{fo`R=4Wr(UbHMVoTK(1kGe^s;6YZMDH=k_jw_
zXR%4?Y<tUR#EKYDmaF5ItUYZ;aUQl`<z5XU9c#;ur#}Pn6;xpE8$@6M8aefVHtmo2
zJ61L9BGDv;uEBKVRBJgOeUaiA6u@0fh3Pqgn<&hBREX(TqdHBFxCV3CXSe<v&=4w;
z(R_{Lv(3DX3Bz|b8`{NqBeXoKg?5)lWd(Oig_Krtf{F%^AsJK6^MT~1(x~76x%{M6
zH35-JEM3R37W?T)4p!%sf^gw|i0?v7rRH9A*g8}t8FE5NA;^Rz%rgs#=TYgm?yW?S
zg4OF4g5Y6fM<xNyhJXWnVRAxssd0*+5}s;0vLf<linM9We+u2b2}kn%N{c{JnCMRS
zBNz39#Qp%B;Vqs?dq~aY2qLmZ?}5!5)=}e`lsow{M_tk4#|S|{)0s;(58OB_ji;@u
zVS{I(m?b!b7gj!T3RO&Ox@QoEi#c+Ht_a=A2~}TGco_wR{T2n!j;5!)dSGe1KnSy!
zK1Y&p(jSA$u8x;WX(beU->18Iz#`$j^tkV2j7<c*G3ysVth$!q@Jn6jfXS>GheX#Q
zN44i^VUEs2nk_Ie(mB&6`rDvXP>@PBhdOlj3Uawvd%uW%h=T!9F6v|Hg+L44Go-GL
zcH<}IC<NsoN51znB2Y*WrC7eHve7G_N|OHI(ihE4E^-#)<U&-%1ArWimLH#~oP&9!
zrwak8U!v?C<-@`^f8<WleX2i`S_dnMy?9kCq@)_qu-BR1@ANWlLV88k2bg#D#Sn19
z8>i;2*2IQgDIVv9UYD)<)|vu`U>zO8zT}q5jw{BuJ=F(<iUF)K+#vH@70>mY_L0MH
z==DS~_pAu9Wp@JR&A_sFkrkkLx5x0^_Z9#&g^s(Ok5~2qm{EteQl(`rnuR}3f8`DP
zEM*){m%-fil@4P7B1{B29D0Z&egplDI`_T?^_DHq-Q8z>oyf}XgDbyiQZt?c)mzV^
z?50u#c=8Tnd0`cRk?u`An%(`RD?W56xId516MBP-AB*J??1?T$ucdUh_|euGz*Ye8
zROv7$R!K5wdR=2kcMn1qFG_5g4N%_kI^jzswp-xhOvx!_ZIA57UDy(hS=1ZftRB;}
z?LU$Ocz0|;31TA9vU++VTgmgz>noU=3@3H#rC(QhsF7Y8z&+!}eMjcx&GLkeZ{kM{
zY9Hw}9s8*4(=6dHHTB18JkGA0PjLe6!*(^-x;adXJDtrO_&MzldK(VF38QeiqasUd
zTZiWoTN;d<*;#dFR<D^-p5sUwA4LlL{T+tgKS0EeR%!nedH>bl_-9t5gy;G{=o|}E
z(m#01KjxfP9Ns9r->&|A+_;RwJyin?BiyS$3Me$mke>qyR1iNod7@i4q|wiZ&((J7
zk%dMh=wG4*ror=avqnjbw*)nj-z8G;mdl|H5DB<7Xu)h1lj!zNS~bZd!$E)KN+NMl
z?Buv0Lx8gbr4B+x-{6vmG-It_2gtxf`t>j-05}yULY{-;fii=5bhJBc{3;-7#;jz9
z)RQbSgQ?bcqiw?dd5+a5SfkCzzmNJ3gJte8t%&BFVsOXFZ;&j9Y}-p?mXHKw?4I1%
z1KS%pa|7NgUYToHGt;zWY?m6sRLkcZc;(6i5Q13rh%&&)<;<XG((!V!9`;-C7D3c9
z0XCU;(K=aI1fO(l?F=l;R&*injgH2u7z_*P!HIV@8Mtm;tH=DdbiWkbt*2PUy{)Rq
zfB}%Tzm4=}Vv>U8bqr)^ge(vH!2^YfC*A8B`yulY-J?f*wlSgcRQLD5P`&Qs3G_Wm
zj&a&FqT10drKKm?z)K3)pcL)?9^_Nu0mcok2BLTwZIvS42DXMV{E!O#iF1J|X<X-#
zu=WgzIe1$l!OYuirtu#7%`3w|&1C;zgahL$O3zUcgkDDMxm^ey9cMyBm=Bc=MIG#I
z6Ae1k1<T?vWbA(?`?OO}g=Nr@>D`3|{p*3Ub5OsE_u0ffh$mqqxRernAQp_80YjC@
z1pR30O^lE-ocSSnj%~!)hn6;MH6wWKuTE_0T8YOrxfGKf^$t$R+BFAabx<=s?-w>N
zi}si*jUOl1n~#@`+i@IUe;?j{)$V+M*t}f79dqjP%RqsizunAs61wg36&(+*-`p-b
zZ1d7?P@E;m*g;qNN4BC|)_YyD0gTr;rZx20ItjD3^JW0t_HMfzfVPgFF6^4qsHiW$
zk)MD6(HH#yj-Gyw&Aa+P^>6Q&ET11f<IGBz;b>P26j%bzcIX%<1GW@B`m9@T7oWD)
z)%KKQ6@{|b4F?4kf#f3;w$$HP=(_H{XBHkTx#A+q+BC=Aq5rrU-=H`&fKBW0J>EM_
z`7Im}hyicyZi1ybz#ZVC#-5?9@;YS*T9{beA+d#oJDhVzMAL(J`*!~q!>m2g+UsT1
z<kzLfm){QJhsFmcz7bWRU>sb^yK<wu(cqQo)d=w-=LfWGmeVAmW@=OO1tgs|M=PDM
zHg5k^l^n7<?M@B?_VaQVV7GVuwsR7*ECTLm31(rZ0-vV*uQH-V*uwM0{077V@o9^=
zI-}kAQ@o$vqu*{^Srn`!r)}ZOPLS+E#gWK+!S&xHW$l1#VF8TsR3vW1j@ipc%vOFE
znlH3qIkGo3zUHP3#A^D3>1N|tv5>BV6`H~}QVR<H;_Rrj-W+u<0CoW7IL|Q_$ZSEj
z%tHazF2}6@VBp(s*7oertNCF$y;+R;6zbjC_4MWHEF%2Oy$;o>dr)3>Z@1o%2Z|VI
z;QY0%0!T1u|F1komzT%gcffGA(HWvW$TV<OjXr-jFQH#H<G$I;(+B1BP1*VC<;mNv
z>uZxYQ_gkI;9+SiU{xdF-Fb_!qJz7)9j~-<Q`(^YdDYTq+1LBqy3qo&uh}%ey>N+v
z_}tPRnu2M^ZuA#K$G~G+1Le@~id^l$RoX7SgeH_GlrEG8lnxY6avO3Va`l-8r<Ih(
zn(V)+kB@TOTj=v#G_>v>>aPJ!W5sc9PnDN9@2s9f?M-YjfMy<jcj_@(x3NvvN6EcD
z8Y-4}eQR8?KPqCvjUqJf$9P_E$7UTF@{oB|J0~c}0W<kU#kQv0F#Jl`n(y;59|PN}
zli`KlIHsj`BLi}q+88BjSrZ={#KkjG2wLoUL?bej>o-KqR^DjHDMw1F-8g#kq>)vV
zsJ}T#(S`Mm08pK12Pi`f5?UIgg`f(9efaQ(YXvfWL*1QoeeBtN9ifrY{9{UzIBs)o
zE!~bv0IBwBZ?J+@=2j^}^UbvFVJY~@gix%>mETd{$Q6WML`{5cHf4?kI@>2Z5GzvM
zBJr6aA7mAa)T#6mm<Qdu#JtR-#DjMF54aVzT`q{5fU_tZ^tRdl$e)Mz;6HGNn$x?L
z5DXd<1<H9XwSQSih8BcbpupA=9dj;)%6dCE#k!M7(m}>ZBgHNq)Z|+tv&F)a8-3g1
znwA;hEqrQl0!!524EmkFE~Z`loPCACg_ve;X$kg*&ff7Ak$&t#et!B|*GKm@pBnq!
z^%5NQ0RPT}`s%SYbrT!f6Lv0OQFYELQQGWyL8l^cdnbS}Y#8;gR(IrSsBXd`z2@-l
zJUtOf>a1VHA=V7qG6R~@B}y@CANe%T4*7C_`~RpXcl9@fP#bAi7(j>V^z|Y(!7G@d
zrm_R-Y|y!>^$^xfKEy*n_{!Es_xrRqsEAJh0&~ES{^?;FluBV}!EcBg+ksZpB|d`q
zgfA3yg!5T#=8QG{Y!_(@Sq?v(yk6f|cW2gcPizqHIH11QJZ*N^aKz%3lkyoL>Jp~}
zGkD(iHx9jrk%^A-tWgT$!hDXm?dsR1h3!Q%kD=te61cxcpYgj;@|A)&e%oz&J(s%y
zc5<r5-al47@}BKmWxwV#Pu6mRIqTnKnt>!oVta{l30lAAr%iK<qrY?{hWd?$Da4ud
zALBXCo4S{PcE}Ns`V?fA)aI@no1>y;_*T?8w69e%L$kA^PXjN&?dlAbB57cujnKK=
zGQeoLg@;6dE|pgF1LHQ46E1T5U&Jc_auBqov`=mIN3M?jqwwm2Y6khE@Mif-63*hB
z5no3V@C-X6=ZO+A;KBySqcJgX^6w$Vu@-fJWNxdkt0g6MJl$11<^MZ&Ty?!yU9WXD
zcA2|@=;Mz#X_ver1}VZ92`EGVs4f3u?W__8eb~x<4tTHUCYdq;l>K5Q+ku`=**wOQ
zv-pjKn>56*rzG4s+K+S5t>Bqj^I(F*bMHJ|ZpIZb=YSZCD(RR?5{sD6O8Z%I@=qIE
zyVJ!{Z%0RyizcZs<FAR)rV#xpr$pXY3Wq_@uPw(dZ;1N}l_Cfq2g2tvBp(n+uZnS2
ziB6<#^johejeK_iaNUP)*z{BVStjJXe2Aa3#B*6vHNSQ#EtnjXRL|kLJn1iO=$_lh
zbabgzlz|;!s7H6#dBqCt0gaS3U`=B}T;x2h|9yMFqTuRWKwLCr$!(I$IismfKl&zq
z6SZVWqsumQHZQ#A7adf|{FmnOXP}z1{net)b$73Xf!*s0V9>P-*?NO33%AwxJ=U*^
zDeA>Kw#HYW3W|}9;=FYu@`K=<zGiM5>$N%*6_o7`Rt;7gToqg+st2tNtsmhIcRMGG
zx6wtaKGWrNlEPA(?Rh*!Yp%yt>;2hsbHCX!YJW-4Tm9dgtTX7ocx%yLdI)adIMLm2
zq@;DOUjSB(s`{Dt^11Zl4%~x!;;cWmaUpn?LH^2Iw0pzXX6?LnJdZ^FprkiyA*W1^
zh`3RyGd6e^bKVcvK^fMx4&Vq)84nGJRcdilbBSi5H9Xi9Lrr?l1o(i_ns*&b?}8%C
z$TdN9VbDHo|7`sB7yXZ&<}#)@)dz#1XkBrl8o*Lof;dk=X;QPhueP#PU48<8END*1
z;t_MwWc&&7FmML%?-<hE@)g4^os+BRLQDe^1bxp>R?<x9w=vsS%M0^HFwNaKNmt1^
zB#$#n!p<8sVHwM)Aq7r2Hd`(BPGxQc7wLz2q(g@vBC?XvcS&*QQ0*+44ZSnY9+bLV
zJAk21Dd&bep3mi<<fSqre)Efusz1suSa8R}N;&LRQh%1%{Z8{W{lyBgBJ`3BG5%D=
z&Od#6y}JVDb@k-ZvMN;%r=VaiI2-6nCvVUR*K1_dB{0s#gWIa?mWwBoi!~q>4{yL|
zrejgcyHv^<bn$+aT_WH4-}9AxM-VlQFaffWc$i2|8l?+ygS_Y?OGt=q7hCWl7m5(O
zE%_pjyHvEiz{;fdnpfM<iMf|)g^Og>7N6Y2^lij*UVeMYeb=!&J)}9yo&3OYrpbev
z$GUh%L7k+SD~=!1at02~@A8t=^~dV`)MN*U#mZQj5a55Xt=&p2Z#pA|HCt~JBvr2F
zS2&l%t4E1Rn^))o%41c$7C9j0Xu?ZR1O*(xy;IQ}Rl7Yt$zb~j64Ybmz>^`0!fM~e
z@mNWxcFB&hyCSIx0g&j&`ue8nIlGn*y}AXtuK$x!I5^Y#xPkuzyZ#T_dRt4|{;&nb
zZ}wlDFu0~U@sD-DWBkd2T-K&twjJgsiK5B+O1W)$YM0&jR|YQmy7~f`?}d<mI37aS
zpgjZLLM#&t-r*=I<~L8MwP-AUSOM~IEIycc3-9~mm|F@eIO~q}LVPZH@C&BQDkps$
z|3DrAPQ;KB<wMy0{Kq3FfJtXmK9Q4oL`6ib=h`zu&z+a4CsTuCWsFVX_SbAx!YTI&
z^<RaX+L@YqrWO!W0&O9i*k5)v)w`nt_&G7&+~+x>1=nrJH6MT7N7MV(6he(F$=F+l
z+F3sZ*8^(vyBTi;|5g4X=F>HoP+D~a0*k--Xd&z<EJx2cr^z{<1mLl0v*p)erXMFa
z8M&^o%wI0XNsMS<Ax^VQs-4)_3MHK^v(0{J?u?7B1g(KK=4#hus1J42*qRt(rCd`u
z`ftQ^4LuL^VU>fi6V|&0TyF%hNe4oyKlwan9YfR+T|~fgM`+onPNG3sBjuzk@I>_r
zXv`o0)#m_Zlm2Q*0npNZLR?(S;%qtP^FDq)KkpyGq;e1I@@5mn#T7i>4SsR`jROSi
z+z%h;LO`<Dr4ZthV#@A?RSh&Bb4439(yy+)1@+4|MvuXcz)LJZaAGMJA6G^I<vo}u
zvM+dT$(9X~e8Rg)+ZC}*ba-ar3%3l0fOFPnW;4Z2TV@Ke0L-m*3KHh<&Xn%78mc>7
zxykVAMW$%C3QbQHTod-6z{6syOz#;wnkBbtY;$xQcLKF%^Tt>V#RK58GXo7$JY+S2
z3y}LcDL(qB`@n+P81f#YahfHw<gx0L<9^7a9j#PYC~W}?%^%7XZ}zc=`vdJK7MjZ2
z#W?e3Dq20pfDMcj{Kv!<?_i;aMpO%(yCoZ?qicRm>C~Dwrpb^*63uY=-9rqrMsW;<
z0+lv@pytNuj=#;>@%jco&=UO(yH#_tup|W?aZ3}Pb;7kqW7?!N4lPEb{&Q0gndUa>
zo@|HBKSMVZs|m76laWNfJo6wg*qyHt2OXnGo)4a%0fT8_QIFeX&5#P}3~3hE%V0Kp
z+%$9Jl#Jvk5_Zuz?@Bi6edB(eg2GL$`i?YsW70TMQED;4NX8iFIc)Jz8ENImRUyc$
z)CgPX22W#hlEbs=Mi{{oQf-lKE`M2%fb(G;3R!0Q4xqIfsr@-0eBuUzgXT1@AwHOb
zpA0(>0FoW4(IYmWIYf`F+jOE_I%QP`9hXlB($;l!l<imY)Zhe&uam{5xrH|k7}uP(
zO*_9i@G)7`!DGw#p`4^S&>ZXDs6h;sRJ|?wGkceD8YH1NE0}&KG?ep<%M#<cMiUWN
zUoz8LNF3266&#&%72s2PY$cJPf|O!USjUHe0?;kQ-6BK&v?mP}uB;Pz0kP|c?A<%?
zCN;*((Bb5+xzoq#RGLe<(Felj!`be_y6ZyDE5Ri88&y8`CCy|`P%55!u9mt4<gnZI
z=lW7O0;G(_sAPS~C<kPO&Cck-Ko=kmsxjb%DOm+(o5|JbQX6hDHig1Y1Be0wATJ7#
z03?5#b|X`74M4Ju!9jAuN&8zD_y-J`4QV`WQ8KFoIcbd5v@lWPpijYyt=8(gsjRfX
z3ur@xObopnP;IG9Q=EeoipeQS2+ogWyd)5%K^_Sd3UL^*Cx~4Z`eVO>Q3kUQoKjgz
z*y;&o3Molp?4!hWF|mBKI<ig;l{?Z?07t9fx4=X6o=3PSk;x^t70~3rv|6e*WW~3s
z6_9On1*rUA^6=4c^1(>NBjXWMou+HtCQFnT!GYBrvnq@p=j%Zzh;H+f?1?y>HiDE=
z>(9!t^F@ZFLO5KojJNss4*$N0bi^6jLO$V0>iG-KnUc8-26TZpvx^3v91IBA156V5
z86JrFFlF($wR(2h!0`H7PG92-jd;RE%~yANy}^)f(@dX78=W>Qu<Jc!t%+@T^1ROp
zToiS5vITT@vOhl^+(WlJd3-xBRhh3v;)K^q;GQ8`?;^G+(P!fat#mm+Hy1o%A$uIH
zyeuL4HBzn_Ai8sFeRjL$5%ePE0e8PY?(TCHUrpWu-i}ik!^xLv4f1)vH3t0zbml~w
z@j2N(o!N-at*732VfrVj>iiFrm@v*cT$Ux!_<cP&+uI3x;XwdMAQPju<HWgNSI^Dv
zhk}tB;WPczA?%MD?-2iLZ1;8ECOG*<{Mg68Csr;}3%i1uL^Ha$2mNh^20+mC8%_LO
zR`dkZcqg-3j3z^`(1iR2$Og>=hUqq?=Vu>qZ8z#KNimMCYc0_d3(7sdIVDr1h!t5k
z`@Ef%n!j{XKKPhjDP+Ww#E-#K>s&4E+XRX2!Ac&xi*(Mw?)8?M(PmkiM42zTe?8X#
zMft!a>WT7Az0ItZ1};*+0_>g)&{okivgQuyK6LCA8Z3bK<H+k)kc#U7qd#;BVOF+M
z=FNsDApq%t7ZvOGRu}WHw^MZwYugJTY5rV64NQqbl)AWjdqqRPU1dBy(Lwe9$U*EV
z)Y%HF7gUoe>83hWb9?ylcwBhzzg45J>@2>ouOcox3oi3ULU&HE0GzC^ICMZ?7|tZ8
z9lwidxI8a5^%AL^xAaOy1+{IBDHluFXY}tY@kd~*hm8HsWSaGY2#%H>Zh~Y}{LZo4
z5a4^mz%=g<or%~jd_DhVzUAj$a?WSe3^E@0LPhtiap7%oN^MTX*iYZWh~|yT!%t=Q
zQQd@nR7UicU7VWT0FNln6RB?<u#4Z7&|E^P8ax_^ZBGPN`|Sl?pRKo2f}T@vn-qVZ
z1Hi*Q!0b=kx6=BYZsQ3ieamX-@@h(7BZ(mfwa{c9ds?R<^>vL*Ka>h9!P~s^^R8B*
zKzFVoTZ(x3?EB`vxKW=hYxn2$l+C72#Ij(Cuj+&ywsn870bVf=x@|kNDmk`{!9Z}L
zND`&wy(xBY{kDk;is1f~2u5RgFm<|*(Vw+0>-@rVgBv_97S)!xq<zv<RUQEn1qD{x
zZ(l$kJoZU*Kbxm6XzWjV%xDr{+>p}cW69<aHo3Y=cJ2wFyT9=i^w{F7Pt%@CuZH*I
zRX{E=9vNbO08XAh(@jw--``;ZH9@;=@JJ}7(=dmwxha`DrOCu{@3$ch*!89Y8i-$?
zWh6XziLIaSWq_Pu*(%<5HVIMB_*2ri;aO*$IpP8*3?@h3G(cBD=CMZp)&Vp)%AG{U
z&=zlE2e@IG&aTU$@A3~M%`G%8jH#W8vx}3dp)HJQlC3f%C<h~Z8c{JYTGIV58bFSg
zmh&My%0Irt9;qfa6IefseQaC=s=l>#i!xi5@;r%cy*L_n63*xkzb{aitY=O#L3q);
zg$uwJ$f=rgvYDUotBd#jo>!jkoLdS-V&!2zQil>jgf>!_5~|A7%okmQ<5@Uz@mHGp
z^FUG!XUX??T4kfP4c)b1gfUO}FyP_fWaHcT?Q(woL2>}1hMZpDDVyvJt7fuDAP%p5
zi;5^vD5-RcneXmUjJkU9;!NP~k`j~V9*?6QqX(5L#6|zdp&IVQuUSWey#B9na>+5|
z1hfzMb+s!Zua56sY!b5l{G^1m(oMFq&+fg*_;1e^Q<4Yf<`ODJcpjUpT!5gM9@+17
zSF!h3fz`hTJ~4cdr3aeXn-NsGS*g&Ky0I}>QlcG)&!A1y4$X_axzAn3BdGLnYFj>4
zxkCP;UB$C4r;)(@;?C46SJfOMT8L8I$9|!(HTeJ^5>K+>V{9B8m$vwPQ~{HmCvS+t
z@qbDE;u?MnqK(Mj^+x#7TEO2u17gC)e&VuCGDn|Z2XYLw$!Fu)A!x15m_4fbKdEYz
z0h1&sanv&>@Ut~ay**DuA~ldU<?f_k`Bsjad2t)qun#t2`H07n8WxN>=BiS*YYZ6P
z8$DEPAAB<$A?oaoBlw$z8*FCic0F?1gD5FM!M_R5WZ;%gDPz_;X8{r_)p@%+HS#s`
z8fhGP8knbE$cJ0+9r4IPQBCT?MY8VL=WhEUJ#8Z@YV;R$Agn~9g4j#*@gAkd`Fp%w
z6v@YQtOz!hWkxX+eez+o?36jYB!kUni2nKZ6L~o9-fUMAE28DiY!Wu1`HTDK!2arm
zG2KKL0btj3Woq6gVSoW|p+AOLd;1`m5h@#Qu)5GVN=ihr5q^^<)87T-KV&i|Jkv!y
zzfkZ(@n%YG47Y`v&5!!l7Pr_vD<rI%lvV1Q^5Y`axDL&iNjoQ6_Bc__kO76?@^~xt
zrwtOWcj<nRj@lFnq=#z{q_fa!g`n<OAGrs8+Z>2scC%nN8~~x!J3YAc*<um}X^C;9
zK#!}jp;d!cKE;@SqzVfT<N#7GmYlUc5j-X){`mD=m1}2Nr)P~wdBw&UB{pZ63<{vR
zo=c!TjDTAz43l=l;SuC9VA;#+8&=#0c85w#b)M*vLakGa)a1G7QZZ$cH7wBU^auRf
zaAOTL=b4bH89+^JL6lJD7!CpXYMw>#C#E*`t)`3Mhe1;S6)3GbM{DJyj7`p$-~A&w
zdE_$wmD8iCR8FTQop7+a>kPHTCRm?#=3O$j+9#_X^ha2{J28OUvG}pprF5$R1F5wI
zhHJ`ive`PH;=OC3UF3cn!G#@u=!N8Xgmn|Vutsv39`KQN-(@(^!B?h+>PewBnT3uC
zL`$_*EN5=hgr3O}4GJOI@wMWRHo$UR__Y`s)-p`Qdk94Rkg%CXp=@|Mka{m`vQj1F
zZ)GcbwqQspGJo+k)nC88iULQ?2?{~mlzJJb<P1CR$AV~u-bSTOVm81REv$+FiU<d~
zL7C)O4|tq_?L?&!z|MAHAbSLP4&#3y^&Fg3`DTT}v&pZ%@4Sf)ZjuXt_?;9P4qB-B
zR?h%TRdbX{N|8bFV?i(~vii58@3ulG=CyhQ+6RdeSQt%l=>jS6`Y$_v)SpHuS+By<
zOzW6Xk^^DD3+Z6`g<^RPLa>>Jh#M+yw`l>fAiz|+$X$AMHyXJuQJYHR+-eZ+1k!p;
zwNu-jS=KFhuoRz+`+7ZQoth0CKc!=&o$!2#+})*PnW4&ho}IoWuZ;^~oI(|+&`}gy
z8gh6fe*p-%)i+~eI1m$WY6k2v!51?J72YU3Gluwz2MQ-v^%yIYAer?~T9}o6aZtj3
z48Wg(UWt*eO6!1%_bh$NEzR)||2Egu2oHr)Dx<IH1j*t71pyltSWO>kHZ+Z=DTyne
zKQVHvCVBL^y&8n6od*6smUVQKQr$=hHx+185<<5|1DW7ryqLDZP@~pX`eeRLL)Clb
z&Vt8a9<q9j4=q*VVYUsr6L(imaVOiT2mo<%$TM1;ZMGme&1nOx`6h()-bkdA=|P0-
z?}5X5A6idd)Vc=J(OM@cX+;4Bi%nRg&z#GFm2g6UcUio?9df+K0GGHFbOF>+tyfh^
z8RrebvGyHut7^P;-YFphOok^KD2b(z+|hFxs9c%{3DUD4&kncY;5&X<E^h-t39yCm
zE~e)rrE&y4sdP2XvTLn%yNXhnG8n{J{(CRlk(pc-RfKdi#BL60Az<;)Fwr3#Ja`88
zEg5w=fmbz}+P;g~s1!s1@!MF+_hXb5T5AXMCj^>?Dy|kjiDLCwBX6R3uD+w(iyr&N
zKpd)v5-(_x?vf@+2wu}2I_E$!1CaD5@AWD6@Xqw^r&IVY0Y#NMuP<7E>s2rtEJ80s
zvUdy#W}?s*Qb-B-<2D&WrF8mzoLHbElk`4dv#ke)L70Q}z)EXbRcx=OOKnkKg(`}O
zego&!Oji`tG$)fIm|sWP7i=@xQzq@8NzRjKGRsxrnXz0lzA&oDArN%-H$YOHYJkx?
zQg-&(B_t`kCeso9qTP7RO^j4FKkIOH2-&2eJkxE4iTT+=rGn&Q<+JWIiq{r~mF0kr
zHZv3S_{6rF<;O3)lfG-{e!##7^L<#I1zhIm)xW2q_EKrbO3rghe+<G@L_^zEL3MB|
zdclh0htf25<V&GQqgzwI3?KwX2XAQgjsUa)e;1Lyztp=v57A}dqpdL^RXA6*meH;M
zoidbENwv2fQTCqK8>OeN2-+JHqMJHck?@qsUmQc=aXuL#(i&PTIu_?A_^&VBL_IDa
zPmkMIdUr(b>}I9C>J<Y#1!Ba172E%#QvBUfArmIBUnk^TDoB$xF}xr2hVv1+Md=H6
z;`+uHx<xKdn#FvXZ0vkVacaTqGC7w3pmPPJeI^NDPpPOMQ5}N^{UCPDDdC%-OdO&_
zna|yR2Pg{)-QL1<VQ=rGj1Lq6<?puE0D5yKJ~*-+Na6pZLIJa<B@{!TCe7lrC2clK
zfp9P-QM9NqaWMS{r>+dc&;Lu@-p+-HmzU_5GAGf$cCP=l^Yj0E^8YdGOe`$_*k?S%
zfb3&U8GAeqxSoF+mZL6Fq-1xTrQu5egycatI2V{(xBPw#GKbh4Kwp|vX(MA>tdXaT
zn~QF!;57k7An^gSfD9_-J8d`X`tBhIGpje0sCr>O+&&1o7LweL08Y}F1coqB6hHV;
z9Vj1N0RXpJT#wxY7atSx;M|BVP%~}-AmX!>^!4TNS5@j%k`YX1@S-P?MwLUmyuS1M
zd-6>(fu&Yg3GnOgc&+=kZPP)thqP~&mHxQz#pR)Ca09|s%{B-Fivej;Tfp5%%Yf3$
zg^>>k`xE2u@<*QXZuvG2H&Ew?OQ;wMQw)sR2XFq}6gh`K7|U6j-mSs}Vd`E5P#q4N
zLqkfytHwAZWt=wg+kuMs{U^0q5G{3{A*~s#rikCEC%R2_MSW=SR2w;MVk6Rn(Ha>=
z1*21GDO1_$Cx)hP8&@niTTW)%0>u4fEr$6(m}4Rw(moj(vqMRo*Q2Pp(NZkzx1H)G
z3sTM!gwh;7^))eRPkV=~$FDz!04@Az58%*bC>vj%DhB=Dcd2F)HJokb8_{1uj?W)k
z0b1bN6Zj575Wn%AM)$UGv+M2aI~PP*8($ofmk^@kI&VG~T2Tw>zKV#U2kgqX-B9LG
zVmyd$HPw|n7Ynu1t(HL+o3aVWrC{l=SX1d`o-NsWGmGDbnV&1AxO-JE0J%I&4aHIQ
zW8Ak<#V;~(i{fExWbg^5(f_XX6F5dGPvK32(qf(lynnB*G*YNYb4aqVlADgWN`&*d
zps1_=ET<k%10hux3oG{q6(KiVGfW!sm&XMnQ7egUM_Z5yn_Rley@ThnRd^5g4gF;8
z`zgq}Cnu#^(H3X>U?497rU?LENHKixvY)>L;!W6nBQl++lzLJ+Z}wF-K-h}2t+9ZP
z<(s+A=Zo;0NiUuCX|BJw!E^kTcd7_}zTeLu#eF_~Xloe$9MY6rU)-N-6F@dGSH>x{
zO6@NXp4^`=u723Qh+AUnTVhL$;({X&ME`-Jk?bo5mrNv5L<XDz0tuh5K#%<qniks$
zZ~XFAinNAZ*G{!_w5`a*kGqz9rHcwl;j-ri2a}fiq%>CP%e0JTH#&N2#6PkZkHEJ5
zt)<{cj!0{ybXRnhHDWFdni-)BW-l;S_z8Y)gZOhM(8A$}O=vDjuiKT|t-F*?A)XY^
zrZQoyk{){`qjA^(r{2^Fl-wEUF48KHGweLAF5BS0KipuGc|0+xtn1-f3nXb4d<cKD
z%x8eLXRo)DJK-=%S9bbXCT5Q;3FAN_(eeG!84bveN+zu;uy~r24Q#2Ro=8j_`UgdN
zfSI?5=i8fI?(FbA037u3mgc_Bk{+OH#x4COy;|65f|RiY;JpP1%5~lX{CwCLH``Ty
zpCfhHfzL>HE>?M1+p1SJ^n&JEJKLRh*u#{-ExFINB#{N|_&QM0g09n>Qogb(Pa=tE
zxNY>*Uj@sXqwE{0pQgTJS)*Gpu}eiI(86qvsY$%-OufXYojOEMYW;hw%~dh=bku{c
z6zUnBwEyg`47FWVyRf#N_PURIQ;CiZW_oG;S)S8HZ)5+8{JyKZDP-STcK?t+zzy&f
zMV7dSWB)v~Hs}mHc``F%Ajri*%tctJ1uC5;D0oYJrLC|_r$Erlm0)?~h_ld;_Orq_
zsd~sYDz1W)UjISC8S!mUqf2L1VGVbbdS4EE$jM<4*`yRYTDQko+jfR|E*9eG24ebo
zf6$nE)~J68+=+~^{rm`U+kTGIia_9n$=fRZ9T`xOp|B|Iw{&uPwYjgaI26zGpD`JP
zgSip0>klv}2QzaLQWr(zUiTPT8WkBZ1~Aiqcc$0>eidwv{BLI(p$>PO)^j}Omd_r$
ztSPQt93mu>EGkN(mJoRf*nKl|laemL|KQCITO9Cj-^$6!x#Va}Hm-sj^>9B~0E{}s
ztkow`F&_-o56-3A&wleZ>h4B}=-tA5O5G}>+EZw+a@NlHl?rsTD&tAuPyS5J?C1a}
z%J;e5GAZhrv~m3K)^h*BD$QXJlRRB*V|4y0=U*Xg4?3f~r!V){%fpaxX6k2I_SK9`
z=1G@`D};@NvkYc@8BG+9COmf0&H`WiSg^l8<{fMV<f0)<w{V2cHVyX{J&d>F&te-Q
z{2ID?7SlMOujis-IH9hHoW%5Y&4>X{42O$UPri>UFnEnkI?kX4m2c+CBd}8-_UU#H
z-E7iR<nWE2vBPsZCYob6Od6H#kTz7A&D@|kHyYB*aXvU}dVyBl-MEV@m5-g{$J_K~
z{9U6z)>Gdu?#=;eS-7^%xqUU`+*qU>b)*Z{M<H$(RDdbERmUk9u(BJ{2PA-Dze`r3
zUGUkOnVr#xolJ`FKT4BV13CNpmpC<z+wb!fuIRdi63S@xABU>ZaQTPqJxwq7IiA}T
zk#P5QB#vQBC)b%iVYgk+z~R25#u=z-8P0>qvzdC}nSa?MznSloh-ifJ#0_9@oXS1;
zio5v-JeFAulC9g=!}$nrr+&by)nDT)SnGst#%#?fo`^zscT}%V-jv}-lE+Sa+#~ux
zBy8^&mavmy30kP>T|JA4qjpuE7O(@dpGr^mZ9jM6vQj`zi_|kpTq3bS@Tzt`%b7Me
zpsK2G|1N>TuM<}vklxKe5eN_pJ8xMo)I10uB|f`H#TlW0N)|Z@rv_XDvsZbUkgz_}
z<cm*z%|GBf4^bFi{zJxe=DR8|g~!S!o)Lx#QFr547T9FI2egASBVTFoXxXrioi<;6
zQcwk)k!_(-X;p2PJ8=H(Osl^HO_Cl5Ht@<NCBX^_%N0V37zTSX>zlH+)6vU$C`z@R
zMIJ=*FnvqD#j8T$^aSW$(Q~jlheQT3>=D)M5B@;d_yy#Uk-8{WP>F5i6HRmZL{(Io
zek-<?w|c3)@`rTpPtqU;L_kBb@XF2Z&M@d{xD5dMQ_sl?&;HnkczhVO6L%x**$Hm@
zY_Wx+4;{?d@oz0OWBEju4pD`FYvJd#*jf;9jF|95u&I_Glmmc1c3a*1ff93N!rbre
zoLGv)Z`E4fe%j@w7~Wd4D2N*hr}+d*ye+EghntNn0u5!$-jUT*pnNS<stG2fnKLjK
zt7*>f>xg4v<rBCvl<hM6alOQgTayaUJj`4zoN7RQYQ@V~a20k9cB^BrsojSKVSGaq
zok0R7Lam{Ye*px2(rJAN2mDd7&8^E3dk#f->2dX>Zs)2bX*iI7Ot$>#_mrzJ*>VZQ
z*aR@%3gagN4?;6cXKEoW=i@~ikdsp2D#_8w2yZhsmY%={>IRmfVGqx%jXGP68aLd!
z8r~aG#N_uimlCP69AWe0rStMcPn-mM3v~<=T=XXzcL3)zC<avIs_GOfhKqF{W1j2E
z+pi}L4z=!q2Laj1rzJMqLhTYYPxQeC5^3CC)`a2KZCS!Ju~b*{KpNTl+OD*e3~}lx
z>ATuR{tXq)<gcl;$cYE7HQM(dClTC_SJh9FY5vjLlG+1@y6U9Rd*}I&REWzNShee(
z`4V;m06@BF1mf>$WsaN$KSppI&<P+-%q(j+<~nfus|wd2@1fsr=+f*ZhczIh9c|{F
zM-3z27{nw;y7TOOW$Ff}klh||J_|UbzB9PX*)b%6ebxu6GdzXgq4G|3Mgf>yJZVKx
zzHZ*)D`PUHvw_FwbQ!v;!dHzsG|<#~?Xw){5&$}^@-d2rDxc&4b<v6LZ@-`v!<W<J
zKnpiD%y5^wEb)$<qx+gcSM&f`v`UqV*|40hq=2_^uF1V(+nGh>xBKddInAiJ5V0ER
z(bREtU{H{OZy{TarOwoDlL(Yj{wHBkLU)u62A+i|{6J;t##p-?M6I$IT;>1A);k9G
z&OOk-wQakn=BaJlwr#iH+O}=mwsC6Pwocpsd43l!?%bIqlSwAC-z6)1uk~5|(tmP6
z^ezB*imKLa)r1=@3gNHdE(E63RhL$J&EpXjevnH9O=@9RWTi;h8bUo#;+eUuJLiGf
zu#!3E*=RP<&%WR?s>Okpm=zie>>=F*je=^GQi~uKR(#{ounSAFTDZ)r4C%VyX(<X!
zby8&OQ%ig7%sXlm$|yXGezJu(rOH*WjiLbgR95vrf4-{Dxyh{+$UP&DHI88PdngP4
zl+Wfk?K(24NMUuLhk1+63MvfxR2^Qlai|r|EBJ2`|5AYInDSAOh?)p<WiqF$aIEwy
zWZUMj=d|t;%eje3XXSbj*VY(Fg{3h=RElx&5)zsHI=b{0l*D?7xw;!tP!a%T%-92X
zFXc4D6Y-;2?@hFp$9ab+h$6r0Me0}vH0U^~U)r@u!?zNaHpXrmG&dGtNNrt^hn*2o
zFSBaN{5FUQz>TZi9qK8PZ=-rX97+Eaf-W55vkq!)T+)<palLoc4pVaH%$2y$Qm0i=
zORiM1d*oElZ7grIs;p3%nZXs{cxeJC#_=P~xEk0qtIC&w<z9|y*(Ihc#GG6HTGeNT
z3*?FH8?V@pidW2QU)uh&h~5Q`Enu77yx*Ou-aD!q_L2p)ah=ZSC|p*aTMG_GYoZmY
zs(r+zvI8?$jiGgO#fICWC`*mcv}H!VR^#NEqj$jGJd9l#=|vG4dGiw3f1C?ATTdK@
zQCws{?G+b|CHJDNnMYy9eI7}XxGYqg2vmK7@o>^j^HZ9%?GpwCwx4vT;D3hu+B+R{
zJ1ePs?~(r@klerW_7PUD?jC<JP9e%YOa!A^<wbKEb3PUu*?sa8?Sht!0EHiq4D((o
zO&_}J#YGBIUig9VCwO)EH)oz?qJ#v>#>(<Px@VfhE-(TJCwtmH6gV|N+cplj4f)%z
zFL2k0lv30w)II>2DAt;yVjHV9t5`OAsMq0kDOX-y5@HLmYff2{7&SKuqi8hnvQ6tQ
zfnXl`doJD@S4Tl?eUHSi9!V1UJ79b=3obAkMpA3M63r?~d1Z+}WReRtSjZekjgrS}
z(wt4i@Se<8Z~ZD5MvN1X6pT1MyG$@ZHKs$QMBgse;55Ne(Cx$-VM9#WNQ)9&9zJdq
z3*^Ze1%?#ErYu%O>A4@J)=)tzUgkk+Nj9Rgimci2`dp)qXM3H6UKZU_ME=`2)I@;1
zIb6sj1Nguj)in4hxvjPpxtxny<au_54Y6`EA@IS(N*hdd6(|QFBun<&z~q;rBU^sr
z8I>`DK0NZms;~tv{Adzzb@)Y+ybw7$Tr?DQ(1Q@CM)dj=rJx{yz}e)EywX-vloUn8
zSjB~rfwGEZQ;HMax6-~SQn49T7KEHD)*(E7ZNla(ODPA_w`q+;>uIK;H6if6m;o(8
zrrcJKyek9Lc10L~n-C;LKOPC^<x%^mh%VB7A}%?m8YOc47w$B0+jMO$O5kZ_3)I-O
zpbz=rZ)dbGQ4h1(g9SwyGaG!Z75i~DIUZaL_lRJ^U*S20aOR0YgCzUwIHYiJ1vNEN
z$oh@T-i77Bu{R+i?6eA{NFy7RcKAIm(g)6}F>I=)UgxQRN;XsLwdq2xh0qz*ygQyN
zs>*J`@k&KR!R#7p^e%2~S85?{^AdDi*kYI3rlHz9koDZ*mKkVhbUqIUHt*-YtU@z=
z9esus^QJWWO;=w(uD<WN^{aiO^|a$S2*ZKyTwm5tub1PvR=(^Ry=1!@ziCZvT3olq
zI|rEx&{lsylqPQ0z;lS#oxqG<<$BUcRY)eU(rai|)}xE(PJ8Kf&wlB#ACzbQj%%&t
zkb#tpZ~jT|$KS`_e|dAGMQ{*+H6@3bV|zj=u2LFk)<R~r*@P`WSGra{XB+5*&xZtV
z-k5QU=vrHiA$=jhovkp><%k(lquSU{PrtgNj^CF7-MoaeU61eYqQ=rJC9*MuN}JAC
zsLJecz$CAu#YnOAEL-y26QK26%Qcv+gk%p$)ALA2Ey>I+4FRy}2uuV4O!o${49uDw
z)F{!98&hINgSQ^(xyq;I*9}=4N12Jrb33WI5SwsN5aMVXqs8PY8o141ew5nc(1Hk6
zk~ctrim8#tYPHiJ-RjudKX|UmP<zd3%_fZq-;4|f?N+B!VH^hB3#O~-e&Mzv3b#6E
zv32vox)5Xd&lx?xym2-}qNOAxX31mX@p+G$AjJaw&Pc`>n}La|9BlUJ!!_v~VAHgB
z-aQ<9YC-ui${IBd_F#FS@dVU1`PL(WW=@a+yypBqo8Q_dsk!=n3Du$XT)jTMIxY;b
z7{z9DguH4^>c`t!J-szWr!%6QS-uhLQ_o)HcfTY7iX&F{ZtE$_5D!bO<|TRTh?uu3
z%ei4SczWcmT#|*JJG4wt^S|uhtAN$g`$*)Ft3YPy48;dyz+%AShHKTaA~;Yi$sSSx
z;fLdnc$~4MV~$50v3TsHeSEdQK{L<L{`J=Tqh-E{6oO*ZAx|L_RtH1-8^HT`#fys@
zXiid@5`G3e_}j2OrG}|Q8#+&$Os}~D9U-CD>l<{L5wR0yhxXx-HQA#c*B1YRyxib3
zQ2uBYcQT-+TXe9=;1rkv`YD=@9#2pP@F-^BH`<wq1)Q+t*9E$^0QpW<UmNb%h9z~R
zX5jrDY#A^+SPGtZ@32<v#Z$DnY@Sfk2Vu@HBu=tY`sLvvQFcLKQZ!p$3MGeEQVZ^a
zG;@pW1vY@~P;DJ50nf6LZV?*mlm{^$?*8xT7Wy-PCuC?TTz@F1V*E%gA<Y25p92-u
zC=Z&-;NL@#=oA8OWHY`(ag`z8`QlSGkb!W}@r}o`2<sgKS$_x{AU0IYoN_^fNa;D2
ztg+*cT%FDt(^JRc?8aq<bpzbAUwY%-7L7TDTgT!Mm2|z<jW*x*$PV!}(7z&pL6}xy
z-42W4k>EuklVi1p%&$4JD=|R<ecVDL6UgNO$!YZ`uP|Sykm0)Ih+DbFDXgnX1e&)h
zY&alQcrlts^^_~(GNd#qyv+CKT7-`MQ%q}WRxj1Qr9Dcw2$D`0i6uL)wpi`BnYGuR
z@iE8T);b)1NKI>oN7wX`n)#AH0f(i=A`Rj|>rR<Em-&R>?+obRmXPQG!%H|i-M*eq
zudmJN>SG{h6lZ}efy&&;Xcp|USR44gso?~2N~|T0#dPG9CPdT>-a**@XBM-`d9m!#
zt9Zb%nh{Que|tr@z}mW;so2}Jgl1B@EeKYYl|Ym%5#&T$I={-mZsoc?<`X~yoKV)I
zE-;PsTbSB|ll#XNJZ}tu!V{O`zN5C|<k&!dCDFcl%!=`+?|M>c+xy{fg_l!@MveNm
zlV6h>cKre0k$$Qfuf7hy)r#o0_fy92SsZ($R?~X<n9t#K`Tkd%g&z!Qe5-(pPP1Me
z$|^b--RH%gspk)~=XD#kEQZvXnd5Hl^O1*xvd>rhs;9c!6?r{CEz`{U)#mA3GX5@~
zjao^j=gUkKrhMPeX4!6v>8=ht?jb*Q7P;Yt*Qql4o7H{XrRTrMSM$29c8*AA{-IBY
z7Ql0zHlbwJOg`&6$o0kM<*Qp?Kk@;5F|!A7lzLkWAl#EXK)@BA<a>T*AzN|K8|v9|
z7@)Bj()DFG>C*>*G@Vn4cOKez#JN0=k1XwS+HC|zw7^e*@+(@cs1+s3F4L4?ZJ3s-
zPqm4%xNVBGq4zTN?`E+d+b!}`)5kUZkhsS>$z$}qeI8bw7?oi8^<E6$FTng*+VxUD
zMoqQgof1JM&v2i6v3+`N>&$d9)H2jY4o;<AKAdoyj<^BlPO6sweiY)!Y8v0Ygk5v+
zrN`jKovMo>oa$~9j7^LaTQ6A>gO;s!=^BV*5pWZXoEU=pSZoB^WDBEiB-+@=dmCAV
z;rY<xy?Ia?k^UwxX3M**K_ab`w%teQ0&cgEku1Fo8(;+;v^vi;m{t&4T!`mJHA?dN
zM-1&6-f{&9-@+Ovl#12{&vm-ESm?-;BH`LTP;x1xa8<qc2eta0IUD0{x>Bb4Y!a=A
z(O)SqCYjpB>F<dGrQ^9j>l)1r<XL%&KVvC)R@#Y(4aHJ>*iz<{kE#DXYD01EsoA8t
zzlmIFrw2tr^H4SK8kpakn)d`<m3aHIj;0+mxZMZHqQy__1i;ucMIFluZ4-Afzwhqt
z0Lzv6rjJLBXct;e(?=<mF~j;X@x)-;RdC8CV|N;`I~stoez3CTIMp;^f*(lobxz#B
z8VbeU8VkMjVWN)GRn`zj*!=GeE0!!lDpib3o`@Uah<A{1N6Hi{b2!fO-+?D~`fwa@
z73<ma8>0tHE$id>Pw838CH@$NpA%+%l8!^yI6{1F#y{jC|9CD5=eoEr(orMKb*LO`
zyLP#nfCh`ImzWsI-oCFApu6acD9!5EinGPL4MK)W5eUcnu%wm=Tc_V|s2CEqo0Rv%
zoGZvi9797mL?=p<_a*rkU!l@3?6-G-jiNv?D&HEWLtrG#;35Pd-|iVXv#m_)W*nPf
z;<Ykfi_b7Q=qp&uBX5cD+GMv$e7vPA$@lgUQaT{cz4aEpSSXd^iWQfbRmg!u7cxJe
z=}pec#wt0uTm9nS{W<6q|K~1_(F5!VIi6T1mn%O<;R&ZGw@&ut=yF*9p$7nO!Iq-p
zQWp2VuzmTr2*XK!k~4S4h<u~FcL_nyS~FA13YZn7@n$Vu?fz)d3X6(Y>o%doj9$>q
zoLqGJr?|d?D8lV7=X?J9?7=6!*-)lZ?kFvxLkAWGbC^QFB8wT8*0=ExnOR;(E}pD$
zEYjiZP)Jw0VqoErh#BMwqawZQ4v<)5*64J9u84BRge7~*DoD6ID-m#7NyTLm*)(cR
zOnjKv9wzAzp<9m>)&CZNIMU*8K+r&$nb^|=K|ucJLw4T$=R^L__QDyX;Sa{ZWnW3#
zW@oJ3aQtGD7#l`Hl@UWm-MN(X{n3Q!Ur0F_S$3E!Id+H)MVspVRSyeeZ3TTf)<h^~
zzN<g1D-F}O8AEE#(m=95YG@(a;1JZ0W4Z$Qc`<q}@%i`ry8qlmY3=lBtFI47=g{B?
z4A8sn9JofHyQ9P17w5-^8$C<bEuis7so>NtDAJIN|I_D0N?!yRc`3Bnr1d=Fmf`dd
z7sK4nz^+}xp*yd-OHHg3=&pDtVjnC`P)i=&{>S#37s+Ht3CJ#dGU8!|D<n^_+SXq+
zyqNTyoNN<3{iPUGNV`2zwc_L|p^23QdO(E@hZZ3hQIhYW$cxjVM3(?+3M>|R6LxGL
z2R?ep3&z-`&aEi6nljxqougo3)c#!o0Ni^n;bY(FjV2mB#@>*ne_`7{XC6sNG(fjD
z*O+j5jr6j9qAkSSqDZbpcrz+wAr4JeqUV5tqS?8u(3cFIu3}4pvI?|MD#WG(9iWi9
zDT~lI=tkUXWcWHSk&C%Dm2wDeLUzp`l~^-EL#6pxgtX(*<wQh~BnzzE9cnM*;G1dv
zP!@Rf$7YQ4$83a4_6%J!mz8I&BKW!!<{#G3tH$moC`&N3Hix2|mO0MItqr^G&0P;C
z<ZhxomN}4|KT-hCHN`jJp{UCL5`f-$vHx=7$6_%V<kQD};~>x7y-Em7IK9N{{u7?$
zjwj`H(RvTT;svz7qv!_)Ot4mN=C##FWu0yFa0TzBZsqReFTp4zKAMiGM@AF1mjpz}
zb!D$Hupd}P1xI<ocW9CITQuRAql1c(veH3`dFh)eAQ@@FXmVPuel$R}0}#ucf?>^|
z%g2@6LZpyz@K>hKRq#_FYAu(HTN%n0JSMkU)VvE};#oO`^_*0Wsw?|WsbktzX0<+u
z^2D^%xNZ0xdQK@4n28r{lqX#|2dY@A#Vl8H>u?`9S~g!-k7o;xipB0mUSznb0<{VJ
zZ=FnzfFKm@w82PUI=jTMJRnVg^DnBXB2U3kXf{rH{|=e)i^52Pa8S2OKB&WuNH4zl
z_BT8nm2<6l8!y%?fO8)HjZk)|hh+h{FbPGKTVismD{0+h<NJd3itu~r1+h=}6SC%|
z&$-zAG`^!j#Q~}Yw$*tQ)jMB!1aubCHa}=or--)OS^0s%yEL#39dMiXcu#j7?c;}r
z5dRXG?@y~VFi^gXA#h_IJtW~#aR2F04iE5(yS1u+E@<>Qk$42vG*m;B7pD~<glY^u
z<$ci!A|+9yfD3qP@Hcn@MKthCEyMk)H`j0W&b&;aFp1KmLTa)My~BXTNOtbp3H$jX
z36sa~KQm#Y<HTkg2iVNU*H%#vpD!ID;s;zBJ%mV7JLKIUG`A?LisJII{qg`a(%4&E
zU1Bw~c0j-ry_FjM?V+eXTvJ9gOUUVLB^aS%3@P$=@X)n)-x<qwze2ZQ?dGgD{2~l>
zWY6^$a_t!-Ea<TmVH}NipW-PHN=l-Yl9%VFwN>imol^7>0B}Dr;ic@pVG_#Pe^(`l
z(%W%Ru#{m%4>nXqCK`Uh3!mUq-t$Ujf~#5mH&9{ZZ?|86kiRh}EMtB+lNw5dY~YRC
zXn3yKR6-_sw&E&&aV}H7-WzHf4GtkWJSu97In^{fb($bgmM2dj^CrQwVrS3SGt>|k
zVlN6t70UBY10;)oiuE<p#US)=&KfZp&1_pyTqncq%$$Oc=xKJ&#yZ2#%UTDWB{LbY
zrz*z<IFyAfb_b=msECYcg(N5;E4Ptz=Qq}+&MvqQd6P_He7I0W7}q}j^%-k9ld)eH
z#Lw{6R9R+%KSxu%Iu=9p68tNSG$53p4t?2ZrR&ea0;I#C8T@to3n|L{$KF9sX(Fa?
zVreb38lE937jv_ZSLhf7Y)~&*#sjE<<ukq7lhMs3$oQq^F}vf>VlWN0f>%b_R)tAs
zo#zkFX++7sNcbdljU}}DW6>V@h9j&L<#Rp*3;|_HErdfVyRv240S<}v*Gs?zHgjd^
z3ao1pD}VuCA4m+W)$U)i2gh%lM6-sOsrrsi^LeuM??8%3n{a7Do}-xRI;65Ts3v#W
z!=Sm=gu8DUpB*btKcKPSK<~$Vml=goR18P^sbx;wpj~_!#w6etKeee#=>iCS=u}bh
zdJ@0dw_?lFy-u3Bymz+`%Uo3&_&JukeBj!<6X4k1Vb`V4b@q4IZ|0MITKTrMHZJuY
zrTzkY#^Jr)tfn<_elhRBW1d=NCGEvK+1=$p#Qtb-mqq#QmKk-elzb5@JSEz#LkpDb
z->0uT7OKibr%QTpeVC>G&0iyyOqI|CDEf6jy)HF!n`B3?VqVAG&u~L!7m0YWVJA<J
z0?<&PEVm*hm)Nay-U-vtqm!Q0bG#)r#hHQ~b)_v-@HpA0ddOqp7V(m`IvuhYe~-fG
zQ(^Q>di9feS661D9eE-2iC5=B{8B*~3exQP?w^$1E9uH{ISQgCB!{PbbpX~v-%e2=
zR?JeOt*CpblnHEV&1q9PTB`&^h>&I?0kDnq!E;WUAs-JdtJDh^2)Y?+7Km!qvF!rc
zVZF4jRT1E%=5819Z0d?(1y^&_c)0-AeWGp48f6s((xI4eYkjZOKE%}dP^yQg_i_R0
z2G1Sj3tW!rCs4gka-XKC|K)BW6AZWid7Tv2sahaJJ=nXQ@=hurEoKk@96Q6K53u-f
zl1zg;2H~d_1)fS%iTVr;qzXFaAi%x1Kx~`V%=(E_%iJ_o^F=E3a^pJ{yKrUtLU%;U
zw9n>tt9q#+-GhF9scIi6e__%BFuszq-*qy)W7zWbir3zH3tn$_VRrfz2Mr8`(!Lbj
z5*qp2k0qmm?}&T!GT7RPgj~7tAX`b21M>U6Z|kXUe}I@9Od$VLDOeo;GoIKRS;6q|
z{J+MN-~a5o3-tdq%Z!$0+$IN#-#`3xTY|sFg7368#rFCH(Zmx;j!A$CfrVykNGe?&
z`N-M(voa>tWQ~b?V^@D+0EQ}UqG;nqmGBGZW=P-LrYg|SmuUUC4}<)oXzHh4BJJeY
zGJjn+(L+=4N6jzSb44MKZ!bbxyN#;8p}ZTd$>=G^Nz7Muz?}Z^2+3Vf;ds-?ml?8Y
z17>K5-m72F+g111j4s6NOc;CH4Ktk2Y3Po=pNID+0`99F3g@a_BKK<@!29&u@8@#)
zx`#YzM>5sRFMhu>5Acd<efH_P@2!}?Fgx6#KP-7f?g(~mc26MkdMsmhw3Ia3fLR7S
zmEjSP=1HjpIHQjubKU9x{RDd&f*U+Lp?f0NGkQ~l%Yp9hdyh&edAm*NFzc!>w2A;d
zkG!WR;BT7li7X)()$JBE$oWLU?y9v{@*dh4X0}b>(Eq5OU@u)ccFObZHx@NULde(R
zlc9X*V!gM9B7I;J8YC0T3u#eNdPC@m2ea9kaO>j=KrQ2PmDwgjHv{FIy9how2yP+h
zJC4|d=Z}Li_bmU2-BqtN2DY>x_S`$w&e!iUyy`x34_U0W45+-UoQ3y=l<OM@;UF`(
ze7*;F5O<v1<j>ubF=6vA8FBE$a<S>E)mw&7wA$jZW0lFtZIzn&GFg=XtvGgTOUj|w
zY!`b5EN7P8s=gA@*lM8cZT~i0b>nT*+wtAA{8Y;=M{iu(uF_5w2EMOv#R|2v8@oP<
zx)rDO69`(tzsR*WgO3cv(3hJdn1K9>?f&QOq<jhT%^F{Q=5TxmIwc%@w<aG_U4!}?
zfox;CEL-Am0Bp{^|22Wd*H(lpQB~zYr-F<JC`penxtyazgeXYgDnP&fMM2EbSo=0B
zjf^lGv-8@npnR`7?q}Jf<rbce>l-L5oCau(6Zj36Im#w{I>Kgrsl4}BhO%Ve6!}OG
z_@xI9)t@l+8CHhVuoH~PLd+3C7cODdL(Tw8GGRft0^N?1N<daYJieMmCw!*gdX-5Y
z5X2Bkf2u&(%0IU+p)l-E5}>E3?}&r$GV;cvmXC-K@%z-sI6|#f{G^sU!>TaSGMPKt
z&Y_58Ok`qJwQe1H?1l9Pl;IZzDM;Euwma(?c)|r}LsC0s9yQI0BIHaxeoEb8FDVm<
z5|eb>Z_G``A*o*(!2MP+sfu8;H0)9p095SHoR!4bQyv5gpnR*@Xu<O$T4#jvd#G>3
zzdJdaO~dv?&`a4C?G!$3E_m9@Dr4LkWh3Ttt;AVE(?WkD<%IOFQs2e#g)yFt@&gUP
z88Y&_CZdo<<?_HXM=ENSz<`etFcFOPjp^CiTrPx^+W`*+LfL(CXKVA4!bM6hfaiRT
z(Oro!)@0USiQWZNcV=L3N74HPq-&?vK-uu}1O2LMtnZ)+J=Wq1H0BI02eSuATkBqh
zP7>N}Da{Bte)FRK8r~psTWGx%L!?bT_~u}0&2Q-XT<*W43$0F$)(#}H`vpz*0>Un)
zbCkb%+;V~O^MmpDbFz(uv)1$O0h&n1TLYH=%9et9%MB&M41SrjR*&1TOVwj@pD)FP
zga;aj@iv(zH{_vqU9?-PF0}ejhFNVRxuG)hA1VlK5-|_)GD_dj?gQVODMPaq+8B)g
zu04ieX}s{-{G{0g@8>yx8U+PDYH>a67dBLkM?u<meqydRn@*E`iLntP0NA63gWgU?
zmikK&gY!&m8JPOkn$_1=qyR@ZwB>Z2VPB!&T3tbHMmBS!D~BpGYIn8!AWdd{jFoV3
z3#c$4G!Z_;uX=>;KG-Tk%!oAYTnIz}!A7rZp!dqi{{nIDsIP>Ai&&^Q^g}g9VS|rJ
zXOdOBr4fT6_6b2%nj!j)3lP_Y*;hhOvrM<7Ie>2Yb8QNyTS;`I^zuF|XDY%Sk3Evg
zJ8U2p9JQvSUJ^jL+>kO{<a}$*d^!9MS|d29?L%=LOi{%s)F6=;wAW^Lg_O()p+4x%
zmM{>TmLRE|%aTigkJ39Bc-0x|iC9TG4OJ*oQk19%dYNm}N}tlZ4LC{A^j!0Udq+Ni
zb$cY6%iV2xSJ({Io0Uf44^~+=>fmrM)@(zBJ!~LO0oVAG6Mv7^;bt*E=p2u|zGc>`
z*GdtPK}!6(5o;r^P9UV_STHR?!s&kxotuyD?2;m3q$<^%tPme-5~MuvGgx`+!Vy9|
z#yssTkas;1s5hNp29V{8>mi|k;>m+zA<avSf@0hqwIU%^um%zf)yh5Lc>=5Xhjg-J
zoQ;&L2W{YM{EIEiz5;Zodg?(I2-Z*XeiTS!E9fxcVQp!nW0)>>0MnpqMQRWnH2j2J
zYJ>cXVpt#zerS2V&D#h#$pR-MSq13UrN&De*<jDJY?Uz-2w)4E^Ts^0R(2^ni_A^7
z)5l^26WnZEK&MQ=jtZQ({<X?_bBMbHN6T|eWdQ{yX%3tUYOd0>q4uW7HfvZmMpJdu
zh(GcCy{6*bt0w7fcx)=*ca?K=+e%>+zkk$~ima@T4pVG^nB_#S$+yACXB`tX)?t(0
zBJalBksN1V3)n^GsZlUoV=9iHX^w&3E*D(OHKSGhQeeu02DwIpJabuQUZ#UUSiC8M
zu;c2_jrg?cW3Cj$*79{R=F0333rG0F0CZO-3W=vpIBBM#zOCb<uGIWC@;Y?w-~?-q
zq8Y|`FHUs#)om<P*NWn}=WXT|<U49i-vX($c`X_P2YBz*SE^SwrzIy){Bm5YmO93~
zPi;-Iq*8*sFnDlYp%@vHY^N~9HS;1cM;7a8GE%}4R=VK^9fl^GBCJoZ?Foq|+36Wf
z(<XSEqVTJ1T$*AfVmC6{&E>jT!X}ya%3k{^$MQbGbEKT=APa<7(IK$Q-kYw)&8+do
ziaj&;1-vu`VRT~|(|TEoCJHeFMeJJ?pD<~{6HLYSr-%hI)KSe2>`{iQykpYBD(fPJ
z{o6Tr0S9Fj_yXqM^N$wl@?L+Ii*hltkpT<>loNlTmDS~G1|=Yr1-Jz!8JngU2@Zp&
zP%<3h=0nM%jOi+4NRDw*Zd=CgI71AOwqcb4P&!4!Q!TRJxXZ5X`T^4OS)BD|Y%7p|
z8-e!my?Z|9ze0?>j;wVDQxhu@LzM6s^WPVK4^3jIs{Pdw3X$n{-&Veh!cSAh+Uuar
zBe@QJa;l>oj4!Yl>7Vjd@&jI3|3{b*Q6c!-(z*oh{ka}(zbvIgVB}h)sH<Kih4c*s
z0N=FnZmx{&GQ^H%9W)pooNsd(9GeGv9n(kMS|WT8(ad-X+RYOy79>WdVyxprh(!85
znadp)xh<;eL{KVX2HVGdD7|nSoZz#~*ns}j+y35~bT;EUtu-}F3MyQ-xS#r4#LAh`
zx0<Y;_2$vr^>7b&fBN8&IYQ_ZC$7R85W}xFdQ(~pYprbnA@Ahyqc0-cIPI;nD1}s<
za=isyeC=|bl>^K0Wa~~c#$MH$td~9qeix{h$HyNNrRN`m)iPQ{xQQE8Rn^t8v?mh*
z>0YV!i+p5N@vjp*FG?57;DI(F8OPSgOGWtt1j;D|d(y?E8>~8v^S=<zL^6L20Gexz
zER!bu@6Q<-SJJ;;)}*Ahdv%nKD7R?{DpP_-ky)m4G9q;EszQO^^wJ*~L|m>%h_Wg=
zf_lSUGmCREa~!TM{Jt&87x`>Ux)Y`*CK!dMo;XZD409&(VSk=j3Bt<Lp08CXxQYIS
z;w4{G8+#IN7uRy%(5h70a1Z^o0A<M%LPfT_vMKB1ZZ;+`KoYqZ_iw&S9|d?<eiQ{{
zDZ1=d7GALrdRx<{A5=Pd1k=XlC}T>__a-xbOK5s`oZ)4mwD5hl61?T?a=UJR<Y{qd
zm4=-~z9k{5)3pelKqEd*A#ga^yGhNcVO`1_MZ;WakbNwr4`2u`yrlx*fG_jM1;?>q
z)|`}qvNMzq<KXY)9K!DSjipA~Yk7<vDwU0*)FK>dS2$zjs;|&ZQY3NAP1AyAU*=BH
z*@A0|PR3W`Sjxx5`Zt=s<N3aQ|1&xm)JqCH!wb<2j=6b6flQ+bHWUs&EQeqTewKGg
zg&PSm##e5ZS3^;1m9+9$I7K9GLl3HtJn%oEFaP~6fN-#;B{cl2aQat0n#P0#Ob3wq
zZ$fjvNJTR_L2UKW%$R#$#iof(@><Pll3V~n73f_9Dev#+b)7dDNHAiBNmXmB4vz&r
zFE6j}d#Aa=%COQ(S5ni!#O4%P3(s+>C5m<sB#oLKil|yPB|BWrz}kn6{x%2x9N*8|
z{^0prZsR|6_LqmNW6Wqjbc^prFd%~WY+HvL0O!ZwftBsi9MH%^6Yj$fzX~V*n8Yuy
zBVWZ~5-65bc42C^XKR0>d3rp-f8LgHb++WLYUK*TzJ%kF_oJ|qe&W}bT(vmtWj5J?
z9=rh$Dtn#bD$bM4`If0nr)N$|NF!QRs>D+wp)eO2)DKT0zr;+98Eeka1TYe`ifH~i
zA3A5%3g{`mw;?GyUNp1Gl>S6*;TLdi6hK84)>V0!Vfs9!&dL}mDaiUGHDr>_Z;*vf
zX+EWkEYi*(^`5kxbXelXhmmMLk4Y;_*S;?mN}A)s!)1gtfgDEWV}yAKjf#YsHluBw
z5H7hbD73o-|5pRU_x{Tv3ShH3GEG8$1iBK5xt1n}w26JqlI0q@9*(1LdT{lZ{ce+0
zs&ZT45*}Bp|6*~HAkCR6DzA1-4ZX@=Yi@CCns<`zU8z%yUHRNJ)S~4LMmH59HM2q9
zh!3Y1Be%!--A}OqC(Wiel68a0$nISA4H=#d!Pq-@fT*bAsd2=e1%T3JB(4=*fW~&9
zF}hxM)^!SkRi!z{q?%8ji{vHL|B+wkF(QE%8T&N@Jt8U4#0Vi0%_A#Qzm+(`-xQpt
zv2eTlN`Gtr@p|Bz>kAN@w(~x{rEl#icB2NRcy!9<?j_N`0BdOVjwP%oKxs@li`iVS
z4qPp>o>GL3EH8cs17N%tWfxA8qZQN@CjUlF5@ER~f~zw6hPoY8pcl3g)yG26oH)2K
z%ltCbvbG=&+8lrt%%DXL!0<FZVyJ8l$H7!(%f9#g8{Z@Pm!;V-qI$AKnQweGf7H+z
zX@(p(5ME%E!vK^x<YFKCCxo$g3g7XR2<80zGrd7*ojM*-9H2A97{1QU)a}7xji^No
z*N;3qg38my`qUF{kW*aoY9@#6lRp5BMa8i<u<A0YZG|fr9|vP#tOvdQ$nqPiGx;uI
z<k`f|-w6~GZ@mRg8^VvCtahKH`q36p02~T~MXDVO77F~$AsBPRGLabRG+iO{_Sr97
zpeYX9GV&?b0f07EZ*H|^baGye6O!^u=51kkaKoQ#n+lmgTi;MC0gba?;N@)2i_aQ=
zc#UP-Cq@ZpA*nrQj69ALQ^2E`8*>G7FbjIUJ+9)tcIB8Z-;HK(3K6thIkn%Ml^u;B
zS%NdEmWW#F0>0}Ib`ADD9DX?z14g3EV$wk(7z;3$2Ut-OnMb%%D=4X)fk*Zb>|SM|
zB0tO`oi-v6uz%@!KXIYOZ!_uAY6#=eAad+M`9)y6U>F<H>?np;dKQ}piqtPj`*3h*
z{$}6og(H}cf@#fZgPe(CdFCTqusBRr-<zY)kbUULzlo)OwGQ?wf@puMfjCP99)9C^
zLt!S90wiG^aohC&MqIMY<?dH1Ytq(TNS<?PIbfe~Xu3e^u6@*bg^71zI6ufeuow3*
zLSM7@6IlehUcB)~v)h$;=q@<{*Shs`59;*oYDyaSiw=DThIekh4ar3K^D-G=h9VbW
zt>Mkh5Pwh~=<CXDFg=}MRRXTgP>!CxgD2;Q1gJ3!QL2vm9Qzvk_SDUSe@Qg3^`<31
z1CDOfH2;Ne*j}+w(W49ZIKLXA67nZ26-f9-<WfXvM!c4mk}kHGg9vJO%&!qla13<%
zfRU%X2!zUl^^s~C&Kt#zEW#eBoLbBu56(eJ2WLE>1KTMPj6B@u^xY?&KLa5jUSADT
z2|&(u{hdg5fvHL8^lc)8zYi-Q$M6t6IcgI>FU@8!pk>u>AmLygjq4Q-{LRt;{bf6D
z7+Vw#vo2LyHNy(0${#8*HsiH`HZ_8RjIJd5mL3(wau{QN(t<xql8<10%Z<k=;^gV_
zMgQbVKbQ*lH+gqODs!A8<*-3_Hi~OG2JmL3R6C8`{$NiPIW@x76^~De)A=XwSZBr|
zllK?a;EF+fwuBt+#jqb(sw6f21s<Lfwf)4v-GS5|2#sRJ9?gc3_0-8yUEFG|v%=MG
z*3Fz2I>JGU1l7gY0OOgG!Sn79?rUJGb$?c0pMnD3LT`^OUd|2pyyCA2J+_E413=P{
zp77&&ZqQ@?(nzRq?|5iTRgQzL7LM7;0;u73J*zVzSMcVpY}sVml-WBYQ@3Atua(a7
z(e>3+HN6`B%RM5dUSxYvD@Z`Z!S^+MV43@>?V*sQs5$Dy>=}TjIQe9DSC{Ehw-~}`
z{qweB{X|Fd0^g1PImzOBvZktc7{GG*E-fDRKpi;Mzrve0|3R1-`o3Vgz+`XY=Q6D;
z6gqk=?H;-JEO*cEQ?^DQf;KQ%il7wM)IBWK=;tKVq=-VLj6$VIk83-MxkRk4tZ$0K
z{!AtZSfB$HU3COkd`kjPh;8O6Cut&YNDe<}%_`HBNiWM}j995d-Xb`S0<<h<C1SAq
z(N+|o+a^g@l$a3T#p1r}gZJS!^A(y_nNrD@))z;VvefI}iq^drV%~~gc9KT8qCy`S
z;4&VIEm6V<7?O!QpHg89bI*-oZB%F@n6GiHRlv>NVa=;y20r~1(!=Rr4z70IVXlN+
z{!0!Y#u+`Dx5jSI%L9%8d<P$K_iM`=h`2vdp9xjQkC63s_wsQsLS1n#4LDBd0;^Jy
z7&Z4}iRLs6*KcsTxqm(VzUsbfyMKTYc9eSmrzzOkk`^#1(&FL45kS~k|Ho`v)|QO>
zS7ZJ!@3zO(;h+J_F2J}4E(J#xZuq$;!U$nsR5-i>Wen}`?b~a_z8O#=v%^uNcxfQZ
znx%Vdd_CeNw+=4O8L?;qSXTYCAq4wL$&VGa71gOU3hqRSx}J#z*;E=7r(Q0%>WflO
z{=GIVqjC8o!5oRdJij{Z$Or-8JOrlorQ=e&ww`c2kTV_YXjB}LgnHT1$x)c_5QCN@
z+h_~P9*%9QPr|!`6U|OuT3xa<7*a1(uJonjOj%oHo}Klr;gJ2pdlQ%Dha5%*#qE=#
zS7M?9R!Fu;Cr-ecn1v{1LLX8piYmz~`jrNf5p3lKtrJ5{AF;7$<w^w@^#Uh`Ok-|}
z$kL(qhltcg(2AC#|DB+St#Y-Ckw*U10wZM`15$2fy$0v|%<8Zp<N;xDH2&2lmf-~x
zARRcFUtklN9~dN*x=dM(o(}G|U$IQ4Ph@2<^Fl|-q=|+lFhG0{7G95*B)WelbuHfy
zN|O-^v!ogFVINhc6+;M6QA)BbmvCr#QckA|o{yukfiQDZ022tT<Q;9sLwSV<LXrUx
z-D`j5B)rLN1%zXlF7*P36{f>Qf?%66KS^yn*#;fZtQ9-@*Pu2r=bB|2U6--v`D^0n
z2v45iE}_qa4P~|(Wc>Qg%Fn^W0pT36CHYsNkvPB>TQfR{N`(jj%R^^I+VyLCB!7n9
z%~-9A9wpt<J;+Fc)n$F7g5{}fou2%<%E}~7Zg4SKHg{xNjkBzZLcX@P&tYzF9-4U1
z+Wl)={|6%JUxfV)#hcNEVfXLd(5rf$kJFDCLasxzZWghi{<(Tq-cGO2buN$Ns{G7*
zIRW5BMMhEagTe;T^L@kc$lrQg|2#z~>l**~_E6Qed7O3K;(b!v_i<3s_3ifg-onj$
zunFkdxEp!$>FWH(i`&%e{hsh4-ngx+?c4F|^mT5t;m7}5RQKhntuK?e{e6`SPCJal
zJA7im+`Dvp-+hiCvp1HE@X7D{{(vEqhaXrna53;8P|O1eXAbuwbHW0H4}@fTI~t%E
z6D$^loAq><4RXfLp4!uaIA!KY8|Z+WHFco>zb`?aa&fE<bRf*SI@AU^<7Z#)=|G-(
z9oaP8Nz4-=WCKbj>94CU?RTc@K2Q03Jl^N3F6ZoSSFUSmXng=*W0wqd`~b19pmVHJ
z&?-Q+-rlF?IwTa1<j4>J8D*r&XtQj)yVr3Q(EjzZG7t|~)$8e`0`z4_WSv+dNOEYk
zYo}7(M{B_S6n3WWX5r_87b}GPOh6Y~-C@|d`!7WVNUfGE6gFLG8LMq<@Tlfi(Vv1&
zB>LW1R(b?}lYta#umuDw_hOo==r!9Z&j8@pt#TiuX>krRaUZ*9pQ8(92C||MlC>J;
z!?(N@oc6#6D(z4vg`{Es9IT{bS!lw1=OUZZ)=QBAnr015B_0Ct(yZ<>7r7Pr`nr4{
zFHX$9-ru)p5E)Lg+?uw!+daR1V6>s9HgM$O7o3AqLg!mq=>A*;R$5yrTPSObUILo)
z^EFfrSTj%N2ZyJ+b02jkD2_(Zs>IPE$OtSE$H?LiPW1L+9c>n=t%D$}G(B~xsr^~h
zHMLHD<2cpqL~a)^6p@K=W_B;POw>bmV8L=q{h2R-;Eq7illU1ClA|p1j1er;Turq~
zO2N#PvNoJDm1WM+PZrs+s!5{E@CEc@Nn$)iSCXhfXf#8Vc!@QD=?=Xf6+O2UT`5|9
z><s4{2(BYZ-<Q)6I#p85Ql_QV$gm<0I&Q3BoTeBEHO^39M{|-9h4m{ySOg5@i*+DA
zF{YQKg6q!Uta7sIZh#qDNr$623U0>Fo_igDRz8&<)C?$w&=lH5D)M%wh5@i;bT(4c
zB22ZktgO>9n>n%-X6piVR4JZ>Ooc&37Gx;wWqxC{CN{lWbN4lgiOo(>cnek_m*`aY
z2ppL)Ku!-{fNm^*3h?*#Fp_1=cZ?|biqa54u|!j1W$-+C6%;ND=q(%~EFs(K!uc><
zjHTHM;V0nZXe8%;S-~X6$N|9bNgltj*wK_Jx6tpg$<2;9M?-2@c2<^x=Wf&!r^OWI
ziLkY#DZoKgd*VCO3w9zgWR(PU_eHQaX1fGdc!&dAXp>ScVK|#b=f7Ff$$FzUu}K*+
zucux8m#p?oFeQk9N&awRu!xuzGG7YSFt=f~KL0gD!zS=k#uNA8&jJ|C*#8MxYR?`n
z1C{tC!6+^-=@#H4;)=P{tOky!D28PU^{K$u+Y2rhj&WUVzh-s8E}W(ij_6A&zY#Jk
zxyvo!2jokrnETWNdR%mwm0-Mff-&YW%c%5r5fbtkpp*{)OVgzs%APV?)pCYqVR#%(
z0`Zy<Y*jt~o5P0srv*@&bjheg6|W~#u413|1zHk%R25U~mha=Di1JPSmFSv|lp@ue
zPU(VlEZ~W9jF22hAyu)ynT%koJH7<Fr;-%Iz$?xB=-a>Yr_nI&PcdB^c~Lx7`N^Uh
zGRlgZ8|=iN+qSR(wCBu&kd6)HqT`^*w?5FrLsz^aX$)(gP&9z@(>~xSEAG}5GF&*E
zn}|;&oNc}-;<OIZi}P2zo0s>;>+H<5p2z7)^1_zrPKRcVcMUgt*p)3wm$kD9R=uCc
zu34<FLX&lqf&H;Gc8HR%H=5KtdyLS}<CY460rTw!?UC_zTbq7&vJ(|b%tNaP=~v&7
zsrTyvBbF(4Fam%Cfdrleu@KHkM$7d7+8j~`G$G8fvrYe>6IX|o0ZqtLCTs>{X1jn(
z3AkA<j?2C3AZNJKY;b8wKBZ>NET7g0pl<bRSKKaB6E5cy#3{TJ(?$rOEYUJqX67Lr
z@?@g>Y|E7S>jF{9R4f#3T#C&sP^zLqPQa@_sTCb=&1Gi$k_tu!ryUt=8x>QF)3;1C
z#Izk`y27s|keZ4x3jRF}hK-rHIe?GvY}evem=la}p}?Cr)*;D{w;UohaakmrqPdV#
zXa|F3f@|dF2K9_-3F~pwl(O?Z)i?8NvnQ6(REW$a)(DYM>gWYFlZ?S2vZONd1E8c7
zHl;fGpy&wo!U7z!^YK%G-_NuvxOWUkheqpQ|AcTRT=@3^=~Rd|oz^&x)$N}NxWH@G
z3~6j^EgO<zWlG$d=ypCKmfb*Nvi&%=rZvv15dlfKpjLsfKms|-_a?vQGOq2tq2v!+
z(Y#=(X7-VzL5c#<C#;a2u#X_tIRJ?J-uDZ;xA&M%_56ni<mvSC&LkJUH0_Im7ysC#
zj-f<MDvPRBa+{}S#HP^iIr5tQ?029I!F%3V({~_*AKcjIa6iV{<SKN!^JIkJ58pS_
z4q)X6^y@$6Iy12ZPv7J3u<A6xS6>fWoo`;y@#76WU<%KT(m+okz0!~QP5{_V3o-f<
z5RRo9#`hteFO4=OlDvnK)f&*}a_w8;FW{ZAK#R|xP!M;iFK|8<#uq@e!^`pEtvzuy
zA3AR;u}C0gHbXZYcD^{a6X69S1|X@&Bu7qFLadsG5P<H)vrH+pGgU#*2gR9dwM2x-
zzkIk#G={vugx?eQE`8)at-_2%e$iD*cDsg`^6|CQI|KFY=GkD~WF{KA)}bzw!A%Uy
z5=YeJ+*Eii_xaLz!gsUXhOMSqbhRlX>8-cXrYQsf^;$Jkv9zB!;GJXthS!~zxBE})
zVsfzm$9eewEVnbWrVS8*&;T?w?Kj1c{+mzJPO})k<NG+#aJuY|#a9=@<p>c}OcqH;
zL8nU@{(8=_mXu13IVxZ@xZ&jHK4qsdugBsD+LhONyM@~lyjqh)ga0ph>=0ik*PFdo
zdpk@#^P0(G>Ne588I{6~wM;>{KPLkpa!^nDZs+vy!XpV;Yg}dtKtcTV7(fWwdRlU_
zHDTjWS6f?CP$lM`W^8@d5sRbvb9H0&7Z?|n=4rVC{g;)K<JZ84`NOvf&-uNH9g2AC
z;i$*W7yqmQg!3(A>~-119&U{eeBgZBP=A;k>l><uyU4HMvfHP37LlNS1d_D(?pC3e
zR-F{gmH9Xn)mq#$0J^qydO2rvWA{8yk}chwVl!=s>08WlGDd1sh)v#dRketheYN2p
z7<JWMYf3?ne@4x5Y3007OF@E)>Em4NAu(yA+6g-gVFk|H{D_RkgrlKsve`WCJra-W
z0&-2p0@bxRfg?OUgqq+MQBeV`6BJ2m5F_8yfyjB`x@~noK#@&{#9<k~bv4eq@PhjS
zw?;ap)_oXc65&(5esAdk#C7xwE-owMvk=d+IR*H&416*K;g=yg(V1cOiif6F+-W9T
zWwGG({5xef$m@|96p2Vv8<qNJ8~WuInhS(&g<}n7rTvod0^OzVka3OMo;1v)BaeV~
zJZwLSGccY$0PS}dFJlWR!#=3Ipot&~bz_X#T(<|woXLm^MB_S~eSoZ@dAvWi&AYYD
zf+|f>N}a)k*_e;@NIQ6$<=(bLIopFMUv4@Ebc9&nK`b+=y9xgm{V=gTfFFBnvCvt^
z#re?z0<BgIF>URcU=L_#WXGNIPG7$in<AGB(yL4YfK)UvgrCF6mDAtvk$1&A?XTKt
zc~;)%u#VCKUnop19wLpJ*;gk4Uv@gWs<t&(8Hwx5FviCvy?gz{6!&ozj6i@#jzCw5
zYj-GDbJ;zO!@~jc`%BD;V)1gNI<Ni94lH?#eTxcrM%#+TFuY1rdBvJQYq?2CZK7el
z)=(}Bz#KLOB}g|`ut*CJEBlogiclL;*-3=!(cbHc71QAA=jCo$LM8GHYMLNlZGMHP
zZfoN|7YeR>;iG;VA8KZ9G$K(>0vUD2#lcSF8hRf+G#pSgGQC4iB^p$n1V%Y?51aWH
zrp(kdMYbwX{DWFnq=fu3@q?s@e9>}zI{YaWaLRsUh|AVGiX}|krPzEn?~<6^Ph4bq
z=x8W|NTCTvK6Xc_K8($kFFwiP((jG3PU9D*#n`*`z9a6`dtZYde6c963^$Ur;LKD<
zYD{=L+LlK!Tg#896-EM15D48~g7}f#j=WKeUo=Fsi&JV?Oy46N#RWyZqe(xxEb^cU
zNZaUMlf%!m)XCplg~!G#Ls7qW`ty%~*iavbitr+zY82^Lt+AHI_nMotOGlRVOxg(Y
z7h@MUsd{{J+}bfP+Bf!EVLBSRegbC*Wr~${udQWohaibM;AR9~^l^`lg(SCk<Zf)o
zOaS4!5@YndvrB<d%W}(*Fv<?|Y--OG(2FXi@g?L$N51_y-7JRqpiLwK$+YXTno@0T
zrKx|%UU&a1-2oGh3F@80&|BEX*ncKCq;lM4h+<i66ns=RcSTn0W41%PdIUb;0Tn?s
z{tLcr*doUq&%&WL%sN&A1m&5aQkVf~_DhCQ5Rm|=-iy>==%|)iU&`S!OMDv*&?!tb
zRlWbUguE26z;a|EWe|{JfR&D+N)sj;r$Q%dY%$;4zJKd{38n1HGWy*@E76PAKWy_C
zs|myRgm*r8Jg~I2+I6GQQ|2oAzPT6(@3cGkhY)rateH$(!r#s#0~w<Ay%Eh-(Y&E6
zOf-X?Xvs*C)OuUiD3zo(*oVp)fIGWt;4kh_j9lT*@<$e>USi*SdLPLr18>DSZ1&V4
zh5;gQ9KyS%7iqJh1$dQ)(@yOyRD{$3XzZndJq}$zJf%9(FV6dcof9bO7l9RC!ND^B
zA$SNF!rGZY1o{;C+95~F1xQ+V0vrQ`-b*}C;AgaTu6lLaei@c;+T!aVKyA*2pXdbi
zmg_*L(-8WENBq|g(HQh7)REH;Y!ai?>t3aTM|CiO*&2^={GZnD>NzWG3Stz9d>Q0L
zwEwbr#)J6^cPLzGfv&=Pyjo4V#V&30qBG>MRzxscAe72BD2d&Va%tjrn$eR2PbDt-
zs0^EdLM5r+9zrniL{_;22=BI#ic8V1@&(fr+-7m(nIzpDrOnzXpI0F#ruC+8SgiQ3
z3Z2ruWZ{gYSd-!_XXHQIM0TUI4FV~a-K2G$UFdr4Fm!uC-1ZQqX!xX5f;yYugHa8&
zxLmeO-+D^Sn^yTU?8|KYvHVRn%Nr&2OZ{PUM35E!{NZ`(U7X<+KvCJ9595z-`d&Qc
z=huJV>Sp~$Wgury4TX(2(+;doOg~_6UL^UjrRM;SslT>i+1(#S#3{+O<{Qf7`sDC9
zMnPMFP#Z|m1J$|!oW18M2sDqoSBrAy>;8N2mMZYGDC8*tiSbEkGinf1!K0t@@0OEd
z8BzW1s2p}4S4C$70O`e!xVNa~C(nZ?HYDM|dtz)z!uxOPCmNGub}-)w!YGK+XJn8^
zR%hs9bPzS|;G4FIEGDx-wd^)}U+}a3PB%v)*KD@!ATtZ_59YP78f~ozXa>*W!gs7*
z)M+fQJ~8e)=|(#tvq9xFZ!`UQLF7=2e}4gCu~Os7-zTU|Kq(YaUV9BZoy>PT$L=}A
z<RhTtCSSSo%5(#7o2DXw^Hto?zZ7!Wp*QWX+0kBmlmTE(sDrfLDDQ?*Vv)_=;1h4+
zu{vD<3Oh_z0Lc%NwXHksU?Fp}3eNOlJf}lY)k)!(zDr(H)BTJIkI_eqLMMJ-*(oA*
zu3=&$^^6Q0AZV};I7_6}`-jJA|7$W#UH&~(Bf2<eC4XBJ_oZ`#Qq=J&A1Zb}iq+@T
zyJaU5Qt}dEDwQ?XTQjEMHegeL<JZ*=x~$#q9m{fa59V4oB<9(X2&<9w_>LiP>cNQX
z1gnlw<N@h}<$B#PD6~v%*WZ9s%w?G$H~)Xy+tpYQ0GG(eH}r7|J*><p`nlhXhQ^*K
z)jiQk8m*{0hrFip$5gM5EvGTBkNMG`>QOS58}w`X_YtuMH94CLG|Sl)hPb|bI=_o?
z`~|vMy9~e6+*Vtn)%2qheeWkF`H?tOn4hBsLxpGc*EJY--(K-2thpxMd{&`vf8Jx4
zi+ou*;HV^d!r=P}B(mmZfB4b}gg!Un*cAT~{5-s{<()P3E%}*Sc~fxoKFDNuORGgJ
znC!?l!*NF{@<ESPi29a5k%jZIS1R^v`uM*<IR7I}+B-UZtM4wXH@}@{0{n5E0smOY
z;UaOGM6DA~nlej4P@iG2Kb?X<#M-Q#)B!P~PuiPZe)nGd^AAuJ>x_TezA-QwCL{Cz
zk6`3rO&YlRCm8KF{|^A4Kw!T}5`Oou;Jz#<WW}(%c|Od8V=IA!_*h5YSs)o0ltkIu
z(cv+rIQjQmM>o|JsVnAS20@@c>+1TdtL2jKJUG7d;pAQa<n8+;b%gJwX%ajAu@n1V
z5=Bm&_+A(~{gLy<y}a&pg?oPYsn_XB;k)P5KfAl^U16i&36*<)+6fc4e{p@)`K|x)
zq}M+Yz`%Ee6GYNW!;;`|cJjxGCzKzDw7_c8l-Z^S-d@avbG|tFH~d>qc2z1pKXtl+
z7b=D8zWnApBbfW>_?}7==Y>|zoFG(Q7$|5@ozFnS*NU6ZlA;l_yOxuTqkP*qN$SOk
za^fKHf=IA+zDgN?lG28z^Q9Xq>52%A(;ZBfV6`N2&pJZ7i}_dImk%A`u5k9b1Ln+@
z(4Am+G3TYYCZCS56T8I|Oy|SN_y?_-L+^o?J$JeZ)0yVH7MDJEB6snW(<D*OaYeyf
zCiCHRHQFS!d_)#ZVlf^=r^vO`%LNZ3rN^Ad#w_+MN43#^JSs?>t^k_^5!+-$I%Tk2
zhVIMbWcY~9z%3rL>6AwYIe!ipv!{&27O9($Jfhi^sVAcl4qAYNBuuogr3^&i&R4Sm
zs)+3cYBR>Ra`X9;Xo2pNyx{p4oS%@6lQ|C=ZK#dh2UA?6M<#mXaDg_W16w_JQn$8n
z&;bR0aGTD5p#Yg8-}Qih5LX0VW&`Lnad~>~#H_;*mls7oA{+SHq#A@p{s*zhQKsdD
z>?oMIatku|`pB*G4Z!Qh#A0SlgalwM*jsO(;Ls@l&OM($R`Zh7lt<Q9ldMTrASoVL
z7@oPNS@7p`NBVA_4apWG9$P%~=g^ph2o=N&%?+J@VHFj~0Vvvb(XO^+mUQT`JDbdD
zBXUyK31K_q4@M0lM)4VIjt`rNEH#4T41>u1^$|=5o0L0WXho62VqDUV4H^p`ddv#m
zFarFJj7(%kU_mp+rZ|D<&4$0{dJ4c|>@#iB+#o1JGY<17qc@JBg{6$N_5VkXGqe|!
zc!u_WC?97gB2AY(#v6;u7#=Bp-ooM@PJHa0^*chK!-IUAHwlQV5-(9YPWHZMGuZgV
z`k?t}Pc^{89vORaoLZ2dkP#(21GQl@5PRY?l==jui;EW><s;&;{~lz6!}vZKn3Xpj
z6}lX4h}PP5aF#$+t{rA`<~1+_L|*&EW*Fyx*ad##gJ~ered~m7UV;p_Q(U&B<LI)?
zCUdP*v4-t5Zwdk0b4?71L0SSXw>gdsA%INgi2K-wu#lN(xGZ?642IOJ-XKWD2PK3r
z68H4%%pCI#9J2fNw)c^GINayOvz!DdxL5i$QZ`o#P7J3R2!$3KR*==;(-bvS#Hc2J
z>1;&f%nMnGc;P_kK1|5gbMEm`6l^72^)DDtQj+?b)0GQoQtPhABrP>GYgPlu&5etE
z*O5*|6`=FTS3mT(#Alciw%|C7y+Pije*O)dB%2Z;Jh~-0RTO~y*H`_Et2>+kso}!4
zP7-@p{83~-(3@ZbtHDy^%sl^2t$5>q&~XkgdHf_#hrKL@2|lZANudiC5EPjkg+*+G
zyDL}Aoh>IAt#Oz@86+mqG$=a-y2X+cgQ{y|keM5_l`HhYF3G)dNaKatRd=PKg@$%L
zWHm&%qE52v@MW08<aV8k#*wEWT@D4NqVdjDG?0*r24yPRI*kw#rXYprDa0;+8n8O@
zA{m*C*n{*N5?B2AP$d{gflUy{RqREvFchA1XKW?a4X=qL^!y-oLSK0@kbLg9m<X>p
z#8r(czygs9TGRq5CaR`J>U&Wt4_8A3iRVWfdhqpvcg6!nkD5Bt54~8nc_>IRl{Iw&
z0S*)%u8st&NPk0}OH7rr;`auBJ%ZQ^lB7*NfMNu))V(W=)De1wV2)T;^|-=2Hir{|
zcvn{i95QJ2M1UZ~=S@wdlJJZ^!oyS?ds1v1iGDJU$}5la;f}sMtEz<}0SSIWwOSxT
z5}}Z<3q)Z6zMt$C1Bj&XoMsYD&u!_&V2dCDabukX`8&c!8$5;dy#(xkS7G}8=KejJ
z{?q*hU48#C*U4=MUi$r}WNp2ryhr*wLPQ&)OCh|}-w^#DzwmYE@4$5{%tPfxc<?rJ
zyu{yT+hN!W<5Z9{R~S#mtTkq4_#YDgh#yMuygJ8Zg_8Y$ULwLE=y95cJB+<>7u;0J
zWJ=a19Js_Oy^%IIxB%yW!1JaIq$&5CT5l43yICnKv@T4_x)u0G8?z34AQ8&+b-)KF
zjDxTp;0KECX|j*l0sJ<2mcX}}u2BpLX76Sfg4>XxM6fNxAqZ}Txk0ead>?{aVQdg=
zGyZu5{{rJJfH-OZ@hP-RKWH7mN87RvU?36hCb1X5DgtRD(GGxreMp#m{bi2a4&YXJ
zmH@VycDEz86{aO(ZKekxwjJgMu{QHyD_Gm%X~1gp{9A%`3;YP0FZ9I;zVd@V1Iou+
zx&~z=5k{{|!WH;OvhOJncxfp1B3XrrCx923N9{mz3oH$gD?E?Or`r(2K)WKw0myEH
zwFY*D^`5J^6}}pO+!emn@4>dZ{ITro9*;`ze!1@Vcu*#haVwXXf^~5mY>ld=%eTR^
z^m&`<0ng4Y?%#$;rT^O^9dfm`!rUOhW*%*K{#JMz@3(pWwJ*t^zt^Is7wN0-wWG~k
zM>&v)c0W`1qFkn-m&8#!7aQa;(&RDWc9gfmvqZVg^zb)-W-Bt3u(oB`kLq@K8&uo8
z_uOmkFgDP(8CU;iw9V&_=U?-ABoXZ<vES!I=_RRb<z|yf;3eB*YU%QAurw}j^E~G3
z)aYoCv>~+ti7oX3S6@54HArmU`!Lc9UyTu)@89qC`%}MyIo^(StOJQCRj<RkioG;w
z=iw%SnKWO2i^n^_-UiPS>^9TmUT&?(QNq`j;{f=!!rQ>t=DiQUtuQwDwHY7wcsrhd
z-S2?}`rB(NApRm6+pC~Oisq^QHCESyW(|LjHGki&!2%!_2?yNIi&I_AD!h8pumT>j
zu5{t@A6?<cAMZP+@Y2+@;pn=i4XaNn>a7deZ~<3;rcSsXlzF1Po*%T~ZizcFxVgDM
zyF9-K#P(0$!TL{JZ?qvOE`76~(&<_M;@Z?&-Iss=`f%~NzrOFQq=ma-6^!qx7r>K)
zzd}C3Xp4Dn*FuKw%oH=~b9=H1a=9SL6ozuSw6scxcPJaU6y4BtKoG4*T~he&)dno@
zFWZ2B(E4odw4bu0YP93&x(e46hx>7*G^^mDCD&$2KPg?U;O@6cwnH!2+H5OS<n-OA
zx}kvNn>_?;hPwOQD-A{kb9K5@ye4C1YLRT^u<n!U+5xnF&|GrM-ZnG!rc{8a3v0_-
zYpSxXl#Ej`yj8w<hy!5Oa(#7AdT{yQ=idE)ZL?pwo5k~?=ljA0uM#6=eY7qE)+Mi4
zi%%u5;L!s;uqw>Lu_?!U=01g!Vo8OQL%llVB1&qa6}X~$W=bgMx)@PX&Gc5~)z(ON
zixqo|l`$YhyQX6e<HY?H*O;tPnQB7Ke4gi{jT(EamYfRQlXUZE0WgADFB%Bj13fl>
z%BMM1M`Gt?XQY4xW9|Kr_PT5D$DFpo`-9Zq<^9N#y#()e^pbP(irXHB*xqf89IV#`
z!wp{zJ*`WHC&Sege@qa>(I)zFXpfq4<sRAMszm6`9xB>c2kPfi<+6gMk5okr6owqk
zQM38#sj|LW#L2fkmY?mZe%Saqk;xo5Vo!mWS&4&$WF*$mlOg_WMhU#C0f4IkT|<*0
zI<*3M@y7?gNFn%OOYm>3uKs(oDewOQPfyM2m*Hap6ah1n5myrfGB`As;idv9f2CP%
zZ`(!^{_bC)k0e?#d=<%$iR0wlb7GxefF9C9peR}*DvGK}#r6IAn`dU0qGZZ(?_j`M
z?##~4&il@~qvgmQeLnN(zdQ0qvFjw0$tX@-CyGXSb@u0(;{|RUF}ycqkXfY@?=CBE
z^szqs7yTK~SSgP8BtP7pz5A4;e<ROz(lm)jcMqc=4jtc5&AxYw(KqYMwLSK%kM~y>
z_SpAa>mz@k-+#IIiou;71=f2zO02uf>#z3jcfXun-1T@eCy6JH>&4jj+wbmZL9ky&
zt`nrm=!r3_Q5XeI6b3Y2k8X)|S7pL{25z5ELo^JXaN-G{&C2$y8Z7PBe+zpY#uIB^
z$ZxiO!hA*u&lof^otp(48Z_mic(lFLDs*u}lcj;?N~xuBHeVM?Ap=bDAMJ5MTVq8B
zCaBO<lC9bC(e~YLr*b2|>#{0aGdcZqp-{s^OZ<&vYm==ZWfINUqvMAYIet}CHNk1K
zXFClor^88|(2oV@lkNGIe{lF$NvE*K5h-+=JvJbXalX!)ru@xyeF!IO%bIwL+_cBV
zqaDi`7WB2lAjf%uv@KW&5BpORzg1=g$eR`T%9x2(^nq#C&&o&~d#?mgHoA_t-PXK8
zYY=Ng3@B|qB$tihvYLZC-;b>NL4KJ%hOt61m2DOngjQZx+cin4e|<h&gRNJEj-lVV
z$P@ZxnIF3pu@jK#`=PKCIi3?cSQ6ReG@3vsw7(6Nm{YN4e3Iu4^i}WLg6&8T=f_Uq
zsX{MdTpLo!gapo(NQcc?JR}<C=FoA>`s9>B_;F}4xgDDuKASDLGkReTVIa2HIWXqM
z3ZnQ9P+9A;rxmH1e@4OHc9vrHjV=S-EdQebzdDr(hJ5Ue5l+Ei!rUwjmt+t-V@DkZ
zc+6||x<$#G4q1gdq8}6Tu4(HEWB1sHF|{ZkV9y#GHm%G)utrEsy0B@5wa()gGJge9
zzHIct_5#_VTr3NL|K>*StsSTXlr396O?m<rS$fvx^m_<|e|MyCYszw-2;>Ix>XhZN
zOqsD9V(vw-rE?&M$QVEnSw+?wCo$p=+=PYAqFC3=VT0+|S`^U8rtCW*1K=X~-K$mb
zOAdQ-@Oh`OQX?<nnAq8QB9`%2qZ$;tt1f<*Ih-Do?64TD>*ap-IA%VuSriicji(;l
z#NA48{7KS}e}fQ%#6bYM7zKlHVXvfY*4ncml$v1tNo+04?>327m(Fd983t?9_XV2h
z9j+e*aUg$^T4i?_39ngh813gUHp1@gd({hSCQRk^M%{O*D#tnC`~xy+phZ8>_!mr6
z%widS5Dzh?5*`N>TP|!rptvv**&{zCECQm`mQ^96e@wR6lF=9~>8^<Wzz|vG1s|y+
zw-BW7r6hO$XpIti6<qc(e6^wyLD;h1nnP&^NXV^Ob6`G1?&l#XJ*~=|@>QrDheRUh
z)C55<cl)ve4A$~1_FV|J$tnOyLg08TnT2Q7&%1D^ya6;|t3MMYVU2_Olcd`}l!28A
z5xeE8e>bJ9tl_Ra%Vza3bY9x8?s7q9!mpPG5-;lIu?c%rk*H9`QZif11}rizgYi}!
zRuX+xEF5tFGNjOA)tMrPiFRJ!(HZo5Y_A)r+?8Kw1HToY0!rjrRR=S4V3h+Qba&vi
zCSLiI!vl+JjGJwdYk5UD(Tl)G%a9VdjF$TOe{rdW^v&lp+6{!Z+gbTAt7tSkSU+oZ
zoz%^vZ!o~fBMC-HptXYR!G;3k!-wjb`Ps_>U&by1pUOC{2RYJF@Dliz1uT&s2X2Op
zMJhL>BX$7_3aotOXdmgdC$*3)pZ$Z7I+yUgBgOV2Ab=XrmirWjcy^GTfCjN@l{Us^
ze;x)&=pIz76rH-8f~0Z7^Y=27frOJzi6Fg249SPf@&T&{Ck+%sUK&I(*U{{c+b&XJ
zN}&xG%#bkUU@coPT-BUb70YoPsmny&WbdTzMAV)3)E)Fn?ZPBr!l-I<PXUUSL7Fca
zA?w4BDnhByloO*j;2H0Hn_S4z6Un6+e=;V;uX!QAFH@G@p0L1_ax~1?Io8ke)x`#U
zyeAOfS3k-(S5`#&`bK_xRF<6cbZ(_A>>UGNnpt-1*1;vswWeg_60VJ?L8&Q<Q^lvb
zLll2y)z%bRI`>qXFi);_G8FJNMYTLo8xWl@C^)kXI9e7JYS-iN@Rl3PIbT9Hf11jA
zj)j8vfa39GgU&pm+d1*#1c9F2bB>r8M?qj+)f8lz=V7}bz#@~och<a=(rYrJggTwh
z&Pf(fJ%!B6PqVA*^MB56FYtMLYq}PDmaHQlk8aWa;1TX^iX}~Pnw7|PDYw&>9Xqq>
zKmJYZyrAZK)=zJv1FJqq-(_|`f92C*;_hOIBH}8Raz%$hX7jwMf!I?pF_5;ph$SoK
zqCLbNH139n)(-JsGQ+d$>Fg8Vh%SD;{BXtcpV1xHy1u{TkDFu0VdC{xOKmN}k)=$?
zUYN4%NG0Qrk)Gay|4nZ`dDxK&U0r`3&>Ikc`Z1mN=XXR1I=i{}e0h87f8<`=#U#C9
zNYKf&`~$g7@g##2WfwrNT!mPzwq%VSvXp#7s@#~B#R7%dk3}91iu{^_<@UIT!$)|w
zlMpG*cf%ep!}9dfWS~}tc}#6wD!8e2w7Zw4y=oKby(!I=SK24(KB17M&kLE_aqZ%>
z*U0To90;)7MDMKOHe#<of07@TA;9kUoa8>ihs}?a>$+X5aqoPm)H2lbkOo!#gUI-@
z{qw5$I1U$0E_eB@_L<&d2+^P+XlgmSC=qc#5{+~%F|KvE?gVUIn;K5SRx(^|_rg}9
zg>}=rU?yDe!ZWnr2&AK)Af`-{m&aPGEq9zxiLpI>l!$*bE}nn+e|RdG5OY8MIIq1&
z^f#r=>q)?SQ;?jT4w4&V=$fp<({;HdZ0<<RG1uj6>2j@JFKW6hNlQsUl(6qH^OaM_
zHD+JS-sYfkKCV9!CrVQ}-&eG<>J~QO`{L^>@;ZDSgcE}x_ipa1@*#QB)TsP1H>eUM
zI<i>g(`IF_zN<_zf8UW2!Sx$A!iu>7>u3FHFg&`EcHKgoJBOxQ=)deDa6??Loa0Go
zAv2v%-`#(lnt;<6?8HqG<oNdqO&IA8+6Hh^seoVkve%0)D6zHgf|hN*G8ySbQAURh
zeCrmSfL-sI0MvI)24WbN${{*d_~j0nTpOC=)C)mvnoen;e|a{qE72BT0e!krHRXnF
zn}+jR>Q4U9NKkfdIJ4m4MPs!Qz>C<%`(_G#kOnkgW73G~AEsWF|LOO=(9w8lSXrNu
zp~j7dG6-Gz7IHZ_eB&5S3ny$xt||I_@{~Qx?2{m_b+4@vv9t>*v^HzS%%r`Zw-Qp=
z?z?Nawg@&$e*wP!zGTY4H^0D4<OSxE5+2{#U{U<UdHq27C@`0tY;o}PlKh`fFY#fw
z8D$J{K&NYpTs~{rUJscmbpkvLbm}p`FKJ?_N)mKkOj%PIL)%qKf1~S+IbbYS|0mP#
z)kKF>(Z1^Xe(Qsss#0FrWKs(tiD8E=72R8UdCe=ve`=Z?o;>6RUSwtH{buEw+tmzV
zTX>Z5u2CZxN0CbkBAK?jPRh#~iheR(4R8ONhjHG$AEV_$Qz7)yZ6bG&sxT{S`8Axi
z0^gv(*lM#xZ2ehi@K;`QG~tE%8UUEG(GPe-Z|FhnM1J~rp3uz`KiOU2N4=MGf8qqO
zKAiimEJypNV|l9bEZ6ts`H_o?U-9Au_ah24pmXi!?Aj%qC4rdy$uaBy1*x0lhnL}F
z0Tq|hxd9UcGBP-q!8QXaf5lnZZrivTzRy$WQUb=TC~9NxI&s>`VA`g&100|o6tYY^
zI%7+&WjB*~`tvWOEH6!(CWC`qnBwyN`$8u4=3eN%Is0{d_TqJ}JsAqE^UNF1yet%X
zntE9tiX`#IQ}2`i_I)sr{_y&bi(nAR&>zzG`Ssh2cQ_aaiSl0se@X6-FW<il{v7{)
zb}>GaKp^y_7pIZXNe5Ui&%T}sslqIw4ZR^Pxnp+X#pP0Z!{+P*{OuM8N=G8p-XIo<
zQn>HapP@H}wcou^D4lz^v~%gji4sYyV7%}~fDu~3J0!>6V8<URMTMu762~G=C2QsK
zDu`mgH6<z~^NTu=fBuxm2TL<pSqGrFVrg2Q+BEz-G4`9bXhvyQ1)tEqsc~g-hr4or
zYRYD6ERox4a|3G)nqa%x!Q5EL^Q&tfRD@yHuu=Qpf&@U}ds8(vuW#E5F>rFuGymP<
zM7u#-f|>>r#Ew%IyCV@L{?%*TcflW>0$}{xh$d4YHHX=%e+Idu&=(z`7IBm@;25PK
zo|QjBysII9Oi>G)VuC-d-B24dZF#t1;c+;ztER=tVzMBCS^}Q(5(^t4m-Jnc4p1pM
z*{3Ki#_dg2-tgYCp-n|qw>-htpfi;r5<EXOZOOBfiq&{RaWiM)rIj}h{bhlGL{DkI
z?7%H!Rly6Je`ao2?`xj8MdE0GUUnvdF=_A>k1vP(%bqlY!(anbm&T#m-<usnBYPAy
zSxnILh)`>Huzis}DVXS1^)VB_jo2^xTClkURn>`!yO7GB|3T#Jd@SCJB^a#MLFPB5
zY1^u%-O4X}I?EWV5U`YK|20b94?RFwl3SHG<d-K1f0jEK7dO@tuvoAz`=@Hl7)g~f
zZ{&3_ISC*b?(Pqx&_xS6A?l_f8dGLYT06nE{*kf^{nnYL=G|mL*iqC|9<bFnTau$T
zc6P>u7}z-guuwXq7YNLm;d2;9=%(bXG}BmO-^e`*hFKxZ9r09^1>+#(F8}O8?Sw{}
zSujvCfA+7(mw(_0(hHdS0`UZYzYA1IOy@qvP_f|Ya#4UcAd|>^!HEr#X3c^`X#yoV
zWLjQu0^{kPf8o-Bf6;E#`?lrn&Iq^w=@^r0&O)y?Hr?R170LM*MQwXZT2fHW*>Ymj
zso@+sz&IeGqa4kbxg2k%lt2$FHXy51B+}NUfAat`Qd6To=G%48W<(IHvnzs!RSx(|
zp}GMtLMh9q6njU!PXnm9{&fJkf^sr&_&H2M4hxjp6u{@=j{PQ)yv1sbk+ANr=e7WU
zBuv~xwdCsR3-Is19ex=>891OE<=}+Pl59`j4X1873*vb=`|5lQi_nF9`FQc>ax^CI
zfBDF{peRWd4aW+a1mz9m<G5_NcC}_><GhQHq*tNPVEuZ~?z21S(0jEmI;qX~VB%Fj
zw$Qi9b5V`@VfEo26#x7!Y#idjQ|iNAef7z_D<p^?bTFM332As?b@`EZpyQStWQb4}
z-&dw{?5$0RiOppRgwDcjoJv`psqIVpf9eEZ)FMg~@bE}PdcR?inda1qgJRJ(JmP%!
zl|rUszie?O@9c=XxVGCM!K&P~M7XodYxvPsCtG1=Md@;`1;*4x1Z;93&R}fIAbr~;
z%Grz5zH9P$2X-FT5RR(D-*PoNMeIawY0GBidMZu(v3VrvtFCK-Zn7!2OLk!@f0xj|
zckLtA5xecMd+4_Uu-x+?Y6av@&jiEWoZgESJYp>Ta@%frM5upvOxoF1cZwo+&9fzQ
zRUC%&iJC%g*K1l?j&^0rF66#J-8SrlqoddcI(LDN{U6D_iI5_r44wr8xK@DiQ%dH}
z53TY;|3fo!3`dzzGPjos+*fa?f05vJ8obyhu9_Lx&)M$$K{Kr+NHn)pZRtXiFv$GE
z)%Zn&74^2|{oM4UkK>n3gg9JT{o6jP`iIm7TKompq1`LyI}zs;NR|V4CBQNDkj2XE
z&?)R@uDM_yd$C4mjXk}wtSn4HH<%sD=@6h0Ee%O&xB=X_j)`h^){AlYf7tI`@K~Oo
zyd!Xhj#As16fR;3<L-gOv<)&3-BRdQffFEP#l4l8@>#MJ4knAH{EK&WE&r*2U%8+x
zolEc3iq4F@ka?FAx<bH|3yqd8AZEH<5Wu=cW&L8;tj*T#@fGhY;hC+CWvdse;|iR&
z?_c}veM0`XS}iJLVP}oyf9a^us_0FGzb|0kUN&Fumo=FS4bG2sLPd(z@fpq^*V%~s
z$L+BSoG8Zi(=S<)d>_Q!Tl4#=Kn+%Y@prXkg*y@izBR7=QN6!;$*l>=m?WpkW%rZ2
z!gjA~66vx$srcHqxnpV=uTAZ=y|T?XX1k89`z6kPPOo&+BiG_Ee{3z4=wGG6vsJxv
zK2JUPlLUOVu%3*G&-(wABDSzRaD}GQQaVMumjt|17WS6tIwEdAYOX<t%~8Kv{it;I
z)ou4i7D*{`Piif~IKJ<ROlDG~S=v33Jv)TfP%`sK<oaF^*q#WTNcU1FvIMPwKX3LB
zBO&2f4-pq)Es{8Le-LZq&3dnWC!RUs!Ybli0ZdMCWdBjKr7Fff&ap~U5GH<3SyGTi
z=|fp0@TOJ%2w}7mD12X*A(ct#_nuo;&R-7hgL^`%T!|>lenQG4#{q;?Cr@;o6uX;;
z*+_B=apLtB8b%?3ip(Msjr0?8Bn>zbX5Y8=b1;ws15l;*e;D`xIlEs&nV$#Q>g@Aa
zzK+ZT08&2HJPAmd%Llkfg;MGV?31J*n)ToO`xbc?n$9GBn(v)SFi2MJ(uH~36`N7X
zkIJ;RaOpU_$4rlA_Q+0vkmb=6?W7WsO8KC-sO$&Kq%@epzUM;0#NOrm#(ECI&Q^WG
zd{e@kTd}C7fA<*Ru?!sP9{^$*J*kBLUm*4h#=b^#4K4-6FN}o#*{*qaIj~)9{A|5d
z2W>mnrmg60rt5SZ#-7FPKj~B^l1M-1pMtKULPAwh())j31aX<!t9_JV2g%RU;Cb5#
zWq^t<SV~DBZ(E_%gNW{3l5hF%{&RK6@BaYlNYR-Jm*Qgq6O&OZ6#_Ukmr<SrD}UW@
z(?}41?_c3ZTi|6syleX&kV;dIp02cMQ{9~aRVHy;i=+;50z%@CznPtNVyAA}(7?SM
zNcDPlc6N4t^R*85u08Jkz9-->_k<U7mKfv331?b+!^z&~Jth>7wViJa?Nq(W5ndck
zgx4$g`tZM=3Z2AoCGyo^@5SpR^?w9sX_~~|;L1~R#H38?eFr1&oqv21gu?G#{COCJ
zQgFX#-w!U158vWo5NPG^2RiWwM<;KC4}(AU4hIdL>XXEVaS`Lb?>=yE1ap6QoT)VN
zzFN+S7iq<Gq+mSu&OvqVY_gIiGzbBWV|dEV!epWthxc08PY@!L#ET=&xPRFw1lTo8
zwWv?U0691qKGx3`0SXO?I04i|s#?S>_pTb2=|E7Jh{dr4F`B7Z5QL|JGJaVV^Fa6o
zf>z$%1xgAqKTmgfB$ODpCE|pX8UT3wkz^Xf^7e^(f%bDaO*Mo+vmi|TVu}Y_oe%~c
zhm2Ih(jUUD!+}%^uAMy5fqx{}NJS4QVwh6O$*>kuybZc!k<lP5Wn4KE@eL5~VpAzn
zW)joh^dyM=MGeH%jY26Szr4by_RohmFqMz&+&G^RRp7(;@44pv@|<XstU@U@ONk2>
z^C^&)I{?4f0P@zy>;M^LXr-SBGLKor#g0H0k{MWO?JdYQA(=1P0Dt)|R9HgZRN*KP
zsee0N%t;mA&`A3+DMsK&{y74NA$tQ3Fvgda1Kbbe)~a{F2r}em84tr~Qt^nS@kkg=
z3XI0p*t7+sF!$rQ6CG+CTRQ9pM}9w!+pB&TN0aiW=Uf9_&dzeKfmVqtNj8)kZJ{^7
zw~MWp@HMw4_`U?j&ws|n=($U_fdGsEr)*jSG%Bhglz*s>IRZG(M;j2^TH6l9K*p02
z=zl4s!}zYBHIahu(S^?2KykmE=Rv3>6{eePPA}HfHbTA;p}NViH0HC4-T@3`$%nSq
zA>(Kzrletp4`~CgoJ>F@NxBn&NG&jgt9l(aN8lGuv+OH!W`DCl@|t9;>J^TGltFDK
zsyzdU1lIs#gd$>5WazLNsylMdRML|URd0oq`3)Th$M3m{;h66^SA{)haeGa9WDZL>
zNvtMCRn^U@uxp%bOT0#p&1zdRRBXLZ1U(h>&^jVL4+0^5yQ{oj%(A<k;X1OgUPjPu
z$F%+xp5`0ny?;@Dg+WA?MoG_!PG%xK^XsJvs)|U<R%TvK%W--Ajoz%3vi#(@#>J<m
z(X5iyZ#F9HuDE`_cn!{(veZapa}YRTWF+WqAiFrd&kx>+C2j&bSce<-R%d5*#{_dR
zOCfHF$2sz|(EWQxJW7MJ>o!lH!~DzdL1;L~DxvWCy??c1%_$n3Vk4()aLP_jcZ$Ah
za4N@%YQOB18#TD2O&T!9!0w5iw%nE=qkA=u8<OLe<SwJN4ZH4np@1uqhI@A?6C~1_
zNp1tf`U4IyX5gA_odnYhzGUMu4pRTK?TK^xTe-<)K*CEq&x~l5%P}~Fz8t8ox2C=v
zsDd8Ln16R`tk1)^g7MI%Ae*^nv=x?^VmdBv9arJ>sdA_FyzELWXPB1CMSWbCVu<>&
zxJ5YP6y71Mv-v8!Ov;fP6)vD?AB-n=JQ(({FwQedJ9lJYY<!$n7#wb!KJYIZ<^-l?
z-n4s>npWHZk{D#MVq9+}&=j#>PKj_FD9{761b;Nx^5iLt>QqAl%C4ja)iu#EEU=8@
zqQawb#5-T)UB0BDWZRD@cEObN$n6z*nF8~*^x}n3B2%^Ie}c7{-i2Bz!XwWdI-hGB
z(JO6-gsHo^wRR<@FGc1AV|AWgyE1)dw?Ky1$bEWx2^ri!?p^jz&M*5HNIRsz>uTYe
zXMYcf1abQZU}qmcQh|`mK8#7+SrBRepEaQlD0EO`MB6Yw02kG2vXpgg2()o-3q}Wq
zF{E{wY>Q#6nUT@97;@0<X4QJM5&(1pu(?4;UZPnLi~?Y^&BP|V^DZdu-2va<9J&vS
z4uw0Yip{95r0;{Y1N{65eqx3G5=d{Lseir?L7l)=$83wB;Y`|cz7>LzRb~05#Msy)
z*pL!0F@w;<eIE=z#OoMj^e9jevp4&vT?jo8chL$V1l%F?lY<WGL2>08ZpxH(*mWmN
z2%AXit%EIwU=u$8)mpj4q}hVY?fO*2Tp(O@Bun#X(6$Jx6=AKm$xfrVl2}~1mVbDZ
zR|Rz|qfJJ!tufkj^PZ}6&%aQ6`c^z&^$rDI5QcO;C~uwB7geL{+RF4WIytA|{Rlj^
zTpgh_Dpwb$z5T)AuZWl0Lp$?Y8ZjZnL&36Ys%FmlL)?X~nz#{Mm&30v1Q3q8{$K;P
z9%=ZE3hp-lm$k>mU)PUsDz>+aEkAyHtAB=xnNpA(SKmG0rn&qPMsfifrXi{(VZ@~%
z7qTw<H&9N|rXT?Z5ZjB77K364)I^EMm&v;7{{rEJe3#*Q0TTo<I5;<#5kLYb4>>mq
zFHB`_XLM*FGB-CdlW|)qe_Gp)9JdjD->>M$<b}gxT}T3g0biiRK!O;yAM6OiqOThz
zvQ}8F0Ojv<inA>{+RdcLZc7V6I~-1teY#kzI#nc<T)Nm%v5G(bKgW(Ud4oD-^G52j
zx=iM-a%)IOv9{l|qh!fj_$q=QN`Z*Qdf~sBs`p^N9DQVgXqMK;e`wX#=YzQQ={j6;
zM>T1e0jcIDWnGHo0y(2)@q%ikE|EIwQo6)#BD_RWb8MJAWp->8a+UnonmUgDgi^WV
zBl0R8ACXt>*isv7&_dx0v~tJQ*!xN+l(M&KCmbDO<W9u#)hL~)<Ev58vesvvSZsY6
zEp2_6#cJz|on-O%e@K|Gu)ivCrx9?;;c9~F(b7)EpIgZ~OkBK`JI$qyD4kZ<a;4fC
zH7qH1#_F>q>P*S}8L2b#g{z4>E6m=KE=Q6(RZ~+oUO%(7u^H>$-iTlU27ADoWr(4N
z2`$%Ng@SX58Bf5JxoGRdyskL3d<muXVcuF=U+zle)>qKVf32@}g#Zx(h0NbjVpkG1
zl#ohV@B}Op48`RIV5IsSn7ka{ORR$hIdWJ}@g+nHV_g`Ah$mDS5tLhxPnU{TdpZ^d
z@0k1vFmW>P0|@BC=fISZ^?C7f)!LdU<O(}Z^}P_uRp+Y^$*r&|21Y&($81sC6BPqu
zCYV)qtBs{;f80%lVpF;Q0g(253?OMn=4(poo3i>JGV*yH2U#12jY(Mf)+^p@TJZgc
zHMNT;Pc9DM|NHga9lq(W=8MCZ*RO8pSGR9`FIDXRZ!Zqt&Tp>Y-i-5`<Nj)Wf1Rfn
z{TJ8ox@Qp`FtU)a$%{}Z_4x(ny1^va#6Z*JKY#V=e;SiMJ9-mz9lgn2gVsh`8@x7T
zZRpx)Gj`7}KKtw!;M@Echwt7Fx9$61UcCC(#o>$Vn`ypj5aaX1pATOjzI;aQi@())
z+dUKJK-ivEIb<xHCJh2*<tPCg1ahBuPo8v#@4CaEuD`$T4qtVDxVpK1`}*>7dUthm
z`SQhZf4N+amoF}_`Z^3*2AXuDqN9yG^*T>WrJ+nTS^i@O$h)8}5;As=<r?6z;PC(+
z25&V6$@U=V<@M{!@{h}YtYs|306Ewq<I<1AB#TXB)sbSd{Xkj`*s*YILEI)w3W9wO
zqYPT)9K~MsaV~M3mL>HIDbHhXF)p+9BQJG~f0p}sv2li!P%lef#;hVG;(2pT!!#|s
zzZF?f_ye*O2v%z;hfI&vT(AuTBc>T?C~hxU3y(UdP_On<bDzh4$=pln`<UZ0a-GT|
zJmWW=_d}T~bP0dHq7;e2J@^)sfC5M)gO=1=>8T7d(t^OYXq=~hKa_~_K*!Lb1t%tm
zf5>nc&}l6pMn1~|bU<Jq=hDNs!%PjUufs$N!<`4=9j&(3KmZHQ5ZFl&m4MiZm*Ak9
zcXJqD!PbtX@!Rh3!;gQ*8bVv<mREwafmd%|zI^^arE`QZXiT+`K?}DDn}rC5vPoEC
z3K0ZklQ1*3Iy~1l;S`%@w+TmBwr$i#e}cnIapMan<-pMQHsOS5oj=g?Q^fyf3s0Rv
zf@&OxJ>|wTj$s+1hadhn{L@X#MZf;ZnTOQ(KYnv_J$^UC?!YR(dfFYnpWoen7_mR3
z8#ShTbi--zIdr4OdXH|Daz`A>$~)@HJL<|i>dHIn$~)@HJL<|i?ljRz|6OC9f4SB@
zDGBnD;EyGIf{t`t@V4qnh6K=*vph`iDbo-^f)}M>Q0Y^aaWq8XA~KKrc^Iw&?(s8f
zg>kW+M!mY26w`>Drp_QUBaKVsMdxMINaI-WxnqnmFeguHR6@l1arPMFaU41}J4?6G
z>XexKsc=-#E+m4zg4hp8+!$14e@ESx7=Z9SYK=KWJ&pPk=oTw(o;osC9BzdfEW^_<
zK|JUBSnbw*NctJIAVfw_z<vd4wceAeI4h!NN>Fx>R9BbWV<(h7<9Xr|#FI&coz#2;
zqM+x4+?d{3s1ek4a8EDOG8F0iWO;}^SLzLxJ?yFL5_0yO+*wB_$hFJ_e`zz~>^a<d
zc{#tk#4oq=&7LZCZbTj&GlC@xa;jE&fP=`7)p!*OwX$MX@Cpw`Cor#WAr86BLo^<i
zNW(bHsh3^_IXTah(2f`hXrNmVwZQDWIR^pvu^ixo9;?FzPb4Vv4zq~h^AzM?qgJP7
zUZwnymKpXi=>vrCAz>vie+Ae!;Y5s?%Qj(9#<n}R30rA?Xq&LqfE4Gk@J^2Rd1orW
zm3Mlzwy{Gm*4{OAZP?n#Yon}<JCf>U+Pem=jkGq_nbSIRT4zq{%qj0mNmB}jRNNhm
zm$ktqK<WtA2eNk_Ynqm+_SA!YFmm&uw_3BzqNSghM0Sieg#B8me;jjAFjG%<siaO+
z;VsW`=`WVcpRRto-7(g9a1m+LzCfK7ZalTK1Tdy@o<5P+r$GeToMIZx3+$yg&(Fsp
z$33e^3Av>of>;nQfKUxy)#ePhnCX!gJ`!Wga(<7RL7|f$>YPCR@k^z5<r!84ZV;nn
z*lyWD!(x-}Tq`YVe-IgH1Q{8}Wzt!eipa&eSfo_;v>32cIc5Ut7L!AcM`~qfnz{AE
z43yP+8|Fe&<eIY$OEs;tnCzLx7~BJ|pjiRd=p^WmpKB5F*rHx_#3rm=Vi*uY2a_wD
z&!y6@`<pj=QfY$SYId%tLE+}G0b8v!A%5nw7XEjEw-!S+e}dKdF`WhT(_%lFi1t{`
zGHT0HSJa$f0p%p<kMGA4LaQY|ZU;{wB-05CU-2CwIOg+`X#vY$5|rEXI3rFBh}%=f
zzp1ZzskHZzj`Q6kNzS2J1xPBN<9lE7{y8ZqOS=%^2{U|9*0zrvo9H>){AIcvZeC1R
z^SuNl)t~u!f2t8X!OsybkUUVI{x9h@UCDkBQZ@=phJ(u6guOlxBW)9A_k>nA3L_^i
zq8o(;tSoNS29pNijlwCHwoSGP0|tW8{}D#4L5k-InU`N>+teh-n%6dAN=V?#W69n`
z?`Lnqzd3u8HS3bJYa$h$LnCnl{UrD1egNmUbPDq4e|jE?UMwy>FJ&Mum51EtGDWX4
zSt&)9xaavXQa|vY<Uun9zk{RT(L&{S1Kg}n<h}zTYyADbsXidAl|p*xob5qjt?j7t
zv~Y^ZBjD`>qvC^G_kpPeF&pX9Mq!X<kD;4{JrX35$Fdpi{*9q(`8RJyT{okyB@kUp
zAi9=7e{?N@=vo5NwYZ{daYfhSimk;JTW7X?x4HA5D1M2sU3y_f*aJQ10`7Jm4Wcq8
z9;R$*D5;-onM7%xcp>C>$e4F5dLl(uO7B4nq7&HRNz|X<mWTk2UtO>gVE7V`kvtX9
zVma^NL#85Qn#VEqG`d#DK2A#>kp0n^Y~1tGe+cZsOHfD9nh-+$8pa9GpFp#WSX7`{
zfb}b{Y$^C*w-^8T%p(w3=rU%>whT5VnI-p>>cVM=EHdwDwK=uacSVh~As7hQDb%0F
zYSph_B7BPYxw8bngNigBbl|Z%gd(kAx`Gz?>~=f(1nN(q+Ehc19_V1cesNnZL`Ug2
zWjSkpw9Zxo`?W}dF54Ave7b?0K>Z2w`8#Kev|ix}R%iPw&h9?Guf4;(`q~YLcjwq_
zBV=~}PF05W$wQaM9uhW?$!xSu*e@z5=WW6*uaK?6$;))QP1sLWIQ@cC{|ES$q(PVA
zV*wNbIWm`F7X=goFfo(C;wgVvOK;ma5Wf3Y=t!Xu!>1_jp+MGl`aqM|v4ifSDGb+^
zV*_^N+R3I1?2q3Wl1gMnb?c<SUN$+1qB#$KGxH587F|aydei!S*g87NY{VJ0HZ#$1
z78ypfG>uHgsMgVN8hs+C=W)VG=kh~0P6TJ9<KEksr`<Cg3}Y?HajbtcGJJP_7JnYT
zZ*_+)4hC4nBb5qj^@GC6s`a%+xnxGW1(l)usT2znNAFfV>J+U${6GGfNGm9_QKG1p
z64!nD%%Um$_C8`%+AO+vD_4=yl4>Pkyo?5*gN2Qk&j*dAo5`b}4jjp<;AEO=VIrdx
zRVnxA2<o<6YK%T5;1hp2jU^|=bTRuIFcX?g^X+02b4&86pIFD7Y~qv@>wFU@8M%e`
zMUHrGW5GyGDT@+rsRG;1rfjtNF;<#5WsBR~TUmh%SB#0t*y%5BwtoI@yFgPnFnJwR
zAq<=AfX9VXiYrfgy;1uV)^$)|)Q8dezzqlOx82Sq4lyw}xu}2pB!nWbeyshtJp`qg
zI;i!s*Et?`YpOgPfPtbZ;GPIgxe8c-Fk_^^1@&C!Db2J29d03FF+&>|5@yMEjxS@d
zjUjO2yU{ioHOiLa>rHHSqlMym0Q8D!w!y&V<7u+;ftQRV_qZs;1Y}%*VJ-h{cZUgN
zomF~wXS^}W7r}pux4Q+U^D!n9IwnL~ODscf7p0GXq4CA|uy~&jMuWG<y>3Hv_5SE8
za)K&cgh3yY!>I4_1(ZRi{@EDh@8<mfb@m_BnV_jYw9Y1&l4WV#;NaS4J{Dac-;05N
zxh>Yk5`HVLVb(%jHWVS}f*Sdt9N{f|qR()+M19KwYwdr&0=3(8{tZ1?t(PH4v%&>!
zwOf1T^XLTnhNU(Ysk1Ag4`u;^)EkFLFb5E(35R|W8YC9~$BPTB>wur378=veqE|`y
zd*#<i4F+^r6Abhj{Qml%I7tC&7AF#)_=-=k&YP_Fc}0lVgwVBK|G~4msHljFM^Tl*
zv*vJJR91gPWe_bzo^GK@gQ~1lHRDgVg9@4;3kxZw5M=dKgV^UnSYw)vS9kTgNxXv4
zj$qXp6f+!BnAdinR(7B6#mQ7wnx}xI`|_-k-n(@LC%Fs`G1ziaYJ}L=a(dADT%qOT
zZD?Ytf!>q*ks`NqH~n1-a*N7tfX(2vgPo<MH<*9u`XlBZmIEEqm$1_|yIU@UA8q#(
zSnsab5gBAKrW}(gl|Gi~cYSnpvR;pny;jrF*TT05aBw@Bmz{eGgFDAK&`h)?bW$f!
zth7L)!cyVzRa8iRAc-P#O}$BX=DywF%nW-B&Q8iB%oy6*wuv{bp)!@Fx}TyvbXbXB
zL3w}aPf(uTPkEL-gYulv^C-`V=TqM6!P_2tDeXB2UPOCU4F}R*RkXe{@iX*SRZyot
zxPuvM8|V*|^MhEh)?RkW&=_i1_DnKVf=csDGQ`73$%`bMHSnA=&wt@jd*%;5?lMun
zdn#J`iT1;xXN70pWyP7ph;KUrS_!wJCXRpOk0j?gOj2$$?Qkp)juN>~dKgb)0Y_rs
zW#rR+QGkYIxp6T_c_7Ry@c(HP1VJKP{s7+@;;<g&-!K>y@t8N#;G;jBIZ9?SRgMr9
zT=%hW<3|MR9fIbh31~!g@s#gQ`yS?E=5rx*LpNUL*W-!5bpF8CHJ)MVeE+4WA#s0$
zi`pGAUX0n&9iqQrPD~c`7vS{<^uc}g25(=0)x<;fA?9#<`f}2K7rX1r94@r^rp#97
zX2NTG?+z=UfWl`gX~3dA<O@*w$qU+}6uR=o3$jj{@|%tYS2D>pR6ATu?!LG}^Uh1S
za0-BjaSJ^dN8GpQvp;%ufBywLxl;iOm$8BY6aq3hmthwL6ahGwK>`9Pf6bX$bDKyI
zfZzQqsM;5J5atlqBSyj|D@(G09F?Rfgpf={5)Pnv^Y3@Mdypl^yGhE5MY+nFvuVER
z>Fya6VJRrW<(bO<D}pLmifo&vVA+an7(%u_`+6p;x?&mFzgNVrb{20q57w$MD9>)#
zU)$B=5_^v#FQT(^-*yC5e~}%>wuERQ=vH6WG^c%TG#5UK*AuCyii3DGlzN(~hy$#9
z@%3;Fg-9}V(UlBajDpEn`W(GE8%BFNwQpjXvZ7k>+>f6XVb1#A2#Tybw(x)>*FxXW
zWuvdN@=6Gq>I!GF(^HpK$2LIER%pL3_f3`SDQSk7W|Asak|~xof2z{TIQMmB|3y_>
zc9=Fj&60K7CIO!`%{Z7OeC!#zCjK?gKPif~$$2NdRkh@=cZ<W=OwpfC6YrWmegIgK
z=@lz}NCN*r<kR1CUsZ4g6y5BDVp?A|G`3tSuy9B*-wPOetuJQfdYx`S{9M9kF3O4u
z53Ham;+Fz@m%Nc_e^5ZZxub^rJJ#|YTIwQ$pOn>C&}WJ?v&or2TU?~ro!9dJQta)t
zHRb-F!8n>+c8lSvTyl0RYUn7qz-R2dzmsqX)i7)~=O3cjl-$HPhq798UNET4zEG{)
zaA?rFX>#~s6D)Djnj`U}QS-D(XK9^x0cMQe4v@0eB!tQkfB&D1>=qgR2VZWKzrvR_
z*4TLZ&933k1vb1G>D!Sz?t#D=lgF%x^Bh5wM&(&m%$F^Ua-EV{Qk|_ry3E%(S!!3<
zgb{0Tqrgjs<LK2Hp`A2o10E29M!spdg{d|K7HDg^kp*^zn?H(ivtA`5bcpUP8-ZJT
zICzcS%QV+<f5X;yG!pl1o>rTDZ#1awO1dI?e0Dmc2))~~+#IW-EAja$-Y{~(L<8?6
zRBN=y)<7B1N1A<+`hFlvhT2`C?r3xpmMKzNJ%UvC%yN|<dVm5A^YrxmX%e}tc7ZNz
z_;PSAlcR|9b+JJMsd-GTIf*-NMZRRUR>g+@Q?x#Hf8Wxk5>Txu*j5K9JA&>OPI+BN
zR-u)ya%?;jHOsJmhnnl5kDFisNn*;e69_5svFz?yI;%%4I%abf0&dCF_eeS`;61W-
zTk94yZtI+iuxrz-L4j?$xH|)pNemL7$!0qVBPFC`{H=OUH-L}HHx9vIyUKe*&h$Cz
z5>GPCe-nUzk$><>o%g{7Wl@PAjOY>wl~l#smoG#Nfu_!D0t8WsRs_TsyA`>|SYGXx
zq9L$tB-2_y(zF9gT#km@dnKukn6C4BS2x9ypQ{$z-Khzs!lemGF~$3enMujd_%$6D
zmM34C0j6ATauNG<_Y_C3kulWyerw8oNm|W{e}?$NZgJ>bK!?r4`Hyt@%#6UUxVP67
zmdW9|GI6ZZInI!1ymf;kq-R6m^^MsU&+mDpgDcJazQlun(;m(q?()sgfzi;ETn#h)
z`p133)~{W=r%N>3E*1xA%HA|sv9fMX6A1QJgYKUP(@8LnlJF{y29tNta)jHMF@P`0
ze_JoO{UYiWof2q)Ogc;)cox1T?n{0H!%5$5n|TRGkq5qX`8R2oJfGaI!|4&uz+Sn5
zM=!U`4o$M-rx{-e!3`I!b<~Cug3)K>atp-qeJ}MZ(X@+<-z~6tCO2`gY`7a_GF0xj
z_borbN3p0~=h?~m-b}*eCdL36A0bt_e`d%IE~j{eTM(q1G9<_S6{+Uij+`%mLg-x$
zu@;Yxl`s4%4LmMnJlwD?x^2B?CqfItxpJq&*Cql$Qn*`I)h^_i?-C5HLpO?VrK2SF
zKcSI5x-Cdqo*qD<uUbD)?oan`=xg${;b|f`yHji~FGxJ572>)~{0ZRlC@ZJES#=4y
ziuWOLr;I@GEXe1+)an+~)%l$dwe1I5OV)L5|NE?F%DTlr&uWUw^l^H0v#g4W25wt%
z=o0olMFve{5?Fz)#CAsU7LHZ6uJ%P;Id}!8`o9N!6Q7r{f&ml)IXIUAv;-BC;Uy`5
z%~@-2+DH`r&abevUu<b{Jsv+l8ry(dgIzO8Tcwr7D+DdC2BNB3?SJ1pcWgokVG9^_
z6)B8gXU?2CbMHJfX(DM-tJYw(cTLBYh^D%(V@vE_vNhGQEXj5>)ifnGlJ4YAqST2T
z+{B?$*NG+vc<tYG!Y(f`#iX*Qn2yYUqNJ;QWAAGrs}ZO`lZa$ky6T!+z~Q|1y`~bX
z*(ScQQ^ZH*XT^<o(VR%Zvi1@Fo*&k!tE-wT)eY68l)rcPO_N6O?7gI^)ODmE_~u+P
zOsbj&h4M`50ftsIeE)ZgT+*#S^F@(}hAL^)GPp{F7%J5a$u<ntu!zvfe^7{j++T1_
zCgU||rJM5RVJr%<LL7NIX!`I@ByM@BLN#$=$m^xJIpv>kigE!mUp^|jB_on050~>*
ze}nH00Bpt!MI}F`8-Dd5AjOkOfA~{;IGwM=t@#*9ZUAM8B^7(E6ysf!YP*)G>!7m^
z;t)%<^rEp}p}rSiNq2RV>hd3dqw!Zw(--67Ay@TrQplU(Yn*8_O>@5k^aEah9;LTX
zHn7YUO3+zdmO<I`KPdcm+v~Q%7gcVn)(UR=^|)DA<Yt@puX5uA*bcd7?6rD%l0_}f
z1MfvWuK^b^FNeWFQqMiT=j&}x^I_u(#sF%A75jr(;j$q|UM|o%;~_eK4t>O*Eg#XC
zlPNy!Z@{@k*M5V+4hxlqX(19k=<z}|TA61^RgP&QuVyIP7_=hp|3)ju;yeg3)N`w2
zsZ$oZ>~dp;U=4Xuie<@+apYL2Ga3({1%iOJ*~Tf6v8YO1$3#U8sv6XRUmpAI65Eg$
zPxJ9(9~kp6w?3*Waa5Oo*dVU0nznOXR0y6#enMKuWxa>@R;zr<e{<*u+Mhsaop1J0
z`OAO5g#|3B0j-0KV;Gj8#v@eJ#J&<a_)QlBI+6eU?|4_BrM#yT-pdh=4u22q2$uFH
zMGogNZn8E+sy)OL$OTc)_cC<puQ%~Htti6=UqC8OyrAL5Ue^zQD`9n8cBI$M{iNI6
zrk%DJictD+DqH>`){v(x-N|81NL-=+>u^+^Q;;Un(yrT{wr$(CZQHi>wQak58q>CI
z+nly-<ILXszc~>ZD>5=F>ZVpj)k?gNL!&%az#qf>hc1`!1B2b8wRch}95H{s^}u5q
zZ+%)pfg^&4vTOh^E6@)Y=A8cQCtT{<qu5fo?*4?aI5<()_1Mdo5z@j?nSlo8f<i1m
z&8ycdv=F614dDLGnUx>aKc;a|A?e=ejLq29!m)>i3(=UhJ6qF9FH_A>2Iz=>qObrh
zPt?vvTyQK22i<(RZXNIMFMMy}sWv*<N{k`90Q;!hA1>;5;?XgPr8hBkG2C!zV>}hs
z;fsgjzc+5h)dzsAoe@e|Re3ReqkJCKNiK;BM3v)<CO|%}Ki@F4HlU^Pxr1R<x9IK$
zx7B!sah9ooH_~mhW23$^JAFN!b!wiv%Flf3+LIUh6&(F$d}84dHq9!F+yXAmVi7IE
zj-F8hl`1HktJ*N7cYpJ)+qu4<J`LT!$52MNhn}sbAH%U)#yAlO)wdNkTpuYc!k30Q
z)Q{Qi0YLdgD;hd@*;2*qSYa(jG<jlE_V>0Mp9k>%7IplK{fk=M+~1pOUN8GCx3Vrq
zJGTj&4<V#Z25SH;^KRW(IX1!a4K<A+MV;ATV;H_=?Y-RT!mR1Z(F1r)yj<<B07Hk1
zq7Q!>oG;M*7hX{mEmi}2hHm{)-TfA|=sbNw1K{%1T$*~NPUD)-3uemW(;7lyjw`~w
zKEZBoKp_c1Y1w5J{?P}(vbDYk7=k{EAz;6quJ5q#oWqwn&en&m2f<6>Nt}EWw4I2P
z*q>R%KIx2(Y{QLc3?{gx+BU!-5C-GC3lZ#HfpKTlf&ZCU#qpnNXtyNN2}u=axFN@K
z2k86WoBmdsIlsR;)(IK~rl1df(FM;L0)cPs=rBH7jzyac&D^mXfuwA*7)a#z(z->T
zE1BVK0Bzta464aa)7QZmRX9j*fmxp+GH^navU5!HnZPpeDzmCgIX|As{9|9fM4x7r
z0)!GiV9a>5l@Gz0@an9%N)-xDHMbI>gS5(~PrSd|_`&t}<bwf3FYM@lX&Mf$|5Pi<
zlTSr{fwD4k{iijW8lbBekH=;2_flIndMQ#tmQ+Y;Sl8#@Hx2^bu$CD<jU61uZ;|7<
z6(<ld-n%n+uFkNZS^r^vK^_L&+EEilOcuo(zF?PMWN-h#H6j=EC9Bi2!)Bj{6?@5n
z+)U9W#m)bZ|Exn|8yOdWo9_Zmcd=W<D+0^MxmFs<PB5nbPuL3+PfLb9f2p{nE;0E)
z<?on<3h{7kM!dzic&mRV2h7`?B)hUaCTOnI;vL+LIP)*&?btidFpp$`JhP@0#sn7}
zGmNXu<{-YJwt5~~87~tj<1f#Hghwpx2B#&{*?|$QhGth3gs-`Qrg{O=QaMtBn`1fF
zEUj&$2}VfEHvk<cJJl&}L{76O>^_u<=en@ua}9z{gm+h^&KPnv8po6A!2qV2!@+x3
z`JsqU_;SQE{U6O636hOM6Q6X?=nT~up$4%QDknrVktVJHf2HviP~jqcb>=)Vz?e$Y
z66<izh^qiZ8m_dCz_v2!Vt|><I`qgc&`G_SYn9F)AApzBr1KQ^R5(iJa}I}Rz*8`#
z=S)58F{ozr0hOw=ao!0S%~>H&-hhQJc{Zbq+6@BiG{>H$t=!t-Ad^qh6hbmpRQ*@?
zVq3uc7=Z{_jJU1*?k-r~qo#Yr-7VH4yCG|s7$%(|>mSF*VM|(X$vV8k@f0}BSQY*}
zV^*hmS^!5Y8gs8(iykRwGOSLwDEGhcc({h4!rLyW3F~Qm7``9VMzG00(9-zUs*!eg
zR%t=xd`cWwET-I1#!|$*YP{4xSEVU3YV??AsbBdWDj)E?tTAiv-`m{>FCPH{*s%Zp
zya5DWT#k#UHJLECtP<#Vzdx_n0=~{>Qrvm^4|&U3{Kq8p@^`xZd;Ol4-5+@ICQDuz
z_$;C+G*drzc6%~9KXz{Sr}KZRzeg=!7{2!)HDk|wKX22G?10e$p#Bd#4iNm5JFylV
zy@R_4PahuWXk*&|_lMHE>+8Wy_U*qCQ3vb2ao-J}&)1_@p?pwWm&esopLzGKn6+J@
zh>sp`JwFcmy*<Hm7%%mUOWejMA|zE|{H#ejzk0EourHpP^c60i9$&q6V?UsO#uh{}
zEjSDSWjFCVKSxJ^iyvS2ht1Abzb?K@r=9K3hiL+P|Ca%R-ZfN1a|6U9Jbe=-)6uZQ
zq0Vp)iDN!5@zx#O#-Atm2L+FvEj!Hz!0YwZ-+!>c*00f<?d=|KEr%1kPCu^?y~MoY
zdCS-+2jox7;U_Gb!e)o!D~%T0Qp)K}cT1QOD~+M3-7k8;y;R9bHb?8($L4~w_35HW
zEqBTEf^~X%_t6|;-Xkwr;@)!r*~+PhSd#@AC$cf$AI?|b`K9-Hi)dswbvsfKW1*1@
zS+serFdipslB?~8+29oryVSE}?b`O~`XP1mL*jB&(W-UM7uHZne%OPdcE4L~%NB{R
z>`h|9>xw-9tcOmh1r+aIznwtI<4^GBdy|eb28KH+ei#9iam#DlA_fj3BY5Y(g4HJ<
zW{UCpuZXB%1JbYIayx;?&7Te*kB=HZf%kBYgDX4hA5MQ-fi5q%!d7Cso3H`Y%%M5K
z86Th&;i&DRR|Ymj({%(~h-zTFy(;_oFy2DLN<V*qcrSxP4O_0G7-+QQoHRrNh%u0V
zN7Ew3$~*cikk8pvZXwSYFy{h1ltLIvjGobkra*n>Y(A8n4{HJrtt!c{W4we93$_57
z>F0YAGI-4NF9jpr0Ke}O#+_L=^H86;MQ)p*!;HK&EhMjdlx4+8M;I?{3t(SKg{1)#
z^<h3hbK@4pbT10X4lg7DGrc39DBMUozxWU&%cl>LQ-{Wd;ReDlt=Ky34s0j31?#HS
z?*Hv7nFfQTucXU#(_YdKvUP^>Cep<uSs7-!aZ(FoJI65+-~j&{>#BIrdjWRZP(JW~
zb6g==oUMt{>I%&?_rhg=Ara4&LQf)<0LMZ$mT+};sW^YJqRSn_4;covwa+uKxG}0p
z-mW=E%iMzKkBF!>=C}oIZcpH>4Z%@m(3$j#U0-m^q8O*I%PMB!d@CV(v}5V@g{+eJ
z2%#8(h!?PdOxiH1fZ95xGA;+~`lKpC=19KX4DT|(-n1c$d-`A?16OVlfW}S_0mLOP
z)k+nRQ%_W^c3Uz578V97FM73%%R=CqTj$~St=Og!f@s(bpl0PU<bE?i^vs{MeRE>v
zQrM0*e`qX!`O-+^bhc55CJ@fOGdt#u#g3s6HU*Xvxke%AvCO5k<>>SVEx=2w^y#Ap
zxB*Snh5J$!VHU}U+O%u(2<zkE0bp9WjTw%xrD1pJbyB&{?Zxb+=D1JAv`tbwf*#58
zu|*t9PIJB6Wa6>c^@MB`rQxA``me%R>s}aYxcaJ-E9tFr`d6`w6;oDJmj{o;JA+on
zqHRm8JR8wO_h@(X(vQSS+fiK3pa8(UR5Tch7&V%bd8+bD*o;t>?M(N?04;EISuRNs
z$mS}4Eqyp`pyNgyVA=dKISu0pqmhA$vnAV}CUJeRj^Cy#1nmEuu5QUQDmqor1}Hx^
zDXQZ7j)8TI;ltGjypTkU@i=?IC*}cs5(eikMuxB?@rv&0#0XO2AVR|Fg``=!W}0Hm
zXpikUR6$gcu{nJ0M%^*MM-dKND&y~tp}dgI9Bzplpy>*YIqb+g&eREi3?6?W<6>Ve
zV=yAH0h!ywH42M93Xab7Oo+7r9yTWawq`VcU2$Vm4^;-*lsU8c4pQJ-N)tsvVuXIO
zbZ<wYN{5Kw2QVtJLzdx+hq3LO3Y2o`W+UbH=wTjfLTIZIuk*P8a2q+Q@h;)G`g=4o
z+4ig!_iY^i`jzL&v2r90Q=y8;iLr8>%sSAt6li7NU)4g>S6$i6SL(dN#$ch}%9B|#
zRtP0mu1bs7@hq~IS7)%*xb)R1H}0qkS->Av+9&&FT1*vqwd#%{8gyZVSS`@K^msT(
zEdIZAyEp%az^Uc}K-vzjUmJ2Ht2wB&jG+W$xG-W#$1dQZTezwTmjA|0LJLrpP+jE!
zv<KhwbGt#COn{V6rZMu?HYeUR!ziBFUo-Cde+uKC0E+Ds0xInj7-}_RJU>cD=WQTP
z2A_Ls;QML@`=jydevumgXHx2Z|7U5YT7V=osWdXJf8IX_UdCB7X)p;l?XZqCoQ#Wh
z+~|KHH>njet#nhpr2o(1q91pXij#5HO*%-zO+RcS9VPp3NM6QSJ83Z~C+)C_w3LjC
zZrn;rUgqB9jG1BFORA@r-_e_I&J%tmiHulzqzI5!gVE3oeVtbxVPi*3wY((0JEg7z
zx-{$SUljwi7kR(a1mQi70V4Vv%i6Fu;#@Z3ZalG;B_xStHE9Mi!rF^KE3*0>2oM`5
zL_}|DqgR>yyF|Tw!(_HyOn_AOs_qD8NFouLcBO8S#JAFj!6S2JiNz&`@ScA<cy_Y{
zITzs1UWup=+(P+5@|&ssi!<8@(+TUwDo$H;0D*s@j1GRsMigvu3d!|bwN?CC46e_7
z{jbvn(~Y$m_0w2j`tJZBXDl5e`d_%!oiHp=yK;UO>gltK*wWsnB|yZsFN?k{ABgG*
zF+3noWYPfri=@8J@Q1Pc#x^X-7Ha$$)B}Jk$qb7Pjh0a6+dMsuil_%&C-KonJyKTM
zWof)))3p`5fsjm7=R<mQj0%qCn$|Bj<b6Nxb!tXb`LMTcdFdVxIeM3DqPRKM+|v-r
zhue-<OLh59vdfE%RKyQvvx48a2abH~ZG@Fg{lC!|P8iaHXWM=Jae|lsK`e=LZPNhx
z>g(*xSjyGV^Q9INVtD*#|Nee+Q7%CsblvME#KG2j<Mbl6F`1+)>=2{#+tu@Za#AD+
za^wx@$JNbbAU*0$CIaNp8EAm{`f1a+nhAwfCw3Rs-$Hg1VM-V)Q&4Dhz~o^P?kzEN
zEWz44;`H3ly50+BNUB<?JeP!}z~=zJM-B(xCeap!492h1?Lc;l8%e}Zap8CwbsbOx
zyvl!f9Fr9K&yeJL(am2Gok$d60y9AyjM9>pLIYjl7F0dRp(f^1qnzj~|8o6S1`aW=
zgjsU~=awHq4sUEs%g?9|q!egFCG5=*vK^_K2|b(OCAfuNNNKhCPIA9vT$Bgo)APAu
zk2mvEq@IDshqYaiLkS;bX7fC3c~^&~MpY|UjdJDpp?9z@`^%p#5aU9_u4v<FlCJ<k
zG2uWL4m}p-d8N{mw9;2%(hRu2yi%*jmfIDizY?>65P&BhhPV+vKJm{Q&`^AQttuea
z$D7D^1`AVUgKsDG#Q{C^{bQH2)u4u*h&NKQFJ~&j_w{GvA-H3uwis`_T{2fFnOg{v
zN1=8wE>s2tkYFoTemx#F@C<DOfoWDD3DMNumqb1{nzySXeMV_u%we(ric@hxcvfR0
zTt`Wl`E<H6UN@UG-`Qx7)1#v7P~AzAv}p_{V!_bhA`gJ!Cb)45S;Ybb)X6+;_rMfD
zU3}X%0)-}p32KQX9d}%`6M{>S)?F*;(T9D1&sQB_`=`)k9wiR#xfzw=MRQzI3285B
zTExXX@d#`-jL|2?O{G>Bq80kVUNyjap(Ni#JH%G|YXTt>3wlbHG-8yWd|-b3jYF3_
z<>WQ}@Up_%chMdkCGG>jD<r^j<izNX_BHAcTq-3Au#kov_^3?M^Up|}O1mFL4h_Nk
zvsu`A-P)GOV*{g83%<Thg6}jqL_z?m8W-F~;HAp9RCwRB+E{R?h+$g(f<pwW12Qt@
zPE`wO0wrZ=#8em0uQf$y*3YGC=51$xD(XblR!4kE2x2&CgmDL`CqQxw6V~xOTvih*
zP-KgldH#lB&5j&NxX#gwp&Z%iXOgeNPBd1?{P$qAfL_wlYmC!D?Xp5q6FVsc*P$m+
zz4I2+#ivsj)1#GnD-2CvC@*XD<$Zck#eDtSiP;)D9sFFcg2!67QHPM)8dF#%5ur{x
zv;K24FS2!wEkLcY#;UB=5=S)lG_+ZWga+v570b=+2|ntcTUgvsPY<#Y`NB;J<9?%g
ztdw2E9uY?Uva2(VicC%f9$${vSrW+A__uanupWf<75T2)C5X-<En#mpbN~`FdJx2u
z6uc91)7|HhaG3&j{1Uh+7z<vI6z4jv0b2CFjijAy3!w8)5!t;`AG%P)+tg8mUP-(=
zbWq`1K7U)3p3r(85dy6G#4NIQM)~NL9wt=|AWj6rd|X=MR`{b5*?pS(sL_e2&O6_K
zDy%Ng_{ME&K3rr6xh}>6LZmYw7yoMC)<E@Hqk#rOBLNRKLu$G@8ZFDF=)Cbciq-Gi
zS!uiROLh-EkR$A)*4BHk(Zm-glMeH}c*6_18NV~^Iz@-?A({gnZrpt}Snt-KW=emQ
z_Jrnbt{+8D^11mN$z_5YNWujE`VQjW09Xz6#_B(*WE5bg<U2Ri{|rz6H<>)FZRb$b
zhW@>6&@Yidjt`fS9`7gR!PCleWv60Ql8HtfSUfLBh;up>S91;MJ;B`svrG!3+*B$t
zhU4dde#qfK+04Ldx!c4F|7q!u?KA&<gCk_gLKHK8e_6{iqQ`^y*fn1);hl2+>e+ZW
zqUQAM@VXceA-!)%a&PSVd<Wo;fwOO<g!y+GW!vgAi9<Q_k|@7h{`9r@)#ml&%F_e^
z-#Sgx(d+xp`xz9QNT&O+h5VbVqy5A9i|gH$9hc2@fd<;w`~m3X>%G*j`1Uf{h=l_t
zmf-Pt;WlJ4<V4uVh&SlGWdp^J%ulbg+yS$m&^5O2A>+iQ{Dxx`sTdH3Z{dpvwaV1E
zwSNp-(WM%%)cquT_9n<Mpy>j0Q>}hC5IJh~Io<Nt6oSu8*R6y*&f?o6pLVCKr#Ifg
zNuHvoEvhzbt&1Pf(Od}SUPCwgS!Yn&Qe|VC8*IGf=HuiKeFf-NSIYRYaXY^lwXsKe
zZn^MjOOG230Ttbg5C)LG+^^JIVwog#k9ZxQ(Kbq2Yttrs(GyI{QES;0(yIr1gY*+$
z=cChh3>6p?O3*cUW~$C{dBvf0sXh?jL=v7}dlQ|)9^R+)tiIg69Ua~F2)N%3-lFsa
z*6}7i5L%Wm3-fYq?O#VJ{R7nakRAtDEAJ7&@rob%QVS}j@BwuAnU!#23daFe$*IV9
zFr9fu+QR`hG>re4j#|6u-{jsg7@5UG-QYUeRg<=K2KqX4Qo@rM*s9~-!b)Wo;2+2D
zVv!{rK%<d)?FfTI0{wNyQLD@%*29ZzmxA?M;xzNw>K>+ZtMMT>ls*1!A2BYJ!9RYU
z{$dLF?<fi~<bdbjrU^bTTs>}gd8CWU;onWXvOW&2&wigO$rT#{SBK{=M(talzaw<U
zXy&21f#+?A@x+wPvI3(VfoLR$U((K%vQ#4rFI=N`5#E)Y;u~Q_=dz>7^cOfY``n@p
zcqSGFKvItenwl@JB>Oy!dz+S~?c**46F92ev?+u0jR6#z-FD<Mu`nH`TVAYYNtv_U
z$$Z-e<Kp7NG;rLBZz_8fB8p<3wI}1X;Q=57tQJR9jAeKgvYezZJt7tjgv-_vTS5W&
zX<F1bgp@aOQhzGZu>7Il71GY!Z`3CK0*I2!^-<G$#52ny7;eUHCGQ?JN`R8Rx^hS(
zq|s(6wE%b1K@hd>NA|{mYlxbMd-CttoTKEZP7ee9VeRifpxcr{NH0vsRwpE%KOg0d
zY|-JzT~(w`QRSkgzC>LbmKndbtg>j;Fv)pBs#Weh$vy1V^5#bIf{#swqUP(UM;t#?
ziZb!S$&d6IKgoN#x_?K!m_3S%%fIdU0E39uTLK24fmtXR(luhYE=pruk7`5AaFZ2g
zD{lIdO`UX=z{mq7b%)}MIzM`#<v>SakzGp96;BIS7H@~#+0My(*pv^eFhVfWB*za0
zrft&&eY8$=aJhsiD;?7BC{aUlPMBvym*!$KD1`A)Iibegsu*63XGH>dfnZ)~BizaQ
zbO5dB<AQBVE%TWXgEg$?FkrA?_(Ek|ybh4IdT35oJ@_2MX440S>{q@xt~<6yH>AUN
z@FoxPVJZH>9?EJ_IWo3|qap5B46Ql?G16fB{V-|$2qb&|gdPc+r97#)QpYYO#I|`G
ziF1!Ylw_r3$5PIx*HpEoYH;O<{z}%EmI0>Ri5J^+$rq`QKodLoX}Gu2nHSWEP}<K!
z<gM~FKI(3>G-X}64N|lK*Om&RZWFQma~m?g*G|Vlv2GbVdUdmfbMp+qxLR?pXF|Z&
zZM0AW?9es00VewHb<{do9BIXRRi|!46>?DLskOyP>S*&=(|Z=d=62TOr%NfM!+^BZ
z6wYyfB8=NQpxmbq#eOq))E-bYFqFaz1jd|G=P38Wz*0sHWJ!7xRds6<ibr%jf5kuu
zAaWKx<6`Fge3Q8e_I1Dpz2JF6H69X1_SR9c1iMfB?z?|F>|_(o@KdmerK2I-Vcwvy
z6X`cWRiH&D^UFYn+Kh!~Kb<(;B)}pSUpqS$&9GSU*F~aNxkfaaLJwACZAE{vyoB9o
zbLI)p*OGqF94mfuhl-3EUqU(9ZPrEWY;a3;B(j0FN<nv6QhV9pbGSGcO?WFhg;-ZJ
zCl2H9c&KoOxEUYjDO7D(UmdJR){m4xoe@8$D(39mvprhf7#yWhEy1s|Q$Wd5PrmZq
zAB%te!`xD@Od6xzrYply*MvW^=zmF=&afs@W2BBcxd1yJeYD5_^nXfLD8%rXdTx5m
z?o<`GcEb#woxX{UYfhd9(67F|^jloi2(=LtxE!j$o9#V;x=L6v_<%|(oX6npC+00F
z7hICZ6Wg7EJMmrN^M8<dh5#98j}J^VXN?B4^sOa{RVg3UaUx;pk0R!JHRxJ3r85Rx
zHLKa}X4>hY>^D4iIm#<Zk4#QTj5`PlHv6@3+IdQcX72mR1>NFTPOVtO0K_TJ{Y|7p
zr<>wHTy|9JyCTr`8{1#rWoCmh7sF^tlaEKV72t#yO|j#Ncq>Xb=m4A4KUZFGzJMLc
zuGn#*zJhm7Q;t`10m<w=7ep~X<1_*x<o@`Rht7JHrt@E3$n4qaYAt_4Tt1`z2;-vq
zE!C5X5m*w4ZxEW!7_C$62yf&@quQYqyA3nb^e6Jne4U%w-$lbe;LXd-UUr7&2b_kO
zF^iM`er*YjSXF{5hyw(CDb0P`>W9l)*@m}!p4$zDbf-1(;QZ3WeEk|QESxPt7fY&W
zCa{)@vkRs`sYZA=mCA(QbJ41(ER^@RDWa~`nrrP%p&xnbKUTdS6fF&=sJOmG(ao18
zK$45Ex<iPCmY19<L$EuOfcyJdqwpIcGulpq?(v%T?ExohbQmCvPi?U||4PV5>eQ}w
zhSDOo{AMdj-1vCgXxYyR+ushVt?^G*iQxOb%8#`BYSh3Uh&AH<^I7JHozAf4B0*R>
z<v_%~)c@>g4Hq5z*C_?^Tmv3FO(RM2{fj`s3BCplashD54|7^6N}oN2D^Xg9yvEZH
zsQezXB8-{6sY`lG5HLI_GYePxXb^A|Fh#m@Fz_e<jWWGW>NJ#6Llcz2`HRvtv3L63
ztA0FJh!QMXL<!K9AM<ExfNKrjXtocbKh#)DFYd^n*U;$PEpIeD9rNL0nI6C8FYH%<
zvXLMCYYrnzm#`aRAPHK>*1tL;M~Fv{DHn>fen!YxwqcRB7FS`7KDV2R$&TKM<fzem
zHI4yr*)X#yTlYo!9H7#Xh{19aO2XIK7+$!4L;FJ+5)O0dO}b3-)?4P^Qy%3!nBp9_
z(^r$u+1G@2p3k7@`m9zN6nEP;hwlU_?FY1y(9-gkJFw}mna&wPml`+k!uHFSq<7U9
zRJ^~+L(&2Sjo34<7*0?s1b>Lsd&J5_dm|Gd<_*r{uyU+M=3Aa^(&CV6-dDla@0ggF
zX>Q!)AVB@9Md#WI&pK}f*KimzLM1}oy4{lPvoJn|=KwwSnp5o}GZp7PL;_NfXqx{f
zH$WG~m`w4D;yk)<X5klyW%g}JbA>KKb~Th4!+n<35&KE=hV<ZAN6t~(JM8HI)uJ!}
zYj)(=_Bo<7Ndv8sqch;nxl^D*e|^`H-}|kQ*^lgAj$7}j5u<wgoN}9=+i;j|yi5@x
zgYd<iD`JgbqSSB^o_ATkvofYpAbJt7o8riwYbI3MU5Q<sh}<XV1%-}$OQ#B4CMeTs
zrEXI2*cWxbg{YmCh^{%mez;uejw=XQ8tCZ`0O4Z=zD0VpzT;B?XXK8U28nPv!N}ky
zM`%qyIoPY@FDYiwOO<3f>xbqYDAUqDS;lV|vznKg+k<5p5G-iY0}Y5ec04z3G~7p5
z+NYV1t_tLVHx1)<uE51B4|a9@tm6@|%D?_;9qbI>`}^U~;%Vr(jyq#x0n`W3xUfT>
zDrtPq)A*-^vv*tS?qDm&-*Y7>>41$XDd1S7_@#UxOK)E@`h~8XpkK7x9%_obfg_8&
zWW7&mKte>^L~%3!wY)7UEBLTCWpOOB&+@PrllIo(g*^3}%`R}1Pk4Y?FA$2-`I5>6
zg<TFk?Kz5(Iq+JS!I3q7PqYPq$7ucVJ7O;vg_2T!!zwmJIj+ArDtDz&@lsUDc84>{
zS&<l%eVi#Ri-2cp7R=6K-yCkchLS$JB+A<hSImd^($e~5Q0zRBc$m}8!&*{k!A&QC
z6`^|t(o&}Drp5^QxNF$u@RtSoFO>x<D0fKZvH)a0R;XRKNlUR@2DnZ@{Hgq*p5%~p
zgjTbzZ7CZmu45OPOMl$NWuw-SqG^^H`QP7=I9l(dl(o1{f8?b(j?PZ4?;$953c|nG
z+6jzLzVUxdmMa;+Ao<A^&=mZz?r`~x>UB<V{JKmi;5pYQ-Fmr|Muvscolxj4DGsqE
zvrI3r{LkTGnqdKJO#~f)`Xza<xN|eqH&xRpunBL(2qXyAito`TJ6k8=!9E;(svU%A
zfV@>1N-=92$g7@!{XgZ;PjoQQjtI<oFv%w;&^_vo8E_rjc|n&tIPUXe_eJx{T$UlL
z-7bou3iwOJb471}yA)@Pw_XMw8tzboPXXln{-JBGNAs{0w`LunU24@<?2<4c<Bn_|
zY>TNPNW^0#Sd1XewOF3b$|4SNPdSRP>85OBls0BS#=Q@JXptKCZ)X&rPh97>zQu~m
z%A5B_N*m%WHT#%N0Cu|~;In0}g4*261R8f4hd-xpn5t#LdbVk)$hF&RpyeO1;Da7^
z$MF*L)BBJxAXo^nmlxxS31!uX-bX?~Q8<Y5!GerGc$vo`mi<eSQ<or$%gm9X9#TP9
zb~TIZFMBE(_)yY#hQ#eACS13*w(SN6)Y2{EbguA9o!$kb_x=NL3h(RH?7He2vu<A7
zOqM4u=!qqRx`uN1>ZU<V=rp-6f`QmAQMr(pVELe)2YCiS1GVUkBS1CX_m%+nPi;VH
zAe{l4_Nr?KlcJYE0<)@aOm2_@>SOh15C`2O6rSo|pwJ_EBC47>=F0NGcpfl$Ca3c~
z*!XSZzmVLoS@)7_V0k<7E{u+vxF$O(sK6;AzWsvKMpV8CQAQ{*f8vIqyUmzjIhDru
zrwAO4)K$U({IYy@q1GJL_YAIH_7yQXOQw{TTLaO^!6%zZ21<{es@kO;HJ=^JP3>N;
z7b{Lz5*-y^1IsBblqaU5`H~Q`%z;fl281=ZV@u-G-zR8G;Q1O&-fG{u+HCRxR9PT)
zLB@Gj=2PCHsmE*x`9^bw(KqTLpveJ#!i^Ye21%EI)+xHwceR85MYZjpj){1$r#N0S
z6MZvcKf4XA&XOD#ZU#zbca*l7pUaQ&+iQF02aOv)&a{A-NTZ(7A*t=Lmw<|MpBc$p
zVwA7PP`u`#i~d`0I3{mDmOS0Ryt)R@I~&P!sUPbOQ{4+)dWY}7od`|f3lw(_R8{O;
zL8|wZD-Dx(MX&haM<E3$PFMW|oY8c5{C8Ku9%O(?33gN<1yDVSF!g@qcRvawE@jLX
z<3T#9(DcN@Hr{%g_~s18z>q0hNG(P#dL267zaj7P$)o<8dPt`N0YUqhd0_fq%X0NU
z>fC|&e<&h^4Gg5n&7JGK7WD}FGVVD~YjLzD9*odnS;g?8|3)(7Ml}z6OXKXNmlX48
zF#FCMJFefONOH?bawk#10VPE_no*=tIh={aaJjx-_aBjp+9O0)H@~bVx0zu}HDrz+
zH7EoI1v-~mP<?oke(-a1^hwK$0L7Avr0(J<5~G2)|44g0)HyHLn>w|nTi=6EeHU-i
z9e!E)0$q4pyM~9M8+;D~LwI_Bw>^8~{JF7Wo;@3qh7uE~M?7|ZsB=M{{hf>FtoC^q
z$4gK`v_k^J?grW+S4!q1zsUTXw@x^u#BwYt;6ac?qu#!TUqp-tw|Tk)01_$4R+#Ue
z(AO7)fppydP97ZiaN!4)(RYCGR*v+8kNz({N#>sOULodig?DCDCPe1d8@{7X8r7i%
z6?>^77zup_DB@P#-GP;<W1a75bR2~e`%E;)d+=4`m&_XbuC*^aeK{vO*L)`{{aH_l
zUP%m3XYaJ=Jdp9=2(L^HOt!o=&+egIQ^u)Dx*ihk^8lWzfIMlj-E{F-U@m~~uA(>-
zoFKXtulugpb+~Oi1PrXV@n*-ce|si2BpwK!0J;^(#v>>c-GRhdpEuvko`qJ-Dhqq6
z^Qg-f66e(BR+q-qj*;pUtycv2&Z;awY5{8DzE3x6jAY3PCt#Dnph!b0M=wrD?;1QA
zJi3@T_7kdHx)28}>@NWI$P}O-*p`?g3wyRT@D)v;J=XGu(|l5SgsfLe?QX7V=P7#)
zl?<hax>9PMSrzh}b2nhjmV2^Nkbjoa7oR4qb+zTG-BH<LOJF@!EP6@dd!GYRH_bYN
z^^JbSp!|*+XHLPwa|F3xu`#28R$E2>inB&(BBWU7EUnv%sm_0&`vP!eW!~Ng-vwy|
ztu<8g&@X6Ch&(^$hw|l^rN-w~-k7^yY@ziGk*%E~z7M0<H*KEg*w9-b&1V8u=El=a
z(cup;-d_n?m_~(fEO)FOR6Sk@15kYO4$~r!M-3cO6D&2|`JScez_8!f&PvM_#6c;8
zSmUSQgV96aS_6%GCIMJZqcHMTV%s?Nssl-vimM=al1BT9*K{o?*H>mlwA3Zf6Mt!c
z2H;RxA#{5+=Qy}DhH3FuCWd2esf6{yDg=km*(u_-9kYzbF8u_=<j&8itW$AYZb97m
zb3cWK{cDR+GUbw<Lo55uP*}{BQJ=(j&ox)z6x<xSFjPIcKMfFygDbfILsT+GD%->T
zH$T@TkN^QPUE?L;v6ICQF-mpxd4ub8M3tL43%Vx;K&=CuXSZS5Nh;P*UFs&~W}I~7
zTKNwyk$9VYn?0G8*eKwsw*ckrRd_Yb-=@@FT`lrEx=YiFMxOQv5;+XM{-uwYYbMI{
zIH*t;9j{NA#2qj&j97?d`;)k)s7hR>Mf=Q={jygBVCPmIX+}1xxGaH0DBLC`v{@%F
zT(Pb3w)f!d_OJSta<{m_=^C=ih8&Q?{nd%PcM{%ztJf+FL=RSR_bgKj8Ct>)qJlLZ
z)$$nq)?%NY&9Ep^s&RS7e_-22yEoLL!oiK`g!*0Gfd!ZUZyrAmLh9UuigG?ZGy#|s
z;0jZc;erNFXZG(1N8j&ijL!*!bW42k3m$u!D6)SJ)b!^XhzU_iSSLcmalsokN*R|T
z0D&odpyiM?D|15OBzvNL7d&|Wl(qEmDJZDX3+5x{>)x#IF-x|={E98gA>0jz4Qp`V
zyfi4yI*DL?BjrBYqs;r5sWkvJ64j+5oi`Eq0kAQGMKb!jI5uD4C;Jique<*#l{|}T
zOcvCHq@Xf-QdV#K1v6OPHe9fUHTRk6=645>o-A!D6K0#0De`c!QyIJiNT`uP6b=vu
z^R@DiS*SQQu*#c2bqR4usNXp{(G9)(=B#@!q~%i`*+(D-7(i46+uU-16PUTQ^mC&w
z2OvByWH5l$jtiefk3q5PaAY3TepOfbH(5?qF%y9_APoZ_{WctYecI#RH(Wt($-{tB
z6#EL=X^}UU3I}kZ_4b6URax~<gLvuH2An2ci+<A?4~^no)+vLGC9m67fJ)h6b~C2r
z`}4%Ymjx@680p=gXD5SN0yV|fY#wuW6;PASk_pTRms%Qm?yY9CS2{h)B2Sc|a=R|!
zt#9PL<)#IGW0n)*D0y|6qfhf1WG9WVrZPt}A~Z;lS(;p`DcS%W;zJOiuD~XcpvKVI
znvEQnZ}O+b=C9lJGfat6Fsv`qY4A<<ux~aW^Eb4R?z?!1GClODq&SH-g#9z*A)v#y
zr*E;V@x#~R6Bwhjo)x)3fsxab^+h9|%`d(R>R!tBV;+8;CIZ184>hTi!05H6C~bHB
zCO(my5{A8<DM+vZXrTR%JCW4X_fGHg8MWoA9qdIWaf6S)P0xde|Ano32mgC;c8LEw
z+0N(HkJON`jU*Z-lk7x%NZc>x+ka@<nFV|RuUgF`8VREDBcRSXoD80lFirMvsRYOX
z)Kh_qVqj&k$jT20-Vl7<e?Pk*Of1Rs=oIPI_n`mj3}pO|Mi>=f`ai9K9L|2L|4}d@
z;xk3lG6fz1>9pb0A{2t#M99V*2*}qaYao?m-u-&v8qUP8C0;MGd65h<)7#$sYl;?K
z#a*gN=S*d9Pm*p*LQtL9(sz;GC8gPWnl@aN`1g1<mi}WpIjPz5VZM6D^C5D@&*)*|
z9;({1yXM0YHX7iTz9^35SD4Bnja?O5n}tc|hU3$@UcST0nG6P6?|C8Sb|AY#Meit&
zZ&GGkwLK)E(NDLY+KTvf4&EDSZZk|*_Ox%ZRajb5XPc<kqP}5V?8fH6<kXO6uSCK}
z%wUf)>yCy(gnL;rN3OJ{-6bWx5*;Fk%29;YdN}AU+yW5w(v#DHvC^B?L0(*lwwKC{
z4TN3)15ej$#y-uIuLHmC-G6ARgu@X^SJ~=h#O>BlGw}y?rO|4!&NWyN(X82ZF@<F$
z09-Bj$rjz!pURfpHRaN(@i*)|J~IiomJ2A&z;y>c3ai^0IFI*@6<^wXadU{F)QyNN
zCLDt2R1P4^j1hb2c4f%Ye|=-nIq#F1g7rbhiFF?9cQ=v|{9H&_T`mR7(mBF(Tb_jt
z^$2lGc;Q)W>6~oK#9TC;O6|%}UDqEBjv}cRbm#>icpKV?JuO@<6lbTTCz?a!*b5Cf
zq%M;f@dV&xTMonaH^hwU$oZgGTe%qY1?*qxzH<OWW=8So7U%gP%S1!4DocW3I+7s0
zI##<8Do-1699SA8Ih}sgtKWy+d<aNINm4+KCh7~;`w&FgPB3jkYvd_)+V!{x*aPN_
zTq=0TMpzpVB@uzi2d}5m4ETC}FE8mPo$m(^Ck)%X9q-Sh@8*6#FQv0TFZ0X!`d#M-
z%P#<U{6W5+_twf@-LE&F-kyJ#nKyB4zEpIcG@rdl%EalVBQ}^k?Y9Wn8~E1i`E}}j
zT}0pL+iDot|2!TpM-v$68@%M_b#?eZH|ft_xPLvqk0&o!tnU9StXhp|i?W3x8Pn%7
zoitk}OL-MznNQTf%qntoQP(Kv5dAznhXVw72l97n(PMgd+CoauC3;~eMaomj<jU84
zg1<=ZUF64eOKp~{(jJz$tByYHuW@LMJX&;kuTa0n|B1#|hO7j&Na`7qobf+x_)!w2
zyVo=aT@C7VXFMH$1fP;I`}|V#!D~;YOccNN6y7?VHy8M;>o}n4$8k<-Yr{Fq#{=Nf
zs*dtomRVI253RN}DJR%S-Zd_EEo|?)gg}Px&iI_U9Y-j_0L4sUXLdPPz2lK3FChY&
z8K63Tm`=5Pfu$L@uZI$HKWS_RslsfIorfv!$dmem!^M=2P4hXLx#C<W-=hL+XgS*_
zi%_UOL)DhIFtsd(QD(MteEWNV02#0~{x%Y2r6816p9BsVXVm7@s^%B2P&2v9jeev?
z6<4Z|ha?ftx21FN-Z~HUYo@40DAqWdnjWSnA%d}Jb88!huKPnIhe6P%3miS8c!IwG
zqU@94+n~JNsi{*j*sQsQSuPK03;7O8CLzFP|HfD9TZwjX(-p8AY`LtaEe{xeN~%xo
z57Kp9qE4`WTI35TM@(@6BW8C)Pjm15_Xg2PEb@9g2fR;-K>64d6Kw@>hVdZr1j=1v
z4M7S;37rU9c`#WYxOYGyrX^`t`3sIn%Qe2;GoqPF$xPl}l<E+N``wWR9==vMA*741
zf0)u|*aP>w*(+9X>rvhA1^~`>wP!fDBHbnJ6%5r|wUOLoLB+fgtEDr+y3V5(<9IG`
z-PA=%9UIE{a(b;qUra-|F6axg*RQ-=<mtV49W`7C$X4KXRA{O~G;zpMoQQqF4R&(J
zexvdP0emn^lwJ81vOw0fx$E##%eh2jyAiA%u+C*T^-G}({TubZo&deyKA<9_haYrY
ze*?K%P6YUUo?kI;M(!sSVc`5YHojM;4Z1zQ&8?o6rK8KXc%M^SNy9jMzO1>x2poF$
z#w&ZjExrh{nSAaU1T@dVOuyP*pDHn~HUrPLYI?r!E3eKw?-sMK?l#fiJ9x3;YrbRV
zM;|z9=~RrRdK{(@YXJtIuNASY9P7zXn}C?_rq8osh0O-MKbEbs@WiuuXy$JnUBVP;
zP7fR}3=h2{uQb!<#?`c&b|l-Zw4?5u2}Ox<;{4d&n}{B)pYsJp{SqX&u|*bK-f90^
zPFx>z;_?>fUAVpFC1%e~x$yW(i~bjUn0Mj#o&iYAzMXOr@SPN$_&(;u=lwUjQe?sB
zy^@_rkdM<2RNYUYk!Kgb7O|VuDcVixDK$OKG^<?}jvVU`gjWvBXMD1((yz2ZR|!7b
z)M?rkOiN}Wyco*)%>P?P-F1_MG08ln4qpYvO`I;`(J<<Xx4KXKCFME=hL~rNi#GzG
zZWa|Y9?@U3Dyo(nlHje*h+s&`Pk=*2e?5P1PIbAhg^!!>ov2Tiy6=qPc}-c+);+kW
zJtaI<8_X>rI5pkLMf`~Xlc9lW*fWLx0<9NjEo(w34(&lqAE9i;Su*a@a;(r4Iy4M~
z&`e7PYw^HnJ&nFLou<3Oi6kN-<&O#w^ouX`%{sxMVR@|rBAUN9D+H!t$f;8IkjIQD
zV)?DM`4|Y4JTV5mSsnV|5!VN-X-Xu|(-iWH#Xy`!Ifp4JtRHwHBr7XlNEkFf7HaFn
zA~Do$*1ZYHXptKiv`!|yrp~8$<U}^fe8rxEk7)#3$`JvxA%cdY!yH7uo9i0TIZwm*
zsQt$asyivncD#DYrs+~WrUsZ!F_Aese$UrMX$uSLaz>Zdr`WYYyWU540!#yPRo$90
zmgZArf%svG<R3@_KnkSk3B;4yWD2vJ*47m6tF+MT>H^vvw`Um77+h&)&RmmHPLYK`
z*z9HHU{T&B;XpBm#rjOFtx63jbAyX`WFk6k#1pYRGc1EHhTO=B9tJ^li}7zw_7O$j
z9i_Y-M&6-$xZtSuw{<v{8T)!S>+P`@*sbL_`IwH7qrRv^i&>v}6xlv7li){>5`mxY
zq$(K7%`Pw+B{E(HKNB4iT65{LMg+s<w4KV3nvt=d#W)_hM(O0toB;<g?uz4L@~6=K
z-72%h<Hz7fS;oGe^za5hO^zUtWKgRv3}`!C*yV-wY@0x&#ATx9>!WsQ_)x1rO7ow;
zxV|^*RO79@npJg<Vs6IJEKO(krG{dlC`|?D<<6pLg2C1d7qZ;5psjQznrxG}ME1^4
zF+SSr6UH>h0&``vo{0qb)t=~(WYn6{kOU!sZ$hQf6-_>OaY+7#Ar%rt>UX(tv{H=@
zS3jJ6%-t2uJhCWfSy9v#PVPih+oEv0W0l5VmJpFU>>OldQN+Ohb$B_%N_*7Bf_w8D
zod%fg4D>8i5wt+*x3)1=bE!7siT4zL^VZDPeXC_8UAKiAAF?|DatXCBZ=hDRLq`ws
zv?hPgMOQ$8ZG&uEjip$+(*WGiyYZe#?K$1d@!i$m8GCK5$Gd{60>XqHsWEp3EU%#5
zJpsJ@ijddNaoY#(jzj9}u8V@@ws;#F4`@x)KY5A(K?BI|rfMxDsEx)w>dKv_=P+j0
z)95?2-w9Z5615sI6C1`D#0L2&C?2qxnHgoctm>i604L#pP~7<~Y}GHZZZ~Qh1l7Po
zAlTR0;MDZ$vX1T89U3>xA_BeGioCa8@KER_H<IZq35LnHBPDm~QPoJsR`)@XBWFu$
zsNaHTI+}pA(n3sEkm9H{(-@E{N67Dpd$pFK)c}WFft?K?!5A60VJYD$U)^x^m%7@b
z(9J${ZxFUfo?WcCkQ@OZ`&RZ+UZy2L3ggUyu&7wvG|m?DO20^-sUAX{q1wzlBUDDP
z0nx5e_<LXr>}{~>cUp(U`qk#*S2wKWe47#eLF^*^t}O516jHVfNOu;iic(Bec*^!#
zt@2RLZn6fngSFrqzZN%^s~hE-ww~h>4ygUMz12NyAY8)k%Qqhy=X8m;d&KI5*)_;w
zouQ>*>^nhZ4mA0iFbBE4n?~aO5?;A6ktO%xDTeiMX0jA%0D0YE%qEDxTtgl!R5$J2
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
ZB4bDfILN6$a&i*C%Tn_4s_Cjz{vYzAnhyW~

delta 394998
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

diff --git a/doc/PFE_S32G_A53_LNX_UserManual.pdf b/doc/PFE_S32G_A53_LNX_UserManual.pdf
index 6da650afa3868a6b7e41377ff2ebda502519dcdf..736bd2615e2450f5b33a9fea469119951d6f2312 100644
GIT binary patch
delta 157224
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
B=e+;`

delta 119484
zcmZs?Q;;r7&@8&fwr$(CZQHi_jcwbuZO<Cp_8QwWcOOLDhx5Nwbo66&bY*5$R`(+G
zaRnqYnWCsT9TPnpG}-*}=sGkL3u_}XFAy*bbFw1P5HJf@GAghvFe_uTF)%PN783^t
zAtRxKu{AU=FEoR!nZ1RpB_R_#GiNdoE@g5lC;}j<Cc4+51r;3}TBaFR_Fyn}>5wS0
zId*HPf6pcEcsUY9Qd(<MHZ1dSq6-&rcFuzl32_F5karFBHU)yDiC;bj%6`(gDg<bG
zz162hwrA^g;9IOVPjT>k@+A$TSlQjXtM@{C$12XIdiC*%&l@V<cS<W|KhFjGd#?Go
z(FN!w<}`vRG^&sH4mToQS7Ja-!VAy$W_W@3sZGW4s*UVy;QXAVz(>8i5gRxnl?k@_
z#|51tZ(NJ)i4Q(bNcd{7D@kIO<4mTAEl@dWIvs0S0t8g$#0Lq6v!;?X66xr4W9Ic)
z^Qgxg5fi175JQe+l%hSe8%AuxxuC{HR}FB&lp5SHSl5)lgx+M>&t`d<VK_X7l`j&t
z9Mx(vw$qiZ;$-n>x<L1ddyKn`o^PrWq-FSQ5RSc^m8(yQMM=o&Ua(%FR$5x1GuM3`
zp=%?E3eh{HK53x5|Gnq(#h+Wp8My^k)joK5yO+;^2_HR74`K#eqEV6;#W5>1$p!>f
zLZQ*DK%yQ!fp!Qtl6I4N3Dz*t#wkn9{F@_%<--W@{`<FDv3YQ`NRUbabGpLz^hXA8
zqv4&N{Qb{t@Spl6@gEw*Og(6S*gFfu##`ZGE%-ZaaqbBv5VoQ^MUkLysJVtT6%`Xc
zlltPzq?Y5FNjUDIv)B2zF*h&VAp!ulrijT2w!xz4(Nz7-*-zswZ*9ey7$w)G&(2!Q
z#XPd#FxBiETt3_<qB(1&VT((Z*w(zZ12p!l=Y?0#ar}Lfz=%y$u9ajWLba2HL*}%7
z>@(eiU5crb`H~m0YFzdY6k0&?(J6s%`o~pP3reNv2zbwG&UH2Wz2~aPFfqUf=S!wU
zLOYjTJa&vDgT6}2$*mvlF&mxOry;u`G0UR3_%#nQu8}Ko&QeC}dEFu3S(2y9z^f?}
z_VEMOD)ei3;+Y#%;l-Xn?IYagPyTG){(v7xl{2o(qrHJUEA2DG4l9jN)T!d4T}nyw
z))69qV1^lUrk^(-<#sz7h%+E5M1>8D3nS|IN(=g8iN$;u(Pn|^j#aL08}pr+M;3R;
zA+mcsBGbaY)t}WErF-l5Qlt*|xHt7q8O8Q3K1b#WfnPA7g0~(g&HkLwSx9I>^INTx
zHbV2MbCZ`dKifW}(H>WS2uf*cme+_FECwg$1CFWSKw%2F%Ul$BCj<bhm~1XXVhvwL
zrkm3MHBn|{A&VAnhLWUSJKq7gpvw5d)BZ;_wDs$p%Y&~!57P8{JoZ;1JKRXi<6%zL
z4yGr!qfv@zi>ub%>4-)a%sHwGqGi}^j95|VZ`d76KXfROdLZd5?AnMt=($|h!U0Go
zRC1u}xuZk=(Z8+GEIfb&tk6Q6SeA#4xbuu&)fUq-jVk0#uhq`;K2|ycVj@IYgsFIX
zgNDn)Galdh)4`$h?@Hm;KSddmJu&7c_bD|;3ZXk$u*q89ocfpyt;h_e%<sE-E>y^~
z#pTWxck=V40kTnTlAVftNAt4lY4|X;->IYsB#@^^oHc2nk0ii=l6m(|r~Rb*+~6Ln
z)K?`?7);3%6L(V~45g1zktP?m?7bU*7AIdXG>W1s)7u1_fQ>5alStUfI>jFtY+Eo1
zJSGLpfWf%?znt%&=F3INgfjQpf*dy9lq?1hquz^aTSIz^DfeFcCZ9UNc7jzaf)d75
z%MbhkICRyYneG7Amyyu%N2z`zS4>r&`3398pQLTSGq+Xs5sxRv;<Po0Kd!fC6sRoS
zoR{*FV(cXkWoI-yns0xtelgZmQ=fJBaj#<Q>A*Fbi-bAkP%qdGtvE)QoiyPqICV5u
z8jfs2);F%hG$pD<5c6AR;%xdCasyX8Z<fW1HQTk363hVzExbR!0sZRchI;0AO}u_l
zE_l2KyiB1JWLEI9VqGthmCFUUw*KWC?#Fxdi`~H;Do<12O)mfHj_Eb_25=YIT->(e
zvefl+oJP;Y*{;c{6U|-yfN;gj!(h{zmxkhd<Lz7yj4C!e*ROi+L^AH#IocFT&jZ@B
zV!&%vw7fO?isZyN8t*7v&+p2mu6yGJm$(Ykcc7LLoyg6TX#!`|1aT-Lmus^FqLylr
zJ!<1jN=ah3>5*b&Zm7u~(~}IrX(uhN9+vUSp9<N;?EZ>P{(?-i+ejp%z=(seurU5F
zoB@n#Z#i#GAo-nXOmF>71<m*zJ=vt*YU-(zZ2Y@eb|vXuASr3APToq|+W70QAhI7o
zXs--QhL8iq6nwMf*X09_G04dx>tvppkOf8_V;;mp1&0zP6)ewU#<-sW9RxK8J04&t
z{+O6TYlxd1j3g@@F%U6g8~BSz6Ef}wJp>Rlgf21*;D*?cW<DvTw=5%CmF8JQ*6uOJ
zmhNSg710lXhVugIfOUj|7?@}11O+BXqi2WjRhjlAyid~#BEFiCCdb<_pFfIkmGus2
z1mcqyPJ!KK)};m+;GBT5#3gj$zFokX<jp)hnE+{WO!LYh?6goUbqw;#DEmY1SO%y;
zq@{e?WXS+eALKaZzSg{xbzx3}!Q~V{W)y}I!VhmfW(I222FIKQS&HI?U~h3gR`vvM
z#?mW@Eg%X9k%LIE<?X~snsgPiZ^j1=z_|wHg>i3L;{xLhzyhvg+Fk<kr4&q148(%M
z5>8Hs3S)L;L8_*O$0Z2lGKVz^g9MluW)ngKd!i5`zL+pGYDu*S<*VIg|0!SnQ}(BF
zRhf5?=#OL<FQ$?=sbk<#T2K%Rg%O9>2o*F)!#=Ag;{LAIx}4KLTzQy~ipRV<V3wQ#
z5`11ZV4#D+D@diWp0o@TuJz_W@tF5%10?i45{%H*f+fX7j8vR*;BK90khp*m2)IB|
z5+GR0;8x?Oe`qoanjij7U4|F@TiM$&x2qe>NDS+90`V`ism*VlF0=0x*38yF1?J*2
z)cAB2nJO-`Y~?@c|7zTFT1!qpqt$ns>OMtM`r?qCwN$KcDl<nG=y<QCRrMybDQVIj
zaZcunUM}rG;;R+O7X-*Ed|3h2#hPZx&$dhos>#LqQ6wB6<kovRdE$SXCAImDHUiFm
zoMDtvDgeqXby2t)S{sz;%RSrtkE+o>DC5#w=B<A|A=vUsP_mcmi<_8_*-gULq~2>B
z*h(naGOH;oOWc$nJ+ZR2?5>y*KCW2|suCanw54Oei!4tNl$A}ND31bIe|l@vf@=7F
zU3cOPiocvxw-R}}sAS`-QBx%PHLi8lNNDq${<-$q&qk*aPK!v2rT526yo+&<S&i0`
zfiz>HKX-X!Sj3Y2R9icJck%t|#U$oj_S?swu=xqZ*~zCTX_Nn@*TxopBK7{IXD>~1
zYjswK)>N<6GYi-e6KMvVYWBydOl@bh-Qx~cr-k0~Q)ddeP{k=?D<3~qKD1k0k1VO>
z0QBf=kIGVAb>{cDHM98YSlu`5v=_TtDyX)noK@HQOuRB}m#Vh!k6sYTRJV}-#ZMhe
zxs_Jc<V*2ZjXZMdzv}2xdJJ{jKdogj@PO;H8|uAY&0?=}MHK-wR$TSREV(MtYXz)P
z^+s99#w6?trxT_G|4S3<a5rdWTET{!LOSgCG4sl7h24fje>J-oBeu1#E%lV1kDo*P
z2z%peoA$+&BSA@$TirvOSL$BpFJ-W`{?3Q(pFHv06X@1v7wTkZmj$Kgx-v-wm9lZa
zWfdiN9kZ@HbvZy?<#baw+IWOM16#>(cSr7zfR~l_%y{;x-{|jOg9R<Px=p}x6rT-D
zclAH*gy#k_9g`1}>GqtMVSS;d()GO6wgC<}o26NAHG`7wrar&&h3KxrWAl}7ZLj(a
zj&?oYHa?z;Jq~||uJP*Y&wOQ04zaBjCS3Kk=U~a}aCd--u8L{P6|+P2Lw%7}GyVI+
zIDume%}qvYP1xoueN0tp8e6G8%ou~8?C<`LtXCK8kC_|Rc5jdQJr*D3$rXwWg83y3
z^ZQD*lK00qy~)M>8#hj=1ID8pyFq=1VwQQ_qQZu?Q-6-Bt2AE@_usPS`|ME;_pyr$
zpMli~d}@GA;+rE=Pzjl+Vb@$ahIU+f^u;%+PE&93#-2j++|~Czkq@9*vsNSd<jQ_V
znAk}pvro_5#MlhbGrPX~BQqI#CQm&Ws`A31`!n*ckm1pi@gg@VMpxj(oJWTN3&Zmg
zm6LnBQ?us5u*53h*NeNiGfiG?+StPnxHndH`U~iGxO}CsslX~Fh>y=$kFoE5cuWT{
z;UGI)T+~YEJlgsLe0&zz*Y17mT!;^pHO}w{zGEbL2GE2%zo=tM^9A&Oa2B%S{obTa
znBxYUlap;{W(5y_fMgV!9c<j0{+X_IVt3Deaa@(vpFM(+=A9@kKq2#q0?ySIE{izC
z901X~XuS*{ck?*<Pocaj6D<Ev(3xls<^7+6#)L~K@Ba?3gbv|>+X}@`$3M=wzXCZk
zfd8HVeafnBns0_-(O?nbVv8m5m&ji54J$OwM7?TcehN6eHAY{IG8^Dn%y`Lm=^r9M
z3K^$I(7VM<UAQKs9x+0>1SJd)H^iB$>AiBK)CTh7lZ|=FBUEu9=$WhuTE;|F7?7k(
zfevIi0MkC>d&PfA02;o32hKchnak<Da^A3rz3+S%XEV0&6a&y?jG{==moKv9RJi3R
zoQNDRz~YzZv~M}UBm(#nU+m;NM!wXs$Up5n6@lQ+P&qW(us)q)U2I{IeQ-rAC^{%n
zs5M9-2AqK86n{i442MmQQJ{Mu1?fAPOqQ>W%A1I}^64iIAI;MXNu@%f$}zOiDYT&S
zF@`aaX;+4vIovoE2ay@rB!gObJMxNDNGH}mC2bEOu|!q*AOK)lcwtplg$Sq(8<Cy{
zfgaL6`*IpZ(h*L?j2l4^fd->$6NTgTR4m>xcd`Cvg{UA6n=dH-oT~L@qdvk?RmX_R
zE@~iBnq>9CCqlJt^KphLXqEZ`=g+Uc4H9gc6kY@}`TnIYi7Hdjfkih!@E{BgZs6m5
znrD(m8@~V2AptZ9?|pbSpmLim!{5MOG(HPqp=o}C)qZnBDZ76R@sDFu&>06Yqs<~A
z@7`CO&A!w+xv#U)$4}7Fy1pLsH0sXO-KKA_yo2(%edtPq<x$!Om5ka2d&kItPwNqr
z-qA6xH`?q$opSj$L1}DHP<M5|;HXm8@?A#bE#f8OM5<k-K4D>7XQ{$wtA5>{iSx@8
zKt@J|U4dbK$SX)^t{313lXsmez!oSmLz~%~y0|)<8QJ}>)Bn=#Oq{I$gMw$`{6Ea9
zHe<{Fh#fKP_8YY;C4g=CvCw0KJlj61&EA$4+SKJ>U3#@bAvV?a^CcIlQnO8&x+?Tf
zBkAH%{^LwcSjnV`aB}tF_~iaovNBZh2$xOLq=+$Pqc+8uGB8N8mvi>6>2&G4%-EtB
zyXi$;*ZROHH;%LTQoiHgOUp*DAen5yPx6jj9YlIEP_RKUluXI#NTtSQ^U8ibkWmn}
zntX*`n#ju9P;m1cO`5JPc>nO8zau3s#WI<QR0<;J?MocF3ud=GCDJVU-c)9_D78=u
zs$;M0m|-wDLyvaVG2H71HG-2oZEDRaQ7swMrqB7fL&p;pt)I^E-S4DN=)nhI@JW%|
zIP?5`Mz8U{Y=6wB2^kiDr+$x^Cy$aWa-O-%p9nI%a^=H@9n&a|Oq$a;BYGoXBT2F{
zIFbW+0(;&Fg^a8)s^4OUNb<!w!(0?=As)XBF0g=mzWJ=xe|qq2xfCN)8fnM=G}pd&
z$ZnxXZSYp5`X_vqT$r)&kenC*NrMx{Xs-YR0_kogrqK@bqK@eZSLo2Q)vkb5Zsi|&
z!`lzk?~<w9L$p6EiTPAm4jtT;H;0*aDb|=luM{I~zzCV=p7**5<2zs+7VJ>@D~<LY
zf*`Jeh<|1Q(1``%-Wj@f*5(};FN-NdlQr9&zka4fF|6!}4pBK{;}8J=$vXNNixq@f
z9(+K7jYY5&@u6yxqJGS)gbM4;d5w8;=byPSoJ@gPzi;f(u9Ar(yrALpM%`c1woD?(
zPAuI?d9q=bdk<3N*3;I$jR1}=#S{iS3eL(>nl}lvm?O{lSNi^x1|*ddd^LkCQ{%zl
zo@q#QVvTS45yACX3XcNhS{~WLo<i3?td+W!T);54J?jO>Rfb|wFZfGTO)r(>kX_*Q
zKq<ARAB+x67+<|2>#t`%XiC2p=6XiGB$G#J>?{uClEBTHmn5ZS3Myl&_R};Q7NnKa
z-HP!@-OG&3PE7Ao<;yYOn;rbUOORiQIu7+vd_#P+hWf@ocys_Eu(eL3Q*E->Rn3tY
zw32?r`Wc3qHxw$NWVE(3{QC0Dv1GOCfp~-QnpH1EWyTsPE=)q6Ch-@YS9xcDEVPe*
zlvZGkx_&ajd>tJY-SDv)Pxgq08I1$$6iz)_WOve6MB&I;UBf8~&CxfZcM+`VBMNG3
zOsqD;v!dMeW|RO$KSAwFc;qHOuI#ghul+e`4u|He;zaJNTOp9-vfH9OqR@7f9N&T^
zef}+i$4C)=6_tdmE4V`2r)IOE_8iBj)?H)&a5&R+NPO=aE>;=c^o5gY&_;4QTG3X8
zY!>EL)j17lwL8Q&5A>Ho>maP-I^xKSwb6grXA{`+{HFmo{BO>%28gYBo-euq{a=c9
zua7^hH+@au_N+qPb_Q18nve4`x&!9%L2B0#2Zb8}uV|$gPx!C@IvNm<P8PL3K(?_k
z+R)$j%^G!VeZSJ}Yw^6%4^~z=t9X8R@6<V^P{Sy1x^i^Y$8`}Sf~q$QN!LU(61E%a
z4_2|k{P5%_y!#{yr$%90VFI7Qvp~(mbJ8?^j_=n5#K$ROe}T2+8m|7QlE(Evlr(lO
zuK&a$4Zwbz9ntSq<GdCXk*cJ^h9G++Hn>RY08E*1GMILuJE%3u+Uol4mIXt3(VRm*
z_zx1p@PXrLPUgL|!==>i91Pg6jDpvH-67WJCfzWpL$%N7UwYwEv$XjiYe}7(6g^L`
zR*l`upF@JTvo_#rCQa3!#!gQ!C=s&Zq6roU7r^DH6h1ZAUUy}$!r@<y(DO1M0kqzF
z(Q624+$yLrxxIG-_FMX0TXlBMsb<y`>R}&#zeIgFpIct6f5fl&QqBnJ7mSf?F*>){
zvZ<>OvvrivE?6`zQ`B-xoYTtemn-maRD&@_%y+-N1ftSWkaWOoLb@THi@%Rh3=FN>
zp8%j)3MWi7to*$z!Q}z4NMrz;XIF422z=jR6)FL}(?gh;bpsg+>FYkl(DtJ<%ZK4U
zOwRgF9D;+A4}@`pUK?pb^rC%VKm6FB>Wl?daa4MpK+{mw9)e?w2Y9BvaiEVtl4U(I
z$w&F^*lAho%ibZB%|eSe1|>|+tt#$VBLMDq9^2O>WdP^iPl@`4Y**d>y#d*WW8j1e
zw6Nw+zC>fjn`x*=5E4n3?{Vu-T7O524lH|5*Z9CJKd@YTIDD%tVndTzW_DZs&Db7P
z5Ij%b-(g@w4ADDKtveL{;HSpra>9kg_5GEXp+dTaBpp{dc!r|UET`0N%`)2~KEONF
ze$ml3H;o<;*deYZ8cd9w)HsFi{1v!?Of)nNyB3XN(M47z5u{~qR9XlDNKZ4HYsCo*
zDl~4-_rzZI#-cqAF1P@BK_T)BUy;Qn<CI`_PPh+jcB(knB@h{Yq!B&4=Zq0&bYh!_
zZjF)x_$CiwCO8f5h$}9Vy<3g?9RPR2marTPE-<{dDS{j<0)>~g8*1#!cm53>y;hl2
z<W^H~fB{sHDV7-rtqkM>H?3iyhWc8KL*36V&cG^|M;)f#0r!|G9d%$8sUPeufS>Mt
zWo<QF$mY~^zG)<f(NWpuT(@bUG%z`JOoecL8Bw$EuNP|RsV*y)a^NvN4M4`4YSM}?
zdR9051djxTS2aHb>s4S%l)a+O8j6uku1z9pmh(J(AIOiI*W7Ub{IOcJ7K+$xe_v!N
zcZcWU2ug}h+aTDYHfb<-^&crTHm$($dPJ{woCgVk&ipjh$a1u5KWye9Scq;X=AvJ2
z=GF64MiK>z%M-d@l+*r78KAk_+`XACQWKcxIMGS8AqOg<nM9h+@z3*aCe))7HqcwS
zgsfxP(R&O=f?gGlEam$euRaawja)pRMTYD)lCjbX=e?ewgx<Lc_u)^BF$9N1-TiXP
z7#ePcjL#C7fVX*MD)2&%Q)%GsPyjA61Y<P;#ct<NM$Y`i9eL8hHDHCzIAab!^|g~U
zfwq(nSM{=M8%v|hGr3|xmd7UTktoKaSxWH*;;BfCp!AOl0pIcT6wg`bBvZqgBBx55
zY)YatownO6EyLrP*ZW@$r1bbmJ2B*SZ)v7=r~4l$hNauC8s6|t`LX2Cj-mB<=ew)A
zlA^?@+SJmw)AvJ3OhEk>n1K_&eHq2>aTJIxS@>o$pMgjt-?UZhhE6C9n4xjk^<v&M
zyM_Q=vjs7GGgahBU--jqKyyIMp|~EAr_o#o#a4uYgk27Lx_``y<slwU!K8PMgI2`n
zfr}>u4dQKjeI4zt(V#1vTcS+k!SlGD%Ju1LTH4=#v_v#4T>yC00w)>GM!Hp7o|s9S
z;=&N=cRyV7;WT-qJg0SSLp%v&(*Z~PmYJDe1IRJxWxD%gj7Gu+khW+>>130bx$`B8
zRKlnej}A;Nd-5h@&wpx}qfU_wJH|odR5y(MMh`z({bfFu=W@BR)C_YC0ZuDhq|9_2
z_4Qf>o$OHNx&YlY(S)e(<^v-_q2d<lWytf=&^f#Ev`t^oPRnCAX<|%+JZ|!X$epEi
z)$N+Iax;fXRaZ9=!d6FGEsA_!%Z^S`rboB)@eO@>WEPACRF6HE+{AAjP-LrL-PC2~
zFvi|}AdVJg1~|Iw!}P=r2RMSBGd>*1E&YKZphP&qFTjjO0)}|Cdx3IWMm(0yadrno
zXy6H0zNXH&yj#0=xqQ#K-|v<AY}l0y@BK)c0PD$ydb%{_{qA$*2z8zGcx+|yt`cZw
z`-=jfHHC-?&jV$;OTA!53t43Hw{Gv)QrZ3XEi5-oa>ZL}KGyaej8=tPN{zo>#G;}_
z6ds}!m^%A$N@xR6a^lFQPDH=ciGk*OfO#-D=0G<*hw5imR7UbB@z3sqLoTIa`TqcI
zTrB@Dv@tWX{a?1OY2~mbj{S3EAoPS1SvST)8ZOaDXGr1xZ(ysdZE=T~4mPWVw2n#%
zsgnBV^%I|k7qv7SJru}h_SJLOg)+C4B$vY?{jvGcrWTJ(EQ`F6#elOBRSK2Mi5Sdw
z8s@Cm=Ync)N5f6Yi{->VZFf4o(kHx{hru~}Tg6`M$^(!my|egf_w#aP?OzrU=$e8e
z-Y4m%z-W-~$B9Cn&{zgiOk}rVV}9^uUYoNvv!QUuVLKbNjKS<?UN|olaJKtPo(uf4
z%dHG*b%=X@yb0w-=!!Ye;f@~=#v1jSQsdby#19j78!Z}U4JwTqN-V7`ezF3+Fd_JA
zr!n-4HvlLq!6E!3=!0HHEH%_0L8v1ZO)BY&`sZ9sTGKgDahG<5X%TLlZ&7qp6hrhp
z02@k!IUiV5M%VbeyPP<^l#D(QdkeqgEipoQ)b^An-YO*0$HQ+FMC8gtq5C8*{lOdr
zLdST1sKUmH&mBis^A1xXq2Q8&{BOWPC78-!_9dXEPRdcFGgPj?V*-}h)o2G*w31$D
zF1_x~90)hJcu{<vO*^y@zi!#wrTa0)GBlMcU#qxMF{IGRXGo>Aa!U)h#2Jvf7`{PX
z?L;pS2$BX1@5<H=jTYm98*{G?)F7i`C<}XG+DeqjKYRD<u4I4b;q_NL5w-D(!6L%Z
zC<H*=P9~?5$AR-hX5`4YT0!JN<$*3M@UjCjhXBXgkeP1R-JppDt>B~F%#NELBPhce
zbgKQv%;YFeYiI$BI+36#3WPK&Xx%gdDS3qF*;JP|@Iv?j59DSbKLly(TS<rf2U{Z3
z(_a1n-C7dq<<3a$gvJ!@$z7x^fV@`EiyFXWndpmi*@JgWkV#NakIk}P6x6b(=7nHj
z?(PuVDDd#)C7S>BhqjPN-C-U%cT}xhxZFF+W=E69EZ5D4)pMWXCNKl>AyuoX4B^Wa
z75bO%arWwV9zog#*q&)WAr_TXT5dyfR9mutyn!!gtzr^($IZ(h+J(#{fwzf6u@j)0
znbF!9yWMP*lr)|IJ|mfZRf^}1gU`Q#%6U~I9X74ti}Ws$fTsnweThS@)5gu|$Qf0@
z{Z<%3lI)tAk>@24yb1CG<i#=3sM}QRPBsRrIU_w<8J5m#5R5R)=?r+A!-H?}35@=%
z)8gp;mPOsashu<#1Mo8!PKEOz906_!WNl<LL6HfgbU`c!UjxldwSEpu6JVXi?Tcb^
z{{72ePHhqn?{rf!b!)~_qppy&Dq2`%iPkF+!<6tFY$Cg~U`SJC+W^Nhln|5l1L;p}
zDNRy=11jf4IVuzxZM67@^TCSF8;1PCp!nF!w{&+yCxHdeKw$VDH*Pol%no?{5Z=JL
zy~HR`4+X`K5rEmH=(Eoq#~@O_o#UAk+e#-ro=SWL8r^#xZCUFWVX<_m-C=LWM}E1H
zH=$qB-sBb|tRH`7DW$8){XPk+PcSm@%*<(<bgHbb@Esujg{J~#SaGa4y)LrOZ^X0#
zi{g94)&@U9WJ)|>h1M#glLAB*r&+6~#}*MDQby>~3S?+36yMf4Jw{PfOjAe?ag*(R
zap`Cu$H6i-BYy+h2{^Ra)7<vk*pVk}TQIQ|LI%OYc1BR1NzaZ@Aw^_o)=2`5E#gj0
z=f5^;>Ns1MLTEU1Hc~WG<#3gZj;m*~TmmPtPRiIYd>r>td9>AgJo&9A269*tp8;sd
z0SR_IjA){kn`=_KV)%07CjWq;3NiExq$5DGEs1s)^iA5M8dDiTsULYdLX^Ut7~tmI
zk`*aY0rYS9=5tQN7;@e~)Aiwl+pUwuV~sDhGc~Q(zuk+Tr$b$q_J}vssCJXlc8M+$
zf3mQUS2j5*XT(=FZ5^CpF8Ug5+hLk6lfdx0QElaEbV&Oru7i{9f1y#BHc;)_TH=#4
zhraYs(Xbg=4uRG!tI8bWDU;r7YP~!mZ?Qxj0oE+(#1;qgnNygryNx+de>}mk;hsQz
zy1B?lauu6}5@zMlSz^hbRNpz-(fw?aqgWqEvb(8Zkpt(HgU+63hQEHs$1kg+-@8An
z!^dr5cGxgUf<8X!etky;mc1UfyD-?~WFed%kFMkE>Fo*X9d3S~Z=*k}$JaPsRk(j?
z0abV{#xpmgiqnK&R;~f!lZpno(++CcsUoWnf1pLA$R4|si3<RSjRvJ@nEsr79lggu
z;$U#Tig^+*Usc+`J{_g<N}(kj6(iXAG%xMv&v?`?D<c~5fOs3H+uJ}~{i6dZK!15c
zsK?BF!-Z8;Sf|`6qiz~r_<jjKUO$8p;NtQ~+DtEtCLHRgZ)VDd8Yk3_<kN$e-JqIC
zN01v!I)0K2P)G9k+d=Z!UqaHXHh(I-h5n<rgGBiqx`RZaUy;q|bBd)QLpf3o4N8ka
zwoz%{cDZOu+haacw2d$wiLnpsY#qM~-G_|)C*M>xrhYnXN|j;ndlyC)-5MefkdJgS
zgK!&j#3pCA=T#k(RB`cL-MAEU3AbGu59wu(aD-jglU>_<_E5nr7%<NRm6vf}FuHWs
z!ud?U@D&qV$WvKvtwcPgEKiuERSC!D=0_dL5K7=HW$^-@m&lIWeYz~e1{(_O_H$n7
z{X`dtUv+<{h}Ybk70)l6<q!m<loMWlm;VNC)z2_S4C%}F(Q__A95K_*0jEtSRdY{5
z#A}sD`B8=I1~=f>(4I~WRAI@=8yq+CO>lk6&Hn%L1!kt?eRWh2W=6vQJt%Ee)B2Af
zAo{P>uaA={*1eKrv4UNV!RK&B{;LoJ;z4K;)d`|fPNn4ee$5R|IWDIAP=rLZuyC()
zh+8?7x4ic^-8X<CVXl3^6ic%~3(BCE0K}v?al?=b5K6IHKF1V4mLlD5E->8Th*~)?
z?PT+2#>CAAuxg`;<wZ``Is%w93MU}?lQTP#`pGiW%#4q@rCd5Cl|{<SWR$C6to8;t
zti6&jY1&Eagm^`a7q$cEEjxkaCA6D``t7r+-`U?8xpQ$%8IN<tO69_o^!=8M!J80-
zX&?&u7H3ND1}pdR=3C#OBmdzK9>{EPxn$_!t2Sg#^l0#7&(2ao8w2K%HLM)v{iS1)
zPyE0Z!YMhn+>D{6$_cx<L=D`(fzG`E*XZYM<bO6ttllRshHI<5G;5M6x4`RYtIIU}
z|E%J#Ka|xedJPXb=W5c0LssdR+G6UIXwVhL;=-B?Yb4sf9{0q18}#rTznq#2qOgde
zhTKzIGbq1#6JQa_`vIclwb_;Jc6mo>sR;^(X)P~uTI<~A$-Xkv&$Zw0pB^5myn8)8
z{3qjJPFldmmC)!-P*6s&irW#-iV#3V{v0Zp3lt%Bwb3N-RY1*SY=;eO5I^U3zM`20
zT~*!isUk=fpbWHYH(dhhb~)9yj`oSUw;JvCNje(tP`OF4`2bcm7-{|rJ_<ek-Lj2e
zoY^aUBAYy}!hsg8RdM!s-gvZHda#PA)b@&5;^z8vevb^;@e(sUQZdYpOfl#z5lOhF
z19S(&+y;Kd`1@a*+36^pogk_Q>oRD#Z76-B)XAil5LtTVW#l-3N;TMmOH_DIRhfRh
zGQq^5Oqg!9`U1SQc#rdZ@j%YCe+Gc)xy>2aQyTm?d)HREHw|<vsm#$AG8CZxiZy@d
z!K*CTI@t=13RLHYub?#b4a2lu8R+2(+;W4Gqy0PVl+elf`Q)=azqK;y&#5nF(Yz0(
zE{g5wac|BPBBL8`C_zI5g2kr7EpHd7ldd3OLX!9r?gntEeWMVJVT>>1I{+nJ@P4E)
zbp#(v@#_ebs0@LtaLV4lzrK6Rg(Kn(q`rbd)(^P`eWpfr5w@7esI}v~OIBO;w>YXT
z3IbOr{6@up{@zhteh?^mU30l$@$!xWyk^4Mxm0F10^Xm?Y*pzm_vowP0#a0d53Lu~
zAG4=fz$9~+jG@p20_eAP9p^;6?D8z|$qyJ&BEA?p3f@Wnhu_QmKe_9;IQ~~7ixSYP
zspGIUf#&~OPdFc*WXYO`!*Eo-*&Vqc#_nih(J1I1sEkU6k|<g$IXWo=@R>6UBSs^W
z+d&7f>CEABIi2R(dk<sQ7Gv(}?eOa8@J%gCOd9GWj>k_^q8CdvQ_`0NLP3Z=_xqx6
zwAxOMjM8v>_#9TiU?8AJtw~RevIUfd%0RqZyWEe5DvF;{LB(XTqNTkDPW9WVKAHI3
zd%W?;&&DhXcUhW?S;PMA{nZnP$@rv78tNeSCZ3ctRUuKfDd>&65ek1g!)670G?(}s
z%4|gsZLxMerEMmjdz%*EC1*i9%JlGq`+c31rNPqS6{yJ5qJTD={S4R3iUJIwVy^^y
zmI=BH9;#QEo-XqC$)tdfYLBt~{vOS{!r86iJ!2N?CVKOULt8x+P*{3DUgE7&==nN4
z)y@h9_MQg*$Kuqw%`QD`GN?YyV9Kcu;beMbo8HoKGCT)`9RNKC;y%3WF;;C86;2HS
zV*BDIJxlsz<grSft5&|}(f~&YHlO*Y^DVvZ5dB}(8<Z1c0ZH&7hKzXo{?R<Rw8oG%
z=rr9SZ{`T_Q#u=MS18Pn!znnYZuHi=H9KR|uaIl===KvjZ_)aiwe_jPcgu~y^l$P~
zeUoN=U8S#Z#%NWdoWFxmh+(r5!wwDJ)X)BD*m%DI?K}4Fu3$61*MQefpU^A=X9$l6
zkK*<DB$6Y}nJ`yQYVs||>01r{?%iGEEc|3?DJte`;%b({T%H-~vnHZyQ_~#ACeCct
zBe=0mB6K%+#{}rozS3>sfpcP><fe+Zn%Uw}P9)R}Va(EEKRmkrElDU((2P<dj+6ez
zMd(}%1E93We<~5c<$z_t!9o2uvME}F1bvG%oq1kRo0^y@P((@_t~VePbmXLZJ0=<J
ziyRF<(v*NPj`4x0Eym3WtWfJE1?Mp=sOCc85jDh6dLJ|v_C&3xvYmA6ee@&^$E6;Q
z1kKe!$vjX*Y};@v`Z=Brf&QgsX`Ixe*9U*s=#$Z4Da*P67{I>QiU;=s37PPcUk^-7
zLsRoC__Y4o4L@3kNK4=S@&^+r%UbEcvb#bCa}rUFFkV_H_;ZD<b9gl0o84R|iNvvk
z_pZ(b*uwG#vnoyoGF191`FSb}zCTNM^4_|PGwOs?25!F_-73u=N3!mo8{Tg!<8JeF
zrFexRY&QFo2axxZQKG4LUWK{`6kHoS`I9qCUrzYBUPH<3>wz^^{YP9E>yvz+-H^NT
z3LOn(l{mm<EB%~VoDScX{UoaA1@?(KfMKk3Z<cOihj?jDkU@o$^v|!#6SfwwIKu#R
z3GRPaAhe~9@4qm;dAA1^1?iKq6OR@JYdF(^ZS|ezfLGN)pBq7;+|{KSl_59Q=w9EY
z_q!S{FJ2_g<x3UTAvXRrnf{8WnnDJwoxg~?*Q?cgNG$_*LCQ@JVb_2E1ye*aQp?Np
zl*TmIAW|X1REz1G2Hskk`@Dkw0Tt#cbDr>+kQb{ApDZPOM$_!K2O%aZCtMd_<)Db(
zV4BYB0|?(T6R!URWtbHmLG7o3BJCtP@iofd$_VGVbq6a4YBCwyL?G-yacwC;70lB8
z=;uGs(KN}*y{91?1eE}Zb?EQS`g^&gYhumuX68g3z6Xe9=dfMeE}>2^rsgnAcLwhp
zwb1ayKzL%~D!E`OqKQKdTu+c~U%R`ZC2VRe0HQ3;$GRJQ(GdH!mQ_O068HXrye2rb
z;bF``ArI@$@Ma1_GF0C5hN1gxbq#q*LJ)(@f8}t(1j3wXj;&qNUrDqAzwoF;{0<ti
z$(fOumW9cV6)-F2)F<{6M5wi7r-__q#0Wkgu0;Z4H^RBWW9)1P@8c=-%f!4Q%znXM
z0ysqw6i4Sk+tV@?-vcNCr)CO)=wAN<@v;I+W=*^WeQh&VDEm}O1P!?!DEiLFy?K_k
zrGeGwZK>8XchkQ+u#dcHn^08~a)og?o=tYbgRUH+)*&(U`fBq8EqcxOu?51i?9gt$
z8!R!eY&|`C3~jxw4MFG+U}+(-No?<V0kaNgN6v2h)1kHGXGHn35yRbDkOI;#t2+8c
zHQ{S(U$i{F$Oc}*I+Or0?1Fhl)IPbC1J-r>cT40Avk0ei+H*uiaq8H2B7xBzD@9l=
zzM$U6KaT?n(=G?OBEDOQ8r^0yY~sF_bD@Qy&e`yb!L8GqF{-LHckR2=Hn3e_0AM~j
z+jkCL_t=y?9B0RbW~Ke-yF)x>2+>I5L)L^g6TE${u1PscbxPE_s7*W>r-~3<s3~sv
zBU+5mrX@=Hz}AoX`t!lq1mX7nvJOg&!noKzs2q|Gs>Y2zT;OGhTE5!qn1w}ug!$oE
zX@mYIrU>Pkan;$wBm?pF+;}QFK=4^|y{Xq1k*U6b=`}Kjnw!Uo2zhLdW9F>za$)R1
z6ywLl7@y)<zq@#S0czUw`1^{$Z^|^Y>jN^g<3>#f2TlKF;9%-3*KI(+=Qso76H>_u
z0)Ai*f`KhNo3uA)=8;g>l8!N=u%TuzXFBTNQbm&J<eIl<TE^fK+<(Jdk_7(m_a+aT
zclnQm2rAb<$#dZcONR6@3m4~8gad(--=oKl`$ZEfU%qGiiPH2o4dON+V32`G5!8kV
ztr^Kii9AfN29r1Ee#!MH6rfC8j2!<P)oV4i;<q@F{cjD3rujv+HKE0JVhPt}DfqI5
z=4{=!KwuM~fVIj@iMqs7y0$(W`u(arC(>&9fo+3CNyS$0)mAi8B9$;l-Y$khe<KgD
zk(>@0S&K3_g$zxfNAoe_E)yvcZ{x!bQ~68L^#L_{M}9u{4sX>48`4F7i0?-qfWv1t
zSiM71DO{|}?K|E*D5;|7y7n;(mtK=JIXz>0pQ*T+hgoNkWUac5sgs&er$-2)<tDx6
zfXRqp{?G-*w%Bbm8Z6kjY%==^!+<0yWBA?^a$)l3z8XN^TLZtdv<Oltyb}rQ*CU3p
z?ZM6*xKj@)`_1U=<{ii!lrO><Ak_(`4+X5sA3B`xb^U<T5f~dQ@s`K`TsoXj0<%y7
zEB|`nahhhTl-%<u>)e`&I@wMd#3f)Q7aQ<Jnty?g-tLTX7E`T;+K_q#_Xkso*0Gf{
zU5%a71o##Ae!2x0$SK@pZ(FmWVcf~G2_o$R5*FKv=o>lL+YinvnNvy<Ao8?3YWW#<
zJr>8{ce~~O2JvbsL?U43kv;YMJ<}v2Jk30}NzMSnb?N*Pw*FL`(+k9-m0ynasqJpC
zblnCKzt`ulQjWU<@ZlMLeDcCZ*3mgp3Rgr!0Wgu<M5ek<XOlUfD<ZH+=G>6NhHi6d
zNDzSt_udESgcc)*LvO$W?j2N*Rei;0RcXUt5c$F+xXgdOL|GDr;HE;7)FmvaINJ!g
z=+`3_?vsu)-(1a#jUUS_+<2yi8zcH_z6T<EGobxgoh&f}cGnAkLb@F`q!6Vl7If8`
zbd-)%fJM~8iIu=e26o$&%#!4-)~Wx*uM0wl9GR6>3L?Uw!|6l;(1BP;Bw-9(l8KQd
z!>$|I0$In3odc&D8D&lAud>(w0=q2Am72<tftm2Opt$KUl9k&YyKt({-N3h)U-B;2
zMO-Vgb<G>Cw&<8E8FQyyBU%5LzmFUbVNSCq0#<gT{9HmmzsFN2OHuX_sVGVJ5Xh9z
z?Z~bnz)-vfO^;as&_Su*HD%n0d8)F6+ET+?yHV4^gv9bcuaqMl9ZBFPb_}D9;Vm~U
zGSU}!mM6-`UInIViCh@twl@bL5BLNLpF{MNf2KU-EO_>9n^PF+3l)_D(KV<+*@4fS
zu$Nt<UXje;5yeFpUy3k~7q|*SWivZ3(_PYp$%E^RNybG1|8lw~OxMx~vaRT>EEqZu
z`Qp}+j?CWD?xIA_b>j!g6sa|j4p9t)6bWbqiuK8C%^CGr-_%=%Y0NIP`3c&YiyZSE
z^I@uj=gw+Xhs@RKIj#waRCF@0b)ZOZHPwr9GjsZ3P1C*M?~^UA)>?U{<PMT-!6!su
zsI0s7k3}~D`I1$h4nX;{(YQKN@iBw0L`F2!qp`s2`7#uy8-qBEi#N`^TeR$e66M1V
zM+0Q&U;f6hOVW=U3XD-{%MSSx4ujU6K8ENWLLGQARC|#5nv<usJ%Py~C5S;GiV&a8
zpu9UIzNkH=Bt);vh5Uk(-sEP5HG<;;qhY@-K(;r)Aj_=Ac-{pORQD|y6x6CcAh6p|
z)!7)eG!CZ<@hkkBD~-?HbHVVl&E#8=*}pR+h0epwZl_d)3L9#cA@#l6y(Xm~*83R*
z)Us5klP>1#0BVwt#+-O>a<}fwKIIO&M6ej~h&_GIXq+60j36T@j0LS%H<-<C<Rz(*
zA_fV7(dT~!{!@|dxP+x_n=;f_l|>)Ntqy_p@2PG&@@U|9S6b0A+wF6u3}1tpi_pc2
zvEBSia{-Pf@6>j^`kdZ&sj+hNYD)$VpEZw)fSzKj|AEf{&m2!j+Pt(b%to`n9qFkp
z)9Slr>ycRojr78a&@0{iij-ER&0&n!qL&>|fZxfun9D4UBQP=B1*w(K9=a)y4~dBX
zMdECKc_K&uJB<VeExTNMXMpFwZUv#Qj+Jr!-kYmNb>^PD`Usrq+tcOc;ZrT2;^&wD
zg8iR|7$=^u+8FomKPb5VT7lgjO`-oJi)jN~K6^qhJ85<9;7NngitL7keyNAF{gx`=
zlfk)T6>K%;S$wUKUImpZq8Ct_bdXO_PY`<~OVfng*h><}6Tgu&^VTu=d8Ptnk|6F^
zEOn@SM$t0Y^Pj3<s%qmjZ81J6W*&DKjx=5<>s0z;O_ZnJPi;F{iLU+CCr&dG<9N6=
zI@t0qV#iuaees^cFKc5RY>9yd2pa*~x3<{)sis?)+2a%cv(<&u@>_sJZmJ^d4Dbfy
zcLK^XNGTJJELL1yaBoE-N|TpPyORir9nI(DHX?N1hNG!(8kK#T%8ntr>c}!N70_l~
z6dSl_uAIANX$kzjJW6%dcy5TeuSPCW8g68A1-S8O-hm$Ebog7E|9WKw{vrTEU3SSF
zr1__v_;y)$_yX3qYGfhoI8OuZ)oEvzYfEf^0*6E8S{vxW9-AA3x<BsO{4c@<J7^(T
z-}Cl>o)K~rkGuw=-nfXx7Uu7XLn+DVw^L1=Jjxk^W+?%QZ)h6+;b`~6_>uuYz6voo
z_h!0>9-_DseOUS0KNy3c?$T)guL@`4WJ+iB1ExUWVEg}9+*ld^j|iX9lyku4fbG4l
zpKt87B=wI#HUyo3*ao*$BAF$!N(erp-E6tAH>?kQ+Iw{ZhH&R?z1S3j_H-}F<WN{f
zky5I&D@m$4KpyHPXCBQ>LLJUchCZUN+!*LB*Z=M<t2_6Q7g@ONh}wjn*QWk}gS*Ed
ztldfEQ*&M)P~4^q)B~&+?%pv$6hMRgOHj?`O2sj)_8K^4_;Wp4NO%dXPVsUZ)~<z;
zde{&MZmt~h4WYsERiIKWfX>=d3#s}9wLXvdWjHGeq7ZPBSzpZbcz_Jhg~6UZQ`Pq4
zb*ShcT9MT-439a*baWs3jFNZo)D_~)fo)s5tA`9Rc^hDJLIMOt&Y#<(P}J#ebF#_~
z#ArO0FC()A!eT_5z<Rjo8jn&o<h26vBXi^vGH#;^O0Y)6gqj`o5rhA2P|k2Zl#c^b
zaNzf7fX%1!0+Es1KENIpqm=SpfFu{mJpCwG_(luPF|2!|oGD!*J^T<fLuw^`Q!&Wy
zJlKSZa3jZ;!UoV1V#1VmPr>r45{*KxHn<|ncQJ$-ht$E3LHcoGlE6AKW`s{w@L4%U
z?l)-{Ahjm7d?*jpwg{6AmEHxTv32ys%gW7T!mpN0!`uH?J~jQ()}W9pGlB<e&<tHw
znFt4yTi-#EWHw7`UtZLg9{UAqmYy7&H*VCI4mPrPwgJBvJEwCiPnJFp?tTwdg!ogJ
z7vmQfPj70uJk=K)AD-#@E6mQ}vUhj9;J_touoCVJGxJCt;Z_a|a^Y4VMxVafWfT|P
zOU)eRZ*M#9$vS1zd*u)a>TliMY<ey#2>VHV{G4lCkSrehZO6@6ua=_0#1qh)Otg#O
zO6qg?e1O-&Xm#9Q|0kn%{z>;=;fUiXPbU*leH}H!<qmb2spp?-!l}{kes)ioo)8KA
zA&zySR|knvW7rZZYAwW`RMx2moU4vw9EJVIRly%xIR^coEZ<h75WHD)MNgNPpYKbT
zs~`8~Y_C^8k*52LYQH_>^;7tOrD%iQuLE)JJHUm(PaJ<g59bCxK^;>dD<1EL!qVe^
zo&#?`t>ob1z18XqrZH^?_wqiN_cQ*-rR$B!`w!RMhf@iG`n^6L@0RZj^IBI+^665U
znPwGS+}wbn*C8x_qp@{W5tbih8?&*jHrjR1x>021@OSa~gO-<mMQ2^L#hWVA{?H`8
zGQe@WlEodGn|N<Acktmq-I3j63m8o>fv9*ybRWQr97~AVC?7Z-S_=^+&O^dzjhIow
zR)kjc2M0!6X0$dL3v|6rV=JmH*GhG|Zo~K3fVQ)c6AFllHziMyp>>4>DXT!rRi=_d
zSi>FUo|cH_TQAremPE>SuuXV_aa5*F4&cDHeFl4}kH9M|&*Lj&sZX81(A#Y9p?Ea+
zA(8-4^nQ%|66V_!Ay!DCC%nGeh!68_iZpe1OxY&cX1-=JCsK?y)s&!|7O_HO9W5uH
zNdDK7i3IoREOg7~bj?k?iDp*P8^_{l=?r65lI|u3qmhH_2zZr)1DD1`vn}Sx3;;P5
z<oXwN2stj~had}am32$`j@D3#)qIgqohlx=xlnzE3C*#nM!P;dkB75C^;hKd`B!WH
zzX3x=J!<cWyTsg?=YkKEPx2Xqk&^%YVwAy19z$GV3gwFN2%5!MsJ9c;mSf08?|6*m
z&Z&r1geGfz0n#SA?(JT~1W;^n4}ep24ZT?d8=9wyFwOBNdV`P>b4DCCTI`0DiT3a4
zZcq>9ia6W@`Y}=L{X<1(3MK>2i*}?K631}gG*gZBi!*hIS&lJfL@fvxi8+Xu-xg)q
zb5PaDS4@rh0wKd+6f7ZqAzYb+bj*A7Xt@!_mj%t9ccd}OF`YyYTFh~@PbioE44EIG
z<eS-Kr$iLs|Mrd#(osP;m|6aBht$qtiyiSN&w!{y&;|iXMEUkwy+tO6Rd35I7NTYX
zS|pKDr$S#>YIf@7%mY<wQu&zmX7No#@}H-#=j+{#WDOl_P43k<_ZAOl8*QxNu~%L3
z4Drn1M62D56H^dEvtl>qT$*i>O3=6w)54CEFB{QnhTKF4;;<0>^_2r4=0cR>2+Vc0
zN9k?8>W~*jxodgQ@PqRd7>KpQ{3^EEShz=<BHK5wcPD%H1(I+CdqFmvc+MIT>|%F~
zPZah_vvokc`KP38GB9{4#ZuyZm*CDu;9r;o(hKX3Xqu5@XY`yV%)yop9Lcat>!mjH
zitLnNnw22W!mJQPTAB@jmCDmQy1tFt@FBrMB^xIdlf9|(G=rSkj<^P!)a%ZyXbUr5
zqXsdSvsx4B9SCLTpL?k2WdoZ0ni-jPx-#vf3VKu-ftrU~pb#6d;h$)E$bwXVuxH!;
zpDF~uzPRdAMYbyYQ<6?WDk2QpD2JC5W!ToBQR3L6MBKLojjK+8r9ZD1z?(XYNajmt
zfp!h)+$aa$3@%iAVptqwa)<8B3R?pWCNba^$y7()BZ)q6OiK|h@?4Vg*0_`*zGQiE
zZYX4OMo8znZ8~_pKE<oERHoDF6k?IL8rK%j0%n)Q#GvXW`&kD<6S;_vD#1djM-#)}
zPr4&TEFszlXYv7{c$4J=y8OJd1~;#U=9SbSyg5QN!E|0ASH!$wAV#Zme$RZac}n~&
zQ!pcx`KIxAS<CrTi#1*|;VraDxz#kdCiX#C^YCfrV5gSm292MSzoNezz9~0v3gNrv
z^4_g7X8@>DozXN?)H@q!h}b06c$2K%lnN>y&vcOM_Duwk1u>hIe_ly&?vFX-J{1?a
z+s~hJIT5c*fPcFCppG%}&r;JaPR(mB%ff-bQpFjq`a95r1)Y`GmSWUQBO_*kFW^lH
z=9zT1&-G6){gm5Z?w%^LQZ7MV{4<xak0?bq6)Nl}cjXUUg}-e{gfTGds`}f|({16n
z%{2EG8;-C5&x`PHmFg=Ru3PVkHX|f!!uSc!&(ElQdV!0Ef?-u&|FVjQt9QOtnPJY`
z^;+FV!ni{oh$6He-D<~$2aQn0e!dR>oXUnB!=RbT0+l1Rd!&c|=#`$YKjN_%C5hq`
z{JdkmN6Hiq2P8=qnl(uj7=Kg!We3+=HF0>18rvtperAH>r^e*`^9t+u0$O;llpDHV
zGKucd4cT4cw*pSfH#Tvx>*D+(Hoq>(eH8AC@iEoP1Y<Z~@y&tGjC-QA1jZhw3R}o(
z9?VVFpuR9hAJ(qUFnV?*|2|e1W$zF8w(<I#;K-W{Aq<<*vEZq2P{Yjq;2>k@NB)Qv
zvXTwJ<m<|FQvsB?<AKBoz9NA4vLhRNB#Zl5_qeMC2a6|rU>)i!P%Z<v&xqp=s>JNy
z-_}^VyOXz0A%zYzGB5inL37bL;WjCV|BtVC4DzJgzJ$AM+qP}nwr!igsxG_BRu{T#
z+qP}n#`L{+=6&ZM_le1f%si2qAM(S=TxajS*4nNOFEQ}`AeoB2?tXPp+iVj?1fYFj
z45EN%I#zs6?l(&8;I3-3b5&XQ)u4#@`Rd`Ek>COdT7c9T{qV@R5IsNDK49e+FMf)G
z7POHd1oX1m`%&~C!B;NY=|~#%Cv%yE1vkN3eYH2}vfzp{D$Rl3o3hCcbkck_X)AFB
zHqKti;(mw&oGYy%B=khyo#ysIoT&f~%38$R3jQKg&N?vMT0B$EBaz;C0^nGF&<ze@
zn1BM09zc5k&V*hMRvgIG3(?Mm#1D`3DzGMQv`fUG+AvC|cP34tdi+2qE&K}6J`URO
z)Ft@Y2<4xW-G&act8oGLoyHJRYKwAn2>i&Qfsk&^yDq3*7~65x4<zbP_vwyiEHQdN
zd3s0KHt3iXtFO~G=YqnjX8qTRGV$70nZ);mw*j47BW&V=!{RMZfO!y~pw`T)m7EHP
z2O+b^dohM`UN~g7f&147kaU8scRTn9C;zY0kHfD`V0ESUoOBBnuG&<#rb(_qm^IvK
zi(}^16A?6*82^z4-f^MFS<Ro%8Wr=EW4nEE7~!*x@EWEgvsx;8G?N|fS@*AvKO(EH
z7Xfuudk6evA3hSp=48G#z1?)SP3#d|c2^B8MGdX}5%qKjnw{l1d4JV~-dmkf-ERhu
z%`HHruf(yTmCqzLq&_-+1`x>ocIC*ngl{#R&eRTdPA}Q{E6#}Q-UnNE{zSL>k_zQ*
z8b@5$njhb4=(Y3vRU5}^n3M0vu1&XD)PU`1I7pO*^+PtbP63e}wvxu%4_Q0N!GuZt
zjR@W4+98XN7*D^^>pm&m9!gMe=3*4)p@EPrt>yum`>^h*H^*-fR<0DY|BgslSegHu
z1<1t6#Yy<@4VppR%GTA)IS~OD8!)N)9}K)QATkvsLO|*#Ayd|_&y&kAy~?1=+{_n5
zhm0iU=`-a?JZxI6`Q}$HG?q#+9<~c55_ILi!{5rhitQU3=o#`t7y#G?^fEbPv9v_R
z?_=&ZJX;_D4Q@~^(U{h%N?Q%}8bS|cdR=4OYS3$8&uR<d$9Y3o`~-kT^G+WQS=uUE
zlZ1BOZ77-QrWdTYI3V?yCq2?F%kn?<GVSxHr5lI22u=GBr#;XyQtS;YBWn?s@TN~M
z(94(%2ye(9geoE;WBHipJoeHs?teX=*j@i!oR_(RSwMoMMjGgukRaPQz(toFW9LR@
ztMt25I@?m8EMP*f*8<$FjY@7(!+6Eh8c;Ar;N9Wu*GJ6rVDT8{KHHsmGc`w7GQd>w
zar;+3^!c6!khgrO9#Qhpf80qURDwE$n0n$&m^*2s@DE5ZyrU2P<fTM}EDm1*26xJL
z47{_eRor1N==(NuEEcrxX<4~c9uPfPGQvG@(ic-2hDNj9odnQ7?pq;hOD+6vGifff
z_b91){ew}hP<FN!pqoF_R-(FGDQ)crRUkHF^R~6Qr8Dof06A^UESK=~A_=tHPFWd+
z+XZR<Yz!BRUkE9NFQ^7qq$QD+RTjpu1?#Wg!+d;LZ`E~9G?W!<*-AGHj0iP}vzy>`
zqEKM^mED(eKm({a=}yk%a)v6E!Bd?x&Ya;}xmmAer-n`SkgE9Wo1xFQjqrH)?vV-t
zHpuyV;|h}50gBl(Alzp8QSU&gOLsv8mn>?BJf=WADLn!5c)p!b!5&*_OQ)#$LDeVJ
z7e!PFodI1P^N-c%Lcg^4f++f^fz!JGMwdVoMT}qWcs4*?r{}A*O6YtIgZzS;&*;&8
zO@WepLTICQxen#Sw8DjD%3<FY{kYnYP5_78E>@pAmvsM|-?xIq7kL@@>`HkK!UT+1
zx^hDhZ!x3Uo!5!8Z=qZ#X{w*F(G+ZXtK`(D2qvB$bwyo4;W=er<+JU4TNC2KTcrQ|
zEUCujPcT4&`!F<Paf`~RQpH{^+5IHxhK-wy*XPfKHaFRNnM%Tw2Ni1Rv&24|H&QW~
zjpQiT?vo9`)0yc;Ve9k6ASe5$z}pVOGy`~0fu9+s*oIBvgF9uny5f!e4+BbuLAS;#
ztzPOYD*Z%pfpLL%YwJ}5Cg#bKLtC)|V+9d&G<iTdD%IQ1SSx0jds;gc!pPxX=1HDn
za=I{_z(wB+jH0fYWrW7}7D-v@4E_aV#nc(>RN`qi@7`s+&YjbO<!?7eqwF9lh`W39
z1Xp3c_?=tPIp9TJYsr(>E~aSBpUqx`R(3DvC|EY~rsv0rP4}aT(-ab!6n%OWqY}2>
zEn;S=(@o=Cha*H=DpyB`!w^ndc?0nt&TwLBE&M0kf&-Yq#WthUV4{j?hL62F6r-<%
zoT+;pNRU5&OzUn*`ey|HJXfxf>tRC)KKlm7_GStH@4pc<C-cAaBZ;N5upmsF|9k13
zx^0cefjD&iO!WZj!U|wb=sEZe7pk8W%8FqnN3Z*=sIA<-0$=E`?GPK|6y1bH*{NOm
zu&yvCiS0+DCqp+^nYKGS=E&PoBW}kK?S5JS>A`D(B=K1yMso&%!FID2727&mGnb}x
zJ;=4@a~pa+MA<3+NxP{XuO%a)MGi>K-ziQC<TtZU$9+^UJ}0k7t75}u%v+ne9|)(;
zFpKT0z+BFvgzXKmHbRmJR61c2?PXn&H!-sV0i&^1W3N<Xhrt|U2MKka56Iu}?oo6P
zWENS)V>}wda~M;+f@3rv#WRVp_ry%X8Z!ZfJuC$h@p=ki+86^eiCskE?FA$;GNB^k
zv9sn27!8PkIU&W6PoT$dt0K0Rs7L(bF{Tf%bUG1S)$UPb4;D3f%>YuT<e&|vPQr7*
zM)Ig=u&&?~!P+#O1bNcj2ryaH?jcEm3tHApRdJ)$y!f#nj%|*;=_m@T1BueJLl?T&
zHFz}>o~s=$K46@HjZ}|C@B?5!i;EQXr7c<^M#ql770JEl@ixbok+)H9w{|0hpk~W>
z$-*CU5+2S*iEyD7gHW8ssu&*Lidv4uG_hnI&gJeO6YfPbRE+Z`L_{2lAWLk_|M&hY
zEqZwvQ63`Fd2|p8(z#+&8qkm(yGfd&JvL*~`po5pEl&qM#?Q2+J3tfe*7pO;6d0WA
zNEIt%*0}<Kfd7hq=bJ_o(<E+bVlkOo(Y)+foyuaNEn8p2Se{CF?JCPj$v_TH1w!BG
z8!}&aYZrrs#i3*Dul)~xU)R_o^NX7>3|efGOWv-XG!v<PFyydjfsec4+cTlPc7c5w
zFKZtcAD74d+b-Rten95(@!`$Y%WD_!<Hyx?cdTX0$7Ks%*C1u=^0SB2+}{1=&6B6c
z{pr)0rw6y$pR((??l1q>$;o49C8b&Of|05Iw4slHEqVtcq|=>X0T?jnTNO%QesQ_d
z=Rsp$3xfWo%tWG)B26@Fw$UXayCY2kaenRCOJU6-RO=u|BS4{|8*d^BB1vIB>X>l7
zR-~PYawF+F5B&N>?N&Hj>3Y)MU-E#hoUSgHI(ft~yXn5X(`NC?8f8@wtc}X3wfr)8
zqLwm7*p#__rq=nwFE8Z^HtW$#o3ew11vGNp-?%yykEYHutEE0yx+j*b2@#;rv>_r=
zwfLvZr8Z6$<N!A`4|8UrUIZoQ%wAdLOQ}`tW^?F}%c08j#E`?`#&nTQsf1Bj+|da#
zWF{gxa{gKA3|Zg4Almeoow?D3h`2vWGUWUpHHv?aL-UCdaqEN%<oxV^ayH^yC`%|%
z2>kp0b!5pI9pG@Xp}602%ouH0cCzZ8@aB2CNhbk(5Xk0bbg%|mKX#}0yoilw^f0Vc
zr}dE8h&PSg%eW6S(rcA2Xe)aR>sD#z%G+~o@{zQeE{nTHcn>O*nk^T*MO>vVk+ri|
z%D4_U(64IWvT&(f<n-#*@ql}bUSV#KwVODmUc~;-3mX656J-DIM;PF)1gw1<Q;|x6
zQ4(vF&_Osk{!hkW{r~6#Cs7qgiQN!>g%#G~L6q*VtrH6((>BmlYJ}T2HaN{yU+YRr
zwQm(;G%y;*j1Y10vbdNx<hVI_Egg=I500*iVQSC0%(F&R4h}`~aYPW)$n#>5qqjZ^
zZLIi{MnbGd3=X*$T1r*ao7>4Kt;8ne2-e!Y0hk%^nGwV4>@F0dI4F*zP@p8dQW}0r
zwpwx8cUCF*^Eee<4-!#Lh-NU4KlH4s(N$_(j!xfj$Z`9Z=`u8C^}zWNJo5YARp1_N
zY37{&iFlOEXhaL{!U5+WNp^$q@x%tc$Ms+}=T6Kfk<HJ1iOA?j1+_<%8iKN|$!3ja
z0~r1Q`H>thCliP5WVIBYni}aA<q&`YEM2zx<6EXLHIJwL=5T{4=dc8_3h~AWM#nqH
z(x_Q5!bdYB8Ls=UB9^m_?hPoc=wz*nK|`%qx<6$iO0>Ow+nw;*F+|<Yf~T=VA8G|3
z^)LN42SP(B=LN{ZWY&dJ@^%oONu7|i4iJgawE1C<tZLQrqMcFcq`zHgc{4-RU|7<B
zsk}=_8U7P=Bq&^I<wjcA8$BT}*1c3wm395e^ph{H(bcO1s>=>q*nhaaCni$A{M1ir
z3FWe|k^apBb(cJVHoc`Zx>v?9H?_u(!05JX34-Dw*>jMmmdEgWdXNK^I5w@d7U1{V
z9@ERZeZXk3JHRRVIC|>o>{??fkW=XTso0BJ+TCEH1RK;lC=iZ_*v=&ED|MQ~Mq3T7
z|7&-riIx)B8DD4BF~ouP_|jfY2{Y}ycW+q(gSXwhdtX)Q_ScZG4K`s<GktU+)e3Cg
zYR8J{P}HI$tt$8!I5ZjT0xP1~G(f=-sUq^F$PzrUg$#_9>Qxv=o_QGIJWgDindWIA
zxe}O{4((4<Fz?KtiuE=YFU8YA6XOMM!DH$5oAdo9P~DS>jH*zqAP1VtYNh^pB<D6Y
zmy4(O{HTl(A+FkZi3ojDu2y_~0q>lj@sX_&t_n)x?;L}5EG|i$IC}6?+<<-k=%9Ld
z6%^NU+dNV;c-_4X@gT6T8k7ji*9j7R#vraD#!>4o4DG1vciKD{RRKh3%*-F3lVDd)
zU9Ox3`u!VdaC8nz9pbmhg@<t%spHLsK7Os9m;M}sxY_iEkvJs>28Szji6f{6Hq?o~
znz}~XkQR~C2XD<}e>4ol2LeVWTnDesOcLA*_j4?UHefmB9V-ZFBkT)Dyx{eIx?~~q
z*^{9#nKMi*h;80cnrj(a-sodIi*VSoOkVxE7a5;UCg)@h2s#2PIm(F*aH7_}nHYXk
zs(M5og0h>J>K-nLC1{;XRFJ%;+{72kF*$r1RG`K5Sv-_M=l9OnzyTB}dRAQ-$$t3}
ze@*`khV#~8Z?7)ao>3JMg}NS6m<VNgSS+ggS=1^vN;+kl9BnFwxnQQUG*Pz}MPm;4
zkbOI5-MktdID7yrqm$i4$v|nm_5J<&08LBxPWuh4U|kgseidag(qHOXXh}jE^@kHk
zrESCflEYmdvn@w94*?MTHH(Sfg5=@u(W92p2bZ?-DzA5=NuEERSalGAhBiDMmmYEI
zyTrb{x$s^&R)*W<SN#nm*SmBTi$d$~>7w#M8gE7IHY$>>c`z_{SRqzmR1x^1JG)nh
z{j#XYe&v5mBa$8|vBXme-pL^^L<{CmxfMuIwsFyc9~e&JX9_Tgbpke#Jpp;B<U@F{
z)4Kse8`$m1J3*5;5yy~#ZH+c@=6m?qlIv($#&gESVXifWh4XJSpv2HYVK}2Sm*y$6
zXeIJjm#nIfi~z|Bk~US5wX_-f%gK$!1{yYzNi>%92Ss*Rbva13iR2(dFcK>#O;tWr
zk*TuV+3KxX4FWWEZr&trLj5GQkk%K`VgveBiwBwM0?R=RsI$oZ`GQ=or<FceQ0iBX
z7WWhPY`REqh|OVax!V!@;oeTnMjIzXd@mrrC{)5uRRDEUwVZh#br0qh)Y>XnE*YT>
z@;(B1Z>+_^y~q&#>V_GFnKj0MJ;|g!m&GUJ{pU1%7a0Keko@MhO+&Kqy`kZCFN6+F
zZQ8fGF_yI%bL)DHiQUNhjEBuWKC3yW#Myd{@*<(iKBYTndrPmg-QVBENxm})E0m2j
zpmPxqTH{*qH@S_M-#rXps})F?n10Q5i>H(#*q@P9D6~x*oVH$f#@@H+Olx;iwyn#7
z8l>l<bT|NZ1DJ34+=X~^je!^A`72f;7xTzVBYmCt^aacFh^^|aRh}gyp+@v?{UoEp
z{LSH?;Gt1r5IkhSn9L@69uGWC`(K)2(<`WaQgDucvs9*r*<q2~*wh=^3rU#uvV+yA
zl#*^o73-HHNQLVs)0lJTHBL5cjlTh|*0vKK#-9KSb()9RVDAzXdIobn{9MyI1OcfW
zR-fajRR#XHR15-3!J_X241#+a`HQzMXbXWoL9IuVPn=j$4~j0>LAbSA9jhTS>Bm}N
zX`o9W&P39xz2$2M_{&d_3Zb;1{|+5knV9}ZA_M9_{-K;~?ElW+4{Dw}EQlk1=XCd-
zLDZ;qT=Y-h{h}m8To9CoFGbE<xP85<$hzFWAQ4sjex5RU#vcvL3n-IpeZ0E3n7Eku
z@Nar3&Uwher+i`HJ1kN*mD(#xM|HYLp6q=G$&Z#b(cZ?MOISCfxWZ=}d#~hq0r}cc
zwqy&%N$!q?zrybWC`!d2Yn{cA>lZr57pL=hus&_Q3<t)3{w4rE)EFm>_xHpunaIUp
zyd_eMFaXO}pUYL{WT{9A95cGwJbCR+oK10>Dq=-aF0$;&^q9lxUvp7_PPEt}lVaCL
z#X*t)A9A@y_5H=pIb~QWMotm}u2Uq143%hRd$X^FNKFs}(1Jz#FsSom$^iB5(}Yg;
zt9QX|(=;WYw}hgUZ&0*Er;ZJQ?&FpJOcb<Y6q4cn@!f5(=*OptCvF!;;CiBpnO+||
z3p)u6!h9Lm8#Pfa0LpZhUy3Ye?Il}I<E`i)^R@0&pRtd^t;ukto{px-&!yi$mJ2f7
zaf&?r7%;pHc=~~wwR*{CZ@tm4CZIYgUb1h*^v9*W=NET2)*3s_3IeaMx61wKF3JX4
zTe)(4`0wC?T1{}Ov&1imI>1FVK16=tYMn@tUC0zHBBe9XkVZ?z2imJfvq}oSMoTX0
zZm4ldMTQoHP`=XUTEmYZ3Q84qzO6jSK2C)XrMyB>fQOP#hy}(mrlBt{d{S@29u2}R
zYNm#3Ag31uDG?vI&v1*)bL?}lp?1EQqZD<B9KmP@I$t2vDFPnD&I1`l?$Px5k~rRl
zh9`58zIBs|g4i!lC1?ug8Vb}kcWU}Jzx2P{vhxusgQ+v;p)j<4Cb4W{84hJdV%=Ih
zG7Crx00G%HIfm9AB+Y~ve&}v}LH~@N$}%erg+c1zlMrT=;-U13>ZSN)Wwe=-l3-|2
z#5cwnulEzC`_@o)O^Iib0UbKtpw$i(bv08QRgNmc31wx<6TNFjLJ3}5xyNd2!(N`1
z!ipO#xQ!dh1(A5r9GMy0-cRD@W9mGx;yF$@z%O;~)GP5U99J;EVH8D5+}EaKD9B;F
z*xcF3D>sV2KXX{f2dRhd6E9wdF&KO|l#iGXr^zehI2wo?9<G5_3fjNqP4;t-4ZM=X
zUTGD@-?DlWGY2lp9MxgvgmHOChzbYr()54O@AUaPLs_NMNP!s(u6*&V?s&CGVjf&U
z0Y83M15L_(@{Bo&pi1QzeP!K2Ua`k6!eOf5Q*ZroF=3o)|6D^HqN8!RD`ID+{>_i#
zw>9u7`ObC7w30~k2)FyWz_9BBZc!*)&e?Y`#hh=vFP0}klNl#)eb5&ZIVZ@#tN}l)
zD6kU7#TMh-x#H-=)FlEA+=b8r{G)m~5nx~O@f-;D%bUdlCJ;NvPI%>va{l$UGRb=^
zDIfC;J|2~Q`N>1quVg%O7^J+i%ByLdQ8*EVBfOI_GDO~Zn1%Ho)|@%`RMwk+l7UuC
z3j{O6x2x<JUG_FUAg#g_IN2$;5ox~)+&EPdxnwRb{-`1Xb=Y-LIj&+Et~<|p3P60O
zjLWm!TMg5eGD~O!wT#SZNlOEK-Ub%P7smc{?(gR`r@vucP7?#DrQ>{Zj;G+RWl~C)
zoJ$ItL&d0J3hddqMlWdvjKm?v*AIs&Ovf60^K*0acsp@>KkVHm*3U0fP%s$8;Fsu8
zeen6aa{qpM9;<||T_0xW==4!g1pIKy>NgVt39oYMC2g)fD%ZbTpy0joYNYzbqgRoS
zp01H#7qD_xBoBYzzobR>hsnO~z+(cY!J*~ig>hzT-bWIJVMoNGQtYD$XdlQi;rAtm
z`j6Yx-VJdhoG5Fb`OLkDQcqHJ1PbP*UbH_F3cgl?bIoygJ>#+JHe)QOrGOt-wB(?2
z0llg>m{HCKOl0Di_4ce2@)*f(KcJ?`rzx`OBF;=^X>sv2-shN9$&pJVY}K`!9e|jA
zSv&^MpEyJ!AU4U8ECP+hCN?4%3asf*kNMa@M<Cz2MQHIsjcd&|EoLq9*LX1yTy3_d
z>4nH~RJjKO&i=^heLsxC<pBV^+ndhc>MT|5^?R^OBtEJw`_Y@<)194zcW$JDWXOFb
z09dGiWl18rH$ADIl-}(S&^-R+FGlp6?fv&hT0yebA8lWcv^!)y>gW0*;q^_b0UtBU
z+rjGMegk!D8KmIrBazNBU9@X-X$&cZz}4<ehZ{MJF5UG#1eB~FLI7i%cBxSvjDeqe
z?LQ)697qgeKO_46`&R&wF<$SPgBZR#FF8BY*G;jl_cZiWX`EZZmQIPVoSNUb6f0hF
zALQ}@JCFX8dxh_wc^}^~=p)w>Fg^X*46yIMLl8JImkyv$o3uTtMlza*p*2I90Z*B8
zgs|?_HadzEp76(vEr3eB)n~Gq03Pn|41~Zd5W<7n+1sUOfo#acwV}KsU>fEzgabNd
zk+jB%PYlj`iixbe+B~4{$-}R+ECW`VH|Zi`gVXckZy1{%$oPK%UuO3I0lxpiUar5j
zh5ubeNTfa`1axZp{FMwMe{bjhbPP=C$jJ0_e3e|wi;J2^mCR%Z_ZCFPWNl0cmn@7e
zOn8BR-sGvTPm+v?%+}YzVNV^;Ufu5S2=jr7^HG@YYUlQGEN!IV9Is=&tvb^0)50Fs
zPjCh&s50N8`Cb;31n8)lp#}FDfI3w9^ZGcukq3Z11A;LI6U@9Nlq;sc{Dy+}BAQ^p
zMczv(Tu=~lDnp*9-!3p-HUY3|<XF=kjK<njy3c2D&*nFm5^*faMO!}Y&X;1^On6k7
z)g7rlK|Hf>$FU{|EF1fOv4ja#U{W)InjwPtZ(jcZKv&cx{LI^_@fXD%<S-z+Y0AYA
zsj~wC=E2><Xp0<NylNAlz{O{0Y{$p~_O~V|kXOf&T5FAHNXwZ8r3^=Q)3?SfVfm%M
zWWrI-amDQ{G6bD7w4M&`{o(ApCTL#b0N{VrTV64OFZtw?TFw*5b0CCYy`orpG=2mK
z_S~g(ecfCjCkKovE1iV^v!V_b<^yy5$%d5%OeGuGEpzk?#u~Ux>X@7i`i?AT>eKU3
zKzWGmAD`IqoYG3!K$qh#6r$5Yvi<1P29MRpqe56gZN=GmumL9f@CX!N6-K<`<5m7$
zYkr}&kO-#y-mGqX73{XFxNzQx=7Ao(gY{Kb0UN^(*$%}lFboEM3-TE>E()h7I}$Ag
z$Oh6Gw}-=S#^G2#tZSi9S&S@!$5ml0a#I)>`hsllAJgn3G>3{4xN1J{fI|MJd#wyt
zG%J+CO@!#xeATNq%Kw9hr8_+lUd6om-Uem-P1l*4>_Rfb#BHkI0(ayl5@aFZs}Mwg
z67<`8mdRRX;nDYmi{*MOM@)i;#}q^aAlG_CC`n<PZ%po!J+-b^62iV@ix?<ZJb^@0
zyf77tqiWg71mF6DSIgCqR9bYhuc*r)*BE}&q672-M?#;Lj5P0pao<d<W88Bi5$V9v
z>(@=}Yg`(M5H6Xl<s;J((m?9c9%VK(0+zz<2FTEBjy|=HIQIVJbyPew!d+rI;DvMO
zH0hh^3j2qd@CU&g-(!OqX$T)Oc}T2nMX~y1EwbzYRO?78i3R6_h~S{uTKoJoqC~RW
zkd8F1+hGD(mnyr?ienI?r%a-1CJ%<A7n7y~OFrI?>6YP}OoWTA4eU}#R1BQ&zH~=9
z;mJqRDr18OJp2}1qY>>iC$BISKogh<vNWk^Y;iUf=%Rhh4xYSeU;Ac8tmKJV*1Q%@
zaf<YaExt}w2E)!}9vJ6d4%OuyC7AK%+s5Tbizjvd1`N=me{L;@m&R5FY~@D={xRY$
zMr8s_x~LbVF3|zq{=GzdhrrHU+F<wx%~$W`gg|sWEI(uhz!wNug7Llw;GBX;wh;-Y
z9U1;9Kp8R{8uW^hst~TFq@kx$t*)vjI2iwv1Ua%yGs{ebKEq6k*;IIa$gw3NOOc*0
zHh71Z>JEzN_i)?=R$dqbbFV2jlCK-6z!UgAL$Yt=8`%VLNC(w}X6>aNOkMmVVX3G}
z^fPj4zG!}rDC{k-@rxEeAd{`wuD`EB{c^=}@3zoMz-IhAt@P2?n{R<*o^@Rg!~Ska
zuoef&uZuD&C)SBxe&(tfdG1Q=n)n>zgdL>OW|BBQ=Ptw3^2Uto_`n)VW}Yeog@2BO
z?<N61Jxvt6kx=O_N#G=Z^G6ydu)FD*>(~Nu(A@8#whfX*05J0_AeB(%@A)y6FzQOw
zUBbCd%K-{gZCT-#xnwtjA58YS2me#ZP)*PFM6slSPeWEjh9Zv&sa|#9&tB))vUwKC
z6w}HS!xMw?3vn0&wEh#;1L4?|P-gp}`VWopzFTJqE4w8(7aU<N>RVsNF#*MiDk6}K
zqwI9O^$hmxp}#6O<=y(_U*w?CMnI|JK5;zp5S6uI)Fg6S!?X%HfcH+8OQo*vR43!f
zg#HUq;Ba?0y(t1@n|V4p5R3$ef!SWct#3m?Ypum7XMR8Y7o0NL^~24lp4GGF*GoPG
z$}q~TE_Ju~>Yg336H-j2PG`05>Mwc;)6|ELsci9_mS-8jp92n$7mOD)@hMI8x{X)7
zLh$^QdXrW8#UY+pQihaf(YJ}wfKR9g*$es^*b8wC>0aYks9_||(;f^bWvKBzcrAsY
z+>EDRlXvX8%k?0gYqn~Ko#y?2H608u+c)b##&7Pfi~0IQ2P(<ZK4aHbY!*M;Q7Bi4
zAX%~v*A<lje}3qMMV0EXk|zd>m6CkgSzV}+-CgnpS=N@S?tO!8VmW)`a`ddtF8-!_
zg2U^0TrpR`6W!>}19Rb&UJg8aHw?mKXLDoFZYJ7NWT&~oBKip14~5p1VUFLZzMN}b
zw*97x|ANhdV#{;4qe|0vSdSHd9TOh66Ci5vbi~F1Xuq%$$ktxg00lX$WLSkGUj@2N
z8!;IF2FE^ohRB}TiuF*iT<7C?%<N+yu?%?!zL4f%TlWb5MU?Kn5$)t}mKjrQdvX=A
zIZ5BFeIh(=D6+IoTj>P%L^v#$<TM`44Nh&OZJs+va<#q%r6PSM^jF?jf~>Iyio0$a
ziC2ul5pLpRay?qqiAY1{3x&8lg)eO{!ARHgJ>RX5yZ4DlqvJ96575s3mj{Oe%Eid~
zAKiba`nvr(Bdp)F#)%TRxdw*8bCV2rg<zOHTn*4Ae%63g^xzZvD&5mF3Ds!C{9lTS
zE#$9}BuRXHd}?&taZn$Q#2dOa)AaB=Rx>U7-=s$6=1(T*Qgn5}PYNjwhn-owdwwLV
z>-JAb{QfkqNc|=w%TcR?WVA)$k;Kz0#{Gc3ig0G7myRg5_WfMo(wCVgH=N)EhoI`H
z@>O4_ghi9dImr=Nl5IaUTR0yLS<$wURg!F5&8!p32)2sn3-lf+jmB>>QSBV!F(Ab%
zE%affEa|8d{nB7VPXTufa_!r7!6RP-eo(0DpNfNA1_VDDkJ+@~pNWycyGXCld=~+Y
zfd|jRC6|tnrn`P`cxf~~M@P=~7=9K2ng=EjW+%v`n`7^qtFbNc7kGrjGo29eedqkr
z#&vd$h~mxpXp{jVYERT)ZY1AYmm7O}rdQl^i5%CgdPQI^C+krnO0=T{EQ96ZW}s9N
z11uZRDAbM(!&67kkfp2-?)DFTa7_Sy%j2W<iV43(?<SQn^J3+xT?pb-@#w4Jnftk+
zYJ-6ZDX+?t+cBbkH?-=+_DYy@XECqjFDIimxMXVGWcj2gSZ7ToRpEMYgk;`b0@+M^
z1vA&cln*2gbezJiHEHd4(MBbo=VUJ~q}A67LR_GrqMK&S<n$aaxkFmBLKFa)j_U{c
z%&97MYvSTqYVvPJ(&4$iXn}<$tcRUsL3<Zn1Cg|N1x_a9Et5aYT||pYf+h-@^lt^|
z%flc$>dj<qRrP@*hrCd%mxU&VmLnD+zu_r5U7+zwIrLOkzi_Q28ax+w<V19iIA?BL
z>G>IB_FNkCD{&#P{mME$1PcHv5zFn;n-9jF7D!T4C#auFQ2FQ9lu?xGs|HfLXwVDF
zfrOcLIW;r$x~TJ|VkJjhY}~@w6^jo!JpxW|1X!L?+S`WeJb)@JlvX1frTl`uJ~J!Z
z#@p*Fwu&kJKzq!T8lm0c_Y#-HZt6|rQ%z!^)I2q=JE@$b28L9Jt#5#jIsf&?<3iFx
z>e$!!%G-w?Une8Hir<R>4bO72#ZJinLL>uT*rXR*(CMGTmF})X%!6UY7>|js<I<mU
zi@D)7nMv>M%MjUO5!5;NPdnQNb&@v8gm&~v(j?if9$;jo2h$>=5oL(dKWLS15G-GT
zQ*eTzkPLxZ!pI`3#UD8iw1;$uj%NTsxVfTj|M0nT{1cz&Z*v2pQ>sM5v?m~{`oA`@
zzyQ-E#F{6m<mY4piPoV3YNCAy9%H?_pEw{G7Wdcmonu@&8UxsuC2O%^bVuYtMVTOh
z$^h|{=ao^1#O0udUdw{u_FGFn6zNXL^9FeSA#G`u?~o6J`J4-w3ToXg&9^c>=Z7*Y
zy@aEk9_FjghH5TonW`x>j%g35h+Y`_WdQE|#CvaYtdti1B7=sq74Lc@kH%+7lZs6U
zMt|gnAqYp1_P#K&lvn~8tWu;_L5-GYt>ChJZa_9|37fTgZqb5^;d&*r!?P`SnEG5Q
zlf2+^Si&d=PJUW#t&B!MyT^L++@bw$woY~FJureSUn01Kf-ILASZ&dY5|5w-Ho$-k
zue(lrS>^6$dr@P1lIcdiLw?DgW-q%Ji^u1kL?kxvuQt+k1j-@r?inwL5>;V41ZNW2
zqg)^;0iXnc^>?Ggw}Q6EFcW`G;nXK(^5KoRBnZruJWK9$WKGU>+osakBJjPkx}d1B
zS^j}5p3yDgf<sFP0di3hIlf=*jt!-dt&O#J3ytr}<>!&_%;4b*3@4tgM;u%tRC(03
z*Tzej40-fy)4lyH72!eM4_+Zc{+PbC5RBKr_8Y1-Ls)GXGL1vTXV$$xV`1Ck!~UNz
zY4f~V|1cleIsZ0W5>1TGwgqA3U`u?@Cj5J5O~lWULSp6kSJbA=U{1$G$4JP^!BOv-
za|4RW%JC1Lr>vYT^#KJMK$xtY|1;0}?@*7GlPxizfU+K=h!Y5dmGd8_AS-7gpa7>n
zu-FhWu}zyAo}K;w7r?NyCE!v47PaggP&p94y1M(ep@nbP_HS__e<9DIs!~EKOXIxM
z=&FzAAJDh8OWs_+Pw3N=wiaULF_bCRZ9VP}|1I#CAV6_pSqM*sV#OIt_ZDCij0EpR
zO8_XhepP!W<fGmU#3f#1A~Us#qF7rBONELI@vJbC2hbqDNwYB-`MQw<yrL_&3L$mL
z60=il$?F|!M#UUwlYVq%$d3LTFHYErER}N9%yn6;=?B&$W#z@jM8`DnrF`idQZZyj
zj)oc)6*N>rDY%uLi=UMQrW=xApaqJ7B;nOexY;Y8j+YyV#+vW<Hb|50TOmH`!!-!9
zSuyF#5IQd)Iu<%d!TzfjWj=5LrneMi3{68sHFOS@Oo6!%&vO`JL979-6rqMwVI0^p
zal;%?0{`14BRfqni;x^8+$G%dN8&C&JRv>i7*H_SxEW_s*$pV-5++V4w`zF+QI-i%
zf2n*2h5mz34<rO-0Qd*7P>&*~Br0P+Nw3rnp(^l!nIb4>wNV5a0IPRTjUE`>g%l`=
z%lz*yL~G7S0Xcyzjm2;17!r*Hi$RD<q>1~Rp4AxeD{Y6;NpKGAD1#7&7#awOuHZ$r
zgQ5^#Xh4c}xR1;07PwEgfp}K$VPc_%QBu+|!HcYAU?@C7OFgqjIz>sVBUY|A=)E>U
zQUpVo&zOMmNtPC1j9wv6pJeV*Z{;!JAD}zc!F;*C{Vlk#{?khszNu$rboKW3{b;tJ
zdw|>l##YIwb!|*~>zCbNpPHsL`j?UrpH6CWLo6+O2DtR1)`ct{JBAE55+#`oBpn)i
z-C)zKQM#=mnS-M`a}o4;RPtqcUz;h{xo3Q$EopX`9}x~9o?lIqm+Zd0rgjB2xg*O~
zUAz#%mW9SE!nUgI*8{%7fec&|x=v(l6RD2WaK`GAZ;YD<w^rJu-2By;7sN9{kb5nO
zpIkpoz~wpy0sm70+0AJLf&8c1_V}vnLz_XG-+b4`D%++0x0Mn7%QJuO)5!_^d$C`1
z>)WU?y_N<bl;g78pPw%?=Izz77(O@W8Dihw=WX<Y$2Xi!TNs^=R_l__{M<b67l}gv
zfJqbn4kk!N&wBsoq}OJ$Mh%S<ao;ut8amfz+n(CWFBE5v^P1pCeFdy$Ps(tNJAosj
z>t#OG?s<`|Q$ANLpVTn>9&s)vKQ$w#>;~tI@)}9N!a*l;)Mv3SNU|*nO)cj-r8yqD
z1x~CS9(tILVK%&T%jlzSNQk+!iK>xPi_`4wo1&c}5mA*2wtCs*vd8%*4<eMx)${E~
z(TLrrfpk&Q5<B(nvaPDTt6zcgg2Tf2%Hokoz*1K7ieVA3qEVEDV-0+in}qV6^FXCY
z1X&y)Ggujdq8C+Fvuag(x1=w{5{AZ$3<;f#K{^auGAwyc=+p!?Y$-lLLprSRK<sj-
zGeN^TtYjZ9!7zK-sK~R0s(B+g`7EE>i>w!%tXdU8Y?KBnC8<N1kCIH}7ST`DNGcLy
z6B@En#93Oq6fa4U3a<>ArYMM6C_V{(3{(t2i5L0rvDWap5|64G^Sv@JDH#Jqrt~L4
zcC=OJh~zGh!cZYC^H-*fPcd6m{X2Tpdan6=y-GBHx0J0Mxr%HJLXYz!223wA!j$;u
z#0HMr{_29~d3?`gyN^WF;OU3aI(#mI#pda(Cu{Tk>Tdh{bM2AVHr>$tsC@GYV6rni
z>;Q59pp0Qw$#>@iVQRD6x<YcTp?aF1HgvgjRf_>nu6=XzUFh2VeQ@h(ng_xCEp9Wj
zetFaM%a=R74{Lwb_x7bEGrz}r&0_O4%ERrnB-@`qBSryZe)Z<tC1_AUUVJ|2_F$%=
zJBC6h@zwJ&zc(ysFg|?u>Lt|?aI62h5z_wQ<2P}3Nnf0~vgEyc)p=T-$aHZE$6#__
zUbN-c)cEOsp0Ln7rn}!ZHuxDsjSzD5HlOY|%PoNpb*wrbkO0hq02B)%)n)icd;?Ls
z?YFOC;>RM^;WbM6_H1jpH#(p`$6&%>>{iBOZX3V$$Avq^{{Hj|u1Ib?K%S&?g|B^h
zbJtf<D`369i5-Uty&lO>=?SY>4h+Vp?Id=%pmKEA$pQE2)|Yg>Ls^LXJe2_lbtiv#
z^EA=l*Rugryze#Y>j2Jqz3$P}60RJZ;2D(W)TW|?O4GjSMtz@@Ck<{?VWe2-%T#3B
z5+CYO@91`nm%8y4#bKU-rs^NS^Pd_TuyS(z#X9VIl;#x#EY^QCQDtZOw*f;U?Jyi5
z2vn6?D&E`m8vVpA(bhfFu8PSKY)ve0#hG}aTHJl^!T@kjXtt_^>vJg*5WZ((&e`oX
zgZq~vfU<QOAN<{ys89WyR;q&)C7wwi;QR1NnNTYU7t@@<dZ4}<%VA-1`pL}qhVapv
zKcftrO8ULY<Lv@0NA;U`TDh9zLA4A(oIDWg;IQL&8wZ#e7ku*&N_$N-Mh%ue@Mlm=
zH;8e{%jxen<_!X(`nV@V|8iCIM-zvQ#16F&Qheid3ScP|_-P*EmzZGXhbFv9dj*`{
z-yq=AjaNJ1!J+=3@JC_`BO_gOPTtTi(6uM*J=TX#jPtQbiqteR^YiY{4LBp<DU;$i
z=X3`|2G>(V1WAF3Wn72MOe)DHB}J@h4wh;xNts(A%IFwSgkUivM=2l_C#}H^ZO2@S
zhM^=XxnEm&(8#9+b9L~WAf%Hk!VJfIH$+;@DeGp)lcPuB@aqGetmM@Uc1IXyU?^rI
zWy8nGIT~3XFSi>e>1o@=p}rVULf&v`tt_|W)xY^jQYD0wo@z1<oh(`zg0o-Aputq?
ztTwEUo53^0l(kAA_r5&_)U69K_7b;Yz6d9>0AjBT{Cmy5<3PxCMM9}=rMeu)mux+3
z+1NM+Yb~m+qE$?~4rWO-Fz21H=yA@Vg=>Ck!%1t}iN+LthKrO0_#z5WTOiPwq}hQb
zo0b55v{L!Oe|mmJuLvC6oP7?hUnfGWwEUznZ3JxMxd>x=VSrq9o&OBd<d4vY=}ki}
zYbOr<80`S|Xq`)jRaJ)4_M4EE`_`vfUgA+DQa)AEf*Xs^xtv_Q<vx9#dy<&ZQ47FL
z1YvwV^7)gUCtEXxLMRImP#toR3zv!3HIJ6O^5eyDx$ujFm7sw*ufE59k0fG`pAnQV
z8mZ!j7TnZh4ZtSCI9~4c8Obw3eQ7Ehe@dG@`Vw^4b;jdeF?<Zf18(GR$O|MvnT{Tc
z*hKitWnwC4$j&0Hr34wQFnpkfd>r;1li*Bzmt;{)v@LsCO``)aLTVa55#LjCx8%&M
zkAD~;?Wj%()^WhaI!762k|Rg`Bb!3_<$G^f;Cq&!wQ5{5yG*saz0DWk@BaAJf31P2
zU$y1O|NhEmC3vWmLL`NCNH5db@wK-?kI`Orq4)KHQVFZUNl`f&jPkUw6#L`luFSu}
zpwqr{dMsIkF)|mR4&2~VWy7;zl|&`EFD<G)c+Rx;;s;C6$byX#)q|;@-(8WOSMQY-
zMbDD$;&T)YUO(r@wzINYY(Xj9j;p@O*l8qHHAEDCk?f_BGMrZyWfQv~Xfb0oJZYW)
zyN(6L-fXlbwhgL)U;CuPd;>jFFn2rw>JZbx_<a~K#PtlA=c>Ns;aZhJ8TZpw-Xl%u
z81zQBgtov&rb80jH(CY)=>um5;yIgOS!$6?E7GO>%W13N3Hp_k#^$sq`kp9`?pyBg
zr|@Yu;Mib&Btqs7N_0pX*QHVKlo#R0u`jy_F|YQt^a1;^6g#_7V%YlzkQ6kE8W$EL
zmtgL2f7J@$H9L6!CT>*n#UVFmi8Ppms?oyOk*4vqq1Y7{Dx2+3WB+^r>kd}98Z}#H
zc#rE)f|V<7ky$ZuwvYHIB@&lS|KA#Mnc$&TlJE#G<hkYvCB`kcL+OQ988*X^Z$ogB
zWd#?&13o%z1}fn3Z?{*L@N<9!A08tRTs*mtF`O(QVd4U+36ar6Bcxi~B8=^XPoC{u
z2Rb(JWPF(g2T}nM^l2IC`2)E};rF1e>eq@PDg<I}ZA4Ras2S(?V>O)R_1FiMJa<?_
z>7l>jwH#>gQhH#n%c#)Ik`_KzvV-8e#sqf=%#O%Z^7;>dL?*mF8fW{Um#Yn)nXv$`
zu0H_4wOlY^Sng$Qd{`jwVZgi~y`K@9cZ|iKqEwK9i(M#Sdq4jr+(33C0Hhbr#X7J<
z$mi4sk0A*5+(r8EGr8~z4hmL0KDbZ+?J?NJ>aj#WdE0gHC((gjjRQ;v+7pk<bpV{@
z0P#A?yI%z2leQ?-#Tns>4ZLVHU-{iasMjT6BfIYHN$QjEj!m-}Yy<lIZ;;;u%KBiA
ztz+29fYhg*PMNrBR1?c}<7#5J>BE-GgRvd`Ok`?%qmRTaa;0RQBJnF`=9*R#!dj3d
z{xxUjS|&J8;<7M|tJ`MODXgLF<Y}B0+_B`r|L^;=Si;bfWd^Rz!MdXtf(Yfs7n=hV
zSXNRYGla50YC*t!dXY}SXjW)u34}L>AlL5Bf};s#bc`KjL3w2EP<uEzl)5aiSF(rh
z!P+?El~T^l0_B|ouU;f1cEh7wTIrT|S~@icY*aJ~f^I3;xV`gbmKTBl+(@9Io#lxY
zg*Qgc9-q6_5C)E#I`O1j)~y`<%xMR_PN;OBwF!mzcgz+0NK`Chl`S4ZZJuvA)wkk@
zKCLa%d9b4~S{h{Sgcq!AG-^wyK&OUhtmT?n9Lt7YnIpaY`D(EovzU)S>qGMvU*uDx
zW=FkJq|M$fGL0NW@C=+{zmrFqF;I9lZYY%<6ki!r?PTvSLu)%J_UqHFvfBnozoMv8
zxBTTs-PlI*)Eu~qNzBYHaID^t)2WM1s+{S}DbjvG<ZRS_j-dm$*~WrfTCsH>n#jCM
z0~8TKJk}KyQPi8xP|IXr0KTGMd?!VfU5BkQW~GlX$HiYm#4fwNlfk#*yk*D8^Ab7<
zJKh5>XaZFPHTV5W<Wos*pl|^HYx*3N<44qVE2foL*%9cO#WM9$f6bb?+}mnY;J8n`
zM&U_DCR*3%R3m_F^QKF?3Jmp|j8KZ{_)h}O(I^7m%T2KW14Kn1N%J78qwaC$d^!pa
zwYbMNP7UbdDu+qvngrfI(v}6SW-GyTLsF)$C`@YSiQwNPXw2RO>|lUgPr4V=bOB8j
zWY@*0RolUNDG4oTZfn#7=rzR7Vm}*<mK3)Hv+TCKSB1!KNMH<rTSENqR>CV#y!iTz
zyPxF6Y`V@OgLsTspJ8|FAWmSatLOIJIq<&01O3{{bGKM|FD^^9tdN`MN8`~O+EI1L
z$IQT3H}Ct)7xJZ`@gZPbEy7zU;pLj~m!>>X<}R7G1((BWf8jWydLPXSadEx3{I8jY
zF1POWFt72gD($OHU$^=SjVeFM!UEJO<&NRPRg=0V%gZ0+1uLv-r}*Isueq5sa}o5R
z`3q=Z2ChiNcjnx<_DOsV&H+<ECEaB26gwaZ<Ejo2Aj2vJt+4>DB{wG%6@0}KCmOSE
zVQjw(?=Kk$o;O?9L8Zv570<J{!yPv2PB$yQy;2O-<&KlOk0aV2Z$%S%v8$LCwjYPS
zUgq={95Nq!p1i1WmEI3)&y4JA44=Rz$*9gg&p;XiWC*_rfB5b26_5MK2hC_+&*~g7
zKVhc|uQ;{%MzR8!Q2AS!%hxB=V45lD7aoChvgQ^);kT<>O`Na?Ypru5(LNNVE7@p>
zgraFlTk^<~b{NLLdUB@aSp<Qw16KAj5Dfg@LM5#Y$j^U&BS`X+R{r-om5uQqto)hS
znAiykQwPC-$pOh4+YW1zi2ldbHO>rALD`#+47jI-`^b{YWP(A94c0UVD>60E?1Q1K
zel6Xf=I*u-%7mhlo*wQ`_Y)lT=UByj*0SxkpEynOK2_yT=3qkW%Y6|?EajJ88QbRQ
zw80TiY6PJo{is=|^OjbS#T22VkAFsX-sW}!>5bySyaBu*Lipc#TExqYa!M?rfvjC&
z1lpT5gS(xw`x*OCG>)0i1NTeQDT8)L?b1djB`Ifi$vY3;Q;ks_k4XLuQN?(WQD7OT
znpJiMTg%t7GKQByL$o}WHVV=%Ra{ket+8<X>FmI;>bJ9mi%01UPi(rY=m=|9<QlOi
zT=*1qyZ{-^K1Pt`YEKa6Vo8yHj9G|!%P4-t3FnV*AyW$Ep>tOCh3qHWE-bR*bYab=
z%UKy7lo`51WDjp|;OVBEDmaa5F{_jmD^?i*jm#J~t5@iFmA*WacnnufzMxbrcRAJ<
zMd6DgU3s!BSc*Q>F1Qr-GO>X`h!GjTUY^&>Ga!9|!pkf*dXI_-!KY*u&*Rn!rVLMn
z^Q~3PJNtLZWrWSX94UDEj$pS6)9n~XzzD^QE0F*dml0<EAymwK1?hGmvnf-gS)-!r
zm`(qDfh#)S#2K2ie!h&DUivXhmJjvV;t)!tKy(%CK>m(Erzl?VF{Yat-OA7-N`iU$
zD*#0EfNAshj>8|k7Tb1ol*`oUda8X!voR{o0z-s@7zG^$So()c+ugv*KlfsGsaZ0l
z<+P4sCzv4#CqAt(f?ZM|#IA<ypj%Z|SP_${to}(wkxEbDE-Oh>W`PNiTV<@y$@Eq^
zY7BaRkl<A9gKIp|h{J+<;h=|73G<6?-2w8d&l=(Su|vy#$;LsU%ge3vU_k(}gZ4tl
zBbwwUnvHPw9Hdf5HZb)asA_l!$1{lFx{3R{+&=WUJ`dtnf6n)7hW-akk=Ss;tTZA%
z43tr99nKA|#>pOND^#+y!WHGWS>_BG&NHydMX9pDDR-i5iKr8z?B3T@Fe=WjMF6_5
z4osE1tejQKI3>-Il~o!$$cn>+S%HuPuKu>Wgwe6P=Vmu<SnjY!c6-$Olpe;?>yi!)
zeUz_q7X*Uou6)Px6P+3DJe#A5&->05eA;mr^EGEnbA`=L<niw$m-;rFCt>_+y9d=E
zD2wXA>~{e?b`LSFO-ai|wMXELY`{Lwl;woGn2Qddt#Fz7*+*G_)ciUxSCYjmXqCy7
zjX~9w$RT)fPu}wSFvQlOZjD~%TNvL~(??Y-yS(?QtRHh+4fi<9%7E5;BUtBoW{nTW
z6~Y^Yvx&dswWVYGGb-KKU`8g(aFPwwHr4zp1aKf8U~eDCV&ik+GVI;f3UCv7Ov^62
z?1f_gPz3lQ*Cw`@Wx*}V#nEabxcluh|H|BT?#~-c6Z@o%d)UaiWaAXQyr-uh)vxcP
z)3Rq-J*cD~Wzva0>`Axv_cr@d@_3F1<_#oZRLcMteC_m99hZH>b?e7_|8Q}3Nv>*7
z>)#q7Oa*2}=GZN5rk5KQKm*O`TR5AkjJwLB;$V;Y4}QKT9eSCjY9*+u-C-B@bkNgK
zsl6a=@?4uf!)^vf)l2~>4M*-djN1KIPurtX!ii~$dAR{hg$FtXDRuc7PUtjvidc9v
zX)gwep<=gv$$-~W3{&8*Wa5@Oy>u4>E;C?gI!1(Y-?;N<a7}G_fR&nBl5{s=Z+uCN
zAOAweLaZb4S)4wQPK2g$>(xtR6sM{gnX}-$QAwE=Td{O<*D(LWxnTU>sL~?y(sk_f
zoI!x}{bOj(S!=8?uNo4lNd1FHa1p%~sk3}PH1?vg(0e3wmN&&r&o8nvE~Q`0tA`}N
zz@tXi_pPBG#O18$02x<%ZfxUzGyz{)m)%{Ly6*X|p#$BmSQ1eo6Uc9-UvhCM-l|j}
zuXX1?7N+f6W~($d>o0YxAh+f#m$O?CVxm`U2Z%21y3hJs5ojCjE@+wh)e%N^VX;+9
z&h0YK(<GvscXdmV@S4AlcT+wMufO5EOiunUocP!9UmY6RSmKdTK^WQo;}1Egx%n?o
z6Tq~Aks$~*5Sm=%+s6D_!=^H<NRydnSQVyeL{sBPiuI_}eO<TTv(T6`we2N7J8Dea
z!L4UU+%_H=MrMevuS@<;wQh+RwO9&i6l)@JEXLv0-e-uSb}>_>f~2-{`^CVW^&fPG
zwJ3s}Tpj3&fgRGj*U7;<G{7(ENZ#qW!AWl<v(|96lc~;9bcfFCvt$Cw>&3(5@2jK7
z!ST$|K>5jk@t!FkE_qr@3@;yrp|dTbeD*fzerrZ?&Ixiv<q9%bF<c};io}mf<|C_H
zCWsQtX@-r{l_|cAor8k_5d0CTPm4;B!l8cano3Wfj&nqd71tw%06<)R3)&A&lq&lF
z8ZPw!Q9eZk`E7Q^Mr)?GL@QQank^`u*5g+Zk@HIZPzEi!&|>8%+73}>DQKMHWs@hz
zgp1HM#y7ujdgcZp@ThGda~<oR2ip%?S^dFyi?7*Jb0}6=ZP01@TeRSUu6}o0uXcDf
zrdBwXvZh)o9d5d#50EZ{X>j|p+L-I9@e_h0(S^Fkbu6_N1YP;E$JRG)2({D6UNJtL
z_`D8Yjnd(N0c=2%zl)6%CcU!VqiKqIkGD_3$SAH}fh6e_AQl8ZFl*l)`KS=Kv9Y9g
zzpcwH?>t>w+G|Vi*z<)YIiNi|^8m`X4NqCyDe?#{>?|*g*;XWAH;Scyt3ClObI)pC
zbiwSUo4PE{-7i?m3$z~Jo^FkD!k9vO#djTWCb9~QW&@sf&A+&NYv&p|U}Cw9EC<0d
zS_ZgQmK!h1hoD9kPu4u9=uY)Cy2CsXkxJllbg3tpN~9Zv2}J4@@Ba~l-mGm%z{zG`
zasmO*lew(PLy^nKiLKgy^0+hP9Wj@wfd(+rAtW~-NjT<f$ocx*SDI~AH&wmgFd#I}
z^s6=gEqO>QoX>}X(SsuGpA*}qf)2s+^{#6Sga(W<@7@8@gP%p-Q<#inZwr~Ma0&T`
zmVY-crR`40L;4-sBS!NmtR5JGa1Us^w#wsh&3@jQ`<AVpdbjp}$hv2iV^2mP!4svQ
z`QWLeQ{}tb#Q<6E1M@%s>3S}fF=&di9%_y?NJ7X(jON6mC0;5^Xgd%oS-W)yaHzXc
z&#X4zQF2-HCdzPA)}57h7L^bWO5|}&@es-sii~pMvok{x6wPXRpxu37J`84G0R+sr
zRb@)(G<AFX<EpBE8NW(Obr%ujO0)$8UnbzcHHi%e3qTqIpX`pm6u@w>^D<wa*49=u
z((iHYSeLgv{DX$O4mbib%AV&fauMm=2!T!+h?8{8ogedAP226x&IR|xk;LR6B*m?j
zAxDzKn*pOnM<bM=$Z4zrzq{Dpd2^Tx4nq}YMGiI9Q$~b;zWo@eev>jh^cLIt!E{X3
z6AW}{4P?pT;Bsp?M?0VDu_zu-9{hX)f{-a+jq#I<JP8w<*(w#ewp{|E`q!1Y`|8i-
zx^IF4awK?YOZdC$yXEQ#sPcQS!%dh*g}GaO=?95~Qd1AB;@0pWDEYT+!H)z)c7ZHP
zeZ$!1xZjz7b|gxKmWhKm&G7cpk35d7QvoKBgA(+spG&VTo!Q{Na1UQ$b>@&TTmiVG
zzy=!M)l};CygGaW_&qu&ji3@y6LX*<s6EIy1|}X3=(7HnSxf4CY<%!KXxVQK&q1I@
z5C&tbk#bBHyj@#FL|$B~Oy{DpuLtJ9!$?$PPoIc?I*S)xK5r;^u52qyjX*WDPWm+H
ztwBc2AjT0hVuXK{huoib4aQ)m?d^d;-HV~5q#z(f)F_)HVihr9^5g6<qH1WnD?m27
z70`4B2(lF%_c6cS+!Ci96jmTcPv-4v*N2{+wk5rIfLC*wcYeM9KA$j7P!Eoke@v*4
zV^|7*h%Hv@7q(9dg>sJ#EXB~RK^T3?1&7^~V*BD!1Qu;$QrI=zTAVU*f_*(pFGlkL
zcW(xsJ$C$SJ`|KjwB>>4xE9{pEv{4`J=Rgg_Kw>{Lc_Y<Q~lN6&px1hZ&*^tu~L~}
zE@%;e@kXvNK5F$cp~A7#`||Q~4i~_nIvopt@6$OsF<_WJiFxy8R!#zB{26kteMshK
zej0i=-_8ltT1e;+Ej!vqO`b16pEVqU4G9a${L6zgIRu*E2j%dC12%BK*Rxpi(9XJs
z;7yI43(*~i!yTQ%$YZzmRMt8_Qtqs=6gst9!p?ym2F_GDy!X$`Z#~-~DJ|5g$GKmB
zet@J|a_(>jLa#Kw*FJV~1nt$>oc|5fX&FH$gvb%vuCK5U&~i%~ZuuRS;p;VaefGJZ
zRh)?|9*?6So$cI0Ei^pVEgzKH9i3OXHZ6xYLY_aiPG48HbvP9rYBfFr#81JtL)#9I
zu}ui!Obf~i9USCxQx9J-V6AJo4N<~>V%r|N_cJiVB6zAY<U||B%fEA-o#d^bjE4IB
zIYZ4FDTLI0VV{mvTCodrF2yIL+rhZx9PB<(Kn-7GcpxiB%zJ*6SxjP<ttl#VI5mXu
zjQT&#zWpS#cgGdH=AFH_|EBtk&&LSL$BG_@ws*&wvFRWS;%6H~cwCD|P(a#$>={8e
z_I(Ib^q>O~RKh1BshA<LCqEgMg5MLya*nG|cCBnW8mA_&0C<u>d%tq^3Z00oMc270
z_mQI=A8U`_2Nge38sg|q1y!7xaqe59PDLE%pYtiveL{rhS%>lD3nJ7TtXrf|C>0!^
z(PJwFN`{h~<L`0i4a{6)e1ZflAiz>b`dk13fJmlQ<f-hj>VE;{SyI{xWo~41baG{3
zZ3<;>WN%_>3N<x0lVJBE95pgH3NK7$ZfA68GaxVuFHB`_XLM*FF*q_dGLsNECx3jp
zW0WRc(<NNC?Y_#ktGc_)F5AA!wyVoswr$(CZQHgrec#W#^Ub_7>s$FJW5<q&9dS;s
zbuw3y6U!;m3mDlL07Y%A9qE}Fn0NrnjyASt`t*V}mPP<3roRvqGaNa&kUdb}(agqL
zSl<!I15gDT0b~sw0W1J!E*=&(9)ETY05doDKRgv_CkK6#zZ6zhCQfbuD>paiUl<@|
zW(c%)00Imx_3h1!&Hjcna{^>+oPkybKzjfS6B7q7z}DCR;ACs`x4_?I|EH4yj+q%?
zWcIhB0no(E8jkTFxf0gKHUMU(|KLVWw*TdG2HHFPRSKZ`pX#Xrf3+LgSbtl(0gQmg
zaEvlGj(^nvsDx~6-R#XwOdSDKhSYyca&goB+Xdj?fdCZU92|jG4gd*jLmPWr8~eYy
zj2Hj{mX-j8e}WtU3P1;-z4Jfde?|r{a{vI%98Ldf*8f}5#O!ap{ohU<?e&d-R{Hi9
z02}-N-7x<DDFiUH2K>zgP=B^I`^Qpr{0lk&^sS8;|K_myw}zpOleMG08PMTxeTTms
zCu^g>sO5hK%>YpPC;C6SjQ<YnZ?HWOU~CTr{vCt9v%Z<7zJVo>7vKN{0!$qpZFv|O
z9i2=VZ0t=K|D`iJ{Ts{h--jpaWN9g*Z}oS4|1<eN`{e&3>06mux_|xewExaf1^#F7
z|F38XNBzHD2w0m~0s&0_fy^94&0K*-a%PT(rT}Ao%fCD6UtIa0o-NI+fpRtuX8&wY
z06jAk(|_|RnVK0|SOXm#0PO#90j-VxyWqbq|0|bKR8r!Xung`0{t*1j5c#_}MrPI~
z|15>Ik-ojr{{sGX%YW&cSvxAZ+5RuZ|785vX8!+dY5l+J<qFVb`e#@ECH}qs>rVUs
zAxKcr#?^zKnVlU#&+=C}GYcCxfSZ}a>;GUHI@#L;tsVb;2LAT-U$(K?-{Ap)u0TV$
zl|>sv-T?FDv=ql`?5x3YVa;wsu`j!5xZ%%AUOOv=o^l!ODSw%F-WcNR^fH8Bd%Dw(
zNHD{SR{;F3Yt&6*LpS7#36mUUkhy1X3aqBhvo~(G>h!1P&a`-K3a&ps4g@S1OVMX}
zP?|5oOI{1Ou4Bfm$y90yOO9$b8;eDv-ZibmKZlGjw!he>J*}CwJ=|&`FOHJ4qo!9T
zB+;Qij(t=s-G5n}QY(#zJoPCbwPV{S9WPvk?DwRG+1p*yHghv6Ri(MY=*|dhD0`v}
z1V!&t@bhudJ<jcir(BuVPbqeIhps19cl~b=zOB#HThI1)u~VFEFfMF>5u#$vt<($S
z_@UOYGT<Mov`?>lTKSM(fWPE3&cM4RLz~)x1J8<gQGd%rI6`<zm?HtRNkdG9g%qC?
z03eaR`h4=U_GvPB_)>_XxD-vJYR2}nh<3XKybhL1y#}*`wGQnAd=xW<cZ@08tEhfm
z%=jGv!BvtBCkkw!)Hp=5ui?jH#+N9Qhby;ZKMa+D<5Bq4M#>vGpC12<we%YZ(luP%
zI4WG#MSpwK$?8W<CbffQF+cWOet(3?BX)M2J++yNf(vO3yclQd`iUnViT&~Uu{#kw
z`_u?Od~_bu$GU=qFw1@@bb+8fXQkI<tNOKJf<Lc8c-TF8p1-&PPp!-W^%1hwo`vja
zK$!T$OcY@G4-RQ&wj`kfmH^5PTo8eWd$CIpXMgZ3ZL{VTc2MGy5TE}a8|Y8{9KuK9
zL1+>ivZtq{;#LrH9<1X$dm1bp4bU$HAucY`nV&Fjk-y?7(%WQ9{N>mnRPxpdD5Vh6
z`Xt3v_j6)I6=G9*(@I{Z%%_uUVo=()r#q{1E#>xqzcNEHyH0TG@!-uLe{Y5JQi68d
z<bOw2@|k^b=G(@hU4GrZk3Y!71;=Fa8dxJU3jIbCoK9nN=U(;<>tPn2d6J&H$^gLx
z^0Ms8;7F}Ucl5RC5cpI1_t-C-o$J%HDkGPem)iguMQkfFEqeEp$pHTv%-kZ_KB``z
zie<HkXPaxya6lD_2TCYHl{z)H#1|dT8-HH6>%k3{pE|mWx>@PwDYb3(nT{=(uCcks
zv<Z9KqCj24cV8=lNNYa$iqxqMvyjnzXX|DVsi%bM>iLE!bce`(3q4+#J4udv+WpY?
zz9_U*5%yizr)6lLXa~Y{h-H*Y0pD6?<M?!KBkgHY9XwpwKW&hos>+q1x8D$J5Pzb4
zGT?L=Y5Rpq{E>HXVce*Qo;6n9lbJcx%D(vFxDUqgm)#AvkoQ>M3&LrA&r^=q4w2CI
zukNn<vzP4(X$M`MjgEpCts{Qofd6ufSVC{b>Hg^Aa7v*jKie=^v{*JZES1Z-+#HZZ
z6pQ=Ax#hGh+w(emDnlsIS-Fkvlz%<)fIhlwkH;0Rbvh0klKkU~)i3<ZrF+=F<Z*xe
zZMR)u6*?oo$Pg#SDWhFQlE3VPAf1kZkZhBfxHYns@Rxy5#dg{FsX{?=YaT68IY^T2
zis-!rc{3%B#vw`{`avn*4C}4bk~8y*y>|>@Id!3E1brDqU1oEyInkFlLx1;AC6zs+
z6*ExHwCnQTg95J{3TWxW-xUju<@UEYzj4?cHVkvRm`=0$<Fi`!g%8~n1am|Hlv#i?
zK~PV={Tp0dK7*GvpNb#}*nLpl%FIoZBS`Wl#hEf=r6n_<K}2_F1v1qFN%+*3@$;im
z2YvpB&Y|rbX>@Ktlr`bGF@IC)UJ3Qoot$%E5*;^QbrUp=Iwk}co}wZ8#-zHLlwAwI
z&n6-wZ(UdHHEO)6slrrv5QFo=HlB9On;^dfE-7CP!90d0&9lHtk?vced(F9+_M%*c
zw8_Hr+k_y(H-mda{A-9L&=k|w1a!nVVbxV!BBHD1lCMRh1#%=I?0*~sABv<bn$$`O
z-B_#NS02-l3HHB0L}7A-lT&Iz79c`fY5|GAzWVUY1*JR=ZT8gEl2WWe`K7N(50Yux
zESIiwj?*onx^IanzzS`K0Gcx|anyRd%bAsBT0CoL%46g*sYOsLiguf+uiq@+%DRi2
z?npvSLt>3DpMoJMsDHvr;=KyTjn9di?IctiCs6UVn&JoZOWhT9WFv!D7M0kGr%xf+
z?Q~$l)U{`ib|u+#owOB>SFp0*e?n^o(9>#Wt2QGQXB7nX9^ntrgKg@AZ@I-U(kA@|
zDQ%Pftxp)i1A62hwT<sk+rSq1;=e-erXAOcP>oo&PD<>W?SIqth)HJGVssxU>j*Ff
zxC`TH!h9QL>?W4Sa9HNNSP#lGPQd<=+;okv6|$rRC;oFwAoltBLb67<rT`ITi`(4E
zL^Ec=18w%;0%If~l_Kv^rCw93)On!f4fJNOP-?I=_PvA4kWmAgyhln2I5u>okLoC;
z5k~&00;Wv_wSU+*Xf)M%P2;{3en47l*BaxNX;t<O%B4O7tQ4l~m9~rqZ~2}>a`PB3
zq)gW%f=uKX^*j;YE}hb^qu;6_Ky!PcxvVM;SqQi=3{4$jnEz}=q4CHF*OEtTSYnO!
zvBv6XC+;CfwE+|ma=}{3CzTbmA+I`cd{S*`_Ggt<{eSJEwJDFOf1%n$9YkyR_@+)f
zD=0zSl%&DhMw_V66u6>UjZ!6(V2PtM&gigC2TVFXrn<iLk34%Drd{{Zaj%LnMKfZO
zrAL8npbGM!ZD~&twwLvqEMGfGZ=3q%vqZ>NtNLh?nu)Q)bxiid4~qV$O8YUDgl%xf
z*MV5pU4P+cr_r)axr?JrSF7Uj^7hLmz2=xE8^vUyC7*k7ML@$2#TT&!d<zQWUXzVB
z!v(fyFD=+0ofmd}11ixayxt|Ks#Oc`e3p2RRZlzo(v|}sh?krce=vtH*H(YpnvY7n
zm(VLyX<!?Jl~E1zNB?Lz?H&cl2m_;yit^EB%6~B&VSuR0gTzL-wr;_(Id(oSf}@9?
zU$&=`Q_Ypw>LM@LuUWt{@!CiULG}1}VS4S)pPOQ#>~!nY^UA2cGur_J@H$g<Gv<@N
z<<&>Y)kfXU%8T!R+8P!-u#@Z5R8Gt_VSj8%I(w=aK33!vsg8s~Nc;)_={4p$1`z3O
z#D8^(ecMAfM}vsoF7`2v4LMp^v8dJS`*b~a8m+>bVXYYSzU<vhrxxldQnx*%GM>i7
z-N?VI5&)%@BY}O&w&a~K6XFP>l8jI{L!beJODiR15Ov_%a0U7r2K&M_PMWpTv<Vyd
zo9^NeBr@NWwETYiW8w>kDh<iQx`pF6jDKL$1&lfT)KT^(y{dY<i4X2Cv-Kk4)3CWS
zRv~0f<xx-nK`+|$gVCI30E&#I!))mzsWoW9J@n;c#iYVr@uyV3ZgEi$;{ntmbn|%*
zu}invC7ik}ofH$-T>YapUmD9Wi%C!F$w{stHR5VW-spB7&)}SJliJ(1z1@5TK7XQk
z@9)k%q7I#tKXm0JX8DTWEt2JYR<kD<5jjn^B|;R+_SdiTA%9%vR!qCfeAXC`@Rvh5
zvqn{|QrKe}J^402kqlE*P@LV8C#>9l*r^({s+?Z=Z&G<mQjHIpQQ{c?c(m*|#3~Dl
z08tI<F9}5)I;X>XFndX5SUZNBJ%6!ye4ehLHDCp=ScF<%k(ACN>Mtn!O@aj&_!T4>
zic&K)e{n^3GYRgW&W0GK+T$cnhSlBMFNQ_=W;KEDzywE4L}&$-q`HPk=EMJ|twjHw
z!4BlNssnufK{z9|3r5n(Lq;bk)nErdiiFw<uTcL&|46=-0VSIGvtT|+Q-20Xc@v)K
z^ySFC0w#}}Mff1|LFYRSfAW!_B2H`@Psy!w;(FE#FaIPl(3&&WG>NQ{g}-mw3;$Kt
za4L8uQ-w1OBGea)Vo#ONWXM<xK9Jvhts8VmSisj*Rw!IqOlGfZb6~wuJ>{WmQ$_K}
z{Ng$DT47f{(q&4OI%qAfqknayT~Rc2$y*(a6jdE})A`K70Kt|j=@xmcW6yo)*Ytr!
z)OB<c{q1^H5;0?IMEX6&RXKx20wR6}RNa`LeGVHF#yh#DNpC6{?K>g#l7fUTV5@DT
zD0a_K2(xJf7eU>M6<xh<3uvH^$T%q&!MbR$x{X+Eiq1D!1^`L`cYiI@0SySV&`Nva
zPKml%?2SKDb&a*Vl|Bw|QSoSa0w#&WN!iISZ|zS5@-~#!SsuN{-WuFO_+?QzZyWJc
z%_e7IZ&7}K0f%%QT90;9T2tG<mUVM-rb7JW2$g|rRU4$qmZX$+?UdhKfvsz!MsK8h
z^XoQq#%?I)wyGCB`hPuLTjgy$70{~5L3$7#>e5^kX_vznoov&gp=ARC(=m}nCdX;=
zjp^TA_cf*@3<qd_NU!{&Y%r(X7t&n(nIA6Ch0x@(YUjvLlDk)@ei3MYhFDA-^9Wz#
zmi8pzK6OjC+s!R>^(X0$(muZuWEWe$8JdfYx@|^Gime?RDSsrpGp8umHy-0;k+9P`
zB#1fGYKFu@Yt=FZWgYHd)@;zj8vYEj&{KD34Q$%1?Qqd3xMbdbAj#7POJq!@d0@-L
zp6Ml*oJaGS!7=q}Zq-%=u+%3SqrfC&YC}Qt!6^I$2#$-W&Ie18pPR0Ld+7F(ELq_G
zy=}QgoUVPzk$+}%sP9$52KH7ER#wizuO#>Do}c`I9t6?=5C9c`bB_n&ZF%bJzN(we
z`BC>YHL;t>uvaO!c#fM&Uv;o5j2tEXTuaQ<A-y)Z^^(yW0o(ag*9cLkoVZLehpLBL
zFG)mO+pF>}*-BPg$vqw?AXlk#Vab00?MM_9_mX$LB!4x&y5%epj{)>rMVVA&F}*^B
zs9lVDi(g~k+hj2@wWmIyuN)H63jx+;En}q8h_Ud;M@e`w7;P4Hw&9M5Qo*ugxbAc@
zSH<ZxzW+zeB70}rt-!7XZMP=`jOWdk1^U_YrE|Ai*i3UpHV&8cnXwW}Sm5=!J7^N*
z>91}XTz@6P?bj50(r3ZO%?k_KO$I6?Kyc(W0Tgyvs>KL{ENA=%wLLtmv)ay$)`~fT
zWR8TVC{9K5=+c;oN+tORK`8<KINu=83hv9GkO)K9D7Q1LBUs<m7U}{+2r^DGj~jqS
zNu?EgxdnxE)7?g{B6i#O+^>6pEWg{DBAD*r%YTgATd>p;sY=wAoDtDo)4VykR(DdO
zkc$kADOHH5Yw62tg(7F74vajZQp^FFEw@g;KGfo|bna%fqdzjnC`h66oEuFHw(ZW-
zTpyJEbtdmBz3&C5qaVX{?cqNs`Lo^WWyXX6Y5y69dM)1iX?|a5wHlBpHQi~xRL6t9
z_<!luW@N5x-NUdD^ROCpbVEq3Cxlw6H%40tRNCxvFDWk<JiBr-WwlN6sLK!{hr^cG
zZZhz@lEG|R=Du8uMTVdzqU!j(?Xe8^`G(4PODT-!mu3nFY8k0Ume@2^7nGeYw(IEO
zXj5CW+q?neTOnH20~JSiVrolz7ZFp`+JD8g6|jZio|Dy{m5Z~SLid#S(fE!d_2pq2
zB5uW`ZP1Z~$lYGn>>-!p2lm&t^&`Gzk)b4&2xsk-h~(Tmrbb=Bkm9qcy`**M_;(3+
zw{Ll5m|k{3MOiA#GU)1g-b0JCRo|+3o*Z`M5ln_R+5HE5N}+9f%P3>^ip*`;x_?hG
zqvUynrXgYy?Crv^Sj~<4Sf*I){W9gu@3dFO8OVKT25b;Q^?DvXGOK(bOcU<KclOP8
zX$ix<mX)6G_OSOwY~l|ia=h?pVjS>3beHB~h9p-+>)1?isejC*D=yvWz4Y<-W_gJ)
zIWPD96-zo|Flqy}p0;MSTVzj&pno%_&L-yr4)%&x-vjv4cn!@?wPel*{#ZDPO0YE-
z5wPE)Ju++EM_g2joXvwJw|>(2aRQmlv5c?5(&7YfOX>@0&&l5X;cSs$<!}qB9HIFd
zkBB^icZ=!v)*NRL^oQEu7va-YUHIPYBB>%3easgc$SRh;B2sW}!uGi>qkrKX5b7!!
z9Np1Ih|^2YW38;cq)@b*w7jAk4(~xkvvx_m(9DaOz4FGXzD}mePYvec%U5JC!A`wT
zyogsq-GX-%(dBSZgdIcq1;UqgcbfX*P!gANI~|o=<G;u&ma6BR)02i{q~XQMvB}+Z
z3ryL-YJc>J!r~K|3t(!!+kZowm5f(uUKF$-H6hV9J>(^1DB*5oARrNC(|^k(N;W?M
zoBjjNG2hc;)IsT8_=s>+e0Xt^?^TEq3ELQN_4F&!n6)`YDV!G!_EZA=E?;BQ<<-<%
zOd94cZdQD-eygKCN?IP#;Muo!R)!%4x?6M)39|=?8x!w2Bs5{nMt@%@9rvRsO(Hw+
zK<|}@_--I?`ztuEwwIhIsWze)iol^Gf{FQ&q_EHK?B#du(p4cVR0*GgsWUtB>Q=18
zV!@pDdLFecc^!5g4=$o)RLqv}^{cbGkZhfV>-c#i?FuTByqd4q<19}*behxmD3GEd
zOMm<jGg8lb2CWdOQhy&X?}Y1qUt7!95=1vwWi8)cU5i)ChvV_JN+m%&8haNdoEW<E
z=3U`5q`5%)YJaTr{vV**r`{zql$5WS(7g6okC=vTF(`1y&0VEz43&q~N<+5_E0vpv
z@dSGpv*i*RJs%&eC)J1dNn#k8{#?dwIwVP3g{3k3KC&92n1BDJpDfJdrN<6!lDYzA
z=adaTOqywPbj>V!CfC-meA*9Af)@9JtOs7tw#_)2O}}r`FPiQJM`?P>FJCHeRbfFk
z9Kip^(b>>{>A!NRK~m+Q-pX#U-RMf}3|h3GJYN1yH=!XVwE}88Qy1m15VHO2R{POv
z-Hr7bkCir=zJC@<VrAwxqkOY!UPxQraPQf&I|0Pc!eSjh6V0t!DK(}eYIewKS>09Q
znS<_Y4yb!ozPYYR$j00b*3b!6zQhhJ+mSKARlB)<uij?oINjS4Z?{#jAVdh5%_Y^N
zi>1>C;FOlZR={Bv+f9I-oeCp&k&nJaE(WEmBiBe9d4KKNH(Gm74q`bFPE0AWE8Vw7
zs6)Jcr*4;_Mkc?U$&X(0@g$gicUfQ^0$`gKjv5xD*^7PF^_yy<$f@eBV9Z>{THCK*
zuO5xz&w=<X!Px1aG%+zAc2%04i7r2>I9RL@IO*^yQpTaW1~*dau-A$9)^sEd*y@zC
zm{h{p#(%NC-sYp)0wLQcs%0DPV;p#x1rDMK5cS`UB1DRVFqeJHBK`)~NE`zW%5we3
zR3(<f11{{~`0nP&s$Dj4YK;O=*dJN7TP`6&%opSlyXDP$1t~e?_(I#*AdfIrD0_AI
zr382OP3+HaqZ@V-$i+`BL#||Dl!rE!YH+?-e18{e7m8lyL6fpjzO|p=T@ah&fj;|&
zgdums$plQvtc=T(I(XwU*d_Y)Kh4xqCV|OlZyAYxO)YV&FoeU-d2}8_8EVlaA8lYv
z_6Xf;@ggoUUZ(sks&l`()V5MLN%5U2wk}7XKi9*>oJ2Qb3ciy#i3EduupT+FXxON(
zJ%3*{#Vu~16_QE&wAdgZCW1IMf(B){+X!Loy&&ge@jr0K;--b9TAF^%#(lEDlY6vT
zW=%KVS;Xx)OtU=H>c4z9;7+H|toDzPj|YLL$6y3X9DFXVroP(cI6|b-YH}OO(rBJZ
z!Jd8!`2+g`$f>$mU{?_bo<Uaa;|^*D5`W)c%Ee*mSqQSmW9vh!M=qfDTea#LW3Lv7
zoeP~A5<~5OSAEC#Tl`L~Z_+0m_AnAZM=VLtqgH+r(Q$Pc+lLq3JhTE|41)Icvq7)n
zy27rB)3G;(^}5Jeh9UwPY`AeUWer0_bBaT+B{g|bVc-Uf8FG-Pw9D6%JNjgcZhyJb
z4=uhDe6=}}CP61Ra6~ruHiJQt2&}Pt-yrrF9K!01<+@*!!qdo&z`HxBtdvCbbiX9Q
z?y>Qxo~WuFg-|P~nnyRygA=yFc~9Gp<mS8%CA7CS_hG&D1+pj2Wt(j{rg%()JQPBI
z%8<}jen1RsR`}<TnAv{PP4*Tjz<+vc&?fXs-R$aFswA=)w>=jvK?<t*bTm*f<`Bmd
zJ0D;=zNayik~~0Z^W)F9J^o{j6eEatT|Z5pYJ#M2=1-5x2g9IZjVpB4w#P@t)ki(S
zGd7uAIQ>N)f!xJOFo`8Bj5bLWU+K&<zD-BB2wY|`B&3b|P<g+1Z=RH=Gk@k#KTk4c
zD7Y}MtRGML^dobK)8_8zk&Lg^wqDR4!l0W&G`Swy7@mIYLQWF7pa}B$jVlVubnBUT
zE}bQQD&2I`B}6yGwKlc$1fX=AA6Khe)U|RLPh+U>D5~ro6xcnEL*K*h!+(mNYz5ib
zeOY?@I|1ApE#E$gyEbmu*?$D=4(X4*=Amda5Qysgmg0pqR^IbrRU@Y?uC02pGq4|N
ziT2>ejo{`vPuwqINe8_ySxD5*A|+7;Wp(fUY~S^8>ZGU!dJ4C#%)i2B?}nIZrgHWZ
z8(JtI<L(T`#KzLXBjbJH{m2#c4k8xFW*l-Cq#N>Q_y8Ib@D2cIUVo)G!HtX#XOKV)
z{y?fOdN3^`O=~gmVr6Lc!v|=+a${GGiQyG89Iz%@d@Q<jh?(gzVf$WW!5E2>k4G;F
z`3tPfSS(qJ9fLjWJ@sDN`u!_AU}4oF_|LEi>N3jcv6S1MF46u9nFe~Si&Rb_?SAz{
z8sstYUQplZ0I+3!7k{vnrlSmOP&1sKFN3HuHMlu;+{`EjT!-T_Z($w0TO}Sn1MsXf
zJ^E#}xleqCg|1d(zDoszc=F^u!8&D%AmfI)i4|&yq5*r}I^-hr-apC04=ywWa@QlH
zSE3KGMK}7YXG95WvhT%DP1|oEnrE|Y<SG_IkeaUfl<&!PU4Os^zi<m-MFLEiOAz5N
z0)}+GTY(`1QYNDk;Z(|6!tjs?BUB_WJqDSzn1GbUrkS|>sS36>YtNDZ9-`k?SbEfd
zaxac~LTHmXnGLdJiguN8*W8ed)K7@4QA&^hEah&Q6bFS5RjF06jxlFY@-|3fmFKWw
z->6h|wlCy>oPQR4jigLEt$U-pD+Z%IGny=O;ds~Nr5n~BYw~QN4yBHOUDf}Tf$XW6
ztt2%;;5E!XX{!(?pb~j;2u5fg6S@r$`c1NM)^F*9Ck2~i!;_U^u%)2Y<^rp_+v3OO
zd29r>KiUvpM2fCGSpyq18Bsh83ZUtIx-*KM1?JOO?|*IE|E4#7?f!GkUSF!!PqS4l
zp8KtM85Lh#rxap9AfWXGg<Yu0e&To@HY-p0)JV8q4E^{UTWA1Oo95%ZP>K~YmFpyF
zxUUKn{Vw^PwC;rZE}P=9#zg?-bWNuPiD~WI9;8JxCw#Y<@Ez>_!Gnwml1oJ=`bRTS
zNVGp6#($|t=zV|E;)&>s@(9Uq-Z!*mn%;3eIq(b=Eh1Uw=w9pTt@N9SY+P^EA8OU6
z{#2Zk-?BDMTWU2VF8d22JU_b@u=n3sa!6JOUz2M?lEyOpJm$F^6-Ch!-47t&({+Y~
zE(51-6nB=OT#Yi{bAH^%AoIA_;1Pf0Pqy;ttADHILFx(v$)OU%!IaTfH4E016=C%v
z;Hlc0B<2oca1>CU!Y2J;C09f+1BlYPoOf5~xLNVW#PD42p$GmriR2q%2&LQOOfu0E
z9ErcjgFp*pvOI-;{HRG!JYk|RqNI=<XlJBpyqrx!aL1I;3npPgX+HQdCsv~lyAXLe
zhJR~+msl=8`e*k+e}dFdc)iVMQNCy8_)8gtp|=2%TnB|7d2{l}`o(fZZ28hH(uBlX
z#gYus6c-Nz#nLJHwLBR&Pqm~&cohHpZ<vj$w^&6h&El=(#}AYg7j>{g-r;w==4-#$
zJ*$4<PhcAZ!n$X@dTsD1+hMp8TYM^TihrUb+_iZ(F!?g+m2}B;a6DwJf@yLig5}vn
z{;SEb=QB@Gxvp>oj>lg6hfCtz(E%l;X9vxnQxjl8^Ed)b-M9BPeGIG9NdF0P-uTm5
zrIO<`o1#slp<)d3+-AM1!kso7_EcobNlR(J)bH`5hX~}edC0`TT*k~atA-n~TYoq*
zGDj6kanA^wKs4BV&_*)1+6lE^yy%h8dfj?WgiLVt6C#ie{Cvpi2CPxuZRqxxvq8xt
z(+xboGMgZ)I>r&+q*+y>)Kz?XT{>EGGOSdGh_3K{s@V>t-g2JKzdgo?*IcVsvSL<Z
z5(~B-nZ-`jHKH6T%zQ$AfVS2gaev-x@%Jk0O_Z`|1d{MJ;F&5^Om+4TWs+28GFl&p
z(kkW(f4lH=@ZGZ)bf$;y2xVp@^SkI{E6_}Np?96b+BNLgQ-t(&)Y{Gm7k`h)X~j7f
z=vfgB!qsLW<Ioi)nRyt&Tr^xyK+wOSw^}1K(&HH(9O9*T97^4dFla*13V-j6s(2YP
zkHsB5C7p(8+FZBmJn$1^yZup^#{Y~js2;4!PbMUunj#fJ9yYL^ozU7KQ~y}_$<wo*
zWmh>Lin5WqL`u!`?EaF3!(kO5C^5T{Zya@Z!NsNz#e5FR|67?h8}E{92W>1W%sA*A
zBNA-;wNMs>25xT3n&f@}PJgIZ)HXvq7Rq~$LI1=Ukx{ZM#)T4Om@pt0LnfZ^qy@0t
zZq)e1il4GUi79{(QGDde$vLW~B3`t5k)PN|p^-4_=2#Zn1<2u37beIev|j|lNo{Z9
zOH%zMdFs9Ohu<>g3^rv1>cxHUXUNU$A0R|&wdh?9&hZ5icAGNG$bSs+Mw`3=M-^Eq
z|JDMmYhp1UNEi-c!h6_I*xLd>s9LXm$n;!0CeUY!j^r5>AE8M`Y8=>QDOA%Qxge1+
zG^McjMwG*uB_f&|XJtG*dmhrsKPN)xv5c6=`=&VJ1_37OHj|FPAKhSFq4Z(7BO;41
zQ+K}d<@s?j@iG`Uuzz6S&IRXshw;6lSf12qD;j#G*`F2K8Sx?Hjpkb%##R&w!^eE=
zL2uq6Odo-1QDu^Fr}Q8V%8WA=KSW2ItB0Rkx1S}FT#<igD`-1Hlwdz{x;pBczx!vV
zPNCkY<vb4s)s8XZ7v0!`7{2G!Q$Q%T@6P}{<`P^9>9x03sDD4|=h6L_5{X{E>EVD^
zgE~y{uNk>hw++{3dr?;>A^llT2hCTYR$#o;Xt=c7M-8r-kz%1(Us*?&a<C*e&*G^R
z>-%<TDHnQ)kSo}CxhdW35%D^!>yZm0Us@1zR7<}d=3<wOuxdA#5v;`u^*0^L-dGSq
zs(iM<(WJ(DWPgG<F8`dR3X~tF$xKt?W~C18=)5Si50XSPp%l$n>~Ld)z_`lN!WO#_
z&<z>berR`>0ML4gsGf@X>FfI|kz0{r0hp5@D+NmRoPwD6AM^^}Y%1x_$u&jA&B#9t
zo+?I5$?SA*H)>V+p<zNzI(Aym8GdfT@TxLsd^gGn;(yTRzz16+x-lIEnW3-!F7@KM
zNwazs`EZG_UeL$+@N8y#p0O;IeKTWAgysAzYRPK=4<|V~pM6F`1Ka8Z3uC;$%uq-K
ziw7ebR~WVUoaAth4PsVcN9yc$jFU$@c61pHX;kLIF@@oFZ(U;wi`cp!m#@B#zXm%W
zhCWsSGk;1Q`R&)eyUX6JYVgpbqwJUfEvp%;g;1`-m(8Irjj^EfwsE{&xrXcy`}?Pf
zTaj@BmCo?1%l$-k48)50QQ-~ZgRAnl$_a<`bU|(2L%QUxYRUW76&5Ry4ZTX{J>nc`
z$+EA>)4~X=xq%&-%Mjkq#z|03*2QxvXhf`he}64*Pg{1!ys;pB<U)!=-jh_Hv$0>(
z^ng@WK$R^_Bsiv1HeoIzM}}j{+)lIv6Pi9@$$?}kcb4OB=C#1PQS}9RSg6VYzpI@1
zeYLX)M1njJ+S-zut5~Hy21fc3Ww=YMN3QBN&9^#2IJ7TBCR{yxhbOIa>A=v$h{hEZ
zZ+~_=?A*yh2A)OY@{>1=mKX8IEX+Z%>>K&<ax!!`Kh3cjz7~1+QZrtl4`~QoLem5J
z*M)l+LHXCjAy0=41vbxk9$N7Sx7<*gv!#;>v+AOXHvfz<JC!$%-_|F{a?j(I`ko_B
zB)=U&a(**AA~n<`B+R;eq|0bS&8=xd@_)6?p7ssf`E}dC%UDH+e9W~3`S&%7RQwDC
zdHIBy4rY(~pi_|W53p=YN0B>pk&uk8KXte4RAB$S20U4=adw2W^VQL95@pageEPtB
z=7+!G!0{_pGlbI$%3a8qB&YZB__=!)SH*t*G%pY(ySmjKBRFIAn;s^LdzF>42!A93
zuUoIY&NG4(n2LT24jp7cfR+uHt!ri5U@)?2IC_3!lJbZrNw!?De?<^D-K=1)86zf3
zYyl4~O!?McB>f=meNrDpPRI68Jv*m`0lh5d^$?4bWb@n*ry7Z=RR5z{!f0=Tm``%+
z%Cs@hB90msj~1_hJf0bAHfhMHqkr5x(zZ8b-4>p2K+QvZ+NRh-eNoJmc;#tJ=Z1G6
zDy08g2vM5dTq_YM%KhvwRfzZwtAzIxyi{{_Tb5mtp@}Ull-gBT&wxLxvC{b!bos#D
z2-Ld``1YDI-@3WkKzX~?6{2S`_AWKIrlOKxhtv5X$qGK{#vkBZ(kIl$pnus29L2EY
zWjdCZPX5p^nxr;w3u-LP_TD%M_$|-~KBl0;zShx>Sbk@fNf_w!*P%5(DV^zA7tUIa
zmW1?@&9@GwxIvR2ZsVCnjyIF)(y2%y9jj^SjiG5I1G}o3@w9B$^qLx<q;YT(BvG`d
z;udIfw7bODM!45lD=8!O#D7OeOs;G`v%B?gerKdk77f^}ec{s+5eJ)74pIE69ObQZ
zwJbzM6HtCC3;8O@uGf2nsooI?W}OWxHl=_Mj>YqVppBAW)M9b`EZv=3?lP;+l+5tM
zOV~m8>uBv&Ha|(z6XCfk1WosH7k(bkSAn#Y57YG+zEJtUzfx#0Fn>qav>Ry$37YO_
zqV;^rAY_s_Jm${3yI%dzA3-*{{lon)uWsi%3w_ZVkUx>SpCt72a>@J6yYP?Me+=ob
zIacH$kYSG1@5HQSsfd8VjOj;vliB*$t;+mKo~hgq9eVk3qde>m*QS5|hI7!OU)#`1
zk&u~CO_>Y2r(6HFn}6P~*Z!gV>?o0@88t#B0{<~@bwTAk>f`k?Qv9<*9Z?e@#Xcn4
z_VD`HH6`0<x;cg~`xW%Ar8J^n9I+!nlZhQvtfLTo2RmB;Y2zx@nCDMaD75knu8Dhl
za1O)OJ<nAv!pkjOnC^=A-P7_JnC0vqZoggq{ws8O*c#vQw|^xUtKJWqtC~F=g5y$x
z*6Fmog98VzRS~Vq3_?=^J)x>?BVC@7OQ6Dc*bOSmnIM+dl6qm&2ks5@5p<gUg<Wwd
z{f7pFWzY+zrSn;C#R*+_I^FsdZ}rj|mO3$@{QAk@%u5SnDt1k>+i%geK4vI0<&xc5
zlOw_5X0Foa6MqU>ExUj!Q<W@8S~HC2XFWTks{InLE3MYK%pW2@c;yHchy~cflJyFo
z?j_A)83MbC4IHB`Buwk2@g=>Se#LfhR*GU;W5gUN&>ttdV?5rBy?NU67y(y9wUJ;R
z_df_FeiZU|6S5~raRefi;DjL``1FjZ>i*b)`X#$q|9|^Qm-I5lBc-B}&Iz_|b64hK
z><T*IyV6P*f)<V~Ou@NgLxcplmB90sex{VmK>|7VBTxLB8IyHt2)}f0yWPIm@SS3l
z-KkeUSo*>Y08S#jKrM=O;Q-a4oD;7VvDi6vBDoc`7fOWf4n)kG6EurDu_~+I`(4B4
zJQ`_Kh<`Su-Jc^pf{R$%@H}&H?QuY1LoUg$(u~x*d8j{I=?K?aql+XuD`#gefj^Gf
z#wpX<d6mbpu}5^j)ZrO%NX35p2`;&)xTVpJnb#QUEz4zF;K0%V@wd<H&`PEpv`U2I
zbawIdNK^N_5s6dX8+texWX=QJJlXvi&{Tbl6MtSSm`GO%i=_R<x)45G9^e6b!4a&z
z+qd8J!O!ZG1aDV*{@baf3jeLs--Bqi$9&o=q+rZ&e02!7qd{6<yb*rf-Y4m4{A37Q
zl#POie{l1bCN>-Mc9lF%tfhd{Kh&HpZ+5Z|4&56xigrqg#!n<rALe-{9Y3V*dVxZH
zQGbI%!AsI#KNIi+Gpb(Ul?79Cvgi#TEUI%xyl+8Ev1JqGGYEKd-E8>5_tB33z}Hr2
z9$UdN7Ae?E9+wyyCxPRvYMn^QT+V;8T-!UZyaji4AR7gMiNL?gi+J}~8{Alu<hTP&
z+neT5Te{<m{XK<`w-czYY)-eRN!y|^j(<(dZXxt0a^qp!!k(%KZD*JdMW#9@-IXX+
z#I9M32(Ahx;^jz2sBlh(IrSUOzPK_%(Ape6)}&P6BDBa&pAb0HXfe^p#&LsIZBo9v
z)EJPT_)kWCt2^}J_;{ULcklY9JH7XPM&vszwa~C|cZUfvNH@>IJuHy>e6{u}K7ab*
zhOr=2Rhd`J@wH`qnm$bnCJx!sa>33P2zk2`(lOx#h=4~1yeeQ%8AQCa;otk8yPO{0
zKFzEuV6i1im^J@G_rjdxr<n*b#FOEPSR8I-hFg@G!<>D8KJDz1W0H+Pg2uqQ)6Pzr
z^?L<VC^q{stHI$Ztc{QJGvb;k1b<((qncHZ@a6m058G8rZ#^fE<x(uFG?N3rM6nLO
zotZC-WxeR1hQ35ZF1EN!lY(NLu!xeo%2mv$5^CVfG6^LdN91_mmm*SP2t>4v8GxeZ
z7;FLS3Vv`9f?kdeFft~q)r&HmyAQYr%ld>cHXtW3-T>roEBsR<oL0ca-G8`<WA79-
zaqr4$>=PA^>M|4t{}P4)h3q-gk>X>BUgFpCcc=mnR`!WkM3XlfQ$*#X-S83Aoz}~c
z%lcPDNq8l45%_3Xx@@Jm<4;MWEDx?6g=H*{#ttu<P1$sCrMU7XQVz=?w;OXi_dQ>D
zyGbE2yx|?JQpmUpqRFS9M}MdFrI|S0aUDyTdZVy=nRIvH4zJi7^15eED(~wVzoH17
z>e<rQ(9M1ce0Dm02M5t0u*3@k-HG(I;ztBQ<s`XAok3ar5_$b7z-WgJD&x8AH@VW8
zov)0pQDLjjn5IP|qBo9EUss+7ef%x^skU)IpApowlg2F<zN~1W&3}QCA)9o;`dcl~
z#<k?FltMt<GX~0b!9#q606!&iNM~^`mPHqB`I*m#2PmTa@cztQdofen5rpFn7=G93
zQAn2Li^VG^EhFeEGt8i|peqKG$SS(|y@7<vZZzx*yUe`;*)NB$6n2xiGI`xIv7w$&
zxZf;SHzhb6%0Nf;7Jo4pm+y8q-ux+WP`_5;bHE1*mYPOeSK__I2tx73CP$Pn(<*}h
z_iR<H038Gox8yLeEUz_uwYWLj6cL5vm#%+4(vq#Mb;<1`=e)8VOE&od%FE)foy$T5
z7ayO=aBI}b8OipMlA;A)xvBm$+6jL-duL4tq7+s62A9k=|9{d@YFu?#ANP-9{V|vP
zT>oi%K<=1t+E7vFa68S0VHeB%R4akYY=Zsy0cG}Xw#nHfOmT&ooZ)e0D~;zv0TWl%
z-5YE325(4I)iwmYsZ4~jUUUxT24|O1-`5wSX?R3chUdfv_98M04VgP@qz>U|su%yB
zEwffraztO}rhm{zTjPsb?_rVZG+8T8i9Kzx{u;W4$7!j@x3_iPH&`{zp;-}tE7Am0
zc1*ZfAAb=gBcC(J&8}>Ny{+JcToHQew9)DKVk1#iqs-!C_SLC@#z-rnEmkn4^klzR
zETlhYT_a>tmLt=FCgV*s2HR}#`VIMggp<B`VEJt|pntXU50qG0+Koq6$$KVvshV5^
z_cwjfu1*!NyytArD$g-t^MqBmKMrdch&3~Gwqb7*(n!}+4`-NAUuAvGgp2A%rzV)_
zoc%H78SVp#@{*K!6R=PO!4fR$N832LwF}^CaGe0*+38;MeK)Arru!7iD7I<R__@eh
z9uf1Q;D4WIN#1r>6ryzVk++b*fH4PIz2)}=jv`3xD#>W(6430U4CQy2Mt0`&?XS$a
zk|#DbGl_0%EHHYeKX5i<V13C8Aj3eM@GAmy>L54UBSY-#$N;h>So(4M=%*zww%-~W
zy{D${_PDNxDLJ|^S_E*heMKlUeImV!yji?B9e;+m=w-7SZ}<^p@t##FwnA=KEkb!9
zFg@0~a~z>57D6GC8_dJ!80xkX`BKT~e>@hwc$*D!<EYzaJd!o*Z75xL0KFkln8(Bp
z&9<TkSo{*{BZ8|eUH2B<g6CHb%s#&vYj3*o<SG)wcy{#p8hA$=3;pvINM7ZhF<nJ(
zCx0|KGA2P(hvTn^{hyJfvG=9oixN_l;Tl<SnD}z&bs;+g>LvywypdoX-RGQ6W~VQA
zQp0{mfDd$anXi+m>rC0IdeMUh0FAG56;w@V21Lh<(dk-`&H{LT_#Dqx4d_q=&iC;@
z>-Xonde|u%AX8I}{dxvR_PZUwLcG#sr+;+*)P#L3bBc0^H@l<CkIJFxO|;TUmSz^m
zo|CNGTYJo-!rmBXh)=I6aWqfGV&pe#b&TQa=(&kqD1p?;(4il$YUy6xg!!;zqG#s9
zWqJLWcx1SxcI3Fw{#v|{GqpyVo6sY{IADO{)A>crjfVt^0g(qe6-Um+9`VUI8-M0j
z7;tf-%KO!jAiPU0Sku=<ArHLk0%!4*^b7(FZTh1RYX7JpCqy(6L}!n@flTNG$63B+
ziYheZiKs*sxu@sl-@V@wDyKOp6+FPz70W`c0$pP2eNg7|$s1R);MBk!9vihCNt64D
zHe}dr<aLOW<<FUpVhX`mjJwxhynh$Hz6pI5h{^K@verMN#Y2`H%YUXB$)I=inKn?Q
z%53x}1#2-J2ev3sKVF@AE_MuFs&qN9MsbTNchY`ya1-v6{zOUdjE2(h<(Kuu4!oHY
zmtJG6d%KaDyCTVuit##(3jK)nC}s21=&P*Ld$gTv3KV0Bg`Q!NaN@v(0e?C^)=h-G
zF)I$Ep(-;)OYI3}*^kz?bEHzq?}wPZ5P0rp;M&*%<P9BVrs}<OOr2vh#u^+t!;$jn
zFJ!=<9nuy8$sR~>ohrI(S2d|YBlz;V`O6}_;u-1}Kz|ZjKOD4;X^5XxV``lDp%WJ9
zooMcGC`sDi5P$PIS?2C0?|&-WV=YoH+ayMq4pta<Q~eN*xW(F6m!sRKCHT=gfa{os
zWiL_MIV)*PvzClS;DmEdLpL~>{(QF;5Ov`R70i9N7KuJ(emV~s#xa`eE+|$*uKhh&
zxx2{|@vh(~fGvKq+XGDL=Y^&u*aL1}qn4kcP{zdfff!x*`Nn|Q-+z_qdm%Vto6Lwo
zi-m%oLRo9SB)j=Q?9r=aO3u32wQFM3lX$i?8Gp_RMTfUNl~4-2!?({>)=E{^$hRm2
zUO&u0XsBxM4SvwnHM1S#AdXC*KDn^xSjI3IlG4p@L2P58Q-4EbeMSzRfpf%0HJHm7
zoIIZ~M=2%fjs8{m8h`J6)|Q(NVSZ~cy9)N?2OYW37u2mz1fy4%_pue_&7le9<Hkqt
zT=g>~7BE#4`b1^ekX(bvpU527{iC4;4(e(rI~8J%)c~|Qx*krzrLv|RQIhLgiMyr{
z3?Y_LB1Meb={Hd0S`NG6W41EH?UO%=ZB6b=wrcsQT9|XDpnqVX)_REsWv+Smd;`zB
zemYMgI-nteGlcK6EwvDG8&bZ`WBNAhS@lKk%>zfQDe#F$jJf#H&OV@JC@-nPm4Q{|
zlD<L<k!&~z(O3wF)SjX!R$(a%8{7J~idlQiuQQySJWo(MoHc=$xJACE2}ViN>&0JW
zze*-q8{$NSY=2&2i=DB>V7FPw6Y;+*K1*J&$99Yv<P9`@3T$2KQi|!VT)za-8(hRo
z{8VI5G=ds&QqW1;r2Ve@E4DZX32-(y*V)#(XiS4vaq(gfn&rnRKSNZ{a=p7s;ID@(
zX9#^J84X$eb30$TH`=5JnLRAj*mmM&i=9{H%gL9XynhG1z{4N)Mb+TmX>2%Vgw4N`
zK7qUC`5RfoJKGOEo)P%z;QfvT|Cp^L`$;0<4qSMPZ|U$#o(2f_XuKR@v77HM{FU=Z
z&<QjD{HP{$3$C+?s}arV0N9owlfXbi9$e2Uq;&MWE#CeWv0wtCicF?`8m#<4V@f@*
z-`mmW#ea*6l&BajdiK05eYIL{bk;rq;D+gT{^NxhVoN@W;BK*Md+~LA&~X}c>Zq!Z
zI^~KR9;u7Is%8^IAc-Jj6;!N>C@?8{<k7Nk{jj$NNoWGbK{nSGw^>7wI9WP)@#mpb
z={L6Sc#yvjpJCQPI?{+KMb{1r?eFicMzFt7i+`(-eB4ix62HX1TU@<QK+1i$H(!00
z2qqF5&V!18I;TzTpAo@$rz;f&>o%5B`7<hGrM+|sZi&KF|9e=EiFUN|e7eCitVPMJ
z-xF7&M~T$IG-+srouv>5;Sz&kl3D^C6x8fn!Fr_#GKoqrfvA*){zcmL!FNBlZ#g~m
zEq^Lyk_Q85?ce<Tf-s+}6r0s-%WEAYN($+_b~qD|8G0o*8B1y0qqn`SAvf!dz6CT@
zfe?QMdt8(z=gLB&GCfyL4ev|cb!^>Jb0$EP2H@DXZQHhO+xA3XY}=S<V%xTD+nhK%
ztBbALU(i=wUG<*R&nq=!i1qg~&PNKx-nbld16CEfZTewJ>5Db)Zd)QilTO<^E_kfd
zj1ZJ}%dxSmRSQV<HB4rvzXSj=Q>W-LnRABxL0~+p!m=Qls@V~3Hs*g+!_Nv#VZ8p9
zk^9T>q~P&f9=nUKvcwr`Mvx9qgju{eU!bI4<20LZGb{a@Q6w<+vnoop_~w?tm(*|>
zS%WJ~dWkfS8+ki^cH$0lj*YU(#2=i#U-aXy8!_SEZcm<vmJ<RhOeMf>fR1H$&DyAY
znU%Y|TN-CWX|!VrN>g~ZxAerW`jyjdYA|{We6E9vaR<M&+b+|qFQ@#Cd`7MFZYnO5
z=Qbx7Yg)nNpk$s9r<WggpYM?In@N1L(Ffh?MXgn2VHtn7MLjc(4F(E!RxXIB*g61Z
zHj{?rR9^D;EbQV47C)drXGb(n>z5_BtffjrGGmqmjoVE6cJfp@YgYtP&69nudcfZ2
zLCjrt2kpdXSX_YdoLZFuj$RKcb;%*8d6fE96M7pAoyRsFO~<JS_#hS>+_tVS!W_9>
zpX???+99|o)OLv#bAX^5Jh_CQm}Y=knfnx1XKzylk}Od|K_I|>e@o1vqrys%(>`et
z{+3Lp-Lv&IzcC@*?_bXC357dgf>;zH!tX0_Y<D{8b9l=1n=U;UT=+QN+c4SdGo_d&
z!Ll<}wUuJ5dIcK>!zruc#OZzo9VTkf`K!tUNY_1Ge93-B*%j|i`eVzo2CsPKFSeug
zxCV!BhR(p27!5#z8MH!{=2zel#Xx7ibKtZ5P6Aw-D!(3*05`D2J2s}S6F0a5)?2)W
zM)|5ey#%x=I@jZuv#|QF&qBeQTBv$Crb0z3^GS|+F6oqxX)v81vuEGVTgy<3{^|B+
zIw(zAAC)G8ExzNIz|x8mU^SDFOb1s4NYmqIt((;yLn#2&<!JszT;+DlE^y0EzLviR
z#QY@%c+tE|;Af8fzC#r6>9(L|AS`N-0O$ef+U~(XwgDAl(0s{afCU2ywU_5oiM!uk
zV84m)9>E@|M`$-K4#AEbGBBcrj{gU)x%d2Uq*Y30Jo<FKHOORWo2~|X583?J{jbIM
zU7rn}vfqGvL6J&L{nRTiDo)d_vLoR#8krmG%iMTR#%YJ7zXx{&GuU^3mT5+M#~%$R
z`~5)eTY%hmBO(ydG9L9*p<xF5TrCTkRhWo8QQN`o=L96G3Jb-W`eT327MVC*{x#q!
zt4ieboox`}AJ4%i+2PvOZUB;Cs1^IH%SetfV+H}#(y$ddzI@!MYLq`({i|yAa-NEx
z;srCm7cy70qxjV2>nKcH&F0~<dfx@aV!u(-ivmVdl|JTLADtBFfF6|<$*x)9rE?lF
z^%CN_VxdG6cm!|*V?29O3^sm0J9Ul<X~CDPT@=8uRcUJkV@QVfWu*~O+3J^=A!rDu
z&I$usCUPi(#NgTzd5e)hdG|z)iwFBj1`<1MHKIRQJ~rhg&o*xsEH)A&TwMS0_9!*v
zxTZv{kIuPxdWJysKXEa-dJkpaVmlmmJa6D@fv<VJH1{n|ZSBOKNmb9-p**2EA0su{
zeg>PJ>qE4iybU4&!>3~vD9vQZ$oCW!|Mt%g;VYq%B446$X$XpCc7oa>7EIPhM#+ob
zxREOdY1*gSx7~ZVE0Fy7OAd=jkg~7GUmgM~ZT=RdnB+55Jv&2x{f-T!{V+9j$uOjO
z3<XcWvMr|#!XLt2>hnqb3X?ipxf@F9A>@-~|4Ld3Qy82hQW2Ry`CtI49~v)9VEX`I
z6zlOp9*x+Y*uavl&KaBaT<pz6W*zbI{R{i-o;inFLP8`GI0J%g{*k64S-oxsQrxC#
zYd-1rFk?*_zd=2)Al=V-`syb)hZ=(>dXw#jy}bF&m+K6iBH6(`os!giVGW-dr0s-S
z$^n@Id3{m<Q|C54ziKpcm&OjGni~K#15&8mrlyZNc2v5U7OO@n?S9W3vgi7G@5}v2
zy#_GdP=#4~$G#t?j|UVNF>ETvM*Dk?@5t8R(-~l6(0;_Rp5K9=m!O1BImFN5=;oJu
z&0BexENjcIl#Z80qL~~0WCrr#VWG<eIEx7f{cwBKM*qi}RzjG8$y}z;br@jX#4pF?
z^Qw;xRn#kL5fkd~<_9*`Pv)<9s@#~k$v6AC5+1Zb<2fE$WQjn;R7Tch5SB8dwMM;0
zVkUlrWO@H?YR<o))fU@9Pl~?*E`A>_$udRZAyRRkvU$oe5h>@az-Y;Cd%~C)a|<^m
z?=x~O>^e<7E(GrA(K2^dl2-t#yUD+N`Fj`{OYkOGtdDC}X#Gd59kHL``&_X1pO?}H
zMEmjm7whmIWRBJ#rLudWS%*hDS6O+pKAM(<_B<}_{WbSV$<h8cNwYxQZkzK&WFIo6
zlq;xkju=I1|A1V7YTuSUcQJ!7t|bJEg0kYSU$iL&H+xf=2(x3vE>ZwC2p!D~w?)^K
zc&D>Lo5&a$LBvLVS@W^$VTX0xGY&5_RXTweHH6WchmG&K1llSTWx-y4`Vxb)K<be6
zc6@GJw!43YNp=O~(&`n&8XVNKyBx_k05DI8h&L2Qs&zyu{YZN2OVj*4D9s}bec$6s
zklTs?kyKIUdLWi3iFtsvQ#yX+Aofc*YW1%S-Gv?d-IlWO4{@U*7!KU}-ZK%nlPpFP
zgWFNA)o8AGY_%zxsWEB1lwD<oH<Q%<`M0YF+-w|52=OK@FT!DuIaaS`&ut)}xiRuS
zp-sq~miso#9U&;cvINM%fjL?XV1JMiyB4U@BEP8H;y*Wau(|+B2eS&!$BJa@G?BUb
z5e^KTU!kOqKGqVukrD5tp|(!vGWkul4Z)*(T1?ag?O&15+1l|HgIT5iH1RoXJ<}a(
zJi5%iGqaO_44v;iM}zZmh%F4;2=23fpu(`HJZ|@8ZN#uca&u_kzd`-vb#Ae1AZ4b$
zOkxK_4U?Rx&{Y7tiPI(kE=2Vf$Qbl-Zc2S)11^?lac>b=48Nk^bXOtud}^^s+~YD3
zaN3=qNwayZ=h5ClSIIn>vIj`Gq8&2zSC{@_#`|KNZ=0oKoF{+f%9*xH*Stvv`gXk8
zkYp;P3FFJ8@DXjRLPW}3D@Eslveb1aRL>Jz+(pjdC)@ygq}IF4!-dA|*gU~#^7QGP
z4!+#O;B?v`z^W*d9+_%k!GhA81IZ5;z0p%unv9*Z9<ePA<doG;%r{xV3bO~1f;b1y
zkqz<Mr6shC6-MijJs#1q5%bO+GrgKl3~>7MX@bW#`mMy!4|>nu`nxicd5%bBbDVi9
zSq09`zQ};8P==r|ZZJ(mEh!Up29f1{-Q&_peCn?5?>Kl^{a8`e!Mev%Y%qGYG6nYa
zd7Ci4BPuTT1OJZ1hus|MwQOv<;FmR-k$L;FHllQ37#SkZX^9hXuZhy5zf1j-!Mhqc
zBktkk@C+`Cyex>V^yPDl8_jyQ49_az`-O|9GT;FI5WZ=TwO65I3PLa11rfUqA_Iw=
z<v=jfl-u`zEA!+v{yVyTu^XK)qjo0ZJouWt5bFi4-NhYUL5e7=P=1n@74cGpFnk)7
z83gTNbmjZ0XL;SoD4sl1izqU0DU>V)=)!8t$lIgLPR(UAQ-4^JJ+wtvr`7S(Tdzdy
z*n9y{srv67q}nI<LhseY7uy*}Nhlk$FUnvz#jx<yklrQ^U8X`vfqcG9lL>=T8RW7+
zEn$X&_(C~cjNBhkx66-xlG})QqxOKKv4fNjp`abw(AzHaL#-1O5K0y$7|E?z?&Wy3
z!0Xm!Yz-*lHmnAHbKx&DuwEpUUf%nq<pzLhL>*oI#95%YRpCham4C=pIQ%z1Kl!@J
z(`Ov{zb~a*$kMU}j~Bv!TjM`V$qt&C_&mJ~Jdw0T<;A8xc$hy)q5%921;I6Or(`WW
zJ^8@ekI2gvgK<kc?fIfiKo@rNaKPPiWOO@<eG@X;9KZ7DW&3+2gQ@CcAIvZzj@JR)
z<`x107-&iE#E1rN#C?5K;We+p)l;Zga)<Td8+zqB#f6=jl_s(#HPjHqp-A|gu!M6v
z4RU;xi-)qMLMGYWoGU;7PBr>~VQ9z)&88cMi{Gp#rFpFCAYgnZHD_PuY*`7;I(Ia~
z&;9x84G4El)Q#g*9!NT`OYHToJp;_~Mdhctgjeo-yjOXG9x56A%LBxwoaVPN^qnvg
zZ=w>9Vx%Pfo?36ZbS*h#_1k3ER7BgiW!pQ8*MzvX+@>PsV9j_Fehi3MOs&d)8kfvv
zI-$#y7}QiH#5nzcb(&&ywZ%OVhw3g0Q+K%R?oo`UQH+rln2&aA;@{|j<p7mt*o5TA
zZKvfA-!?NruRe6gxPdL@zK|30fn5PHL61hF8%%#7U+Q+e$ez5ec*Ol4cdPzhs2yEZ
zKTI0dYtZ@%_;a$@9xp2x=+RAMie8M)JBn0UDI!_%o4la%9=$rl$B^<`s~fOR;NiB-
z=*>0A=-JI^>~39qp~a*JF94FP2`tTSqq`*?xwK=VD$td(3kZPR;ipfcT`ghg!^B^I
zR|&rH0|0er<>!dn@c|j%^fA4Ys1h`=EM{|J&t+jNPsRLyPGube(@%ZpUH0o~q5}YH
zaK?8!;lgL+k`u8(f9pevlB*MMcj?K&^l1z@&VCw_b<qXZ_#3F{5&)kH5|?|y&4r<Y
zZ=sRiAm3$y*qMq_{71ss#w^%#b`Ne*ES$<Ix#Tz1k}8(v8CY&*?_J6j;`jc-0gM?>
zl%ByCQ*WpvX*$D^uZ&YDi1?G~+>cOvj)lf+>#z~H&8!ZA?*E?-#PvVruj%1}zzFHQ
zPQdW^TwE+{{|f~DA1jEPos0E<tRPS~3;jlhEH^t{N4tMI&}r;{89^Mp9^tuec9p#C
zUw%J3r+JNxBRHn9+Uknx{OYbV>?b(3iKw*Y3$WST89?NCSNi{r1zpr2#A%E?(FnnE
z>Y7>tp)MNIqq5R*xBp?CTU(y!H<(&O9|N5O%K}D|*Z)s1$N@lLK|!EV(+he7aKd?T
zU>Lyw5LeM{>E!^e^m00Axdh~-QqS#xLot2fE>CP-)bg@Y3ibEnTUmm*LDVrZJKure
zP0Is0#907PKjB{hIM_y+nZOnr0M;xZ`l>5q>>pz~d&e6fBa8R=ovG>jUi%v%%k*A3
zV6~s&Je<4qPC(|r%pbE4&I)1j&)(j9I(&f4Qvdwq`ozEjx{$fd7biI;=XS3;(Dya8
z(DLLky45L2LJOz6lZTtr_vB;@Fp-@ttkT=)ICuew8!%7jPtm91Dv$;PP(f<tvEj@J
zKvhTU>)G>Lx4g2k9(!(PZ5?87@3R;7<VP?PNaH1-7mx^a@uKk~RZ#;-WdJhuVIApZ
z#`~T&zSy(4y|4p!d&}NEW*nK`xvE`x5sb9}`tx=8MQCsW$bMd3$A)6^gaG+z>0jGk
zn^;*J!We^f0tNw2tEq|Oi;1amz<@)T!HD@8z~26THh;~ZPIhW+R%dGY*zEa%`8Je2
z{t0Al0W>x|zwajgpcX=ZD&GDGf=G4Z{8Wpt?F?W*8NJ6(Oo$Impjwrh9oyJIGjX<j
zb>@99SN^EBSEuqTjrR{<<cq@;SX!986LPT2(yHS66hy-Yd<jw%bg%y$eYV~KuvuYj
zrD>?F7r*1T?-->%Z|O3%*L6QxDPJr`W-NYW0r$1q<7*Q;>eG|=fW&XgvtE|RANon$
zpIk1*0ER`u$w$V!+vi=<uOCbW5)y<wfv2e}Js|J2-lNPPY-eZIw=Y5|RZdIGg6_-S
z?0rY;ANp+FuWLf2GibKZZ9P|}WBBHosc{$kAsVb7hEiTDnz!Q=DBd^i*-NuB7PZO(
zfMD%iHfQ83M=ONE%bZg`I<mLQGeiKVQ*?u@-9@Mxr>$}^Lc`~UV&Hnc&wc;&O2)^+
zdVX?+Vm~_eUeIh%Po9@DNcjgv%S~(4A-CyFmUKyK%T2{`U84r^{_YY#HIuP_^UrY0
zp6zVa?cp+<vwM<uMqM2@Z7{_1DVtCuU?+Q+zH`TSU^U}GTd>`8=6OPO=}pNYse6^x
zvXv`eMKzB$>?Wun(uHbXOzeOewiXR{`gGx!%TBWON6rD|?a=jAd~gD<*YE3LjgOLf
zV2`Lq{E_8cM=+|4$?R&AwSFr3DmbrEoNn079uMGRO(VyWm}n=1Or<mhqrT_~0BFhv
zRUB0w&52i^$_SY1FYe(}w;tn#*{>G5sHv#%)o+E(oMDVBY`3jj^%S{_hg`*-`JtS<
zM4p(FKWomOyFzJw0(M%<_z{3Bm$wF1HxYArcr~t=g9Hda=T+isu?JV(z(0hTiNC6Z
zq8Cj)lya;P@j_;^BS@`6Vhn_$0fvt#wYAhlgR{RD!zguCuCJyz;heC0Llep+M9uj>
zWO+TY3*n8v<>1E0Nxh09>p37=#R4Dk`zW(ZY<XnA1n6`d%E~t)cQ+RT9p9Ia25Em$
z@Sn8xkw%XP=xmx8hR7ZaK$OeuJ`ZnibyY53jqRed6eXI|qiy+yD)R5g0H$sXgB2;#
z9q?%&XSAo=#Rgmm)$B)z)T1u*zWchE`z=U7&n=LJBx5MbwLdM#!9p*(As~HzTwxf?
z1A^;Xe&4LVEg~t_R+O^nSOvWKD6r$l4Xs1`5jG8z`*56BV6T}~C+$k>^HFGDMHSYK
ze$>Dw-g*-eRK%v_H7{U-1}wx&59gOtQB#995NE>rZA7YP>NAE}8P<yWzs0!A<a{)4
zmWxabSPYs~LaV}O6r}teR#O4})Egl^GZ286j)+<tW^4*(6&B+{?dDtW*Fu`=vRAgI
zlKA_Q@XX&~buF+re6u;XsZc8_PI0B1f$rmHAHiS}ZBndgC)e~S4ycVPiu)L3!FTAy
zVSSE&=&nEySbasFZ%!C8V%ZnT6M-6DTh0x)?ATv^lxs%?hMnp{o<(mjdATfPs*~8Z
z(vftC=;{}E)<Gy<;<i$M=lR_K1HlzVsUpd2jf-*J<fuCT1Ur^2jqU`jPg?~2y++(+
zZMPcrlz%K~T*IP44RD3)qK`LB_`TArLf!+}e1{=iF~su&Wgcf2d~1OD-3^~nMbb+b
z-AnG!ehuBJ2Fc+5GPb~ce1E_1+<;tyc%fOE1tOJ0A81pPO|~pb&5_RY%$UO>xQa|Q
zq&(O|E1)H8VazXPd<5yQZBUH?G+6|@)8Mvb^_A(VMIW0u3%DuL#G{Q&d0o<h4<=Y*
zOu+lo)8?Y}(Gi|}q4}g<1Skqc-ZL8fg&>-8T%>9i4!xVzNT8?+hh-A2rqwZgc-ce%
z9&FUt(MCafmi`Re7~S=0=OxGYu;hTR-C_omKqXw||3HU`j24H$%F$)paQQF6H&zLH
zvMAEe%^Q160qnO~cAoC9Da4Uj)kjWv!ArV`d<Q-@;?p8nm*X+&#WFW=>&L1We4`yv
zuPTYZa47<@KK}&k`(4fsLrJVvp<S5==Jd6RGC{ytYF%Nmmx_4q{dt&fr$9^(S=XUC
zC(dfe0o|;0ep}OJ<SX>o@L37aRU;;lP`4P{uMup@0mKYSQN|)-Ze_WFcdH$dWWf0M
zXI8e1c}>fog{4U#2}95MKOb1ZuJj(>I5PH<BshL6i&^JOLmy{55MaHf8jFmqLd=71
z!6#Pau^;C;t;z8W*85R#zW%`tp-=mg0;oT((h%@mfDr~P4S7z2o%ymUrF}U(B>^@4
z4NbSD0q|;qDU%jxYo2p1NK+c2vr{IkY5(pE0{$J`gPJf;wZH$o8{bg7Xb5p>nfj<5
zHzIq`qF_7tI67<nLzVH!1P;-rxmv+!6V3UPqm*MTAw6`t&VMB{k~BpwK#OIk`a8&v
zjL$iDiqQuL@C^K>hJzr>&%1_OOm2|UJ{4fX1HcX8{`MCHJC4;HTKg+t%Yo{*@NS0P
zDOwBT?YFjc)5P(@;)=`8Oj8|i?5ENin-uc$Xh(IejTtU$swordju=@1*=t5ROg`Jc
z`UdXVt}Jv-D?31ZigCl!)J<iO;4F%!r|Jh0E7{=Q`ugvApxU5H43BW6LcIW5HU2@s
z22^<Uy&uLUH{L$OZUU0|E26onkV56x(s+nrG{9QVmFF(}eAUZV3k8$(LmwZ<{Ddqj
zYTQ0<>TBgJf80@KWa?ZwSHGdMTv3(Lb@jZJg5oHfXQW93NH3MCU6a^$9KCXDRR(lI
zQbUe!2vA5-o}N(J5IYxLQ=d9oon0|70LV2X@}+J9xC`c=Z&wqzTw!cmcIOtALZU36
z@TRZj@KK@_alc&8=lP{KxF;~iq&x!ML%GUs0&aI8C@>2+qNnLJ3<EM|l&(W-Ac_c{
z77~N2N~^e-B+ONir#leBd0nR;SN#8((;LN9Rqc+I94I(hg}GALq4b=FC5RqbfQdD*
zoe&hjkMpFgauE`ZHp6SrA=eqzT5h4iAV2OEN;yF*#}^PXmQP}%2YCCcH>+ePpDJXa
z*59b*VFNx_5FZgP-rd`X)K78+4SCUQXr!)(P^(06p&qBU0QIClo)trIvi9yf0)F%O
z%LIh`R#?B&onASO=Qc^?#09g%0lyY#Jx7yadEeIkN=;iG97f(>d2JDshY<?q^NGyn
z8-GK6j_2NczhIZWTx~xEoJauGF9ICYA2o0YLLDGnd44-aJ-&I}s+bZLw`JE#NRN=}
z3P3c=to5L!?&{5MnK4A<bQ}^OxB~6kT}}q0CC_|oVZ4%7NMMyLPpv|S06Yz$H04<Q
z7gCL>GA)let$mA4GPdO5=u?)scl(aq8&Pj436i6kp6?6T_}$BXai{1^3>dm1^FLu#
zh3KH|iL6}(4VmaW9A$u)PdY-2z1RhuvIa<LHqs8^a?fZbEhw;taIhR`sui(7H0n0X
zS71tSgAOM}La)}UUz>^W14b!nclTv8U{04e3&jQop<w9_8AdA%@)v!Zw)bLG-3Llq
z8-YC!st>vStV3zQli%?*m*kgjmPtjdjg@{=PB)l9ysrc>`UHOsuMDBh_^;{yn4~!1
zH?r9VQofG9<NjK_HUVzaQS%!jg~XR-T7_Ogh;JOy=&o^iZMQ5#0p#C#tWKnW_eh$v
zWNBFCJPr6AYi5{jWCW(p{^fHcHMtggb|&zeq`xO-O(1`YQof@*kJxP8%<BX>d2l`8
z$ngg6*&j`DqF-HmvQJPOfgXX9Mt2JpwA0>LSlyx|rtm#sQU+@!6F5_R><H6wRl}FO
zNj?tW9r3D*d=yVf1h7eO?C}?Y4G81V+{i3;4l7=<_`8oF(BZ}YPNy^ZGRXOs2qEHS
zt?MYq(l_-cM3y9kHShr17y^_OrCj2EWF9;?J5pNM_)u5#t}4g$;^gU34)AWQLV(V|
zgLB7s@)GP5SdvX`+)X`Ck+Z&a6@#qw@0sAuM15afKpD{(13V*&KVQ4cpvcuViex#2
zW>n8p2!m_JvG$Y$gXjMZq*+e%T}I-r-$0WjYxY@s^|LP~#?K09{b_4oU8r)BHUNSN
zZhm;*r+-)NYR1lH3X>RcQ^oXIncO20o-1{ROx7=csTGrEUnaG!WS!LOP3^Ki{4M=m
zBzB0JyS(M73c#x;zyld9OQ_ju&{ygp^$=^}N^Bp0yO{eTjyA<R+ZLr1WSH&{Sc2^z
z%Q9TTGJg(a8n~b&QOvCFj#Wf<L1=8)bT~yXfeVx?>0z{-&eB1LU80l%)2b~|c>g#s
z{ROwlmD*a1icjc|*XZVF?Aavod!QJ-C3&iTfqPPB7VsuG1A3>{e`!ru@bKtA5nDh@
zC?VWDT!>Ly9$NJ!MmV;j01rVnym!gZf%>Kwz3(@lF79$lv<h<EiBt6w_N4c$(S#!l
zWp4g?FXupPPUYV@52~h%!KeKBH%c<xkgV9Agw2zH6qtJ}&4F*l{oLxPw8h!T@}Y!|
zmSPf|7Ql;7J~P}>^>j~~m}3JUI>Y`!@Df5+Tf%~`y>C7DfWdEM?bh!LRaU+|U2075
z{mYzaQ)AV1mj=wL)4yn|N6L4$EPJDEvmb3Qsab~m=boICc85*+w1YQ;T`1nvSW~uA
zY%3O+{03<XA>IaK)<KK<){!MMHK!jRX*{~p82~e*9s27SzEA<fn3u8>qlV~Zvt7`E
z_uHrfK8&cVL%+qc=Z8YxqwElN;Zf898OFTxv$JU>!o<s!SOMllfFrns`XX+hAg-k)
zu8M=&s_|0>$tPeClsab=LEx%CDS!s0`6?8kt^_scqnjY)HGMrDZ)W-VJ{*enoeIk_
z4UpHEp$spIC;utj;yR%w=-o&Ajn<Wg0@J1_Fq};_>szL2+-f5n?!OBeTK9T|9L_Us
zc!KIADf=qC^z=<SIt%Kt8&nR*0D39Ix?{v<w}aCZcjC*%Os4U0mlYEa{SG0_a89g$
zxt3^(Kxo5IE>?$ORsw#=DQ$V1!>jBy0C;2uTLB#%&3zFc2v0)$^w|v{L9`BXD1L^Z
z)V5%W%)4!J3pON7v{uUO2lt!8XQ;?}ri_6yiBFIY<5%Lyra$vuR}PvA#v$o00PbIh
z7zELCSK;%qK4#?{u`-gh1n&-9_SWUkjewRP+h^c_;7|8KJ5El$v~(?YMg{)X0emf0
z&ctk!Ncwz6#J8)$5<oa?={Vuu-ku_$CGLPGP;sv*I$GRzzX~}0W*_1^Z0_J}7tx_C
zs;{Y}*s6Y!cTUxIu{x)nnq(#r#`vOihlCH()<&1LG{$7Arw!8jm0U^nHB2rFO$}<E
z8miLM84t5~Q8MuNnMkz&inh285?~K6jL3KstbU^D`#My@(jzNaw}zvX62~wj2y&D`
z?x6}|l;1k`I)_e^R4-Ru<tI3@gJDvJO8<`|8!})OamYZ8fUiQn;8;J$SQZI4W2>pT
zr}`-4>h0&IlAn2%pAHc6SAz3ZUjVu}+YU5+BIL@rxh68Qvd)Q(2$$pE2OtTGPLJ+$
z(z)Dj3YT)xlLQ%Uo>qBVdk@Kp&>_~{FJ|V?*dW%qXkT)JJR3-Atz%qNH22^pOkxX=
z^x@c8`6Z1KtB_4KFfj~iAGYGK7lua)L_^&ScQvy?b)Hy|>D+VA*02N((0J1iXptGb
zKJO`Yn!=o3cnNXsK4c6d03>#Q{K}8JJGT$`e3Rn?`}YeN<hI-$J$rYbwZ8`guT`2*
zt8TX%(){YnULJ}zQs)<#b?pzNyH=2;#2Httkqvs@Ve$WJXuLZNG9SqAt9m(D%#LEH
zTKuMkw_VW#>iV#!Uj=@5a)@(j1g<oy9u*;;&=eF5Ho4}g5B@Uy_lMtd!}zC_>P2x0
zCsE*gk<I0CbG!wN_3m%ee0!M@rgMbVF~(3VQ+G>8)OC4&x3$bNZ1X??YaY^V%Cp+w
z=hV~?I!?Z`mI;3)sPkOdTuh-fK_5h6D%d#brDhbrMA2bHA~2yPdV-sj#fnyrF8jm+
z-640f9XDFLP=ZN03gB@$xcijvSRCmON-g5>Ku1vNTtL)F>?g;l_)?3ZePJMa8~9`9
zVJ4BI!A`?_0dOHbU*)KqUtlJViu%MjW1Nb6!yOCe^(ZmA-(*;+{|LmUYB?}nC>^7<
z`VtpMJG_U!*X->M(J93nr0$|(rtYeoRIXWab8*i7cvN{dBH*6VvxXx}T2l&1h4Ebn
zS!|Pl28k_49zj(|fI{*FVuKEhi9Yl8tMreN8EYMtV2mxjNb@Z6H(TGQNO>25?cw_L
zH%02OjzHW3hg&y;zjm%9amrRu5nb9TYLPoWnbrvOL80v2qcEy8snKKMs-R78l4GF-
zm~Q2xb58=T1Yk5syxP~A#+l3fJx~)22i4BS6X-CE@3s!{`y{`fO=?PxKr@+pi;=(c
z;x4BzQ-;>yiQgJ-sd)gU&5i$&f87g=K)j-gJTym`<JZ0QQc#ikzJHU5xXR&}H=qzB
z-`|}-bAl3qjJ;~#T-AwyZP`sxG9v6iT{iY9xYGAh1t0-m9f|oq{v<#6z}2?NQ0+d&
z!9~2H=gTFA&`hePy>oD}7@e}a9y5&V%@!9$BPc=pVa>5qW0;1)K!O)ELqt3lIbxZh
zuW6c`4*xepvvR2MbfOg<Wnk8O*@AKW<SSYI6|wje2#YHy!2n?}0@WtLe)FmBXhxD%
z;4Y<_2SB^RkIhxb^E3UM?R)1uo$mr3OSWLtnspuDE$;dCxTWw4x2--R>R=c3*wq^k
z+AJLynKB_ePe92Qr@<E{M)3z(dd*9gG(&%?a$$|&-KV*YK$AIr4<_Y9UZ*CPjpZR5
z>u(iidNMX4y1g~MIy!@CqCV2=6JH6$$fhjvFF=@r&K5dcsp>5X0lWCsTxXxAFz3C@
zMT6$h{N!j<?rGGC=I@4db*89Eoou7S0-vgK_8g1pn!x+1{_4ZF4h#84!5>ADj-!D7
zR&<pm<Pq=LP+!EtJg8tEbQ|{zX=82CU=M*RXO~*|mD{WMRU4~?0tiBeJ1NqdqY9M{
ze862i{JN3C%(~U&I9scfs_-VO(4aw7&ys4r=k1n;hM#P?fRNcZJQl8<JBZmhIoKEi
z>U#yySUixnnHR1~!?Isay!8RP&O=$nxx<9&ib|R4VZLPbi{=w9(4lQ~xF@GS!s`2r
zXUugrgRf-JGy>iE>u%q9q^E#P+7&6O79dCj!pPw(%dm9$y{xAoAj`9;XxZzoSZEy+
z#GcaEb-@kA>yLVEOd`n@JW2b*BI`9S!Q*~QzuC+rCvbCKItwm5G0wOAPnTZJU9#Y6
zC7)mmUiw5i*~9g%&qnqmQ#Zd>f<8DgSI44dDz1(dn)F&MDTSvX6if)7uqx}vH-PJJ
zT^e%=_4OR-P{}_kt>TwwkSkbqJTewry*~_l!|feyYW;#<9~2G-&tAZJS9S~`FMRRu
zkY?7>3ZBr>^uMCkKYeuXiNjDlXdDSS`4Re;MyKD~`J2ChiNwqwi;T}af2t^Ofg5eO
zw2ZOg378oR?n&a*KquqdzWnK<F9G*>=f;y}Z6j(&=8dc#QHl^1ntEZAVs+4Z@I%ru
z{;srZjdd{KJi*A7TR2z!cvvK(y8$zu<1r0!?`TLq{^;jIXQ|4MDm0l$@3cd4538e6
z^=BWQ_FZmf+68IawyQNw9}i4mldwOGckjWHX9|U>@hmv(%%wWTv**MyzW__!n^jPS
zmJ=fjrX+V?L3tz+{EgDOUwBRLDz}6K%IYc=V#<SX#P_zr7{RmU@SXKW(;B^ozWuF4
zvdoV?;smM*ah3c>tx%4!EmYu(>fD?&a!C09cAA+pgsX0uKG(w9@YmX_<x5r&=*mNj
zKx!sZ5@p1^+7ahHma;4c1_5X?H(mB_>lb&N>cu7_HG?NzZKs{Y2L+*vXwC6Gr#=Zo
zE<Sc!3x291Nf6zKNY7l}_4Mw>#h5gnYlna2fd-DwDRl{BJE?{(RZA|oTe=s0R1VgZ
z{sydV>kKv_ujgB+J;b6Mvqaq}KJ>O3@G-<(L|<`9oc&?qA0fTqhy~Co86O1Yy*cS;
zD`ngC+!)d8Lk4BOAQoW1T*EAHF%3sJ`x6JgoEanL*{984zNHfGk=quRQs;0vVI%1z
zO&8@zaV%oDfq|P;8Hpbp>xAY8&pl>KLx*1CrTmB(-Sn(g<QZ%Vv(eKHk=5TKiOM^b
zKYf|SkcnY#t){UNGXm<;`vQQkR24KoAM|I-4NGhWFZX}ZGllEN-IRyKiR8?OA@Vrl
zR3I|y_t+OEg=sFn50+`+Fia4L-kOZhioOqOOs}WJN{_R3aoEE(*1{_fpW>-g@MA#B
zNo?MP@k};v=a7RfEH3}U+Vvyk4Jz`cW(&|ynm%Z`IhosSDFNJVmJaE1;-&g&pf8->
z<!4e+44mZd)Dh5Hj+DpPE4jTWsY&b~+IX}RLlCRs%pX$<J59WnWZAVEQ4SmniH95D
zHi~~WxKJQ4AvuNrrI@0HVg+|Eh$=zx2GviRx54}NiK&guZAxh|L7Ne*W`@qjqc7FB
zn6?J4)^W#n>VQ+DV^tZRF1$FLi{|mv#M~vtvz2si`vh}%%!FQ<%GsB(uilcwOvcV_
zW%WCXh^Uo0^b-718b4G|BP=zclES@~$rMH=Y$TiUw5zsbAZ*;n_EbR|fP^w~N++fi
zO=)x^Q-3=s{D*1Ve8V|6v5)!=kTAy=_bBszR6Oe#3cz2hMBz(G6Vi1i`0mSxzydzm
zHZ+E%geg1GpjmH&Es22539%(BXa1cCbeMts3+JNfz-<4ue#Uttv7|-Xk`JD^Xgi%l
zc3RLH#S2l`oeF(raT(ZZdjTS1+?y<2hfR=B=-uUXijqLAow6nX0uWnCH;V=hyl2g3
zBONMZ49K?d?j_Ug{e-2=J(C?#7RS3QTkc+E$Y#4j4qm?Lkefq}oZZ3h<NAo7w3Ag{
z8GxVS@l!2R&isoxzbwrUmudh;>DzCMa&1ffvZ@XDtJ-X5r2y>&lO69Yom$tU!8943
zpK4IT4sq3)lG$a+MeQ*qp~(dt-UG&sPZ{p7I{??2`A!uai5CpSKSUV<_slRsbT^kP
z`}P=n!|WBggb$tP`@&ecs^m3Dj(i+5vi(K?cJNB3IWLv@Fn5_8>z4@aYCWT_Z=GtW
zgZ>^L`pqW$oVKibxxOc9mEDNJy7G#BVp{Lsl!=lQI^=6sHa10fEUV<Ml4w<Ko!P(Y
zV}MxQ{?YXbx54SO$=NOL3DrS%$m1VRbxcdHSA~C<{oDutrx9K0?TVUjs7#Vdi@xlo
zMA)em8+Ks!)rs~~1ltb1=CcD4Sdg4^I<HJIZXo&Vh7$QN@iwsO6`Sx#88VDb=cnci
z3;90rfB-U{yjV+2UYP4wA}FS?SY_0TIiU6w?l~HGTQo0wfk{Rf(MwQ_X9a4z5(OH}
z-u3YK77FBSuimkNAA-c#nzMm~xTfqT#u?cxDjJ6#&%n?f2ICZ|XqBwn-Q4v!BUaq2
zgNP+gQpN{<A3cBAXwfBXK>=4FID1Hb<z8t|AB;ci^5gRlNm-C&@*@YEM6!bpIbio)
zlBiK23S$V>$U)%^r{N8h)jp;~hB>~aIQz53X|Q9K)L*qQ7jLI!RmYL|d?z-+=wZjq
z1Wc0;j6u&z32I2`wJ^|FS2aEy+wdfEdMXl&2h&HkgcXr};-5<iLvxa%_Q|ob@;%Y=
zW9^cC|4i#Zbk8vBp!5)jc>4^D4(MQ*icUNBu2vG8#nFr-*2h+xl}wOQ$W0^I2Dx_S
z5KZar>9NZ-_yRe{3o%3syL*PkX-K?_f1z+DUt+54aXePImpEV=n^vl63-XJHQ3owS
zh8{%|R_PUM*ZrD2^ha5U;m;Fkr4|qKr5H?4zv04zFdJQxi=yOFmZq(u2mA(0-B*Q1
zvD6kwH6rJLkUt>48jki<VSaeGj~+H3Cw_JI9u=E4i`8pmn6_m|f<1t`FIP?V?nssb
z_o_Sd92GCcUhM%zN_ZS`11HuN<n405CmWffD@hf%De>g0k`D~qB>TNNUM|BEjz&)*
zRl&xL_34=K8j6&%%maT#186A5vWXRF@9k_7NmsRv((zZ!$!MN(^cQ=QZXbQ)1+$0R
z&M!VdYvK^fd5~FR-b_3ND^Z<ac9kUS!V9oIW@ASwlDT?iH)r9BgQ_zZ<YIV58Djc~
zS~bR_!@q2+nV1q^-IX*o6(p0p`%v+BADnp}utOt~<W7vsQb`^D0qpYxb`-$~L|L16
zMbMt+DDsN3KYG$*z@t1gO5r%RA&uJ$K;7;|nIAd77G++H2M%PPf5oP*x{2=#Ai5QU
z+wo0}rLBEnJ+kzHbLX<x4qN1)swLc#Aj+<4@XM$gB{))t89Kz9+#$r@S36OOX1#DM
zE3Pcis2}mmL<VI20H8-LlP2{rQ`lh?y=&l#p*&iAPk6ahBm;LYjvwGG%&M73N*S_#
ztNlX9?EVh+evop`Sr#e2R|cCS3E?ow=Zj`iXru1Kt%anKr*+{izjg;5!&6M!Uorp1
zIi<dJL(K_f+sJ~~Tov1=z+UuM%omh8(cAAm?;cmwHa8^a88EB?`=+YS+(TdWsUNYD
zzY3!4l!`t=ub@dOJ7BXnRA+0i>4z=1PGua=9W)`{h=c)wDnA)lS#!fOV=)jZ2mE_|
zF+n_J;pAi(&OK{$EXKViTS>%O&rFf%hw?Q;+A}WZyv^V9w2EQYxJT?R8RjR(?aOWq
zc!$ox%-`R66!6ub5xLK)#hjVP8(WJf<I;}@YOGuGT}vazS%yhe_=&I10i7ggRYuMM
z@Hfx!Z6hwKK6@9zOw$_(fMHxs1bwH6xR@*S>UpXgl~&8wik3}GoGw@erEXJ|$>+rH
z0{x8dW9=9Gb>taG^42I`-M22lx}UXP@HND0y~_s944^Mr<W9Re+9;;DhL<cXCsw*4
zTI1*kc}172Y(^#>$Q~6FB4~EDHTxDQDdN(i)H8L3qlo)y#ZGGa6&1B>^^S&8#(*6s
zv(GA%6lg0UW*9rj`DIx3<tu5Lh2&qrT}>KXAhn!hhvIwrq(^|tpt$tZ^|?l%$w5Cx
zD&$@L1So*6IS^{7GEosjn%V_k%-3w7Np^;=2AuGh-;iM|qbd$V^FrJD+tLsmq^HBm
z5S<6*;<zeYbtp;um0(ds?(w@7>s;ovo4Lt|nprT$q|rI<sRXGyR_9U*Pg1ML9ySw@
zf|t2<MbJZ+k-Dr|CrBS6{p|g9j7w}9mf?*C0<bV6YJKfUxZtQVFaL6HBSn*fN!?$?
zeJQCHVr7Wi9-Mqx_@H3I3KA|=)K}M%V7d4wqA*qWpipoSf6B3jCx#TFwdlZ?EApan
zKL>ZL{b^{%<-*}g2J6Qt!nYo%vdE#JDhH7yYw<Z;xFYMESf@4r3~i__R7%$9a$b4;
z2Hc>nCY*wIa*luP4O$V{OELltjD?hfwq*J})^JzCb0`DSTh>a3wS#nsKrsHq6WNLB
zH64bzh!T=Q5+70ydupHC=cx+9w66TRyXG-W#(f8uM>Z^McuamOvD46k`)!QSAjrVs
zBzdq}`shZ!wGI?Sms0x)w63xl!7?8b3|OTC7q%x&q;H5Bk%eBVz+1(fIr^+OXpKTc
zlLZ+<`hcY^mgH4S?%1qX#Scu-5G7N5c@{LRi%Q^RsX%o1$EDB+mZ&i04ZkM+OR$Zn
z@f^*{5>%)&WN^5bHWa{vXW3Ala8d%lZ*Wr#nW`*~HUcbEhRS`av_5vZnjfQo1fb%(
z(7;DH)x5p=0h`&2ig(mp9e^xe54Kf2kuYM%v><ARp@HwhfH*9W8Wb?=Q`?C~g$MUd
z_9K)+R~SGzYO6lSMYUaOup-|-t0>z(wU%5ON@(c-VC(-3vg9vX>0ldj;}~SUPe^qE
zg-$h>zAkF~V7C>}?RDVQLwcs=0)Fs9G%0pv%fZxFXI+}ow5?mLoY2nCFJ0l|E$Tq+
zBtH_gt;U`{18*z;+`<0o)z-PO?eU6DP)R7L@;Y9e6?>_(__O(ms$TpG^Ec>|S0|F;
zFKk02PlrSwxD^%pBQpung(AoZE*at9&O-JQw~NorDP6k{A5n;NBvJbvN5FF`%vwvL
zhvJr^I;9(rlX>k7h^ych>IF<aA*&QwUy?I}Z~?_VKB%RRqZ&wz1$ml*k605z+reLC
z>631a?(lilcjY^RK{3&4$5V#d45H&B=o@L{29h~kiOa^2P+}u#H}GPy*Q=&pYO9(d
z0V?+hSkAc0{(h6gKdpr!SO9D{#*-r5HbdhPE*in;ITRs5vURH}mS?gffxhGJMOdoN
zutAb)Ix#~M;g+(Hl+4P&$c6Xh?-l;hNvKy|Z*P{`KVQ^>D7TMOWNi-`>(nDRoclRr
zLl})`A=N0O#jl3zW001e;rn9Z>Y0OLD5y=o)VyH+5YtaKck0Nk#DG8YtBIb}4O{?r
z@``C$)90*KE(N%p->uoD5_lf22R~vW5Y{B%*vMfTeS>e(oGJ;)2ViwEqLXgy@2SDJ
zWLa|57Fa9Pl^YT>bZQvzV@ff5*~_jK`AxyDFir~P9qCT{3nTr?bR7@Y6m}SkxL5H@
ziXX@y`i2apS}<UmbpS~=XhuJ}gS9&&?9OZb5TlxNPcwmstK+FsQ<>M&y7xvKNUKZs
zU`0|0Z$ks}QTfawK?PiM?pGilTR4KDFJ^Zi+1K=bT)->`9H?_GwYUIw!)(rUCUiR0
z1nXbh3^1VhwJ%<c`~J;e6Hi5$W1ECRAp&oolp#Bk6s-45SpX0pkD1vw!uu5$J@s0K
zH(?5ch4SXsPqYvjTcnWBExg%$dR97LHt8CWp)Weq@%j&DO8%H9z%EWXjftKx8Z6TD
z^ch1GO=SeLzsT{)WFKs=0>4x}XBAoZaOm$32`z-2egq%-5jqGZX^C>a!%*8f$B!<I
z9$C~g{jxcjWdI!N45{?5PYw=`z9toYGtYH}yU1ah!i<wsL>Y)YS_Ejqq~DrTxuZ@G
zj4EqotHvQT(bWX%n(mBeJLllvNCLNTiken2SyC&NT75IU{tkg{9!=;WtGScy-EMX`
zDWUnk23y)cfj+W#lpR0mFN2mH6p$RQl*h0qx_%B24*-?ap#xiy7~nD>!!b65qE8Xd
zjEzAz5E+x+0z(q+bt^}2Wg@0B6MPQg(S|L@2M}MIAG0aS)pdyAt6zSzv4B6w0*zq_
zjB!}p&@-aY!()H0!`M!Hq9=uNK`Y@N-%5r9_}={IbFE{Vhz+XML_7yBO8+&yFoNmM
z-I(5t8vuaM%|V?Ixl4-qq$wvG^dsx0iG%?hn`g<1kV@Vm-gu<0@*x!XbA45^W#1gY
z?l}c)(#x_&wBl-Uj3@5K=le9CHY6uvl8&;liLMu9KUH2p4@TzWl3Bnkr=v`Th9W4H
z;Af@LC~rgv6EMNthHqb}YIChZLobg`4#VfhmjLtY2ou=_V7zdRTuw{a(tZ{~6bfnF
zmNF4o$0&D2l!GJcxv5LO(VN5~F+-44FKTmK^zNF|<D^hGDZYGGsXoiVbYKb&{~-Zp
ze{G3ypkJ1YSIMTVPS@6a>`WBBo%rHF&iCK;0QLg$SAPHRfzCLX>3_EUU*_@3rDC(0
zQNZ}471cQfIh<22g~`H_B)UyK?#PPUe4@|E&rA!4lAYrYDrHHNa|ik-M+-@5zqTt-
zd%aTQ`E<11&$BIp(SoOW?sF*?rLkH4T&`qD_}OGZHOj!VoZjsvef`CTc_rVeJhCk)
zrD?#@h}8AmN8F(`cUy;hPm#5VqZ{0KAK*GAIV*L#CK&tl)iS0@giMaWXmi0Zqede{
zQc>SuNj@5Ru<rTFN2n`lsn<8!F>%2uq>ZIZh-s?2&u~`!WS0!B8+TbP1ECkoX1cjK
zL(yZ5M5<Th%A=d`>tYn4LMoNb9?jufUWS|^s&Syasq5BU6`A=Ddc>CX?_=u%PyjFL
zXv{UY-Rl9WORXi<@#<8Tq<~Z3U0*%omTSc)I@Kjv0cPK0r6fsgXZ&DA5b;hfylF{C
z*i_B9Na8F`ea{3<_?6NUS`Mcc1|yW{4M8bPGe8xD;un<`$7<JpV!<UOJWD-El|4X?
zA5`-!R^?fK*d8%7Wxk-F@}EcB4XEX<c?`)pao_d%<5(GbvG&ob8%MK$wF9>$n0qsF
zq22LreIYP&2KnVfsb4Zc(P4sfwDIeJ9%}ZPxuY1YdxK8DC(IxhDztNSqlQ-C@#0o{
zdDZunS;QYIlTMh;w!pFc+XLp7;}hq5vi}dg+|&C8nwWZX<S5%PQgEgiGN5qF`?wz%
z4wG|}3QsPPFdq{B5J*?YB9y!_K)0W#gi=hqMEidC0YxmuvimOf&Q09rW-KbkcCJow
zvWP98x}^~Hmz)h|qz(Bf9_%{Stx(<v(4H~xwAfoQH`FsY9u5YS2<=E^a*0rE(JCdr
z`S=%V<6gkDzg0f3wr0rP1VEAp!ZMR$jdJ>m^t0oR&=W_r;3*|Q`L}ysVI_acTfM|T
zob;lrPjpVdz&@~AIi|Z$(TPHGLt=7_gv22_Q0MoWkYrS1Pdaw!4o%;fpY<L>TxALi
zk9gc-trwGdE|%UAG%$V#ci|RhW`sKZCs(Ae#cb7{y6aO0u&QcnBEWQ(pUN?uSFi9@
z+zQ!e5QmGMI**j5bNE5I(5T%u^Y-w96&I;l?zWHIw;Vg}jY+#JFrz}3Ui6vmn9OF;
zk(pD#J|MN}*j(m3OxCVN@yO6JVTD01;e&kt`=OU4T6+<aXjShF)>T2<fO{2{$Y)XL
zwcQF#cz-$F;|(Y*7Eog;C_Hf1bJxwXK~juyD!~o#W;=e!>WoR=dHM^@PY3ihzOhH*
z<n9t>eDS9@$;RCRrdPhSjZtjv8COUQ%}-DVWnoRy*1h!V=lVDKyh+CG*xlnrM0-nc
z4vs7LGB{z7OZM?^JmR3p+!N|Hr!HCxqTU^tnJNB@8-i)PHh>d#uPho`C#AYv@9@7~
z4-o<7p%gW<xJQpP+Q>yaFI~w{5}NHMUBSSZ-ipgG)1YkDl_r#?>AxQh`}+=)^1PRw
z)hZbMF(x?30}Iw3=dr38He=R76OCHkKWe6rRQA0Z+TBrVzL4`p2j!>3*XS#!DDq^e
z<4dkcttI*^gaE$#8!XOtS{y@Ay6gJ|Fi2sw#Wzo_n<DHkc*n-DHsg`{Z*-V>Z`;B}
zu#&&>Bg#cJ{05!aZg37Avdy?ZFVg+z448%7_jvLfu27fkt_%|_fLQ<eoW5r7V8?r-
z9N>Sc(jGfcuvyhXW~zZ)QdH%x_Mf(jbcbX4lH)1~4S@etQsuvSymIDU<@TcJLqpiR
zjFj^RuR&u_GQn`w<yKfuBOzW<_~uj?Q>@+6TPx3mZ)GRv<mKgV!;t?5X)!n_n59yw
zc>;FcVH-Z=kycq&o4O^FyB|^EB|h$l;nA)rC%)q~WH==k@!e2Ie<d!e0|FgWN#tH-
zI(NvnAYhyw3dc5>lv8nRnwiS8xeh{I!`Pbosawxcz?9K+s_F2~a_^!~59a(h1zQ>!
zNiba7&sDEKP5oOr3*mtu>&v`D82~<LCrNCm3eWTxQahfIrw$WjBn_cMU*h%T0$HQJ
zuWOzusj5AniXWXbkx~*n54iM*SJ&Sh>=TuE6`-4Iip4rWrLbOO!2Ldz+1pGFPJ?J0
zN#c*)w#^6-oRZw-6kr)P;zptA!sj{ijVr|$#0<30i5j<nN`#L2WKFx5Gn^hwgP`ol
zOUGsyOI!Kc{5Ljk0Unlq(rqPRag{p^!AX!bSq>D;A3Y6*X-)nZG`v~7t0Cke!PFge
z1bB4>E^O})DxAXQE^;1MPcz4h#AfDr3_(m@g;~V<B6H9E>6)mtuZZ3r^=Th+pdg+)
zJU#RrF@$HwH89cX#6(WB%hEOpE{IeAns>8~)A4Yt<ljk^NBrZlO4_2e54>j<FDAi2
zyx(+`qV7jbA-o)U<W#I!xf%K_6c5JU4miZYu{g8KTY<>W<$a$&UU`W{U{FyC<9y_o
z0l!<(5GFY;Tj1r0L7kWn`d4y5dr});d^8GuzAgaLJhPcAe4m4>c$kH#LB+PqsM9en
zIU5{VB3K8BMl{WNb-8JC0g#d8A04x;d=!|@mMuR<?;4iCzbfl2E-SSK#9kDV1JFb7
zfvL$%;zT24jfVf6Kp>${uEftAibt&NT}>1;#iqPyO_J4cavn^*3WWGHY3<-0?H4r-
zvTI+ngj`V^U~LJL2>@(J)o&$TR6*~gWZSuip@sjJw&9q1{t-{>Kx}HaEhW`SD8lEM
z>RrMlgtgs>mtL(jrs%^!GthX=1MDw_u=8)7>5DJ<xI0j1W)@DN84NGF)@1E#ZOo_0
zl#}spxBUkIaX^m0=T&r<bW%dt6cAB|#z%gd51h`0Vo8nu&X;_YOvD`Wc8*BnCW#Nf
z6k)+*ehyCJ>xE%^_^^pZk%s2TJ>R13Z{N(pW-P=~CBXDl4l+Vr%9(r)iRZ>o4pKpX
zYk8ok1$F7?gu-jCl?3k-rL4L2`y_PLsOv<+rWA&m3V)1N7le_f<DGL2Q3N&X=gqH%
ztr|;yaoH0`ptbqcTVWrZ<2M@)_iRZCs~X1z6A&KBqHn?_VcXpNo>OxVv!g?FJ&~3y
z<L@Fr*nR%RuV)e9>!v{NyOx@?nb&TA@Mi}9hH3u<M~V?Boj7gBfle_2xttS(c|kX;
z@tK*)5MZA{qY=*Vvmf6R;hpn-Ow*Dr&6FX97rIeYJFcSUF!ymqogpRn<Iok2IVnx&
z*)es`j`yI~+ofpFa>g6SW&O=9R+n@L1X|qmB!jB(D?N)65@k=4zM3;ZtlegRy}<BW
zR5}XC8cW$lzeo#B;4gbLlkMUx0NeSfM2~SuRIxlz^2g0R$71g$N|aJq=@f4%>P=jB
zoys@KtC}2da|hliz5aehP1IwZL(~vL9vET2;f)JK((M^Y_jhr>S{D_pK)sI^Y8i5Y
z@RX$|<i!$l`FXc49gX@sue>UMj<`oc@46*KS_3f)s&AtqT(afqWx=S`#O-^sn=Flz
zIKdB?<>K%uwH8W&1GMlyTRB1-_JJF0;AFw%^MfzRwfo)h$f~W4$CIL$(hbAaqR}Sq
z?;kSnvN(yxKcPEb4Moq*RlY1|=z_)3TDAsP-e_Gyl2}x%r<)5~))eV~2zGucCU*>O
z$1vGo_<54?jKvjt16h>1#mnyLmoNB+7y^gm&3^V=>qd7uhRnql7dSBX9CdzoTz<0t
zmiGRqeA>iir3^w15GhbIL76RNl!kPWigj9c9>&dq(yHU>4mltcg;08asdd2r@>r7I
zeD!^?;dfKa_~S))re$D%zOIwL;?<Jz&k(r?(GBvWUuO|i9wlo}o*j%KLsq3RNg4S~
zgadF(aV@<iLlr0a6AfAIkE_SORSCS;#)<}Ux7d0FHAPu`a_mkP@s)9RMops+m25B(
zJ4ikbv+OT6_Kk2RGavVD%~@Z1o=Lr}<Ewf03yx>JsX^kjpd4R+Az$;U!U%-fs9XeD
zzKKQtQNSn#`a+Km*>CG{Ng?~sw1mY>S2<C>S1`+Z_NLM3cf{6LiaHR--zKvdVP&>Y
z<hx1hvB}DR@P~JxpNG&65f5lM;aDcy8N&Cz&cCX%aQjP7SaR&@(xJ3^RGDtm^O7X}
z$l{T*?xD`lG5R`x*yMOR&$-?JthYmE&=94?&VMr&Q}mc1_IC|xKI`fBFZ=n<6xD+*
zzZ`YYgV*GV+WvYg@!-E#Ix0VhRj7>X)Bb~&y*C3oj{9@j14lO7Qdd1PtMM(BS=%fS
zmydQlm}4rv`BX5xelziXv?4X|CWa44eGcMw<tPu8K@3!Xf$+p8Ij>1wRqPJ^9+Tpw
zqow}A90N)2$t7g2gLss;_3erQFN*|Ddk`r$a)#H*nUMeGD%7FkUDwXHtEM%VLx4;c
zF*#f5uDw>aF>Th>Nd%cw9#@qgXeVqQKlswCo2H(!142XkY8e@1FwKT+*sN=Rl}<sa
z#+i8QYkPoyW_7gi0l1lmK{+1hxX$Jf5p*Ndv4mZz(TeS9jTr{LQLg#$QrBpMpfBuf
zFd4J|az17(YF-4cEFuvS<d>&+(5l2Z!e81<Hui`|B+{UycYjyU|5MHGEovZ>xv>TY
z*tVV%D=ii=8NA?vcmFARov<NAet@UIv77Z?<wy>HvbZCdz;oB8+)yRnhU`N7>umf3
zp(e(H(sr~r)`>OmFhb{qGWaA8cw%_YoDw0Mu0PK6!?;6{`bITi25F9D-=Y6mxDxW+
zYlb|ONJ-QFCku<@3GXGh$lr5ZskZ>V2G6~LyYA9k>bK}^;uI3Tc7m^$up+hLyG0M^
zOaUf;>t)^-LTWc&cS&gy-T+$y(MSE}F7;$0P)g)Q9;+KD-c_Q1{%h4JYRz-Sfnwki
z8Spm68S+at>MPt|$e$*0s!%A@Uao+jhC=$Tt?ec0S9X+^f~<sig8q}0W<QWCoIIGb
zEP;+MTpF*6go}yP73PC5ym-o?z8aFgV*Jd1C)hzR8uU+4!RP{^%2KP1ZwrPnk{8^2
z5ncEx4p@lc_&2_*V)miD(l(bMeEKN&Dc<?x+6dP;6YDQd6@B^EHKxaw`->1&Wk+t$
zs+#V6)X&~emSLKWJbY;9$@?gh-JHR~<L{^_=EOVjDjkQIZbG-LJ;Y@k7qrMKOQ3*%
zPb5D^`L2>n`S=+zJGG2+PR2K}H7Z^h?}z$B)bJoKRd`HOM5&c(rwjNvV^R-$afd2z
zI#4tqPzg+bM27g>dHgvFP@$j2C&Ej}ZiQ%2=?+JuY&C%K=!d0mAA~v+G_xwU^~ND1
zf^zWI&b8l9CF^{(n@B}sR2*HU2Dv+bI%uQ5RS32Ey~4pH_ndP;C>|D>LzBg?Nq9?2
z_`LnOFu8hu@rSy;tRN&w4}Y9wydNQq(Rt#?Rof!Uukzi{&S$vvt1Y)-vK4XzuC;hd
z+t{WAOIl|SUk#;j$cHll<Qg-30sG_b9GI~OFWml|626X1olfMW&69(4933WqawV~N
zS*CG;^MJz<N%`f|9G<#^NB2g-(}Amm{D>kiYI^fT{XBxkquAb`hx4chvYwR&)al$K
zEToDhog6*Yy6AB0zEcTUubh2!50U3qr&bU?hJaam|Dbl)D=(tSIgv~N=2afk)oZMV
zYp51wG+El|l@l*2H%ARS?oR%HJLvRl$yn7F5o^?41-ueb%928R4TzI@tMKS32Tzy{
zLb+D$-Oz1TB@MmIXTgrfBIvTCp3xw-kcKqo9(eTz!kR8*f&+^XwEzG%D7%3iv4^Xn
zjBq~a+OpwA6LKxk&ZPUjd>BhYCZNmY!`=vDklWPjk_uidg-zwX!(du}KDm`NW)vx!
z(9BPuPoB$L8E0+SP|GPgx$Dn65Y4Jz83B4FtA-2F4z<x$Z!Ww?r5VrbtxGuoq{IL-
z)9`1AMmYX^Hi5r@Ra<7Px;=qJ{HpwFyylj(jyDxr&P_0nywXn3$T6a$%x!NYf&cSQ
zirLQC0*&1L^A7ys6Y}|gFQf%`q#^$vy2e&cp<x#?e;g*>7JIWRq#wX6Y#a=Bj}^X)
z%>)NA?=#If0g^iG_jiV84W8dL-zwC%{GV%z#kN1PH6gd|qpO`_e%f&xStDM?+t)6$
zHAo9~ZU`FV@YiU-lRZaOUHGv4Hq%F%r$IA`zgQ9@81tm7soM#E#~fW|a#Nz%_9<%X
zphM@L_`?RNkl0)UIXnNzd(#sgb={O9Ns(6crTbvYeY9Fe^%9m~A1!*S?%L&Mi8*Uc
zfBsXBLILSEHB)8=7ds06a4~{J<2=U(-0pN=Ko|V<p4*|U!npML$x!jIcvmm|v*K|=
zo{Pn!?#mUA-RYNqc7T=RC~xHeXgX0h3?f!&Zp-qOT#fYQW&nSW3^aXx<Tq<#Sw`dU
zN55F83_+^R_;I9OAT1=MkKRf%v|6CEaWF*qG8}6&htIffBKUG2!A^8H4LS7t-&3BC
z&fY06+E;QEJ}oDdp^G2s)ZZ8U-amW}`;GD43{A}1zMX1+p=ljRN5LS|==o)Lr{Uz2
zkJy<BYcq#6COV$qqg(-vRb?*?`C~EWnr>vqh(TF8hsA7E_u`R$K)t+A))oe&O0VqZ
z`y!_{*}CiY{SrBDTllk;-*qfo9O?l>o}tS8sXb6!eoi{mFzWm{@v|}uGtm|=iK8!y
z&3=SKw)lpBu!mBf?+a-~2;8px$57U}$f~7D-Qz1)S+PQavd!EH3{F#S-H?HYsAYae
z0o+lIf3<JnC&pD*b~Jnbu*e3+gC8u72ws%6X>2s&tkV?3X_aDfiEV_grz*TN?j+uJ
zd53o&pZx^OP`ybM4~-gq%6=nht0=cD>K1MCG+9-D`S(;sP?+dYygMlAYZkeRd$6~t
z7o#66DmEPwwXl7BNz{vLU&p|Bkno=JlU{Hu$fj=1C=G3#kEZZtX*j1YLx6AhNa9`E
z`!nkfKTaUGw89+rI#qg%qBDYa7lMZ+`%g0dDZZx>JFGZZuMaw&Q#V5MC=hJua$m-A
zNZ^lu+Jd}v6np15x8>`^o6Wmt(!v71jC4W?8I8w5Z^O>J$b_RpY*snJqcp*{i81Mj
z$Uy!lki2Rrghkj6pFRl3+qxaPVclP186&4vlP_JevkxcXgmOHfDuFIVi${n7Sf7W}
zGDpPWEuwBPvU7m&N{J)4O<c-tK1%!2y6t3tR02I2@`m?6yZy6?T-2dxk$jVBc@&`_
zfmy}%6(Sjs1cS_jx5_b?hV-<u5yj`8=RRV`yEJ4xy5-#AO{AajQMZLf0{a0sQu1w7
zv@INuA~9vQ2w}=IQ6XPt7oe#1T3?!q3?aAVcK+=CGJn8?VS4;!(OCD1_jFd7zgr4_
ze$vqz)NsecPjqoi`)*-6!aYn$xoNt(Gu9^DH_N^R&g2!^s{O*ozbewhm1}}!&^v>~
zTWW4jx52iWD@;#fNkxoa`CVYgQxnFy`Slb*yPQrhY{7DEF3wMGP<KXJTY&B$i<q@1
zUh57%ff`RFj>jRuIEIWZ&zCzP7FUUX*e+@!kkT!Y3U|$y<GeCHcgdX9g#(4{bMKqp
zm27qyc%w{~&Z3@pO$mQ~35(S5_Yp3b@}^CLbUdN{VzgcK-t1ieX*sm2zO3>NmC5i9
zsveu`+6mQce8teD_I$$k`1N`T13an`j${KV)XMjj#a=?Q;(NRcU_YNGiBFq<_1~b1
z*<2eo7BvV6k7l?!x)XI{(qtN)$dMh7EP3Ydb=$@deVIVczb!-}4>9(Abb1*(%Oaz8
zEayxutAlL`o9!vXZPGA!^NH=Vu3jP7rVdZBqo)9WCjNSKWkU>}hgb<!ZIX{&NQ*ce
z9gGrGbZ_#B<-t?bT0J%pKKuiJ(yhB~(L@!B@K%V!ZV@ag<FT{{_HxIJ)s`W;(D1k_
zabSawMcK{w(FcgG`YdOef+rzqke;!aRrOA;=J;b^B__(K>p3jeh22?2Q4Tvn^sxM9
z#pWybe+8WjV)R<H>iyi}$yu_@6EO)J{E*l&Kv)tA!dBxNDV7u(B@T~&57N#T+1OYG
zO9Ks@xWp0oYFk4R*f_IWs2-8R;s+ctsOZbHx}_&6Bdu*#AS<-KL>t33ut@%9$Wj76
zEya^O7xBEa<T;lA28v@=SO*K%q!_X*;sd%l;gyv0RLqyQk&el*jMIqMP;u6m9d!cU
zilBpW!17BVxM?p(=mjKy&zOOJf{NYyx-#2w<o3Bfr}IXYB-@HuU42D}fKYk2{M^FG
z)`1b7%`=mr?GsUMXn^v#SoZ9Pp>+iO=>%H-Bw1m_Qd?lp2m-0tXpQ`-fil5jM%YCO
z-!Y*0%HI!xaR>A!{V<X%e{|5KItyY5sl%2B?BB;!qNU$&mX^VPy_2iA=6E9Avb*=X
z@Pel&Z;Q!3qw{X+ApPC{`@My|<_8va$`0@CPd@e1nlwpl)#Z`!t)Lm*pUe1Gjr6QD
z^9LFgrEy;~_pn-!FVMT0VFwEoY+K!@wVDes4)L4v?1M0u-y*24%lzij3>9J!YP;g~
z%qoV2dozK5e25EwZe$}Wb0+;P>_A7dxyhV5`=4V^jl&pTVXEw*%Q@Vw+Ejl!g?FxM
z=@LQFg;!G4EQZ^seh$%Ghlv_gF=17v<X>Hqscm`KS~Obfu`7nX2K@+y1v*#%kD-aQ
zoWTc;h_AW213n5|4=VAm8UqKs*tbE-{x5e$AU^+MRjUtw(Ip7{J#d)2HaV}dCIEfK
z3!LX|;!jKg^22{&`nAqXhIx1^RRfL2Pn=d43G0U};1h=1vQvjtghmZ@M5Q=)m<*Z1
zPPQFrIFZ$`kk6TW<{618!=mpDJr$lX;-Kkjo-wus&_SBa^IQ!!o1KaB?t_)6{GI($
zYL3P5QShvPV1^^WwtW)?X99_}mOydFQ{IhK-ac335i>!M_Qk$AQuf4I`?7%rW2!t&
zz_6TS;i}LH5Q?O7pB!(u{szDA{GA2X8Mci;rNMiczPk`ZBO=lmaIqkK+lmQ`UckLA
z1i&IxQG{9ZWT_mK_L0B@h^$GlETT~jiy6plKJNv87A+2bQ^y{<#+%FnpPXr?AUQio
zbQnm8RKxV{^+Au^e^WFR0K{G1pDJDq{*6x;x2dfgHS;0-UAK(qS7**Rt!Inz=Ng;x
zIaAtcV)R&3zo<%NO#s$v2-3M5qd)UADO~m}(QGKm=V%5;&ttWquT4$fIEyDKnYiTJ
zD))_loe#l9tJ0{O4?_TOk)^_N;%>Y?>Lsjmtb(HP+h)Rx4iyl|dhX5MZ{VCuBmG6$
zoml5PR5MwwRjC9~0$4-?19Qr)%=v)rTFU-rqn^=2Hc;~EoqIXje#9zh(mYVEfIVCe
zB9}d-Z|Yj6{$h#0#gV+-LbZ|dyrN7)k;q?v7;$T@L(jveGFp3q?Igd%4IR(7+!PaC
zeJ^;$E%O3z1-o@z7Pk<X%=BW!dz|)0w>_2k#!9X1Rc?W4W$m3bnMKQ-8)ya+7;8Iw
z<fVUree!%v+s%Hlcwfoi^+&AjpC$h%F}E+E@bFFTnMU@QKpKZ8n(QLXhiDC+f}L4^
zJd_t+R&og@QRW0t9I2jZ&110{K1-f(YThBzXX?<SZ*szm)ttL4BZURmfPUF1_xIOC
z<edZu6y!Xr<fQI@sGS#rll^)8<908lQMlSXU#g{PPwp3HoUkZiW8g-BNO~0(13!NB
zj$haIg!=kl|G-{9;dFecvcQCW(<7vRPrl9*<YZXe>vUHGMkJ|~Z?v{ENmt{qTO;Bv
z&x{(TB{G>>8K&Z3i?BEDi-0vB8)_5lWzED1D8?hrjZ*E`Zd^S8Lq4ny%CP5DmW6A}
z$eOiBi1!%!Wk*!Ll8u(S>ZwqV&L6E*d~IsI9FcHG^7fO%7yoHR9b;QU0?uTAFW-%J
z(d<zaAqRxiZ{gS945)zpa4B(=v<}l57j2|h+t$27dDM_P+^G(H(`wLT+1K;U1gA#p
zX22?oioS@;hjuspNmW-;&-5H?cLwNHj*YF5cm|9K$X@a!^;B#|-II?HlioPL(yI1-
zs64vgUKv?gASU!kocU+vHttz}!0#F?k0wg{J1108$X0peRt+ioxq$@%czGv%$Rf_E
zQ8XUzt?+~IW~&7hgF-`!S)UwDWl|l?{-42$oGE#MQ22sGvL2EH6IFm-1$w$|_OXK?
zxrk$8)$5cpW{E<N^Vf?qg&e?zBc%|#^s#Pm_ja-o0X{U{U6>n{EAGC3K=M|(smDZ5
z3E<knc^Gl{1(A2L=iHzP2?j-#vse7Gm=<J0e?yrc1KTy1h4DI?#^<wim>rJqQ%2iK
z%JKjqFDu3*1g8y6NEs0`1DbrZ523_u*|c(|JV${2=cW{hdL!aG^U53AiX8_rL@=9_
z(OrZ1ALq5+Xy0EB=k-v3DJ?Z-X`<|)g6fyWXkEp6?^z$#th9BnYz12y5|TU8g&>fd
z6ztMP|EMxbADJTlF(ya=k5hW?6H`tdkyyzuh;WG`PW<|rop`_wN)~WRJ=G31GpWvE
zdPgfP8zw0SV1}ZtA^`H^=`0)2ltj4%9FiH8rIXuzmPx9`Bsm&?L;~4;oY)17do)qt
z*Zs|<F-FG?pn%`RYo5;lxp<#FP_Zu3{QwPq`gUAg!RdL-vTZBSZyW5e`|iV4oLt)-
z6~l5tRm>U0v7U-G3>Zr7)kicNMCa(i-J1J4F2i}`9H-vIc#>dZQpD@w&aC`K$NYSc
zslIyj9GoD4TC5v?@hMaR5irA*DC#5a<#gg14v6e;_%>LwB+B+Id`p7rrr$HmWJNeQ
z+~6UZHN%Sv9M{^Ray(5kWs*@_$(?kqB_9skgjQAe#n|A1h^0mQC;A?)F5H3Zll&sr
zphOF#NJ@TV<NAOh=oE~*avj?CUQ8m<9+yGdKyr}HIouC_EkJNg1@u>;=};o(UWAL5
z$fKh+b=AxD1i~RgBnGE%T&tFh|L`vp)BqhdKMVydt?|fD4KQG2o|yH%muw7j#WY4c
zx6^s8f3}=R`4zVFTMQ2==<MP<JEs8cHi6r%go&z4y$`R_h670$yCHOLzlo93CSb{>
z@}bfKpz+FomYo8A3B+b`t7}^0Zm9Z#xWJBoj*X-FI&YC=*qa)bKA0Cwg&Zz9Fa{RN
zA}tp?`xRv@;PBMdDLx&Uo`Q%@VcsRzz7;{YC7!CSGbNkgL<{&Ozj8myv-IS&hdPD%
zIy53Lu?dP#S!8<ugVpYy$~bL1gFcVi_$gm<y~SRC=+?-Cs)SPp4^Q9<h~JG~r(r_s
zwHClrJW6SfYcYe*?8)tIPtb?9ss5KOhu4_rCpD2cmya^hG9L0sl;hS1@GS(-hOv*`
zIt)9pM-^Ky&L4qYn9D@%UQlC?&HOQL^}pnhq2lK}n093tk*s?CGTVw@hfA6>VH4I1
z_Nb_TtR0a@lWW>_)uz7IG@{aQGz-k9^IBa3aNp)EQxk%Zdn6^t(XbtcFlkfpT_{Vp
z-Vd5?A#IGMPf6sBHyzk;OeHbRo*?o)c{y`7Nc~y_HJhDl!uJ$vicd<|X_>%LieDZF
z;-f)gpH}{z)Yt<1Q>&>kR3$&b<LU^?Ws#15j89-Z7r^6CM@orZ7DRMa_*~4k37Sg;
z7PqRfwb~Is$;qd7XuT|(!?!*?4lvmvZNTdP!lcB~@k@ckZ7y_}UjHz;EY1;(E+@{O
zh0h)2rj#acrKOlOh{^Y_*5}qg-x1v$N|qGal!?zXojfIJ$*R@$b#gbHZE%JAtDn(-
zlCQ(tM=`xI!(=tGKf86ZE1Ool;J{0(P)Z?)aaTatxhmTz;|@4A6w_aL9C}odz_4o4
zx<gEEQ8-X4x#r!&SW-ifnxqlNhkC<*9vOBw!+oC3%H&YDed8f<i`ac-+iz-sH@7&o
zN&VXYos4eI8t#U~5$$2L4AfB>ClA3E7k<z0L^@ry4VV2X2e3J~DfU{4Hs6;KsR9!N
zH8wDpfIk5hDlj(+FHB`_XLM*XATc*EG&l+`Ol59obZ9dmFbXeBWo~D5Xdp2+I50Vr
z5I84)e7a+FW^J=BnsjX2wr$(C^Tf^*qhoYz+qT^?J5I;8?ey;V{nk2r?{&^NWB!>{
zbyd|>*Io0+9OI@SQC4FRF?TctNIE(I8CV#Zd5JZEj!xDl3^G6yJ8LsyX6C<6W)@fq
z3NaUe3DDZnLEHog;3d`qm=i0R0f||OS-5$BIk<UQxQSVKc>cj@D!93tSpJ2uv9qwU
z60@@~v#`Tb5X)Pe0UTTb#AbFTF4h*-f74mGh!q{(0rsW<7h+asW==k0Cks<zHz)JI
z4gMDUzk`ghEG)$4)_*&i0xYc^V440QEaPC|NX)|gAHTVq(|^a@0WPk8nG#d~7ke6i
z;=kO@9Ubhvh|K{OuuO`Mz`tyWsl^<fyj-j;t$@VTW;B0Wa`VvtI|cE-k`SwTxdH+9
zuEa79W{xgSjxK+BnKKfL*x3=Q{*&ZNtO{@ixVZo0{EukF)~>_=YoOI%&L)3bT3Y|j
zclkRh(8a_YU~l4LOYG?Ke;OA5KaGfgtsRK}RwCALu>QwV1O9co5}P=fGySdM_-_w0
zM>hwci#5RYZ-3Xn7&iy=zh1ll2+c^W{!jLQcv<`v>u<6PfY`zX0Qf6|iMxrlor$R(
zfRES}03fyk0-bo7n1F7UjE*jrO#i}}-2TmF{GZ}Uy4l$&n%Mu9@4t%wXH))vUoaDU
zYdf$16Zk(7T7dsZuL`hq`@0nXGyI>jA`X^z0AdCfw*NS-T_vqO0p`lqKr<_13lqD)
z3-zyG<Db#(tQ`Q#j;_}KZ0X+=X6FA9Q@64<vvmNtx)O8zCj@XX|DUY?PW~@vCTS%N
z5oI;H|NCqB7bEfal+3LiEdM!w69;n>7xVwe@o!k!#M%L<?&Sm^X8zwb|Fv2Ex2<6E
z_uxE<^_c%z&%eOG&wsxe{C`jq6?OFVVPN6pBxYd!%bkUlnS+>{huQD{LYld`xBwi0
z|9%XAC;M;P!uqd(0DvdJ40d(d(Tp#|COs<ySdW!AG9|9pZzlD}IUaU@?5mc~*<N*^
zTG8N_;s;*>$xU_@yxhLgED#ZTOzoN&ukQwBi^R+esb<=;Km%mq#h((hZR`A<hrK@g
zxxF_l*?^Ke;=3z8EBZ?Oc@d=EtN4oF5{~Dj1zS3`cFGD++i`QbOwzxhb4+m5;&SH?
z`>d}6i-C_<BgEx#dVbu0?CP{E8r0{>cdc4)R=3Pri&0+_swacQ?it{vr<lvW{1`{K
zXVz9>E|r!7cNG0OK?Bu5ys4<<Lk3<kHk!|c%h)eZ=8ZGTUB1zq>9xJ!TX>?4xn_s?
zp*{}E)3rcA&7)RE5zV=T@CnK*I-+W7Q$i^YST{_YgU_$jH^M@H+R2K`RK~2~)GpG4
z67-T`6=a`Lx$3?{-OjBBAU<(VKtb3+&hP9Uwh7n?1O$<Y_R@FZpMdfRaB*J$1Y(HN
zzB$A$F%~25+>@VTBxnSiwE&l1%PrC2)YOP-0{;%r@Ri^vPVLIxhBtX8Q$t%*h=r?x
z;k~bDnx2TyN9u2X_m7=3HiaPH``=n;EG+p6tm9N9yc^j0r!EkfX1V!JLz3c&Np=f;
zoGajFH<Fu&tSDTgF<N#(M<UR6U&b1eP|Ra)lFUA?EwhgjcKJ{3H_<i9R05qGMa~#u
zZREp|{J1F9eQG#%uGGILT%QLBCe2lJ0*hF$6y=YLK|3CQ>gUXZtTpn+^khH08=;ZG
zjc>3LSg9>pE|I?=j#TKimXy-ur~p3nRS?jLBkba;YD64?QM5(x+DMy+H3%V$u|MWF
zG{b`2>nVGBrxVoR-bKeoo_W0I6_|o@k~Cs4QJy=W;QS%KtLQiKUfVY_7F%UityZ?>
z9Ey?2K_gRt%f#uKKLdWLa|<`LeJx(sT%4;Y?D{xhY!#U2DPBENb{G*TiTaTG#yx%O
z^X0<-YB5{{zUJ!E;)UbKnDZQudmQf$4Ip23(E1{*`@5^n26?uC-YW-(F9v{6oVg?7
z`Z&>8lU$A7kA!GW5_j}PIB^vT7e9%Wqp<!_W#aLFUL>oQKW!3hL^cGxJ38X(;z6R3
zzz5EQR22Z3p`ZcO!E#r;@RmPgO`)A)_tc^Z17&(c*mkx~iXYp%F?fE9`vcJaz_7DK
z0P#;H7r^&UjLoo<lgEt)+#9Lz8ymh?U8r)fhs3f3KD%Z(Usl`s2Fvn3C-Oz*=5$0q
zxBFCoXLFrJY+hp(!`!D%^=&eK;JsDiR15qVNEbR63DhQ*U|QQKq|{zIv<`kNb*(24
z{1}c5+7!p&$@nu(4ji6Y>1px{>k^0Ny`E}`g}jj-V`NQmg|>UQDpN@t&E=9{wR74E
z=0T2w<eWt0)vp2H*w5XT5Q>^a+Zkd>{@jdzk6jmDv{sgXav&D9>Xztgo+1;N8IKli
zfF|@m%?9EM!bI1_JxVcUOnLtfoJN%xM`7x7RoMol!%@hm_{y>Na^Hcs#beWKh9pzE
zU5!upNvsAbT~{HBy=1Q6cO_z-@Chal_x~}4Y)nBc2x7Ey6p*yBzK|o;fq|fqUMMMl
zmbGEkOSeDP4ZR8~TPAsGL+<l9yDCSC<4oZ}Z4!6|SHuY|)9~Q%pghHNl9;mYUOXla
zMzIB1VRN29C`DRwly3bzYNvw)_&5*jiQMQVp5n{ap<t~k2LRMyY`EdtbP4}7ZrWc9
z6DIO3YQ|NmOs(xOKHkZXT9HQWsld>Gl`|3+5E_4BFL%ldPztNHMu_tBPNAKe(lAEv
z*U2>J0!xznvghl}b?aKBkKJpT`*va{p$NZ6dx%e<w`FpF;)2^$h?{Iq+5AQs(CFG;
zk;%4H^>5UlE*Sf;-M1?P4J*Wv5aGFA-DVl0RW{*{N-RCe61n4t4&E4>R4y)mFej*G
z7vh=~q*g539?!Sb>3TRYUhw}t0@{qCmb|088jz@}QhOE@ft!3bF}4<WE~!n==$ttz
zwFCk7iZ~*YnelqOH}{^I0VY9*_6KVL%TuG(o@>iJH*7n+yCqK^?qkk7EZ5aQlc1d?
zt0xV2yoO!Z*Yvp*m;PCX?BqCqxA>=Sz56MupnL^8uN@qJD#zeyFU9M#+Y%2J7OdD{
zX;r23aY?-Q%H?|0aUsP85gGEYaRPSdR^~%?O5kM#UjV8Nn>10XbKW%*A_)xPMkxsX
zAW*j)i`)G=8-B?fL}mf<66J78J^qSW3V#r^2!z}Dk*fJKkTfI2?PHgJ{7UT}wE5^X
zr5KQyGd0fDMgvs!?q66e{cTKhs0g00lFA3KV{cZ}+kl@Ukj$(0)df}5#9sh&M|_&i
z=~KMe^w>gE+#izG{I+iOh^c;!qC3K<{B31Qn5DsNfdYQIpYYwu`=`CH>0u-$c!;zj
z`&`nmb8Oprw(}E(nsEJp8TLhEw=6GjZk%)6O>&NRsXl%wG)by$u$JdJloJt20vJT=
zZ-@PAMe5E$!TXXPDcOpLhqa_y+A>ST?LlqpjK+C6uWYs*XBAbXRJ3&I#6p+85G~aF
zSfH=!qS(d#{6pD?q-9i{YE?MPAul@912#j0_adS(7|Yjg#~S>9tZ+r9_GUs?SG_p8
z-^0M?^!I5%w^0B;B$GBuY28qlwxr_bFtS;Wa>`)WD^uI0O2{gHcyLR#lhM`E^DLc>
z;b`Dc3t+lG@bZ!~wR!lxyp^krP8%v9f1buPfnwX7#xOK}Z$*GkNX#UV_?l>1iSRE?
zX=78$>KOM&*AB;jgO5%(X)r}rT+4@WlOF!6*k0L*L@R2dm#!*ersPWbv`lw52-Q%f
zCzP)~7>T@zmG(F&mWh94YTlr$=8<rH>wT4Hz4m9Qv9-TvDt%@p7qqAd_URCFIp&j%
zt5rNkki2i8IWK9`J<>W)?w!>e^DcD|JWuf6^HOb9FTsz08RP5q>gjM7r$G*=>^QtQ
z%#U4N&AF?S+s2T_ugT!9wgo;ln<9QT8tHDYCzx5_Fi=UC;D1d3iMtWek(`GyF$Vcf
z**ZS`=31%1p$y<VjR&%lOYCWKuXo$Vn1<A%EfG&MTY4;cZ=k>sFQAX><FM)aya7m*
z*J$ryD{#+$F2wds0X*&98yt91_;hNLzw|kH{rCBi@Z?o#3m7TdVSi9DmeVA9!Oz5H
zn*-}H{F2QQRF>VPZ}j?MD%t#4;QFn(xyD0YRj<RcUs0t+jY-@a*_SgE4|lH{JoIx5
z$U#07T7QkM^|wkT7)fSldNZkGa5(b-ot-+1lIY@p1gp@+vySgN@sRE;Ih68b!6HUd
zPLX@YE3*`CrZl>ETkJxRNjz+Rtwgd)@Pd9bd|r^;5(M4mB{nKc#4@vXeBp!_06MqH
zE|fS~uMAacIKZ*+#n-sR*D<`dWF3w(3r1|5R#M1Hlxv>Nc!_JGQ14V}G$D25?-$*c
z;t`d9e|w_@V*Nm$3MQ`p65?{UokV^~0*|hl=T#|3_hQ3<mOxXZXML0PU03U$U0`?w
z6D8)3Ka2~uyeJILV8yV<4)zeF%v_4An5Fj5CMOxGV)0+pfZ<m($3aZ5pF-V6_??l8
zbQ6as20mpK4#lz~$6I55GUuI6({Lr@tjB48g0Lfd40fY7z?CPtL}>1fzfJJT!Ci6?
zg*UM9ZrC@;by%|ZTdspSDiYPHUM<UX{2rXTXUUu*z=lV=dP4{YubVSiLe4ECKNd*J
zTQf;gE-Mv3kaI7y{KA72r=j<>ZS--;^po~wV3Wk)<-LSZCR-H0;PXXWlkNOv?cN1{
zChS<)<GKEv1vdd_Qq53qC|~?#plu+uP=wKOJE3GWKxmMJ{nWOxiWpxh$ZfBs0G3X-
zyLWqel486e&=}%jxOAt&IQp9)za#fznFa(!n||NtfL$1`O|aO)`*&6RAzqSSl8+zJ
zDJS*iOp2Vfi+!qaXxXWiZxR&mTjmvi#>1tFZszu~i!t_XUKb8aqFdZ-bqZu;F-G69
zzqT~UwW*7`-}7XFy6E?rWLq^D9thXqlHlo#i+{=ux^3(wF2)YkQ{KZpznPELPX{-2
z-`5dh)oy#Fip((X`=y2zOa^^c-z!B`84~fKSZJF|y5A|rZT>(~Va5!Y48Dth)3wg?
zrs_nIXj@yHiNNHSv$C57;XXE;P!wc`)hO9_=E)PX{edJKv3|N)7VdZZHY`!61eg50
zqv1Ie|AUL#MSJ*3=zy&mN+;}lZL{1j0z1`%%<WLP8@*PyTf}>%TK9gMF+$^*kM+6w
zpi7vnPc1V|=4LX&M<LmR>L$^D8f>4GE}S!iu&9(=WF}p8QgrqLZQ%i3{OmFMlB1G)
z)k{|_DVQB5Wa6@KZkfM@z3J|7m^ZTxVK;NJKgj~ZJNWfVi+{0X7S3qZF-CVn(6xLc
zT|7vIUzsQUu7<5EO^tUI-q7L12)QQ@{@rJ$L=GQGD9P=2OsP>+cn!gSo|(Tfbg#uM
zE~qpyQ9IQ`IteO|yAqCgyJijY*u_-6yh}A%*JeX5#loq!3iVFx`Q7JN)g<E2B$PY5
zq?Jnst`iFEiTY~4@=L~;l>0!ZH!CS_sC2?MmL!}!;Tv_y;osh|((dGKIhaW~kGR{R
zg^H~2;)k}wdWZVG-d93@@91v8-HxY`T=fwnV9GszF~N_^t?N+6`Z|vd5lU{KU5I%)
zu6DxMb@rpc)o7IDMQh4brRF;COue+IfU)X@<EY!WXJ<~N_|MSG$X63sQQCnCPpe?_
zViMJc@@C`S%0DRH_*DXf@QA5$@Qx>wUjP945*<#G0wL7yRS|1{Z4i%mvehA|uLK@g
zB4YgOTQ?IITO`eyw3gj@Sml-&jO#{g6kJyZhulKU2G(TTkQ0LFWo5#V;iEtV+Y(H+
z4XvcstlN-#`lARqAfILT4VP8<nTTIa!+3s;R;fmO3vsgqG!o)F<>SE<ip6}}oXmWE
zV<{8bH;(=Y+mh^mx=3MmTpqKN<p?RZ)Tvytcs%xqPQ)paZc48xW~)Y2Sn#5q7)zhm
z0J+)Q)O0!7@gS}y94@=l%@_5ivTEwmKaB69FUdWUj`_!p@!#|z|E$XWk;0SL1BSNV
zR6UHWA|gc8d0zroJ@FlMw9~zStkKDQreVtxv)4ZYJIx+{Mm`hTls6<v)5>cPa2BUV
z&4l=>E^AlS1<vTHpd&}ZjTK<pW=Hg#cI-~Awp5ZeHUOeV63c|&W~=J)W9Lnw3~rqo
zNbKKkOsQw1&$TbphIu|)(hgyU$k-5>)7Q~{?z4$5a{qd4IWS|+{<SXna@rfL3!Z^F
zT@v$Abos@9*z_juK=*aF<5l1<)e~fLpN=ajxl9aDaEIA{-XKF0k;7b#YA$lXtF6Lp
zR$wIR*6Mtq$OWX*z~XrHWU_qRF`mc%2r_~{9zb^SLR0)jl25rDV(IH4@Dn^>Y&miZ
za2^~0dD-;t1viP$3GSc$shkX@>iH{VuRMr0zE9nMv!IEuCz1DqiF>qR@dfhDvd)8N
zB>D};_m>aT&*v^K8O^1@_Oqa}*_z4E0kv4S0r8c*%FRYLzs`Yz#NWKs6rlq2>W8R;
zc7tq}Qp4q%Wv)XWAIL-5dZmW64)1Q#kUu9`4MtkxiZ^-(T(AoUALlSP!w=chHDtcz
zq)l&s67YZ*7&+y*7(tYELf!3nsiZrtY{(levt74*>eeq!)orA$PZzjupHhA>I)4<e
z^)R9Hq^SAQNkJ)im61;fPUlH6$R%kR@TBe;)G(8GTs7YIGi70i$+!rR6W~0QQH;$d
zwG>KGonP=mItN~c=hH7jF66V(JIe{-bQGI^T%A;b=EGXbtSFklRIj{Tc)w5>SaFQZ
zKUrZ$j!H}<0d__XyDzs*h~pdh^*}hGf`FlyhL?BWmFpwVJ}B+4&FQdZ%u!F?!zK13
zJvxQS!7}5j*O@+7ySKv=r{yX9@}=<wD7&s*fkG7yWqneFefP?arf&A4xBF6Ok-I2=
z!Ceso7vu3hpN=vew?C<ygi0Q&X}f^44ZA%Up~hMPuH(g<*>7o0!H~z4>xbOz(`rfS
zX--thafv?mHZIbdhoFKzN5)i^Lc%*t1v9zOonbG|pe8tQ4_iaNk6Ycx0^3z6!{EGy
zCSl=UxP{um{*yslAn*gqNO=uo5W^UMQUprv2tSP~qL{#!u6{;M0x0BqqDgPbEn7(g
zLb-r)8}O<V$D7k&q|8ej()@l?`kd1UM>vw6dpxAE_SC@^(2mL&KJiw!y&WV94rh?r
z=erOUNaQ|w<;ggfhd=r>q)?{n$itW*8p<PZKbu3ArrAELHYF~ORRj0cCD*Wjl~WoF
z4}E*Vh7{6yCWi@mqRu%7@$zpY2Mxp;diA4XPf>9BCBmajVv#Ry{r9EMq9Uu~g6!zS
zdM$plE%&ICwG8$DWQQCye5PLzg;&WX%h_dzbm9rdnW`vz)h93?`_#bcmr;x!WkT1^
zp@Gru2yJpwjgQq_g}XM4+t#gr@2X$y`V);K4Bf4NVK4@del<*xv#<bFHK_+>So2vH
z*0@q1eo~4eM=!JNGjla^bb9bfxc(ET+Z1ba+@z_}X^nI?VfN9u>dtpiGcTGE3RD-x
zj}$dIvr|Bkv_S+%3jz7+Ueh8)ik&3E1S8UwnOq}4RhhjV+`+nEc9RZ&8^$*Ns9wfj
zRtbc8^6QpdQXeBt&VSopf$dCx!a5a8U#<Q&CNSV$#~QL10mVzSz-Yw*Xf4=<@0_>G
zM)G_BH)IX4p$|81awSqJMSg6sF3R2{4U#~5TmtQRx-#PRDG<P4EkP;86f1@L^V_3d
z+)Dy?crA@i_P`ll24)F=gflY0O%1yXhl(;4r_&D#TWg)yWXW?`3JPg7CoFOiM>Z`5
zraW+n?}FhzF+Yv)h^)xQ-`J^7h4+@MBphQIRDpi%o%U)C18S^iy)bk$sFre|#CBw6
zL_&e;1inB1GQWReFt<oz`h`E2m0RYp+?_zD_&T^+_hqbc-M9#U`?B9Hr9b~T-Srub
zY2}i!M-I7?%AKTdh6f4xqd_yBdbvTStuupXmUkHz8%dZ$Bum-HPEi*NAEt6}(_9d7
z>a(48i1SpHZquuuON0#JdAb~-q^-r|y-!5`xSD0``wy^X{H^Bxhum{?=ug79W!)*(
zZ}QTAjIr<!4Ss-s?(i<+ub2*syRcf`-mCBCJh(V%g|2pRv2{?{8G>k6baHN->0Qv4
ztCA1PVNHm5AO+{FU2u6I%i;M44f5Fi=<p{p`WRk)rRYXu=VDKx*x)_ZnVse{r-wy%
zFfZKJ#>w;Z^c7(SiyJCipZgJ&8%%)t>v{$r2jiFYw6r^aM<U@N__YuP=iO{*w%Y@g
z41zhi&zFl}{H}YE^m%v}6K`G7OfcAObK5U_n^oC*@9J~~00Z<kr#&GnB`~YHZQ)a9
zcR5I>a3laXAf?lU+fDEe+Fv2jjdkf^QtKfc8)@cMshHe}_(Y&7psL+CM)j-vYIY1!
z@>{u6l!?uMGlhKfeUS?q=)Nl%{&BX6*-M#x%a1k_a`Chza-!Y)ei$3sm=7r<(3PT}
zPz*A-vEh4oh<ln7;M<`*h?F#16f^}{uw_K3?H|&9@UQ6Ek_;p*4q2_1<a@O<<*H~h
zq1{WSZrP~KF~%yfgKvc&nJJr2+`uYe$&;LH%Eg9%bdC|3=uqW!E7oK4(Dg}qLSqqK
ztCTkco4h%_`abt*2`A(22=a+hr1E2UB20dAm`vpoFevcKL6Q#J_Hvui@$S2#;Wn`O
zcGJ1C)2;Sucyoc>w7CD-S%)VK(jC5cz7pK<_hTbkKhIaY+xiv$NRlP*6%wu%PYNwM
zt7!Ru{i&ays8X!h%miBP@VP$8_mQ@9qZjo<&j?(ec$Z%-(O5I--a$4rQx!e!`-$l<
ztotkVxM#UlONgC98`FR=16UHGJCk0h&f%SA>T`(Cc^&5b(Q%Ud><NNGnc<?1@5oBm
zFtmi?N>j%exmHkhQ29X}ZZvxP<_~`gqsZQWJRayOQn5N1I_6#Sy6#th234Tx&{1R0
z1NB0C8ou3oJuMIr{I*>%624e*{bfjO5Lqn??~jF5X&_$@!{|HA{i#KRXY9euX}K{2
zM;uqdvGe=8j83^6NW<tnhE5jiue7HVbv}P`#YEup?2$#3q`HYOHI2(=6)G-gu_V8L
z5hPzH&Yf%32Nd(fRl;}J*Yw4s0E^Y`l)iz{MhWa<TQVdKR)476d0*`x1D;a!)QVle
zM2`hCpWo2(jTUaauwUnp_OO9cJih*20yLz?t;`&I-z{F-JDeX(7nAF$mPXG@0h*3F
zV5ObsSYw5#r_|ga{?Fo9WM5-`=`i$vtHXalCAgWkeVZ?owm2_SaC%r==tP+g;g-P0
zuvCU=1ygG3TxEcav$2xuA4~oIgTnmFA{KvO!_y6QYh2z8Iq^PoaaJc;4MW+JDGvjV
z<OT0Cqzj}Y!W-CNtDyRXY9E~eW&XLpln%hth9OS&3Z)cCd{tE`f9cQbzt>@ZP=1Sv
zDxI!vfAP*TmQlzVk;7cR!UfU1v+dvxj8VgzwIBN}N|xgy;!^PqpHha`3=|f`VYvt%
z6r)KN;sR~n^N-!K8QWPlJ}cUKu9mH|>1eh4?F0DF<Q4ylcOrw!O6&`aa$Y#$FtCZ1
zvFhD!7vTH|6IT37u~Vg2sPJ}wR~T`Ac3*w;x>L#;w`r{M9WuA#hbd~+E^9Z5!Uh@_
zTM%Z+7R73faWc<<3s=EbEf3rw<VhZNF8Rd0S~y`OID@ZT{acvA>X@_aLQw~TQ*Z(u
zIa}HyGc9%|G%QZnBL&vR(cEGN4y_nwhxgXI%{rRbG3cC@E{$hn={i7vSN%t81#Q+-
zm+*)5I!L5c6|-!WyJhHS*nSOnCXKPcO)XXC(fp<*V%i174Y5yaPd|8C=@&%Q8n{sO
zK*zPCMQtY1pC22Wa3e;8Gn_x^&?WdS#)(D^)SSk{maKcdVJ+b0Pyr#7XTuZ&1x+(#
z)_)|a62}_}U(L2NHTI}~`VclW(Bm>(AR8nnP(jm9zh%$dNK(l+r6C)U@`LYAZ(N<d
z4>ZXk8cG|TbkDuOBUqYJ53u*#aB|ctZ^vfUG3aCSiP*zE#Ll3mQ{&O>om1p0#DRWW
zPjYc>iFS089nX>?2Z)Z6N`Bdf<e-97;{j@R<2QC3q@5mHK-vU<l4Eq%i+Ntp)Bk+C
zPVW5gpBs~gKcK<4>8CO8(h_#sMhe^AZWK0bF204};ja23X;;ema}@&=N+LMr>2Uek
z{>PlZf<M3meiYgWx;l*Mp0ZSSYLnzth_FoFX5Am7gYLrW;wJ3m>@_?7hHwyro%bly
z%3snl%hB*9OlD1gug)^Prn%^Xu)$TyH_jqmXg_><P@1=XlqIV=9f85TTMo)V&2GoK
zMlwA^KrQC(bJ>ldD}MBK*mB6p9Q4x$?-VN;dfy~~cdo|UUBA2Mg{@E6%CfN0G-uD5
z57L&oYkb!!5BE`EToBq{&7vlvB_qV1eH^+I8RUj!P%P7b9gxre3QdX^<Iq}kwUD2q
z?^WB8r;ZQky9LpOfDK&z7HfMCrq=f1IQB>Loz0@4hlygO$bxj9#VVmQqW6KG##ukq
zCyd+#vsb|R3;Z&gshr6L?lQ@Xv1{n+!pK+A0UE#2GXljoJQVH99iMSp#DKP9R<Rmf
zGVXIH)9;&qTy(vHD76A>*7sT&;sRw>@=wT>*&(b&Uh0~Hju=m=)QBLK(}DmHI@YMD
zu%%Vs+K8g_Qh|dv+=xf<V=?w{*RtbfB$VcA6&>s3-hrN4jwWuyIny4?K|Fa)0S~(2
z80WBVZzwP;!aKu?y+0mG5ky5EH%__(N@N!Y6uY~B0yyOtc3vics?BHEi(IMzKqD_S
zc58=BPfUl707{Yt#M<^2O&_f|QF68waMFgDryHY9=>9X#W3~o#1McaLu+iH=-{$*@
z2vcyLZb<%0`_`;vpQAzlN;CKvs^@6{Nqm_PA51Mz^2NA#@uAQ5<6X?=hAj`9wy1Gp
zvstKrhd+glVt$RPeg2d+F66_Q$J;&U7+V)J)mIfhBA$JsUO72k9t<>GDwF=C4T$>q
zZJ@Fz?Dmv$F&X4n`O~i)7!pwC)SxRWQ}p=5>y2<KSZlc^3g6xnBl>+aOJt4PJV~>{
ztQnn=yDx>@ubDssdvAz7yM{K*mSyVxrR-*Z7rN{ZR0l!BghP!<0qVz(j!9pTdi!b!
z&=!w9FVt`BUP!^?jU?>!0DGm!kJt~`ao&x^eJhzD_%#gZ-?J;e-qA=AAtZ|L$o+=-
zeBl$nUMi7kQ}!XTcta#zYpfQog3B}Vg};pKIkN(C<N0-d7laHg8O5VuSTWz<D0+;4
z9k>P1S65O6$tbWg?0e*$etO5!zqXk=p$2iO)sd<K!Z;v6?WpFEp$ApvGsRr*5K<a2
z+hh3qgJgnL4`w97__pBk=(FC8wTZ{tvW%A9NV#|#hmd%V82og9)=K#vL(&b81g{U|
z+sbU%5jvdDE+RtdPgcEACPWGdSr|8e2s1H91ki53QW*OjOok~YD;v4F`CK{RwN6#L
z!R2Czaw@+Ly>VIa)fK*)ydaiefi_6uA9&7EXP?qyW<h=q+l)LnBp_H~{(5W7f*qh>
zKXX^r;Ru3=)UhJqxD^r`7#4xm8T$Ajk6$dC47EOZ2VBL_;kDy@`))>fB~k8wI^Y_i
zozuWMZO1R}cG<W>@LBEfCG#Vyg4@4SMX@($)ldVA{01GF%^xT#H$o&nwlRXX_@^X+
zH6~GyT5D7&q1=Vc!L=x|8~X00q3<*n{wpl?Wz_?Zfab(;Qp*}&#w}=87mbM65?E19
z@U2OcikDT#1$ACNt_HhV_u7kp$#+tA`ww0g7AA~HHAr}1)Cgj$qLqJ=g7=OH&f^5$
zmO$HTbzLBmxoi5Bs~^R?ok<j+KXxr(n^~ykqj)gG^I{nZQzUg*ItJ0@33Rc$ZZgB^
zbw(7dOyN#gt#L^REaj-%S*WQx-AMJaW$TtcqLW45i8pfsH7frARk^Q!p`>p31EJ3v
zKs$8n4({p+pKYcD?W17HL5-Li`i{X_oC(!2es=ep+}~DlO^g+C6gH>-x3_~xlK0X)
z7#x((2rfN1IllnN8vWMF!bYWobf$9RFDeZbj*FF0WR3}<JmCPI2yrQDR_GMu{ojep
z$neaU0EA)Zd+_G%$;xkkI1Xg>t~LV;oOgy=8C{Tq3m!ORAjUH#VpTKVX*p_`jsT~i
zuamn7#aRo0%1BdP^_H$w*~E1+dsV`-bFrXjyf(dwzq=tH`Wwu(b^RT?cj*b*A`dz0
z3@iS(u1dNqg*s>Zs){7s+F9AzuPgD5rW$qqyA5U{wBmuD`fq1{{M8Wce5I>D`FAHV
ziA-1AGC)clvkz2gn9R)Ooogc|iIDg3B4$vOAttfxi&v`C$W7xq_xGP2uH6#14w?GJ
zDuu(`Zo6<*Ho95hF6B%lzFWPW=msD@PpWyP*^@bU^Xc;xb)%s%19C@+)Jz!KHN#qu
zNg~tkh<cQu(7SPezPoJExrPGq4`2c~AI&I)Mss^R@uJmu3*cGY;G%Lf&*Uzfa4N5_
z=Oyk$uW`e4*0-ucC`*jQV8$%@MQKPl&H!9Mqrab`VL<zngzkEDh&0!q1=oJ@-F4Qk
zga{ztTRw&IyHA^AhS_D1@lY!QiuZo#j|8M1FMuG2W%k$B23gTje-J#H?B<cE_(Bhx
zCr!{Y`v_DyA?6i-aT&Fftz@gDaZ_8O0x5Cd4fDO{jUL$mEbl@@DxyT>KEAdympu2&
z`*P4WM2!Je;j2GGAAd1RC?9g*CE#*N?C`^H=xIf+Ny|;xe!#L9+lL97YqBT;pqWYY
zzcXZjC61GoAR16We*!{l)@0Oe&bEJT86O2kW0Gn~X}uH>PJ+of;lh*xhi2?#qHXR9
z6=Ei3M!b7U0M&a**<5>1)~t~POI&xoWBHG0*(ul^s}+$Rl;Xr|OYP%R*Tw;g(;6TB
zG*y^QIjehMAw)mGIPQsf1h)Dq%`H_0md<B^C>>A1mY$L2f0fCx95m(#0@f9sJxhWS
z#b?X(7rv73T})yNcyI}AjSOzGko$jjy<6r3@YXF9hZ=fO)hkACh%+@mIjQ_~A8P?}
z%Lg2Z5yRxxY_tUq>^1R=Y(xaA<jJ>Wnqwq{X*{fb%*<(@)DMV@W937tZST~H)x54|
z8^(b=Q8%zIe@n1o-oF=sSd*pmLb!_+`jO@o1j)8id_E#LBU~>I2~+0xtYhD^kAyO=
z#_Eo7x~*M!GHxAHsB4~3-1!B0YJJWld^wt8(riry7quF>0)PQUE8j?9O3f}GVhvJV
zQ^yHKPNIVMS(b?gT1_P`sdmH-5w6FO-1R0TF~!(^f5X3rQs>sDg@fYunaYb4q*Ta?
z3wp|}cBK^^Pr{fk54<R1p?xK}9GM|eAO%oSd}HJey1YoY;Df>E3`yj~RXh8B_fTWk
zQr-Ai1|GGi>+C1Xk-h%F&w=bCfSIzxVY<#-KfE_pRHdMztVbWq8}(2xUWis=nu%~d
z<d$=af1)i-3qKwsT0pIzek^-5yQ1`<Sj9%aRFhQcW=f<hv4~SmM;BGu2Z`G{-9As%
zZ(Y(Hn!#%?G}jjvXsT=2kDkR?r6$tDjW-2Dmz`BAott}96F5uvQiJ|z+^Idr;)&rO
zp!MUC5yG81;U;QdKN~KIa}_0bEQpkn@&kSmf31+%Afa0;pwnsu^cj<suqwR@Zt*~%
z@R3;*SWmeRIAhdiSu7^K+c`ZZ5}4Cl+BKq3yR47I;h*;x>@e)%CGWM1+9q-z^}jn;
zGaP6aCYI>#`AXdQgNla)O<)Wy)OOO768-4P@7G!*OF&~^z8sq-OjZ8P4`EcrIw$zF
ze@UtVYkrD|1@Qw;FEJa2QA)JCZxQFBOsJWxux=+|W_mF6$i!MA?em+tu<$BRc{W$j
zaWKkUrj{^muYxWYbl<g|GcwKe3t53-ZWLk@JmXb+$z93mC+<Zfd~SN`sQLa;)Tq#T
z)pOa?ioZt?sj(RrAxri3%5L($GwH@yfBTsa_IqiIxvmLsUP$=lu(5DVbEFYb%F=BB
zp|Oi4SFK*?DlAW}0ImRP-h<CLlhMgjT0Ibr_C>YR&yn+i+Xe+39hyGj+>2(3K3v!F
z-9e}91Y3>>qAqb+g8RmUKG(SmUE*h0b5+R?PFR0xr0{|xR@72^o#<kau#Ss+e{}0g
zTQM@fWm<v>Z+%T6gJ&2V?7TpF1g{z5jM@+Rxz1+j>LTy)l3^0p6Rp}+9lAV8zKHmy
zZuv5?vu&81duq<5N4pNEuNb{gwKG|M>4*tAsayu<c8<YfkVClcQsLW=7`h+wYSUqe
zt*GrU$BZ9#6UZV<R>k=mD+>DHf2L;2g-@H`30(K+G(IaMdgx!QtHO_^8s)+|>gcMZ
z!5c_->oqHd+ftoG8(w}!)Z&Oz#ZLX#^$hh`32|G`v_}?Ev7Xm~aq1woY#K;yUA)Vu
zAZPzhIzD|gD%e2(Nfw|?XaQi2D#arBp{)we!L50yjMAf-zkK#ZQuV~fe?@TGH|m}2
zlI^9ijbk0&Ae0n+Ym%~FDnV4@xwqa%RB0h$F79%Zqy<ed;6S&Xu#k{C$*j9&(LZoM
z1Ys0(aL|3g<&OvTCkmh2$W<nw#TvVBtZm8f$2nfiZ&RxYM6Gk0U4}fe`Mz6+9guzO
zQ-HZLjjkk_d4{O$fE}`6e^hQR;r-#Eh5{4&MQd|x0@p35GS^&0nd2ljT4+^*0~O1F
z+i`UhQEao@muN;u%In9pJF_Uch{Fj|^92P8#E$8o_$Y0b6Ud|k3j6m%oYx-GJb|Pt
zxfrxgLL?=y8c^f;s1cyt%Pa0>;3N57WAfyAK?@&dPHq{MjtDo4f8OM(clt+#Ov8zZ
zv?Ib;0tS-tM#Ljm5koGShk*eU_EA(pXe5U6{^ajc!pMrZ>bmDZXvR(;%WwSRRj!gO
z3$hz;4iK*l&}lK*hUq`$vDt4GmZeo=u0!Wqy~)<v(MZS{kk{sK!Ysev74Hw^eg;dv
zVo!Rfb?%jJx*>(5e_ZK{&Qu2L&Y;JkpSjP51wT5Q3z*M)E!frwWzD{-RB-rQm}jI$
zo7{@jLxO27z)z6|XM50oa^1FrU))PtouRU<BkmM*9MRv+ZYXOO`Xo;OAw<rKN+=i1
zn>wMsY00{zG{fR%OWTX^X<y9VvF%1aNX(XiG!mW(5B;4ue{@OG$rT(W8?_#<UNub{
zdFpgl+FHUcP=IpvT;+Zt5OqT#ciZoQ_}D1ErUO}6tIhY>0zEE7GCFO?yMjvuWR&VC
zhuU^C#+e2$%&*cHd%mD2FHdJgou`AI*PQi?lAKH-sCje^6!`q(-BPwFq_t@E6(Ec9
zv|<I?9ll?xf9Rhs_l#J3!C%>Shykf{Ub6W$SP<g+X`am=T0h~VSLCTqc<FE^HTW4*
z6ozI)Uxs!yTVfa#I9YPu>a<SOr2Ks%Q=q|W*&v<DOrGe#hVJ3KAg=k>H64OA0bAZ3
zJMB6cC{+Mq(R28$=<qbI#=$ihyMY<}eLv?+)v{twf6{tx4Mb%)qS|^1UEk4Mq;tR1
zdo4Xy*|Zp5tFLB(;S|s0&Vxf`Wc^NYonE9IA}?c5MrDD5Y54s^64wak(A*bBqUKfB
z>9oWJXE5bv)p^QCl8}!{h3EuC=qyG!0|$4sK{O?otQEb6Qa-zt=*X*ok3Hw}sW%%I
za&yt_f22-D0>Wibm^oo7YEAd<P<=f-{4DkBQ;>D7=2}L>69<1OQaCmRi!^@KbesoS
zepji$=~&U1S?k7<FQ)-4)s=Wm>Ce8ymfvyTyF^mApMhD0Ne0Gj5^d-t$k`1H7ZVJg
zhD6F^&R5lU($tAv`lD1E@(OVW-Q`*9RUSp1f0Vx&SG@^BxzyhLsSu|58Fq%ANQYXW
zdDzv88`!5OI(XjkOb=h&>AfGF14*ucU!&Vsn5ghOV24B$jxI@N7&ryr`_CU6_cDWw
zCOzb4cZUn&BBpo)&=5@Uqfa3*2PagwWe@NyR9wpG?A8-rO00kF_qQ$$@8qV8&uyvX
zf3e7<J{4t>w70R*Qj#E&W0!)o2<l`isV#{gMfl<JN-x${Dq^g{id5mj9x_F?2UZ&V
zo-6)s6IqDK?Q7KrdWEtEu4{kA{yffP3-@#M{+~N=_<5BlBAeDyA%OUGZPwH?BLs&r
z=?0$f4Nqvr5@kMK>%YC_<+sIXkt%Fxe_1XP5Q{mkZ8B}-gba@^=P5yVd&pBtmXzAa
zjG+(9n-tuPmEtSzX|9x&^s9Fo@Pg=;2H)r%lnsp*;MjnC7;>dmITVgBE;wbAZb0x@
zr$S#HFj#-O-wqjf1Jw8({jS5lWVX^dGWPEC5W^oRxe<?5{rt=o6Zcr2sL1jKe;9b4
zjZf#E3h3CaFK1nFt2@iML1j6%(&W8rQRgLWU5=yGDEKIo_@fOcrpaYBV!n>aojXl>
z7(^|W`<Ze>erV)FQICyvZll&|<CvLWYx>r*88qK^F!Ch=sRmO$ZUE5D3(wZRMa$mB
z0f-ES>Zyy4=kBpnkH)jL0c(MZe_lpUv%@`6V|a$8olColU9KJL4>|6ADTf0oj2>}c
zfe*uZIMQYY$jpgaLt{5M09J-H`RSX2ihcvQL1k9cfDzwb=<A<f!}L@OCoN7cICs$b
z$MzE8U6^>WWsQw`ZJ)?MgawW}JQ~UiT(=3>EV6s4G~9C1Cd{nB?ZMpFe;;OZA@{W`
z4i(m!igL(~3T-vs9ARz8ijA|oK5?;qJh`J-dnKe@On(jl;Wkv^-&3ZOZ*MkA0c$x?
zMuRICcSoAxs03D>gkax1!d3C*>>5?|07QF#v@c`ku>;A{Jwt0GQ(Oz^k=&RMy&^>{
zL!|v<pvGu1`4_RW=&=(GfAW*dwqQ2wg4EonxEd3P{`i9z7X&hQobR$CGx6SZwS1gj
z{jT7OTWs%o9ZPck?$p&Dn(G1f1vw!a=x$tmg?>^RCdQRQ7~Ebfbwsa_?`&KYW9>U$
zU$6$^OoyJV&K7!3%yUUHs)t`1@~!I3LzJP{x3^0;LnRL6WR<MHe-4cUZ2u?K$FzgE
z%qAN0$nu^5GKgGJhcmAsY^!ipMq$@vY^tpsOzLqWUd|h+w`cc<<|ZUvL56gLb7K*m
z+Vr4Lf;zINr4Njb2W9pyLC1#2OdZ)kz?_x>7vpM)%TVgo{h3oF2b$kQG%Nwt5SvQy
zgKvo{DbpHGm?pkke}t77rRZ8XZVzrP<v`gtJ;wnv`x%fd*&<QpF)G+pu}Wo&6xGV8
z7v>_YHRuSokg^a#zod^japH`pj+HTV!M47Jt8owN#Q-Z@7dzQp9aE3ewOC=X&AUS4
z8P4yFEyAv(EIz4ONz_}hgDEAE9_N}IuC>NBC)3Ze={Unre^iLtRrd&XR3RHm^~M1r
zbT#%vZx)=@unu76q0gleIORlrqP_2afyX+U^!>Jq?~wqu!wG)@i`g^t9mKD4ilwiS
ziiNF>4FuY0^e42({ZVtWp4z7*5ao>4V&?oc1N_~AxI^BfQ;(BA`KZ<)n)ecfQ4ubN
z3Dq?BE>&KzfAfiS5M30^b<-U_kPVeKd_%r$Yr=Eu`pH=sf)2b|+jvfhcyh(}p2Iy*
zh*?gVAE&gV*@(d^Ssa-7EZ^2Xj-&5c&Rra7U0w&iFO#6DB8VT;oBzfLsN<@4p^n#?
z5FkQV)b6T!Gh6X?zat^{l9V~A1iNO=uK!6`ANjONe{K2&6~lu8{R@vIMAO_HiIQo0
zlF;(kCBqQy1H5%msa=W|xbnAM=mo{?{F#al8bz0bou6(*QcqVlE_j*JHp}UD@13Nn
zGKVtuY3uvKDI8vsu@OCrMG&EQJtcnINyNtU`r$Wh?Lz1T*Fl_<u(HrV_KjD$BpX>T
zHT<g4e^{sro3Qh5nlg*MaWAnCBb?u066NwZfTWCcGAoZ$=$*>FOtonp&TSs`zB83S
zPv!l!+k*)})>I1Qb-}U&JgP9nkGh9qtDCdYtT@tr^!E;|VUnIk>4_cX#DEd{u(*Lb
z@ESN+IKj(hiWUgjx8MZezTJL&2`snLP^n&xe_cNwsE)>OkQo!&1VLbh>VIHE5t5Tu
z;IYN>l{}$v@b_brb+6d3cF5^bjt#NC=~3W4XpQis(P-<VQk&5kfUhPioGEslXM)o9
z%2EiiZin;#hM4%Z0&9#J-@CmL#=+%jrSgsk;SY^)=Nx$a=su;KOT^@20mUmC!k-9F
ze*ggS)fcYa6_6#7AvA9fCPRoaz}91S@Ax3R1zkiPrTcuT*^i-Wm!!&z`l<5U>5cp6
z5W@vA$KJLqEL?B1Qctx4M;^V;j)pGSpA^1NtRXFDr(v?dXUKysdr!TjD^?vQ+H+$4
zbqN!6Th=4l6rqP!N0CTgnh7iBIz8lNfBsE42C9R7>A_U>7MSRkgq)IX5uGuo!Ej@%
znzOS9AvAuB-gfCdZ9gB3;^lG{6J6P-Y3C?KNXB?2sd_41-m|MD-}eR&pP{h}S=?eT
z*Pp-d_qYrC2?*Tkw%25wWlU4S;<zl!al##yB>mpz^;6%G2j+Bp4IvP@vY7_uf3rTb
z_0sM{2j{i;k<<`w1o^K6j(5Of`jX=OtzQIFJ9JdkAML8SE{f@oYeA!)2Y#IImey!^
z25u;qgSlK%?rlAWv2Ml%LF2Q8({OlEA8_iXrQ?~+KYQ5^$J*bvc;OKlrX2a$d-2Ry
zZf~{sE-JCsx0m^0Cd`^FQ1@gQf7i&MpxFv>97dR4eL>lsD_N?J@i#vVavJbpTo!pp
z9INY{uW0{jx)tFCMewC#RGK;1P?wwZfQX}Bti82d#mE5@LX8W$L8{47@lVlaQS*gE
zgs~G|v~#SNpBzTc>vzw~yud_=b?zu5x4ITQET6Za`DH{aq`;c}&i<Oae-#G4F6*u_
zC9j3t(1YPfa89EpNdV)#uQFedQi431DjFa#Y>nwuIL<YjeJUZOo$QBEVRC067X@QR
z>bjnj6D5av%bBR48L(qxt}63LBHckEy|Q*Ehdwi;^&05}uzJ4zNHyu>_4f2${|J?F
zp>t<?G&griMLeVj=1^d@e->e0TD&IHP}JMavRkE4O-R!2>?QQVP^219Fg5sqczNsa
z)xq-NEwaaEq<r@ypwQN_O^<!(Jz$>mqb6#R{*VU0PYEnFG(m>{W-;uJE}yk!Fzg!S
zN`~96@`uy;$yGtaF+}w>?NU@i=|Js3L^Q|N{KXsXJ?ET)G#Mzve_KR87wzq12}XEs
z%t=^=#rJ2{6mP*Efvk+)WtOk?wS6Ji&v6|Yb@~qKQqndHYGpGhYUG{7CuH}B2Vho<
zvf6Ce56(<hC8S@;Z!7cuv=3MV_k~`-9yfIfU9wM=sbg_5lE}<B!>`QC-F5B}D2DD-
z3{wMx&_6@vYF7}ff2AO~7{o5uIONmbm3Z}2oI^?yaOLwPSqyxhWdOfIMbZ!d4sJ05
zlMkBWP(I7F-Q*&$UQvVYl<Ua9Y?HxoBzltJgwoAwd)_sccpk0;Zi+5~2?+(Ijk!5v
zTTE`E_nTIF?pwRu5ARx2+w||pzwk#1nu(#o6U>|rsSIFne>9iGF6P`{LwSh7DYQ_g
zH-Pn@8R1fGNT1r}+Jo==dewA&EBZC;41&1lhN~I4);UU$cByB=eHF>E(3aISot98b
zSYUJPG%o%-Lo-8;oxxMg`}#2Z+!lJ<xZmmlv>y%pobRj<;50mJWooz2$)67|3Ghmc
zsPK!bX!S(ee;<vtsgn7_ndj3y93z>Z7j^fy?771<aC)|OwUaQz3D6%h(|e$g4)jAq
ze57a|>^|Nq6-MV-OI3k2GCU2C*;io7bzd!ya*JXy%U*2cRL1gi3}BWv8;!`{!=pwS
zz}jp|Y+dtcIkK}QTa!3Yep=Eg&TQc2Txv8fLmakDf9`(Jape!~njbiA^k&m<X2KC?
zq5x<Ke3_r3*F+6weuBn6A(^WTFWck#0fg&wQXvQT;<|d9S8v@(Yn$dF@2^!9{I@rC
z)RpQ}gIo!a?c<xI41B@F9E+D-RugKo0;eH{cBurPs!E2?b+gpwE_#uNza9Htt`N~p
zh03V`e{b;O%UdaZ2lR;(u`JrMONHzc*qlm=e*}luwR#6!P%`nOizgbm=|F^fucOsf
z%sOmYofM0z!)x9b``{oWI%pOW`{;;Q$jU)FqD1~mm6STL;8H8LY0(fFT3`)k9%8l;
z8t<=7E^GS1#*~0sbO1Gr)CVo=hZyCc{8ovze;Yw1y+sPg^osLHUct9b+wg=fwjMIs
zWzqLiF+;~JYzwN9*2HVa4@G-P%zjqXELbG>-M;cRiu}h!A6k$@#X(>>+GBPt0#s5d
zsm`CPr*gYr5kDY%OK~J4Ms_6AlgAUK#K=kg4#;E4Vsj5ACSg&_uCnhtAc%BGd`2~q
zfAkb3LL09Pva0lE!|9a+nxj_4nGcet1}h!fwotfN#R$G%dMFP@fum*R$gPygb)ob}
z`r46+38KRO1Ytc8p3IHln-#%XS^3IHFmA29&c5nZ2GR-~aid5;NpKjfd?Fan2U6d_
zHdxym%N9?G?7hqPq>To~yP8j|jTaffe_I7t6a64RUPA@-`*_8dvVOsZFWuCq2RXVm
zu6P!lb0G1=FTdI>4EgzB*AdMA0<-iE0+EC<E(A%ky2sg)#LX7>*i##9AR%)%T8ORh
z0NJE(vBR*_YYF5LN>a1`U98aw+P4eqI}`GnUtVjSUg>j8$nBmp(GNjfDt~z5f94vL
z&{n@q1l4&ce!8_g{2n^_hsaiDEt;(S;?!+!vgCRm_4_JD*$rtZoS7Zg?+_vH$t|>q
zh@>EZsZ<~C0q365<^8l63(_!~f||48Lmt+KXbAu+PR6#DN-ImjSlIoiyili&JI9@5
zP;NI~8>TfrU1oR5Q{3DUAFdZnf5i0$7Jkzs9ZK+MP(QaMHShpBh-f#4OIK$ZASMeP
z%}VQ==N(USE+<tk#)tY*k1NKI&57Op2NQ}}LMFREdNh6rqhhqFJfF*Xfp=$<J}1A1
zH+1wql^T22gJOD+UE?Bsw{RdE8)`ncC1nrRBr7(yo%FE-SL6_Fn%_Qke;xi=W&$f@
zbWWiQiiwL7LaX-fY07rHol?6{!Rox6<X)nsl~<r?7i7T^Pe<%ELWhXDm{aTBZ9ZFy
z_x^rnsp#U6F_=TRl5RYfUw^4sQO_x=6T(C3tSJzBQIgZY?7gZs`U55-LS1~EsW)yY
zZ9fxcM<w9al-F}A(Py$Xf2Fan`5eEyzCV^Tq;d~++6LHUuX)$ko|P*9o=EgXX<Q#A
zoz&cDbHVsXhIo5#8pYRL1cd=@gttr@5O^m2fynP97tCmu@2^t^ix%R|Dg^zrrttfQ
zOx^QTXWr2~T6#-ttEvb60dVUS@~jBwW=?twuSVmee!4*t{#X;Ve-ErbUVX3Y5FxMs
z5!)=V^R7C1KT}GTCf+kGen=$6Ot|$&y?o40t$1j?GAr)anW__!-s7P=uG2&3A6rx|
z-f7yFD?RD#;?j$J01#^|?wg>?i?wt>D|kxcpoGilb`-^h7Q(a@UmI?9TaG0TBBlCG
zRbu|FA8|Ro;^Z1*e=1y<LNHL*`3m%t9?bpp2(#5&{qQrDRCE2U_KMaJoZ3ynx)mQ`
z5@E?<Cx^p~moC~ZNdapOA5ToFtQ9-TQ+mwCcsisS;HJT?LQQ0mQq0YEpO<X^)2I}?
zWKvOakHi}fi*V<OUc6q;U_M;FwP}HWtmtlftePp$)6a^zf4U7)%Up0)U^G}@IMr-P
zea`&pqYKeVNtA6t-u(!j+S<9XSzAoP|DB^nUXhWCYY>C5$_0_x0C;F;;(*g@GWJYl
z7A=)pLVroS@>RMbbq(F9BZyX~^!SR)U=8*bnK3Nv4y*n0%K2onx?@$eW}-vQNbMJ#
z&(iM2q1181e=GYee*dDhCJLQpbI?QiYXE#gpxnSJ1dYbYz2qzqqa4Z=!w+zTV3Q&s
z5+9jGBs`~=?{y`zb?nl82vtU+I`ndlxGv7iTI5>&zXH4jL;IN11o^uDTKp;N&nDse
zRCydkiK(Dx3&u_(gKKic(fKc|?Xag9%N&lhYo#g>e@)_JW_e~LNhBzffBoPE{TjAr
zs2bkmT*fRx5YyS^NE1%3K(zk5Cf2|ZR73)<(D|;c&A%;ZECMuJeFKM?uYvHlahikc
zp!XPWY*;M3=Om_yMRrhojRbg@8HBj<{>wX1!j3Wp_+j9j<DJnD8mT+Lt0$^+DT<si
zEmgoAe{>3GUEF|Pe#79oO-069Rk1!3GTJ0z&dF+^XP)q#_`;}H$-9D^T6fWQG>l?R
z^@WW2{YH=S4Zz8@dM0gZ9#xnjN0Pi-LtM@Zg3<mwfNOtHfq^R;%(L_(^LLg))SJF3
zz~FtTb2UJ&u3pEU>0W#_wwVH;@{%3muSl-9e{kYO2CE)5LPc4#LC<V5LZi}0#uiBx
zouX>24da(iAd$r8ZhpUxR2-U>rR0PUGWR6mW4+`0h6IsD!Emr$#Ig;+N-&7q(R<Ob
zRGBbD+KH%$I7v}^ZX)*Kt@0LX&kkA$X5U+$^>ojmU@PL7ufCRM%<yA1VtXvEjB2@Q
zf2oL$1piWV7#N%%2!T$Rq?`J$b2hdfcO~>}ChtOe`;jU&<K)T%fYM1Z48Q^xcyc-b
z;P4aRJg*$B&y^R#vJaBDU-d}Yy5xnyDc&&^E08>}`P6ia5QWdnR7LdN7=J4{4)W(p
z1B{yw>HO_zyR?it8tp(r+^;6ujG^<uf0Sn%;K#E9v5^G2Cqm?5wJGmI>(DktHA7N(
zQQjpBoFS^!xapOGAd+OVNP%>$V}So-8vhju(!(!M6J{h8FtWW-=S=I2`;g%n(TS7w
zi<DQAX;gtACKD92Sxvx>G_2=7k~lVBC(RF?h1n(Y(dfy>Js){L-iYZG%F9S0e-`)y
zzMFoPI}Xlr-iV6)a)171F55bcGAUp4M-onBCj)cEr8{u;Zt<`Sn0v`Z;qhyMR#rx_
z>kr8F$g#^SvbRJUcEYN0r#FdW(3LFkc|~}K{&*k6^A!oeCk+EUo9E_<Hg*+p;8<H?
zhaY96@_k6QoTI^(=&ofHVwDE=e}zg40LPkbD@M<FYLloT>KNg;doBY!ex2!vKhYT+
zdq9~rXv4d->k@GWmYcGOMJG<kWsWKF3Ohzv*W?j&1KR~kxk1hE&1f(_{uBadN?KxL
zpC-S)vp#M}^P9dVO`D$D`U@tJ?P8fJqAG0tT}<U7n>u3SX;-cXsAbN6e>QtMYYxbI
zWX7xte)@ZCdy~&T1;Nh@xVwje4kTMN3nI@@^o{`+`12LE1ohQpPc3e;shFt&X&w&}
z7O0{F?SBxOU76=>0A%e?H#UvP#Cw6@sWcLEgxi2p|9Zh_PDyU37aR4%Li%e!p>T(L
z_4N|N$a1XXJ(-ZW#qG}<e=<6LHT`=N2em56NhW|Ig}`D+jFF`SY*^&iw=^&nUG0rt
zXK-<M&BSgyG-a|~OMIHZ#3kab$mpvwiYo8Y5s*=*3FZ$k4_(7va{>8I#!QKkh63cl
z2it{&ZtIh_mju&Ri6Q^5%*cc)q@jaX5Vhs#n}VxNdq>u=7r_UJFdbj+M&OQfMz?<g
z`_(#CGeBp}iv)Ep*a3Ef3T19&b98cLVQmU!Ze(v_Y6>+rGM9iq0Te4XF)|7-Ol59o
zbZ9alF*q|gISMaKWo~D5Xfq%%3NK7$ZfA68ATc>IGB}eEI46Isxn*!%&9WsbW@Zap
z%xGDX#mp8nTF_!vi<ucLu$Y;dEoNqBW@a9L=ggfuao@Z@GxtYF?8?kqxiVK)#op1B
zqzcN6LdLd+Kyh0e5F;xS3pYT{+}hB|@rSLAETa<8)Cus{_zi)QQp5ph05Z3=5j6k-
zxdG}xV}K~o2*7{F24MaE{W}6BK*ZM0&B5H%3<RK2RZ^#=r)T(2%ReCiL%09%{N3qj
zZfXOd`upGvw6e9c2HJrBLi}HER0aY8ATuDq#M}x95Rq5Vl#-JG&`8Ls0wjPoKnDXW
zfP#~umAMf>*4zka;|Qb$nAkc1tp2?K7}?qwoBvaqBh!ChEFnjL0l?7?Xk`9(8_?AV
zX!nnc0bmDour_ye{QC?rcLbO^7}$XR_5frHFt;(Xax(shz+bzG?Y{`wIoSS<u>R}&
z3#MS}2y!%XFt-B%{$^DW75_I+keLDKpWKe-f879ElfRM1wnk3>l=Ls(UzopMkb$|4
zBLD<+1^s`M%Mb`KHg~kMGI0Bw`!ATCgZaN`I60cznEodN27m+5)WE^m3h3zg7v?Ya
zKi&DyIsyM%^#*o!R&M{=ZTqjN|HZ)^<OsAfVM1VK`<v4U^f$MuxeWsIKZ7D=V`2+n
zW%;+=*valce9l0Je>I5apP8ZkOTxg|*2c;WU<`jWL131%1^rD4p!vU3nd!ez<o^bV
z|62t9Z;|)^P2B&g(f@Xc|6kAZe}xuzva*shu>Ly$|Gr=Ve{UFDfGpsjJI2bu;r|nE
zU~O*Y_J7#$Ujx;F|0enWgChkp_}dI28`HmnurRUw+i316Zte;+Rxk${nE^};tp0ZD
zUv__08)Kk@mAMV@ucH5ICV-KZh2_8aRLsncEN%X2{kMO+fHubemHc0k{zaWxO+`dg
zT!a3<-l_kJQuwPqNX5<WFR}kw$`4!P|F!rBLs;0>72v`6_XIMsedPpj{7uNk%Ifuh
z$o4N7*8g1pFaSB2y8^WTmdwKXufqT5?>~Q6y8i`6%*M#p_@7x(1{v5G{~fRYW%$Q!
z<mBM+SJi)=_`e1J$NFD`4g|UajS!X>Y>jvVEt1nxK-IWe17o7vJzcDj13`90bt?I}
zzLmC}KFOh5-^+f!RRuBCPjG*<xXqu~z3)lW?GJU~SW$QW243V4dXdw1=c2DuwQ+ya
z@B1_B6(Ogbsz-WU&dF{<X>qWq?Qf4MD(Mxz!4OTfeRY7le5Caych2?2qIj@F@it1T
zjluqdRu6_zop*9d6@T>jK;1VyIMCmD4c)y*K%W@{Psw9|>z#N)ngDY9>2OzP^a1_i
z%;~btqZoiz4#{+y&>ZPC1R}ZA>=%D(@PHB;2=(X8ZM49nOqo{n$?OA_C}-iY4HxA2
zk}QZf&`$K!vs{k@^e^w>>)|QC(QY->Ibi8-8bULq!!?=majfk}^Sc)Bxkj+>+BArC
zErfII1Q3(=3HI(^w~|R3ai2N0Mp<S0bgh6_!MPZUr~1O@-<Gfm-Q3DLtbTtrI0Wwk
zauu>Z6pu;NG;DfyX2#OaF;~dMJ`t|b%ic4<2g?IJJ-^xea_S%&1Ay3j4g-t$47!m0
zSR7ze>mn)1iI&N~KmW8f`E)m$>JtkG#A3<Na(K^BoMh@Nj`Fi-OyddDuS8gE?%-yV
z13Da%1r}b&8REkBX;rD=KvsXU&YSXAgS9??auNm<OcSBH-l~v{c@wlKjm{;;gSgJ;
zggP(c*Mxow6E0sKjIu4^M-y%LiJ$8A6b`BGi6*h0^X2rO{^5NEDtA4`97UYitYYPt
zH8`A{{4yi(&a$9`15-3+NA6A*aB40))bFB}cw<J=X5D%&{tbmTKW2aGUF3yGKx2mA
za8Or{&JjT@C7>yn0qG;3-{-w$q&O;pf7kunqJm#hNY`%PyLw5kw@`Jadbb#__4KXJ
zp+3k^1*>ld*{H>o2LaZ1DIfw-5NgwH1xi#<x3Pe|NS&~z^wUeq=_Fh|yw^^26f-ef
zZE$&eYytN>K2s3g4|{(!!ZqG_g?(rBI_Js3NpCI?)?PO5a{^CEZ>iX^svnc3pJREO
zp8nJoP||GU#($c9s$Q8@v!@faG4XfU`r*<33>Dr-dUz6dNI6On_q__^esiWrf@p>4
z@2bY%9Vk`9>+ZsMYBgQ0&)WLMAtt{lDmaoGMD_gh`zKrF6as%-<&?ykIVldQ`3|;F
z0&|vlEFw|ds>X?~O<TMf7k@YU8?w%lOws;2j$ON1Z3Clv&Qa`gfHFOZX6Pz-JEByR
zg1DTDX4nq>Jp$O2nAr@YX)R>)R~4ChC>R!JIbcUGtf(~><!_pL=ndujqGm9{P0)Jc
zF)B3Q9di+=te$_lBY+!(&cr&fxpaKiY(_v4gS5Noe)%=4UiH?`^AV4cq`LoGm=ofD
zJ5Z#frB_JU3qc5WUDxJ;G^tr36qLnVm5*S-Mm{$&m$*O{@iqCi9a#c6GVNOU%&Uak
zPATEigVfpn)s$DeAetTm+joK2x$}$BFFzgVDMig1`(b}bxz(v7gZ^Aw#@P@KF`scR
zFfRW>3)!c|njK%>$?oAdy7p{p!mk(-9Ed&)7aA4mmjrD3hO0XrR;?Z6xqt^l3a>{f
zn(oJRH#5mtHaSaslUnl{P)qdC<SmazdhhJYby;D67Fj8?=F@Dj0pdrz1+<&6@NxS3
zNmN1o{=R=jh>jGMH>2cOrNK{Sa%~yoO63B_H~{=nwoZZVkubERKUle0BlF&slf!pf
zL8Ab04qhSFv1Vh#9^tBdqus|Vjt722GLbMggTqUZ++5gqJC?$qB6uqTnv9U{hN$D+
z$OQy3tV1}@XgIUcZ@|VmBbOw=>Cq-+2O~;9P4ItZ9Q5lO&}hWBeDbVmAoz-uIcP<J
z0wW8&-LJYWc0T%Y+NVx=1dCfjT^N&`JW@?LuQQ8gq<zBnd09Nz{p(xS2f|7_hg*Yc
z$vH0`5kFdtiw$PmcQ@IVyYof&pWfg;TPl78{CW4)42kUAdi7Ecyjh1qAfb;k&arsA
zo}ho(WumL>?KaXWvWFNXq=;8mg6MZ>TZsV=$a>vj#KnNGvnFoFq~hr-Q4d$}T6!1w
zYKBD6TG|*3;<6JLS^ACnNPE(a=B~E#sMoiW!?X6(2HD=tr9D>P1`@W%fz<?TxvZ&N
zxa`5wFnLm|_PMV`Kh`zCkrFD;Vu>~ygtmVGx_4nyRL1o?FOd0ALzU<2*4Qwe`!-DB
z*4zP)S>JBvl{P<}WGXZ_#Wa|>i@h!9)G2HGgnu3=HX%HM2S?yUiy|(9VRh)pKgH6d
zcx;$br=j^|ou$bzGj?Mvq5r4^0#s-}>xLbF+>+Cr??MABfJ-^0hKTbbH0E%N64QUY
zXLQV8MqXzsBq3m)YU>gyazA#0Cvp+V8of5yi23=Kykfl4D7kS4BsU1tBbQ|5$)OZc
zc8uV-2XGT*JTnb%lU6RoqJJJhhp(4nov3q#;?SGA^feqIF?S9<>a_u=y6}nfB7*wf
zN~ET>QzcM2wi=Tzbtkrw#I7({)+B!&Vid}%N|ny^X;P{)nw#Xs&sB#m+XYk}s;bTL
zQ|Pg`J9iu38l8oyOWR6hMHTP_Ff)p_86UV@tE;Z2JQepzb5mPhp!|>5szoO4<Z;`(
zUr5|q2Pqd`!Pj%b?NB~-&55ubM-dBMN@@xj`vP9uyydGekV3|dNbJR$(58R=g62De
zHVHq4m)G+}5Mpd)Y^}g&z*Lu(Cy69)%(ley(*|Tl7eS2hFmO3tl(!k8t;^YZJ%bG=
zGLnf|gk|s`WslWn|L_1fk+ZtS)?SVD<~;rNrvm*wQN3NE%+ZW)-c%N``xhnSU_={M
zIF-pW?PmZCp@l@?GWzQhgQb76vcve`CtoYs=oC35Q0@oeLH`whfqh!N+H{$(v_&S|
zHulu|AMu+{DS24Px0Z)4xBV&sX^)0{72C|GML0+1HiG(T`~(WStrBaUfEh@U5bLma
z>$*yk12Fc{Bw)OMGi3hIg*3RMf6!2s21eh8ds5BGkuvtMlqVcLO$vVsIioXVw#9~m
z(+jEhlg(maTrc4s95Ys7A`>#~NJccaMy98L)Z_*(v|eyx9J@;sfh>Hom0^e;rMmSS
zH<wEHq`o7VOwtNi-o_=tR%Le_q_6=Wzr3&B3SBp;ZyH2CqrgUHoLB-kxuN@3cdv||
zWsQRDsp)T<G+Q+J^-q7pBYK?C-8t~m&mU=`<Th7RGTxgwr*KWv$%dC7p^d+%6yPd9
zJE!p+=u~qwouPKvgsezo>#SJfV*G32z^tg6bwM=t%5P(Fh5Arr=}{gG)aAknkkZfu
zVh`uqsChfww+(svDVB{oH_3h5ddV|1MPIgu%?{_MinP*t$De;1`f@nN3sZCx?pJqV
zD+vob8m!;p3(a_HM10ofIrn&LjJO^C5IYn+2PTo(IV>4%9LJg<VcHo#J@UCO_veHC
zUi(BVk>kzyM5b>>63%46)JUwY>+dk(UM0BAWTo5#cmJu-Key5&?I%@;WAy}ze>7RP
zv%$>otru}%^xA*ebn(<hTz5qYNJA?m8g1^fsv;Br7#py%Z7qGGMuEu>2>7+wijX&}
zP3`~f^SKE2XeB_j%XKL_y0&5GX*`CMeNKZ6hn#2`NKuv4LS;zHY=f)01+_z|+upZT
z@&V?p3NBjp&7EzWZCCQ0>E~QG($^`rH;B*hFi#m7oo|0BOje~4eZwXeN+?XpcyezI
znT*Qvd9uP04PTNEqJOQ$`|pG#2kPcjX4nWtGVwrj3hbDJ1LcVEU8O{D{3Oz^^pL)M
zryJf<qfS^B!7)YLO#NWwh*@KOqoYe+iy{9*ZW6ncv;$u=02M-USHT&oZVWD%r}pcY
zZ=K}3)kS~9O0<kXMkV12@C{oJt$~}GgnU3b$)5214r)zo?LC7xWZn}KIGJgiVVpyB
z^+@9IsZ^XlloFD~b(j?FWEUuV4AqM!M|0h*vrD4)qbphIzTQKAlAfe4;jVaiEW+2j
zG<9xieF-Nw%3~wXk66Nip*n};yJ_c|0*U^Y`=)<qN-^DBdkS`7gT5LhtR%Uv6>;PW
z&{Myu`%**L11kix-+bl;myVHb9~C5cH~O21{o_-^eX<uU?K_x$^mPj%jeRiqv>>F6
zAPe-`NPNRwwoBw2zCfq9WE|;GB=we>(rj<($j<0^nwCfgN60SyN`W-1yRBUSZ)jC8
zwDo_u*^!DF+o1_H<^&*lzdd8}LQ+Nf7ln<RoM8CsX@O5~UaK75UP#%(jRhZ^-g(;7
zE`rODl0B{5Cv!C4C9Wicit75$*97LEHOI3o^;Oo1fWuvNIb1Ng4%=nOyP*A(&>>ps
zzUZmc7ol0-6WpEguV0{CvZd%0TLB%cd8U5{RLID!)d~|UhrsmvLaziBWIHn4@a;Kq
zfj}c<#VS8&X-n@(4BF*Z1XIVM-BSFFL?PRblgwrC>y;W4XkXts=2)pTA+4p-_mpx(
z2Y?{)sykb4a(h}VnrSLYym>*};pmnO!*_jj&7Rzk`eLOxd+8V{V%kB-c)D>70b_q?
z|H$I6I2iZ$zFkr)RAjjx?w2$$ebiOzSRNO*V*3_!OZ2FDCUmU+5oJD>7G+n++G{uS
ziI?iuUb!bm(*9zBqF5S`b0TWc%0<(Tn2nx?FJvF+(V2cBE8B8z!HArM0hM%zA*2Yw
zh3}(@Q(gK5bi>hA<f%8}@k#IDFUfzI&8<k-LiAa&-Kshr_W_h$DQN^~6Cz><$5M4p
zCB(gw=h@YBcomeDl1vbz63b^_>O}>u9T3ElEjNSe@d$j4LzsbwB|ID0pT4L2s_WsK
zJrNcSL6n6>^c@Q02jax*0p;<UT~O5U2LkT}(h3EIhX9TG<fgua+M)wrtWJNzZ(=Zg
z>jjMVjt9z+f=}#TjnqNq(RRi6Kh=e$j8Fx_x;1YJ_c)u2t;&70DaYPx--O-*;zW>W
z4a6n96o`wICY8?8UhfR2>A%yGNL7MpB=ydGH?>Hz@nGt}c~(RvyiJKij+ixG>X_fq
zy3t3S58<<Dy(~<NIOV9&vYdY~4V<H&(4$7|UcKVHIdb<3Z{?h1qn1u6?S~s)OBMCa
zcBi?ok6?U`Du^7IG|M3+^O#*BTL54pJE?}HMh2By-@9ed`;5c`b}Xk+Q((GNz|6Be
zKR#}OM>pYz)jlk5a+zn*Yxq()Vw6sUbyx0oZJ%gO`^^D+j~e2mj=F!Ic>2@f!=hk&
z>sbMu2#lpcE5h8g6-i)q04<Tj{KWQe6h_!=js22{8-1aX+4vYPh}<OEel~gLts1Q0
zv(phgYBG0FZC(C-kQo$5fs$GqVAnG*oCuftyy5%_Eyz{~Lm;qFXU#@v-Ol>8wXyoD
z-v~S}UMVNHf_^yG+Npn!LScfHO?{<<!czB6WE(Iw`*+ePN3#9LL^9lo>fg%p8P+E#
zQ5|N`22b%e3#7_B3HSh6YIjZZqOO^AhMXcPzs7X-T45lJp_lDWw}hH&G+Bq6*Olyw
zs0$jTrv%tsJyqbh?TO=n8f)KyJ!I&R1IDze-@V>xhfKa|6xV-32WV8hvXDQAq&R(L
zhQ6=DIz&{H8~aMSIuI*;Ap>6Zr7)fqJ;OHQ0^BVuE1Q=_k5OqM?ecB5ezD@m)mkgc
z6S2FL7ORto^CM1qCSj9U9P~6Mp>avd1pepZl<W!WnyVic?bjnRULw~SKzrutIEl(+
zF)EXYEThnzbG?6X(c-jj<7+$uQ{kAWxU=+WW26VNlGVasP7i=~2mQg`u*^P8dcPbI
zYg+IPH)Y6(YexRbnir?vl>BAu1zJ0uSr$oPuOer5E#A@zS~o9MFw0oOfqb+8k@%xO
z<vu&P$@;iPj802F4k-cqHsO<!$6iG?&lJPsAt~1;k~M!|)ITL=dT_kZ)oUCIgIqTt
zW{@P4w~dh5y4<tHjNt$UH^JN6RQF3Pp|`)ogzD%z%YAF@!fg#fay}c{`W}$uWGmV~
z+1A!N)JGL7#X2q*z233wr&Vy;^Cu9C_QB`=`u%kmO}cgx^XeyyiWkCKmnxO)t*>2x
zz^*NSrqh49QPSvh4$v|vnfYa5Cp6vN#H-qUeanZ$rS)LSvZf5-B&^Yl|J70CM0K3^
z<GBG2X6PeoJb|xDpnf;cXaeta-0to`Q7$`U^?Ox6cEzeK)#q!BM!opGv8Rj|S`IDe
zi6&Wc&<6AMbLpvO5lz$8@pxL2H|nA%J<Yq@Km>n8eF6hP10@#kpNLDJWY+Ah9L}@h
zNRtp=sWl}kj`^lnn@3}Kcia^R9qwnOn|PIZ0_Q<iM=CC-I9sFq<!f=w)&*XSvr=8&
z?z}4@O9M1hdk^e^k&BaIvgU=W+=|JiYbO2N)MK|X>z|=G@na(6+en14q>=d%1EH^i
z+G~H8V&u0gLq@cuX3>6{@dHx8D+G-6k!d3n9c%~YAAzvZ6_5tZdA4ypzrr+Ta@<*N
zC#9u~>mlEIY{%gd2N)GmO{s{zJ}c}S_77+T)p9;gYQR+_GoP8ZZZk70q?S117Bz`w
zTx)Sh8y#;$Say1R!3}IZP%T(yEo*}g6Lo*ygCWJPtutDy9}~x{Iep-Bd}@2|w3(87
zy}LgK?uj#r_}+-TWaX<=w-tM{E+Zt4VsAvYwBEsT*l&B)YlM-0*>sO1!dDhp!!2Q<
z>hS6%RZ6Z*-Vlc6awCr|ah0|ILc!D^#D~}78C0-89ip5TQIJ9^K6PGRF5<r>g=l{-
z3x>3+iw8D+UAnjZ!?oKm0^WJ3JFx2;f7$bTf^sR}a`-1}NO@cf&=mBC^)WGlQ5SZ~
zeOy>Br@yzWYmc4f3g{6Ymp;X?byc9&boFufRItzYuqP2U4Wc`I*J>Hw09`vGGpcNG
zl{B2A5t40pC?FPOP||`edmj}J@3((|Dmh3c>%{Itt34}Wh2jzK{pc0oub*jG_1T);
zaO|Oqx&xt>$3ml&$r1eU%hlnZVHfLT=Yy(;$nvs*&J9<YAU%aY3JG>+f(D0t{%JCh
zQ=|EoOp{N0;Cma!0>Zhp=Tggl`z?G=u|mJ|l6yZENb%aU#k)3SK2vkwtA&3V+tT6+
zd9dp%x)Vi;Gi<>xa5!fmQc5#r>v9`uRX}BzkqofYa`G*<sODcfRB5JBokkW?l>KDA
z*XE`f{rV2j<jER)LIyc{%%Uq)xq>N3WIH2eleafVBXi-ke5LqQ`2v^2PImF=k%fvg
zn<4A0SA9;Ze05XS*^x&z<GOz@;VYRWN)(mrN>o2PGCO5f`a|}UIVBxJ8#H{P^b{e<
zRAO8_ZN-=A-D$DlytdaiofbhfQ%mXfIUY4Z-4R~~2oxvmm?_sk1zdPcv^K9WOU*|!
zoR8f$Q!wSGhWVUz*<P9cAg_NIa^6OU7LP=lzybX4(<jiGrL2={hQNP>f5-*Q#v?)E
zM%e|ekaa9`zCcdUknA==tojbgO4MSeA1iN`m^s$oUfG{$b{~vSjtVS)Yl=pjKCc4z
zA7=NNl7B!gUpT%*3icc10JS;_HkSJcU91RMsuk0p+!Y|cGar$8fi1PZAu}@^DE4)R
zSnd+_N$8I=tBkD%=#YPFVd)m4uV4<=27kSU6wLfYOz*x-HUXg{bi{ri&RQ-#N$dV-
zSIqoXd$TR|HRC)J&Rj~~@CzaZ?h9qXb9rJ%5i-`}(edeUWxv0s%`f%tzc0oSLmAsj
z94n-F7G6}#CFJcw@Lw+8lMKXKq6Gm}6=?~J)9FaK<(Ae<wpM?otbAon6Wq`;EpELH
zA)BhgncuC_5uT>Xk+ztz_w+H9_sZ@(q}RL|KUQPVI$*qc2H8jb4nFr%dj-lXBBMMd
z^;(l}Y#n{S@aja1ZpBI#v1_64^~W#^ug612e-$(s^M`XgIi4v>I@``jWYZ|r;~%cI
zl{@+bDX+-E_;r64NBdgGCp)R&=Jx9*t6QXvFB=`kitj0-cyrNoz;-Tb_|+dmq%!`7
zL<&NbZXEMh#v6ASlc`qkbw*LK+Q3YTQjt{qa<_59XZ<_2+Wrlp+j<N8`y&P4Po&3-
zBqw!hw^)4}jE>SG7PRHeyO3H+wxf7ngIJG`DweZL<Y0dc-GCo~aXuDVTk(wwk<V3m
zEwM|4AG%VASY%o^%gg*W8Z1X?0zx#nH;?5P$qzCT@bnT@BTOrikwyk^J9Z~Gd;;9C
z;7%AH<}eC|f!Fo^qc-8RqPZ`(p3ErK#mN{umcjinrys8kr87E-+I;ERglF8IiP1>5
zX3CX#6J3A38qL4PL;zAp36Y*T`}Rd}RO#Jaz8>eWh}J^+)EHy<1;$xyvXZG4&A|qv
zm1CJd^9Vw4A#5~CcJ8C&zT@=5BPexNFQN_cOj;aeWI8p2ACI%PodB-_^Szpj7jL)w
zEr^MRS{#cF9%QrXcfLL0e`asNU?*sup7DMCs;GacP$@4e(M74fAfqUYJuGn_DjLr4
z8Mrkhe&=UZs!*Bg$p)hzK#QW}P&*)l(V`sRZH#ffu(m}%SRXWo7HLF!dOd)EiIIa+
z)p*WA>vC{VoHCi>;Y}k}edLtNd^gnbN@QdpGCp|(zDqX3bN&keLp`CMR;)WDT>j<u
zhq!+pI19-S!Av!h!CILP_6iSmCg#{DO;|jkKc4GH-9=BXjKO1y(3Ed_osDhAHQ>p#
zTgPX{HQ%QkJ&*}hOi~#Y$;>aqhp|vX{3)egIlxJ)W>dg5E%7c5Bu=UJb@T`zzYWC=
zPsY<(dl;IenZc`#@@W$1^)at?-EIfW9wUFxeB$$$JY8L2C}l|?2`(C}?*0rRcu-#s
zN05mz+PHQ?5$uL{l5P7#Vae-YDh-1E{j+ww!7asMRcBv%c}8D9T1KPqR#!;$m!`Qe
z&D}KcH+mU3k)nOLkXLEaZB$9EGiLx-Yb0rVJFGK?%>*{h`ITEAhIgI}Wt7^o+<t$<
z=%<D}%F6l~#zuha_1a*>v?n=VS{O*s?E$51PWY`4Wmz$<?h{Fp9xtI+<<I;r51|_2
zQQ!4M`V?&i|NZQ_znHE5)nS$K6}$aHJsUQdr0NY2u!Z=tzlmX)CBF<a=?A9vSuLM_
z+Yesf`|%u>9Zw%96z;>t3`R*W-=TkyWLqu1Uq8KIxjqzC$Zb}i04mC|e_6`fJ4dz?
z+P85<+nj6*#~Q%Xp;5q(iQEx(HK~cxzTD!e&k?RD8Ecr<TfQ4-(3l9lei<XitI9>0
zmcd!N=V$2913l;QR7d?%MXT|Q^Jggb%e0ZC`tj|&QpQR#Wttb!4^EwZ4EukP%9j6n
zN+g{?jTv93rskN$-UAp8IP?4g;Hwx%nY~mBUJhx<{)J~wFsh^qBA<#*%h}4-(PnSr
zEcL$*s(puNk6#;)E%701L$qsNA*<fm#z&331Cym*1$;cy&(%p(k#XEo-wE`0#QCHK
zB8_hpl<O6~WghAy7|jK}4TpaeSv*92vf06R2<#1Ak15GXRiRS28cJO<@csIDjJP=p
zepy;%u=!QS`W`8g9_4GtDOE3PTx@KeV{9%=6rgL{wr!iYwr#t;b>G^yZQHhOySKKr
z-|l8N*<}ArCOMh;H<NQRXP)Pnah6KOP1P{~nmeF_-2?=-(qAa0Wq(ITal8*Xec&Tg
zXy}S_*X`XoH?x2W0XJikE$f~y#?m#=-`MD&m|FJ9Ja*$SZIl?`GbRKQV#emsv}?M9
z$ZU;qqF_zhIA+*HlpynX)^j%U<sLez86ru^rD$o8PS4ihXqzUM5wTW5?0*UQu=tZN
zqx#v6I`Oo60&1^W^r7j&C`ujK_*@5K;1wwpYnJZ^V|CxdEok0W^HFW?6p^oJR7&=Q
zO<@ag0&n>b8qfwfaR;Z>iiG~}Rg+`tf_NDIUcncYlK_YfvvT9qj{Kd_FY5`ly(&?z
zD#Du%wBZ9UJObSL>UxREX)VBm2>=}HikQdjC03)_7y)DfxB^~Q@BkJ4`LEfr#M8c)
zF=VJ{#U|s{RY3J$FEN!Q7D}%7PP0jR#=w@~TdhLQjg<&Mu)@5;L$Nq?CUGXGz5GLA
zW%l@55yu2%M(%>`KlB}MwjVB+@7SA5_sg>pot$v&v5RaT*9`dz^l8r7-EyCn$MUg7
zjHvtuIj%&K$h`M}&FN!gV9RU*MxrnLjx<*DE19pzXngv&t-eNHy%Gurzs1ZZ(tFH(
zU~{_)hNn2dcZ(n?v!GiEE4LQ7^tWx{Q8kOApdyb4J<+Dg2-cFx=s0G4s3xN3La>9h
zzHNeX%<8c~=;Be3n(ecBIpbG0vG-hyUg47+YjD0+yFb~~@ymWqh5U6{!f~oau+PSi
zZXV=lovyD4U7HSXA>ZJS9B&_v<Ic2J$lUE%tC1)`nZ{|Nhz)wq`1;b*)Bd}mTbw+M
zY6ZX>?8UpuzDb+CjXSeicnKk;Z(um*P%DOppDVYYriW^0(F_HH8ua)ztVQYdNlz+c
zXGUmDe|A=|dcHDPG=7eBPzJt|iNg~=$D*z@UG0s)u5_@(pFG$IjX~)WMxr(WnJH(*
zy<P?Y-teZsICyGXsjZI=simS;2G2{PGIM4B*qnYWM%NNXD}Or{Yj2s?vnSYBC93`G
z?+44vNj|-bd4to66~G7k&i_0#+`;cE(?O`%1t)BtXr4+TcSOVsmday}6|tcYf$M%o
z=?Q9+5Ml$t6lwpPMK-u`zf+3OXdY&ve#`_gK}B~$@*r-yLtc*oCrz)=11BO9grSXr
znxKs=knEI1L%gqVzD7-PHbkMwx7C*5%E<KA6=L<Mo~(z_h;jExYJ9c{e!ph6dNyC_
z%k`Q6SCH~B4W-xHj-)hU-^wq3tKi%$FR5i!2PYD#eF(mC+<Yx33)^!&q*qHsbM6FC
zc+1_-P5w#VtzF(?qD$1`ZFDL0R{0F)58vORNy71TBRDAB{5_nOabQx((v47tYd@dj
zFWNbznwP6hw)iWxi|QHQL8y-8yZ1h;+kxBQYYlH9vz9L4|9Tc~K~>)qII;3(p4V(#
zKh-^_tc%Gg0*}lHQgBnRs0{_HvkwL!<3Zw>+`euUbjFd_ZmJerKud71V_}e2Qa*-|
zfgMFBo1{F-94R_)^Za3^m$y;U+*ZiH14ZTy^phe(Lv4vXs`Zu(e1r8K78?yXreO%n
z8l(8DK)lXv53+}*y@R8X6!eU=x`Jn5keOf6l5uK}kdat8unk1g(LEKMLaqmJ-#r**
z8tY!a2MX;wb^TPrlv+r7RmeO9sY)N)6Zu?aLO{i6Uf`8^p0|;(BaM7;B%ZvT@avzC
z0m%%%C+sYSLi1Vtbl|)fzjWdpO^ti4TblClG@S1tYp><{5AUglOkIty*VCH2-10`i
zWY=UsRE<{R&VwnEJKy6>^WhHoo*%5VN8C53lCFx7_<PV+>9wZ%bd*$z<$Fhbd{bJK
z?Ln-bMf2XYLcs2KE~9ZvK15}3Akxu`gVUST?<8Irs#a);uvH|lmTEXAYb~e#s$BTS
z9&$_b4EYuOugv~6+}09lrSB}+6ERN*IZ$}str_!$>a|KnZL|<NXowo{py~FoB9R~Q
z71!4}v1Wd-Re5t{QHQ{wIpgnx@T9y+;uCnh^>1%_u00z--IHZ^Gg|#StD1b1(h_8p
z@!#pI5mS1>UW~T`+WFLsMI4qHIEHGK1VG<q6x6ElbV(u3?^HTaXiC2t3@S*vU))H<
z^{Vo3pVULU;ufpeo(cd))OP^{K?Z)h!#-gg7eW=^IPTKWXJL=eTa1I>P>{&pW&H7m
z>*CW)h28!R#+9)P<ud}xb^Zk#Vm!+4OQV4gb4Pe4QSB%b?sBSAuj=NkLnRUxV-8<K
z(@BuiT3+g_t?lrOTqoSwa^S|wb@zp(e|s*8)Z12hR{~(FKIZ}EZ@62?7T0*jAk*)~
zUkYCt2h*EW1dDT)0)(dJcyk#}0vCy#TED@2eUkAUn0DSvRi5a%MZ5mfDL(^q9`?lA
zkz;me-5IARWqfA&dG3i+yu@1F0oKEX77O|X%Ws3Ye`KH$y+=w3P4$8f$xiVDoIdF-
z{0g5;DP*SexxE0lC_crVDp6H58}VxIft~w)OF}MT>OXW)Vu3|mEH6}ZCNYtU;gJss
z2m&>^W&DZI<Bx&qUJ~-M%L($c!>#)<Htp1v?`PJHl5TtZmc0_J1AFg9giE+VzAqNX
z^_4CFx&~@>b<hn@&j%89d60pO)WE0rCuK@0WJz{8{RRL(JK9|c7MQ56K8fldOnvr0
zRzuJZ><grnOJ34@*KZtFdiF)fz1R&TfXs^1dAOMWsxDc{yj{hbT~7hh!7W(EMrXEi
zSBSAM8WozA5;IzY%zJwplw4IuI$zm*ZK1z*!i0a|(KYtipHxQg&D>vw*E*C&zLh0v
zNvx4uIgS8ACkn`F9JxA__JODk+OWKyYRS>MC;e^_B*At**k0v(T7Ar@+9h7JoS!J3
zgxNifcex^Q|Fuhln<kAX^YQUVP&$$lN^ZYoGaZq|iK+G##?~KFvm)p*l&J{oS*n*I
zZG_gDYKr`BXvQ-V2rFQ_IzbB%z%cQ6#v?fM6sQ2``&~G=_3eM1AxixSn;*PUn$A22
z?qZ~tl5dq`K5dJagfaXMRo(qr{ybSobx)7ym*_*Bn8YP(eItTQ>`}>xohRNri?8dX
z_37qk#Euk4`uAbDNAu=yNML;zY}rZIwI}_Vt~bxyBX<GK!sDAtdzWnR&8Q<1d3Ama
zs@DY2yf0ESIh^Ldi20VD8q^Y4n?1w?62#J4D`L*U@yuA*QFt&z8ZO4zWQYS^3a_IL
ziuHts0=IZ*VZg1Xsqq_~rM=gcEhu$2BFnn0O>0n=h6!}g#|>M6DplSvp+p!cwiZr6
zSDlV$e*Z94@vJx^@exZ66-tx+TB^Wz4O9WlRXWr@6E9f;W;&y`ZIP7dkKnj?4+d`Z
z66?xZF7@5_{tiKJVO+zK=$78pSq~*pZJ&$!wb#?WqlHQDR(<M^bm|H{qQxqcR=1}K
zCk;E&xUv@^@#^uU!>(Z~lKM1kg3FYj>i#l(yy7Et=Ai-Rm$<7XR^17%X<M&GSt$U}
za0+3?JC|?1Vk2pfT0jXqs6z=8X0Gnj^U&MT=FoSp7uTea_+S{>nF(S5r`x{S1^&mW
zV@=FCnA<{7aFW`VeHp%W2cChUQsh}7muGN9W2ZzsEl!WC7T@s|u_4(FXMRC-81#!&
z*@I$51^9oa4&Yxzd!_<mF{EJ0*4co2kRq?gL8Wba%pzRLSo-5*t5~sEEsJNS0|J^g
zw6Hc$gvr%e6B<uFze5vwP2`3L4^o-Wljl=k`(;zv$#6>4MPZj0`K4(GWuqu}1K}-g
ztij9BF!BKyls3YKyV`pJ9;swm3vkkGmVU`;pPrUm^CD~N8!Y~k2!hzg06aj?O5H|U
ze&d^$M9|?g>AS~s;+1M{2_ji9{y^l9j?r0ls^GRup&i$F6<LE`RAA{Sp>hYV{o64M
z`ySD&Pq@APE#G#qF-=9lNI?+R3itUIbYApv8N){y`#%bEju6bI%*(ZGZ&|@PTEbNt
zd`>f?^g{l0gOCqpERu)-aAJU>tWqHsA>Nv#RtnETKge0T?i4V@8VjofTBPfGUmoe5
z-WhY4XmYv$_cGej*~IJ)M6Dt6%CRC_e@&U}+`fBe(XuN`{)>J9{w>3Vy{bs4R%fdJ
zR(c}5=2)D#<VNEUOF0)R65%(b>Vjh5P(k$}!Z0>C{FzrP<eqt@PXd5Lk9r<Mi|2AI
zcwWI+-oD237G_AqD3;)yqef`v0xW#A=EL{jUi%}hnt_?XJO+N7QU6yekjhDvSA_;R
zT~G(=%M_k1aOA>#!}$m|B>T*npPP2<-t`tvY_JENcq1AAjx`v9j$y4w0)`&67(CB`
z8dsEhvd1wKJS%HQEk0mY`qA#3^os$~)Q%D$grwyVm83zg_!V7BpJ+_<#e;(DPfh5`
zfd^z|`wE1rN?fGGiy_ig7t4vh+ulmR&SF+VJg{y0)UiTHTr@Ds7lex)EO1(~F0}-}
zqp>|2ej6cnDi2te`^!Go-oC5SO&L^C-t%^+?5NmkDeMxC5DbtF2uI?jfJ3qpNcbEk
z8#YZ%`Eps0bKvXEPdmAkU%X0#3Y}=C%Y1`WXd(focorUG0_BZ8vd{#0@X(LsS`Kli
z{ZwZl&Z?2&r4{{<P2|2;gDB&!Z$o;{U0q`?L!QxN+#ChuW>7TDn;^cv1hWrBWq2;y
zjwEV^;JW8w%mRY$_i<EDAG1rnN2#*t^GjH0S2s+H|HfI_8Ti3eGCtc!PYaD|_Z;Jy
zQomK>ja?A+IqVG5<pb!yRNBJ$c*OVDC4=sscymlW;3K!`HQ46yk4}gQ=D?RA=X&CU
z_8wXN4GtP<)cz)UP(OyQ+~Nzcse^%)sXFYLo_!2>qyr)|5T*G%tn3&46zD7(vEY<D
zLFNCzc^l{0AWuq5={f@fq`+}a*Vuj+g%lTrQ>j;&hCT|`PXCsTIJs%_+kKk6cv)%r
zcR!yWg+D-mww2Kq=lm<!-Nh}h@8?L}+K0yuFo_S6SzUe?L+6k~&ZwNDRW-53CPvU>
zT5(ttr31*pJO8*oe;vNV^Q}ubdJEUVk~A-gP{r^kg&6Juhmhmf*T|c4ZWxgJ#m<HR
z4_#ybK3y<r(2D&rP&(VM)dcDO7cZq{8Tzd$a9-frRl&#dZp18l*{ZLca)aQfMC~&f
zLKX@6A7g&8RjOKB!GYe_z9{y|ZgzJBp*;M-%Mnl&+-wl{SP_YTcG(2+_XTu|COi~b
z#C8V~7&~w&f0+siB}PH%gBW|FlFmJ=4?Rcx&5VSQ(mbccuiUrBzdKlj()&Auw9v@a
z^5|wvw*!)KA$%#;_cF_r0qv$?tIPcmDFWgH<oGJ}7g#I(TUz;HELM{*V8(w^!`e_S
zyBbjCK8OeR9HVR$4|()h70tf{rjBA;TXQkabWaQ|&<9RyHZc?^+-YOGpW?Xz(_s3-
z28%^pJh>c%rK?*MHVq0#bs>omcA!PGh85Ng@8B<|FD?7PD3CeM{pwCMm?ro`E^QYu
zLUn@fIF-gOL0G%R{P{i684T%+DTtVZTmYDAP%*tex!SR_x`dUvVyw`}AO6$`g=1r5
zSHl<Vv$hC!P@FHj;IfWid7oV8!1TM-bq}Q)-5bfg#ThCeNf>=x92C2L`Tpr4qxv{+
zTWvaIW~d*-(N|(Lan&~g(&1zo%YS~uiM>oe<Sha&1j-~v05O4<%kP+F#H9uZOaYo2
zvTGZ^ON>Y<=cQx0<yrSN87`)9xZU<HWB3v6S&XYf)1K)rY1#3)0jE=Z&f_oBEp>{>
zu_g;F{I3a;Hk2I^*;BAPYqcr`nLJw16|{Y1txBpN{RSDJ3KXP}?p78VLcnQW8h9cY
zQg=c2ZZOM373hqP*24S`28nYaY5;n6PtMGQgqmEIb_e$0J2rnkI*7wCbTCvsw}o2k
zss%@b_D5iN5U9!ahTFx*_F#Fzmg-_$%;lIxnk7MXMN_pE;zY{aZezHO(@uv}M-o<d
zD%=iFTihT3JtJZvB3FVI{!?s^0GuB6Q0b@6%jF2&`GLWEqZfvc>cXwl6kzH(WWscT
zihE%}_bjluuYvzOKHuaW;D}+uX3#x-)Ujd;E5JS9``nDeLlc8k5F=J<?<)CDgVSx4
z4lF#jZ48fAMpEC<_gRH0%Eh`<JA?C*$xp)n-#-t^!3f$Zp53sMMQ^~tF5L!n#{1k{
z%pw93;By$&v7=a|mx)+61K{{#Ltv}{H~qUH5-W;I;YoE7=5J(M3ow>9bi2g^%9jo+
z*QC!Hrfes2;c6jcCW$sjWS+$PD-|cMyn|jiw!RI=0YO(ay%#u*<wi@e?;$LZfnlu(
zF)Q~divpbl@%i~h|JRR*v)Y;PadY+Wm0n8;<j9C!WxS2qeByvRHh>aRU01MuAWbj{
zGfX(bLUJ5ekA;S<+evKeYO|)8&j&G=`jd3R?jQ2xEdhbFv+yp6avP9jC*tz*XSSW>
z3*E13-_2u$@g4ud8x(dEPYc|lIp7!DAwI#Tj*e{|EMGkB^>thz_<Pqr?ZiPx$qN$4
zM1+deE31QdQr&1N3Seb>NMQM>P6X$z)WH4TZ7h$vVhsFwN^BJ;$}{EdIxk#b4x&~d
zpUo72^`9q?W=j#_^y$K{n+;Ef)Q*y|nyD;dkV66G-~IiHp6plD{c){JlFQ}(`da^%
zWYU1A=;RIBhXs$EErSUp!gZ?oHc1i!U8)Hx`O_a@9WS?XB7m0t)t^0W$$*AYqya3=
z({2Osz_SLoW70caa;~K*t-lY2D80+e_!3aY#CZ(N6fQ~z=M$)Aq5Un#$Vj3l13D?{
zyDlU0qmQX1i$rwVY-60=5q|x2vZQ%R&y-}YN}8y;Fj*f<h&OKp6NyeFl>~-_6dntG
zn$&Hamz4s_8vrGErG=|o9^^JV9oy43ThC@u?Q-c6%Zy01t=Whn*S{ejwlCQ=U61s}
z>H-OriU=c%zGR`pnYDKep5$G8ft2qi9~a@M*k4j4NinMp<2m(MORTlTBG|Rlu^K(@
z*8Rv_oNrJZWsbd`_X8{{+C9ejlIRF5DuwVCD4;$-Xn@{qT`8$Ho`v@GE^01DUvV?4
zXuOVE253vQUi5lNcHf(Gd72ATC*V!Y#)sXF=l+Zw;rK45NC?aSz#glUtkf!+H#qK`
z(>kg?b5LP#Y{gk!={>07BXf1C+W+ME$;VN=k)B1X?Nhi?=~f-6OaeAf%Q%;!o~qB`
zwgf(kOaUk%F<KIDnIBb!vb<_c5nB$JS8tCpLBgO%{X3%=H1z1VcUmFT^RM<VnL!5L
zm<IQxojgfZW~o;}m1rN3l}K2Ub#*_tdzP37G0G&PSppi}(N>T647#ivNGkgh4%(vB
zJd*Th+lt0~#&P~E=+)?`8s3gV&7N`j9TLRaOn|9dGfyHxiSmWlQA{6n1@Lf-XKgf^
zpks(6COgL@#BIOm);!_vzk%wwoUMqiCtVbs35B+54mnj2#f1~|NvP>m#)PY^&l|ws
zc1j5<S;{}4%r1JW<ejBucw*D+0O=4Z<)5peY0#7*+_W9ih6&5eL7%mXY%#K9g{&}&
z8i0-XnN>n24HjvDCp8ogzTl!=LOiFh+Uv|5yb{hq4)`1f>xsl8=xfok(N&%a!n1rY
zE{2sV6+{_Q9usek{`k%nJ!u_t=N@CrSLCwK3)MFgKvuROX#o&xw{ONt?eTcH1r?Ca
z$C`<%aIPjkVW0i93dw1J-oi3*FFB*653n`wLBu(N({tsADKYNgx{0~scwoTUcbg$I
z!`485yMS>^DeoW=rIVh9{KC5g@m8FFSmycpws6<GE}f1_ue%ghnz;p^=I$9-0q?Av
z7kY{~I)_`DsuSIQec5UerC|LWA|{tCJ)bQS@(#4-m5n@|xnyJbdPuyqDpFYp2Bf$Q
z-x15o^NLnu2Uznpi8?_k!SWBpWIi&mDYAue2Fo90)9&hzCEMANFP(!vs=iCw{h;ce
zG8KY|DKJ`RGNoHqFgfvZPvb{*ajq_$mUJ<hy$u0b#I<zZ2(3a8*242Rk&8<@)M%P8
zdG&^XrI$TqcX7yA-D%auylx}60u&v~bAcUH`m#!yxoA{O6f($0a@ae<|A=gK*9>Vi
z(llBhH@TwkR7u-G`{N&L-S$Mclz#aaYC|@h2Q=-}OfteIKDN<uH4nI9=DA2tYc1DF
z{}D@$J+J7Jb)H9u3Bhj=O)Bn2OC&!Pg|IOoz_q-!2bcDH21qlg61}SV0E`_HIJrN;
z<R^PPMHf%_of3ek-uQU&>N7Tm_zB@zG}DK@EbeC+V}!w2=9eJE6DKpwb}@m=LRbXa
z+kHw)%P(sUDC#Du;=DTp)RL(d*|sWj)t_cTpN^XZowfv89sxP=EnP!s6V=aYf`;J^
zUGsKdSYPup^RlmVk|Yf80KPS{Km1II&ydfY{;Eg_eqcQSE#2Sj+}~@d*-8Fiy_7-K
zKF%R{-eWUjn7;%;xsn5Z=(SN?!Nk+|Y{RDKUHf*u_y?%(yBc4vkak$ij58cv(pU29
zT<R+eV5GZG+m(?k&9nc+lk;;g&B5eN#F7XphE|_iZH9d_VE+{w0<0}8XIw)&So^cT
zdn--T6RxM3$V3XVUi7lEdi^cW`TA%<a4AL+!6HIRAX^DefhEGb!=cM4k6X8x3*$fs
z2PAb}p5ik;oba@ttG@dSY15<P1UVBjgog8$QSSw~?<mb?Js4HF&Ehks?-9l!xG^D3
zQBwS9Bb4LN8HN`#0F|UbqTdiALgbLW%mgeT-8~xLUE;`bz(_~6v(tlKI=OWd-2R(<
z7q6ZH?M+otqMHqW_n5xpP$2T}!!sn{>Z3?@oE-E=^1!l>mIE&*Fuq0K8wHzOT0gab
zL?K}`=)1&g%(#a8>j(pywwoPu;<*RlsT+k$qm0bFcVJNd0-PJsihxAtEX)eDa3R*E
zH{fcZ)a$6@rx%^a;62No1t)$YTptp5sWppHL>Yfyz4Z><Ugw!pHD<)wyi_g;toT@G
zAXG%%%2Q6!2sLOLU>ZbskmNL%h}iI-U91E?le28zy*aGhdUTjf*a%F2@}7wO#RFru
zird@cN6imQ0ZEoPk+z;F5=qvg*k0=-idmP_(;i!fFY!lGyEIxbudzDd6V!DA4{*q_
z0cKgNe^X#=mTCwWr6t3AGH2o9_uvY38O7O`;XqtOz>`++?f6`9`D+5e3k8^q92PGb
z<Cw0nOE?qOe~e?XTFt`-+b$%P5{dl<`G81WD6!K&0qqOfM{njC9~Py_zo2+a{%*um
z`~TT&jNfV5#iOV!K!;iQlmOpq%vQ(OrXV)nn3}%{MsM1Sx+WJuzw+2RwO`$Nv~2ZL
zoOd>_L-{iUlW6>3q8E~X$U8hNT1g;554@Bnd6a?I1pu9)iIDGXV4hX~aCwr(E*y;@
z^Y%*K0fA)6Ul)F9GdccM@At>W^~aP9gCb<ir^Mkd^Hx10M&yex$w45qPwe|B4JC09
zS#-l&Znx5#3;Q`xQjnV}IQN{@1<Ohe?^PS~xt1Xj3OHr9SPn1O?mw@=ATm{paEqe+
zi?Qj{tyNRGnS^`KwpXq4I`>iTY6#*tcoJ7RfFbs>^{DMIoTXRb0*_4-*Nj{?KjR-M
zz<9b>=CzGVsbO8vmbBCcN><%uMg1AI{MFntoK^oAtRP26Xjxv&M{TULEHSfvRwB6p
zWN1{y0Mb&(e>v67{h-8MsSSm|-|nUM#Zk$%q;eO&x9UT(^XkxmSAy_Tm+xRkV8beM
zfP7s)3Zb9_r0|Z4{h{V0CO91F%PNL9p$sc=L3CG;PA4c0HALR<R0)f!Qa!0u!S@R+
zrfR5aq*s?wk<%0Z1D==8gN<LWb$+i%nR~GC<hrj5bqcDwL*?rkbkfdesh|gO4f7bm
zmNCCeP0!}!tl}<T6awETHdu^_#$WgcK<mtdCCBz3)&KC8m<Ee>CJcKI#{VdMuVJF;
z%`Zdi#doZRqN~R(RqG=x;Q{_N20ZWZZj>A_6O=@Mu+e;0h*+oI&jL5?u3T^UobX_v
zxx{@6!-%NB)JMRLv<>;|AJ~JO$i#VCYi!8Sxak9zqzT)EJpHPFWeC=L57KVY0J3xt
zl(}qX{K9?Qe9ad8)2;NJAV-`Dg%@y65r`-cB!{3_{Y!%yD7~Y{!pd#AnyoAVMwsP~
zkt<WvGK@LBB48Fv&Jbj|z4A73{j|2-MW_T<Ci)~V1Je^(Z&eq8M^jn?eSYmkAJGJp
z<;QX9Eh`tvdIOjNj=4HM1>+D401b0ho!@!Dd{6i8LBLTVyi|?wRIZ1WtgocEu2K9`
z?Go|xBOeRya`8_`SP?P>JS;_US3`e!<Cw8*8Rgq)!C}(NU_hm)ZUm^UdZIIpEAV2^
zY;cz`wdP*7A@sisT&QCti-9?mEa$Iwbwa-EDuPRT{k#MWC9^1WoyZPsz}%zT(t2|>
zRm*@gtJfriHq*k`mo;RI1!+@axoL1ILMdRAaH)J`2>VWe(x5SYTm#u;?yaP;n53f5
z+VLoBL~Yml<&10QhCjBd4a|6mPsaM_V_d0vaMr<J3F?)VAse{=?t^jJu-BbO?i+d9
z@9NBXDAs_2FPOgkIs}^tK(ZP0z#@>iTIHpg@|OUg0XIzv@krj{{@*`o<vMZRCR=vs
z5eCJ~gPhOfEHVTmZ|v*xNNeq`@PvwQ706{`2Jbo*7{%(&*f!N(55D@dHr5T{<n{fK
z2r_-LaAjuUuDI@h8?dxMTT1J4_z@JZt>13KiMWFG%0W%lN8EHOfa2VcjVe{_bJP2I
zchcJxJ^mNwy|at;Ve?zgrCzkwqNy)UY>C1p;yR<=Bp9Q%Sw^9CLd&DiG9rxXf*L8&
zbpLe-5E#|npNIrC$80sMos8)(oFTl=6L*YPuw}BnvF`VsD7k2Ff#!Ka8tvM6tsI>q
z90I9Vwn#bCuKn?T041Y_X2X;>CZ*Kz77Y!KD17=1y7MI!H{yiMs*N=q+J+*pBb-Be
zV5H@$>`6IBl%?QEy|+v_t5~MsvnlN=L`4wY{WHApH+v-`=`)mctBBP!cV+=YYc64_
z)XvYJp!0WN4q)T`umJZ9y77sev(RCrIhs8VpC_aOYqvURKw~maj!X>pHiyTL&qtH^
zF?V<f?(Nv;sA+WKVY(uHs0^%A^e*Jh&V#JNUJd1oa1ZY0g+wusI%d1%fxs5*iz#yH
z4H1GLhKdJ(lWIvEZ&eL#TdZkj!7{bpm2QT<`L7szK~#}9=UyTqJzVOXW&VHp+<ddP
z*{iNevIEB-z*=cygebet6-u{bUUd_zpYDs5!Xy#(UtS}GHSr05)l&tEAF67G8cu4j
zC5Qa9Dx^fB8Vh-OV_tKd&GS1=k~FYQsE3P2UU8iY*ce$D9sCkAIV|=Vs4OAQm%CeV
zo~(hW%(0rB^H4zd0x{TRqB$39s@U=tBA2;MeV<wfAdjz)TYZ_FlvvhrAC!$0XW2>>
zMPNGnCgH9fFO6!Vh_5JN$RWW<9tQaFb}^%IP>@bz@0Droc*+9*qBnk<tw(&DMy>w>
z1kIGNT9~^#0i}>eZ2U~{rIRC~{YXzr(<^F3fm$%JzdQsPx<a@JaRtX~#S2*R-JtKO
zEBGr80E7l}`7CGkRGYuFv_WtzP9zyCpw|3@lG_{5j2z^go)~m7tTP*Tkn*2ZG~F2=
zBgQW-kN1J#R4=vTQbX132^FD+QlZ(In$$&Hv*#Wl`ZLSjublQ)WuE`Myk{mUb!gUM
z{X7tv&)IpHg{_18FmQSA{?FWwU22UgRqvPuAb9*?xT8k4<2ifL_9dfT7S(-~Qc)$F
zleJTvnStF2tCBUJZ}+m_B;<@mo^{dCvbydXs_4jdX1KJfId2~~SYEfSTU97r*WIUb
zXC)-@CavHHT)y6`YZP6@6gcn`^6ylZ%Jo0>(Q|e|i`hnP;DQ7Eo^FPqTS=6RrQSOn
zpmGUAd{b*mR%;PJVv}d>MT@3@76-i2RaZ@1=+F8XT$Bc=Zv|DJ;a!YduVWihOR7b<
zmpD9T!vw&HLM~thMocE9BcUehsJVn&XXAVaI;^D3j&`z$<S8p)z}+&_RO6T;vO@oc
ziZiAf(h{QP8%326>w7i(u|V(T1*p3Ny7t}f&@O<?-WYQc>9xlg1M#8{iW3)#M+$2K
z7Q46AcG;=$?&u{^|7M@8XH$w%%yn3m($d;R+}9}5FdPUk)4cBDPrPaF`p7pWHK#|l
z{|qQ9iY^^jR@F8~YY9Gn6)z=^)R|3LzF||CZf?5X3*y$GJ3fZ{gUp#t)Lmi%LY*UC
z^ivL+eCXA>T9$KjyPDV#m3n;Kq&!os1$>f6$dZvUzrGR9=8_;hV;?*_Pr$k@BsHFj
z{$Q1g@2X`t;b58_rn#B;Da#T*{j5$R)0J{-@^wiT!5fW36<$X&Wc@oEC0w4kN@0i2
zDfoIIc)r2q0K-MyK%!JKF~!gX&?aBRUKFFF{&#!mvdlBfj16(L%fqVu@mgZ%APczt
zOX%H{X2&*}u@Fei8<xvGyEsjS^yTseHCKe8a$o#7epO&0>#{N^RO3?uwV+AQ5rmbV
zhn8E1+=#JhzFhtjjO#BSd{dlu4<<9pwxe0tJj2x@cI7iB&x}W^0Iog)$h+Twup2YI
zY9^AX<PyZn>hOzE&3*L;;fsW_n4^1cxdR)LC9a{D%za1DWRbH=V$T1yl6_8=H;<D^
zMHBey{&uaJXVoOiw>g%^HR}`;PlsY!lzy5x2vD2{*jwuTao_%Q$m6c+rL5y=pko;b
zU6W{`*UK&qwCPubX_<%sL?19!Jjs3TVS$jU#ivT|!*zgcKIqYTu!2696z*ZM$L@jm
zwq(}+`QkynKR(dB*=<vB4g(v}OQ*s2c)e}=`#IZX{iot+xTe718qqt4)|5LjcI2Zb
zr2A4l=aoh!SH}txR@txpKPv2xK0|WlII7{H4D!JRE@#V;2+r>*AX3!K>m6=)34OJc
zld((ymRxtg3H;x($EL7oCy`vQy<y&gE|yo*x*-40Po_E%6CS@zgB)FcB)I5Ubh<Nb
zzqBGaBfsjA4LMD5gbvac^I@tawj%iG)l`gd4)>C6rA?iqLP~w4Fn8`Ov2T!<1&6XZ
zW;HV2#&9{<?1?5Vpt^2<dOCIxGVdHVpZxil8GJ}v2{~86w0cGrl1HRH64(M{m8E?s
zgo*F#=R!!BQPgX`@SysBmvfO6y>YsJ%hAx$=N&h?VPa;jw8X~(OEHa}Z$nK|3Vos9
z8vC)JpL@6U%7)HbYDSH59xYiZ(l|fHl`QLKGID>Rf}%wgAc<2NTqAZ7BnfkUims})
z#qxRJGW>L{gqDrrv+bXOHo-Z_BKap_s9DEcNM($GhIVI@q>2ufLBh*b`D0LG`AX6n
zCTZav3qmHZ#{kHMbcsn6uJ#!y|6uj`Zf6%$<quP%PBjn%jqJ*F(<_h^zmioy0v^QU
ze+oS}ksFWzfO;>lqwt@9J2&>0Xw&fF(bP@)O(vx<$Hk{c)VkoJ2dO;TN%3E%&bOW%
zNbsOBvc7~fQMyoxXyz8f-IE)ED}IY+1}h%wY%}XSLOZ~_C>vi`mR$TBZ~c&>w>BwL
zo4pY8E7!7|6a&CU=fWq!m6WoTF)F5>jGBd*r17_@fJ;b7vz2rtHP@%U4=k(O;0@pA
z%1k2{hGJ^bEH~o)HpVyPQab|g)QxTVlp78kLix-!IeP!tIFp9cPs?*dVFAaIQrm?S
ze0|~DrkblIlo8*-D<>semlQMxZNZn>Sc~Hnk$=x`GscWv${_t+Kl2ygABQ7t!FlSP
znpdhofF#?m7Ttz;dPLL`Hy%mVV?T<>5lhTumB&s)w5Zqd$e@$(a+p%VQCG!=A$?gr
zg38fmHkh%*z0k~pT~Azy4z1HDEdeMF>@DD-FiaC_IqIv|5FruA5ebSGLrdF|KWbY!
z5kbK$i!lIw%%#N4byd-|S;|<9992;s=aw30fb`$y-iC?I^>{RD?-25ZPqL)?DZs^7
zmWm%wVwlcQx_|8OZf<->1Abks>sYsWUvEa}&XdVTci=Y=CNL^N(1MEZ^?Ae9V@@s&
zjb8hnk$&LIj_03Xg~vwRB;D4)N2MSH(B!ENyhvD<-}oG`yGW^hJFgeFN=xpexpXpr
zKqoyx7~EI}q|geTgwhaIcOA$u*|Kau+36*(nyZIOv+qjwxWsvBTJG9g|5DZw*mQrS
z9>ac}Sn(`GZ4SO_WZqJFjtzJS(SIyVtC0;rrAb7FNq0s^fXCdE>Txp7Jp^qM3BNbc
zgcXfx>>$!7eE&VyUU+Uum0p;_MQU^e0C!~YK}DnJjd@PnSVw)CD*tbZR6|qZ@klSA
zf`bm&i$rGRu4j3=z4h+T2|sMa7>qU^l_?naJg&FHm;R1@>TK*_!B|VUT66H!FW&up
zjq&$tHA5N##akMe9|k!a<w!7c;$J3`A8-A-*CvPtL~^3H(>O|H;=*2%1UZy3z;8sw
z85whQLv_UmgxKCrbMOm!Z;RgtL_4-)I!vQo5<ecX1+i0}@BTVk+GqISq5bySppcF9
zT?tTkVl{bj!0IiUnK_t&=$-u;ezBW1@pt@Qe)QQI>Q_BI_Wf&MMMy)qM<?MoRS&AB
zoY`q9W2J*)wYLJ`zy|+qGQaBrFsvC_(9t{F@IKa~mO%(}4saRKH(&q&b+`$?3L?T_
zjXm%eSs~}XTHy>r06WqKpX7aq?^m{1{{k&$Jc?ET1R(!V=eInxs{U5Q#bQOeH}l*F
zd#Ltel0)q4L%Pk|=P>nF_^-^_Id<pcK}8c-RL99(?j7Vp<Hmc-VSuv&q8{cZxtK8h
z2!ipW-j{T`tVw5x#xXtXjV+PNzd<FLZJyD}2vD$@V%t&*(Cf2Dvw>Tw@Yf{x6|XiQ
zfV--Sr~60QdufzuztMXxJ<y7aqARfMj#gbw*Y8(@Ubx2dVG1TCalK8?!;aU{E<XPy
zF{pOizMYIcPWxT5yT~6(bh8<bA&Hx~MZ{scV}BkA*BkA3ChE>&M_NOT&vhwN1jFV-
zF}3MxA$(`Gm~Mj#6aD|#Uu^%2{ne)H1hN1N%ErZ&#^eh^iNN`PNnk{*Ol*mG)PQU4
zE$1x>6yGzAX%l5?lbbdgjY>LN=WMRn)wXq~_W%;&2xf7bZmt)<?_5?QaYYL9@%z#j
zBN-58ATKYk57$>Vul+<!>2|c>AqO<A_J6^n;^8FPx>`o67|gIoHGkSCmHrh6yWuD}
z$@iW$A~O`JsFP?mgL?S~$Y`0a@Bx-4B?6F}rT?Y(%x`+If#49io7%8ROhdyH4zR)6
zrC{h&vt?sy9c3pPT7((>*(VV@19d>7ikTn4W@9pRHB)7qm!yrflbfS`lK*#t9y(is
zNpP}1|0kW!kI&pT8S+0FrZ18Wee_?VRfrfc<8kX~VCH5sSul(1kcP}*;240=Ayu>r
z8HB~zAGq27Z0I2p!nXYzq6NGDE=)um`*<MXPDX_g7M7D@3dWA|k;D7hco75K<S0Qd
zq3YdgU=u|J;7@4_OqO5*jf2*+xJwP2C%J71@RKGz^`Q?!N2`hi`(}2=uW-#3CbIL1
zia{06_0aH2cKvZ-*0w;$1m*yvqE&u)XuBsQP>*$}>TXacXR^_J>I5t}*5N0HeBliI
z>e6vIGj8-ha7X#ms;Nu*&)s1oA_s$@#B5CN>7}s4Qz~m@r~SnKO>rbxGm={S5DqrT
zu*v%bQ5#^4iPFf~Eq_8+13OCoDC94g%PJ22YYYsoM@xWr@*ixHYnB6KlG#C`ocf0b
z)w&cDgKq<0=1x>-1dko--u`^&`rMy4VmvI^c6MJ)oQd?NKT|$V{Z!||2|OR0G^EpC
z=K6$FhCPQZ<omt+%YXfTt*J$%NID16OQVc({x)Uv+)IL7+NjU%QM<E#mj9t5oC<Sr
z>-aZe@oY%ED-un^tKA8xh3gNdR2%7Uu42-g=SO<Ig`Iq|{4kEZAK@%3YC5T|6)EXM
zM=~ZKBTg4*0Z<%Ya`r{VR|P{;npHumQcT^y?Fej^!_Y@}Iy<H@G&`oz^gr4cvvX(+
z(`etdY&A<RO%%#rL#+yj%hZup!A^Gr75IE#P7tc1K@%F>Wmo~A2o0DTOK1m=HeBzz
zLnT7^1o%J#pT|Nx+Ta(Rexs?3_q`g^NtLz!QldScJ9Ctuk$a@*^eqo5{ThBKq22ks
zqzETV%WF`BCYxlA7N)BcGv3WHa|JPo8_)j-X35_3#do<EVkM;*g9^ZEa~;V?YN`!X
zaIa78ql5^Q2{8mP7OJ2J$-}4#DT@17Ald(LGc(!Q$UIen9EL6Vhau0YN_Fsl$aC!Y
zmdSZ%-CpIx&#S=IlG;_;YG^}Z*K7YRY^inbB{eXip#ajeZ0J^ly3_k(7oDDYBW9xv
zhSq>v6QEY<xaLS2XWZ0S&5*fr(kk>6(f}Fj!~fz~^BV|QZ(0CHt*xc#7Wa;VzAc2;
z0_I(cQKts0`C75^olJ4A#ih5ED~a_98r$4TU`!R(R-x1;vW&i#uyHmM;oOd2S66pG
zu0ksG<?PiYM3(QocazePt>9f4<T!83u|(d?`21Vw*85OFY7q4_;(8pV#xWf0qgGpZ
zGm6R0kqQjhiQ(|9w%YMoBH5AdCEe>UUreZ*8du|eXla=IZxL!`ta<2Kaik}JQoF^4
zd{f*SX~y;6C`KJu%6Tc6iSXtOC7W{K@&W<7GDz>+j<4_MErS(@Z)@?!9cNl|%avYg
zGsm@^%qD_1q25T_JVP@B$q{=kYE8%h*_s?g6cgaWSF(3rUjrLXL}VR3_3vWnB+g!h
zy2U?R4a;p&-0B;NEI1K+&K#=?VfW+#?&%s_Y7{NpuU`?2cMcto37un!!{0GMFSHuT
zW`F7%E{so-DmQ4xoSEkj1|1J28gb~|hD?Zt&$v1G%f#v@E`81v5rPRK+Y}f@DwAX<
zO%}iq6h*z5#pH&V+savM(fkon-17mG#I!t9aJ}sGhpuTv9Ju;4bK^YRqgl<G7vHO#
zU99+~W~7@s*mWi=tOtgLDOCt%HgT8Y+edYjKHYJ>R*Fl4Q3<HQMIiPD?kqLQk%?CF
z$UnMr?~8@X?PSUUK~YRPj(H3Ix0K#_!b<=VT~L|@4hw~WbzgrFmA2!Ml43DfMu?i;
zCST^B;@xqzZsQ38?YOs6u{l5Oe595z^_(|Grc-@Bj@H_civ%*kYz7O+We2!;t`?Kt
zbH_Cie_U$}PaJqc=9ssl|8&4g{x}USTWUb!K_Ir)g;@qfxrj}~$|qUj$*2&`cq)Ju
z_FNb<Dm>x@Y(9Z=H>BM|kuf#JYM4Kl+fO*5ML)LAXG3>Cqr~kplY}!!;90Zsegch6
z>k;k`7L`l|s0ERNg5foHrG%fhwrdH-+yyUl0Rj9O$`=g%4?1){F$qwx8nb_697uSx
z(FWcli`mf7i5-&0CrvE-#pnUM91!69YqJF(MNDHekJ|^^;$*($uSd`j=zl?EGM`N@
zzGWmeDLMyN56qw3A<hty!2>O78ppBps3qqqQjpVh)TJ*H(fnwps4GhZwuDiisf;Xq
zSB`eY;-Dgjzm@5+3KjoCV&ya1@N!RQ@nNEeb|`W?%uL)sIq`G7=yV9oh5+ED##ojt
z1_$7m?;~!^m=+nJ9TI*gk<h3v_T(Lnl%e;sG-nVs#xxBJe8`rv;tP$L={4~0yf?rL
zs?mE8$a<3n^*9cThNoa*&pu4JdJLsa6p|jBefvpy1iwCSPhDwI=O^WWTSFd#!}E3k
z2WBlXFBSDYKiThL?mZr1Ct!}J-j$n>i9B|dbmYe1M>B4A7PDWL*r+1Q;x)R3|J`GO
zFb)Ed!s1AK|KL&F_a3ITD#5mz=ip}O@h7@tg!3VQFCOuv;7gcbLb9atL+pnnZ_?nT
z!G|Jm3iF}FhumO_vyoBZSO}r?=p3vM6VsPFxrL6-j34{u?Ce1`7Z7{*Taa2d{&teV
zmv)xNFn1Y&H}UFB$9OCzFOj4ze}dMR)@WN1eYqsQl!<Ph_H4_BKPh-3JA2ao<A3wG
zAlVTg^{AycHDaLBkxY1O@KE$c_NzBny2r7}i(@po8}`CGWEaop@%``oK8u}f?xN|W
zU2rQ*TDxFSeX=q}8em(5l5!g?{WnMWUFxSBHGQu(pF86j^7c|(>9lgE{1FV=re_^-
zCvWQKP2%{co%e6r(Fq>VPe(Sx#lgf|rPBBsrd*tJOUK^!wuGNRsgvDNUpCz3h7VKD
z3a-k!5!^Y$=-p8rBO#uk0j?<M27yjL?7*aGL%ZEp;8tS@5@1KJ)lp%K)<%(28`RFI
z&AWH^JagzAs}wFB*Yfq_2tC`TZVO(N5~|gea9Pjw_hMv-Q?jnlo2QdYYZj0ppNnR(
zUF0h&H=0;ZR>RqeXim%HMX1xc24-GH*s1R5O0j(vVJG;thM;g|Ae8j@V@mb;IAGa~
z6%)puse1m^1Gr*Tuhll-zK~w?{&r`qU;B1H>b7X=j03J4;;%h>j3HD=#iWdPb>%q6
zif!xZup`DSk{GT#Xxw7Y+nPRo-81O%`Pgy~E1KAl0x<8HFoNwxX0uI`x9O^tT-WDt
zoEE;UOHWB95I4(})XltzZJ(jO8?mG#5Yvug=j5(_0dn(mquL<;5i@RBwui`pa<XKn
znzaC}LvN&Xq;PFx%}%1ITXMW9zJq&#EDNd8m9HxYGyrX4X)|ZC&)N(}NwHJ3v+x`T
zHa~2o*3aoeddhD>-jz0-K#+X40^6y_P`tp)<eT{0)M==!yCzA{ZBh@70>3k>Y(aA}
zOvR<y1GHP!tE`jWx<9vdb+*>JBcNR7^VUlAn|TqpS?(XqWGj*hV$2`GV`S5FeHIN`
z-Wwvn?AUa(=cX*!LtO220}Upxo(i&pH`Ac?(rEXn(x&J;zSiPx<_dk}s`DMtrv9aB
zzSxAfxc782r1vnSyXho`q?(@E{CV;G)6J0B2Vh8SqEGN}B43DQ&o=wvzWkD@{ZFLe
z<tL}M{=<huQf#&5^IBx0a=koJJ3GV4<JF=xR|n(d_eySZCt5dHv|&XR0+g%uLQS|;
ze!6M(JYvFiq(OLB?NQTfp$)LC-;LKwiFUvdEsJqh2jToAzKn@od>34{lvDcOMFZmh
zOAP*BWdapE=l=l&6S1;#B;wHkv<G6z+TeTUG?tlt*R`b3sG*tQz@S0Epz%m2=<kfK
zWwU|*u8rQ<#((*~sa|AO)~=~>)Hf}WMv@Q`MkTA(sFyO0s8ZVf(0(dB5fWOPMJ|*E
z-=|Y7@Qf&y;ob8pbi8>$C0XZY%3(Z;%BV>3tnj4JsLcE@%CpPL+0sA&=znv3*flr}
z$T4!@FnqVS3*Xv5y788RKDu=WlYMhPST@cwx)OYI-!FQLtIni+^sVfiff`!*xC7Bd
z9)7<FG2FnIS0Odz7}772$&x25BD#uCGdI>0Ia8MT*HFq-xAQy8DmcQowH>>(w{@>b
zc_NbE@_U1)wapT73Qmv#FunsEC&^RA1pe8+%r&ute5%^`5|2z(NAu|`f?SUGik8oU
zK8Hc-)39%K9=5|ZUDz^_6Ej7p43@A-*k4vojiD2UK*v@|6;SFg@o4$Wr7G0)g5}<d
zqF{Swl?c0nsuq)vLj1Alus9$qBm%<~#N5-OoAvphEbQ!@|4dr|%0!D5>;@YkTrZZN
ziojdY%_KT>CUEb{{84le$NrK_KDB2U+i~NtZv0V!(|_W5&Kf+A>1iI6r-Hcim?MnP
z+Y;h&LZf9@^8@f|4}qom^S0SV1!SI}bewTXPW8##hz;lB@0Izs_*#D|Dvuodir7#I
zU2wV4d@9GMA{Fcbq?CyD+_cOVhzSu};}=ly@98xF6w`VW_KCM(wPCws?WcpPI)dGw
zZ-AhnoWt+K$;tQQSlJw+!+)UW^T#L)^YovOyO+7!FV@_?pS4@RkB9pa*5`xEI*XOF
zv{wa$mYKsnkl(NSE%&@!fm*h{@297{AKjxmTsz+t`LIoZ(a&X8*>CTYvhZr;ly<{I
zODM-9S*pf$_kubtt-^()Y3%ah8eY}GT6oHKX1oTfk;!4FW!rpoJEr~+UaOIP78iIZ
zeYXU6G3kk1JSeQQX5coBp4C4T&P|kq)Z3yu&mMW%EXy#t<{^qr2m8UDRLiz3!?PA{
zkVb}vS_yVQmjgZW4Ea2}Qg~BojW9f-xva?oZLw?97s{71qVh5a+h|S8byE()Lkpcx
z3cW$=X;nN^GWiqv_F8kNb5neATL@%RklAW6lY=es2#Q{*4UQC;&S8z@y}S+4)`#Jx
zW11X!4|Q>;m`>Y5Z|$xe^+1_SGyC@1v<+p77%wAWVfJtRG|%RAR<{^$*?$`q%#l5L
zLia3xPW{nl6t#|}Q%bQ@4QXePAqs(X=4c|;v=y(nh4Mpfo9g>JnI+LNQ`$ais$*hh
zCd)Z`HM%-DXs4rx`L)p9npvmUtUPmrX;)B(?}~eAhrH)H-7uTu)n=W3P)=TlUzHWw
zU~U2EO6VXyYgxv_+H9tHA!E3C5I+TJSp7WR2`igh67+lg%=7bjY)f;`(`P{F>|**p
zjbl_GBseO`3seU^2wWQWA~QBEN@i+YK#6u;+VkYf73AyNPS-p2b-&!A8`sRQNmC`v
zXu9Mv#>}=|B?TwNwV;*Y(1s^<zT7l+%NPOR%RnjW)ubWiceiFB<#+JtO8z%RP!#ch
zFvlm#jXIpIbM?$|9ixwnz1>{9#Fkja0IRJNg^4o47YydAE+86wtn|)%YLq<`2#AgW
z-6yHW2SRt^x*O`-`~G@(g2txWLY6dWB^5%c(6D!5w>eu=13Tul;lZ=pB9=6;4+X%`
zUGlxuoe}o=czHGd%r65UeOm}_`S^MMyd4$s^$Jr=>+H9b(K7yhbZ2m&BuYSG4+)lT
zOgbLp1ftE5>UWoy1vzYDf!55y{l!_Foyu87W^z0J!8&Pv1uukBG9#HQ#|x3dA@c@0
zo$7G!a7utwI$N5;cN|*k*+u4?b_Ad#$1CavPfrCz!WD{%gOl_chLqD4#u*6s+-|&3
z2)wu^gL(`t>Ci*msKsW(Wu%KrLy!mRd)P8U#pPIU$Q;sHsRk}5NE_PuY}?=uM)oY2
z9Z)2Q($21u1W+j}g;FUYU$~$4D~(%}-VS8>?p)>o(`jl|DDi1+ltaZ~$N=gHPUzTZ
z{v~p2(1@hJ#yH$w=-+}7ZrZEgAZjX4qTo2GPb%LwN^4zQtFxjLPgjlsEeVLKaDzjo
zCO0PcCn~1`=~1}?%SdaX)E7S)Aq8&?Lic(Rdr`iD)#A9JlR=Y1<3XQ5p+T2G!9n{X
zAsu*z`4Hl6Z&&09f%1#|lLGY2vzsLDwwEIuF4H6t$;Zr7)E6CqX?0z-AOuL&jpC$e
z2Txe4CKJ)92AAT|q8C(2#3Jai<5QemUH%6`Bg%A+T&Bu&mi{j~&6D*MSV_%_T!><+
zs;J0*4lU4y)Pw3%K9)%(L#3SAE@()tl=@%be-0^baOdD^<OBdv*?W<vS)f4j0=fd}
z3dPiq)%ZiuZlMEUz2bjB47mZcX+4|J970iOIPv0<aOap(A1C@Gnp(>YMp<}S<j&Do
z80k4FDJ+aKy42s;M!YFJm#P%!Jl>OD_j1P@salTh(3k(YvhWKo?&ZjO`MV>oAnY)%
z2L5hETv<%|1egE<q;<)>nja_I(#>l~Rnr4lzwncwNp8x7lFO+?$yAGx%xGA`W2KM(
zM`70i)O6CmB}fZhMGlZ6N)3SoLTC{U1TadGa3TajDWM63CWQK<iJ*ic5J03z;82f1
zq>COPDAEo&K_JpEA|NfmNi*P=yZgTTZsz`FcJ_VtefOE!+2@^|ot>T8W!<a^=cQjK
zTrhnkCZX;tc3Bw|g;FoIsj?OCxXRHy_;<|*$rXV>JB~9InT!817Fb(OX79>!r!D?5
z(Fzks6FrKFV+T4<MYRQZdaU;dKIi*ASZUD(vdYfqTMI=qrh1fKXP%3>wMhXQ|1n6V
zTw@{cN?aej{j_9RIIoz-<=!I!vLssjy16<*;Ejw=j?xKY`7gJ*WB{MV!`J?h9z>D0
z;G#$qu<baihJb@_juO{JvawJCtSM6H(gtU!L%=HuF|Bba4c%T`7en<DMO(xozBb9p
znu>l2tt=YOJJUS06$imhfdaV)j1E<I_!L<DV!L&ETT=8E549~$RplmORPvpp(*hCh
zy|_ly@t#{F>Uz&wJjK?pQb)==a1s^Dxy;CWVfzY24cs}8F&B-CCoxN$_ts3)6tlg5
z0xZbb+zQnTmWGeBeMb2{RtcA)l<=q5yOr?*w$4YONvfKuBj{nuu!CD^eYx`Oc8@FH
z=Bn6K4JAA%{^H|9^@HzH%I<j+Fjm-lm?vhdT(h@&b-u2)WY!oOBV|@%-<o#cM(~<>
zk7ybt?T);|mgg~crfB?}Gq&GrP7YfEXzbi^lYewr)&Pb-Cj7hE*QY04`E6)WBxsRP
z6ABWn!gSq9$nAEpr5}-kfbA9C&0b#c@F9EQGK}(91B-NF+-g}_ZVF1;IH7Wk`JMQj
z?(^`>BaSUHpu+SF<Z;a?+R^LRmEiV5Rj0e|#OJ<pfYa}N2iccZyK9E_7y{O_hL>wc
z4ZAL%yXaPbZ1CPANU0JW5BA2UQ9$^lxhS;99I4MX%wi>&lFC!hPpybM?#kgQrX5F|
zBBVgP#VIU_tXw8v)p8^5iy!1N`YsHw?k)cLw70nVMILB@A}_Q6Wa_aAr?-q>cwa~R
zo)ZIcLkqY}b*?1;7!Ob^l}gPV6_FVGjH6Fi8*wXskoV^VCzJICO~Mm|>j!^6&ke1Y
zM-G-PV*^sE<krN;10e4Q8gat)nYYWPi#^|ke9(X?wu`6L$BkUG$r2gd8-Gli$Q}O~
z3BF*Fi3hmyK~Iynfzi+3HlNFv>`8`KXY8W}b*x8D?RWbuWdS0a3xm_n4$5l}ig;3b
z8enfv@hAIhaA6rFZvIj78Y)5N8(nH~4HkxWuF|Y)cHc=D|DrL>$0GdLB7*DM?(XnC
z2d9T|J-^p%k2bZ;ZOPH>JFzPEB+RAI^rz-2y_nd&*}2`yjEwz+1K$n9F=9;(vE>@y
z*O-Bo>wucIEP#3H@OC_6SN(9}T-e;fk%cg^H6Y-{O4GsU-5*EM+atXzrBTn%P7~Q<
zmaR**Zobcg%G(H!f{hl^>nHmUtX{~3?h`O+D`Ce9az7T2wyaCntwm1SOt0^;q7OFq
z)dfEh={N!F5YCR}IFIMGKT@dFa7myeC@*1k*2O);8#qI4i}58pEY%#ii>aGvR98OC
z3!iQSq|wdBiko9>H_he7;V4mi@ZB~b@}SaYBnVx>9KpVUfMoMb41IGc(ZBsX{rp<Q
z343$n&&{BBK{hp1^~L6lU-tT1Z;|F9rk!IPC&;n-)Y{FfiA#^7@hewi0k5x5_I>@&
zN#$t+hSk?YbL?bCA(5m?%c-d87Y))QUHebdKU6W--v==sGJQ?oYLa@4%D?cez5kH*
zx(j-XY$PC~Cx(1CY8@cCC0V_6Bbz}X%W%t(8RiG$`d`OMvP3w$w=k{tZW(#Qli44@
zObT!(dQg`f*gTa<lf^T>?mK6ZSfqMB+5b`++4*ioXd7+12HDB~_@}mCXPbiFH6U2&
zn?H~Z{g@g)kBd<3+x_W7734;LCd*54-g0W^09ay3p#FI|gG9iZWXPZxkd`)F8xDgZ
zU<e2dt^$LpsDZVth#nZ%P=bOg#!wr^>HRw;?@b0M6@=8uj<-DVoeo&b+$T6BR6!f|
z*J%xoL@H!+olpgI(=Q4p!o-r+b|s>QP02?l@nR2$ol3^GzDJd}oNt%3id<+Trjew>
zJ{3-y#fyRN9D_C1CL&xNyLN1KrCn6r3Mt6*p0w}IK6a5RB)xVZuA0ZDi56$ArGtbN
z+uR~n_jr8nJ{)(c{>0Q1XC)$PWt_T*wMxPQnnG={R+Wal^L~=^ic#-Y4fF=s5q>FW
zb!l{(6=L}YmGf<~c=i0jZk>Vr|D+5&k6i*%0FVf6XRwx?Pb5Ks(*$c>QE-BDeszI!
zf;b{EQ~{}Dpa4_Afwiy!o<t4>_HPfP;Dkb8%n;g0Q&W93(p*m$W3GeNhnc}(`ub)V
z6LT~IZmjVCQbdh816dLRyh6Pd;0SGlKQvVueO7Z7E0w(dL}zNnNKVT=BO`CUb*+yy
zUA-N{sZpu?=Tpo(G5jY_W<}pWl!8T@lwsmhl=)JD_;SU}^8%%Sd=ImFJFLXGvbgC<
zUq#Nw^uwHo!?mHWKbE|s2odxf9PM2*p?NVrI|BXLw0r*A4@3n$ek8~UOLizS06c@Y
z^EDmQXx2CtsHTx!lu1suV?ADmFbq5ASOv@F%YvN}bX?el#*sjYDoRl<4bDFC!neu8
zpkL3X8s|>!S4n1<**0P+dA)@b3geoa{-(w=$_x?5DRb)qPlk1Yk!)kTJ;T+}xC1$+
z8Kt(F(<zc4UA4ti8_jm6I{}TCJd=~p(63O8gFkP*jAcj{Fl0sA(T)Q#)?ZKRYkW27
z>JL1e-iz$UG2r@|eG#rV^|`L~1Y6r}WA&AuYYe5#A|7N}_0_6-%|2MZV_BHI8Hf&Z
zrszKB&zlK`ekoQK8NH#_xB32Z^QWW4nZ#Md)%e0d!GKQLX2I<lV-yf~o5e5Jd6Wcx
zJ7e%7E{_HFoY8#|-^3D`GM(zO$iHPE%z4-@6|Z?BWH9(yegnlWno5Z{+r15C!D?J>
zq4TlDj@7q%0>2Q0&%3y{5Oynl9k;)2&+Ux~Kztc&D^G~?XJ~WJ4-3#J;xojTfa4B!
zpFOe2%K^uO>}EU}O#rR5(%;D2%Lx43m$5&}E}JY(_t#Q&9T$BvDw5FA&{^t9{t#A0
z*#~+BJvuGj?Cyv04#Wr43kLq;q+I9p=0PGBnhundD7A`D50^P7E(LPuJX}N%CH}x?
zC3;^DamG7x@VC<cHGl`KgNzgYq<xyGlf795Ygd7Ze&Swdn&juVwi!%EOHqck_iu{i
zb!g`&*ti-*^FrcQgCwew-?|D{@f40Xi}?94Bk5UWnU`C-u>we1kl@&pF8}L^(&2Ib
zJ`+4hYLMtyLRZXnrj%&hiYMwYvS6Km4BzE`Zkq)1I|VSY^oX>|mlSw0kIZY5oS!Ha
zoR;TD+2tQ<nAmf)9*}4TBX6x6PQ?8^YyV7IJ6_fwO}&h4P26U2)mGJ&f@ZBvc})IR
z+{87KmCi+r$-m-TNB;%DpYF$+4=woEXF6+f9~`drWp^6%Piy~r3ZN~d(i-~NXTJ5u
z4$6k|O`^m90!zLj*ZaScpmiY;YAuPYrA7-Pe+OJsgV<1eC`^{ad-;C=@G^8B`iNYB
zk0lw&pKSUR(ZJr3OfJePE}I(Jp!ydCG3;pCNu2WP4Ziij*@e(ZAtEgYuAJS~ydBaI
zt(RM3rFvf8cYm}dq&wnDe8A#XPb_P^VVCdBg8Ja)(s}zDkTXvU_%}9I_Qq~ZpN+%%
zq~Tg<c*}F`(4`kTlQdv6plBNvD>l73h>m_s<y}7``rWH-lszW^dl~!oRFdMCiILQ`
zh^q>%^C#nXiY*dRf`L<ui;_2XnQfb4scV+o?1w7PvL~>sr^D|V^%Q-y4xVpvdhk1{
zJUdI9(+c10ed}9PA`=X_EHQI;Kbz6oK4jLojO=Bc{RrU!RzuQHSB!jP*O78n-qYy9
z8)EsDt*B2c36pfbtq$WcQN9_46A7rpa`Dtap>)&Y=*>rkUgN0#;$)pnuj-IMIn8#n
z=ED(ty-fS!n(7YSZt8pCW`T%}pM=9_G$#_jvJT00oFWO?%&4If=UJeQnZ5t6@J_xR
z3;w$6Zf($;4qIMFzxv<m0pQ2Kh2FE;r?ExHPErp3xtWB7x(0`mf(f2rxDEmd(*r9h
Jnc0|w{{><~3B~{b

diff --git a/doc/fsl-pfeng.txt b/doc/fsl-pfeng.txt
index baf0d67..9955f59 100644
--- a/doc/fsl-pfeng.txt
+++ b/doc/fsl-pfeng.txt
@@ -1,5 +1,5 @@
 *
-* Copyright 2020 NXP
+* Copyright 2020-2021 NXP
 *
 * NXP S32G274A PFE networking accelerator (pfeng)
 *
@@ -7,25 +7,58 @@
 Required properties:
 - compatible : Should be "fsl,s32g274a-pfeng"
 - reg : Address and length of the register set for the device
-- interrupts : Should contain all pfeng interrupts: hif0..hif3,nocpy,bmu,upegpt,safety
-- clocks : Should contain at least: pfe_sys, pfe_pe, xbar
-- memory-region : Physical address space for PFE buffers, must be in the range 0x00020000 - 0xbfffffff
+- interrupts : Should contain all pfeng interrupts but hifs: bmu,upegpt,safety
+- clocks : Should contain at least: pfe_sys, pfe_pe
+- memory-region : Physical address space for PFE buffers, must be in the range 0x00020000 - 0xbfffffff.
+		  The following memory regions are required in this exact order:
+		  1) reserved region for the BMU2 buffer pool, starting at physical addr 0x83000000,
+		  "fsl,pfe-bmu2-pool" compatible;
+		  2) reserved region for non-cacheable DMA buffers, starting at physical addr 0x83200000,
+		  "shared-dma-pool" compatible;
+		  3) reserved region for buffer descriptor rings, starting at physical addr 0x83be0000,
+		  "fsl,pfe-bdr-pool" compatible;
 
 Optional properties:
+- dma-coherent : Declare driver DMA cohereenty (S32G2xx cut 2.0+ only)
 - fsl,fw-class-name : PFE CLASS firmware filename
 - fsl,fw-util-name : PFE UTIL firmware filename
 - fsl,pfeng-master-hif-channel : [slave only] The number of master's HIF channel (0-3)
 
 Required subnode:
+- hif : specifies the PFE HIF channel
+- emac : [master only] specifies the PFE EMAC interface
 - ethernet : specifies the logical network interface
 
+Required properties for 'hif' subnode:
+- compatible : Should be "fsl,pfeng-hif"
+- reg : Small number, indexing the HIF channel
+- interrupts : Should contain HIF channel interrupt
+- fsl,pfeng-hif-mode : Should contain channel mode: "s-cl/s-ch", "s-cl/m-ch"
+- fsl,pfeng-ihc : [master/slave only] Annotate for IHC traffic
+
+Required properties for 'emac' subnode:
+- compatible : Should be "fsl,pfeng-emac"
+- reg : Small number, indexing the EMAC
+- phy-mode : See ethernet.txt file in the same directory
+
+Optional properties for 'emac' subnode:
+- clocks : array of TX clocks
+
+Optional subnode for 'emac':
+- mdio : specifies the mdio bus, used as a container for phy nodes
+  according to phy.txt in the same directory
+
+Requires properties for 'mdio' subnode:
+- compatible = Should be "fsl,pfeng-mdio"
+
 Requires properties for 'ethernet' subnode:
 - compatible : Should be "fsl,pfeng-logif"
 - reg : Small number, indexing the network interfaces
-- fsl,pfeng-hif-channel : The number of HIF channel (0-3)
-- phy-mode : See ethernet.txt file in the same directory
 - fsl,pfeng-if-name : Logical interface name visible in the Linux
-- fsl,pfeng-emac-id : PFE EMAC id where the interface will be linked to
+- fsl,pfeng-logif-mode : 0 for now
+- fsl,pfeng-hif-channels : array of phandles of 'hif' nodes
+- fsl,pfeng-emac-link : [master/standalone only] phandle to coresponding 'emac' node
+- fsl,pfeng-emac-id : [slave only] PFE EMAC id (0..2)
 
 Optional properties for 'ethernet' subnode:
 - fsl,pfeng-ihc : [master/slave only] Declares the interface for IHC traffic
@@ -34,97 +67,209 @@ Optional properties for 'ethernet' subnode:
 - fixed-link : Assume a fixed link. See fixed-link.txt in the same directory.
   Use instead of phy-handle.
 
-Optional subnode for 'ethernet':
-- mdio : specifies the mdio bus, used as a container for phy nodes
-  according to phy.txt in the same directory
+Example:
 
-Requires properties for 'mdio' subnode:
-- compatible = Should be "fsl,pfeng-mdio"
+reserved-memory {
+	#address-cells = <2>;
+	#size-cells = <2>;
+	ranges;
 
-Example:
+	pfe_reserved_bmu2: pfebufs@83000000 {
+		compatible = "fsl,pfe-bmu2-pool";
+		reg = <0 0x83000000 0 0x200000>;
+		no-map;
+		status = "okay";
+	};
+
+	pfe_reserved: pfebufs@83200000 {
+		compatible = "shared-dma-pool";
+		reg = <0 0x83200000 0 0x9e0000>;
+		no-map;
+		status = "okay";
+	};
+
+	pfe_reserved_bdr: pfebufs@83bf0000 {
+		compatible = "fsl,pfe-bdr-pool";
+		reg = <0 0x83be0000 0 0x20000>;
+		status = "okay";
+	};
+};
 
 pfe@46080000 {
 	compatible = "fsl,s32g274a-pfeng";
-	reg = <0x0 0x46000000 0x0 0x1000000>,	 /* PFE controller */
-		  <0x0 0x4007ca00 0x0 0x4>,	 /* S32G274a syscon */
-		  <0x0 0x83400000 0x0 0xc00000>; /* PFE DDR 12M */
-	#address-cells = <1>;
-	#size-cells = <0>;
-	memory-region = <&pfe_reserved>;
-	interrupt-parent = <&gic>;
-	interrupts =  <0 190 1>,		 /* hif0 */
-		      <0 191 1>,		 /* hif1 */
-		      <0 192 1>,		 /* hif2 */
-		      <0 193 1>,		 /* hif3 */
-		      <0 194 1>,		 /* bmu */
-		      <0 195 1>,		 /* nocpy */
-		      <0 196 1>,		 /* upe/gpt */
-		      <0 197 1>;		 /* safety */
-	interrupt-names = "hif0", "hif1", "hif2", "hif3",
-			  "bmu", "nocpy", "upegpt", "safety";
-	clocks = <&clks S32GEN1_CLK_PFE_SYS>,
-		 <&clks S32GEN1_CLK_PFE_PE>,
-		 <&clks S32GEN1_CLK_XBAR>,
-		 <&clks S32GEN1_CLK_GMAC_0_TS>;
-	clock-names = "pfe_sys", "pfe_pe", "xbar", "pfe_ts";
-	fsl,fw-class-name = "s32g_pfe_class.fw";
-	fsl,fw-util-name = "s32g_pfe_util.fw";
-
-	/* EMAC 0 */
-	pfe0_if: ethernet@0 {
-		compatible = "fsl,pfeng-logif";
+	pfe: pfe@46080000 {
+		compatible = "fsl,s32g274a-pfeng";
+		reg = <0x0 0x46000000 0x0 0x1000000>,	 /* PFE controller */
+			  <0x0 0x4007ca00 0x0 0x4>;	 /* S32G274a syscon */
+		reg-names = "cbus", "gpr";
 		#address-cells = <1>;
 		#size-cells = <0>;
-		reg = <0>;			 /* If id */
-		local-mac-address = [ 00 04 9F BE EF 00 ];
-		fsl,pfeng-if-name = "pfe0";
-		fsl,pfeng-hif-channel = <0>;	 /* HIF channel 0 */
-		fsl,pfeng-emac-id = <0>;	 /* EMAC 0 */
-		phy-mode = "sgmii";
-		phy-handle = <&anyphy1>;
-
-		/* MDIO on EMAC 0 */
-		pfe0_mdio: mdio@0 {
-			/* on EVB occupied by USB ULPI */
+		interrupt-parent = <&gic>;
+		interrupts = <GIC_SPI 194 IRQ_TYPE_EDGE_RISING>,
+			      <GIC_SPI 195 IRQ_TYPE_EDGE_RISING>,
+			      <GIC_SPI 196 IRQ_TYPE_EDGE_RISING>,
+			      <GIC_SPI 197 IRQ_TYPE_EDGE_RISING>;
+		interrupt-names = "bmu", "nocpy", "upegpt", "safety";
+		clocks = <&clks S32G274A_SCMI_CLK_PFE_AXI>,
+			 <&clks S32G274A_SCMI_CLK_PFE_PE>;
+		clock-names = "pfe_sys", "pfe_pe";
+		memory-region = <&pfe_reserved_bmu2>, <&pfe_reserved>, <&pfe_reserved_bdr>;
+		fsl,fw-class-name = "s32g_pfe_class.fw";
+		fsl,fw-util-name = "s32g_pfe_util.fw";
+
+		/* PFE_HIF_0 */
+		pfe_hif0: hif@0 {
+			compatible = "fsl,pfeng-hif";
+			#address-cells = <1>;
+			#size-cells = <0>;
 			status = "disabled";
-			compatible = "fsl,pfeng-mdio";
+			interrupts =  <GIC_SPI 190 IRQ_TYPE_EDGE_RISING>;
+			reg = <0>;
+			fsl,pfeng-hif-mode = "s-cl/s-ch";
+		};
+
+		/* PFE_HIF_1 */
+		pfe_hif1: hif@1 {
+			compatible = "fsl,pfeng-hif";
 			#address-cells = <1>;
 			#size-cells = <0>;
-			reg = <0x0>;
+			status = "disabled";
+			interrupts =  <GIC_SPI 191 IRQ_TYPE_EDGE_RISING>;
+			reg = <1>;
+			fsl,pfeng-hif-mode = "s-cl/s-ch";
 		};
-	};
 
-	/* EMAC 1 */
-	pfe1_if: ethernet@1 {
-		compatible = "fsl,pfeng-logif";
-		#address-cells = <1>;
-		#size-cells = <0>;
-		reg = <1>;			 /* If id */
-		local-mac-address = [ 00 04 9F BE EF 01 ];
-		fsl,pfeng-if-name = "pfe1";
-		fsl,pfeng-hif-channel = <1>;	 /* HIF channel 1 */
-		fsl,pfeng-emac-id = <1>;	 /* EMAC 1 */
-		phy-mode = "rgmii";
-		phy-handle = <&anyphy2>;
-		pinctrl-names = "default";
-		pinctrl-0 = <&pinctrl0_pfe1_rgmii_c>,
-			    <&pinctrl1_pfe1_rgmii_c>;
-
-		/* MDIO on EMAC 1 */
-		pfe1_mdio: mdio@0 {
-			compatible = "fsl,pfeng-mdio";
+		/* PFE_HIF_2 */
+		pfe_hif2: hif@2 {
+			compatible = "fsl,pfeng-hif";
 			#address-cells = <1>;
 			#size-cells = <0>;
-			reg = <0x1>;
-			pinctrl-names = "default";
-			pinctrl-0 = <&pinctrl0_pfe1_mdio_c>,
-				    <&pinctrl1_pfe1_mdio_c>;
-			anyphy1: ethernet-phy@1 {
-				reg = <1>;
+			status = "disabled";
+			interrupts =  <GIC_SPI 192 IRQ_TYPE_EDGE_RISING>;
+			reg = <2>;
+			fsl,pfeng-hif-mode = "s-cl/s-ch";
+		};
+
+		/* PFE_HIF_3 */
+		pfe_hif3: hif@3 {
+			compatible = "fsl,pfeng-hif";
+			#address-cells = <1>;
+			#size-cells = <0>;
+			status = "disabled";
+			interrupts =  <GIC_SPI 193 IRQ_TYPE_EDGE_RISING>;
+			reg = <3>;
+			fsl,pfeng-hif-mode = "s-cl/s-ch";
+		};
+
+		/* PFE_EMAC_0 */
+		pfe_emac0: emac@0 {
+			compatible = "fsl,pfeng-emac";
+			#address-cells = <1>;
+			#size-cells = <0>;
+			status = "okay";
+			reg = <0>;
+			clocks = <&clks S32G274A_SCMI_CLK_PFE0_TX_SGMII>,
+				 <&clks S32G274A_SCMI_CLK_PFE0_TX_RGMII>,
+				 <&clks S32G274A_SCMI_CLK_PFE0_TX_RMII>,
+				 <&clks S32G274A_SCMI_CLK_PFE0_TX_MII>;
+			clock-names = "tx_sgmii", "tx_rgmii",
+				      "tx_rmii", "tx_mii";
+			phy-mode = "sgmii";
+
+			/* mdio */
+			pfe_mdio0: mdio@0 {
+				compatible = "fsl,pfeng-mdio";
+				#address-cells = <1>;
+				#size-cells = <0>;
+				reg = <0x0>;
 			};
-			anyphy2: ethernet-phy@2 {
-				reg = <2>;
+		};
+
+		/* PFE_EMAC_1 */
+		pfe_emac1: emac@1 {
+			compatible = "fsl,pfeng-emac";
+			#address-cells = <1>;
+			#size-cells = <0>;
+			status = "okay";
+			reg = <1>;
+			clocks = <&clks S32G274A_SCMI_CLK_PFE1_TX_SGMII>,
+				 <&clks S32G274A_SCMI_CLK_PFE1_TX_RGMII>,
+				 <&clks S32G274A_SCMI_CLK_PFE1_TX_RMII>,
+				 <&clks S32G274A_SCMI_CLK_PFE1_TX_MII>;
+			clock-names = "tx_sgmii", "tx_rgmii",
+				      "tx_rmii", "tx_mii";
+			phy-mode = "rgmii";
+
+			/* mdio */
+			pfe_mdio1: mdio@1 {
+				compatible = "fsl,pfeng-mdio";
+				#address-cells = <1>;
+				#size-cells = <0>;
+				reg = <0x1>;
+			};
+		};
+
+		/* PFE_EMAC_2 */
+		pfe_emac2: emac@2 {
+			compatible = "fsl,pfeng-emac";
+			#address-cells = <1>;
+			#size-cells = <0>;
+			status = "okay";
+			reg = <2>;
+			clocks = <&clks S32G274A_SCMI_CLK_PFE2_TX_SGMII>,
+				 <&clks S32G274A_SCMI_CLK_PFE2_TX_RGMII>,
+				 <&clks S32G274A_SCMI_CLK_PFE2_TX_RMII>,
+				 <&clks S32G274A_SCMI_CLK_PFE2_TX_MII>;
+			clock-names = "tx_sgmii", "tx_rgmii",
+				      "tx_rmii", "tx_mii";
+			phy-mode = "rgmii";
+
+			/* mdio */
+			pfe_mdio2: mdio@2 {
+				compatible = "fsl,pfeng-mdio";
+				#address-cells = <1>;
+				#size-cells = <0>;
+				reg = <0x2>;
 			};
 		};
+
+		/* Logical network interface 'pfe0' */
+		pfe_logif0: ethernet@0 {
+			compatible = "fsl,pfeng-logif";
+			#address-cells = <1>;
+			#size-cells = <0>;
+			status = "disabled";
+			local-mac-address = [ 00 04 9F BE EF 00 ];
+			fsl,pfeng-if-name = "pfe0";
+			fsl,pfeng-logif-mode = <0>;
+			fsl,pfeng-emac-link = <&pfe_emac0>;
+			fsl,pfeng-hif-channels = <&pfe_hif0>;
+		};
+
+		/* Logical network interface 'pfe1' */
+		pfe_logif1: ethernet@1 {
+			compatible = "fsl,pfeng-logif";
+			#address-cells = <1>;
+			#size-cells = <0>;
+			status = "disabled";
+			local-mac-address = [ 00 04 9F BE EF 01 ];
+			fsl,pfeng-if-name = "pfe1";
+			fsl,pfeng-logif-mode = <0>;
+			fsl,pfeng-emac-link = <&pfe_emac1>;
+			fsl,pfeng-hif-channels = <&pfe_hif1>;
+		};
+
+		/* Logical network interface 'pfe2' */
+		pfe_logif2: ethernet@2 {
+			compatible = "fsl,pfeng-logif";
+			#address-cells = <1>;
+			#size-cells = <0>;
+			status = "disabled";
+			local-mac-address = [ 00 04 9F BE EF 02 ];
+			fsl,pfeng-if-name = "pfe2";
+			fsl,pfeng-logif-mode = <0>;
+			fsl,pfeng-emac-link = <&pfe_emac2>;
+			fsl,pfeng-hif-channels = <&pfe_hif2>;
+		};
 	};
 };
diff --git a/sw/bpool/Makefile b/sw/bpool/Makefile
index 0d22cd5..e2708b9 100644
--- a/sw/bpool/Makefile
+++ b/sw/bpool/Makefile
@@ -1,5 +1,5 @@
 # =========================================================================
-#  Copyright 2018-2020 NXP
+#  Copyright 2018-2021 NXP
 #
 #  SPDX-License-Identifier: GPL-2.0
 #
@@ -41,7 +41,7 @@ LIBS_profile += -lprofilingS
 CCFLAGS_pfe += -D$(PFE_CFG_TARGET_ARCH_DEF) -D$(PFE_CFG_TARGET_OS_DEF) -D$(PFE_CFG_BUILD_PROFILE_DEF)
 
 #Generic compiler flags (which include build type flags)
-CCFLAGS_all += -Wall -fmessage-length=0
+CCFLAGS_all += -Wall -fmessage-length=0 -fvisibility=hidden
 CCFLAGS_all += $(CCFLAGS_$(BUILD_PROFILE))
 CCFLAGS_all += $(CCFLAGS_pfe)
 #Shared library has to be compiled with -fPIC
@@ -97,6 +97,7 @@ rebuild: clean all
 ccflags-y += $(INCLUDES)
 ccflags-y += $(CCFLAGS_pfe)
 ccflags-y += $(GLOBAL_CCFLAGS)
+ccflags-y += -Werror
 
 bpool-y := src/bpool.o
 #bpool-y := $(OBJS)
diff --git a/sw/bpool/public/bpool.h b/sw/bpool/public/bpool.h
index c912dbe..a0eb65e 100644
--- a/sw/bpool/public/bpool.h
+++ b/sw/bpool/public/bpool.h
@@ -1,5 +1,5 @@
 /* =========================================================================
- *  Copyright 2017-2020 NXP
+ *  Copyright 2017-2021 NXP
  *
  *  SPDX-License-Identifier: GPL-2.0
  *
@@ -128,7 +128,7 @@ __attribute__((pure, hot)) static inline int32_t bpool_get_buf_len(const bpool_t
  * @param[in]	va Virtual address of a buffer from a pool
  * @retval		Pointer to bd of the buffer if found or NULL when not found
  */
-__attribute__((pure, hot)) static inline bpool_rx_buf_t *bpool_get_bd(const bpool_t *const pool, void *const va)
+__attribute__((pure, hot)) static inline bpool_rx_buf_t *bpool_get_bd(const bpool_t *const pool, const void *const va)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == pool))
@@ -171,7 +171,7 @@ __attribute__((pure, hot)) static inline bpool_rx_buf_t *bpool_get_bd(const bpoo
  * @param[in]	va Virtual address of a buffer from the pool which storage will be returned
  * @return		Pointer to the storage (virtual) or NULL if failed
  */
-__attribute__((pure, hot)) static inline uint32_t * bpool_get_unsigned_storage(const bpool_t *const pool, void *va)
+__attribute__((pure, hot)) static inline uint32_t * bpool_get_unsigned_storage(const bpool_t *const pool, const void *va)
 {
 	bpool_rx_buf_t *bd;
 
@@ -206,7 +206,7 @@ __attribute__((pure, hot)) static inline uint32_t * bpool_get_unsigned_storage(c
  * @param[in]	va Virtual address of a buffer from the pool which storage will be returned
  * @return		Pointer to the storage (virtual) or NULL if failed
  */
-__attribute__((pure, hot)) static inline bpool_complex_storage_t * bpool_get_complex_storage(const bpool_t *const pool, void *va)
+__attribute__((pure, hot)) static inline bpool_complex_storage_t * bpool_get_complex_storage(const bpool_t *const pool, const void *va)
 {
 	bpool_rx_buf_t *bd;
 
@@ -241,7 +241,7 @@ __attribute__((pure, hot)) static inline bpool_complex_storage_t * bpool_get_com
  * @param[in]	va Virtual address of a buffer from the pool which storage will be returned
  * @return		Pointer to the storage (virtual) or NULL if failed
  */
-__attribute__((pure, hot)) static inline void * bpool_get_meta_storage(const bpool_t *const pool, void *va)
+__attribute__((pure, hot)) static inline void * bpool_get_meta_storage(const bpool_t *const pool, const void *va)
 {
 	bpool_rx_buf_t *bd;
 
@@ -339,9 +339,9 @@ __attribute__((pure, hot)) static inline void * bpool_get_pa(const bpool_t *cons
 
 bpool_t * bpool_create(uint32_t depth, uint32_t buf_size, uint32_t align, bool_t cached) __attribute__((cold));
 void * bpool_get(bpool_t *pool) __attribute__((hot));
-void bpool_put(bpool_t *pool, void *va) __attribute__((hot));
+void bpool_put(bpool_t *pool, const void *va) __attribute__((hot));
 errno_t bpool_get_fill_level(bpool_t *pool, uint32_t *fill_level) __attribute__((hot));
-uint32_t bpool_get_depth(bpool_t *pool) __attribute__((pure, hot));
+uint32_t bpool_get_depth(const bpool_t *pool) __attribute__((pure, hot));
 errno_t bpool_destroy(bpool_t * pool) __attribute__((cold));
 
 #endif /* SRC_BPOOL_H_ */
diff --git a/sw/bpool/src/bpool.c b/sw/bpool/src/bpool.c
index a39fa53..3c9c8dc 100644
--- a/sw/bpool/src/bpool.c
+++ b/sw/bpool/src/bpool.c
@@ -22,6 +22,70 @@
 
 #define is_power_of_2(n) ((n) && !((n) & ((n) - 1U)))
 
+static errno_t bpool_create_check_buffer_size_and_align(uint32_t buf_size, uint32_t align);
+static uint32_t bpool_create_calculate_aligned_buf_size(uint32_t buf_size);
+
+static errno_t bpool_create_check_buffer_size_and_align(uint32_t buf_size, uint32_t align)
+{
+	errno_t ret;
+
+	if (align < HAL_CACHE_LINE_SIZE)
+	{
+		NXP_LOG_ERROR("Minimum buffer pool alignment is %d bytes\n", HAL_CACHE_LINE_SIZE);
+		ret = EINVAL;
+	}
+	else if (FALSE == is_power_of_2(align))
+	{
+		NXP_LOG_ERROR("Buffer pool alignment must be power of 2\n");
+		ret = EINVAL;
+	}
+	else if ((buf_size < 256U) || (buf_size > 4096U))
+	{
+		NXP_LOG_ERROR("Buffer size must be more than 256 and less than 4096 bytes\n");
+		ret = EINVAL;
+	}
+	else if (FALSE == is_power_of_2(buf_size))
+	{
+		NXP_LOG_ERROR("Buffer size must be power of 2\n");
+		ret = EINVAL;
+	}
+	else
+	{
+		ret = EOK;
+	}
+
+	return ret;
+}
+
+static uint32_t bpool_create_calculate_aligned_buf_size(uint32_t buf_size)
+{
+	uint32_t aligned_buf_size;
+
+	if (buf_size > 2048U)
+	{
+		/*	Maximal allowed size */
+		aligned_buf_size = 4096U;
+	}
+	else if(buf_size > 1024U)
+	{
+		aligned_buf_size = 2048U;
+	}
+	else if(buf_size > 512U)
+	{
+		aligned_buf_size = 1024U;
+	}
+	else if(buf_size > 256U)
+	{
+		aligned_buf_size = 512U;
+	}
+	else
+	{
+		aligned_buf_size = 256U;
+	}
+
+	return aligned_buf_size;
+}
+
 /**
  * @brief		Destroy pool and release all allocated memory
  * @param[in]	pool The bpool instance
@@ -94,7 +158,7 @@ __attribute__((hot)) errno_t bpool_get_fill_level(bpool_t *pool, uint32_t *fill_
  * @param[in]	pool The bpool instance
  * @return		Pool depth in number of entries
  */
-__attribute__((pure, hot)) uint32_t bpool_get_depth(bpool_t *pool)
+__attribute__((pure, hot)) uint32_t bpool_get_depth(const bpool_t *pool)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == pool))
@@ -115,7 +179,7 @@ __attribute__((pure, hot)) uint32_t bpool_get_depth(bpool_t *pool)
  */
 __attribute__((hot)) void * bpool_get(bpool_t *pool)
 {
-	bpool_rx_buf_t *curItem;
+	const bpool_rx_buf_t *curItem;
 
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == pool))
@@ -153,11 +217,8 @@ __attribute__((hot)) void * bpool_get(bpool_t *pool)
  * @param[in]	va Virtual address of the buffer to put
  * @note		Is reentrant
  */
-__attribute__((hot)) void bpool_put(bpool_t *pool, void *va)
+__attribute__((hot)) void bpool_put(bpool_t *pool, const void *va)
 {
-#if defined (PFE_CFG_GET_ALL_ERRORS)
-	errno_t ret;
-#endif /* PFE_CFG_GET_ALL_ERRORS */
 	bpool_rx_buf_t *curItem;
 
 #if defined(PFE_CFG_NULL_ARG_CHECK)
@@ -227,33 +288,15 @@ __attribute__((cold)) bpool_t * bpool_create(uint32_t depth, uint32_t buf_size,
 	uint32_t aligned_buf_size;
 	uint32_t real_buf_size;
 	addr_t bd_addr;
+	errno_t ret;
 
 	if ((sizeof(bpool_rx_buf_t) % HAL_CACHE_LINE_SIZE) != 0U)
 	{
 		NXP_LOG_DEBUG("Sub-optimal structure size: buffer\n");
 	}
 
-	if (align < HAL_CACHE_LINE_SIZE)
-	{
-		NXP_LOG_ERROR("Minimum buffer pool alignment is %d bytes\n", HAL_CACHE_LINE_SIZE);
-		return NULL;
-	}
-
-	if (FALSE == is_power_of_2(align))
-	{
-		NXP_LOG_ERROR("Buffer pool alignment must be power of 2\n");
-		return NULL;
-	}
-
-	if ((buf_size < 256U) || (buf_size > 4096U))
+	if(EOK != bpool_create_check_buffer_size_and_align(buf_size, align))
 	{
-		NXP_LOG_ERROR("Buffer size must be more than 256 and less than 4096 bytes\n");
-		return NULL;
-	}
-
-	if (FALSE == is_power_of_2(buf_size))
-	{
-		NXP_LOG_ERROR("Buffer size must be power of 2\n");
 		return NULL;
 	}
 
@@ -266,34 +309,14 @@ __attribute__((cold)) bpool_t * bpool_create(uint32_t depth, uint32_t buf_size,
 		* 4096 byte buffers aligned to 4096
 		* Bigger buffers must not be used!!
 	*/
-	if (buf_size > 2048U)
-	{
-		/*	Maximal allowed size */
-		aligned_buf_size = 4096U;
-	}
-	else if(buf_size > 1024U)
-	{
-		aligned_buf_size = 2048U;
-	}
-	else if(buf_size > 512U)
-	{
-		aligned_buf_size = 1024U;
-	}
-	else if(buf_size > 256U)
-	{
-		aligned_buf_size = 512U;
-	}
-	else
-	{
-		aligned_buf_size = 256U;
-	}
+	aligned_buf_size = bpool_create_calculate_aligned_buf_size(buf_size);
 
 	/*	Beginning of each buffer is aligned to either 4096, 2048, 1024, 512, or 256
 		=> it is practical to use those values also as buffer sizes. */
 
 	if (0U != (aligned_buf_size % align))
 	{
-		NXP_LOG_ERROR("Failed to satisfy requested minimal alignment %u\n", align);
+		NXP_LOG_ERROR("Failed to satisfy requested minimal alignment %u\n", (uint_t)align);
 		return NULL;
 	}
 	real_buf_size = buf_size;
@@ -356,7 +379,7 @@ __attribute__((cold)) bpool_t * bpool_create(uint32_t depth, uint32_t buf_size,
 	/*	Check alignment of physical address */
 	if((addr_t)paddr != ((addr_t)paddr & ~((addr_t)aligned_buf_size-1U)))
 	{
-		NXP_LOG_ERROR("The physical address p0x%p is not properly aligned to buffer size %u\n", paddr, aligned_buf_size);
+		NXP_LOG_ERROR("The physical address p0x%p is not properly aligned to buffer size %u\n", paddr, (uint_t)aligned_buf_size);
 		goto release_block_and_fail;
 	}
 
@@ -401,7 +424,8 @@ __attribute__((cold)) bpool_t * bpool_create(uint32_t depth, uint32_t buf_size,
 		fifo_item->magicword = NXP_MAGICINT;
 #endif /* BPOOL_CFG_MEM_BUF_WATCH */
 
-		if (fifo_put((fifo_t *)(the_pool->free_fifo), fifo_item) != 0)
+		ret = fifo_put((fifo_t *)(the_pool->free_fifo), fifo_item);
+		if (EOK != ret)
 		{
 			NXP_LOG_ERROR("Could not add buffer into the pool\n");
 			goto release_block_and_fail;
@@ -413,9 +437,9 @@ __attribute__((cold)) bpool_t * bpool_create(uint32_t depth, uint32_t buf_size,
 		bd_addr   += sizeof(bpool_rx_buf_t);
 	}
 
-	NXP_LOG_DEBUG("Buffer pool (%d buffers, %d bytes each) created @ p0x%p/v0x%p\n",
-					the_pool->buffer_num,
-					aligned_buf_size,
+	NXP_LOG_DEBUG("Buffer pool (%u buffers, %u bytes each) created @ p0x%p/v0x%p\n",
+					(uint_t)the_pool->buffer_num,
+					(uint_t)aligned_buf_size,
 					(void *)the_pool->buffer_pa_start,
 					(void *)the_pool->buffer_va_start);
 
diff --git a/sw/build_env.mak b/sw/build_env.mak
index 639836a..90b4bb8 100644
--- a/sw/build_env.mak
+++ b/sw/build_env.mak
@@ -1,5 +1,5 @@
 # =========================================================================
-#  Copyright 2018-2020 NXP
+#  Copyright 2018-2021 NXP
 #
 #  SPDX-License-Identifier: GPL-2.0
 #
@@ -42,10 +42,12 @@ export PFE_CFG_PARANOID_IRQ?=0
 export PFE_CFG_DEBUG?=0
 #HIF driver mode. 0 - SC, 1 - MC
 export PFE_CFG_HIF_DRV_MODE?=0
+#Control the DMA buffer descriptor fetch. 0 - polling, 1 - triggering
+export PFE_CFG_HIF_USE_BD_TRIGGER?=0
 #Host interfaces to be used by particular driver interfaces (see pfe_ct_phy_if_id_t)
-export PFE_CFG_PFE0_IF=6
-export PFE_CFG_PFE1_IF=7
-export PFE_CFG_PFE2_IF=8
+export PFE_CFG_PFE0_IF?=6
+export PFE_CFG_PFE1_IF?=7
+export PFE_CFG_PFE2_IF?=8
 #Multi-instance driver support (includes IHC API). 1 - enable, 0 - disable.
 export PFE_CFG_MULTI_INSTANCE_SUPPORT?=0
 #Master/Slave variant switch
@@ -64,6 +66,8 @@ export PFE_CFG_CSUM_ALL_FRAMES?=0
 export PFE_CFG_HIF_SEQNUM_CHECK?=0
 #IP version
 export PFE_CFG_IP_VERSION?=PFE_CFG_IP_VERSION_NPU_7_14a
+#QNX only: When enabled cache maintenence is not performed on buffers.
+export PFE_CFG_BUFFERS_COHERENT?=1
 #Build of rtable feature. 1 - enable, 0 - disable
 export PFE_CFG_RTABLE_ENABLE?=1
 #Build of l2bridge feature. 1 - enable, 0 - disable
@@ -79,21 +83,27 @@ export PFE_CFG_IF_DB_WORKER?=0
 #Enable IEEE1588 timestamping support
 export PFE_CFG_IEEE1588_SUPPORT?=0
 #Input clock frequency for the IEEE1588 timestamping unit (EMAC)
-export PFE_CFG_IEEE1588_I_CLK_HZ=0
+export PFE_CFG_IEEE1588_I_CLK_HZ?=0
 #Output clock to be used to drive the IEEE1588 system time counter
-export PFE_CFG_IEEE1588_EMAC0_O_CLK_HZ=0
-export PFE_CFG_IEEE1588_EMAC1_O_CLK_HZ=0
-export PFE_CFG_IEEE1588_EMAC2_O_CLK_HZ=0
+export PFE_CFG_IEEE1588_EMAC0_O_CLK_HZ?=0
+export PFE_CFG_IEEE1588_EMAC1_O_CLK_HZ?=0
+export PFE_CFG_IEEE1588_EMAC2_O_CLK_HZ?=0
 #PFE system buffers location
-export PFE_CFG_SYS_MEM="pfe_ddr"
+export PFE_CFG_SYS_MEM?="pfe_ddr"
 #Buffer descriptors location
-export PFE_CFG_BD_MEM="pfe_ddr"
+export PFE_CFG_BD_MEM?="pfe_ddr"
 #RX buffers location
-export PFE_CFG_RX_MEM="pfe_ddr"
+export PFE_CFG_RX_MEM?="pfe_ddr"
 #Routing table location
-export PFE_CFG_RT_MEM="pfe_ddr"
+export PFE_CFG_RT_MEM?="pfe_ddr"
+#Routing table hash size (number of entries)
+export PFE_CFG_RT_HASH_SIZE?=256
+#Routing table collision size (number of entries)
+export PFE_CFG_RT_COLLISION_SIZE?=256
 #Enable firmware-based priority control for HIF traffic
 export PFE_CFG_HIF_PRIO_CTRL=1
+#Enable safe interrupt handling
+export PFE_CFG_SAFE_IRQ?=1
 
 ifeq ($(PFE_CFG_HIF_DRV_MODE),0)
   #Use multi-client HIF driver. Required when multiple logical interfaces need to
@@ -150,9 +160,9 @@ endif
 
 #Include HIF TX FIFO fix. This is SW workaround for HIF stall issue.
 ifeq ($(PFE_CFG_IP_VERSION),PFE_CFG_IP_VERSION_NPU_7_14)
-export PFE_CFG_HIF_TX_FIFO_FIX=1
+  export PFE_CFG_HIF_TX_FIFO_FIX=1
 else
-export PFE_CFG_HIF_TX_FIFO_FIX=0
+  export PFE_CFG_HIF_TX_FIFO_FIX=0
 endif
 #Set default verbosity level for sysfs. Valid values are from 1 to 10.
 export PFE_CFG_VERBOSITY_LEVEL?=4
@@ -203,6 +213,10 @@ ifneq ($(PFE_CFG_HIF_NOCPY_DIRECT),0)
     GLOBAL_CCFLAGS+=-DPFE_CFG_HIF_NOCPY_DIRECT
 endif
 
+ifneq ($(PFE_CFG_HIF_USE_BD_TRIGGER),0)
+    GLOBAL_CCFLAGS+= -DPFE_CFG_HIF_USE_BD_TRIGGER
+endif
+
 ifneq ($(PFE_CFG_CSUM_ALL_FRAMES),0)
     GLOBAL_CCFLAGS+=-DPFE_CFG_CSUM_ALL_FRAMES
 endif
@@ -217,6 +231,10 @@ else
 $(error IP version must be set)
 endif
 
+ifneq ($(PFE_CFG_BUFFERS_COHERENT),0)
+    GLOBAL_CCFLAGS+=-DPFE_CFG_BUFFERS_COHERENT
+endif
+
 ifneq ($(PFE_CFG_RTABLE_ENABLE),0)
     GLOBAL_CCFLAGS+= -DPFE_CFG_RTABLE_ENABLE
 endif
@@ -312,10 +330,22 @@ ifneq ($(PFE_CFG_RT_MEM),0)
   endif
 endif
 
+ifneq ($(PFE_CFG_RT_HASH_SIZE),0)
+    GLOBAL_CCFLAGS+=-DPFE_CFG_RT_HASH_SIZE=$(PFE_CFG_RT_HASH_SIZE)
+endif
+
+ifneq ($(PFE_CFG_RT_COLLISION_SIZE),0)
+    GLOBAL_CCFLAGS+=-DPFE_CFG_RT_COLLISION_SIZE=$(PFE_CFG_RT_COLLISION_SIZE)
+endif
+
 ifneq ($(PFE_CFG_HIF_PRIO_CTRL),0)
     GLOBAL_CCFLAGS+=-DPFE_CFG_HIF_PRIO_CTRL
 endif
 
+ifneq ($(PFE_CFG_SAFE_IRQ),0)
+    GLOBAL_CCFLAGS+=-DPFE_CFG_SAFE_IRQ
+endif
+
 # This variable will be propagated to every Makefile in the project
 export GLOBAL_CCFLAGS;
 
diff --git a/sw/common/Makefile b/sw/common/Makefile
index 4551544..aef3458 100644
--- a/sw/common/Makefile
+++ b/sw/common/Makefile
@@ -1,5 +1,5 @@
 # =========================================================================
-#  Copyright 2018-2020 NXP
+#  Copyright 2018-2021 NXP
 #
 #  SPDX-License-Identifier: GPL-2.0
 #
@@ -38,7 +38,7 @@ LIBS_profile += -lprofilingS
 CCFLAGS_pfe += -D$(PFE_CFG_TARGET_ARCH_DEF) -D$(PFE_CFG_TARGET_OS_DEF) -D$(PFE_CFG_BUILD_PROFILE_DEF)
 
 #Generic compiler flags (which include build type flags)
-CCFLAGS_all += -Wall -fmessage-length=0
+CCFLAGS_all += -Wall -fmessage-length=0 -fvisibility=hidden
 CCFLAGS_all += $(CCFLAGS_$(BUILD_PROFILE))
 CCFLAGS_all += $(CCFLAGS_pfe)
 #Shared library has to be compiled with -fPIC
@@ -93,6 +93,7 @@ rebuild: clean all
 ccflags-y += $(INCLUDES)
 ccflags-y += $(CCFLAGS_pfe)
 ccflags-y += $(GLOBAL_CCFLAGS)
+ccflags-y += -Werror
 
 # note: common.o is not build
 blalloc-y := src/blalloc.o
diff --git a/sw/common/public/blalloc.h b/sw/common/public/blalloc.h
index 2fab5e2..e497ac7 100644
--- a/sw/common/public/blalloc.h
+++ b/sw/common/public/blalloc.h
@@ -1,5 +1,5 @@
 /* =========================================================================
- *  Copyright 2019-2020 NXP
+ *  Copyright 2019-2021 NXP
  *
  *  SPDX-License-Identifier: GPL-2.0
  *
@@ -28,7 +28,7 @@ typedef enum
 /**
  * @brief      Block allocator context representation
  */
-typedef struct blalloc_context
+typedef struct
 {
 	size_t size;      /* Size */
 	size_t chunk_size;/* Size of a memory chunk is 2^this_value */
@@ -63,7 +63,7 @@ void blalloc_fini(blalloc_t *ctx);
 errno_t blalloc_alloc_offs(blalloc_t *ctx, size_t size, size_t align, addr_t *addr);
 void blalloc_free_offs_size(blalloc_t *ctx, addr_t offset, size_t size);
 void blalloc_free_offs(blalloc_t *ctx, addr_t offset);
-uint32_t blalloc_get_text_statistics(blalloc_t *ctx, char_t *buf, uint32_t buf_len, uint8_t verb_level);
+uint32_t blalloc_get_text_statistics(const blalloc_t *ctx, char_t *buf, uint32_t buf_len, uint8_t verb_level);
 
 #endif /* SRC_BLALLOC_H_ */
 
diff --git a/sw/common/public/ct_assert.h b/sw/common/public/ct_assert.h
new file mode 100644
index 0000000..dfbf20c
--- /dev/null
+++ b/sw/common/public/ct_assert.h
@@ -0,0 +1,27 @@
+/*
+ * Original code: https://www.pixelbeat.org/programming/gcc/static_assert.html
+ * Licensed under the GNU All-Permissive License.
+ *
+ * Modifications Copyright 2018-2021 NXP
+ *
+ */
+ 
+#ifndef CT_ASSERT_H
+#define CT_ASSERT_H
+
+#define STRINGIFY(x) #x
+#define TOSTRING(x) STRINGIFY(x)
+
+#define ASSERT_CONCAT_(a, b) a##b
+#define ASSERT_CONCAT(a, b) ASSERT_CONCAT_(a, b)
+
+#ifdef __ghs__ /* AAVB-2386 */
+	/* Dummy implementation with no check to avoid compile error */
+	#define ct_assert(e) enum { ASSERT_CONCAT(precompile_assert_, __COUNTER__) = 1 } 
+#else
+	#define ASSERT_CONCAT_INNER(a, b) a##b
+	#define ASSERT_CONCAT_OUTER(a, b) ASSERT_CONCAT_INNER(a, b)
+	#define ct_assert(e) enum { ASSERT_CONCAT_OUTER(precompile_assert_, __COUNTER__) = 1/(!!(e)) }
+#endif /* __ghs__ */
+
+#endif /* CT_ASSERT_H */
diff --git a/sw/common/public/linked_list.h b/sw/common/public/linked_list.h
index 6a8a20c..329c0b4 100644
--- a/sw/common/public/linked_list.h
+++ b/sw/common/public/linked_list.h
@@ -1,5 +1,5 @@
 /* =========================================================================
- *  Copyright 2017-2020 NXP
+ *  Copyright 2017-2021 NXP
  *
  *  SPDX-License-Identifier: GPL-2.0
  *
@@ -12,7 +12,7 @@
 * @brief   This structure shall be used to link structures of data.
 * @details Just put this anywhere into the structs which shall be linked.
 */
-typedef struct LLIST_Struct
+typedef struct  __attribute__((packed)) LLIST_Struct
 {
    struct LLIST_Struct *prNext;
    struct LLIST_Struct *prPrev;
diff --git a/sw/common/src/blalloc.c b/sw/common/src/blalloc.c
index d62171b..4bfc78c 100644
--- a/sw/common/src/blalloc.c
+++ b/sw/common/src/blalloc.c
@@ -1,5 +1,5 @@
 /* =========================================================================
- *  Copyright 2019-2020 NXP
+ *  Copyright 2019-2021 NXP
  *
  *  SPDX-License-Identifier: GPL-2.0
  *
@@ -191,7 +191,7 @@ blalloc_t *blalloc_create(size_t size, size_t chunk_size)
 	if(0U == (size >> chunk_size))
 	{   /* Memory not large enough to contain at least 1 chunk */
 		NXP_LOG_ERROR("Size of memory is less than a chunk\n");
-		goto size_error;
+		return NULL;
 	}
 
 	/* Allocate memory for internal structure + array of bytes which will have
@@ -201,7 +201,7 @@ blalloc_t *blalloc_create(size_t size, size_t chunk_size)
 	if(NULL == ctx)
 	{   /* Memory allocation failure */
 		NXP_LOG_ERROR("Failed to allocate memory\n");
-		goto alloc_error;
+		return NULL;
 	}
 
 	/* Clear the whole context */
@@ -216,18 +216,13 @@ blalloc_t *blalloc_create(size_t size, size_t chunk_size)
 
 	if(EOK != blalloc_init(ctx))
 	{
-		goto the_end;
+		oal_mm_free(ctx);
+		return NULL;
 	}
 
 	ctx->status = BL_DYNAMIC;
 
 	return ctx;
-
-the_end:
-	oal_mm_free(ctx);
-alloc_error:
-size_error:
-	return NULL;
 }
 
 /**
@@ -476,7 +471,7 @@ void blalloc_free_offs(blalloc_t *ctx, addr_t offset)
 * @param[in] verb_level Verbosity lever
 * @return Number of characters written into the buffer.
 */
-uint32_t blalloc_get_text_statistics(blalloc_t *ctx, char_t *buf, uint32_t buf_len, uint8_t verb_level)
+uint32_t blalloc_get_text_statistics(const blalloc_t *ctx, char_t *buf, uint32_t buf_len, uint8_t verb_level)
 {
 	uint_t i, j;               /* Counters */
 	uint_t prev = 0U;          /* Did the used chunk precede this chunk? 1 = yes */
diff --git a/sw/elf/Makefile b/sw/elf/Makefile
index d714df5..085c537 100644
--- a/sw/elf/Makefile
+++ b/sw/elf/Makefile
@@ -1,5 +1,5 @@
 # =========================================================================
-#  Copyright 2018-2020 NXP
+#  Copyright 2018-2021 NXP
 #
 #  SPDX-License-Identifier: GPL-2.0
 #
@@ -38,7 +38,7 @@ LIBS_profile += -lprofilingS
 CCFLAGS_pfe += -D$(PFE_CFG_TARGET_ARCH_DEF) -D$(PFE_CFG_TARGET_OS_DEF) -D$(PFE_CFG_BUILD_PROFILE_DEF)
 
 #Generic compiler flags (which include build type flags)
-CCFLAGS_all += -Wall -fmessage-length=0
+CCFLAGS_all += -Wall -fmessage-length=0 -fvisibility=hidden
 CCFLAGS_all += $(CCFLAGS_$(BUILD_PROFILE))
 CCFLAGS_all += $(CCFLAGS_pfe)
 #Shared library has to be compiled with -fPIC
@@ -93,6 +93,7 @@ rebuild: clean all
 ccflags-y += $(INCLUDES)
 ccflags-y += $(CCFLAGS_pfe)
 ccflags-y += $(GLOBAL_CCFLAGS)
+ccflags-y += -Werror
 
 elf-y := src/elf.o
 #elf-y := $(OBJS)
diff --git a/sw/elf/public/elf.h b/sw/elf/public/elf.h
index 18f0ed5..7033d34 100644
--- a/sw/elf/public/elf.h
+++ b/sw/elf/public/elf.h
@@ -61,12 +61,12 @@
 /*==================================================================================================
                                        DEFINES AND MACROS
 ==================================================================================================*/
-#define ELF_NIDENT      16U
-
+#define ELF_NIDENT                  16U
+#define ELF_NAMED_SECT_IDX_FLAG     0x80000000U
 /*==================================================================================================
                                              ENUMS
 ==================================================================================================*/
-enum Elf_Ident
+enum
 {
     EI_MAG0         = 0, /* 0x7F */
     EI_MAG1         = 1, /* 'E' */
@@ -81,7 +81,7 @@ enum Elf_Ident
 };
 
 /* any section that is of type SHT_NOBITS and has the attribute SHF_ALLOC should be allocated */
-enum ShT_Types
+enum
 {
     SHT_NULL      = 0U,   /* Null section */
     SHT_PROGBITS  = 1U,   /* Program information */
@@ -92,7 +92,7 @@ enum ShT_Types
     SHT_REL       = 9U,   /* Relocation (no addend) */
 };
 
-enum ShT_Attributes
+enum
 {
     SHF_WRITE = 0x1, /* Writable */
     SHF_ALLOC = 0x2, /* Occupies memory during execution */
@@ -133,7 +133,7 @@ typedef uint32_t Elf32_Addr;    /* Unsigned address */
 typedef uint64_t Elf64_Off;     /* Unsigned offset */
 typedef uint64_t Elf64_Addr;    /* Unsigned address */
 
-typedef struct
+typedef struct __attribute__((packed))
 {
     uint8_t     e_ident[ELF_NIDENT];
     uint16_t    e_type;
@@ -150,7 +150,7 @@ typedef struct
     uint16_t    e_shnum;
     uint16_t    e_shstrndx;
 } Elf32_Ehdr;
-typedef struct
+typedef struct __attribute__((packed))
 {
     uint8_t     e_ident[ELF_NIDENT];
     uint16_t    e_type;
@@ -168,7 +168,7 @@ typedef struct
     uint16_t    e_shstrndx;
 } Elf64_Ehdr;
 
-typedef struct
+typedef struct __attribute__((packed))
 {
     uint32_t   p_type;
     Elf32_Off  p_offset;
@@ -179,7 +179,7 @@ typedef struct
     uint32_t   p_flags;
     uint32_t   p_align;
 } Elf32_Phdr;
-typedef struct
+typedef struct __attribute__((packed))
 {
     uint32_t   p_type;
     uint32_t   p_flags;
@@ -191,7 +191,7 @@ typedef struct
     uint64_t   p_align;
 } Elf64_Phdr;
 
-typedef struct
+typedef struct __attribute__((packed))
 {
     uint32_t   sh_name;
     uint32_t   sh_type;
@@ -204,7 +204,7 @@ typedef struct
     uint32_t   sh_addralign;
     uint32_t   sh_entsize;
 } Elf32_Shdr;
-typedef struct
+typedef struct __attribute__((packed))
 {
     uint32_t   sh_name;
     uint32_t   sh_type;
@@ -251,7 +251,7 @@ extern void ELF_Close(ELF_File_t *pElfFile);
     extern bool_t ELF_ProgSectFindNext( ELF_File_t *pElfFile, uint32_t *pu32ProgIdx,
                                          uint64_t *pu64LoadVAddr, uint64_t *pu64LoadPAddr, uint64_t *pu64Length
                                        );
-    extern bool_t ELF_ProgSectLoad( ELF_File_t *pElfFile,
+    extern bool_t ELF_ProgSectLoad( const ELF_File_t *pElfFile,
                                      uint32_t u32ProgIdx, addr_t AccessAddr, addr_t AllocSize
                                    );
 #endif
@@ -260,13 +260,13 @@ extern void ELF_Close(ELF_File_t *pElfFile);
     extern bool_t ELF_SectFindName( const ELF_File_t *pElfFile, const char_t *szSectionName,
                                      uint32_t *pu32SectIdx, uint64_t *pu64LoadAddr, uint64_t *pu64Length
                                    );
-    extern bool_t ELF_SectLoad( ELF_File_t *pElfFile,
+    extern bool_t ELF_SectLoad( const ELF_File_t *pElfFile,
                                  uint32_t u32SectIdx, addr_t AccessAddr, addr_t AllocSize
                                );
 #endif
 
 #if TRUE == ELF_CFG_SECTION_PRINT_ENABLED
-    extern void ELF_PrintSections(ELF_File_t *pElfFile);
+    extern void ELF_PrintSections(const ELF_File_t *pElfFile);
 #endif
 
 /*==================================================================================================
@@ -277,7 +277,7 @@ extern void ELF_Close(ELF_File_t *pElfFile);
 * @param[in]    pElfFile Structure holding all informations about opened ELF file.
 * @return       The entry point address
 */
-static inline uint64_t ELF_GetEntryPoint(ELF_File_t *pElfFile)
+static inline uint64_t ELF_GetEntryPoint(const ELF_File_t *pElfFile)
 {
     uint64_t u64Addr;
     if(TRUE == pElfFile->bIs64Bit)
@@ -307,7 +307,7 @@ static inline void ELF_ProgSectSearchReset(ELF_File_t *pElfFile)
 * @retval       TRUE It is 64bit ELF
 * @retval       FALSE It is 32bit ELF
 */
-static inline bool_t ELF_Is64bit(ELF_File_t *pElfFile)
+static inline bool_t ELF_Is64bit(const ELF_File_t *pElfFile)
 {
     return (2U == pElfFile->Header.e_ident[EI_CLASS]) ? TRUE : FALSE;
 }
@@ -317,7 +317,7 @@ static inline bool_t ELF_Is64bit(ELF_File_t *pElfFile)
 * @retval       TRUE It is 32bit ELF
 * @retval       FALSE It is 64bit ELF
 */
-static inline bool_t ELF_Is32bit(ELF_File_t *pElfFile)
+static inline bool_t ELF_Is32bit(const ELF_File_t *pElfFile)
 {
     return (1U == pElfFile->Header.e_ident[EI_CLASS]) ? TRUE : FALSE;
 }
@@ -327,7 +327,7 @@ static inline bool_t ELF_Is32bit(ELF_File_t *pElfFile)
 * @retval       TRUE It is BIG endian ELF
 * @retval       FALSE It is LITTLE endian ELF
 */
-static inline bool_t ELF_IsBigEndian(ELF_File_t *pElfFile)
+static inline bool_t ELF_IsBigEndian(const ELF_File_t *pElfFile)
 {
     return (2U == pElfFile->Header.e_ident[EI_DATA]) ? TRUE : FALSE;
 }
@@ -337,7 +337,7 @@ static inline bool_t ELF_IsBigEndian(ELF_File_t *pElfFile)
 * @retval       TRUE It is LITTLE endian ELF
 * @retval       FALSE It is BIG endian ELF
 */
-static inline bool_t ELF_IsLittleEndian(ELF_File_t *pElfFile)
+static inline bool_t ELF_IsLittleEndian(const ELF_File_t *pElfFile)
 {
     return (1U == pElfFile->Header.e_ident[EI_DATA]) ? TRUE : FALSE;
 }
@@ -348,7 +348,7 @@ static inline bool_t ELF_IsLittleEndian(ELF_File_t *pElfFile)
 * @retval       TRUE ELF architecture matches given value.
 * @retval       FALSE ELF targets different architecture.
 */
-static inline bool_t ELF_IsArchitecture(ELF_File_t *pElfFile, ELF_Arch_t eArch)
+static inline bool_t ELF_IsArchitecture(const ELF_File_t *pElfFile, ELF_Arch_t eArch)
 {
     bool_t bRetVal;
     if(TRUE == pElfFile->bIs64Bit)
diff --git a/sw/elf/src/elf.c b/sw/elf/src/elf.c
index b154177..f3309c6 100644
--- a/sw/elf/src/elf.c
+++ b/sw/elf/src/elf.c
@@ -44,6 +44,8 @@
 #include "elf_cfg.h"
 #include "elf.h"
 
+#include "hal.h"
+
 /*==================================================================================================
                                       FILE VERSION CHECKS
 ==================================================================================================*/
@@ -54,7 +56,6 @@
 /*==================================================================================================
                                         LOCAL MACROS
 ==================================================================================================*/
-#define ELF_NAMED_SECT_IDX_FLAG 0x80000000U
 #define ELF64_HEADER_SIZE 64U
 #define ELF32_HEADER_SIZE 52U
 #define SHN_UNDEF       0U    /* Undefined/Not present */
@@ -79,7 +80,7 @@ typedef enum
     ELF_Endian_Big    = 2,
 } ELF_Endian_t;
 
-enum ELF_Type
+enum
 {
     ELF_Type_Relocatable = 1U,
     ELF_Type_Executable = 2U,
@@ -87,7 +88,7 @@ enum ELF_Type
     ELF_Type_Core = 4U,
 };
 
-enum PhT_Types
+enum
 {
     PT_NULL      = 0U,
     PT_LOAD      = 1U, /* Loadable segment */
@@ -104,17 +105,10 @@ enum PhT_Types
 /*==================================================================================================
                                        LOCAL CONSTANTS
 ==================================================================================================*/
-
-/*==================================================================================================
-                                       LOCAL VARIABLES
-==================================================================================================*/
-
-/*==================================================================================================
-                                       GLOBAL CONSTANTS
-==================================================================================================*/
 #if TRUE == ELF_CFG_SECTION_PRINT_ENABLED
-  #if TRUE == ELF_CFG_SECTION_TABLE_USED
-    const int8_t aacSTypes[17][9] =
+  #ifdef NXP_LOG_ENABLED /*  Debug message support */
+    #if TRUE == ELF_CFG_SECTION_TABLE_USED
+    static const int8_t aacSTypes[17][9] =
     {
         "NULL    ",
         "PROGBITS",
@@ -134,7 +128,7 @@ enum PhT_Types
         "HIUSER  ",
         "UNDEFINE",
     };
-    const struct shf_flags_strings
+    static const struct shf_flags_strings
     {
         uint32_t u32Flag;
         char_t   *szString;
@@ -155,10 +149,10 @@ enum PhT_Types
         {0x4000000U, "ORDERED"},
         {0x8000000U, "EXCLUDE"},
     };
-    const uint32_t u32ShT_Flags_Strings_Count = sizeof(ShT_Flags_Strings) / sizeof(struct shf_flags_strings);
-  #endif /* ELF_CFG_SECTION_TABLE_USED */
-  #if TRUE == ELF_CFG_PROGRAM_TABLE_USED
-    const int8_t aacPTypes[11][10] =
+    static const uint32_t u32ShT_Flags_Strings_Count = sizeof(ShT_Flags_Strings) / sizeof(struct shf_flags_strings);
+    #endif /* ELF_CFG_SECTION_TABLE_USED */
+    #if TRUE == ELF_CFG_PROGRAM_TABLE_USED
+    static const int8_t aacPTypes[11][10] =
     {
         "NULL     ",
         "LOAD     ",
@@ -172,9 +166,18 @@ enum PhT_Types
         "GNU_STACK",
         "UNDEFINED",
     };
-  #endif /* ELF_CFG_PROGRAM_TABLE_USED */
+    #endif /* ELF_CFG_PROGRAM_TABLE_USED */
+  #endif /* NXP_LOG_ENABLED */
 #endif /* ELF_CFG_SECTION_PRINT_ENABLED */
 
+/*==================================================================================================
+                                       LOCAL VARIABLES
+==================================================================================================*/
+
+/*==================================================================================================
+                                       GLOBAL CONSTANTS
+==================================================================================================*/
+
 /*==================================================================================================
                                        GLOBAL VARIABLES
 ==================================================================================================*/
@@ -183,19 +186,20 @@ enum PhT_Types
                                    LOCAL FUNCTION PROTOTYPES
 ==================================================================================================*/
 /* GENERAL */
-static bool_t LoadFileData(ELF_File_t *pElfFile, uint32_t u32Offset, uint32_t u32Size, void *pvDestMem);
+static bool_t LoadFileData(const ELF_File_t *pElfFile, uint32_t u32Offset, uint32_t u32Size, void *pvDestMem);
 static inline ELF_Endian_t GetLocalEndian(void);
 /* ELF64 */
 #if TRUE == ELF_CFG_ELF64_SUPPORTED
     static bool_t ELF64_LoadTables(ELF_File_t *pElfFile, bool_t bIsCrosEndian);
     static void ELF64_HeaderSwitchEndianness(Elf64_Ehdr *prElf64Header);
+    static bool_t ELF64_Load(bool_t bIsCrosEndian,ELF_File_t *pElfFile,uint32_t *u32NamesSectionOffset,uint32_t *u32NamesSectionSize);
     static void ELF64_ProgTabSwitchEndianness(Elf64_Phdr *arProgHead64, uint32_t u32NumItems);
     static void ELF64_SectTabSwitchEndianness(Elf64_Shdr *arSectHead64, uint32_t u32NumItems);
     #if TRUE == ELF_CFG_PROGRAM_TABLE_USED
         static bool_t ELF64_ProgSectFindNext( ELF_File_t *pElfFile, uint32_t *pu32ProgIdx,
                                                uint64_t *pu64LoadVAddr, uint64_t *pu64LoadPAddr, uint64_t *pu64Length
                                              );
-        static bool_t ELF64_ProgSectLoad( ELF_File_t *pElfFile,
+        static bool_t ELF64_ProgSectLoad( const ELF_File_t *pElfFile,
                                            uint32_t u32ProgIdx, addr_t AccessAddr, addr_t AllocSize
                                          );
     #endif
@@ -203,25 +207,26 @@ static inline ELF_Endian_t GetLocalEndian(void);
         static bool_t ELF64_SectFindName( const ELF_File_t *pElfFile, const char_t *szSectionName,
                                            uint32_t *pu32SectIdx, uint64_t *pu64LoadAddr, uint64_t *pu64Length
                                          );
-        static bool_t ELF64_SectLoad( ELF_File_t *pElfFile,
+        static bool_t ELF64_SectLoad( const ELF_File_t *pElfFile,
                                        uint32_t u32SectIdx, addr_t AccessAddr, addr_t AllocSize
                                      );
     #endif
     #if TRUE == ELF_CFG_SECTION_PRINT_ENABLED
-        static void ELF64_PrintSections(ELF_File_t *pElfFile);
+        static void ELF64_PrintSections(const ELF_File_t *pElfFile);
     #endif /* ELF_CFG_SECTION_PRINT_ENABLED */
 #endif /* ELF_CFG_ELF64_SUPPORTED */
 /* ELF32 */
 #if TRUE == ELF_CFG_ELF32_SUPPORTED
     static bool_t ELF32_LoadTables(ELF_File_t *pElfFile, bool_t bIsCrosEndian);
     static void ELF32_HeaderSwitchEndianness(Elf32_Ehdr *prElf32Header);
+    static bool_t ELF32_Load(bool_t bIsCrosEndian,ELF_File_t *pElfFile,uint32_t *u32NamesSectionOffset,uint32_t *u32NamesSectionSize);
     static void ELF32_ProgTabSwitchEndianness(Elf32_Phdr *arProgHead32, uint32_t u32NumItems);
     static void ELF32_SectTabSwitchEndianness(Elf32_Shdr *arSectHead32, uint32_t u32NumItems);
     #if TRUE == ELF_CFG_PROGRAM_TABLE_USED
         static bool_t ELF32_ProgSectFindNext( ELF_File_t *pElfFile, uint32_t *pu32ProgIdx,
                                                uint64_t *pu64LoadVAddr, uint64_t *pu64LoadPAddr, uint64_t *pu64Length
                                              );
-        static bool_t ELF32_ProgSectLoad( ELF_File_t *pElfFile,
+        static bool_t ELF32_ProgSectLoad( const ELF_File_t *pElfFile,
                                            uint32_t u32ProgIdx, addr_t AccessAddr, addr_t AllocSize
                                          );
     #endif
@@ -229,16 +234,18 @@ static inline ELF_Endian_t GetLocalEndian(void);
         static bool_t ELF32_SectFindName( const ELF_File_t *pElfFile, const char_t *szSectionName,
                                            uint32_t *pu32SectIdx, uint64_t *pu64LoadAddr, uint64_t *pu64Length
                                          );
-        static bool_t ELF32_SectLoad( ELF_File_t *pElfFile,
+        static bool_t ELF32_SectLoad( const ELF_File_t *pElfFile,
                                        uint32_t u32SectIdx, addr_t AccessAddr, addr_t AllocSize
                                      );
     #endif
     #if TRUE == ELF_CFG_SECTION_PRINT_ENABLED
-        static void ELF32_PrintSections(ELF_File_t *pElfFile);
+        static void ELF32_PrintSections(const ELF_File_t *pElfFile);
     #endif /* ELF_CFG_SECTION_PRINT_ENABLED */
 #endif /* ELF_CFG_ELF32_SUPPORTED */
 
 static uint32_t buf_read(void *src_buf, uint32_t u32FileSize, uint32_t u32Offset, void *dst_buf, uint32_t nbytes);
+static void ELF_FreePtr(ELF_File_t *pElfFile);
+static bool_t ELF_LoadTables(ELF_File_t *pElfFile, uint32_t *u32NamesSectionOffset, uint32_t *u32NamesSectionSize);
 
 /*==================================================================================================
                                        LOCAL FUNCTIONS
@@ -254,16 +261,16 @@ static uint32_t buf_read(void *src_buf, uint32_t u32FileSize, uint32_t u32Offset
 * @retval       FALSE Failed
 */
 /* Purpose of this function is to implement all the operations and checks only once */
-static bool_t LoadFileData(ELF_File_t *pElfFile, uint32_t u32Offset, uint32_t u32Size, void *pvDestMem)
+static bool_t LoadFileData(const ELF_File_t *pElfFile, uint32_t u32Offset, uint32_t u32Size, void *pvDestMem)
 {
     bool_t bSuccess = FALSE;
 
 #if defined(PFE_CFG_NULL_ARG_CHECK)
-	if (unlikely((NULL == pElfFile) || (NULL == pvDestMem)))
-	{
-		NXP_LOG_ERROR("NULL argument received\n");
-		return FALSE;
-	}
+    if (unlikely((NULL == pElfFile) || (NULL == pvDestMem)))
+    {
+        NXP_LOG_ERROR("NULL argument received\n");
+        return FALSE;
+    }
 #endif /* PFE_CFG_NULL_ARG_CHECK */
 
     /* Does it fit to file? */
@@ -315,11 +322,11 @@ static bool_t ELF32_LoadTables(ELF_File_t *pElfFile, bool_t bIsCrosEndian)
     bool_t bSectStatus = FALSE;
 
 #if defined(PFE_CFG_NULL_ARG_CHECK)
-	if (unlikely(NULL == pElfFile))
-	{
-		NXP_LOG_ERROR("NULL argument received\n");
-		return FALSE;
-	}
+    if (unlikely(NULL == pElfFile))
+    {
+        NXP_LOG_ERROR("NULL argument received\n");
+        return FALSE;
+    }
 #endif /* PFE_CFG_NULL_ARG_CHECK */
 
   #if TRUE == ELF_CFG_PROGRAM_TABLE_USED
@@ -330,9 +337,8 @@ static bool_t ELF32_LoadTables(ELF_File_t *pElfFile, bool_t bIsCrosEndian)
     {
         NXP_LOG_ERROR("ELF32_LoadTables: Unexpected progam header entry size\n");
     }
-
     /* Check the size */
-    if ((pElfFile->Header.r32.e_phoff + ((uint32_t)pElfFile->Header.r32.e_phentsize * (uint32_t)pElfFile->Header.r32.e_phnum)) > pElfFile->u32FileSize)
+    else if ((pElfFile->Header.r32.e_phoff + ((uint32_t)pElfFile->Header.r32.e_phentsize * (uint32_t)pElfFile->Header.r32.e_phnum)) > pElfFile->u32FileSize)
     {
         NXP_LOG_ERROR("ELF32_LoadTables: Requested data block exceeds size of the file\n");
         NXP_LOG_INFO("\n");
@@ -365,6 +371,7 @@ static bool_t ELF32_LoadTables(ELF_File_t *pElfFile, bool_t bIsCrosEndian)
     {
         NXP_LOG_ERROR("ELF32_LoadTables: Unexpected section header entry size\n");
     }
+    /* Check the size */
     else if ((pElfFile->Header.r32.e_shoff + ((uint32_t)pElfFile->Header.r32.e_shentsize * (uint32_t)pElfFile->Header.r32.e_shnum)) > pElfFile->u32FileSize) 
     {
         NXP_LOG_ERROR("ELF32_LoadTables: Requested data block exceeds size of the file\n");
@@ -390,11 +397,11 @@ static bool_t ELF32_LoadTables(ELF_File_t *pElfFile, bool_t bIsCrosEndian)
 static void ELF32_HeaderSwitchEndianness(Elf32_Ehdr *prElf32Header)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
-	if (unlikely(NULL == prElf32Header))
-	{
-		NXP_LOG_ERROR("NULL argument received\n");
-		return;
-	}
+    if (unlikely(NULL == prElf32Header))
+    {
+        NXP_LOG_ERROR("NULL argument received\n");
+        return;
+    }
 #endif /* PFE_CFG_NULL_ARG_CHECK */
 
     prElf32Header->e_type       = ENDIAN_SW_2B(prElf32Header->e_type);
@@ -412,17 +419,59 @@ static void ELF32_HeaderSwitchEndianness(Elf32_Ehdr *prElf32Header)
     prElf32Header->e_shstrndx   = ENDIAN_SW_2B(prElf32Header->e_shstrndx);
 }
 
+static bool_t ELF32_Load(bool_t bIsCrosEndian,ELF_File_t *pElfFile,uint32_t *u32NamesSectionOffset,uint32_t *u32NamesSectionSize)
+{
+    bool_t    bRetVal = FALSE;
+
+    if (bIsCrosEndian)
+    {
+        ELF32_HeaderSwitchEndianness(&(pElfFile->Header.r32));
+    }
+    if ((uint16_t)ELF_Type_Executable != pElfFile->Header.r32.e_type)
+    {
+        NXP_LOG_ERROR("ELF_Open: Only executable ELFs are supported\n");
+    }
+    else if (FALSE == ELF32_LoadTables(pElfFile, bIsCrosEndian))
+    {
+        NXP_LOG_ERROR("ELF_Open: Failed to load tables\n");
+    }
+    /* Endianness is now solved in all tables */
+#if TRUE == ELF_CFG_SECTION_TABLE_USED
+    /* Look for section names section */
+    else if ((pElfFile->Header.r32.e_shstrndx == SHN_UNDEF)
+          || (pElfFile->Header.r32.e_shstrndx >= pElfFile->Header.r32.e_shnum)
+          || (0U == pElfFile->arSectHead32[pElfFile->Header.r32.e_shstrndx].sh_size)
+           )
+    {
+        NXP_LOG_ERROR("ELF_Open: Section names not found\n");
+    }
+    else
+    {
+        *u32NamesSectionOffset = pElfFile->arSectHead32[pElfFile->Header.r32.e_shstrndx].sh_offset;
+        *u32NamesSectionSize = pElfFile->arSectHead32[pElfFile->Header.r32.e_shstrndx].sh_size;
+        bRetVal = TRUE;
+    }
+#else  /* ELF_CFG_SECTION_TABLE_USED */
+    else
+    {
+        bRetVal = TRUE;
+    }
+#endif /* ELF_CFG_SECTION_TABLE_USED */
+
+    return bRetVal;
+}
+
 /*================================================================================================*/
 static void ELF32_ProgTabSwitchEndianness(Elf32_Phdr *arProgHead32, uint32_t u32NumItems)
 {
     uint32_t u32Idx;
 
 #if defined(PFE_CFG_NULL_ARG_CHECK)
-	if (unlikely(NULL == arProgHead32))
-	{
-		NXP_LOG_ERROR("NULL argument received\n");
-		return;
-	}
+    if (unlikely(NULL == arProgHead32))
+    {
+        NXP_LOG_ERROR("NULL argument received\n");
+        return;
+    }
 #endif /* PFE_CFG_NULL_ARG_CHECK */
 
     for(u32Idx=0U; u32Idx<u32NumItems; u32Idx++)
@@ -444,11 +493,11 @@ static void ELF32_SectTabSwitchEndianness(Elf32_Shdr *arSectHead32, uint32_t u32
     uint32_t u32Idx;
 
 #if defined(PFE_CFG_NULL_ARG_CHECK)
-	if (unlikely(NULL == arSectHead32))
-	{
-		NXP_LOG_ERROR("NULL argument received\n");
-		return;
-	}
+    if (unlikely(NULL == arSectHead32))
+    {
+        NXP_LOG_ERROR("NULL argument received\n");
+        return;
+    }
 #endif /* PFE_CFG_NULL_ARG_CHECK */
 
     for(u32Idx=0U; u32Idx<u32NumItems; u32Idx++)
@@ -522,7 +571,7 @@ static bool_t ELF32_ProgSectFindNext( ELF_File_t *pElfFile, uint32_t *pu32ProgId
 }
 
 /*================================================================================================*/
-static bool_t ELF32_ProgSectLoad(ELF_File_t *pElfFile, uint32_t u32ProgIdx,
+static bool_t ELF32_ProgSectLoad(const ELF_File_t *pElfFile, uint32_t u32ProgIdx,
                                    addr_t AccessAddr, addr_t AllocSize
                                  )
 {
@@ -538,7 +587,7 @@ static bool_t ELF32_ProgSectLoad(ELF_File_t *pElfFile, uint32_t u32ProgIdx,
 #endif /* PFE_CFG_NULL_ARG_CHECK */
     if (u32ProgIdx >= pElfFile->Header.r32.e_phnum)
     {
-        NXP_LOG_ERROR("ELF32_ProgSectLoad: Invalid program index: %u\n", u32ProgIdx);
+        NXP_LOG_ERROR("ELF32_ProgSectLoad: Invalid program index: %u\n", (uint_t)u32ProgIdx);
     }
     else if ((uint32_t)PT_LOAD != pElfFile->arProgHead32[u32ProgIdx].p_type)
     {
@@ -646,7 +695,7 @@ static bool_t ELF32_SectFindName( const ELF_File_t *pElfFile, const char_t *szSe
 }
 
 /*================================================================================================*/
-static bool_t ELF32_SectLoad(ELF_File_t *pElfFile, uint32_t u32SectIdx, addr_t AccessAddr, addr_t AllocSize)
+static bool_t ELF32_SectLoad(const ELF_File_t *pElfFile, uint32_t u32SectIdx, addr_t AccessAddr, addr_t AllocSize)
 {
     bool_t bSuccess = FALSE;
 
@@ -660,7 +709,7 @@ static bool_t ELF32_SectLoad(ELF_File_t *pElfFile, uint32_t u32SectIdx, addr_t A
 #endif /* PFE_CFG_NULL_ARG_CHECK */
     if (u32SectIdx >= pElfFile->Header.r32.e_shnum)
     {
-        NXP_LOG_ERROR("ELF32_SectLoad: Invalid section index: %u\n", u32SectIdx);
+        NXP_LOG_ERROR("ELF32_SectLoad: Invalid section index: %u\n", (uint_t)u32SectIdx);
     }
     else if (AllocSize < pElfFile->arSectHead32[u32SectIdx].sh_size)
     {
@@ -697,7 +746,7 @@ static bool_t ELF32_SectLoad(ELF_File_t *pElfFile, uint32_t u32SectIdx, addr_t A
   #if TRUE == ELF_CFG_SECTION_PRINT_ENABLED
 
 /*================================================================================================*/
-static void ELF32_PrintSections(ELF_File_t *pElfFile)
+static void ELF32_PrintSections(const ELF_File_t *pElfFile)
 {
 #ifdef NXP_LOG_ENABLED /*  Debug message support */
     uint32_t SectIdx;
@@ -737,9 +786,9 @@ static void ELF32_PrintSections(ELF_File_t *pElfFile)
             NXP_LOG_INFO("%16s", pElfFile->acSectNames + pElfFile->arSectHead32[SectIdx].sh_name);
             NXP_LOG_INFO("%12s    0x%08x    0x%08x    0x%08x    ",
                         aacSTypes[u32Type],
-                        pElfFile->arSectHead32[SectIdx].sh_offset,
-                        pElfFile->arSectHead32[SectIdx].sh_size,
-                        pElfFile->arSectHead32[SectIdx].sh_addr
+                        (uint_t)pElfFile->arSectHead32[SectIdx].sh_offset,
+                        (uint_t)pElfFile->arSectHead32[SectIdx].sh_size,
+                        (uint_t)pElfFile->arSectHead32[SectIdx].sh_addr
                       );
             /* Now print flags on separate line: */
             for (u32FlagIdx = 0U; u32FlagIdx<u32ShT_Flags_Strings_Count; u32FlagIdx++)
@@ -770,14 +819,14 @@ static void ELF32_PrintSections(ELF_File_t *pElfFile)
             }
 
             /* Print program header data */
-            NXP_LOG_INFO("% 3d %s   0x%08x         0x%08x         0x%08x         0x%08x         0x%08x",
-                        ProgIdx,
+            NXP_LOG_INFO("%3u %s   0x%08x         0x%08x         0x%08x         0x%08x         0x%08x",
+                        (uint_t)ProgIdx,
                         aacPTypes[u32Type],
-                        pElfFile->arProgHead32[ProgIdx].p_offset,
-                        pElfFile->arProgHead32[ProgIdx].p_filesz,
-                        pElfFile->arProgHead32[ProgIdx].p_vaddr,
-                        pElfFile->arProgHead32[ProgIdx].p_paddr,
-                        pElfFile->arProgHead32[ProgIdx].p_memsz
+                        (uint_t)pElfFile->arProgHead32[ProgIdx].p_offset,
+                        (uint_t)pElfFile->arProgHead32[ProgIdx].p_filesz,
+                        (uint_t)pElfFile->arProgHead32[ProgIdx].p_vaddr,
+                        (uint_t)pElfFile->arProgHead32[ProgIdx].p_paddr,
+                        (uint_t)pElfFile->arProgHead32[ProgIdx].p_memsz
                       );
             NXP_LOG_INFO("\n");
         }
@@ -801,11 +850,11 @@ static bool_t ELF64_LoadTables(ELF_File_t *pElfFile, bool_t bIsCrosEndian)
     bool_t bSectStatus = FALSE;
 
 #if defined(PFE_CFG_NULL_ARG_CHECK)
-	if (unlikely(NULL == pElfFile))
-	{
-		NXP_LOG_ERROR("NULL argument received\n");
-		return FALSE;
-	}
+    if (unlikely(NULL == pElfFile))
+    {
+        NXP_LOG_ERROR("NULL argument received\n");
+        return FALSE;
+    }
 #endif /* PFE_CFG_NULL_ARG_CHECK */
 
   #if TRUE == ELF_CFG_PROGRAM_TABLE_USED
@@ -868,11 +917,11 @@ static bool_t ELF64_LoadTables(ELF_File_t *pElfFile, bool_t bIsCrosEndian)
 static void ELF64_HeaderSwitchEndianness(Elf64_Ehdr *prElf64Header)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
-	if (unlikely(NULL == prElf64Header))
-	{
-		NXP_LOG_ERROR("NULL argument received\n");
-		return;
-	}
+    if (unlikely(NULL == prElf64Header))
+    {
+        NXP_LOG_ERROR("NULL argument received\n");
+        return;
+    }
 #endif /* PFE_CFG_NULL_ARG_CHECK */
 
     prElf64Header->e_type       = ENDIAN_SW_2B(prElf64Header->e_type);
@@ -890,17 +939,59 @@ static void ELF64_HeaderSwitchEndianness(Elf64_Ehdr *prElf64Header)
     prElf64Header->e_shstrndx   = ENDIAN_SW_2B(prElf64Header->e_shstrndx);
 }
 
+static bool_t ELF64_Load(bool_t bIsCrosEndian,ELF_File_t *pElfFile,uint32_t *u32NamesSectionOffset,uint32_t *u32NamesSectionSize)
+{
+    bool_t    bRetVal = FALSE;
+
+    if (bIsCrosEndian)
+    {
+        ELF64_HeaderSwitchEndianness(&(pElfFile->Header.r64));
+    }
+    if ((uint16_t)ELF_Type_Executable != pElfFile->Header.r64.e_type)
+    {
+        NXP_LOG_ERROR("ELF_Open: Only executable ELFs are supported\n");
+    }
+    else if (FALSE == ELF64_LoadTables(pElfFile, bIsCrosEndian))
+    {
+        NXP_LOG_ERROR("ELF_Open: Failed to load tables\n");
+    }
+    /* Endianness is now solved in all tables */
+#if TRUE == ELF_CFG_SECTION_TABLE_USED
+    /* Look for section names section */
+    else if ((pElfFile->Header.r64.e_shstrndx == SHN_UNDEF)
+          || (pElfFile->Header.r64.e_shstrndx >= pElfFile->Header.r64.e_shnum)
+          || (0U == pElfFile->arSectHead64[pElfFile->Header.r64.e_shstrndx].sh_size)
+           )
+    {
+        NXP_LOG_ERROR("ELF_Open: Section names not found\n");
+    }
+    else
+    {
+        *u32NamesSectionOffset = (uint32_t)pElfFile->arSectHead64[pElfFile->Header.r64.e_shstrndx].sh_offset;
+        *u32NamesSectionSize = (uint32_t)pElfFile->arSectHead64[pElfFile->Header.r64.e_shstrndx].sh_size;
+        bRetVal = TRUE;
+    }
+#else  /* ELF_CFG_SECTION_TABLE_USED */
+    else
+    {
+        bRetVal = TRUE;
+    }
+#endif /* ELF_CFG_SECTION_TABLE_USED */
+
+    return bRetVal;
+}
+
 /*================================================================================================*/
 static void ELF64_ProgTabSwitchEndianness(Elf64_Phdr *arProgHead64, uint32_t u32NumItems)
 {
     uint32_t u32Idx;
 
 #if defined(PFE_CFG_NULL_ARG_CHECK)
-	if (unlikely(NULL == arProgHead64))
-	{
-		NXP_LOG_ERROR("NULL argument received\n");
-		return;
-	}
+    if (unlikely(NULL == arProgHead64))
+    {
+        NXP_LOG_ERROR("NULL argument received\n");
+        return;
+    }
 #endif /* PFE_CFG_NULL_ARG_CHECK */
 
     for(u32Idx=0U; u32Idx<u32NumItems; u32Idx++)
@@ -922,11 +1013,11 @@ static void ELF64_SectTabSwitchEndianness(Elf64_Shdr *arSectHead64, uint32_t u32
     uint32_t u32Idx;
 
 #if defined(PFE_CFG_NULL_ARG_CHECK)
-	if (unlikely(NULL == arSectHead64))
-	{
-		NXP_LOG_ERROR("NULL argument received\n");
-		return;
-	}
+    if (unlikely(NULL == arSectHead64))
+    {
+        NXP_LOG_ERROR("NULL argument received\n");
+        return;
+    }
 #endif /* PFE_CFG_NULL_ARG_CHECK */
 
     for(u32Idx=0U; u32Idx<u32NumItems; u32Idx++)
@@ -1000,7 +1091,7 @@ static bool_t ELF64_ProgSectFindNext( ELF_File_t *pElfFile, uint32_t *pu32ProgId
 }
 
 /*================================================================================================*/
-static bool_t ELF64_ProgSectLoad(ELF_File_t *pElfFile, uint32_t u32ProgIdx,
+static bool_t ELF64_ProgSectLoad(const ELF_File_t *pElfFile, uint32_t u32ProgIdx,
                                    addr_t AccessAddr, addr_t AllocSize
                                  )
 {
@@ -1016,7 +1107,7 @@ static bool_t ELF64_ProgSectLoad(ELF_File_t *pElfFile, uint32_t u32ProgIdx,
 #endif /* PFE_CFG_NULL_ARG_CHECK */
     if (u32ProgIdx >= pElfFile->Header.r64.e_phnum)
     {
-        NXP_LOG_ERROR("ELF64_ProgSectLoad: Invalid program index: %u\n", u32ProgIdx);
+        NXP_LOG_ERROR("ELF64_ProgSectLoad: Invalid program index: %u\n", (uint_t)u32ProgIdx);
     }
     else if ((uint32_t)PT_LOAD != pElfFile->arProgHead64[u32ProgIdx].p_type)
     {
@@ -1064,7 +1155,7 @@ static bool_t ELF64_ProgSectLoad(ELF_File_t *pElfFile, uint32_t u32ProgIdx,
         {
             if (sizeof(addr_t) < sizeof(uint64_t))
             {
-                    NXP_LOG_WARNING("ELF64_ProgSectLoad: addr_t size is not sufficient (%u < %u)", (uint32_t)sizeof(addr_t), (uint32_t)sizeof(uint64_t));
+                    NXP_LOG_WARNING("ELF64_ProgSectLoad: addr_t size is not sufficient (%u < %u)", (uint_t)sizeof(addr_t), (uint_t)sizeof(uint64_t));
             }
 
             (void)memset((void *)(AccessAddr + (addr_t)pElfFile->arProgHead64[u32ProgIdx].p_filesz),
@@ -1128,7 +1219,7 @@ static bool_t ELF64_SectFindName(const ELF_File_t *pElfFile, const char_t *szSec
 }
 
 /*================================================================================================*/
-static bool_t ELF64_SectLoad(ELF_File_t *pElfFile, uint32_t u32SectIdx, addr_t AccessAddr, addr_t AllocSize)
+static bool_t ELF64_SectLoad(const ELF_File_t *pElfFile, uint32_t u32SectIdx, addr_t AccessAddr, addr_t AllocSize)
 {
     bool_t bSuccess = FALSE;
 
@@ -1142,7 +1233,7 @@ static bool_t ELF64_SectLoad(ELF_File_t *pElfFile, uint32_t u32SectIdx, addr_t A
 #endif /* PFE_CFG_NULL_ARG_CHECK */
     if (u32SectIdx >= pElfFile->Header.r64.e_shnum)
     {
-        NXP_LOG_ERROR("ELF64_SectLoad: Invalid section index: %u\n", u32SectIdx);
+        NXP_LOG_ERROR("ELF64_SectLoad: Invalid section index: %u\n", (uint_t)u32SectIdx);
     }
     else if (AllocSize < pElfFile->arSectHead64[u32SectIdx].sh_size)
     {
@@ -1179,7 +1270,7 @@ static bool_t ELF64_SectLoad(ELF_File_t *pElfFile, uint32_t u32SectIdx, addr_t A
 
 #if TRUE == ELF_CFG_SECTION_PRINT_ENABLED
 /*================================================================================================*/
-static void ELF64_PrintSections(ELF_File_t *pElfFile)
+static void ELF64_PrintSections(const ELF_File_t *pElfFile)
 {
 #ifdef NXP_LOG_ENABLED /*  Debug message support */
     uint32_t SectIdx;
@@ -1252,8 +1343,8 @@ static void ELF64_PrintSections(ELF_File_t *pElfFile)
             }
 
             /* Print program header data */
-            NXP_LOG_INFO("%d %s 0x%016"PRINT64"x 0x%016"PRINT64"x 0x%016"PRINT64"x 0x%016"PRINT64"x 0x%016"PRINT64"x",
-                ProgIdx,
+            NXP_LOG_INFO("%u %s 0x%016"PRINT64"x 0x%016"PRINT64"x 0x%016"PRINT64"x 0x%016"PRINT64"x 0x%016"PRINT64"x",
+                (uint_t)ProgIdx,
                         aacPTypes[u32Type],
                         pElfFile->arProgHead64[ProgIdx].p_offset,
                         pElfFile->arProgHead64[ProgIdx].p_filesz,
@@ -1279,15 +1370,15 @@ static void ELF64_PrintSections(ELF_File_t *pElfFile)
 static uint32_t buf_read(void *src_buf, uint32_t u32FileSize, uint32_t u32Offset, void *dst_buf, uint32_t nbytes)
 {
     uint32_t u32i = 0;
-    uint8_t *pu8src = (uint8_t *)((addr_t)src_buf + u32Offset);
+    const uint8_t *pu8src = (uint8_t *)((addr_t)src_buf + u32Offset);
     uint8_t *pu8dst = (uint8_t *)dst_buf;
 
 #if defined(PFE_CFG_NULL_ARG_CHECK)
-	if (unlikely((NULL == src_buf) || (NULL == dst_buf)))
-	{
-		NXP_LOG_ERROR("NULL argument received\n");
-		return 0;
-	}
+    if (unlikely((NULL == src_buf) || (NULL == dst_buf)))
+    {
+        NXP_LOG_ERROR("NULL argument received\n");
+        return 0;
+    }
 #endif /* PFE_CFG_NULL_ARG_CHECK */
 
     for (u32i = 0U; u32i < nbytes; u32i++)
@@ -1304,6 +1395,70 @@ static uint32_t buf_read(void *src_buf, uint32_t u32FileSize, uint32_t u32Offset
     }
     return u32i;
 }
+
+static bool_t ELF_LoadTables(ELF_File_t *pElfFile, uint32_t *u32NamesSectionOffset, uint32_t *u32NamesSectionSize)
+{
+    bool_t bRetVal = FALSE;
+    bool_t    bIsCrosEndian;
+    ELF_Endian_t NativeEndian = GetLocalEndian();
+    ELF_Endian_t BinaryEndian;
+
+    /* Check Endianness */
+    BinaryEndian = ELF_IsLittleEndian(pElfFile) ? ELF_Endian_Little : ELF_Endian_Big;
+    bIsCrosEndian = (BinaryEndian == NativeEndian) ? FALSE : TRUE;
+    NXP_LOG_INFO("ELF_Open: File format: %s\n", pElfFile->bIs64Bit ? "Elf64" : "Elf32");
+    NXP_LOG_INFO("ELF_Open: File endian: %s (%s)\n",
+              bIsCrosEndian ? "Alien" : "Native",
+              (BinaryEndian==ELF_Endian_Little) ? "Little" : "Big"
+            );
+
+    if (TRUE == pElfFile->bIs64Bit)
+    {   /* Loading 64-bit ELF */
+#if TRUE == ELF_CFG_ELF64_SUPPORTED
+        bRetVal = ELF64_Load(bIsCrosEndian, pElfFile, u32NamesSectionOffset, u32NamesSectionSize);
+#else /* ELF_CFG_ELF64_SUPPORTED */
+        NXP_LOG_ERROR("Support for Elf64 was not compiled\n");
+#endif /* ELF_CFG_ELF64_SUPPORTED */
+    }
+    else
+    {   /* Loading 32-bit ELF */
+#if TRUE == ELF_CFG_ELF32_SUPPORTED
+        bRetVal = ELF32_Load(bIsCrosEndian, pElfFile, u32NamesSectionOffset, u32NamesSectionSize);
+#else /* ELF_CFG_ELF32_SUPPORTED */
+        NXP_LOG_ERROR("Support for Elf32 was not compiled\n");
+#endif /* ELF_CFG_ELF32_SUPPORTED */
+    }
+
+    return bRetVal;
+}
+/*================================================================================================*/
+static void ELF_FreePtr(ELF_File_t *pElfFile)
+{
+    if (NULL != pElfFile->arProgHead64)
+    {
+        pElfFile->arProgHead64 = NULL;
+    }
+    if (NULL != pElfFile->arSectHead64)
+    {
+        pElfFile->arSectHead64 = NULL;
+    }
+    if (NULL != pElfFile->arProgHead32)
+    {
+        pElfFile->arProgHead32 = NULL;
+    }
+    if (NULL != pElfFile->arSectHead32)
+    {
+        pElfFile->arSectHead32 = NULL;
+    }
+    if (NULL != pElfFile->acSectNames)
+    {
+        pElfFile->acSectNames = NULL;
+    }
+    if (NULL != pElfFile->pvData)
+    {
+        pElfFile->pvData = NULL;
+    }
+}
 /*==================================================================================================
                                        GLOBAL FUNCTIONS
 ==================================================================================================*/
@@ -1320,18 +1475,15 @@ static uint32_t buf_read(void *src_buf, uint32_t u32FileSize, uint32_t u32Offset
 bool_t ELF_Open(ELF_File_t *pElfFile, void *pvFile, uint32_t u32FileSize)
 {
     bool_t    bRetVal = FALSE;
-    bool_t    bIsCrosEndian;
-    ELF_Endian_t NativeEndian = GetLocalEndian();
-    ELF_Endian_t BinaryEndian;
     uint32_t     u32NamesSectionOffset = 0U;
     uint32_t     u32NamesSectionSize = 0U;
 
 #if defined(PFE_CFG_NULL_ARG_CHECK)
-	if (unlikely((NULL == pElfFile) || (NULL == pvFile)))
-	{
-		NXP_LOG_ERROR("NULL argument received\n");
-		return FALSE;
-	}
+    if (unlikely((NULL == pElfFile) || (NULL == pvFile)))
+    {
+        NXP_LOG_ERROR("NULL argument received\n");
+        return FALSE;
+    }
 #endif /* PFE_CFG_NULL_ARG_CHECK */
 
     /* Init File info */
@@ -1358,101 +1510,12 @@ bool_t ELF_Open(ELF_File_t *pElfFile, void *pvFile, uint32_t u32FileSize)
     }
     else /* So far SUCCESS */
     {
-    	pElfFile->pvData = pvFile;
+        pElfFile->pvData = pvFile;
         pElfFile->u32FileSize = u32FileSize;
         pElfFile->bIs64Bit = ELF_Is64bit(pElfFile);
         pElfFile->u32ProgScanIdx = 0U;
-        /* Check Endianness */
-        BinaryEndian = ELF_IsLittleEndian(pElfFile) ? ELF_Endian_Little : ELF_Endian_Big;
-        bIsCrosEndian = (BinaryEndian == NativeEndian) ? FALSE : TRUE;
-        NXP_LOG_INFO("ELF_Open: File format: %s\n", pElfFile->bIs64Bit ? "Elf64" : "Elf32");
-        NXP_LOG_INFO("ELF_Open: File endian: %s (%s)\n",
-                  bIsCrosEndian ? "Alien" : "Native",
-                  (BinaryEndian==ELF_Endian_Little) ? "Little" : "Big"
-                );
         /* Load tables */
-        if (TRUE == pElfFile->bIs64Bit)
-        {   /* Loading 64-bit ELF */
-    #if TRUE == ELF_CFG_ELF64_SUPPORTED
-            if (bIsCrosEndian)
-            {
-                ELF64_HeaderSwitchEndianness(&(pElfFile->Header.r64));
-            }
-            if ((uint16_t)ELF_Type_Executable != pElfFile->Header.r64.e_type)
-            {
-                NXP_LOG_ERROR("ELF_Open: Only executable ELFs are supported\n");
-            }
-            else if (FALSE == ELF64_LoadTables(pElfFile, bIsCrosEndian))
-            {
-                NXP_LOG_ERROR("ELF_Open: Failed to load tables\n");
-            }
-            /* Endianness is now solved in all tables */
-        #if TRUE == ELF_CFG_SECTION_TABLE_USED
-            /* Look for section names section */
-            else if ((pElfFile->Header.r64.e_shstrndx == SHN_UNDEF)
-                  || (pElfFile->Header.r64.e_shstrndx >= pElfFile->Header.r64.e_shnum)
-                  || (0U == pElfFile->arSectHead64[pElfFile->Header.r64.e_shstrndx].sh_size)
-                   )
-            {
-                NXP_LOG_ERROR("ELF_Open: Section names not found\n");
-            }
-            else
-            {
-                u32NamesSectionOffset = (uint32_t)pElfFile->arSectHead64[pElfFile->Header.r64.e_shstrndx].sh_offset;
-                u32NamesSectionSize = (uint32_t)pElfFile->arSectHead64[pElfFile->Header.r64.e_shstrndx].sh_size;
-                bRetVal = TRUE;
-            }
-        #else  /* ELF_CFG_SECTION_TABLE_USED */
-            else
-            {
-                bRetVal = TRUE;
-            }
-        #endif /* ELF_CFG_SECTION_TABLE_USED */
-    #else /* ELF_CFG_ELF64_SUPPORTED */
-            NXP_LOG_ERROR("Support for Elf64 was not compiled\n");
-    #endif /* ELF_CFG_ELF64_SUPPORTED */
-        }
-        else
-        {   /* Loading 32-bit ELF */
-    #if TRUE == ELF_CFG_ELF32_SUPPORTED
-            if (bIsCrosEndian)
-            {
-                ELF32_HeaderSwitchEndianness(&(pElfFile->Header.r32));
-            }
-            if ((uint16_t)ELF_Type_Executable != pElfFile->Header.r32.e_type)
-            {
-                NXP_LOG_ERROR("ELF_Open: Only executable ELFs are supported\n");
-            }
-            else if (FALSE == ELF32_LoadTables(pElfFile, bIsCrosEndian))
-            {
-                NXP_LOG_ERROR("ELF_Open: Failed to load tables\n");
-            }
-            /* Endianness is now solved in all tables */
-        #if TRUE == ELF_CFG_SECTION_TABLE_USED
-            /* Look for section names section */
-            else if ((pElfFile->Header.r32.e_shstrndx == SHN_UNDEF)
-                  || (pElfFile->Header.r32.e_shstrndx >= pElfFile->Header.r32.e_shnum)
-                  || (0U == pElfFile->arSectHead32[pElfFile->Header.r32.e_shstrndx].sh_size)
-                   )
-            {
-                NXP_LOG_ERROR("ELF_Open: Section names not found\n");
-            }
-            else
-            {
-                u32NamesSectionOffset = pElfFile->arSectHead32[pElfFile->Header.r32.e_shstrndx].sh_offset;
-                u32NamesSectionSize = pElfFile->arSectHead32[pElfFile->Header.r32.e_shstrndx].sh_size;
-                bRetVal = TRUE;
-            }
-        #else  /* ELF_CFG_SECTION_TABLE_USED */
-            else
-            {
-                bRetVal = TRUE;
-            }
-        #endif /* ELF_CFG_SECTION_TABLE_USED */
-    #else /* ELF_CFG_ELF32_SUPPORTED */
-            NXP_LOG_ERROR("Support for Elf32 was not compiled\n");
-    #endif /* ELF_CFG_ELF32_SUPPORTED */
-        }
+        bRetVal = ELF_LoadTables(pElfFile, &u32NamesSectionOffset, &u32NamesSectionSize);
     }
 
     #if TRUE == ELF_CFG_SECTION_TABLE_USED
@@ -1478,30 +1541,7 @@ bool_t ELF_Open(ELF_File_t *pElfFile, void *pvFile, uint32_t u32FileSize)
     /* === Check overall status and possibly clean-up ================================= */
     if(FALSE == bRetVal)
     {   /* In case of failure free the memory now */
-        if (NULL != pElfFile->arProgHead64)
-        {
-            pElfFile->arProgHead64 = NULL;
-        }
-        if (NULL != pElfFile->arSectHead64)
-        {
-            pElfFile->arSectHead64 = NULL;
-        }
-        if (NULL != pElfFile->arProgHead32)
-        {
-            pElfFile->arProgHead32 = NULL;
-        }
-        if (NULL != pElfFile->arSectHead32)
-        {
-            pElfFile->arSectHead32 = NULL;
-        }
-        if (NULL != pElfFile->acSectNames)
-        {
-            pElfFile->acSectNames = NULL;
-        }
-        if (NULL != pElfFile->pvData)
-        {
-        	pElfFile->pvData = NULL;
-        }
+        ELF_FreePtr(pElfFile);
     }
 
     return bRetVal;
@@ -1514,38 +1554,46 @@ bool_t ELF_Open(ELF_File_t *pElfFile, void *pvFile, uint32_t u32FileSize)
 */
 void ELF_Close(ELF_File_t *pElfFile)
 {
-#if defined(PFE_CFG_NULL_ARG_CHECK)
-	if (unlikely(NULL == pElfFile))
-	{
-		NXP_LOG_ERROR("NULL argument received\n");
-		return;
-	}
-#endif /* PFE_CFG_NULL_ARG_CHECK */
+    bool_t    bIsCrosEndian;
+    ELF_Endian_t NativeEndian = GetLocalEndian();
+    ELF_Endian_t BinaryEndian;
 
-    if (NULL != pElfFile->arProgHead64)
-    {
-        pElfFile->arProgHead64 = NULL;
-    }
-    if (NULL != pElfFile->arSectHead64)
-    {
-        pElfFile->arSectHead64 = NULL;
-    }
-    if (NULL != pElfFile->arProgHead32)
-    {
-        pElfFile->arProgHead32 = NULL;
-    }
-    if (NULL != pElfFile->arSectHead32)
+#if defined(PFE_CFG_NULL_ARG_CHECK)
+    if (unlikely(NULL == pElfFile))
     {
-        pElfFile->arSectHead32 = NULL;
+        NXP_LOG_ERROR("NULL argument received\n");
+        return;
     }
-    if (NULL != pElfFile->acSectNames)
+#endif /* PFE_CFG_NULL_ARG_CHECK */
+
+    /* Check Endianness */
+    BinaryEndian = ELF_IsLittleEndian(pElfFile) ? ELF_Endian_Little : ELF_Endian_Big;
+    bIsCrosEndian = (BinaryEndian == NativeEndian) ? FALSE : TRUE;
+        
+    /* If cross endian, swap the header bytes again to revert the elf file to original,
+       so it can be used again in the next call of Eth_43_PFE_Init()  */
+    if (bIsCrosEndian)
     {
-        pElfFile->acSectNames = NULL;
+        if (TRUE == pElfFile->bIs64Bit)
+        {   
+            /* Loading 64-bit ELF */
+            #if TRUE == ELF_CFG_ELF64_SUPPORTED
+                /* Handle endianness */
+                ELF64_ProgTabSwitchEndianness(pElfFile->arProgHead64, pElfFile->Header.r64.e_phnum);
+                ELF64_SectTabSwitchEndianness(pElfFile->arSectHead64, pElfFile->Header.r64.e_shnum);
+            #endif  /* ELF_CFG_ELF64_SUPPORTED */
+        }
+        else
+        {
+            #if TRUE == ELF_CFG_ELF32_SUPPORTED
+                /* Handle endianness */
+                ELF32_ProgTabSwitchEndianness(pElfFile->arProgHead32, pElfFile->Header.r32.e_phnum);
+                ELF32_SectTabSwitchEndianness(pElfFile->arSectHead32, pElfFile->Header.r32.e_shnum);
+            #endif  /* ELF_CFG_ELF32_SUPPORTED */
+        }
     }
-    if (NULL != pElfFile->pvData)
-	{
-		pElfFile->pvData = NULL;
-	}
+    
+    ELF_FreePtr(pElfFile);
 }
 
 #if TRUE == ELF_CFG_PROGRAM_TABLE_USED
@@ -1571,11 +1619,11 @@ bool_t ELF_ProgSectFindNext(ELF_File_t *pElfFile, uint32_t *pu32ProgIdx,
     bool_t bRetVal = FALSE;
 
 #if defined(PFE_CFG_NULL_ARG_CHECK)
-	if (unlikely((NULL == pElfFile) || (NULL == pu32ProgIdx) || (NULL == pu64LoadVAddr) || (NULL == pu64LoadPAddr) || (NULL == pu64Length)))
-	{
-		NXP_LOG_ERROR("NULL argument received\n");
-		return FALSE;
-	}
+    if (unlikely((NULL == pElfFile) || (NULL == pu32ProgIdx) || (NULL == pu64LoadVAddr) || (NULL == pu64LoadPAddr) || (NULL == pu64Length)))
+    {
+        NXP_LOG_ERROR("NULL argument received\n");
+        return FALSE;
+    }
 #endif /* PFE_CFG_NULL_ARG_CHECK */
 
     if (TRUE == pElfFile->bIs64Bit)
@@ -1603,16 +1651,16 @@ bool_t ELF_ProgSectFindNext(ELF_File_t *pElfFile, uint32_t *pu32ProgIdx,
 * @retval       TRUE Succeeded
 * @retval       FALSE Failed
 */
-bool_t ELF_ProgSectLoad(ELF_File_t *pElfFile, uint32_t u32ProgIdx, addr_t AccessAddr, addr_t AllocSize)
+bool_t ELF_ProgSectLoad(const ELF_File_t *pElfFile, uint32_t u32ProgIdx, addr_t AccessAddr, addr_t AllocSize)
 {
     bool_t bRetVal = FALSE;
 
 #if defined(PFE_CFG_NULL_ARG_CHECK)
-	if (unlikely(NULL == pElfFile))
-	{
-		NXP_LOG_ERROR("NULL argument received\n");
-		return FALSE;
-	}
+    if (unlikely(NULL == pElfFile))
+    {
+        NXP_LOG_ERROR("NULL argument received\n");
+        return FALSE;
+    }
 #endif /* PFE_CFG_NULL_ARG_CHECK */
 
     if (0U != (ELF_NAMED_SECT_IDX_FLAG & u32ProgIdx))
@@ -1658,11 +1706,11 @@ bool_t ELF_SectFindName(const ELF_File_t *pElfFile, const char_t *szSectionName,
     bool_t bRetVal = FALSE;
 
 #if defined(PFE_CFG_NULL_ARG_CHECK)
-	if (unlikely((NULL == pElfFile) || (NULL == szSectionName) || (NULL == pu32SectIdx)))
-	{
-		NXP_LOG_ERROR("NULL argument received\n");
-		return FALSE;
-	}
+    if (unlikely((NULL == pElfFile) || (NULL == szSectionName) || (NULL == pu32SectIdx)))
+    {
+        NXP_LOG_ERROR("NULL argument received\n");
+        return FALSE;
+    }
 #endif /* PFE_CFG_NULL_ARG_CHECK */
 
     if (TRUE == pElfFile->bIs64Bit)
@@ -1678,6 +1726,9 @@ bool_t ELF_SectFindName(const ELF_File_t *pElfFile, const char_t *szSectionName,
         #endif /* ELF_CFG_ELF32_SUPPORTED */
     }
 
+    /* Set the highest bit in the index to make sure that this index is not used in wrong load function. */
+    *pu32SectIdx |= ELF_NAMED_SECT_IDX_FLAG; /* Safe since the ELF index is 16-bit only. */
+
     return bRetVal;
 }
 
@@ -1692,16 +1743,16 @@ bool_t ELF_SectFindName(const ELF_File_t *pElfFile, const char_t *szSectionName,
 * @retval       TRUE Succeeded
 * @retval       FALSE Failed
 */
-bool_t ELF_SectLoad(ELF_File_t *pElfFile, uint32_t u32SectIdx, addr_t AccessAddr, addr_t AllocSize)
+bool_t ELF_SectLoad(const ELF_File_t *pElfFile, uint32_t u32SectIdx, addr_t AccessAddr, addr_t AllocSize)
 {
     bool_t bRetVal = FALSE;
 
 #if defined(PFE_CFG_NULL_ARG_CHECK)
-	if (unlikely(NULL == pElfFile))
-	{
-		NXP_LOG_ERROR("NULL argument received\n");
-		return FALSE;
-	}
+    if (unlikely(NULL == pElfFile))
+    {
+        NXP_LOG_ERROR("NULL argument received\n");
+        return FALSE;
+    }
 #endif /* PFE_CFG_NULL_ARG_CHECK */
 
     if (0U == (ELF_NAMED_SECT_IDX_FLAG & u32SectIdx))
@@ -1733,14 +1784,14 @@ bool_t ELF_SectLoad(ELF_File_t *pElfFile, uint32_t u32SectIdx, addr_t AccessAddr
 *               loading. Disable this function in configuration if it is not needed.
 * @param[in]    pElfFile Structure holding all informations about opened ELF file.
 */
-void ELF_PrintSections(ELF_File_t *pElfFile)
+void ELF_PrintSections(const ELF_File_t *pElfFile)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
-	if (unlikely(NULL == pElfFile))
-	{
-		NXP_LOG_ERROR("NULL argument received\n");
-		return;
-	}
+    if (unlikely(NULL == pElfFile))
+    {
+        NXP_LOG_ERROR("NULL argument received\n");
+        return;
+    }
 #endif /* PFE_CFG_NULL_ARG_CHECK */
 
     if (TRUE == pElfFile->bIs64Bit)
diff --git a/sw/fci/Makefile b/sw/fci/Makefile
index 5f36993..ee5f7d5 100644
--- a/sw/fci/Makefile
+++ b/sw/fci/Makefile
@@ -1,5 +1,5 @@
 # =========================================================================
-#  Copyright 2018-2020 NXP
+#  Copyright 2018-2021 NXP
 #
 #  SPDX-License-Identifier: GPL-2.0
 #
@@ -41,7 +41,7 @@ LIBS_profile += -lprofilingS
 CCFLAGS_pfe += -D$(PFE_CFG_TARGET_ARCH_DEF) -D$(PFE_CFG_TARGET_OS_DEF) -D$(PFE_CFG_BUILD_PROFILE_DEF)
 
 #Generic compiler flags (which include build type flags)
-CCFLAGS_all += -Wall -fmessage-length=0
+CCFLAGS_all += -Wall -fmessage-length=0 -fvisibility=hidden
 CCFLAGS_all += $(CCFLAGS_$(BUILD_PROFILE))
 CCFLAGS_all += $(CCFLAGS_pfe)
 #Shared library has to be compiled with -fPIC
@@ -56,6 +56,7 @@ rwildcard = $(wildcard $(addprefix $1/*.,$2)) $(foreach d,$(wildcard $1/*),$(cal
 #Source list
 SRCS += src/fci.c
 SRCS += src/fci_l2br_domains.c
+SRCS += src/fci_l2br.c
 SRCS += src/fci_connections.c
 SRCS += src/fci_routes.c
 SRCS += src/fci_interfaces.c
@@ -119,6 +120,7 @@ ccflags-y += $(INCLUDES)
 ccflags-y += -Wno-date-time
 ccflags-y += $(CCFLAGS_pfe)
 ccflags-y += $(GLOBAL_CCFLAGS)
+ccflags-y += -Werror
 
 fci-y := $(OBJS)
 
diff --git a/sw/fci/public/fci.h b/sw/fci/public/fci.h
index b8e1549..f92c9d5 100644
--- a/sw/fci/public/fci.h
+++ b/sw/fci/public/fci.h
@@ -1,5 +1,5 @@
 /* =========================================================================
- *  Copyright 2017-2020 NXP
+ *  Copyright 2017-2021 NXP
  *
  *  SPDX-License-Identifier: GPL-2.0
  *
@@ -21,7 +21,7 @@
  * @brief	Information passed into the fci_init() function
  * @note	For future use
  */
-typedef struct fci_init_info_tag
+typedef struct
 {
 	pfe_rtable_t *rtable;	/* The routing table object */
 	pfe_l2br_t *l2_bridge;	/* The L2 bridge instance */
@@ -39,4 +39,11 @@ errno_t fci_init(fci_init_info_t *info, const char_t *const identifier);
 void fci_fini(void);
 errno_t fci_core_client_send_broadcast(fci_msg_t *msg, fci_msg_t *rep);
 
+typedef struct 
+{
+	uint32_t stats;
+} pfe_fp_t;
+
+uint32_t pfe_fp_get_text_statistics(pfe_fp_t *temp, char_t *buf, uint32_t buf_len, uint8_t verb_level);
+
 #endif /* FCI_H_ */
diff --git a/sw/fci/src/fci.c b/sw/fci/src/fci.c
index 21981d2..8336334 100644
--- a/sw/fci/src/fci.c
+++ b/sw/fci/src/fci.c
@@ -95,7 +95,6 @@ errno_t fci_process_ipc_message(fci_msg_t *msg, fci_msg_t *rep_msg)
 				case FPP_CMD_IF_UNLOCK_SESSION:
 				{
 					ret = fci_interfaces_session_cmd(msg->msg_cmd.code, &fci_ret);
-
 					break;
 				}
 
@@ -103,7 +102,6 @@ errno_t fci_process_ipc_message(fci_msg_t *msg, fci_msg_t *rep_msg)
 				{
 					/*	Process 'interface' commands (add/del/update/query/...) */
 					ret = fci_interfaces_log_cmd(msg, &fci_ret, (fpp_log_if_cmd_t *)reply_buf_ptr, reply_buf_len_ptr);
-
 					break;
 				}
 
@@ -111,7 +109,6 @@ errno_t fci_process_ipc_message(fci_msg_t *msg, fci_msg_t *rep_msg)
 				{
 					/*	Process 'interface' commands (add/del/update/query/...) */
 					ret = fci_interfaces_phy_cmd(msg, &fci_ret, (fpp_phy_if_cmd_t *)reply_buf_ptr, reply_buf_len_ptr);
-
 					break;
 				}
 
@@ -198,7 +195,6 @@ errno_t fci_process_ipc_message(fci_msg_t *msg, fci_msg_t *rep_msg)
 				{
 					/*	Manage L2 bridge domains */
 					ret = fci_l2br_domain_cmd(msg, &fci_ret, (fpp_l2_bd_cmd_t *)reply_buf_ptr, reply_buf_len_ptr);
-
 					break;
 				}
 
@@ -206,11 +202,10 @@ errno_t fci_process_ipc_message(fci_msg_t *msg, fci_msg_t *rep_msg)
 				{
 					/*	Manage L2 bridge domains */
 					ret = fci_l2br_static_entry_cmd(msg, &fci_ret, (fpp_l2_static_ent_cmd_t *)reply_buf_ptr, reply_buf_len_ptr);
-
 					break;
 				}
 
-                case FPP_CMD_FP_TABLE:
+				case FPP_CMD_FP_TABLE:
 				{
 					ret = fci_fp_table_cmd(msg, &fci_ret, (fpp_fp_table_cmd_t *)reply_buf_ptr, reply_buf_len_ptr);
 					break;
@@ -235,11 +230,11 @@ errno_t fci_process_ipc_message(fci_msg_t *msg, fci_msg_t *rep_msg)
 					break;
 				}
 
-                case FPP_CMD_SPD:
-                {
-                    ret = fci_spd_cmd(msg, &fci_ret, (fpp_spd_cmd_t *)reply_buf_ptr, reply_buf_len_ptr);
-                    break;
-                }
+				case FPP_CMD_SPD:
+				{
+					ret = fci_spd_cmd(msg, &fci_ret, (fpp_spd_cmd_t *)reply_buf_ptr, reply_buf_len_ptr);
+					break;
+				}
 
 				case FPP_CMD_QOS_QUEUE:
 				{
@@ -259,6 +254,14 @@ errno_t fci_process_ipc_message(fci_msg_t *msg, fci_msg_t *rep_msg)
 					break;
 				}
 
+				case FPP_CMD_L2_FLUSH_ALL:
+				case FPP_CMD_L2_FLUSH_LEARNED:
+				case FPP_CMD_L2_FLUSH_STATIC:
+				{
+					ret = fci_l2br_flush_cmd(msg->msg_cmd.code, &fci_ret);
+					break;
+				}
+
 				default:
 				{
 					NXP_LOG_WARNING("Unknown CMD code received: 0x%x\n", msg->msg_cmd.code);
diff --git a/sw/fci/src/fci_connections.c b/sw/fci/src/fci_connections.c
index e970082..4b67040 100644
--- a/sw/fci/src/fci_connections.c
+++ b/sw/fci/src/fci_connections.c
@@ -431,6 +431,8 @@ static pfe_rtable_entry_t *fci_connections_create_entry(fci_rt_db_entry_t *route
 	pfe_rtable_entry_set_timeout(new_entry, fci_connections_get_default_timeout(tuple->proto));
 	/*	Set route ID (network endian) */
 	pfe_rtable_entry_set_route_id(new_entry, route->id);
+	/*	Set ttl decrement by default */
+	pfe_rtable_entry_set_ttl_decrement(new_entry);
 
 	/*	Change MAC addresses */
 	pfe_phy_if_get_mac_addr(route->iface, mac_addr);
@@ -1159,9 +1161,68 @@ free_and_fail:
 		}
 
 		case FPP_ACTION_UPDATE:
-		{
-			/*	Not supported yet */
-			*fci_ret = FPP_ERR_UNKNOWN_COMMAND;
+		{	
+			if (TRUE == ipv6)
+			{
+				NXP_LOG_DEBUG("Attempt to update IPv6 connection:\n%s\n", fci_connections_ipv6_cmd_to_str(ct6_cmd));
+			}
+			else
+			{
+				NXP_LOG_DEBUG("Attempt to update IPv4 connection:\n%s\n", fci_connections_ipv4_cmd_to_str(ct_cmd));
+			}
+
+			NXP_LOG_INFO("UPDATED conntrack, only TTL decrement flag will be updated\n");
+
+			/*      Get entry by 5-tuple */
+			if (TRUE == ipv6)
+ 			{
+				fci_connections_ipv6_cmd_to_5t(ct6_cmd, &tuple);
+			}
+			else
+			{
+				fci_connections_ipv4_cmd_to_5t(ct_cmd, &tuple);
+			}
+
+			entry = pfe_rtable_get_first(context->rtable, RTABLE_CRIT_BY_5_TUPLE, (void *)&tuple);
+
+			if (NULL != entry)
+			{
+
+				if (TRUE == ipv6)
+				{
+					if (ct6_cmd->flags & CTCMD_FLAGS_TTL_DECREMENT)
+					{
+						pfe_rtable_entry_set_ttl_decrement(entry);
+					}
+					else
+					{
+						pfe_rtable_entry_remove_ttl_decrement(entry);
+					}
+				}
+				else
+				{
+					if (ct_cmd->flags & CTCMD_FLAGS_TTL_DECREMENT)
+					{
+						pfe_rtable_entry_set_ttl_decrement(entry);
+					}
+					else
+					{
+						pfe_rtable_entry_remove_ttl_decrement(entry);
+					}
+				}
+
+				*fci_ret = FPP_ERR_OK;
+				ret = EOK;
+
+			}
+			else
+			{
+				NXP_LOG_DEBUG("FPP_CMD_IPVx_CONNTRACK: Entry not found\n");
+				*fci_ret = FPP_ERR_CT_ENTRY_NOT_FOUND;
+				ret = EEXIST;
+			}
+
+
 			break;
 		}
 
@@ -1281,6 +1342,18 @@ free_and_fail:
 				NXP_LOG_ERROR("Couldn't get output tuple\n");
 			}
 
+			if (0 != (actions & RT_ACT_DEC_TTL))
+			{
+				if (TRUE == ipv6)
+				{
+					ct6_reply->flags |= CTCMD_FLAGS_TTL_DECREMENT;
+				}
+				else
+				{
+					ct_reply->flags |= CTCMD_FLAGS_TTL_DECREMENT;
+				}
+			}
+
 			if (0 != (actions & RT_ACT_CHANGE_SIP_ADDR))
 			{
 				if (TRUE == ipv6)
diff --git a/sw/fci/src/fci_fp.c b/sw/fci/src/fci_fp.c
index 9822c3b..0bd662a 100644
--- a/sw/fci/src/fci_fp.c
+++ b/sw/fci/src/fci_fp.c
@@ -1,5 +1,5 @@
 /* =========================================================================
- *  Copyright 2019-2020 NXP
+ *  Copyright 2019-2021 NXP
  *
  *  SPDX-License-Identifier: GPL-2.0
  *
@@ -120,7 +120,7 @@ errno_t fci_fp_table_cmd(fci_msg_t *msg, uint16_t *fci_ret, fpp_fp_table_cmd_t *
 	{
 		case FPP_ACTION_REGISTER:
         {
-            ret = fci_fp_db_create_table((char_t *)fp_cmd->t.table_name);
+            ret = fci_fp_db_create_table((char_t *)fp_cmd->table_info.t.table_name);
             if(EOK == ret)
             {
                 *fci_ret = FPP_ERR_OK;
@@ -133,7 +133,7 @@ errno_t fci_fp_table_cmd(fci_msg_t *msg, uint16_t *fci_ret, fpp_fp_table_cmd_t *
         }
 		case FPP_ACTION_DEREGISTER:
         {
-            ret = fci_fp_db_destroy_table((char_t *)fp_cmd->t.table_name, FALSE);
+            ret = fci_fp_db_destroy_table((char_t *)fp_cmd->table_info.t.table_name, FALSE);
             if(EOK == ret)
             {
                 *fci_ret = FPP_ERR_OK;
@@ -146,7 +146,7 @@ errno_t fci_fp_table_cmd(fci_msg_t *msg, uint16_t *fci_ret, fpp_fp_table_cmd_t *
         }
         case FPP_ACTION_USE_RULE:
         {
-            ret = fci_fp_db_add_rule_to_table((char_t *)fp_cmd->t.table_name, (char_t *)fp_cmd->t.rule_name, oal_ntohs(fp_cmd->t.position));
+            ret = fci_fp_db_add_rule_to_table((char_t *)fp_cmd->table_info.t.table_name, (char_t *)fp_cmd->table_info.t.rule_name, oal_ntohs(fp_cmd->table_info.t.position));
             if(EOK == ret)
             {
                 *fci_ret = FPP_ERR_OK;
@@ -159,7 +159,7 @@ errno_t fci_fp_table_cmd(fci_msg_t *msg, uint16_t *fci_ret, fpp_fp_table_cmd_t *
         }
         case FPP_ACTION_UNUSE_RULE:
         {
-            fci_fp_db_remove_rule_from_table((char_t *)fp_cmd->t.rule_name);
+            fci_fp_db_remove_rule_from_table((char_t *)fp_cmd->table_info.t.rule_name);
             if(EOK == ret)
             {
                 *fci_ret = FPP_ERR_OK;
@@ -178,10 +178,10 @@ errno_t fci_fp_table_cmd(fci_msg_t *msg, uint16_t *fci_ret, fpp_fp_table_cmd_t *
             uint16_t offset;
             pfe_ct_fp_flags_t flags;
 
-            ret = fci_fp_db_get_table_first_rule((char_t *)fp_cmd->t.table_name, &rule_name, &data, &mask, &offset, &flags, &next_rule);
+            ret = fci_fp_db_get_table_first_rule((char_t *)fp_cmd->table_info.t.table_name, &rule_name, &data, &mask, &offset, &flags, &next_rule);
             if(EOK == ret)
             {
-            	fci_fp_construct_rule_reply(&reply_buf->r, rule_name, next_rule, data, mask, offset, flags);
+            	fci_fp_construct_rule_reply(&reply_buf->table_info.r, rule_name, next_rule, data, mask, offset, flags);
                 *fci_ret = FPP_ERR_OK;
                 *reply_len = sizeof(fpp_fp_table_cmd_t);
             }
@@ -199,10 +199,10 @@ errno_t fci_fp_table_cmd(fci_msg_t *msg, uint16_t *fci_ret, fpp_fp_table_cmd_t *
             uint16_t offset;
             pfe_ct_fp_flags_t flags;
 
-            ret = fci_fp_db_get_table_next_rule((char_t *)fp_cmd->t.table_name, &rule_name, &data, &mask, &offset, &flags, &next_rule);
+            ret = fci_fp_db_get_table_next_rule((char_t *)fp_cmd->table_info.t.table_name, &rule_name, &data, &mask, &offset, &flags, &next_rule);
             if(EOK == ret)
             {
-            	fci_fp_construct_rule_reply(&reply_buf->r, rule_name, next_rule, data, mask, offset, flags);
+            	fci_fp_construct_rule_reply(&reply_buf->table_info.r, rule_name, next_rule, data, mask, offset, flags);
                 *fci_ret = FPP_ERR_OK;
                 *reply_len = sizeof(fpp_fp_table_cmd_t);
             }
diff --git a/sw/fci/src/fci_fp_db.c b/sw/fci/src/fci_fp_db.c
index 86f8482..644b01c 100644
--- a/sw/fci/src/fci_fp_db.c
+++ b/sw/fci/src/fci_fp_db.c
@@ -11,6 +11,7 @@
 
 #include "fci_fp_db.h"
 #include "pfe_fp.h"
+#include "fci.h"
 
 
 typedef struct fci_fp_table_tag fci_fp_table_t;
@@ -1382,3 +1383,50 @@ uint32_t fci_fp_print_tables(char_t *buf, uint32_t buf_len, uint8_t verb_level)
     }
     return len;
 }
+
+uint32_t pfe_fp_get_text_statistics(pfe_fp_t *temp, char_t *buf, uint32_t buf_len, uint8_t verb_level)
+{
+    fci_fp_table_t *table;
+    pfe_ct_class_flexi_parser_stats_t *c_stats; 
+    LLIST_t *item;
+    uint32_t len = 0U;
+    uint32_t pe_idx = 0U;
+
+    LLIST_ForEach(item, &fci_fp_table_db.tables)
+    {
+        table = LLIST_Data(item,  fci_fp_table_t, db_entry);
+        len += oal_util_snprintf(buf + len, buf_len - len, "%s = {\n", table->name);
+        if (table->dmem_addr != 0)
+        {
+            c_stats = oal_mm_malloc(sizeof(pfe_ct_class_flexi_parser_stats_t) * (pfe_class_get_num_of_pes(table->class) + 1U));
+            if(NULL == c_stats)
+            {
+                NXP_LOG_ERROR("Memory allocation failed\n");
+                oal_mm_free(c_stats);
+                return len;
+            }
+
+            (void)memset(c_stats, 0, sizeof(pfe_ct_class_flexi_parser_stats_t) * (pfe_class_get_num_of_pes(table->class) + 1U));
+
+            for(pe_idx = 0U; pe_idx < pfe_class_get_num_of_pes(table->class); pe_idx++)
+            {
+                pfe_fp_table_get_statistics(table->class, pe_idx, table->dmem_addr, &c_stats[pe_idx +1]);
+                pfe_class_flexi_parser_stats_endian(&c_stats[pe_idx + 1]);
+                pfe_class_sum_flexi_parser_stats(&c_stats[0], &c_stats[pe_idx + 1]);
+            }
+
+            len += pfe_class_fp_stat_to_str(&c_stats[0U], buf + len, buf_len - len, verb_level);
+
+            oal_mm_free(c_stats);
+        }
+        else
+        {
+            len += oal_util_snprintf(buf + len, buf_len - len, "Table not enabled in Firmware\n");
+        }
+
+        len += oal_util_snprintf(buf + len, buf_len - len, "\n}\n");
+    }
+
+    return len;
+}
+
diff --git a/sw/fci/src/fci_fw_features.c b/sw/fci/src/fci_fw_features.c
index 782c354..8aa2e40 100644
--- a/sw/fci/src/fci_fw_features.c
+++ b/sw/fci/src/fci_fw_features.c
@@ -32,9 +32,9 @@
 errno_t fci_fw_features_cmd(fci_msg_t *msg, uint16_t *fci_ret, fpp_fw_features_cmd_t *reply_buf, uint32_t *reply_len)
 {
 	pfe_fw_feature_t *fw_feature = NULL;
-    fci_t *context = (fci_t *)&__context;
+	fci_t *context = (fci_t *)&__context;
 	fpp_fw_features_cmd_t *fp_cmd;
-    const char *str;
+	const char *str;
 	errno_t ret = EOK;
 
 #if defined(PFE_CFG_NULL_ARG_CHECK)
@@ -68,18 +68,19 @@ errno_t fci_fw_features_cmd(fci_msg_t *msg, uint16_t *fci_ret, fpp_fw_features_c
 	{
 		case FPP_ACTION_UPDATE:
 		{
-            ret = pfe_class_get_feature(context->class, &fw_feature, fp_cmd->name);
+			ret = pfe_class_get_feature(context->class, &fw_feature, fp_cmd->name);
+
 			if(EOK != ret)
 			{
 				*fci_ret = FPP_ERR_ENTRY_NOT_FOUND;
 			}
 			else
 			{
-                ret = pfe_fw_feature_set_val(fw_feature, fp_cmd->val);
-                if(EOK != ret)
-                {
-                    *fci_ret = FPP_ERR_ENTRY_NOT_FOUND;
-                }
+				ret = pfe_fw_feature_set_val(fw_feature, fp_cmd->val);
+				if(EOK != ret)
+				{
+					*fci_ret = FPP_ERR_ENTRY_NOT_FOUND;
+				}
 				*fci_ret = FPP_ERR_OK;
 			}
 			break;
diff --git a/sw/fci/src/fci_interfaces.c b/sw/fci/src/fci_interfaces.c
index 16c9c9d..5fa752c 100644
--- a/sw/fci/src/fci_interfaces.c
+++ b/sw/fci/src/fci_interfaces.c
@@ -80,29 +80,29 @@ static errno_t fci_interfaces_get_arg_info(fpp_if_m_args_t *m_arg, fpp_if_m_rule
 
 		case IF_MATCH_SIP6:
 		{
-			*size = sizeof(m_arg->v6.sip);
-			*offset = &m_arg->v6.sip;
+			*size = sizeof(m_arg->ipv.v6.sip);
+			*offset = &m_arg->ipv.v6.sip;
 			break;
 		}
 
 		case IF_MATCH_DIP6:
 		{
-			*size = sizeof(m_arg->v6.dip);
-			*offset = &m_arg->v6.dip;
+			*size = sizeof(m_arg->ipv.v6.dip);
+			*offset = &m_arg->ipv.v6.dip;
 			break;
 		}
 
 		case IF_MATCH_SIP:
 		{
-			*size = sizeof(m_arg->v4.sip);
-			*offset = &m_arg->v4.sip;
+			*size = sizeof(m_arg->ipv.v4.sip);
+			*offset = &m_arg->ipv.v4.sip;
 			break;
 		}
 
 		case IF_MATCH_DIP:
 		{
-			*size = sizeof(m_arg->v4.dip);
-			*offset = &m_arg->v4.dip;
+			*size = sizeof(m_arg->ipv.v4.dip);
+			*offset = &m_arg->ipv.v4.dip;
 			break;
 		}
 
@@ -169,6 +169,44 @@ static errno_t fci_interfaces_get_arg_info(fpp_if_m_args_t *m_arg, fpp_if_m_rule
 	return retval;
 }
 
+/**
+ * @brief			Destroy FP tables if they are used.
+ * 					Auxiliary function for logical interface processing.
+ * @param[in]		match	Match rules of a logical interface.
+ * @param[in]		args	Match rule arguments of a logical interface.
+ * @return			EOK if success, error code otherwise
+ */
+static errno_t fci_interfaces_destroy_fptables(const fpp_if_m_rules_t match, const pfe_ct_if_m_args_t* args)
+{
+#if defined(PFE_CFG_NULL_ARG_CHECK)
+	if (NULL == args)
+	{
+		NXP_LOG_ERROR("NULL argument received\n");
+		return EINVAL;
+	}
+#endif /* PFE_CFG_NULL_ARG_CHECK */
+
+	char_t *table_name;
+	if(FPP_IF_MATCH_FP0 == (match & FPP_IF_MATCH_FP0))
+	{	/* A flexible parser table was dropped - it needs to be destroyed if it existed */
+		if(0 != args->fp0_table)
+		{	/* Table existed */
+			fci_fp_db_get_table_from_addr(args->fp0_table, &table_name);
+			fci_fp_db_pop_table_from_hw(table_name);
+		}
+	}
+	if(FPP_IF_MATCH_FP1 == (match & FPP_IF_MATCH_FP1))
+	{	/* A flexible parser table was dropped - it needs to be destroyed if it existed */
+		if(0 != args->fp1_table)
+		{	/* Table existed */
+			fci_fp_db_get_table_from_addr(args->fp1_table, &table_name);
+			fci_fp_db_pop_table_from_hw(table_name);
+		}
+	}
+
+	return EOK;
+}
+
 /**
  * @brief			Process interface atomic session related commands
  * @param[in]		msg FCI cmd code
@@ -333,7 +371,7 @@ errno_t fci_interfaces_log_cmd(fci_msg_t *msg, uint16_t *fci_ret, fpp_log_if_cmd
 				log_if = pfe_if_db_entry_get_log_if(entry);
 			}
 
-			/* Check if the entry exits*/
+			/* Check if the entry exists */
 			if((NULL == entry) || (NULL == log_if))
 			{
 				/* Interface doesn't exist or couldn't be extracted from the entry */
@@ -342,6 +380,17 @@ errno_t fci_interfaces_log_cmd(fci_msg_t *msg, uint16_t *fci_ret, fpp_log_if_cmd
 				break;
 			} 
 
+			/* Destroy FP tables if they were used by this interface. */
+			if(EOK == pfe_log_if_get_match_rules(log_if, &rules, &args))
+			{
+				/* Fix endians of FP tables */
+				args.fp0_table = oal_ntohl(args.fp0_table);
+				args.fp1_table = oal_ntohl(args.fp1_table);
+
+				/* Destroy FP tables */
+				fci_interfaces_destroy_fptables(rules, &args);
+			}
+
 			/* Remove interface from the database */
 			pfe_if_db_remove(context->log_if_db, context->if_session_id, entry);
 			/* Destroy the interface */
@@ -369,7 +418,7 @@ errno_t fci_interfaces_log_cmd(fci_msg_t *msg, uint16_t *fci_ret, fpp_log_if_cmd
 				log_if = pfe_if_db_entry_get_log_if(entry);
 			}
 
-			/* Check if the entry exits*/
+			/* Check if the entry exists */
 			if((NULL == entry) || (NULL == log_if))
 			{
 				/* Interface doesn't exist or couldn't be extracted from the entry */
@@ -389,24 +438,11 @@ errno_t fci_interfaces_log_cmd(fci_msg_t *msg, uint16_t *fci_ret, fpp_log_if_cmd
 			args.fp0_table = oal_ntohl(args.fp0_table);
 			args.fp1_table = oal_ntohl(args.fp1_table);
 
-			/* Drop all unset rules if any */
+			/* Drop all unset rules (if any) */
 			ret = pfe_log_if_del_match_rule(log_if, ~oal_ntohl(if_cmd->match));
-			if(FPP_IF_MATCH_FP0 == ((~oal_ntohl(if_cmd->match)) & FPP_IF_MATCH_FP0))
-			{   /* A flexible parser table was dropped - it needs to be destroyed if it existed */
-				if(0 != args.fp0_table)
-				{   /* Table existed */
-					fci_fp_db_get_table_from_addr(args.fp0_table, &table_name);
-					fci_fp_db_pop_table_from_hw(table_name);
-				}
-			}
-			if(FPP_IF_MATCH_FP1 == ((~oal_ntohl(if_cmd->match)) & FPP_IF_MATCH_FP1))
-			{   /* A flexible parser table was dropped - it needs to be destroyed */
-				if(0 != args.fp1_table)
-				{   /* Table existed */
-					fci_fp_db_get_table_from_addr(args.fp1_table, &table_name);
-					fci_fp_db_pop_table_from_hw(table_name);
-				}
-			}
+
+			/* Destroy FP tables if they are not used by new rules */
+			fci_interfaces_destroy_fptables(~oal_ntohl(if_cmd->match), &args);
 
 			if(EOK == ret)
 			{
@@ -459,10 +495,10 @@ errno_t fci_interfaces_log_cmd(fci_msg_t *msg, uint16_t *fci_ret, fpp_log_if_cmd
 			if(FPP_IF_MATCH_FP1 == (oal_ntohl(if_cmd->match) & FPP_IF_MATCH_FP1))
 			{
 				/* Get the newly configured table address */
-				fp_table_addr = fci_fp_db_get_table_dmem_addr(if_cmd->arguments.fp_table0);
+				fp_table_addr = fci_fp_db_get_table_dmem_addr(if_cmd->arguments.fp_table1);
 				if(0 == fp_table_addr)
 				{   /* Table has not been created yet */
-					ret = fci_fp_db_push_table_to_hw(context->class, if_cmd->arguments.fp_table0);
+					ret = fci_fp_db_push_table_to_hw(context->class, if_cmd->arguments.fp_table1);
 					if(EOK != ret)
 					{   /* Failed to write */
 						*fci_ret = FPP_ERR_IF_MATCH_UPDATE_FAILED;
@@ -588,7 +624,7 @@ errno_t fci_interfaces_log_cmd(fci_msg_t *msg, uint16_t *fci_ret, fpp_log_if_cmd
 			}
 
 			/* AND/OR rules */
-			if(0U != (if_cmd->flags & FPP_IF_MATCH_OR))
+			if(0U != (oal_ntohl(if_cmd->flags) & FPP_IF_MATCH_OR))
 			{
 				ret = pfe_log_if_set_match_or(log_if);
 			}
@@ -603,8 +639,8 @@ errno_t fci_interfaces_log_cmd(fci_msg_t *msg, uint16_t *fci_ret, fpp_log_if_cmd
 				*fci_ret = FPP_ERR_IF_OP_UPDATE_FAILED;
 			}
 
-			/* enable/disable*/
-			if(0U != (if_cmd->flags & FPP_IF_ENABLED))
+			/* enable/disable */
+			if(0U != (oal_ntohl(if_cmd->flags) & FPP_IF_ENABLED))
 			{
 				ret = pfe_log_if_enable(log_if);
 			}
@@ -619,8 +655,24 @@ errno_t fci_interfaces_log_cmd(fci_msg_t *msg, uint16_t *fci_ret, fpp_log_if_cmd
 				*fci_ret = FPP_ERR_IF_OP_UPDATE_FAILED;
 			}
 
+			/* loopback */
+			if(0U != (oal_ntohl(if_cmd->flags) & FPP_IF_LOOPBACK))
+			{
+				ret = pfe_log_if_loopback_enable(log_if);
+			}
+			else
+			{
+				ret = pfe_log_if_loopback_disable(log_if);
+			}
+
+			if(EOK != ret)
+			{
+				NXP_LOG_ERROR("ENABLE flag wasn't updated correctly on %s\n",  pfe_log_if_get_name(log_if));
+				*fci_ret = FPP_ERR_IF_OP_UPDATE_FAILED;
+			}
+
 			/* promisc */
-			if(0U != (if_cmd->flags & FPP_IF_PROMISC))
+			if(0U != (oal_ntohl(if_cmd->flags) & FPP_IF_PROMISC))
 			{
 				ret = pfe_log_if_promisc_enable(log_if);
 			}
@@ -636,7 +688,7 @@ errno_t fci_interfaces_log_cmd(fci_msg_t *msg, uint16_t *fci_ret, fpp_log_if_cmd
 			}
 
 			/* discard */
-			if(0U != (if_cmd->flags & FPP_IF_DISCARD))
+			if(0U != (oal_ntohl(if_cmd->flags) & FPP_IF_DISCARD))
 			{
 				ret = pfe_log_if_discard_enable(log_if);
 			}
@@ -719,22 +771,27 @@ errno_t fci_interfaces_log_cmd(fci_msg_t *msg, uint16_t *fci_ret, fpp_log_if_cmd
 			reply_buf->flags = 0U;
 			if(pfe_log_if_is_enabled(log_if))
 			{
-				reply_buf->flags |= FPP_IF_ENABLED;
+				reply_buf->flags |= oal_htonl(FPP_IF_ENABLED);
+			}
+
+			if(pfe_log_if_is_loopback(log_if))
+			{
+				reply_buf->flags |= oal_htonl(FPP_IF_LOOPBACK);
 			}
 
 			if(pfe_log_if_is_promisc(log_if))
 			{
-				reply_buf->flags |= FPP_IF_PROMISC;
+				reply_buf->flags |= oal_htonl(FPP_IF_PROMISC);
 			}
 
 			if(pfe_log_if_is_discard(log_if))
 			{
-				reply_buf->flags |= FPP_IF_DISCARD;
+				reply_buf->flags |= oal_htonl(FPP_IF_DISCARD);
 			}
 
 			if(pfe_log_if_is_match_or(log_if))
 			{
-				reply_buf->flags |= FPP_IF_MATCH_OR;
+				reply_buf->flags |= oal_htonl(FPP_IF_MATCH_OR);
 			}
 
 			/* Store egress interfaces */
@@ -744,7 +801,7 @@ errno_t fci_interfaces_log_cmd(fci_msg_t *msg, uint16_t *fci_ret, fpp_log_if_cmd
 			}
 			reply_buf->egress = oal_htonl(egress);
 
-			/* Store rules for FCI*/
+			/* Store rules for FCI */
 			if(EOK != pfe_log_if_get_match_rules(log_if, &rules, &args))
 			{
 				NXP_LOG_DEBUG("Was not possible to get match rules and arguments\n");
@@ -755,22 +812,25 @@ errno_t fci_interfaces_log_cmd(fci_msg_t *msg, uint16_t *fci_ret, fpp_log_if_cmd
 			args.fp1_table = oal_ntohl(args.fp1_table);
 			reply_buf->match = oal_htonl(rules);
 
-			/* Store arguments for FCI*/
-			memcpy(&reply_buf->arguments, &args, sizeof(args));
-			/* Correct flexible parser table names by translating address to string */
-			if(EOK != fci_fp_db_get_table_from_addr(args.fp0_table, &table_name))
-			{
-				strcpy(reply_buf->arguments.fp_table0, "UNKNOWN");
-			}
-			else
+			/* Store match rule arguments for FCI */
+			reply_buf->arguments.vlan = args.vlan;
+			reply_buf->arguments.ethtype = args.ethtype;
+			reply_buf->arguments.sport = args.sport;
+			reply_buf->arguments.dport = args.dport;
+			reply_buf->arguments.proto = args.proto;
+			reply_buf->arguments.hif_cookie = args.hif_cookie;
+			memcpy(&reply_buf->arguments.ipv, &args.ipv, sizeof(reply_buf->arguments.ipv));
+			memcpy(reply_buf->arguments.smac, args.smac, 6U);
+			memcpy(reply_buf->arguments.dmac, args.dmac, 6U);
+
+			/* Translate names of flexible parser tables from addresses to strings. */
+			memset(reply_buf->arguments.fp_table0, 0, IFNAMSIZ);
+			memset(reply_buf->arguments.fp_table1, 0, IFNAMSIZ);
+			if(EOK == fci_fp_db_get_table_from_addr(args.fp0_table, &table_name))
 			{
 				strcpy(reply_buf->arguments.fp_table0, table_name);
 			}
-			if(EOK != fci_fp_db_get_table_from_addr(args.fp1_table, &table_name))
-			{
-				strcpy(reply_buf->arguments.fp_table1, "UNKNOWN");
-			}
-			else
+			if(EOK == fci_fp_db_get_table_from_addr(args.fp1_table, &table_name))
 			{
 				strcpy(reply_buf->arguments.fp_table1, table_name);
 			}
@@ -888,7 +948,7 @@ errno_t fci_interfaces_phy_cmd(fci_msg_t *msg, uint16_t *fci_ret, fpp_phy_if_cmd
 				break;
 			}
 
-			if(FPP_IF_MIRROR == (if_cmd->flags & FPP_IF_MIRROR))
+			if(FPP_IF_MIRROR == (oal_ntohl(if_cmd->flags) & FPP_IF_MIRROR))
 			{
 				/* Get the requested interface */
 				ret = pfe_if_db_get_first(context->phy_if_db, context->if_session_id, IF_DB_CRIT_BY_NAME, if_cmd->mirror, &entry2);
@@ -930,7 +990,7 @@ errno_t fci_interfaces_phy_cmd(fci_msg_t *msg, uint16_t *fci_ret, fpp_phy_if_cmd
 			}
 
 			/*	Enable/Disable */
-			if(0U != (if_cmd->flags & FPP_IF_ENABLED))
+			if(0U != (oal_ntohl(if_cmd->flags) & FPP_IF_ENABLED))
 			{
 				ret = pfe_phy_if_enable(phy_if);
 			}
@@ -946,7 +1006,7 @@ errno_t fci_interfaces_phy_cmd(fci_msg_t *msg, uint16_t *fci_ret, fpp_phy_if_cmd
 			}
 
 			/* promisc */
-			if(0U != (if_cmd->flags & FPP_IF_PROMISC))
+			if(0U != (oal_ntohl(if_cmd->flags) & FPP_IF_PROMISC))
 			{
 				ret = pfe_phy_if_promisc_enable(phy_if);
 			}
@@ -955,6 +1015,46 @@ errno_t fci_interfaces_phy_cmd(fci_msg_t *msg, uint16_t *fci_ret, fpp_phy_if_cmd
 				ret = pfe_phy_if_promisc_disable(phy_if);
 			}
 
+			/*	VLAN conformance check */
+			if(0U != (oal_ntohl(if_cmd->flags) & FPP_IF_VLAN_CONF_CHECK))
+			{
+				ret = pfe_phy_if_set_flag(phy_if, IF_FL_VLAN_CONF_CHECK);
+			}
+			else
+			{
+				ret = pfe_phy_if_clear_flag(phy_if, IF_FL_VLAN_CONF_CHECK);
+			}
+
+			/*	PTP conformance check */
+			if(0U != (oal_ntohl(if_cmd->flags) & FPP_IF_PTP_CONF_CHECK))
+			{
+				ret = pfe_phy_if_set_flag(phy_if, IF_FL_PTP_CONF_CHECK);
+			}
+			else
+			{
+				ret = pfe_phy_if_clear_flag(phy_if, IF_FL_PTP_CONF_CHECK);
+			}
+
+			/*	PTP promiscuous mode */
+			if(0U != (oal_ntohl(if_cmd->flags) & FPP_IF_PTP_PROMISC))
+			{
+				ret = pfe_phy_if_set_flag(phy_if, IF_FL_PTP_PROMISC);
+			}
+			else
+			{
+				ret = pfe_phy_if_clear_flag(phy_if, IF_FL_PTP_PROMISC);
+			}
+
+			/*	QinQ support control */
+			if(0U != (oal_ntohl(if_cmd->flags) & FPP_IF_ALLOW_Q_IN_Q))
+			{
+				ret = pfe_phy_if_set_flag(phy_if, IF_FL_ALLOW_Q_IN_Q);
+			}
+			else
+			{
+				ret = pfe_phy_if_clear_flag(phy_if, IF_FL_ALLOW_Q_IN_Q);
+			}
+
 			if(EOK != ret)
 			{
 				NXP_LOG_ERROR("PROMISC flag wasn't updated correctly on %s\n",  pfe_phy_if_get_name(phy_if));
@@ -1080,8 +1180,12 @@ errno_t fci_interfaces_phy_cmd(fci_msg_t *msg, uint16_t *fci_ret, fpp_phy_if_cmd
 			/* Store phy_if id */
 			reply_buf->id = oal_htonl(pfe_phy_if_get_id(phy_if));
 
-			reply_buf->flags |= (TRUE == pfe_phy_if_is_promisc(phy_if)) ? FPP_IF_PROMISC : 0;
-			reply_buf->flags |= (TRUE == pfe_phy_if_is_enabled(phy_if)) ? FPP_IF_ENABLED : 0;
+			reply_buf->flags |= (TRUE == pfe_phy_if_is_promisc(phy_if)) ? oal_htonl(FPP_IF_PROMISC) : 0;
+			reply_buf->flags |= (TRUE == pfe_phy_if_is_enabled(phy_if)) ? oal_htonl(FPP_IF_ENABLED) : 0;
+			reply_buf->flags |= (IF_FL_NONE != pfe_phy_if_get_flag(phy_if, IF_FL_VLAN_CONF_CHECK)) ? oal_htonl(FPP_IF_VLAN_CONF_CHECK) : 0;
+			reply_buf->flags |= (IF_FL_NONE != pfe_phy_if_get_flag(phy_if, IF_FL_PTP_CONF_CHECK)) ? oal_htonl(FPP_IF_PTP_CONF_CHECK) : 0;
+			reply_buf->flags |= (IF_FL_NONE != pfe_phy_if_get_flag(phy_if, IF_FL_PTP_PROMISC)) ? oal_htonl(FPP_IF_PTP_PROMISC) : 0;
+			reply_buf->flags |= (IF_FL_NONE != pfe_phy_if_get_flag(phy_if, IF_FL_ALLOW_Q_IN_Q)) ? oal_htonl(FPP_IF_ALLOW_Q_IN_Q) : 0;
 
 			/* Get the mode - use the fact enums have same values */
 			reply_buf->mode = (fpp_phy_if_op_mode_t) pfe_phy_if_get_op_mode(phy_if);
@@ -1102,14 +1206,14 @@ errno_t fci_interfaces_phy_cmd(fci_msg_t *msg, uint16_t *fci_ret, fpp_phy_if_cmd
 				if (NULL != entry)
 				{
 					mirror_if = pfe_if_db_entry_get_phy_if(entry);
-					reply_buf->flags |= FPP_IF_MIRROR;
+					reply_buf->flags |= oal_htonl(FPP_IF_MIRROR);
 					strncpy(reply_buf->mirror, pfe_phy_if_get_name(mirror_if), IFNAMSIZ-1);
 				}
 				else
 				{
 					NXP_LOG_ERROR("Failed to obtain interface for ID %u\n", mirror_if_id);
 
-					reply_buf->flags |= FPP_IF_MIRROR;
+					reply_buf->flags |= oal_htonl(FPP_IF_MIRROR);
 					/* Fallback solution - we cannot query for the mirror interface because it
 					   would cancel the outgoing query for physical interfaces */
 					snprintf(reply_buf->mirror, IFNAMSIZ-1, "IF ID: %u", mirror_if_id);
@@ -1117,7 +1221,7 @@ errno_t fci_interfaces_phy_cmd(fci_msg_t *msg, uint16_t *fci_ret, fpp_phy_if_cmd
 			}
 			else
 			{
-				reply_buf->flags &= ~FPP_IF_MIRROR;
+				reply_buf->flags &= oal_htonl(~FPP_IF_MIRROR);
 			}
 
 			/*	Get filter info */
diff --git a/sw/fci/src/fci_internal.h b/sw/fci/src/fci_internal.h
index 8e8de0e..3dd1b86 100644
--- a/sw/fci/src/fci_internal.h
+++ b/sw/fci/src/fci_internal.h
@@ -83,6 +83,7 @@ errno_t fci_connections_ipv6_ct_cmd(fci_msg_t *msg, uint16_t *fci_ret, fpp_ct6_c
 errno_t fci_connections_ipv4_timeout_cmd(fci_msg_t *msg, uint16_t *fci_ret, fpp_timeout_cmd_t *reply_buf, uint32_t *reply_len);
 errno_t fci_l2br_domain_cmd(fci_msg_t *msg, uint16_t *fci_ret, fpp_l2_bd_cmd_t *reply_buf, uint32_t *reply_len);
 errno_t fci_l2br_static_entry_cmd(fci_msg_t *msg, uint16_t *fci_ret, fpp_l2_static_ent_cmd_t *reply_buf, uint32_t *reply_len);
+errno_t fci_l2br_flush_cmd(uint32_t code, uint16_t *fci_ret);
 errno_t fci_routes_drop_one(fci_rt_db_entry_t *route);
 void fci_routes_drop_all(void);
 void fci_routes_drop_all_ipv4(void);
diff --git a/sw/fci/src/fci_l2br.c b/sw/fci/src/fci_l2br.c
new file mode 100644
index 0000000..4ed2eea
--- /dev/null
+++ b/sw/fci/src/fci_l2br.c
@@ -0,0 +1,96 @@
+/* =========================================================================
+ *  Copyright 2021 NXP
+ *
+ *  SPDX-License-Identifier: GPL-2.0
+ *
+ * ========================================================================= */
+
+/**
+ * @addtogroup  dxgr_FCI
+ * @{
+ *
+ * @file		fci_l2br.c
+ * @brief		L2 bridge management functions.
+ * @details		All bridge-related functionality provided by the FCI should be
+ * 				implemented within this file. This includes mainly bridge-related
+ * 				commands.
+ *
+ */
+
+#include "pfe_cfg.h"
+#include "libfci.h"
+#include "fpp.h"
+#include "fpp_ext.h"
+
+#include "fci_internal.h"
+#include "fci.h"
+
+/**
+ * @brief			Process FPP_CMD_L2_FLUSH_* commands
+ * @param[in]		msg FCI cmd code
+ * @param[out]		fci_ret FCI return code
+ * @return			EOK if success, error code otherwise
+ */
+errno_t fci_l2br_flush_cmd(uint32_t code, uint16_t *fci_ret)
+{
+	fci_t *context = (fci_t *)&__context;
+	errno_t ret = EOK;
+
+#if defined(PFE_CFG_NULL_ARG_CHECK)
+	if (unlikely(NULL == fci_ret))
+	{
+		NXP_LOG_ERROR("NULL argument received\n");
+		return EINVAL;
+	}
+#endif /* PFE_CFG_NULL_ARG_CHECK */
+
+	*fci_ret = FPP_ERR_OK;
+
+	switch (code)
+	{
+		case FPP_CMD_L2_FLUSH_ALL:
+		{
+			ret = pfe_l2br_flush_all(context->l2_bridge);
+			if (EOK != ret)
+			{
+				*fci_ret = FPP_ERR_INTERNAL_FAILURE;
+				NXP_LOG_DEBUG("Can't flush MAC table entries: %d\n", ret);
+			}
+
+			break;
+		}
+
+		case FPP_CMD_L2_FLUSH_LEARNED:
+		{
+			ret = pfe_l2br_flush_learned(context->l2_bridge);
+			if (EOK != ret)
+			{
+				*fci_ret = FPP_ERR_INTERNAL_FAILURE;
+				NXP_LOG_DEBUG("Can't flush learned MAC table entries: %d\n", ret);
+			}
+			
+			break;
+		}
+
+		case FPP_CMD_L2_FLUSH_STATIC:
+		{
+			ret = pfe_l2br_flush_static(context->l2_bridge);
+			if (EOK != ret)
+			{
+				*fci_ret = FPP_ERR_INTERNAL_FAILURE;
+				NXP_LOG_DEBUG("Can't flush static MAC table entries: %d\n", ret);
+			}
+			
+			break;
+		}
+
+		default:
+		{
+			NXP_LOG_ERROR("Unknown L2 bridge command: 0x%x\n", code);
+			*fci_ret = FPP_ERR_UNKNOWN_ACTION;
+			break;
+		}
+	}
+
+	return ret;
+}
diff --git a/sw/fci/src/fci_l2br_domains.c b/sw/fci/src/fci_l2br_domains.c
index 82d2ec6..4d6601c 100644
--- a/sw/fci/src/fci_l2br_domains.c
+++ b/sw/fci/src/fci_l2br_domains.c
@@ -119,7 +119,7 @@ errno_t fci_l2br_domain_cmd(fci_msg_t *msg, uint16_t *fci_ret, fpp_l2_bd_cmd_t *
 			if (EPERM == ret)
 			{
 				NXP_LOG_ERROR("Domain %d already created\n", oal_ntohs(bd_cmd->vlan));
-				*fci_ret = FPP_ERR_L2BRIDGE_DOMAIN_ALREADY_REGISTERED;
+				*fci_ret = FPP_ERR_L2_BD_ALREADY_REGISTERED;
 				ret = EOK;
 				break;
 			}
@@ -311,7 +311,7 @@ finalize_domain_registration:
 			if (NULL == domain)
 			{
 				NXP_LOG_ERROR("Domain %d not found\n", oal_ntohs(bd_cmd->vlan));
-				*fci_ret = FPP_ERR_L2BRIDGE_DOMAIN_NOT_FOUND;
+				*fci_ret = FPP_ERR_L2_BD_NOT_FOUND;
 				ret = EOK;
 			}
 			else
@@ -338,7 +338,7 @@ finalize_domain_registration:
 			if (NULL == domain)
 			{
 				ret = EOK;
-				*fci_ret = FPP_ERR_L2BRIDGE_DOMAIN_NOT_FOUND;
+				*fci_ret = FPP_ERR_L2_BD_NOT_FOUND;
 				break;
 			}
 		}
@@ -352,7 +352,7 @@ finalize_domain_registration:
 				if (NULL == domain)
 				{
 					ret = EOK;
-					*fci_ret = FPP_ERR_L2BRIDGE_DOMAIN_NOT_FOUND;
+					*fci_ret = FPP_ERR_L2_BD_NOT_FOUND;
 					break;
 				}
 			}
@@ -387,12 +387,12 @@ finalize_domain_registration:
 
 			if (TRUE == pfe_l2br_domain_is_default(domain))
 			{
-				bd_cmd->flags |= FPP_L2BR_DOMAIN_DEFAULT;
+				bd_cmd->flags |= FPP_L2_BD_DEFAULT;
 			}
 
 			if (TRUE == pfe_l2br_domain_is_fallback(domain))
 			{
-				bd_cmd->flags |= FPP_L2BR_DOMAIN_FALLBACK;
+				bd_cmd->flags |= FPP_L2_BD_FALLBACK;
 			}
 
 			bd_cmd->if_list = oal_htonl(pfe_l2br_domain_get_if_list(domain));
@@ -529,6 +529,14 @@ errno_t fci_l2br_static_entry_cmd(fci_msg_t *msg, uint16_t *fci_ret, fpp_l2_stat
 				{
 					*fci_ret = FPP_ERR_INTERNAL_FAILURE;
 				}
+				if (EOK != pfe_l2br_static_entry_set_src_discard_flag(context->l2_bridge, entry, br_ent_cmd->src_discard))
+				{
+					*fci_ret = FPP_ERR_INTERNAL_FAILURE;
+				}
+				if (EOK != pfe_l2br_static_entry_set_dst_discard_flag(context->l2_bridge, entry, br_ent_cmd->dst_discard))
+				{
+					*fci_ret = FPP_ERR_INTERNAL_FAILURE;
+				}
 			}
 			break;
 		}
@@ -588,6 +596,8 @@ errno_t fci_l2br_static_entry_cmd(fci_msg_t *msg, uint16_t *fci_ret, fpp_l2_stat
 			/* FW list */
 			br_ent_cmd->forward_list =  oal_htonl(pfe_l2br_static_entry_get_fw_list(entry));
 			(void)pfe_l2br_static_entry_get_local_flag(context->l2_bridge, entry, (bool_t *)&br_ent_cmd->local);
+			(void)pfe_l2br_static_entry_get_src_discard_flag(context->l2_bridge, entry, (bool_t *)&br_ent_cmd->src_discard);
+			(void)pfe_l2br_static_entry_get_dst_discard_flag(context->l2_bridge, entry, (bool_t *)&br_ent_cmd->dst_discard);
 			*fci_ret = FPP_ERR_OK;
 			break;
 		}
@@ -608,7 +618,7 @@ errno_t fci_l2br_static_entry_cmd(fci_msg_t *msg, uint16_t *fci_ret, fpp_l2_stat
 uint32_t fci_l2br_static_entry_get_valid_fw_list(void)
 {
 	uint32_t ii;
-	uint32_t session_id, valid_if_list;
+	uint32_t session_id, valid_if_list = 0U;
 	errno_t ret = EOK;
 	fci_t *context = (fci_t *)&__context;
 	pfe_if_db_entry_t *if_db_entry = NULL;
diff --git a/sw/fci/src/fci_qos.c b/sw/fci/src/fci_qos.c
index 87feffc..8fe0a9f 100644
--- a/sw/fci/src/fci_qos.c
+++ b/sw/fci/src/fci_qos.c
@@ -1,5 +1,5 @@
 /* =========================================================================
- *  Copyright 2020 NXP
+ *  Copyright 2020-2021 NXP
  *
  *  SPDX-License-Identifier: GPL-2.0
  *
@@ -228,7 +228,8 @@ errno_t fci_qos_queue_cmd(fci_msg_t *msg, uint16_t *fci_ret, fpp_qos_queue_cmd_t
 			/*	Copy original command properties into reply structure */
 			reply_buf->action = q->action;
 			reply_buf->id = q->id;
-			strncpy(reply_buf->if_name, q->if_name, sizeof(reply_buf->if_name)-1);
+			strncpy(reply_buf->if_name, q->if_name, sizeof(reply_buf->if_name));
+			reply_buf->if_name[sizeof(reply_buf->if_name) - 1] = '\0';
 
 			/*	Get queue mode */
 			switch (pfe_tmu_queue_get_mode(pfe->tmu, pfe_phy_if_get_id(phy_if),
@@ -515,7 +516,8 @@ errno_t fci_qos_scheduler_cmd(fci_msg_t *msg, uint16_t *fci_ret, fpp_qos_schedul
 			/*	Copy original command properties into reply structure */
 			reply_buf->action = sch->action;
 			reply_buf->id = sch->id;
-			strncpy(reply_buf->if_name, sch->if_name, sizeof(reply_buf->if_name)-1);
+			strncpy(reply_buf->if_name, sch->if_name, sizeof(reply_buf->if_name));
+			reply_buf->if_name[sizeof(reply_buf->if_name) - 1] = '\0';
 
 			/*	Get scheduler mode */
 			switch (pfe_tmu_sch_get_rate_mode(pfe->tmu, pfe_phy_if_get_id(phy_if), sch->id))
@@ -779,7 +781,8 @@ errno_t fci_qos_shaper_cmd(fci_msg_t *msg, uint16_t *fci_ret, fpp_qos_shaper_cmd
 			/*	Copy original command properties into reply structure */
 			reply_buf->action = shp->action;
 			reply_buf->id = shp->id;
-			strncpy(reply_buf->if_name, shp->if_name, sizeof(reply_buf->if_name)-1);
+			strncpy(reply_buf->if_name, shp->if_name, sizeof(reply_buf->if_name));
+			reply_buf->if_name[sizeof(reply_buf->if_name) - 1] = '\0';
 
 			/*	Get shaper mode */
 			switch (pfe_tmu_shp_get_rate_mode(pfe->tmu, pfe_phy_if_get_id(phy_if), shp->id))
diff --git a/sw/fifo/Makefile b/sw/fifo/Makefile
index cba1a33..aae17d0 100644
--- a/sw/fifo/Makefile
+++ b/sw/fifo/Makefile
@@ -1,5 +1,5 @@
 # =========================================================================
-#  Copyright 2018-2020 NXP
+#  Copyright 2018-2021 NXP
 #
 #  SPDX-License-Identifier: GPL-2.0
 #
@@ -40,7 +40,7 @@ LIBS_profile += -lprofilingS
 CCFLAGS_pfe += -D$(PFE_CFG_TARGET_ARCH_DEF) -D$(PFE_CFG_TARGET_OS_DEF) -D$(PFE_CFG_BUILD_PROFILE_DEF)
 
 #Generic compiler flags (which include build type flags)
-CCFLAGS_all += -Wall -fmessage-length=0
+CCFLAGS_all += -Wall -fmessage-length=0 -fvisibility=hidden
 CCFLAGS_all += $(CCFLAGS_$(BUILD_PROFILE))
 CCFLAGS_all += $(CCFLAGS_pfe)
 #Shared library has to be compiled with -fPIC
@@ -95,6 +95,7 @@ rebuild: clean all
 ccflags-y += $(INCLUDES)
 ccflags-y += $(CCFLAGS_pfe)
 ccflags-y += $(GLOBAL_CCFLAGS)
+ccflags-y += -Werror
 
 fifo-y := src/fifo.o
 #fifo-y := $(OBJS)
diff --git a/sw/fifo/public/fifo.h b/sw/fifo/public/fifo.h
index cc03d80..526c65c 100644
--- a/sw/fifo/public/fifo.h
+++ b/sw/fifo/public/fifo.h
@@ -83,8 +83,8 @@ static inline void * fifo_get(fifo_t * const fifo)
 
 fifo_t * fifo_create(const uint32_t depth) __attribute__((cold));
 void fifo_destroy(fifo_t *const fifo) __attribute__((cold));
-void * fifo_peek(fifo_t * const fifo, uint32_t num) __attribute__((hot));
-errno_t fifo_get_fill_level(fifo_t *const fifo, uint32_t *fill_level) __attribute__((hot));
-errno_t fifo_get_free_space(fifo_t *const fifo, uint32_t *free_space) __attribute__((hot));
+void * fifo_peek(const fifo_t * const fifo, uint32_t num) __attribute__((hot));
+errno_t fifo_get_fill_level(const fifo_t *const fifo, uint32_t *fill_level) __attribute__((hot));
+errno_t fifo_get_free_space(const fifo_t *const fifo, uint32_t *free_space) __attribute__((hot));
 
 #endif /* SRC_fifo_H_ */
diff --git a/sw/fifo/src/fifo.c b/sw/fifo/src/fifo.c
index 32a23fc..41d78cb 100644
--- a/sw/fifo/src/fifo.c
+++ b/sw/fifo/src/fifo.c
@@ -1,12 +1,10 @@
 /* =========================================================================
- *  Copyright 2018-2020 NXP
+ *  Copyright 2018-2021 NXP
  *
  *  SPDX-License-Identifier: GPL-2.0
  *
  * ========================================================================= */
 
-#include <stdbool.h>
-
 #include "pfe_cfg.h"
 #include "oal.h"
 #include "oal_mm.h"
@@ -16,7 +14,7 @@
 
 #define is_power_of_2(n) ((n) && !((n) & ((n) - 1U)))
 
-__attribute__((hot)) errno_t fifo_get_fill_level(fifo_t *const fifo, uint32_t *fill_level)
+__attribute__((hot)) errno_t fifo_get_fill_level(const fifo_t *const fifo, uint32_t *fill_level)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely((NULL == fifo) || (NULL == fill_level)))
@@ -30,7 +28,7 @@ __attribute__((hot)) errno_t fifo_get_fill_level(fifo_t *const fifo, uint32_t *f
 	return EOK;
 }
 
-__attribute__((hot)) errno_t fifo_get_free_space(fifo_t *const fifo, uint32_t *free_space)
+__attribute__((hot)) errno_t fifo_get_free_space(const fifo_t *const fifo, uint32_t *free_space)
 {
 	uint32_t ret;
 	errno_t err;
@@ -91,7 +89,7 @@ __attribute__((cold)) void fifo_destroy(fifo_t *const fifo)
 	}
 }
 
-__attribute__((hot)) void * fifo_peek(fifo_t * const fifo, uint32_t num)
+__attribute__((hot)) void * fifo_peek(const fifo_t * const fifo, uint32_t num)
 {
 	volatile void *ret = NULL;
 
diff --git a/sw/hal/Makefile b/sw/hal/Makefile
index 09ac7fc..718672e 100644
--- a/sw/hal/Makefile
+++ b/sw/hal/Makefile
@@ -1,5 +1,5 @@
 # =========================================================================
-#  Copyright 2018-2020 NXP
+#  Copyright 2018-2021 NXP
 #
 #  SPDX-License-Identifier: GPL-2.0
 #
@@ -33,7 +33,7 @@ LIBS_profile += -lprofilingS
 CCFLAGS_pfe += -D$(PFE_CFG_TARGET_ARCH_DEF) -D$(PFE_CFG_TARGET_OS_DEF) -D$(PFE_CFG_BUILD_PROFILE_DEF)
 
 #Generic compiler flags (which include build type flags)
-CCFLAGS_all += -Wall -fmessage-length=0
+CCFLAGS_all += -Wall -fmessage-length=0 -fvisibility=hidden
 CCFLAGS_all += $(CCFLAGS_$(BUILD_PROFILE))
 CCFLAGS_all += $(CCFLAGS_pfe)
 #Shared library has to be compiled with -fPIC
@@ -88,6 +88,7 @@ rebuild: clean all
 ccflags-y += $(INCLUDES)
 ccflags-y += $(CCFLAGS_pfe)
 ccflags-y += $(GLOBAL_CCFLAGS)
+ccflags-y += -Werror
 
 hal-y := src/hal.o
 #hal-y := $(OBJS)
diff --git a/sw/hal/public/hal.h b/sw/hal/public/hal.h
index c8e884c..22072d6 100644
--- a/sw/hal/public/hal.h
+++ b/sw/hal/public/hal.h
@@ -113,9 +113,15 @@
 #endif
 
 /**
- * @brief	If TRUE then platform need explicit cache maintenance (flush/invalidate)
+ * @brief	If TRUE then platform performs explicit cache maintenance (flush/invalidate)
  */
-#define HAL_HANDLE_CACHE	FALSE
+#if defined(PFE_CFG_TARGET_OS_QNX) && \
+	!defined(PFE_CFG_TARGET_ARCH_x86) && \
+	!defined(PFE_CFG_BUFFERS_COHERENT)
+	#define HAL_HANDLE_CACHE	TRUE
+#else
+	#define HAL_HANDLE_CACHE	FALSE
+#endif
 
 /**
  * @brief	Specify cache line size in number of bytes.
diff --git a/sw/linux-pfeng/Makefile b/sw/linux-pfeng/Makefile
index 0dd5668..bd44627 100644
--- a/sw/linux-pfeng/Makefile
+++ b/sw/linux-pfeng/Makefile
@@ -1,24 +1,35 @@
 #
 # Copyright 2018-2021 NXP
 #
-# SPDX-License-Identifier: GPL-2.0
+# SPDX-License-Identifier:     BSD OR GPL-2.0
 #
 #
 
-KERNELDIR ?= /usr/src/linux-headers-`uname -r`
+ifeq ($(KERNELDIR), )
+	$(error Path to the kernel must be provided in KERNELDIR variable!)
+endif
+
+# Set up all required build options
 TARGET_OS := LINUX
-PFE_CFG_MULTI_INSTANCE_SUPPORT ?= 0
+ARCH := arm64
 PLATFORM ?= aarch64-fsl-linux
-ARCH ?= arm64
+PFE_CFG_MULTI_INSTANCE_SUPPORT ?= 0
 PFE_CFG_IP_VERSION ?= PFE_CFG_IP_VERSION_NPU_7_14a
 PFE_CFG_LINUX_TRACE ?= 0
-PFE_CFG_MC_HIF=0
-PFE_CFG_SC_HIF=1
+PFE_CFG_HIF_USE_BD_TRIGGER ?= 1
+PFE_CFG_BD_MEM = "pfe-bdr-pool"
+PFE_CFG_SYS_MEM = "pfe-bmu2-pool"
+PFE_CFG_LINUX_NO_SERDES_SUPPORT ?= 0
+
+# Warning for PFE_CFG_LINUX_TRACE=1:
+# The compile time checker doesn't work well with -Og
+# See: https://lkml.org/lkml/2018/11/2/542
 
+#
 # Unsupported config options
-# * PFE_CFG_CSUM_ALL_FRAMES	: dynamically managable in driver
-# * PFE_CFG_MC_HIF		: only one client per channel
-# * PFE_CFG_IEEE1588_SUPPORT : dynamicly managed in driver
+# * PFE_CFG_CSUM_ALL_FRAMES		: dynamicly managed in driver
+# * PFE_CFG_MC_HIF, PFE_CFG_SC_HIF	: both are supported pernamently
+# * PFE_CFG_IEEE1588_SUPPORT		: dynamicly managed in driver
 
 PLAT_DEFINES = KBUILD_MODPOST_WARN=1 TARGET_OS=$(TARGET_OS) KERNELDIR=$(KERNELDIR) PLATFORM=$(PLATFORM) ARCH=$(ARCH) CROSS_COMPILE=$(PLATFORM)-
 
@@ -42,30 +53,39 @@ ifneq ($(PFE_CFG_LINUX_TRACE),0)
 ccflags-y += -Og
 endif
 ccflags-y += -Wno-date-time
+ccflags-y += -Werror
+ifneq ($(PFE_CFG_LINUX_NO_SERDES_SUPPORT),0)
+ccflags-y += -DPFENG_CFG_LINUX_NO_SERDES_SUPPORT
+endif
 
 OBJ_LIBFCI_DIR = ../xfci/libfci
-OBJ_DIRS = ../oal ../bpool  ../elf  ../fifo  ../pfe_hif_drv  ../pfe_platform ../common
+OBJ_DIRS = ../oal ../bpool  ../elf  ../fifo  ../pfe_hif_drv ../pfe_platform ../common
 
 ifneq ($(PFE_CFG_FCI_ENABLE),0)
 OBJ_DIRS += ../fci
 endif
 
-pfeng-objs := ../pfe_platform/pfe_platform.o ../oal/oal.o ../elf/elf.o ../fifo/fifo.o ../pfe_hif_drv/pfe_hif_drv.o ../bpool/bpool.o ../common/blalloc.o
-pfeng-slave-objs := ../pfe_platform/pfe_platform.o ../oal/oal.o ../elf/elf.o ../fifo/fifo.o ../pfe_hif_drv/pfe_hif_drv.o ../bpool/bpool.o ../common/blalloc.o
+pfeng-objs-libs := ../pfe_platform/pfe_platform.o ../oal/oal.o ../elf/elf.o ../fifo/fifo.o ../pfe_hif_drv/pfe_hif_drv.o ../bpool/bpool.o ../common/blalloc.o
 
 ifneq ($(PFE_CFG_FCI_ENABLE),0)
-pfeng-objs += ../fci/fci.o
-pfeng-slave-objs += ../fci/fci.o
+pfeng-objs-libs += ../fci/fci.o
 endif
 
+pfeng-objs-core := pfeng-drv.o pfeng-debugfs.o pfeng-hif.o pfeng-bman.o pfeng-netif.o pfeng-ethtool.o pfeng-hwts.o
+
 ifneq ($(PFE_CFG_PFE_MASTER),0)
-pfeng-objs += pfeng-drv.o pfeng-hw-s32g.o pfeng-fw.o pfeng-debugfs.o pfeng-napi.o pfeng-ethtool.o pfeng-mdio.o pfeng-phylink.o pfeng-hif.o pfeng-ptp.o pfeng-hwts.o
+pfeng-objs := $(pfeng-objs-libs) $(pfeng-objs-core) pfeng-fw.o pfeng-mdio.o pfeng-phylink.o pfeng-ptp.o
 obj-m += pfeng.o
 else
-pfeng-slave-objs += pfeng-drv.o pfeng-hw-s32g.o pfeng-fw.o pfeng-debugfs.o pfeng-napi.o pfeng-ethtool.o pfeng-hif.o pfeng-hwts.o
+pfeng-slave-objs := $(pfeng-objs-libs) $(pfeng-objs-core)
 obj-m += pfeng-slave.o
 endif
 
+ifeq ($(PFE_CFG_MULTI_INSTANCE_SUPPORT),1)
+ifeq ($(PFE_CFG_IP_VERSION),PFE_CFG_IP_VERSION_NPU_7_14)
+$(error "Unsupported combination: Multi-instance is not supported on cut 1.1 silicon!")
+endif
+endif
 
 .PHONY: all drv-build drv-clean libfci-build libfci-clean
 
diff --git a/sw/linux-pfeng/pfeng-bman.c b/sw/linux-pfeng/pfeng-bman.c
new file mode 100644
index 0000000..067cd62
--- /dev/null
+++ b/sw/linux-pfeng/pfeng-bman.c
@@ -0,0 +1,431 @@
+/*
+ * Copyright 2020-2021 NXP
+ *
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ */
+
+#include <linux/prefetch.h>
+
+#include "pfe_cfg.h"
+#include "pfeng.h"
+
+#define PFE_RXB_TRUESIZE	2048 /* PAGE_SIZE >> 1 */
+#define PFE_RXB_PAD		NET_SKB_PAD /* add extra space if needed */
+#define PFE_RXB_DMA_SIZE	(SKB_WITH_OVERHEAD(PFE_RXB_TRUESIZE) - PFE_RXB_PAD)
+
+#define PFENG_BMAN_REFILL_THR	32
+
+/* sanity check: we need RX buffering internal support disabled */
+#if (TRUE == PFE_HIF_CHNL_CFG_RX_BUFFERS_ENABLED)
+#error "Invalid PFE HIF channel mode"
+#endif
+
+struct pfeng_rx_map {
+	dma_addr_t dma;
+	struct page *page;
+	u16 page_offset;
+};
+
+struct pfeng_rx_chnl_pool {
+	pfe_hif_chnl_t	*chnl;
+	struct device	*dev;
+	u32				id;
+	u32				depth;
+
+	/* mappings of hif_drv rx ring */
+	struct pfeng_rx_map 		*rx_tbl;
+	u32				rd_idx;
+	u32				wr_idx;
+	u32				alloc_idx;
+	u32				idx_mask;
+};
+
+struct pfeng_tx_map {
+
+	void				*va_addr;
+	addr_t				pa_addr;
+	u32				size;
+	bool				pages;
+	struct sk_buff			*skb;
+	u8				flags;
+};
+
+struct pfeng_tx_chnl_pool {
+	u32				depth;
+
+	/* mappings for hif_drv tx ring */
+	struct pfeng_tx_map		*tx_tbl;
+	u32				rd_idx;
+	u32				wr_idx;
+	u32				idx_mask;
+};
+
+int pfeng_bman_pool_create(struct pfeng_hif_chnl *chnl)
+{
+	struct pfeng_rx_chnl_pool *rx_pool;
+	struct pfeng_tx_chnl_pool *tx_pool;
+
+	/* RX pool */
+	rx_pool = kzalloc(sizeof(*rx_pool), GFP_KERNEL);
+	if (!rx_pool) {
+		dev_err(chnl->dev, "chnl%d: No mem for bman rx_pool\n", pfe_hif_chnl_get_id(chnl->priv));
+		return -ENOMEM;
+	}
+
+	rx_pool->id = pfe_hif_chnl_get_id(chnl->priv);
+	rx_pool->depth = pfe_hif_chnl_get_rx_fifo_depth(chnl->priv);
+	rx_pool->chnl = chnl->priv;
+	rx_pool->dev = chnl->dev;
+
+	rx_pool->rx_tbl = kzalloc(sizeof(struct pfeng_rx_map) * rx_pool->depth, GFP_KERNEL);
+	if (!rx_pool->rx_tbl) {
+		dev_err(chnl->dev, "chnl%d: failed. No mem\n", rx_pool->id);
+		goto err;
+	}
+	rx_pool->rd_idx = 0;
+	rx_pool->wr_idx = 0;
+	rx_pool->alloc_idx = 0;
+	rx_pool->idx_mask = pfe_hif_chnl_get_rx_fifo_depth(chnl->priv) - 1;
+
+	chnl->bman.rx_pool = rx_pool;
+
+	/* TX pool */
+	tx_pool = kzalloc(sizeof(*tx_pool), GFP_KERNEL);
+	if (!rx_pool) {
+		dev_err(chnl->dev, "chnl%d: No mem for bman tx_pool\n", pfe_hif_chnl_get_id(chnl->priv));
+		goto err;
+	}
+
+	tx_pool->depth = pfe_hif_chnl_get_tx_fifo_depth(chnl->priv);
+	tx_pool->tx_tbl = kzalloc(sizeof(struct pfeng_tx_map) * tx_pool->depth, GFP_KERNEL);
+	if (!tx_pool->tx_tbl) {
+		dev_err(chnl->dev, "chnl%d: failed. No mem\n", rx_pool->id);
+		goto err;
+	}
+	tx_pool->rd_idx = 0;
+	tx_pool->wr_idx = 0;
+	tx_pool->idx_mask = pfe_hif_chnl_get_tx_fifo_depth(chnl->priv) - 1;
+
+	chnl->bman.tx_pool = tx_pool;
+
+	return 0;
+
+err:
+	pfeng_bman_pool_destroy(chnl);
+	return -ENOMEM;
+}
+
+void pfeng_bman_pool_destroy(struct pfeng_hif_chnl *chnl)
+{
+	struct pfeng_rx_chnl_pool *rx_pool = (struct pfeng_rx_chnl_pool *)chnl->bman.rx_pool;
+	struct pfeng_tx_chnl_pool *tx_pool = (struct pfeng_tx_chnl_pool *)chnl->bman.tx_pool;
+
+	if (rx_pool) {
+		if(rx_pool->rx_tbl) {
+			kfree(rx_pool->rx_tbl);
+			rx_pool->rx_tbl = NULL;
+		}
+
+		kfree(rx_pool);
+		chnl->bman.rx_pool = NULL;
+	}
+
+	if (tx_pool) {
+		if(tx_pool->tx_tbl) {
+			kfree(tx_pool->tx_tbl);
+			tx_pool->tx_tbl = NULL;
+		}
+
+		kfree(tx_pool);
+		chnl->bman.tx_pool = NULL;
+	}
+
+	return;
+}
+
+bool pfeng_hif_chnl_txconf_check(struct pfeng_hif_chnl *chnl, u32 elems)
+{
+	struct pfeng_tx_chnl_pool *pool = chnl->bman.tx_pool;
+	u32 idx = pool->wr_idx;
+
+	if(unlikely(elems >= pool->depth))
+		return false;
+
+	/* Check if last element is free */
+	idx = (pool->wr_idx + elems) & pool->idx_mask;
+	return !pool->tx_tbl[idx].size;
+}
+
+int pfeng_hif_chnl_txconf_put_map_frag(struct pfeng_hif_chnl *chnl, void *va_addr, addr_t pa_addr, u32 size, struct sk_buff *skb, u8 flags)
+{
+	struct pfeng_tx_chnl_pool *pool = chnl->bman.tx_pool;
+	u32 idx = pool->wr_idx;
+
+	pool->tx_tbl[idx].va_addr = va_addr;
+	pool->tx_tbl[idx].pa_addr = pa_addr;
+	pool->tx_tbl[idx].size = size;
+	pool->tx_tbl[idx].skb = skb;
+#ifdef PFE_CFG_MULTI_INSTANCE_SUPPORT
+	pool->tx_tbl[idx].flags = flags;
+#endif
+
+	pool->wr_idx = (pool->wr_idx + 1) & pool->idx_mask;
+
+	return idx;
+}
+
+u8 pfeng_hif_chnl_txconf_get_flag(struct pfeng_hif_chnl *chnl)
+{
+	struct pfeng_tx_chnl_pool *pool = chnl->bman.tx_pool;
+	u32 idx = pool->rd_idx;
+
+	return pool->tx_tbl[idx].flags;
+}
+
+struct sk_buff *pfeng_hif_chnl_txconf_get_skbuf(struct pfeng_hif_chnl *chnl)
+{
+	struct pfeng_tx_chnl_pool *pool = chnl->bman.tx_pool;
+	u32 idx = pool->rd_idx;
+
+	return pool->tx_tbl[idx].skb;
+}
+
+int pfeng_hif_chnl_txconf_free_map_full(struct pfeng_hif_chnl *chnl)
+{
+	struct pfeng_tx_chnl_pool *pool = chnl->bman.tx_pool;
+	u32 idx = pool->rd_idx;
+	struct sk_buff *skb = pool->tx_tbl[idx].skb;
+	u32 nfrags;
+
+	BUG_ON(!skb);
+
+	nfrags = skb_shinfo(skb)->nr_frags;
+
+	/* Unmap linear part */
+	dma_unmap_single_attrs(chnl->dev, pool->tx_tbl[idx].pa_addr, pool->tx_tbl[idx].size, DMA_TO_DEVICE, 0);
+	pool->tx_tbl[idx].size = 0;
+
+	/* Unmap frags */
+	idx = (idx + 1) & pool->idx_mask;
+	while (nfrags--) {
+		dma_unmap_page(chnl->dev, pool->tx_tbl[idx].pa_addr, pool->tx_tbl[idx].size, DMA_TO_DEVICE);
+		pool->tx_tbl[idx].size = 0;
+
+		idx = (idx + 1) & pool->idx_mask;
+	}
+	pool->rd_idx = idx;
+
+	dev_consume_skb_any(skb);
+
+	return 0;
+}
+
+int pfeng_hif_chnl_txconf_unroll_map_full(struct pfeng_hif_chnl *chnl, u32 idx, u32 nfrags)
+{
+	struct pfeng_tx_chnl_pool *pool = chnl->bman.tx_pool;
+	struct sk_buff *skb = pool->tx_tbl[idx].skb;
+
+	BUG_ON(!skb);
+
+	/* Unmap frags. Unrolling from last to first */
+	idx = (pool->wr_idx - 1) & pool->idx_mask;
+	while (nfrags--) {
+		dma_unmap_page(chnl->dev, pool->tx_tbl[idx].pa_addr, pool->tx_tbl[idx].size, DMA_TO_DEVICE);
+		pool->tx_tbl[idx].size = 0;
+
+		idx = (idx - 1) & pool->idx_mask;
+	}
+
+	/* Unmap linear part */
+	dma_unmap_single_attrs(chnl->dev, pool->tx_tbl[idx].pa_addr, pool->tx_tbl[idx].size, DMA_TO_DEVICE, 0);
+	pool->tx_tbl[idx].size = 0;
+
+	pool->wr_idx = idx;
+
+	return 0;
+}
+
+static inline int pfeng_bman_rx_chnl_pool_unused(struct pfeng_rx_chnl_pool *pool)
+{
+	return pool->depth - pool->wr_idx + pool->rd_idx - 1;
+}
+
+static inline struct pfeng_rx_map *pfeng_bman_get_rx_map(struct pfeng_rx_chnl_pool *pool, u32 idx)
+{
+	return &pool->rx_tbl[idx & pool->idx_mask];
+}
+
+static bool pfeng_bman_buf_alloc_and_map(struct pfeng_rx_chnl_pool *pool, struct pfeng_rx_map *rx_map)
+{
+	struct page *page;
+	dma_addr_t dma;
+
+	/* Request page from DMA safe region */
+	page = __dev_alloc_page(GFP_DMA32 | GFP_ATOMIC | __GFP_NOWARN);
+	if (unlikely(!page))
+		return false;
+
+	/* do dma map */
+	dma = dma_map_page(pool->dev, page, 0, PAGE_SIZE, DMA_FROM_DEVICE);
+	if (unlikely(dma_mapping_error(pool->dev, dma))) {
+		__free_page(page);
+		return false;
+	}
+
+	rx_map->dma = dma;
+	rx_map->page = page;
+	rx_map->page_offset = PFE_RXB_PAD;
+
+	return true;
+}
+
+static int pfeng_hif_chnl_refill_rx_buffer(struct pfeng_hif_chnl *chnl, struct pfeng_rx_map *rx_map)
+{
+	struct pfeng_rx_chnl_pool *pool = chnl->bman.rx_pool;
+	int err;
+
+	/*	Ask for new buffer */
+	if (unlikely(!rx_map->page))
+		if (unlikely(!pfeng_bman_buf_alloc_and_map(pool, rx_map))) {
+			dev_err(chnl->dev, "buffer allocation error\n");
+			return -ENOMEM;
+		}
+
+	/* Add new buffer to ring */
+	err = pfe_hif_chnl_supply_rx_buf(chnl->priv, (void *)(rx_map->dma + rx_map->page_offset), PFE_RXB_DMA_SIZE);
+	if (unlikely(err))
+		return err;
+
+	return 0;
+}
+
+static int pfeng_hif_chnl_refill_rx_pool(struct pfeng_hif_chnl *chnl, int count)
+{
+	struct pfeng_rx_chnl_pool *pool = chnl->bman.rx_pool;
+	struct pfeng_rx_map *rx_map;
+	int i, ret = 0;
+
+	for (i = 0; i < count; i++) {
+		rx_map = pfeng_bman_get_rx_map(pool, pool->wr_idx);
+		ret = pfeng_hif_chnl_refill_rx_buffer(chnl, rx_map);
+		if (unlikely(ret))
+			break;
+		/* push rx map */
+		pool->wr_idx++;
+	}
+
+	pool->alloc_idx = pool->wr_idx;
+
+	return ret;
+}
+
+static bool pfeng_page_reusable(struct page *page)
+{
+	return (!page_is_pfmemalloc(page) && page_ref_count(page) == 1);
+}
+
+static void pfeng_reuse_page(struct pfeng_rx_chnl_pool *pool,
+			     struct pfeng_rx_map *old)
+{
+	struct pfeng_rx_map *new;
+
+	/* next buf mapping that may reuse a page */
+	new = pfeng_bman_get_rx_map(pool, pool->alloc_idx);
+
+	/* copy page reference */
+	*new = *old;
+
+	/* advance page allocation idx */
+	pool->alloc_idx++;
+}
+
+static struct sk_buff *pfeng_rx_map_buff_to_skb(struct pfeng_rx_chnl_pool *pool, u32 rx_len)
+{
+	struct pfeng_rx_map *rx_map;
+	struct sk_buff *skb;
+	void *va;
+
+	rx_map = pfeng_bman_get_rx_map(pool, pool->rd_idx);
+
+	/* get rx buffer */
+	dma_sync_single_range_for_cpu(pool->dev, rx_map->dma,
+				      rx_map->page_offset,
+				      rx_len, DMA_FROM_DEVICE);
+
+	va = page_address(rx_map->page) + rx_map->page_offset;
+	skb = build_skb(va - PFE_RXB_PAD, PFE_RXB_TRUESIZE);
+	if (unlikely(!skb))
+		return NULL;
+
+	skb_reserve(skb, PFE_RXB_PAD);
+	__skb_put(skb, rx_len);
+
+	/* put rx buffer */
+	if (likely(pfeng_page_reusable(rx_map->page))) {
+		rx_map->page_offset ^= PFE_RXB_TRUESIZE;
+		page_ref_inc(rx_map->page);
+
+		pfeng_reuse_page(pool, rx_map);
+
+		/* dma sync for use by device */
+		dma_sync_single_range_for_device(pool->dev, rx_map->dma,
+						 rx_map->page_offset,
+						 PFE_RXB_DMA_SIZE,
+						 DMA_FROM_DEVICE);
+	} else {
+		dma_unmap_page(pool->dev, rx_map->dma, PAGE_SIZE, DMA_FROM_DEVICE);
+	}
+
+	/* drop reference as page was reused at alloc_idx, or was unmaped */
+	rx_map->page = NULL;
+	/* pull rx map */
+	pool->rd_idx++;
+
+	return skb;
+}
+
+struct sk_buff *pfeng_hif_chnl_receive_pkt(struct pfeng_hif_chnl *chnl, u32 queue)
+{
+	struct sk_buff *skb;
+	void *buf_pa;
+	u32 rx_len;
+	bool_t lifm;
+
+	if (unlikely(pfeng_bman_rx_chnl_pool_unused(chnl->bman.rx_pool) >= PFENG_BMAN_REFILL_THR))
+		pfeng_hif_chnl_refill_rx_pool(chnl, PFENG_BMAN_REFILL_THR);
+
+	/*	Get RX buffer */
+	if (EOK != pfe_hif_chnl_rx(chnl->priv, &buf_pa, &rx_len, &lifm))
+	{
+		return NULL;
+	}
+
+	/*  Get buffer VA */
+	skb = pfeng_rx_map_buff_to_skb(chnl->bman.rx_pool, rx_len);
+	if (unlikely(!skb)) {
+		dev_err(chnl->dev, "chnl%d: pull VA failed\n", chnl->idx);
+		return NULL;
+	}
+	prefetch(skb->data);
+
+	return skb;
+}
+
+int pfeng_hif_chnl_fill_rx_buffers(struct pfeng_hif_chnl *chnl)
+{
+	int cnt = 0;
+	int ret;
+
+	while (pfe_hif_chnl_can_accept_rx_buf(chnl->priv)) {
+
+		preempt_disable();
+		ret = pfeng_hif_chnl_refill_rx_pool(chnl, 1);
+		preempt_enable();
+		if (ret)
+			break;
+		cnt++;
+	}
+
+	return cnt;
+}
diff --git a/sw/linux-pfeng/pfeng-debugfs.c b/sw/linux-pfeng/pfeng-debugfs.c
index bee0903..778ebcc 100644
--- a/sw/linux-pfeng/pfeng-debugfs.c
+++ b/sw/linux-pfeng/pfeng-debugfs.c
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018, 2020-2021 NXP
+ * Copyright 2018,2020-2021 NXP
  *
  * SPDX-License-Identifier: GPL-2.0
  *
@@ -10,11 +10,10 @@
 
 #include "pfe_cfg.h"
 #include "pfeng.h"
+#include "fci.h"
 
 #if defined(CONFIG_DEBUG_FS)
 
-/* enabled hif channels */
-static u32 hif_chnl_mask = 0;
 static u32 *msg_verbosity_ptr;
 
 #define DEBUGFS_BUF_SIZE 4096
@@ -56,14 +55,14 @@ static const struct file_operations pfeng_##ename##_fops = {			\
 };
 
 #ifdef PFE_CFG_PFE_MASTER
-CREATE_DEBUGFS_ENTRY_TYPE(hif);
 CREATE_DEBUGFS_ENTRY_TYPE(emac);
+CREATE_DEBUGFS_ENTRY_TYPE(l2br);
 CREATE_DEBUGFS_ENTRY_TYPE(class);
 CREATE_DEBUGFS_ENTRY_TYPE(bmu);
 CREATE_DEBUGFS_ENTRY_TYPE(gpi);
 CREATE_DEBUGFS_ENTRY_TYPE(tmu);
 CREATE_DEBUGFS_ENTRY_TYPE(util);
-CREATE_DEBUGFS_ENTRY_TYPE(l2br);
+CREATE_DEBUGFS_ENTRY_TYPE(fp);
 #endif
 CREATE_DEBUGFS_ENTRY_TYPE(hif_chnl);
 
@@ -81,10 +80,6 @@ CREATE_DEBUGFS_ENTRY_TYPE(hif_chnl);
 		}								\
 	}
 
-#define ADD_DEBUGFS_CHNL_XSTATS_ENTRY(name)					\
-	scnprintf(fname, sizeof(fname), "%s", TOSTRING(name));			\
-	debugfs_create_u64(fname, 0444, ndev->chnl_sc.dentry, &ndev->xstats.name);
-
 int pfeng_debugfs_create(struct pfeng_priv *priv)
 {
 	struct device *dev = &priv->pdev->dev;
@@ -107,76 +102,56 @@ int pfeng_debugfs_create(struct pfeng_priv *priv)
 	}
 
 #ifdef PFE_CFG_PFE_MASTER
-	ADD_DEBUGFS_ENTRY("class", class, priv->dbgfs, priv->pfe->classifier, &dsav);
-	ADD_DEBUGFS_ENTRY("l2br", l2br, priv->dbgfs, priv->pfe->l2_bridge, &dsav);
-	ADD_DEBUGFS_ENTRY("hif", hif, priv->dbgfs, priv->pfe->hif, &dsav);
-	ADD_DEBUGFS_ENTRY("bmu1", bmu, priv->dbgfs, priv->pfe->bmu[0], &dsav);
-	ADD_DEBUGFS_ENTRY("bmu2", bmu, priv->dbgfs, priv->pfe->bmu[1], &dsav);
-	ADD_DEBUGFS_ENTRY("egpi1", gpi, priv->dbgfs, priv->pfe->gpi[0], &dsav);
-	ADD_DEBUGFS_ENTRY("egpi2", gpi, priv->dbgfs, priv->pfe->gpi[1], &dsav);
-	ADD_DEBUGFS_ENTRY("egpi3", gpi, priv->dbgfs, priv->pfe->gpi[2], &dsav);
-	ADD_DEBUGFS_ENTRY("tmu", tmu, priv->dbgfs, priv->pfe->tmu, &dsav);
-	ADD_DEBUGFS_ENTRY("util", util, priv->dbgfs, priv->pfe->util, &dsav);
-	ADD_DEBUGFS_ENTRY("emac0", emac, priv->dbgfs, priv->pfe->emac[0], &dsav);
-	ADD_DEBUGFS_ENTRY("emac1", emac, priv->dbgfs, priv->pfe->emac[1], &dsav);
-	ADD_DEBUGFS_ENTRY("emac2", emac, priv->dbgfs, priv->pfe->emac[2], &dsav);
+	ADD_DEBUGFS_ENTRY("class", class, priv->dbgfs, priv->pfe_platform->classifier, &dsav);
+	ADD_DEBUGFS_ENTRY("l2br", l2br, priv->dbgfs, priv->pfe_platform->l2_bridge, &dsav);
+	ADD_DEBUGFS_ENTRY("bmu1", bmu, priv->dbgfs, priv->pfe_platform->bmu[0], &dsav);
+	ADD_DEBUGFS_ENTRY("bmu2", bmu, priv->dbgfs, priv->pfe_platform->bmu[1], &dsav);
+	ADD_DEBUGFS_ENTRY("egpi1", gpi, priv->dbgfs, priv->pfe_platform->gpi[0], &dsav);
+	ADD_DEBUGFS_ENTRY("egpi2", gpi, priv->dbgfs, priv->pfe_platform->gpi[1], &dsav);
+	ADD_DEBUGFS_ENTRY("egpi3", gpi, priv->dbgfs, priv->pfe_platform->gpi[2], &dsav);
+	ADD_DEBUGFS_ENTRY("tmu", tmu, priv->dbgfs, priv->pfe_platform->tmu, &dsav);
+	ADD_DEBUGFS_ENTRY("util", util, priv->dbgfs, priv->pfe_platform->util, &dsav);
+	ADD_DEBUGFS_ENTRY("fp", fp, priv->dbgfs, priv->pfe_platform->classifier, &dsav);
+	if (priv->emac[0].enabled)
+		ADD_DEBUGFS_ENTRY("emac0", emac, priv->dbgfs, priv->pfe_platform->emac[0], &dsav);
+	if (priv->emac[1].enabled)
+		ADD_DEBUGFS_ENTRY("emac1", emac, priv->dbgfs, priv->pfe_platform->emac[1], &dsav);
+	if (priv->emac[2].enabled)
+		ADD_DEBUGFS_ENTRY("emac2", emac, priv->dbgfs, priv->pfe_platform->emac[2], &dsav);
 #endif
 
 	return 0;
 }
 
-int pfeng_debugfs_add_hif_chnl(struct pfeng_priv *priv, struct pfeng_ndev *ndev)
+int pfeng_debugfs_add_hif_chnl(struct pfeng_priv *priv, u32 idx)
 {
 	struct device *dev = &priv->pdev->dev;
+	struct pfeng_hif_chnl *chnl = &priv->hif_chnl[idx];
 	char fname[32];
 	struct dentry *dsav = NULL;
 
 	if (!priv->dbgfs)
 		return -ENODEV;
 
-	if (ndev->eth->hif_chnl_sc >= HIF_CFG_MAX_CHANNELS)
-		return -EINVAL;
-
-	if (ndev->chnl_sc.dentry)
-		/* already created */
-		return 0;
+	/* Don't create if particular HIF channel is disabled */
+	if (chnl->status == PFENG_HIF_STATUS_DISABLED)
+		return -ENODEV;
 
 	/* create subdirectory 'chn%d' */
-	scnprintf(fname, sizeof(fname), "chnl%d", ndev->eth->hif_chnl_sc);
-	ndev->chnl_sc.dentry = debugfs_create_dir(fname, priv->dbgfs);
-	if (!ndev->chnl_sc.dentry) {
-		dev_err(dev, "debugfs create directory chnl%d failed\n", ndev->eth->hif_chnl_sc);
-		return -EINVAL;
-	}
-
-	/* remember new chnl number */
-	hif_chnl_mask |= 1 << ndev->eth->hif_chnl_sc;
+	scnprintf(fname, sizeof(fname), "hif%d", idx);
 
 	/* add members to the subdirectory */
-	ADD_DEBUGFS_ENTRY("rings", hif_chnl, ndev->chnl_sc.dentry, ndev->chnl_sc.priv, &dsav);
-
-	ADD_DEBUGFS_CHNL_XSTATS_ENTRY(napi_poll);
-	ADD_DEBUGFS_CHNL_XSTATS_ENTRY(napi_poll_onrun);
-	ADD_DEBUGFS_CHNL_XSTATS_ENTRY(napi_poll_resched);
-	ADD_DEBUGFS_CHNL_XSTATS_ENTRY(napi_poll_completed);
-	ADD_DEBUGFS_CHNL_XSTATS_ENTRY(napi_poll_rx);
-	ADD_DEBUGFS_CHNL_XSTATS_ENTRY(txconf_loop);
-	ADD_DEBUGFS_CHNL_XSTATS_ENTRY(txconf);
-	ADD_DEBUGFS_CHNL_XSTATS_ENTRY(tx_busy);
-	ADD_DEBUGFS_CHNL_XSTATS_ENTRY(tx_pkt_frags);
-	ADD_DEBUGFS_CHNL_XSTATS_ENTRY(tx_pkt_frag_deep);
-#ifdef PFE_CFG_MULTI_INSTANCE_SUPPORT
-        ADD_DEBUGFS_CHNL_XSTATS_ENTRY(ihc_rx);
-        ADD_DEBUGFS_CHNL_XSTATS_ENTRY(ihc_tx);
-#endif
+	ADD_DEBUGFS_ENTRY(fname, hif_chnl, priv->dbgfs, chnl->priv, &dsav);
 
 	return 0;
 }
 
 void pfeng_debugfs_remove(struct pfeng_priv *priv)
 {
-	if (priv->dbgfs)
+	if (priv->dbgfs) {
 		debugfs_remove_recursive(priv->dbgfs);
+		priv->dbgfs = NULL;
+	}
 }
 
 #else
diff --git a/sw/linux-pfeng/pfeng-drv.c b/sw/linux-pfeng/pfeng-drv.c
index c6c6915..5275876 100644
--- a/sw/linux-pfeng/pfeng-drv.c
+++ b/sw/linux-pfeng/pfeng-drv.c
@@ -1,20 +1,65 @@
 /*
- * Copyright 2020-2021 NXP
+ * Copyright 2019-2021 NXP
  *
  * SPDX-License-Identifier: GPL-2.0
  *
  */
 
-#include <linux/version.h>
+#include <linux/platform_device.h>
 #include <linux/module.h>
-#include <linux/rtnetlink.h>
+#include <linux/io.h>
+#include <linux/phy.h>
 #include <linux/clk.h>
-#include <linux/kthread.h>
+#include <linux/of.h>
+#include <linux/of_net.h>
+#include <linux/of_device.h>
+#include <linux/of_reserved_mem.h>
+#include <linux/of_address.h>
+#include <linux/of_mdio.h>
+#include <linux/of_irq.h>
+#include <linux/dma-mapping.h>
+#include <linux/reset.h>
+#include <linux/processor.h>
+#include <linux/pinctrl/consumer.h>
+#include <soc/s32/revision.h>
 
 #include "pfe_cfg.h"
-#include "oal.h"
-#include "pfe_platform.h"
-#include "pfe_hif_drv.h"
+
+/*
+ * S32G soc specific addresses
+ */
+#define S32G_MAIN_GPR_PFE_COH_EN		0x0
+#define S32G_MAIN_GPR_PFE_PWR_CTRL		0x20
+#define GPR_PFE_COH_EN_UTIL			(1 << 5)
+#define GPR_PFE_COH_EN_HIF3			(1 << 4)
+#define GPR_PFE_COH_EN_HIF2			(1 << 3)
+#define GPR_PFE_COH_EN_HIF1			(1 << 2)
+#define GPR_PFE_COH_EN_HIF0			(1 << 1)
+#define GPR_PFE_COH_EN_HIF_0_3_MASK		(GPR_PFE_COH_EN_HIF0 | GPR_PFE_COH_EN_HIF1 | \
+						 GPR_PFE_COH_EN_HIF2 | GPR_PFE_COH_EN_HIF3)
+#define GPR_PFE_COH_EN_DDR			(1 << 0)
+#define S32G_MAIN_GPR_PFE_EMACX_INTF_SEL	0x4
+#define GPR_PFE_EMACn_PWR_ACK(n)		(1 << (9 + n)) /* RD Only */
+#define GPR_PFE_EMACn_PWR_ISO(n)		(1 << (6 + n))
+#define GPR_PFE_EMACn_PWR_DWN(n)		(1 << (3 + n))
+#define GPR_PFE_EMACn_PWR_CLAMP(n)		(1 << (0 + n))
+#define GPR_PFE_EMAC_IF_MII			(1)
+#define GPR_PFE_EMAC_IF_RMII			(9)
+#define GPR_PFE_EMAC_IF_RGMII			(2)
+#define GPR_PFE_EMAC_IF_SGMII			(0)
+#define GPR_PFE_EMACn_IF(n,i)			(i << (n * 4))
+
+/* Logical interface represents DT ethernet@ node */
+#define PFENG_DT_COMPATIBLE_LOGIF		"fsl,pfeng-logif"
+/* HIF represents DT hif@ node */
+#define PFENG_DT_COMPATIBLE_HIF			"fsl,pfeng-hif"
+/* EMAC represents DT emac@ node */
+#define PFENG_DT_COMPATIBLE_EMAC		"fsl,pfeng-emac"
+/* MDIO represents DT mdio@ node */
+#define PFENG_DT_COMPATIBLE_MDIO		"fsl,pfeng-mdio"
+
+/* Major IP version for cut2.0 */
+#define PFE_IP_MAJOR_VERSION_CUT2		2
 
 #include "pfeng.h"
 
@@ -29,12 +74,30 @@ MODULE_DESCRIPTION("PFEng SLAVE driver");
 #endif
 MODULE_VERSION(PFENG_DRIVER_VERSION);
 
+static const struct of_device_id pfeng_id_table[] = {
+#ifdef PFE_CFG_PFE_MASTER
+#if (PFE_CFG_IP_VERSION < PFE_CFG_IP_VERSION_NPU_7_14a)
+	{ .compatible = "fsl,s32g274a-pfeng-cut1.1" },
+#else
+	{ .compatible = "fsl,s32g274a-pfeng" },
+#endif /* PFE_CFG_IP_VERSION_NPU_7_14a */
+#elif PFE_CFG_PFE_SLAVE
+	{ .compatible = "fsl,s32g274a-pfeng-slave" },
+#endif
+	{ /* sentinel */ }
+};
+MODULE_DEVICE_TABLE(of, pfeng_id_table);
+
 static const u32 default_msg_level = (
 	NETIF_MSG_DRV | NETIF_MSG_PROBE |
 	NETIF_MSG_LINK | NETIF_MSG_IFUP |
 	NETIF_MSG_IFDOWN | NETIF_MSG_TIMER
 );
 
+static int msg_verbosity = PFE_CFG_VERBOSITY_LEVEL;
+module_param(msg_verbosity, int, 0644);
+MODULE_PARM_DESC(msg_verbosity, "\t 0 - 9, default 4");
+
 #ifdef PFE_CFG_PFE_MASTER
 static char *fw_class_name;
 module_param(fw_class_name, charp, 0444);
@@ -45,319 +108,1220 @@ module_param(fw_util_name, charp, 0444);
 MODULE_PARM_DESC(fw_util_name, "\t The name of UTIL firmware file (default: read from device-tree or " PFENG_FW_UTIL_NAME ")");
 #endif
 
-static int msg_verbosity = PFE_CFG_VERBOSITY_LEVEL;
-module_param(msg_verbosity, int, 0644);
-MODULE_PARM_DESC(msg_verbosity, "\t 0 - 9, default 4");
-
 #ifdef PFE_CFG_PFE_SLAVE
 static int master_ihc_chnl = HIF_CFG_MAX_CHANNELS;
 module_param(master_ihc_chnl, int, 0644);
 MODULE_PARM_DESC(master_ihc_chnl, "\t 0 - <max-hif-chn-number>, default read from DT or invalid");
 #endif
 
-/**
- * @brief		Common HIF channel interrupt service routine
- * @details		Manage common HIF channel interrupt
- * @details		See the oal_irq_handler_t
- */
-#ifdef OAL_IRQ_MODE
-static bool_t pfeng_hif_chnl_isr(void *arg)
+#ifdef PFE_CFG_PFE_MASTER
+
+#if (PFE_CFG_IP_VERSION == PFE_CFG_IP_VERSION_NPU_7_14a)
+static int pfeng_s32g_set_port_coherency(struct pfeng_priv *priv)
+{
+	struct device *dev = &priv->pdev->dev;
+	void *syscon;
+	int ret = 0;
+	u32 val;
+
+	syscon = ioremap(priv->syscon.start, priv->syscon.end - priv->syscon.start);
+	if(!syscon) {
+		dev_err(dev, "cannot map GPR, aborting (INTF_SEL)\n");
+		return -EIO;
+	}
+
+	val = hal_read32(syscon + S32G_MAIN_GPR_PFE_COH_EN);
+	val |= GPR_PFE_COH_EN_HIF_0_3_MASK;
+	hal_write32(val, syscon + S32G_MAIN_GPR_PFE_COH_EN);
+
+	val = hal_read32(syscon + S32G_MAIN_GPR_PFE_COH_EN);
+	if ((val & GPR_PFE_COH_EN_HIF_0_3_MASK) == GPR_PFE_COH_EN_HIF_0_3_MASK) {
+		dev_info(dev, "PFE port coherency enabled, mask 0x%x\n", val);
+	} else {
+		dev_err(dev, "Failed to enable port coherency (mask 0x%x)\n", val);
+		ret = -EINVAL;
+	}
+
+	iounmap(syscon);
+	return ret;
+}
+#else
+#define pfeng_s32g_set_port_coherency(priv)	(int)0
+#endif
+
+static unsigned int xlate_to_s32g_intf(unsigned int n, phy_interface_t intf)
+{
+	switch(intf) {
+		default: /* SGMII is the default */
+		case PHY_INTERFACE_MODE_SGMII:
+			return GPR_PFE_EMACn_IF(n, GPR_PFE_EMAC_IF_SGMII);
+
+		case PHY_INTERFACE_MODE_RGMII:
+		case PHY_INTERFACE_MODE_RGMII_ID:
+		case PHY_INTERFACE_MODE_RGMII_RXID:
+		case PHY_INTERFACE_MODE_RGMII_TXID:
+			return GPR_PFE_EMACn_IF(n, GPR_PFE_EMAC_IF_RGMII);
+
+		case PHY_INTERFACE_MODE_RMII:
+			return GPR_PFE_EMACn_IF(n, GPR_PFE_EMAC_IF_RMII);
+
+		case PHY_INTERFACE_MODE_MII:
+			return GPR_PFE_EMACn_IF(n, GPR_PFE_EMAC_IF_MII);
+	}
+}
+
+static int pfeng_s32g_set_emac_interfaces(struct pfeng_priv *priv, phy_interface_t emac0_intf, phy_interface_t emac1_intf, phy_interface_t emac2_intf)
+{
+	void *syscon;
+	u32 val;
+
+	syscon = ioremap(priv->syscon.start, priv->syscon.end - priv->syscon.start);
+	if(!syscon) {
+		dev_err(&priv->pdev->dev, "cannot map GPR, aborting (INTF_SEL)\n");
+		return -EIO;
+	}
+	/* set up interfaces */
+	val = xlate_to_s32g_intf(0, emac0_intf) | xlate_to_s32g_intf(1, emac1_intf) | xlate_to_s32g_intf(2, emac2_intf);
+	hal_write32(val, syscon + S32G_MAIN_GPR_PFE_EMACX_INTF_SEL);
+
+	dev_info(&priv->pdev->dev, "Interface selected: EMAC0: 0x%x EMAC1: 0x%x EMAC2: 0x%x\n", emac0_intf, emac1_intf, emac2_intf);
+
+	/* power down and up EMACs */
+	hal_write32(GPR_PFE_EMACn_PWR_DWN(0) | GPR_PFE_EMACn_PWR_DWN(1) | GPR_PFE_EMACn_PWR_DWN(2), syscon + S32G_MAIN_GPR_PFE_PWR_CTRL);
+	usleep_range(100, 500);
+	hal_write32(0, syscon + S32G_MAIN_GPR_PFE_PWR_CTRL);
+
+	iounmap(syscon);
+
+	return 0;
+}
+
+static int pfeng_of_get_phy_mode(struct device_node *np, phy_interface_t *mode)
+{
+#if LINUX_VERSION_CODE < KERNEL_VERSION(5,5,0)
+	int ret = of_get_phy_mode(np);
+
+	*mode = PHY_INTERFACE_MODE_NA;
+	if (ret > 0) {
+		*mode = ret;
+		ret = 0;
+	}
+
+	return ret;
 #else
-static irqreturn_t pfeng_chnl_direct_isr(int irq, void *arg)
+	return of_get_phy_mode(np, mode);
 #endif
+}
+
+#endif /* PFE_CFG_PFE_MASTER */
+
+static int release_config_from_dt(struct pfeng_priv *priv)
 {
-	pfe_hif_chnl_t *chnl = (pfe_hif_chnl_t *)arg;
+#ifdef PFE_CFG_PFE_MASTER
+	int id;
+
+	/* Free EMAC clocks */
+	for (id = 0; id < PFENG_PFE_EMACS; id++) {
+		struct pfeng_emac *emac = &priv->emac[id];
+#if !defined(PFENG_CFG_LINUX_NO_SERDES_SUPPORT)
+		struct device *dev = &priv->pdev->dev;
+
+		/* Remove device depeendency for SerDes */
+		if (emac->intf_mode == PHY_INTERFACE_MODE_SGMII && emac->serdes_phy)
+			device_link_remove(dev, &emac->serdes_phy->dev);
+#endif /* !PFENG_CFG_LINUX_NO_SERDES_SUPPORT */
+
+		/* EMAC RX clk */
+		if (emac->rx_clk) {
+			clk_disable_unprepare(emac->rx_clk);
+			emac->rx_clk = NULL;
+		}
+		/* EMAC TX clk */
+		if (emac->tx_clk) {
+			clk_disable_unprepare(emac->tx_clk);
+			emac->tx_clk = NULL;
+		}
+	}
+#endif /* PFE_CFG_PFE_MASTER */
+
+	return 0;
+}
 
-	/*	Disable HIF channel interrupts */
-	pfe_hif_chnl_irq_mask(chnl);
+static int pfeng_of_get_addr(struct device_node *node)
+{
+	const __be32 *valp;
 
-	/*	Call HIF channel ISR */
-	pfe_hif_chnl_isr(chnl);
+	valp = of_get_address(node, 0, NULL, NULL);
+	if (!valp)
+		return -EINVAL;
+
+	return be32_to_cpu(*valp);
+}
+
+#if defined(PFE_CFG_PFE_MASTER) && !defined(PFENG_CFG_LINUX_NO_SERDES_SUPPORT)
+static bool pfeng_manged_inband(struct device_node *node)
+{
+	const char *managed;
 
-	/*	Enable HIF channel interrupts */
-	pfe_hif_chnl_irq_unmask(chnl);
+	if (of_property_read_string(node, "managed", &managed) == 0 &&
+	    strcmp(managed, "in-band-status") == 0)
+		return true;
 
-	return IRQ_HANDLED;
+	return false;
 }
+#endif /* PFENG_CFG_LINUX_NO_SERDES_SUPPORT */
 
-int pfeng_drv_cfg_get_emac_intf_mode(struct pfeng_priv *priv, u8 id)
+static int create_config_from_dt(struct pfeng_priv *priv)
 {
-	struct pfeng_eth *eth;
+	struct device *dev = &priv->pdev->dev;
+	struct device_node *np = priv->pdev->dev.of_node;
+	pfe_platform_config_t *pfe_cfg = priv->pfe_cfg;
+	struct resource *res;
+	struct device_node *child = NULL;
+	int irq, ret = 0;
+	u32 propval, emac_list = 0;
+
+	/* Get the base address of device */
+	res = platform_get_resource(priv->pdev, IORESOURCE_MEM, 0);
+	if(unlikely(!res)) {
+		dev_err(dev, "Cannot find mem resource, aborting\n");
+		return -EIO;
+	}
+	pfe_cfg->cbus_base = res->start;
+	pfe_cfg->cbus_len = res->end - res->start + 1;
+	dev_info(dev, "Cbus addr 0x%llx size 0x%llx\n", pfe_cfg->cbus_base, pfe_cfg->cbus_len);
+
+#ifdef PFE_CFG_PFE_MASTER
+	/* S32G Main GPRs */
+	res = platform_get_resource(priv->pdev, IORESOURCE_MEM, 1);
+	if(unlikely(!res)) {
+		dev_err(dev, "Cannot find syscon resource, aborting\n");
+		return -EIO;
+	}
+	priv->syscon.start = res->start;
+	priv->syscon.end = res->end;
+	dev_dbg(dev, "Syscon addr 0x%llx size 0x%llx\n", priv->syscon.start, priv->syscon.end - priv->syscon.start);
+
+	/* Firmware CLASS name */
+	if (of_find_property(np, "fsl,fw-class-name", NULL))
+		if (!of_property_read_string(np, "fsl,fw-class-name", &priv->fw_class_name)) {
+			dev_info(dev, "fsl,fw-class-name: %s\n", priv->fw_class_name);
+		}
 
-	list_for_each_entry(eth, &priv->plat.eth_list, lnode) {
-		if(eth->emac_id == id)
-			return eth->intf_mode;
+	/* Firmware UTIL name */
+	if (of_find_property(np, "fsl,fw-util-name", NULL))
+		if (!of_property_read_string(np, "fsl,fw-util-name", &priv->fw_util_name)) {
+			dev_info(dev, "fsl,fw-util-name: %s\n", priv->fw_util_name);
+		}
+
+	/* IRQ bmu */
+	irq = platform_get_irq_byname(priv->pdev, "bmu");
+	if (irq < 0) {
+		dev_err(dev, "Cannot find irq resource 'bmu', aborting\n");
+		return -EIO;
+	}
+	pfe_cfg->irq_vector_bmu = irq;
+	dev_dbg(dev, "irq 'bmu' : %u\n", irq);
+
+	/* IRQ upe/gpt */
+	irq = platform_get_irq_byname(priv->pdev, "upegpt");
+	if (irq < 0) {
+		dev_err(dev, "Cannot find irq resource 'upegpt', aborting\n");
+		return -EIO;
 	}
+	pfe_cfg->irq_vector_upe_gpt = irq;
+	dev_dbg(dev, "irq 'upegpt' : %u\n", irq);
+
+	/* IRQ safety */
+	irq = platform_get_irq_byname(priv->pdev, "safety");
+	if (irq < 0) {
+		dev_err(dev, "Cannot find irq resource 'safety', aborting\n");
+		return -EIO;
+	}
+	pfe_cfg->irq_vector_safety = irq;
+	dev_dbg(dev, "irq 'safety' : %u\n", irq);
+#endif /* PFE_CFG_PFE_MASTER */
+
+#ifdef PFE_CFG_PFE_SLAVE
+	if (of_property_read_u32(np, "fsl,pfeng-master-hif-channel", &propval)) {
+		dev_err(dev, "Invalid hif-channel value");
+		priv->ihc_master_chnl = HIF_CFG_MAX_CHANNELS;
+	} else {
+		priv->ihc_master_chnl = propval;
+		dev_info(dev, "MASTER IHC channel: %d", propval);
+	}
+#endif
+
+	/*
+	 * Network interface
+	 * ("fsl,pfeng-logif")
+	 *
+	 * Describes Linux network interface
+	 */
+	for_each_available_child_of_node(np, child) {
+		struct pfeng_netif_cfg *netif_cfg;
+		struct device_node *dn;
+		int id, i, hifs;
+		u32 hifmap;
+
+		if (!of_device_is_available(child))
+			continue;
+
+		if (!of_device_is_compatible(child, PFENG_DT_COMPATIBLE_LOGIF))
+			continue;
+
+
+		netif_cfg = devm_kzalloc(dev, sizeof(*netif_cfg), GFP_KERNEL);
+		if (!netif_cfg) {
+			dev_err(dev, "No memory for netif config\n");
+			ret = -ENOMEM;
+			goto err;
+		}
+
+		/* Linux interface name */
+		if (!of_find_property(child, "fsl,pfeng-if-name", NULL) ||
+			of_property_read_string(child, "fsl,pfeng-if-name", &netif_cfg->name)) {
+			dev_warn(dev, "Valid ethernet name is missing (property 'fsl,pfeng-if-name')\n");
+
+			continue;
+		}
+		dev_dbg(dev, "netif name: %s", netif_cfg->name);
+
+		/* MAC eth address */
+		netif_cfg->macaddr = (u8 *)of_get_mac_address(child);
+		if (netif_cfg->macaddr)
+			dev_dbg(dev, "DT mac addr: %pM", netif_cfg->macaddr);
+
+#ifdef PFE_CFG_PFE_MASTER
+		netif_cfg->tx_inject = true;
+#else
+		/* Must be FALSE for SLAVE driver */
+		netif_cfg->tx_inject = false;
+#endif /* PFE_CFG_PFE_MASTER */
+
+#ifdef PFE_CFG_PFE_MASTER
+		/* EMAC link */
+		dn = of_parse_phandle(child, "fsl,pfeng-emac-link", 0);
+		if (!dn) {
+			dev_err(dev, "Required EMAC link is missing\n");
+			ret = -EINVAL;
+			goto err;
+		}
+		id = pfeng_of_get_addr(dn);
+		if (id < 0) {
+			dev_err(dev, "Required EMAC link is invalid\n");
+			ret = -EINVAL;
+			goto err;
+		}
+#else
+		/* EMAC id */
+		if (!of_find_property(child, "fsl,pfeng-emac-id", NULL)) {
+			dev_err(dev, "The required EMAC id is missing\n");
+			ret = -EINVAL;
+			goto err;
+		}
+		ret = of_property_read_u32(child, "fsl,pfeng-emac-id", &id);
+		if (ret || id > 2) {
+			dev_err(dev, "The EMAC id is invalid: %d\n", id);
+			ret = -EINVAL;
+			goto err;
+		}
+#endif /* PFE_CFG_PFE_MASTER */
+
+		netif_cfg->emac = id;
+		emac_list |= 1 << id;
+		dev_info(dev, "logif(%s) EMAC: %u", netif_cfg->name, netif_cfg->emac);
+
+		/* HIF phandle(s) */
+		hifmap = 0;
+		hifs = 0;
+		for (i = 0; i < PFENG_PFE_HIF_CHANNELS; i++) {
+			dn = of_parse_phandle(child, "fsl,pfeng-hif-channels", i);
+			if (dn) {
+				id = pfeng_of_get_addr(dn);
+				if (id < 0) {
+					dev_err(dev, "HIF phandle %i is invalid\n", i);
+					ret = -EINVAL;
+					goto err;
+				}
+
+				hifmap |= 1 << id;
+				hifs++;
+				continue;
+			}
+
+			/* End of phandles, got at least one, good */
+			if (!dn && hifs)
+				break;
+
+			/* No any phandle retieved */
+			dev_err(dev, "Required HIF phandle is missing\n");
+			ret = -EINVAL;
+			goto err;
+		}
+		netif_cfg->hifmap = hifmap;
+		netif_cfg->hifs = hifs;
+		dev_info(dev, "logif(%s) HIFs: count %d map %02x", netif_cfg->name, netif_cfg->hifs, netif_cfg->hifmap);
+
+		netif_cfg->dn = of_node_get(child);
+#ifdef PFE_CFG_PFE_MASTER
+		{
+			struct pfeng_emac *emac = &priv->emac[netif_cfg->emac];
+			__maybe_unused struct device_node *phy_handle;
+
+			/* fixed-link check */
+			emac->link_an =  MLO_AN_PHY;
+			if (of_phy_is_fixed_link(child))
+				emac->link_an = MLO_AN_FIXED;
+
+#if !defined(PFENG_CFG_LINUX_NO_SERDES_SUPPORT)
+			if (pfeng_manged_inband(child)) {
+				emac->link_an = MLO_AN_INBAND;
+				dev_info(dev, "SGMII AN enabled on EMAC%d\n", netif_cfg->emac);
+			}
+
+			emac->phyless = false;
+			phy_handle = of_parse_phandle(child, "phy-handle", 0);
+			if (emac->link_an == MLO_AN_INBAND && !phy_handle) {
+				dev_info(dev, "EMAC%d PHY less SGMII\n", netif_cfg->emac);
+				emac->phyless = true;
+			}
+#endif /* PFENG_CFG_LINUX_NO_SERDES_SUPPORT */
+		}
+#endif /* PFE_CFG_PFE_MASTER */
+
+		list_add_tail(&netif_cfg->lnode, &priv->netif_cfg_list);
+	} /* foreach PFENG_DT_COMPATIBLE_LOGIF */
+
+#ifdef PFE_CFG_PFE_MASTER
+	/*
+	 * EMAC
+	 * ("fsl,pfeng-emac")
+	 *
+	 * Describes PFE_EMAC block
+	 */
+	for_each_available_child_of_node(np, child) {
+		int id;
+		phy_interface_t intf_mode;
+		struct pfeng_emac *emac;
+		char tmp[32];
+
+		if (!of_device_is_available(child))
+			continue;
+
+		if (!of_device_is_compatible(child, PFENG_DT_COMPATIBLE_EMAC))
+			continue;
+
+		id = pfeng_of_get_addr(child);
+		if (id < 0)
+			continue;
+
+		if (id >= PFENG_PFE_EMACS)
+			continue;
+
+		emac = &priv->emac[id];
+
+		/* Link DT node for embedded MDIO bus */
+		emac->dn_mdio = of_get_compatible_child(child, PFENG_DT_COMPATIBLE_MDIO);
+
+		if (!(emac_list & (1 << id))) {
+			dev_info(dev, "EMAC%d phy unused, skipping phy setting", id);
+			emac->enabled = true;
+			continue;
+		}
+
+		 /* Get max speed */
+		if (of_property_read_u32(child, "max-speed", &emac->max_speed)) {
+			if (id == 0)
+				/* S32G2: Only PFE_EMAC_0 supports 2.5G speed */
+				emac->max_speed = SPEED_2500;
+			else
+				emac->max_speed = SPEED_1000;
+#if !defined(PFENG_CFG_LINUX_NO_SERDES_SUPPORT)
+			/* Standard SGMII AN is at 1G */
+			emac->serdes_an_speed = SPEED_1000;
+		} else {
+			/* Store actual max-speed */
+			emac->serdes_an_speed = emac->max_speed;
+			if (emac->link_an == MLO_AN_INBAND &&
+			    emac->serdes_an_speed != SPEED_1000 &&
+			    emac->serdes_an_speed != SPEED_2500)
+				dev_err(dev, "Unsupported SGMII AN max-speed");
+#endif /* PFENG_CFG_LINUX_NO_SERDES_SUPPORT */
+		}
+
+		/* Interface mode */
+		ret = pfeng_of_get_phy_mode(child, &intf_mode);
+		if (ret) {
+			dev_warn(dev, "Failed to read phy-mode\n");
+			/* for non managable interface */
+			intf_mode = PHY_INTERFACE_MODE_INTERNAL;
+		}
+
+		dev_dbg(dev, "EMAC%d interface mode: %d", id, intf_mode);
+
+		if ((intf_mode != PHY_INTERFACE_MODE_INTERNAL) &&
+			(intf_mode != PHY_INTERFACE_MODE_SGMII) &&
+			!phy_interface_mode_is_rgmii(intf_mode) &&
+			(intf_mode != PHY_INTERFACE_MODE_RMII) &&
+			(intf_mode != PHY_INTERFACE_MODE_MII)) {
+			dev_err(dev, "Not supported phy interface mode: %s\n", phy_modes(intf_mode));
+			ret = -EINVAL;
+			goto err;
+		}
+
+		emac->intf_mode = intf_mode;
+		emac->enabled = true;
+
+#if !defined(PFENG_CFG_LINUX_NO_SERDES_SUPPORT)
+		if (emac->intf_mode == PHY_INTERFACE_MODE_SGMII) {
+			scnprintf(tmp, sizeof(tmp), "emac%d_xpcs", id);
+			emac->serdes_phy = devm_phy_get(dev, tmp);
+			if (!emac->serdes_phy) {
+				dev_err(dev, "SerDes PHY for EMAC%d was not found\n", id);
+			} else {
+				/* Add device depeendency for SerDes */
+				if (device_link_add(dev, &emac->serdes_phy->dev, DL_FLAG_STATELESS /*| DL_FLAG_PM_RUNTIME*/))
+					dev_err(dev, "Failed to enable SerDes PM dependency for EMAC%d\n", id);
+			}
+		} else {
+			emac->serdes_phy = NULL;
+		}
+#endif /* PFENG_CFG_LINUX_NO_SERDES_SUPPORT */
+
+		/* optional: tx clock */
+		if (phy_interface_mode_is_rgmii(intf_mode))
+			strcpy(tmp, "tx_rgmii");
+		else
+			scnprintf(tmp, sizeof(tmp), "tx_%s", phy_modes(intf_mode));
+		emac->tx_clk = devm_get_clk_from_child(dev, child, tmp);
+		if (IS_ERR(emac->tx_clk)) {
+			emac->tx_clk = NULL;
+			dev_dbg(dev, "No TX clocks declared on EMAC%d for interface %s\n", id, phy_modes(intf_mode));
+		} else {
+			ret = clk_prepare_enable(emac->tx_clk);
+			if (ret) {
+				dev_err(dev, "TX clocks on EMAC%d for interface %s failed: %d\n", id, phy_modes(intf_mode), ret);
+				ret = 0;
+				devm_clk_put(dev, emac->tx_clk);
+				emac->tx_clk = NULL;
+			} else
+				dev_info(dev, "TX clocks on EMAC%d for interface %s installed\n", id, phy_modes(intf_mode));
+		}
 
-	return -ENODEV;
+		/* optional: rx clock */
+		if (phy_interface_mode_is_rgmii(intf_mode))
+			strcpy(tmp, "rx_rgmii");
+		else
+			scnprintf(tmp, sizeof(tmp), "rx_%s", phy_modes(intf_mode));
+		emac->rx_clk = devm_get_clk_from_child(dev, child, tmp);
+		if (IS_ERR(emac->rx_clk)) {
+			emac->rx_clk = NULL;
+		dev_dbg(dev, "No RX clocks declared on EMAC%d for interface %s\n", id, phy_modes(intf_mode));
+		} else {
+			ret = clk_prepare_enable(emac->rx_clk);
+			if (ret) {
+				dev_err(dev, "RX clocks on EMAC%d for interface %s failed: %d\n", id, phy_modes(intf_mode), ret);
+				ret = 0;
+				devm_clk_put(dev, emac->rx_clk);
+				emac->rx_clk = NULL;
+			} else
+				dev_info(dev, "RX clocks on EMAC%d for interface %s installed\n", id, phy_modes(intf_mode));
+		}
+	} /* foreach PFENG_DT_COMPATIBLE_EMAC */
+#endif
+
+
+
+	/*
+	 * HIF
+	 * ("fsl,pfeng-hif")
+	 *
+	 * Describes PFE HIF block
+	 */
+	for_each_available_child_of_node(np, child) {
+		int id;
+
+		if (!of_device_is_available(child))
+			continue;
+
+		if (!of_device_is_compatible(child, PFENG_DT_COMPATIBLE_HIF))
+			continue;
+
+		id = pfeng_of_get_addr(child);
+		if (id < 0)
+			continue;
+
+		if (id < PFENG_PFE_HIF_CHANNELS) {
+			/* HIF IRQ */
+			irq = of_irq_get(child, 0);
+			if (irq < 0) {
+				dev_err(dev, "Cannot find irq resource 'hif%i', aborting\n", id);
+				return -EIO;
+			}
+
+			/* HIF mode */
+			if (of_find_property(child, "fsl,pfeng-hif-mode", NULL)) {
+				if (of_property_read_u32(child, "fsl,pfeng-hif-mode", &propval)) {
+					dev_err(dev, "hif%d has invalid channel mode, aborting\n", id);
+					return -EIO;
+				}
+				priv->hif_chnl[id].cl_mode = propval;
+
+				pfe_cfg->irq_vector_hif_chnls[id] = irq;
+			} else {
+				dev_err(dev, "hif%d has missing channel mode, aborting\n", id);
+				return -EIO;
+			}
+
+			/* HIF IHC option */
+			if (of_find_property(child, "fsl,pfeng-ihc", NULL))
+				priv->hif_chnl[id].ihc = true;
+			else
+				priv->hif_chnl[id].ihc = false;
+
+			priv->hif_chnl[id].status = PFENG_HIF_STATUS_REQUESTED;
+			pfe_cfg->hif_chnls_mask |= 1 << id;
+		}
+	} /* foreach PFENG_DT_COMPATIBLE_HIF */
+	dev_info(dev, "HIF channels mask: 0x%04x", pfe_cfg->hif_chnls_mask);
+
+	return 0;
+
+err:
+	if (child)
+		of_node_put(child);
+	release_config_from_dt(priv);
+
+	return ret;
 }
 
-struct pfeng_priv *pfeng_drv_alloc(struct platform_device *pdev)
+static struct pfeng_priv *pfeng_drv_alloc(struct platform_device *pdev)
 {
+	struct device *dev = &pdev->dev;
 	struct pfeng_priv *priv;
 
-	priv = devm_kzalloc(&pdev->dev, sizeof(*priv), GFP_KERNEL);
+	priv = devm_kzalloc(dev, sizeof(*priv), GFP_KERNEL);
 	if (!priv)
 		return NULL;
 
 	priv->pdev = pdev;
 
-	priv->cfg = devm_kzalloc(&pdev->dev, sizeof(*priv->cfg), GFP_KERNEL);
-	if(!priv->cfg)
+	priv->pfe_cfg = devm_kzalloc(dev, sizeof(*priv->pfe_cfg), GFP_KERNEL);
+	if(!priv->pfe_cfg)
 		goto err_cfg_alloc;
 
-	INIT_LIST_HEAD(&priv->ndev_list);
-	INIT_LIST_HEAD(&priv->plat.eth_list);
+	INIT_LIST_HEAD(&priv->netif_cfg_list);
+	INIT_LIST_HEAD(&priv->netif_list);
+
+	/* set EMAC interface mode to invalid value */
+	priv->emac[0].intf_mode = -1;
+	priv->emac[1].intf_mode = -1;
+	priv->emac[2].intf_mode = -1;
 
 	/* cfg defaults */
 	priv->msg_enable = default_msg_level;
 	priv->msg_verbosity = msg_verbosity;
 
-	return priv;
-
-err_cfg_alloc:
-	devm_kfree(&pdev->dev, priv);
-	return NULL;
-}
-
-void pfeng_hif_chnl_drv_remove(struct pfeng_ndev *ndev)
-{
-	struct pfeng_hif_chnl *chnl = &ndev->chnl_sc;
+	/*
+	 * Default size of routing table. Symbols PFE_CFG_RT_HASH_SIZE, PFE_CFG_RT_COLLISION_SIZE
+	 * are defined in build_env.mak. Default size can be overridden later by device tree configuration.
+	 */
+#if defined(PFE_CFG_RTABLE_ENABLE)
+	priv->pfe_cfg->rtable_hash_size = PFE_CFG_RT_HASH_SIZE;
+	priv->pfe_cfg->rtable_collision_size = PFE_CFG_RT_COLLISION_SIZE;
+#endif /* PFE_CFG_RTABLE_ENABLE */
 
 #ifdef PFE_CFG_MULTI_INSTANCE_SUPPORT
-	if (ndev->eth->ihc) {
-		pfe_idex_fini();
-		ndev->eth->ihc = false;
+	priv->ihc_tx_wq = create_singlethread_workqueue("pfeng-ihc-tx");
+	if (!priv->ihc_tx_wq) {
+		dev_err(dev, "Initialize of IHC TX WQ failed\n");
+		goto err_cfg_alloc;
 	}
+	if (kfifo_alloc(&priv->ihc_tx_fifo, 32, GFP_KERNEL))
+		goto err_cfg_alloc;
+	INIT_WORK(&priv->ihc_tx_work, pfeng_ihc_tx_work_handler);
 #endif /* PFE_CFG_MULTI_INSTANCE_SUPPORT */
 
-#ifdef OAL_IRQ_MODE
-	/* Uninstall HIF channel IRQ */
-	if(chnl->irq) {
-		oal_irq_destroy(chnl->irq);
-		chnl->irq = NULL;
-	}
-#else
-	if (chnl->irqnum) {
-		free_irq(chnl->irqnum, chnl->priv);
-		chnl->irqnum = 0;
-	}
-#endif
-	/* Stop and destroy HIF driver */
-	if(chnl->drv) {
-		pfe_hif_drv_destroy(chnl->drv);
-		chnl->drv = NULL;
+#ifdef PFE_CFG_PFE_SLAVE
+	priv->ihc_slave_wq = create_singlethread_workqueue("pfeng-slave-init");
+	if (!priv->ihc_slave_wq) {
+		dev_err(dev, "Initialize of Slave WQ failed\n");
+		goto err_cfg_alloc;
 	}
+#endif /* PFE_CFG_PFE_SLAVE */
+
+	return priv;
 
-	/* Forget HIF channel data */
-	chnl->priv = NULL;
+err_cfg_alloc:
+	devm_kfree(dev, priv);
+	return NULL;
 }
 
-int pfeng_hif_chnl_drv_create(struct pfeng_ndev *ndev)
+#ifdef PFE_CFG_PFE_MASTER
+static int pfeng_pfe_reset(struct pfeng_priv *priv)
 {
-	u32 hif_chnl = ndev->eth->hif_chnl_sc;
-	struct pfeng_hif_chnl *chnl = &ndev->chnl_sc;
-	bool hif_chnl_sc = true;
-	char irq_name[20];
 	int ret;
+	struct device *dev = &priv->pdev->dev;
 
-	if (hif_chnl >= ARRAY_SIZE(pfeng_chnl_ids)) {
-		netdev_err(ndev->netdev, "Invalid HIF instance number: %u\n", hif_chnl);
-		return -ENODEV;
-	}
-
-	chnl->priv = pfe_hif_get_channel(ndev->priv->pfe->hif, pfeng_chnl_ids[hif_chnl]);
-	if (NULL == chnl->priv) {
-		netdev_err(ndev->netdev, "Can't get HIF%d channel instance\n", hif_chnl);
-		return -ENODEV;
+	if (!priv->rst) {
+		dev_err(dev, "Partition reset support disabled\n");
+		return -ENOTSUP;
 	}
 
-	/*	Create interrupt name */
-	scnprintf(irq_name, sizeof(irq_name), "pfe-hif-%d-%s", hif_chnl, hif_chnl_sc ? "sc" : "mc");
-
-	/* direct HIF channel IRQ */
-	ret = request_irq(ndev->priv->cfg->irq_vector_hif_chnls[hif_chnl], pfeng_chnl_direct_isr,
-		0, kstrdup(irq_name, GFP_KERNEL), chnl->priv);
-	if (unlikely(ret < 0)) {
-		netdev_err(ndev->netdev, "Error allocating the IRQ %d for '%s', error %d\n",
-			ndev->priv->cfg->irq_vector_hif_chnls[hif_chnl], irq_name, ret);
+	ret = reset_control_assert(priv->rst);
+	if (ret) {
+		dev_err(dev, "Failed to assert PFE reset: %d\n", ret);
 		return ret;
 	}
-	chnl->irqnum = ndev->priv->cfg->irq_vector_hif_chnls[hif_chnl];
 
-	/*	Create HIF driver for the channel */
-	chnl->drv = pfe_hif_drv_create(chnl->priv);
-	if (NULL == chnl->drv) {
-		netdev_err(ndev->netdev, "Could not get HIF%d driver instance\n", hif_chnl);
-		ret = -ENODEV;
-		goto err;
-	}
+	udelay(100);
 
-	if (EOK != pfe_hif_drv_init(chnl->drv)) {
-		netdev_err(ndev->netdev, "HIF%d drv init failed\n", hif_chnl);
-		ret = -ENODEV;
-		goto err;
+	ret = reset_control_deassert(priv->rst);
+	if (ret) {
+		dev_err(dev, "Failed to deassert PFE reset: %d\n", ret);
+		return ret;
 	}
+	dev_info(dev, "PFE controller reset done\n");
 
 	return 0;
-
-err:
-	pfeng_hif_chnl_drv_remove(ndev);
-	return ret;
 }
+#endif /* PFE_CFG_PFE_MASTER */
 
-int pfeng_drv_remove(struct pfeng_priv *priv)
+/**
+ * pfeng_s32g_remove
+ *
+ * @pdev: platform device pointer
+ * Description: this function calls the main to free the net resources
+ * and releases the platform resources.
+ */
+static int pfeng_drv_remove(struct platform_device *pdev)
 {
-	struct device *dev = &priv->pdev->dev;
-	struct pfeng_ndev *ndev;
+	struct device *dev = &pdev->dev;
+	struct pfeng_priv *priv = dev_get_drvdata(dev);
 
 	if (!priv) {
-		dev_err(dev, "driver removal failed\n");
-		return -ENODEV;
+		dev_err(dev, "Removal failed. No priv data.\n");
+		return -ENOMEM;
 	}
 
+#ifdef PFE_CFG_PFE_SLAVE
+	if (priv->ihc_slave_wq)
+		destroy_workqueue(priv->ihc_slave_wq);
+#endif /* PFE_CFG_PFE_SLAVE */
+
 	/* Remove debugfs directory */
 	pfeng_debugfs_remove(priv);
 
-	/* NAPI shutdown */
-	if (!list_empty(&priv->ndev_list)) {
-		list_for_each_entry(ndev, &priv->ndev_list, lnode) {
 #ifdef PFE_CFG_PFE_MASTER
-			pfeng_ptp_unregister(ndev);
-			pfeng_mdio_unregister(ndev);
-#endif
-			pfeng_napi_if_release(ndev);
-		}
-		list_del(&priv->ndev_list);
-	}
+	pfeng_mdio_unregister(priv);
+#endif /* PFE_CFG_PFE_MASTER */
+
+	/* Remove netifs */
+	pfeng_netif_remove(priv);
+
+	pfeng_hif_remove(priv);
 
 	/* PFE platform remove */
-	if (priv->pfe) {
+	if (priv->pfe_platform) {
 		if (pfe_platform_remove() != EOK)
 			dev_err(dev, "PFE Platform not stopped successfully\n");
 		else {
-			priv->pfe = NULL;
+			priv->pfe_platform = NULL;
 			dev_info(dev, "PFE Platform stopped\n");
 		}
 	}
 
-	/* Shutdown memory management */
-	oal_mm_shutdown();
+#ifdef PFE_CFG_MULTI_INSTANCE_SUPPORT
+	if (priv->ihc_tx_wq)
+		destroy_workqueue(priv->ihc_tx_wq);
+	if (kfifo_initialized(&priv->ihc_tx_fifo))
+		kfifo_free(&priv->ihc_tx_fifo);
+#endif /* PFE_CFG_MULTI_INSTANCE_SUPPORT */
 
+#ifdef PFE_CFG_PFE_MASTER
 	/* Release firmware */
-	if (priv->cfg->fw)
+	if (priv->pfe_cfg->fw)
 		pfeng_fw_free(priv);
+#endif /* PFE_CFG_PFE_MASTER */
+
+	release_config_from_dt(priv);
+
+	/* Free clocks */
+	if (priv->clk_ptp) {
+		clk_disable_unprepare(priv->clk_ptp);
+		clk_put(priv->clk_ptp);
+		priv->clk_ptp = NULL;
+	}
+	if (priv->clk_pe) {
+		clk_disable_unprepare(priv->clk_pe);
+		clk_put(priv->clk_pe);
+		priv->clk_pe = NULL;
+	}
+	if (priv->clk_sys) {
+		clk_disable_unprepare(priv->clk_sys);
+		clk_put(priv->clk_sys);
+		priv->clk_sys = NULL;
+	}
 
 	dev_set_drvdata(dev, NULL);
 
+	/* Shutdown memory management */
+	oal_mm_shutdown();
+
 	return 0;
 }
 
-int pfeng_drv_probe(struct pfeng_priv *priv)
+static void pfeng_soc_version_check(struct device *dev)
 {
-	struct device *dev = &priv->pdev->dev;
-	struct pfeng_ndev *ndev;
-	struct pfeng_eth *eth, *tmp;
+	struct s32_soc_rev soc_rev;
 	int ret;
 
-#ifdef PFE_CFG_PFE_SLAVE
-	/* HIF IHC channel number */
-	if (master_ihc_chnl < HIF_CFG_MAX_CHANNELS)
-		priv->plat.ihc_master_chnl = master_ihc_chnl;
-	if (priv->plat.ihc_master_chnl >= HIF_CFG_MAX_CHANNELS) {
-		dev_err(dev, "Slave mode required parameter for master channel id is missing\n");
+	ret = s32_siul2_nvmem_get_soc_revision(dev, "soc_revision", &soc_rev);
+	if (ret) {
+		dev_warn(dev, "Failed to read SoC version (err: %d)\n", ret);
+		return;
+	}
+
+#if (PFE_CFG_IP_VERSION < PFE_CFG_IP_VERSION_NPU_7_14a)
+	dev_info(dev, "Errata: s32g2 cut 1.1 errata activated\n");
+	if (soc_rev.major >= PFE_IP_MAJOR_VERSION_CUT2)
+		dev_warn(dev, "Running cut 1.1 driver on SoC version %d.%d!\n",
+			 soc_rev.major, soc_rev.minor);
+#else
+	if (soc_rev.major < PFE_IP_MAJOR_VERSION_CUT2)
+		dev_warn(dev, "Running cut 2.0 driver on SoC version %d.%d!\n",
+			 soc_rev.major, soc_rev.minor);
+#endif
+}
+
+static int pfeng_dma_coherency_check(struct device *dev)
+{
+#if (PFE_CFG_IP_VERSION < PFE_CFG_IP_VERSION_NPU_7_14a)
+	if (of_dma_is_coherent(dev->of_node)) {
+		dev_err(dev, "DMA coherency enabled for cut 1.1 errata enabled driver!\n");
 		return -EINVAL;
 	}
+#else
+	if (!of_dma_is_coherent(dev->of_node))
+		dev_warn(dev, "DMA coherency disabled - consider impact on device performance\n");
 #endif
 
-	/* PFE platform layer init */
-	oal_mm_init(dev);
+	return 0;
+}
+
+/**
+ * pfeng_drv_probe
+ *
+ * @pdev: platform device pointer
+ *
+ * Description: This probing function gets called for all platform devices which
+ * match the ID table and are not "owned" by other driver yet. This function
+ * gets passed a "struct pplatform_device *" for each device whose entry in the ID table
+ * matches the device. The probe functions returns zero when the driver choose
+ * to take "ownership" of the device or an error code(-ve no) otherwise.
+ */
+static int pfeng_drv_probe(struct platform_device *pdev)
+{
+	struct pfeng_priv *priv;
+	struct device *dev = &pdev->dev;
+	__maybe_unused struct reset_control *rst;
+	int ret;
+
+	if (!pdev->dev.of_node)
+		return -ENODEV;
+
+	if (!of_match_device(pfeng_id_table, &pdev->dev))
+		return -ENODEV;
+
+	dev_info(dev, "PFEng ethernet driver loading ...\n");
+	dev_info(dev, "Version: %s\n", PFENG_DRIVER_VERSION);
+
+	/* Print MULTI-INSATNCE mode (MASTER/SLAVE/disabled) */
+	dev_info(dev, "Multi instance support: %s\n",
+#ifdef PFE_CFG_MULTI_INSTANCE_SUPPORT
+#ifdef PFE_CFG_PFE_MASTER
+						"MASTER"
+#elif PFE_CFG_PFE_SLAVE
+						"SLAVE"
+#else
+#error MULTI_INSTANCE_SUPPORT requires PFE_MASTER or PFE_SLAVE defined!
+#endif
+#else
+						"disabled (standalone)"
+#endif /* PFE_CFG_MULTI_INSTANCE_SUPPORT */
+		);
+
+	dev_info(dev, "Compiled by: %s\n", __VERSION__);
 
+	pfeng_soc_version_check(dev);
+
+	ret = pfeng_dma_coherency_check(dev);
+	if (ret)
+		return ret;
+
+#ifdef PFE_CFG_PFE_MASTER
+	/* Attach to reset controller to reset S32G2 partition 2 */
+	rst = devm_reset_control_get(dev, "pfe_part");
+	if (IS_ERR(rst)) {
+		dev_warn(dev, "Warning: Partition reset 'pfe_part' get failed: code %ld\n", PTR_ERR(rst));
+		rst = NULL;
+	}
+#endif /* PFE_CFG_PFE_MASTER */
+
+	/* Signal driver coherency mask */
+	if (dma_set_mask_and_coherent(dev, DMA_BIT_MASK(32)) != 0) {
+		dev_err(dev, "System does not support DMA, aborting\n");
+		return -EINVAL;
+	}
+
+	/* Allocate driver context with defaults */
+	priv = pfeng_drv_alloc(pdev);
+	if(!priv) {
+		ret = -ENOMEM;
+		goto err_drv;
+	}
 	dev_set_drvdata(dev, priv);
 
+	/* Overwrite defaults by DT values */
+	ret = create_config_from_dt(priv);
+	if (ret)
+		goto err_drv;
+
+#ifdef PFE_CFG_PFE_SLAVE
+	/* HIF IHC channel number */
+	if (master_ihc_chnl < HIF_CFG_MAX_CHANNELS)
+		priv->ihc_master_chnl = master_ihc_chnl;
+	if (priv->ihc_master_chnl >= HIF_CFG_MAX_CHANNELS) {
+		dev_err(dev, "Slave mode: Master channel id is missing\n");
+		ret = -EINVAL;
+		goto err_drv;
+	}
+#endif
+
 #ifdef PFE_CFG_PFE_MASTER
-	/* apb clock */
-	priv->sys_clk = devm_clk_get(dev, "pfe_sys");
-	if (IS_ERR(priv->sys_clk)) {
+	/* Set HIF channels coherency */
+	if (of_dma_is_coherent(dev->of_node)) {
+		ret = pfeng_s32g_set_port_coherency(priv);
+		if (ret)
+			goto err_drv;
+	}
+
+	/* PFE_SYS clock */
+	priv->clk_sys = clk_get(dev, "pfe_sys");
+	if (IS_ERR(priv->clk_sys)) {
 		dev_err(dev, "Failed to get pfe_sys clock\n");
-		ret = -ENODEV;
-		priv->sys_clk = NULL;
-		goto err;
+		ret = IS_ERR(priv->clk_sys);
+		priv->clk_sys = NULL;
+		goto err_drv;
 	}
-	ret = clk_prepare_enable(priv->sys_clk);
+	ret = clk_prepare_enable(priv->clk_sys);
 	if (ret) {
-		dev_err(dev, "Failed to enable clock pfe_sys: %d\n", ret);
-		goto err;
+		dev_err(dev, "Failed to enable clock 'pfe_sys'. Error: %d\n", ret);
+		goto err_drv;
 	}
 
+	/* PFE_PE clock */
+	priv->clk_pe = clk_get(dev, "pfe_pe");
+	if (IS_ERR(priv->clk_pe)) {
+		dev_err(dev, "Failed to get pfe_pe clock\n");
+		ret = IS_ERR(priv->clk_pe);
+		priv->clk_pe = NULL;
+		goto err_drv;
+	}
+	ret = clk_prepare_enable(priv->clk_pe);
+	if (ret) {
+		dev_err(dev, "Failed to enable clock 'pfe_pe'. Error: %d\n", ret);
+		goto err_drv;
+	}
+	/* PE clock should be double the frequency of System clock */
+	ret = clk_set_rate(priv->clk_pe, clk_get_rate(priv->clk_sys) * 2);
+	if (ret) {
+		dev_err(dev, "Failed to set clock 'pfe_pe'. Error: %d\n", ret);
+		goto err_drv;
+	}
+	dev_info(dev, "Clocks: sys=%luMHz pe=%luMHz\n", clk_get_rate(priv->clk_sys) / 1000000, clk_get_rate(priv->clk_pe) / 1000000);
+
+	/* Set correct PFE_EMACs interfaces */
+	if(pfeng_s32g_set_emac_interfaces(priv,
+		priv->emac[0].intf_mode,
+		priv->emac[1].intf_mode,
+		priv->emac[2].intf_mode))
+		dev_err(dev, "WARNING: cannot enable power for EMACs\n");
+
+	/* PFE Partition reset */
+	priv->rst = rst;
+	if (priv->rst) {
+		ret = pfeng_pfe_reset(priv);
+		if (ret)
+			goto err_drv;
+	}
+#endif
+
+	/* PFE platform layer init */
+	oal_mm_init(dev);
+
+#ifdef PFE_CFG_PFE_MASTER
 	/* Build CLASS firmware name */
 	if (fw_class_name && strlen(fw_class_name))
 		priv->fw_class_name = fw_class_name;
-	if (!priv->fw_class_name || !strlen(priv->fw_class_name))
-		priv->fw_class_name = PFENG_FW_CLASS_NAME;
+	if (!priv->fw_class_name || !strlen(priv->fw_class_name)) {
+		dev_err(dev, "CLASS firmware is unknown\n");
+		ret = -EINVAL;
+		goto err_drv;
+	}
 
-	/* Build UTIL firmware name (optional) */
+	/* Build UTIL firmware name */
 	if (fw_util_name && strlen(fw_util_name))
 		priv->fw_util_name = fw_util_name;
 	if (!priv->fw_util_name || !strlen(priv->fw_util_name)) {
 		dev_info(dev, "UTIL firmware not requested. Disable UTIL\n");
-		priv->cfg->enable_util = false;
+		priv->pfe_cfg->enable_util = false;
 	} else
-		priv->cfg->enable_util = true;
+		priv->pfe_cfg->enable_util = true;
 
 	/* Request firmware(s) */
 	ret = pfeng_fw_load(priv, priv->fw_class_name, priv->fw_util_name);
 	if (ret)
-		goto err;
+		goto err_drv;
+#endif /* PFE_CFG_PFE_MASTER */
 
-	priv->ptp_reference_clk = 0U;
-	priv->ptp_clk = devm_clk_get(dev, "pfe_ts");
-	if (IS_ERR(priv->ptp_clk)) {
+	/* Start PFE Platform */
+	ret = pfe_platform_init(priv->pfe_cfg);
+	if (ret)
+		goto err_drv;
+	priv->pfe_platform = pfe_platform_get_instance();
+	if (!priv->pfe_platform) {
+		dev_err(dev, "Could not get PFE platform instance\n");
+		ret = -EINVAL;
+		goto err_drv;
+	}
+
+#ifdef PFE_CFG_PFE_MASTER
+	/* Prepare PTP clock */
+	priv->clk_ptp_reference = 0U;
+	priv->clk_ptp = clk_get(dev, "pfe_ts");
+	if (IS_ERR(priv->clk_ptp)) {
 		dev_warn(dev, "Failed to get pfe_ts clock. PTP will be disabled.\n");
-		priv->ptp_clk = NULL;
+		priv->clk_ptp = NULL;
 	} else {
-		ret = clk_prepare_enable(priv->ptp_clk);
+		ret = clk_prepare_enable(priv->clk_ptp);
 		if (ret) {
-			priv->ptp_clk = NULL;
+			priv->clk_ptp = NULL;
 			dev_err(dev, "Failed to enable clock pfe_ts: %d\n", ret);
 		} else
-			priv->ptp_reference_clk = clk_get_rate(priv->ptp_clk);
+			priv->clk_ptp_reference = clk_get_rate(priv->clk_ptp);
 	}
-#endif
+#endif /* PFE_CFG_PFE_MASTER */
 
-	/* Start PFE Platform */
-	ret = pfe_platform_init(priv->cfg);
+	/* Create debugfs */
+	pfeng_debugfs_create(priv);
+
+#ifdef PFE_CFG_PFE_MASTER
+	/* Create MDIO buses */
+	pfeng_mdio_register(priv);
+#endif /* PFE_CFG_PFE_MASTER */
+
+	/* Create HIFs */
+	ret = pfeng_hif_create(priv);
 	if (ret)
-		goto err;
+		goto err_drv;
+
+	/* Create net interfaces */
+	ret = pfeng_netif_create(priv);
+	if (ret)
+		goto err_drv;
+
+	return 0;
+
+err_drv:
+	pfeng_drv_remove(pdev);
+
+	return ret;
+}
+
+/* PM support */
+
+#ifdef CONFIG_PM_SLEEP
+/**
+ * pfeng_pm_suspend
+ * @dev: device pointer
+ * Description: this function is invoked when suspend the driver and it direcly
+ * call the main suspend function and then, if required, on some platform, it
+ * can call an exit helper.
+ */
+static int pfeng_drv_pm_suspend(struct device *dev)
+{
+	struct pfeng_priv *priv = dev_get_drvdata(dev);
+
+	dev_info(dev, "Suspending driver\n");
 
-	priv->pfe = pfe_platform_get_instance();
-	if (!priv->pfe) {
+	priv->in_suspend = true;
+
+	pfeng_debugfs_remove(priv);
+
+#ifdef PFE_CFG_PFE_SLAVE
+	if (priv->ihc_slave_wq)
+		destroy_workqueue(priv->ihc_slave_wq);
+#endif /* PFE_CFG_PFE_SLAVE */
+
+#ifdef PFE_CFG_PFE_MASTER
+	/* MDIO buses */
+	pfeng_mdio_suspend(priv);
+#endif /* PFE_CFG_PFE_MASTER */
+
+	/* NETIFs */
+	pfeng_netif_suspend(priv);
+
+	/* HIFs stop */
+	pfeng_hif_remove(priv);
+
+	/* PFE platform remove */
+	if (priv->pfe_platform) {
+		if (pfe_platform_remove() != EOK)
+			dev_err(dev, "PFE Platform not stopped successfully\n");
+		else {
+			priv->pfe_platform = NULL;
+			dev_info(dev, "PFE Platform stopped\n");
+		}
+	}
+
+	pinctrl_pm_select_sleep_state(dev);
+
+	/* Stop clocks */
+	if (priv->clk_ptp) {
+		clk_disable_unprepare(priv->clk_ptp);
+	}
+	if (priv->clk_pe) {
+		clk_disable_unprepare(priv->clk_pe);
+	}
+	if (priv->clk_sys) {
+		clk_disable_unprepare(priv->clk_sys);
+	}
+
+	return 0;
+}
+
+/**
+ * pfeng_pm_resume
+ * @dev: device pointer
+ * Description: this function is invoked when resume the driver before calling
+ * the main resume function, on some platforms, it can call own init helper
+ * if required.
+ */
+static int pfeng_drv_pm_resume(struct device *dev)
+{
+	struct pfeng_priv *priv = dev_get_drvdata(dev);
+	int ret;
+
+	dev_info(dev, "Resuming driver\n");
+
+#ifdef PFE_CFG_PFE_MASTER
+	/* Set HIF channels coherency */
+	if (of_dma_is_coherent(dev->of_node))
+		ret = pfeng_s32g_set_port_coherency(priv);
+
+	/* Start clocks */
+	if (!priv->clk_sys) {
+		dev_err(dev, "Main clock 'pfe_sys' disappeared\n");
+		return -ENODEV;
+	}
+	ret = clk_prepare_enable(priv->clk_sys);
+	if (ret) {
+		dev_err(dev, "Failed to enable clock 'pfe_sys'. Error: %d\n", ret);
+		return -EINVAL;
+	}
+	ret = clk_prepare_enable(priv->clk_pe);
+	if (ret) {
+		dev_err(dev, "Failed to enable clock 'pfe_pe'. Error: %d\n", ret);
+		return -EINVAL;
+	}
+	ret = clk_set_rate(priv->clk_pe, clk_get_rate(priv->clk_sys) * 2);
+	if (ret) {
+		dev_err(dev, "Failed to set clock 'pfe_pe'. Error: %d\n", ret);
+		return -EINVAL;
+	}
+
+	if (priv->clk_ptp && (ret = clk_prepare_enable(priv->clk_ptp))) {
+		dev_err(dev, "Failed to enable clock 'pfe_ts'. Error: %d\n", ret);
+		/* Free clock, now is unusable */
+		devm_clk_put(dev, priv->clk_ptp);
+		priv->clk_ptp = NULL;
+	}
+
+	/* Set correct PFE_EMACs interfaces */
+	if(pfeng_s32g_set_emac_interfaces(priv,
+		priv->emac[0].intf_mode,
+		priv->emac[1].intf_mode,
+		priv->emac[2].intf_mode))
+		dev_err(dev, "WARNING: cannot enable power for EMACs\n");
+
+	/* PFE reset */
+	ret = pfeng_pfe_reset(priv);
+	if (ret) {
+		dev_err(dev, "Failed to reset PFE controller\n");
+		goto err_pfe_init;
+	}
+#endif
+
+	/* Start PFE Platform */
+	ret = pfe_platform_init(priv->pfe_cfg);
+	if (ret) {
+		dev_err(dev, "Could not init PFE platform instance. Error %d\n", ret);
+		goto err_pfe_init;
+	}
+	priv->pfe_platform = pfe_platform_get_instance();
+	if (!priv->pfe_platform) {
 		dev_err(dev, "Could not get PFE platform instance\n");
 		ret = -EINVAL;
-		goto err;
+		goto err_pfe_get;
 	}
 
-	/* debug fs */
+	/* Create debugfs */
 	pfeng_debugfs_create(priv);
 
-	/* Create network interfaces */
-	list_for_each_entry_safe(eth, tmp, &priv->plat.eth_list, lnode) {
-		ndev = pfeng_napi_if_create(priv, eth);
-		if (!ndev)
-			goto err;
 #ifdef PFE_CFG_PFE_MASTER
-		pfeng_ptp_register(ndev);
-		pfeng_mdio_register(ndev);
-#endif
-		list_add_tail(&ndev->lnode, &priv->ndev_list);
-	}
+	/* MDIO buses */
+	pfeng_mdio_resume(priv);
+#endif /* PFE_CFG_PFE_MASTER */
+
+
+	/* Create HIFs */
+	ret = pfeng_hif_create(priv);
+	if (ret)
+		goto err_drv;
+
+	/* Create net interfaces */
+	ret = pfeng_netif_resume(priv);
+	if (ret)
+		goto err_drv;
 
-	dev_info(dev, "driver id: %u\n", priv->local_drv_id);
+	priv->in_suspend = false;
 
 	return 0;
 
-err:
-	pfeng_drv_remove(priv);
+err_drv:
+err_pfe_get:
+err_pfe_init:
 
 	return ret;
 }
+#endif /* CONFIG_PM_SLEEP */
+
+SIMPLE_DEV_PM_OPS(pfeng_drv_pm_ops,
+			pfeng_drv_pm_suspend,
+			pfeng_drv_pm_resume);
+
+/* platform data */
+
+static struct platform_driver pfeng_platform_driver = {
+	.probe = pfeng_drv_probe,
+	.remove = pfeng_drv_remove,
+	.driver = {
+		.name = PFENG_DRIVER_NAME,
+		.pm = &pfeng_drv_pm_ops,
+		.of_match_table = of_match_ptr(pfeng_id_table),
+	},
+};
+
+module_platform_driver(pfeng_platform_driver);
diff --git a/sw/linux-pfeng/pfeng-ethtool.c b/sw/linux-pfeng/pfeng-ethtool.c
index 4d46de2..abd4ecd 100644
--- a/sw/linux-pfeng/pfeng-ethtool.c
+++ b/sw/linux-pfeng/pfeng-ethtool.c
@@ -8,6 +8,7 @@
 #include "pfe_cfg.h"
 #include "pfeng.h"
 
+#include <linux/clk.h>
 #include <linux/etherdevice.h>
 #include <linux/ethtool.h>
 #include <linux/phylink.h>
@@ -15,16 +16,17 @@
 static void pfeng_ethtool_getdrvinfo(struct net_device *netdev, struct ethtool_drvinfo *info)
 {
 #ifdef PFE_CFG_PFE_MASTER
-	struct pfeng_ndev *ndev = netdev_priv(netdev);
+	struct pfeng_netif *netif = netdev_priv(netdev);
 	pfe_ct_version_t fwver_class, fwver_util;
 #endif
 
 	/* driver */
 	strlcpy(info->driver, PFENG_DRIVER_NAME, sizeof(info->version));
+	strlcpy(info->version, PFENG_DRIVER_VERSION, sizeof(info->version));
 
 #ifdef PFE_CFG_PFE_MASTER
 	/* fw_version */
-	pfe_platform_get_fw_versions(ndev->priv->pfe, &fwver_class, &fwver_util);
+	pfe_platform_get_fw_versions(netif->priv->pfe_platform, &fwver_class, &fwver_util);
 	scnprintf(info->fw_version, sizeof(info->fw_version), "%u.%u.%u-%u.%u.%u api:%.8s",
 			fwver_class.major, fwver_class.minor, fwver_class.patch,
 			fwver_util.major, fwver_util.minor, fwver_util.patch,
@@ -34,10 +36,10 @@ static void pfeng_ethtool_getdrvinfo(struct net_device *netdev, struct ethtool_d
 
 static int pfeng_ethtool_get_link_ksettings(struct net_device *netdev, struct ethtool_link_ksettings *cmd)
 {
-	struct pfeng_ndev *ndev = netdev_priv(netdev);
+	struct pfeng_netif *netif = netdev_priv(netdev);
 
-	if (ndev->phylink)
-		return phylink_ethtool_ksettings_get(ndev->phylink, cmd);
+	if (netif->phylink)
+		return phylink_ethtool_ksettings_get(netif->phylink, cmd);
 
 	/* Generic values */
 	cmd->base.autoneg = AUTONEG_DISABLE;
@@ -49,56 +51,129 @@ static int pfeng_ethtool_get_link_ksettings(struct net_device *netdev, struct et
 
 static int pfeng_ethtool_set_link_ksettings(struct net_device *netdev, const struct ethtool_link_ksettings *cmd)
 {
-	struct pfeng_ndev *ndev = netdev_priv(netdev);
+	struct pfeng_netif *netif = netdev_priv(netdev);
 
-	if (!ndev->phylink)
+	if (!netif->phylink)
 		return -ENOTSUPP;
 
-	return phylink_ethtool_ksettings_set(ndev->phylink, cmd);
+	return phylink_ethtool_ksettings_set(netif->phylink, cmd);
 }
 
 static void pfeng_ethtool_get_pauseparam(struct net_device *netdev, struct ethtool_pauseparam *epauseparm)
 {
-	struct pfeng_ndev *ndev = netdev_priv(netdev);
+	struct pfeng_netif *netif = netdev_priv(netdev);
+	bool_t rx_pause, tx_pause;
+
+	pfe_phy_if_get_flow_control(netif->priv->emac[netif->cfg->emac].phyif_emac, &tx_pause, &rx_pause);
+	epauseparm->rx_pause = rx_pause;
+	epauseparm->tx_pause = tx_pause;
+	epauseparm->autoneg = AUTONEG_DISABLE;
 
-	phylink_ethtool_get_pauseparam(ndev->phylink, epauseparm);
 }
 
 static int pfeng_ethtool_set_pauseparam(struct net_device *netdev, struct ethtool_pauseparam *epauseparm)
 {
-	struct pfeng_ndev *ndev = netdev_priv(netdev);
+	struct pfeng_netif *netif = netdev_priv(netdev);
+
+	if (epauseparm->autoneg)
+		return -EOPNOTSUPP;
 
-	return phylink_ethtool_set_pauseparam(ndev->phylink, epauseparm);
+	pfe_phy_if_set_tx_flow_control(netif->priv->emac[netif->cfg->emac].phyif_emac, epauseparm->tx_pause);
+	pfe_phy_if_set_rx_flow_control(netif->priv->emac[netif->cfg->emac].phyif_emac, epauseparm->rx_pause);
+
+	return 0;
 }
 
 static int pfeng_ethtool_nway_reset(struct net_device *netdev)
 {
-	struct pfeng_ndev *ndev = netdev_priv(netdev);
+	struct pfeng_netif *netif = netdev_priv(netdev);
 
-	if (!ndev->phylink)
+	if (!netif->phylink)
 		return -ENOTSUPP;
 
-	return phylink_ethtool_nway_reset(ndev->phylink);
+	return phylink_ethtool_nway_reset(netif->phylink);
 }
 
 static int pfeng_ethtool_get_ts_info(struct net_device *netdev, struct ethtool_ts_info *info)
 {
-	struct pfeng_ndev *ndev = netdev_priv(netdev);
+	struct pfeng_netif *netif = netdev_priv(netdev);
 
 	ethtool_op_get_ts_info(netdev, info);
 
-	pfeng_hwts_ethtool(ndev, info);
+	pfeng_hwts_ethtool(netif, info);
 
-	if (ndev->ptp_clock) {
-		info->phc_index = ptp_clock_index(ndev->ptp_clock);
-	} else {
-		netdev_err(ndev->netdev, "No PTP clock available\n");
-	}
+	if (netif->ptp_clock)
+		info->phc_index = ptp_clock_index(netif->ptp_clock);
+	else
+		netdev_info(netdev, "No PTP clock available\n");
+
+	return 0;
+}
+
+static int pfeng_get_coalesce(struct net_device *netdev, struct ethtool_coalesce *ec)
+{
+	struct pfeng_netif *netif = netdev_priv(netdev);
+	struct pfeng_hif_chnl *chnl;
+	u32 frames = 0, cycles = 0;
+	int ret, idx = ffs(netif->cfg->hifmap) - 1;
+
+	/* All HIF channels are using the same setting, so use first one */
+	chnl = &netif->priv->hif_chnl[idx];
+
+	ret = pfe_hif_chnl_get_rx_irq_coalesce(chnl->priv, &frames, &cycles);
+	if (ret)
+		return -ret;
+
+	ec->rx_max_coalesced_frames = frames;
+	ec->rx_coalesce_usecs = DIV_ROUND_UP(cycles, DIV_ROUND_UP(clk_get_rate(netif->priv->clk_sys), USEC_PER_SEC));
 
 	return 0;
 }
 
+static int pfeng_set_coalesce(struct net_device *netdev, struct ethtool_coalesce *ec)
+{
+	struct pfeng_netif *netif = netdev_priv(netdev);
+	struct pfeng_hif_chnl *chnl;
+	u32 idx;
+	u64 cycles = 0;
+	int ret = 0;
+
+	/* Right now we only support two modes:
+	 * 1) disabled coalescing
+	 * 2) time-triggered coalescing
+	 *
+	 * Note: Frame count triggered coalescing is not supported on S32G2 silicon
+	 */
+	if (ec->rx_max_coalesced_frames > 1 && ec->rx_coalesce_usecs == 0) {
+		netdev_err(netif->netdev, "Frame based coalescing is unsupported\n");
+		return -EINVAL;
+	}
+
+	if (ec->rx_coalesce_usecs) {
+		cycles =  ec->rx_coalesce_usecs * (DIV_ROUND_UP(clk_get_rate(netif->priv->clk_sys), USEC_PER_SEC));
+		if (cycles > U32_MAX)
+			return -EINVAL;
+	}
+
+	/* Setup all linked HIF channel */
+	for (idx = 0; idx < PFENG_PFE_HIF_CHANNELS; idx++) {
+		if (!(netif->cfg->hifmap & (1 << idx)))
+			continue;
+
+		chnl = &netif->priv->hif_chnl[idx];
+		ret = pfe_hif_chnl_set_rx_irq_coalesce(chnl->priv, ec->rx_max_coalesced_frames, cycles);
+		if (ret)
+			break;
+	}
+
+	return ret;
+}
+
 static const struct ethtool_ops pfeng_ethtool_ops = {
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5,5,0)
+	.supported_coalesce_params = ETHTOOL_COALESCE_RX_USECS |
+				     ETHTOOL_COALESCE_RX_MAX_FRAMES,
+#endif
 	.get_drvinfo = pfeng_ethtool_getdrvinfo,
 	.get_link = ethtool_op_get_link,
 	.nway_reset = pfeng_ethtool_nway_reset,
@@ -107,6 +182,9 @@ static const struct ethtool_ops pfeng_ethtool_ops = {
 	.get_link_ksettings = pfeng_ethtool_get_link_ksettings,
 	.set_link_ksettings = pfeng_ethtool_set_link_ksettings,
 	.get_ts_info = pfeng_ethtool_get_ts_info,
+	.get_coalesce = pfeng_get_coalesce,
+	.set_coalesce = pfeng_set_coalesce,
+
 };
 
 void pfeng_ethtool_init(struct net_device *netdev)
diff --git a/sw/linux-pfeng/pfeng-fw.c b/sw/linux-pfeng/pfeng-fw.c
index 7a12345..338fa6d 100644
--- a/sw/linux-pfeng/pfeng-fw.c
+++ b/sw/linux-pfeng/pfeng-fw.c
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018-2020 NXP
+ * Copyright 2018-2021 NXP
  *
  * SPDX-License-Identifier: GPL-2.0
  *
@@ -46,7 +46,7 @@ int pfeng_fw_load(struct pfeng_priv *priv, const char *class_name, const char *u
 	struct device *dev = &priv->pdev->dev;
 	pfe_fw_t *fw;
 	int ret;
-	bool enable_util = priv->cfg->enable_util;
+	bool enable_util = priv->pfe_cfg->enable_util;
 
 	fw = kzalloc(sizeof(*fw), GFP_KERNEL);
 	if(IS_ERR(fw)) {
@@ -54,7 +54,7 @@ int pfeng_fw_load(struct pfeng_priv *priv, const char *class_name, const char *u
 		return -ENOMEM;
 	}
 
-	priv->cfg->fw = fw;
+	priv->pfe_cfg->fw = fw;
 
 	/* load CLASS fw */
 	ret = pfeng_fw_load_file(dev, class_name, &fw->class_data, &fw->class_size);
@@ -82,7 +82,7 @@ err:
 
 void pfeng_fw_free(struct pfeng_priv *priv)
 {
-	pfe_fw_t *fw = priv->cfg->fw;
+	pfe_fw_t *fw = priv->pfe_cfg->fw;
 
 	if(fw->class_data) {
 		kfree(fw->class_data);
@@ -94,7 +94,7 @@ void pfeng_fw_free(struct pfeng_priv *priv)
 		fw->util_data = NULL;
 	}
 
-	priv->cfg->fw = NULL;
+	priv->pfe_cfg->fw = NULL;
 
 	kfree(fw);
 }
diff --git a/sw/linux-pfeng/pfeng-hif.c b/sw/linux-pfeng/pfeng-hif.c
index e464b7e..229ee68 100644
--- a/sw/linux-pfeng/pfeng-hif.c
+++ b/sw/linux-pfeng/pfeng-hif.c
@@ -1,414 +1,488 @@
 /*
- * Copyright 2020 NXP
+ * Copyright 2020-2021 NXP
  *
  * SPDX-License-Identifier: GPL-2.0
  *
  */
 
-#include <linux/prefetch.h>
+#include <linux/net.h>
 
 #include "pfe_cfg.h"
-#include "pfeng.h"
+#include "oal.h"
+#include "pfe_platform.h"
+#include "pfe_hif_drv.h"
 
-#define SKB_VA_SIZE (sizeof(void *))
-#define RX_BUF_SIZE (2048 - SKB_VA_SIZE)
+#include "pfeng.h"
 
-/*
-			BMan
+int pfeng_hif_chnl_stop(struct pfeng_hif_chnl *chnl)
+{
+	/* Disable channel interrupt */
+	pfe_hif_chnl_irq_mask(chnl->priv);
 
-	Bman covers buffer managemment for pfe_hid_drv in mode, when
-	pfe_hif_chnl is used without internal buffering support.
+	/* Disable the channel RX interrupts */
+	pfe_hif_chnl_rx_irq_mask(chnl->priv);
 
-	It is necessary for supporting zero-copy data passing
-	between RX DMA channel and Linux stack.
+	/* Disable RX */
+	pfe_hif_chnl_rx_disable(chnl->priv);
 
-	The core idea is to use prebuilt skbuf which data buffer
-	is fed into channel RX ring, so we got native skbuf
-	of packet arrival.
+	/* Disable TX */
+	pfe_hif_chnl_tx_disable(chnl->priv);
 
-	To optimize additional processing, the skbuf is prebuilt
-	with extra area in head of data buffer where the skbuf
-	pointer is saved.
+	dev_info(chnl->dev, "HIF%d stopped\n", chnl->idx);
 
-	Here is the simple map of prepended data:
+	return 0;
+}
 
-	skb ptr prepends BD buff:
+int pfeng_hif_chnl_start(struct pfeng_hif_chnl *chnl)
+{
+	if (chnl->status == PFENG_HIF_STATUS_RUNNING)
+		return 0;
 
-		[*skb][ BUFF ]
-*/
+	if (chnl->status != PFENG_HIF_STATUS_ENABLED)
+		return -EINVAL;
 
-struct pfeng_rx_chnl_pool {
-	pfe_hif_chnl_t	*chnl;
-	struct device	*dev;
-	struct napi_struct		*napi;
-	u32				id;
-	u32				depth;
-	u32				avail;
-	u32				buf_size;
+	/* Enable channel interrupt */
+	pfe_hif_chnl_irq_unmask(chnl->priv);
 
-	/* skb VA table for hif_drv rx ring */
-	void				**rx_tbl;
-	u32				rd_idx;
-	u32				wr_idx;
-	u32				idx_mask;
-};
+	/* Enable RX */
+	if (pfe_hif_chnl_rx_enable(chnl->priv) != EOK) {
+		dev_err(chnl->dev, "Couldn't enable RX irq\n");
+		return -EINVAL;
+	}
 
-struct pfeng_tx_map {
+	/* Enable TX */
+	if (pfe_hif_chnl_tx_enable(chnl->priv) != EOK) {
+		dev_err(chnl->dev, "Couldn't enable TX\n");
+		return -EINVAL;
+	}
 
-	void				*va_addr;
-	addr_t				pa_addr;
-	u32				size;
-	bool				pages;
-	struct sk_buff			*skb;
-};
+	/* Enable the channel RX interrupts */
+	pfe_hif_chnl_rx_irq_unmask(chnl->priv);
 
-struct pfeng_tx_chnl_pool {
-	u32				depth;
+	chnl->status = PFENG_HIF_STATUS_RUNNING;
 
-	/* mappings for hif_drv tx ring */
-	struct pfeng_tx_map		*tx_tbl;
-	u32				rd_idx;
-	u32				wr_idx;
-	u32				idx_mask;
-};
+	dev_info(chnl->dev, "HIF%d started\n", chnl->idx);
 
-#define HEADROOM (NET_SKB_PAD + NET_IP_ALIGN)
+	return 0;
+}
 
-static struct sk_buff *pfeng_bman_build_skb(struct pfeng_rx_chnl_pool *pool, bool preempt)
+/**
+ * @brief		HIF channel RX ISR
+ * @details		Will be called by HIF channel instance when RX event has occurred
+ * @note		To see which context the ISR is running in please see the
+ * 				pfe_hif_chnl module implementation.
+ */
+static void pfeng_hif_drv_chnl_rx_isr(void *arg)
 {
-	const u32 truesize = SKB_DATA_ALIGN(sizeof(struct skb_shared_info)) +
-		SKB_DATA_ALIGN(NET_SKB_PAD + NET_IP_ALIGN + RX_BUF_SIZE + SKB_VA_SIZE);
-	struct sk_buff *skb;
+        struct pfeng_hif_chnl *chnl = (struct pfeng_hif_chnl *)arg;
 
-	/* Request skb from DMA safe region */
-	if (likely(preempt))
-		preempt_disable();
-	skb = __napi_alloc_skb(pool->napi, truesize, GFP_DMA32 | GFP_ATOMIC);
-	if (likely(preempt))
-		preempt_enable();
-	if (!skb) {
-		dev_err(pool->dev, "chnl%d: No skb created\n", pool->id);
-		return NULL;
-	}
+	if(napi_schedule_prep(&chnl->napi)) {
 
-	/* embed skb pointer */
-	*(struct sk_buff **)(skb->data) = skb;
-	/* forward skb->data to save skb ptr */
-	skb_put(skb, SKB_VA_SIZE);
-	skb_pull(skb, SKB_VA_SIZE);
+		pfe_hif_chnl_rx_irq_mask(chnl->priv);
 
-	return skb;
+		__napi_schedule_irqoff(&chnl->napi);
+	}
 }
 
-void pfeng_bman_pool_destroy(struct pfeng_ndev *ndev)
+/**
+ * @brief		Common HIF channel interrupt service routine
+ * @details		Manage common HIF channel interrupt
+ * @details		See the oal_irq_handler_t
+ */
+static irqreturn_t pfeng_hif_chnl_direct_isr(int irq, void *arg)
 {
-	struct pfeng_rx_chnl_pool *rx_pool = (struct pfeng_rx_chnl_pool *)ndev->bman.rx_pool;
-	struct pfeng_tx_chnl_pool *tx_pool = (struct pfeng_tx_chnl_pool *)ndev->bman.tx_pool;
+	pfe_hif_chnl_t *chnl = (pfe_hif_chnl_t *)arg;
 
-	if (rx_pool) {
-		if(rx_pool->rx_tbl) {
-			kfree(rx_pool->rx_tbl);
-			rx_pool->rx_tbl = NULL;
-		}
+	/* Disable HIF channel interrupts */
+	pfe_hif_chnl_irq_mask(chnl);
 
-		kfree(rx_pool);
-	}
+	/* Call HIF channel ISR */
+	pfe_hif_chnl_isr(chnl);
 
-	if (tx_pool) {
-		if(tx_pool->tx_tbl) {
-			kfree(tx_pool->tx_tbl);
-			tx_pool->tx_tbl = NULL;
-		}
+	/* Enable HIF channel interrupts */
+	pfe_hif_chnl_irq_unmask(chnl);
 
-		kfree(tx_pool);
-	}
-
-	return;
+	return IRQ_HANDLED;
 }
 
-int pfeng_bman_pool_create(struct pfeng_ndev *ndev)
+/**
+ * @brief	Process HIF channel receive
+ * @details	Read HIF channel data
+ * @param[in]	chnl The HIF channel
+ * @param[in]	limit The recieve process limit
+ * @return	Number of received frames
+ */
+static int pfeng_hif_chnl_rx(struct pfeng_hif_chnl *chnl, int limit)
 {
-	pfe_hif_chnl_t *chnl = ndev->chnl_sc.priv;
-	struct pfeng_rx_chnl_pool *rx_pool;
-	struct pfeng_tx_chnl_pool *tx_pool;
-
-	/* RX pool */
-	rx_pool = kzalloc(sizeof(*rx_pool), GFP_KERNEL);
-	if (!rx_pool) {
-		dev_err(ndev->dev, "chnl%d: No mem for bman rx_pool\n", pfe_hif_chnl_get_id(chnl));
-		return -ENOMEM;
-	}
+	pfe_ct_hif_rx_hdr_t *hif_hdr;
+	struct sk_buff *skb;
+	struct net_device *netdev;
+	struct pfeng_netif *netif;
+	int done = 0;
+#ifdef PFE_CFG_MULTI_INSTANCE_SUPPORT
+	int ihcs = 0;
+#endif
+
+	while (1) {
+
+		skb = pfeng_hif_chnl_receive_pkt(chnl, 0);
+		if (unlikely(!skb))
+			/* no more packets */
+			break;
 
-	rx_pool->id = pfe_hif_chnl_get_id(chnl);
-	rx_pool->depth = pfe_hif_chnl_get_rx_fifo_depth(chnl);
-	rx_pool->avail = rx_pool->depth;
-	rx_pool->chnl = chnl;
-	rx_pool->dev = ndev->dev;
-	rx_pool->napi = &ndev->napi;
-	rx_pool->buf_size = RX_BUF_SIZE;
-
-	rx_pool->rx_tbl = kzalloc(sizeof(void *) * rx_pool->depth, GFP_KERNEL);
-	if (!rx_pool->rx_tbl) {
-		dev_err(ndev->dev, "chnl%d: failed. No mem\n", rx_pool->id);
-		goto err;
-	}
-	rx_pool->rd_idx = 0;
-	rx_pool->wr_idx = 0;
-	rx_pool->idx_mask = pfe_hif_chnl_get_rx_fifo_depth(chnl) - 1;
+		hif_hdr = (pfe_ct_hif_rx_hdr_t *)skb->data;
+		hif_hdr->flags = (pfe_ct_hif_rx_flags_t)oal_ntohs(hif_hdr->flags);
 
-	ndev->bman.rx_pool = rx_pool;
+#ifdef PFE_CFG_MULTI_INSTANCE_SUPPORT
+		/* Check for IHC frame */
+		if (unlikely (hif_hdr->flags & HIF_RX_IHC)) {
+			pfe_hif_drv_client_t *client = &chnl->ihc_client;
 
-	/* TX pool */
-	tx_pool = kzalloc(sizeof(*tx_pool), GFP_KERNEL);
-	if (!rx_pool) {
-		dev_err(ndev->dev, "chnl%d: No mem for bman tx_pool\n", pfe_hif_chnl_get_id(chnl));
-		goto err;
-	}
+			ihcs++;
+			/* IHC client callback */
+			if (!pfe_hif_drv_ihc_put_pkt(client, skb->data, skb->len, skb)) {
 
-	tx_pool->depth = pfe_hif_chnl_get_tx_fifo_depth(chnl);
-	tx_pool->tx_tbl = kzalloc(sizeof(struct pfeng_tx_map) * tx_pool->depth, GFP_KERNEL);
-	if (!tx_pool->tx_tbl) {
-		dev_err(ndev->dev, "chnl%d: failed. No mem\n", rx_pool->id);
-		goto err;
-	}
-	tx_pool->rd_idx = 0;
-	tx_pool->wr_idx = 0;
-	tx_pool->idx_mask = pfe_hif_chnl_get_tx_fifo_depth(chnl) - 1;
+				/* Call IHC RX callback */
+				client->event_handler(client, client->priv, EVENT_RX_PKT_IND, 0);
+			} else {
+				dev_err(chnl->dev, "RX IHC queuing failed. Origin PhyIf %d\n", hif_hdr->i_phy_if);
+				kfree_skb(skb);
+			}
 
-	ndev->bman.tx_pool = tx_pool;
+			continue;
+		}
+#endif /* PFE_CFG_MULTI_INSTANCE_SUPPORT */
+
+		/* Find appropriate netif */
+		netif = chnl->netifs[hif_hdr->i_phy_if];
+		if (!netif) {
+			dev_err(chnl->dev, "Packet for unconfigured PhyIf %d\n", hif_hdr->i_phy_if);
+			consume_skb(skb);
+			continue;
+		}
+		netdev = netif->netdev;
+		skb->dev = netdev;
 
-	return 0;
+		if (unlikely(hif_hdr->flags & HIF_RX_TS)) {
 
-err:
-	pfeng_bman_pool_destroy(ndev);
-	return -ENOMEM;
-}
+			/* Get rx hw time stamp */
+			pfeng_hwts_skb_set_rx_ts(netif, skb);
 
-static inline addr_t pfeng_bman_buf_map(void *ctx, void *paddr)
-{
-	struct pfeng_rx_chnl_pool *pool = (struct pfeng_rx_chnl_pool *)ctx;
+		} else if(unlikely(hif_hdr->flags & HIF_RX_ETS)) {
 
-	return dma_map_single_attrs(pool->dev, paddr, RX_BUF_SIZE, DMA_FROM_DEVICE, 0);
-}
+			/* Get tx hw time stamp */
+			pfeng_hwts_get_tx_ts(netif, skb);
+			/* Skb has only time stamp report so consume it */
+			consume_skb(skb);
 
-static inline void *pfeng_bman_buf_alloc_and_map(void *ctx, addr_t *paddr, bool preempt)
-{
-	struct pfeng_rx_chnl_pool *pool = (struct pfeng_rx_chnl_pool *)ctx;
-	struct sk_buff *skb;
-	addr_t map;
-
-	skb = pfeng_bman_build_skb(pool, preempt);
-	if (!skb)
-		return NULL;
-
-	/* do dma map */
-	map = dma_map_single(pool->dev, skb->data, RX_BUF_SIZE, DMA_FROM_DEVICE);
-	if (dma_mapping_error(pool->dev, map)) {
-		kfree_skb(skb);
-		dev_err(pool->dev, "chnl%d: dma map error\n", pool->id);
-		return NULL;
+			continue;
+		}
+
+		/* Cksumming support */
+		if (likely(netdev->features & NETIF_F_RXCSUM)) {
+			/* we have only OK info, signal it */
+			skb->ip_summed = CHECKSUM_UNNECESSARY;
+			/* one level csumming support */
+			skb->csum_level = 0;
+		}
+
+		/* Pass to upper layer */
+
+		/* Skip HIF header */
+		skb_pull(skb, PFENG_TX_PKT_HEADER_SIZE);
+
+		skb->protocol = eth_type_trans(skb, netdev);
+
+		if (unlikely(skb->ip_summed == CHECKSUM_NONE))
+			netif_receive_skb(skb);
+		else
+			napi_gro_receive(&chnl->napi, skb);
+
+		netdev->stats.rx_packets++;
+		netdev->stats.rx_bytes += skb_headlen(skb);
+
+		done++;
+		if(unlikely(done == limit))
+			break;
 	}
-	*paddr = map;
 
-	return skb->data;
+#ifdef PFE_CFG_MULTI_INSTANCE_SUPPORT
+	return done + ihcs;
+#else
+	return done;
+#endif
 }
 
-static inline void pfeng_bman_buf_unmap(void *ctx, addr_t paddr)
+static int pfeng_hif_chnl_rx_poll(struct napi_struct *napi, int budget)
 {
-	struct pfeng_rx_chnl_pool *pool = (struct pfeng_rx_chnl_pool *)ctx;
+	struct pfeng_hif_chnl *chnl = container_of(napi, struct pfeng_hif_chnl, napi);
+	int done = 0;
 
-	dma_unmap_single(pool->dev, paddr, RX_BUF_SIZE, DMA_FROM_DEVICE);
-}
+	/* Consume RX pkt(s) */
+	done = pfeng_hif_chnl_rx(chnl, budget);
 
-static inline void *pfeng_bman_buf_pull_va(void *ctx)
-{
-	struct pfeng_rx_chnl_pool *pool = (struct pfeng_rx_chnl_pool *)ctx;
+	if (done < budget && napi_complete_done(napi, done)) {
 
-	return pool->rx_tbl[pool->rd_idx++ & pool->idx_mask];
-}
+		/* Enable RX interrupt */
+		pfe_hif_chnl_rx_irq_unmask(chnl->priv);
 
-static inline int pfeng_bman_buf_push_va(void *ctx, void *vaddr)
-{
-	struct pfeng_rx_chnl_pool *pool = (struct pfeng_rx_chnl_pool *)ctx;
+		/* Trigger the RX DMA */
+		pfe_hif_chnl_rx_dma_start(chnl->priv);
+	}
 
-	pool->rx_tbl[pool->wr_idx++ & pool->idx_mask] = vaddr;
-	return 0;
+	return done;
 }
 
-static inline void pfeng_bman_buf_free(void *ctx, void *vaddr)
+static int pfeng_hif_chnl_drv_remove(struct pfeng_priv *priv, u32 idx)
 {
-	/* FIXME: recycle back to fifo pool */
-}
+	struct device *dev = &priv->pdev->dev;
+	struct pfeng_hif_chnl *chnl;
+	int ret = 0;
 
-static inline u32 pfeng_bman_buf_size(void *ctx)
-{
-	struct pfeng_rx_chnl_pool *pool = (struct pfeng_rx_chnl_pool *)ctx;
+	if (idx >= PFENG_PFE_HIF_CHANNELS) {
+		dev_err(dev, "Invalid HIF instance number: %u\n", idx);
+		return -ENODEV;
+	}
+	chnl = &priv->hif_chnl[idx];
 
-	return pool->buf_size;
-}
+	/* Stop channel interrupt */
+	pfeng_hif_chnl_stop(chnl);
 
-bool pfeng_hif_chnl_txconf_check(struct pfeng_ndev *ndev, u32 elems)
-{
-	struct pfeng_tx_chnl_pool *pool = ndev->bman.tx_pool;
-	u32 idx = pool->wr_idx;
+	/* Stop NAPI */
+	if (chnl->status == PFENG_HIF_STATUS_RUNNING) {
+		napi_disable(&chnl->napi);
+		netif_napi_del(&chnl->napi);
+	}
+	/* Prepare for startup state (in case of STR use) */
+	chnl->status = PFENG_HIF_STATUS_REQUESTED;
 
-	if(unlikely(elems >= pool->depth))
-		return false;
+	/* Release IRQ line */
+	devm_free_irq(dev, priv->pfe_cfg->irq_vector_hif_chnls[idx], chnl->priv);
 
-	/* Check if last element is free */
-	idx = (pool->wr_idx + elems) & pool->idx_mask;
-	return !pool->tx_tbl[idx].size;
-}
+	/* Release attached RX/TX pools */
+	pfeng_bman_pool_destroy(chnl);
 
-int pfeng_hif_chnl_txconf_put_map_frag(struct pfeng_ndev *ndev, void *va_addr, addr_t pa_addr, u32 size, struct sk_buff *skb)
-{
-	struct pfeng_tx_chnl_pool *pool = ndev->bman.tx_pool;
-	u32 idx = pool->wr_idx;
+	if (priv->pfe_cfg->irq_vector_hif_chnls[idx]) {
+		disable_irq(priv->pfe_cfg->irq_vector_hif_chnls[idx]);
+	}
+
+	/* Forget HIF channel data */
+	chnl->priv = NULL;
 
-	pool->tx_tbl[idx].va_addr = va_addr;
-	pool->tx_tbl[idx].pa_addr = pa_addr;
-	pool->tx_tbl[idx].size = size;
-	pool->tx_tbl[idx].skb = skb;
+	dev_info(dev, "HIF%d disabled\n", idx);
 
-	pool->wr_idx = (pool->wr_idx + 1) & pool->idx_mask;
+	return ret;
+}
 
-	return idx;
+static char *get_hif_chnl_mode_str(struct pfeng_hif_chnl *chnl)
+{
+	switch (chnl->cl_mode) {
+	case PFENG_HIF_MODE_EXCLUSIVE:
+		return "excl";
+	case PFENG_HIF_MODE_SHARED:
+		return "share";
+	default:
+		return "invalid";
+	}
 }
 
-int pfeng_hif_chnl_txconf_free_map_full(struct pfeng_ndev *ndev, u32 idx)
+static int pfeng_hif_chnl_drv_create(struct pfeng_priv *priv, u32 idx)
 {
-	struct pfeng_tx_chnl_pool *pool = ndev->bman.tx_pool;
-	struct sk_buff *skb = pool->tx_tbl[idx].skb;
-	u32 nfrags;
+	struct device *dev = &priv->pdev->dev;
+	struct pfeng_hif_chnl *chnl;
+	int ret = 0;
+	char irq_name[20];
+
+	if (idx >= PFENG_PFE_HIF_CHANNELS) {
+		dev_err(dev, "Invalid HIF instance number: %u\n", idx);
+		return -ENODEV;
+	}
+	chnl = &priv->hif_chnl[idx];
 
-	BUG_ON(!skb);
-	BUG_ON(idx != pool->rd_idx);
+	chnl->priv = pfe_hif_get_channel(priv->pfe_platform->hif, pfeng_chnl_ids[idx]);
+	if (NULL == chnl->priv) {
+		dev_err(dev, "Can't get HIF%d channel instance\n", idx);
+		return -ENODEV;
+	}
+	chnl->dev = dev;
+	chnl->idx = idx;
+#ifndef PFE_CFG_MULTI_INSTANCE_SUPPORT
+	if (unlikely(chnl->cl_mode == PFENG_HIF_MODE_SHARED))
+#else
+	if (unlikely((chnl->cl_mode == PFENG_HIF_MODE_SHARED) || chnl->ihc))
+#endif /* PFE_CFG_MULTI_INSTANCE_SUPPORT */
+#ifdef LOCK_TX_SPINLOCK
+		spin_lock_init(&chnl->lock_tx);
+#else
+		mutex_init(&chnl->lock_tx);
+#endif
+
+	/* Register HIF channel RX callback */
+	pfe_hif_chnl_set_event_cbk(chnl->priv, HIF_CHNL_EVT_RX_IRQ, &pfeng_hif_drv_chnl_rx_isr, (void *)chnl);
+
+	/* Create interrupt name */
+	scnprintf(irq_name, sizeof(irq_name), "pfe-hif-%d:%s", idx, get_hif_chnl_mode_str(chnl));
+
+	/* HIF channel IRQ */
+	ret = devm_request_irq(dev, priv->pfe_cfg->irq_vector_hif_chnls[idx], pfeng_hif_chnl_direct_isr,
+		0, kstrdup(irq_name, GFP_KERNEL), chnl->priv);
+	if (ret < 0) {
+		dev_err(dev, "Error allocating the IRQ %d for '%s', error %d\n",
+			priv->pfe_cfg->irq_vector_hif_chnls[idx], irq_name, ret);
+		return ret;
+	}
 
-	nfrags = skb_shinfo(skb)->nr_frags;
+	/* Create bman for channel */
+	if (!chnl->bman.rx_pool) {
+		ret = pfeng_bman_pool_create(chnl);
+		if (ret) {
+			dev_err(dev, "Unable to attach bman to HIF%d\n", idx);
+			goto err;
+		}
+		/* Fill pool of pages for rx buffers */
+		pfeng_hif_chnl_fill_rx_buffers(chnl);
+	}
 
-	/* Unmap linear part */
-	dma_unmap_single_attrs(ndev->dev, pool->tx_tbl[idx].pa_addr, pool->tx_tbl[idx].size, DMA_TO_DEVICE, 0);
-	pool->tx_tbl[idx].size = 0;
+	pfeng_debugfs_add_hif_chnl(priv, idx);
 
-	idx = pool->rd_idx = (pool->rd_idx + 1 ) & pool->idx_mask;
+	/* Create dummy netdev required for independent HIF channel support */
+	init_dummy_netdev(&chnl->dummy_netdev);
 
-	/* Unmap frags */
-	while (nfrags--) {
-		dma_unmap_page(ndev->dev, pool->tx_tbl[idx].pa_addr, pool->tx_tbl[idx].size, DMA_TO_DEVICE);
-		pool->tx_tbl[idx].size = 0;
+	chnl->status = PFENG_HIF_STATUS_ENABLED;
+	netif_napi_add(&chnl->dummy_netdev, &chnl->napi, pfeng_hif_chnl_rx_poll, NAPI_POLL_WEIGHT);
+	napi_enable(&chnl->napi);
 
-		idx = pool->rd_idx = (pool->rd_idx + 1 ) & pool->idx_mask;
-	}
+	dev_info(dev, "HIF%d enabled\n", idx);
 
-	dev_consume_skb_any(skb);
+#ifdef PFE_CFG_MULTI_INSTANCE_SUPPORT
+	/* IHC HIF channel must be enabled */
+	if (chnl->ihc)
+		pfeng_hif_chnl_start(chnl);
+#endif /* PFE_CFG_MULTI_INSTANCE_SUPPORT */
 
 	return 0;
+
+err:
+	pfeng_hif_chnl_drv_remove(priv, idx);
+	return ret;
 }
 
-int pfeng_hif_chnl_txconf_unroll_map_full(struct pfeng_ndev *ndev, u32 idx, u32 nfrags)
+#ifdef PFE_CFG_MULTI_INSTANCE_SUPPORT
+/* Release IDEX object */
+static void pfeng_hif_idex_release(struct pfeng_priv *priv)
 {
-	struct pfeng_tx_chnl_pool *pool = ndev->bman.tx_pool;
-	struct sk_buff *skb = pool->tx_tbl[idx].skb;
+	struct pfeng_hif_chnl *chnl = priv->ihc_chnl;
 
-	BUG_ON(!skb);
-	BUG_ON(idx != ((pool->wr_idx - 1) & pool->idx_mask));
+	if (!priv->ihc_enabled)
+		return;
 
-	/* Unmap frags */
-	while (nfrags--) {
-		dma_unmap_page(ndev->dev, pool->tx_tbl[idx].pa_addr, pool->tx_tbl[idx].size, DMA_TO_DEVICE);
-		pool->tx_tbl[idx].size = 0;
+	priv->ihc_enabled = false;
 
-		idx = pool->wr_idx = (pool->wr_idx - 1 ) & pool->idx_mask;
+	if (chnl->ihc) {
+		chnl->ihc = false;
+		priv->ihc_chnl = NULL;
+		pfe_idex_set_rpc_cbk(NULL, priv->pfe_platform);
+		pfe_idex_fini();
+		dev_info(&priv->pdev->dev, "IDEX RPC released. HIF IHC support disabled\n");
 	}
+}
 
-	/* Unmap linear part */
-	dma_unmap_single_attrs(ndev->dev, pool->tx_tbl[idx].pa_addr, pool->tx_tbl[idx].size, DMA_TO_DEVICE, 0);
-	pool->tx_tbl[idx].size = 0;
-
-	idx = pool->wr_idx = (pool->wr_idx - 1 ) & pool->idx_mask;
-
-	dev_consume_skb_any(skb);
+/* Create IDEX object */
+static int pfeng_hif_idex_create(struct pfeng_priv *priv, int idx)
+{
+	struct pfeng_hif_chnl *ihc_chnl = &priv->hif_chnl[idx];
+	struct device *dev = &priv->pdev->dev;
+
+	/* Install IDEX support */
+	if (pfe_idex_init(&ihc_chnl->hif_drv, pfeng_hif_ids[priv->ihc_master_chnl])) {
+		dev_err(dev, "Can't initialize IDEX, HIF IHC support disabled.\n");
+		ihc_chnl->ihc = false;
+		priv->ihc_enabled = false;
+	} else {
+		if (EOK != pfe_idex_set_rpc_cbk(&pfe_platform_idex_rpc_cbk, priv->pfe_platform)) {
+			dev_err(dev, "Unable to set IDEX RPC callback. HIF IHC support disabled\n");
+			ihc_chnl->ihc = false;
+			priv->ihc_enabled = false;
+			pfe_idex_fini();
+		} else {
+			priv->ihc_enabled = true;
+			priv->ihc_chnl = ihc_chnl;
+			dev_info(dev, "IDEX RPC installed\n");
+		}
+	}
 
 	return 0;
 }
+#endif /* PFE_CFG_MULTI_INSTANCE_SUPPORT */
 
-/*
+/**
+ * @brief	Create HIF channels
+ * @details	Creates and initializes the HIF channels
+ * @param[in]	priv The driver main structure
+ * @return	> 0 if OK, negative error number if failed
+ */
+int pfeng_hif_create(struct pfeng_priv *priv)
+{
+	struct device *dev = &priv->pdev->dev;
+	int idx, ret;
 
-	The following library is pfeng driver re-implementation
-	of pfe_hif_drv RX calls, with support of bman.
+	ret = 0;
 
-*/
+	for (idx = 0; idx < PFENG_PFE_HIF_CHANNELS; idx++) {
 
-struct sk_buff *pfeng_hif_drv_client_receive_pkt(pfe_hif_drv_client_t *client, uint32_t queue)
-{
-	void *buf_pa, *buf_va;
-	uint32_t rx_len;
-	bool_t lifm;
-	struct sk_buff *skb;
-	struct pfeng_ndev *ndev = (struct pfeng_ndev *)pfe_hif_drv_client_get_priv(client);
-
-	/*	Get RX buffer */
-	if (EOK != pfe_hif_chnl_rx(ndev->chnl_sc.priv, &buf_pa, &rx_len, &lifm))
-	{
-		return NULL;
-	}
+		if (priv->hif_chnl[idx].status != PFENG_HIF_STATUS_REQUESTED) {
+			dev_info(dev, "HIF%d not configured, skipped\n", idx);
+			continue;
+		}
 
-	/*  Get buffer VA */
-	buf_va = pfeng_bman_buf_pull_va(ndev->bman.rx_pool);
-	if (unlikely(!buf_va)) {
-		netdev_err(ndev->netdev, "chnl%d: pull VA failed\n", pfe_hif_chnl_get_id(ndev->chnl_sc.priv));
-		pfeng_bman_buf_unmap(ndev->bman.rx_pool, (addr_t)buf_pa);
-		return NULL;
-	}
-	prefetch(buf_va - SKB_VA_SIZE);
+		ret = pfeng_hif_chnl_drv_create(priv, idx);
+		if (ret) {
+			dev_err(dev, "HIF %d can't be created\n", idx);
+			return -EIO;
+		}
 
-	/*  Unmap DMAed area */
-	pfeng_bman_buf_unmap(ndev->bman.rx_pool, (addr_t)buf_pa);
+		/* Set local driver_id */
+#ifndef PFE_CFG_MULTI_INSTANCE_SUPPORT
+		/* Use lowest managed HIF channel */
+		if (priv->local_drv_id > idx)
+			priv->local_drv_id = idx;
+#else
+		/* Use IHC channel */
+		if (priv->hif_chnl[idx].ihc) {
+			priv->local_drv_id = idx;
+			pfeng_hif_idex_create(priv, idx);
+		}
+#endif /* PFE_CFG_MULTI_INSTANCE_SUPPORT */
 
-	/* Retrieve saved skb address */
-	skb = *((struct sk_buff **)(buf_va - SKB_VA_SIZE));
-	__skb_put(skb, rx_len);
+	}
 
-	return skb;
+	return ret;
 }
 
-int pfeng_hif_chnl_refill_rx_buffer(struct pfeng_ndev *ndev, bool preempt)
+/**
+ * @brief	Destroy the HIF channels
+ * @details	Unregister and destroy the HIF channels
+ * @param[in]	priv The driver main structure
+ */
+void pfeng_hif_remove(struct pfeng_priv *priv)
 {
-	pfe_hif_chnl_t *chnl = ndev->chnl_sc.priv;
-	void *buf_va;
-	addr_t buf_pa = 0;
-	errno_t ret;
-
-	/*	Ask for new buffer */
-	buf_va = pfeng_bman_buf_alloc_and_map(ndev->bman.rx_pool, &buf_pa, preempt);
-	if (unlikely((NULL == buf_va) || (NULL == (void *)buf_pa))) {
-		netdev_err(ndev->netdev, "No skb buffer available to fetch\n");
-		return -ENOMEM;
-	}
+	struct device *dev = &priv->pdev->dev;
+	int idx;
 
-	/*	Add new buffer to ring */
-	ret = pfe_hif_chnl_supply_rx_buf(chnl, (void *)buf_pa, pfeng_bman_buf_size(ndev->bman.rx_pool));
-	if (unlikely(ret)) {
-		pfeng_bman_buf_unmap(ndev->bman.rx_pool, buf_pa);
-		netdev_err(ndev->netdev, "chnl%d: Impossible to feed new buffer to the ring\n", pfe_hif_chnl_get_id(chnl));
-		return -ret;
-	}
-	pfeng_bman_buf_push_va(ndev->bman.rx_pool, buf_va);
+	if (!priv)
+		return;
 
-	return 0;
-}
+#ifdef PFE_CFG_MULTI_INSTANCE_SUPPORT
+	pfeng_hif_idex_release(priv);
+#endif /* PFE_CFG_MULTI_INSTANCE_SUPPORT */
 
-int pfeng_hif_chnl_fill_rx_buffers(struct pfeng_ndev *ndev)
-{
-	errno_t ret;
-	int cnt = 0;
+	for (idx = (PFENG_PFE_HIF_CHANNELS - 1); idx >= 0; idx--) {
 
-	while (pfe_hif_chnl_can_accept_rx_buf(ndev->chnl_sc.priv)) {
-		ret = pfeng_hif_chnl_refill_rx_buffer(ndev, true);
-		if (ret)
-			break;
-		cnt++;
-	}
+		if (priv->hif_chnl[idx].status < PFENG_HIF_STATUS_ENABLED) {
+			dev_info(dev, "HIF%d not enabled, skipped\n", idx);
+			continue;
+		}
 
-	return cnt;
+		pfeng_hif_chnl_drv_remove(priv, idx);
+	}
 }
diff --git a/sw/linux-pfeng/pfeng-hw-s32g.c b/sw/linux-pfeng/pfeng-hw-s32g.c
deleted file mode 100644
index 25731d3..0000000
--- a/sw/linux-pfeng/pfeng-hw-s32g.c
+++ /dev/null
@@ -1,637 +0,0 @@
-/*
- * Copyright 2019-2021 NXP
- *
- * SPDX-License-Identifier: GPL-2.0
- *
- */
-
-#include <linux/platform_device.h>
-#include <linux/module.h>
-#include <linux/io.h>
-#include <linux/phy.h>
-#include <linux/clk.h>
-#include <linux/of.h>
-#include <linux/of_net.h>
-#include <linux/of_device.h>
-#include <linux/of_reserved_mem.h>
-#include <linux/of_address.h>
-#include <linux/of_mdio.h>
-#include <linux/dma-mapping.h>
-
-#include "pfe_cfg.h"
-
-/*
- * S32G soc specific addresses
- */
-#define S32G_MAIN_GPR_PFE_COH_EN			0x0
-#define S32G_MAIN_GPR_PFE_PWR_CTRL			0x20
-#define GPR_PFE_COH_EN_UTIL				(1 << 5)
-#define GPR_PFE_COH_EN_HIF3				(1 << 4)
-#define GPR_PFE_COH_EN_HIF2				(1 << 3)
-#define GPR_PFE_COH_EN_HIF1				(1 << 2)
-#define GPR_PFE_COH_EN_HIF0				(1 << 1)
-#define GPR_PFE_COH_EN_DDR				(1 << 0)
-#define S32G_MAIN_GPR_PFE_EMACX_INTF_SEL		0x4
-#define GPR_PFE_EMACn_PWR_ACK(n)			(1 << (9 + n)) /* RD Only */
-#define GPR_PFE_EMACn_PWR_ISO(n)			(1 << (6 + n))
-#define GPR_PFE_EMACn_PWR_DWN(n)			(1 << (3 + n))
-#define GPR_PFE_EMACn_PWR_CLAMP(n)			(1 << (0 + n))
-#define GPR_PFE_EMAC_IF_MII				(1)
-#define GPR_PFE_EMAC_IF_RMII				(9)
-#define GPR_PFE_EMAC_IF_RGMII				(2)
-#define GPR_PFE_EMAC_IF_SGMII				(0)
-#define GPR_PFE_EMACn_IF(n,i)				(i << (n * 4))
-
-#include "pfeng.h"
-
-static const struct of_device_id pfeng_id_table[] = {
-#ifdef PFE_CFG_PFE_MASTER
-	{ .compatible = "fsl,s32g274a-pfeng" },
-#elif PFE_CFG_PFE_SLAVE
-	{ .compatible = "fsl,s32g274a-pfeng-slave" },
-#endif
-	{ /* sentinel */ }
-};
-MODULE_DEVICE_TABLE(of, pfeng_id_table);
-
-/*
- * Search for memory-region in DT and declare it DMA coherent
- *
- */
-static int init_reserved_memory(struct device *dev)
-{
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(5,4,0)
-	int ret;
-	ret = of_reserved_mem_device_init(dev);
-	if (ret) {
-		dev_err(dev, "Could not get reserved memory. Error %d\n", ret);
-		return ret;
-	}
-
-	return 0;
-#else
-	struct resource res;
-	struct device_node *np;
-	int ret;
-
-	np = of_parse_phandle(dev->of_node, "memory-region", 0);
-	if (!np) {
-		dev_err(dev, "Reserved memory was not found\n");
-		return -ENOMEM;
-	}
-
-	ret = of_address_to_resource(np, 0, &res);
-	if (ret < 0) {
-		dev_err(dev, "Reserved memory is invalid\n");
-		return -ENOMEM;
-	}
-	dev_info(dev, "Found reserved memory at p0x%llx size 0x%llx\n", res.start, res.end - res.start + 1);
-
-	ret = dmam_declare_coherent_memory(dev, res.start, res.start,
-		res.end - res.start + 1, DMA_MEMORY_EXCLUSIVE);
-
-	return ret;
-#endif
-}
-
-#ifdef PFE_CFG_PFE_MASTER
-static unsigned int xlate_to_s32g_intf(unsigned int n, phy_interface_t intf)
-{
-	switch(intf) {
-		default: /* SGMII is the default */
-		case PHY_INTERFACE_MODE_SGMII:
-			return GPR_PFE_EMACn_IF(n, GPR_PFE_EMAC_IF_SGMII);
-
-		case PHY_INTERFACE_MODE_RGMII:
-			return GPR_PFE_EMACn_IF(n, GPR_PFE_EMAC_IF_RGMII);
-
-		case PHY_INTERFACE_MODE_RMII:
-			return GPR_PFE_EMACn_IF(n, GPR_PFE_EMAC_IF_RMII);
-
-		case PHY_INTERFACE_MODE_MII:
-			return GPR_PFE_EMACn_IF(n, GPR_PFE_EMAC_IF_MII);
-	}
-}
-
-static int pfeng_s32g_set_emac_interfaces(struct pfeng_priv *priv, phy_interface_t emac0_intf, phy_interface_t emac1_intf, phy_interface_t emac2_intf)
-{
-	void *syscon;
-	u32 val;
-
-	syscon = ioremap_nocache(priv->plat.syscon.start, priv->plat.syscon.end - priv->plat.syscon.start);
-	if(!syscon) {
-		dev_err(&priv->pdev->dev, "cannot map GPR, aborting (INTF_SEL)\n");
-		return -EIO;
-	}
-
-	/* set up interfaces */
-	val = xlate_to_s32g_intf(0, emac0_intf) | xlate_to_s32g_intf(1, emac1_intf) | xlate_to_s32g_intf(2, emac2_intf);
-	hal_write32(val, syscon + S32G_MAIN_GPR_PFE_EMACX_INTF_SEL);
-
-	dev_info(&priv->pdev->dev, "Interface selected: EMAC0: 0x%x EMAC1: 0x%x EMAC2: 0x%x\n", emac0_intf, emac1_intf, emac2_intf);
-
-	/* power down and up EMACs */
-	hal_write32(GPR_PFE_EMACn_PWR_DWN(0) | GPR_PFE_EMACn_PWR_DWN(1) | GPR_PFE_EMACn_PWR_DWN(2), syscon + S32G_MAIN_GPR_PFE_PWR_CTRL);
-	usleep_range(100, 500);
-	hal_write32(0, syscon + S32G_MAIN_GPR_PFE_PWR_CTRL);
-
-	iounmap(syscon);
-
-	return 0;
-}
-#endif
-
-static int release_config(struct pfeng_priv *priv)
-{
-	struct pfeng_eth *eth;
-
-	list_for_each_entry(eth, &priv->plat.eth_list, lnode) {
-		if(!eth)
-			continue;
-
-		if (eth->dn)
-			of_node_put(eth->dn);
-
-		kfree(eth);
-	}
-
-	return 0;
-}
-
-static void remove_rgmii_suffix_str(char *clk_name)
-{
-	char *pos = strrchr(clk_name, '-');
-
-	if (pos)
-		*pos = '\0';
-}
-
-static int create_config_from_dt(struct pfeng_priv *priv)
-{
-	struct platform_device *pdev = priv->pdev;
-	struct device_node *np = pdev->dev.of_node;
-	pfe_platform_config_t *pfe_cfg = priv->cfg;
-	struct pfeng_eth *eth;
-	struct resource *res;
-	struct device_node *child = NULL;
-	int i, irq, ret = 0;
-	u32 propval;
-	char clk_name[32];
-
-	/* Get the base address of device */
-	res = platform_get_resource(priv->pdev, IORESOURCE_MEM, 0);
-	if(unlikely(!res)) {
-		dev_err(&pdev->dev, "Cannot find mem resource, aborting\n");
-		return -EIO;
-	}
-	pfe_cfg->cbus_base = res->start;
-	pfe_cfg->cbus_len = res->end - res->start + 1;
-	dev_info(&pdev->dev, "Cbus addr 0x%llx size 0x%llx\n", pfe_cfg->cbus_base, pfe_cfg->cbus_len);
-
-#ifdef PFE_CFG_PFE_MASTER
-	/* S32G Main GPRs */
-	res = platform_get_resource(priv->pdev, IORESOURCE_MEM, 1);
-	if(unlikely(!res)) {
-		dev_err(&pdev->dev, "Cannot find syscon resource, aborting\n");
-		return -EIO;
-	}
-	priv->plat.syscon.start = res->start;
-	priv->plat.syscon.end = res->end;
-	dev_dbg(&pdev->dev, "Syscon addr 0x%llx size 0x%llx\n", priv->plat.syscon.start, priv->plat.syscon.end - priv->plat.syscon.start);
-
-	/* Firmware CLASS name */
-	if (of_find_property(np, "fsl,fw-class-name", NULL))
-		if (!of_property_read_string(np, "fsl,fw-class-name", &priv->fw_class_name)) {
-			dev_info(&pdev->dev, "fsl,fw-class-name: %s\n", priv->fw_class_name);
-		}
-#endif
-
-	/* Firmware UTIL name */
-	if (of_find_property(np, "fsl,fw-util-name", NULL))
-		if (!of_property_read_string(np, "fsl,fw-util-name", &priv->fw_util_name)) {
-			dev_info(&pdev->dev, "fsl,fw-util-name: %s\n", priv->fw_util_name);
- 		}
-
-	/* Unsupported property check 'firmware-name' */
-	if (of_find_property(np, "firmware-name", NULL))
-		dev_warn(&pdev->dev, "WARNING: Property 'firmware-name' is unsupported. Use 'fsl,fw-class-name' instead\n");
-
-	/* IRQ hif0 - hif3 */
-	for (i = 0; i < HIF_CFG_MAX_CHANNELS; i++) {
-		char irqname[8];
-
-		scnprintf(irqname, sizeof(irqname), "hif%i", i);
-		irq = platform_get_irq_byname(pdev, irqname);
-		if (irq < 0) {
-			dev_err(&pdev->dev, "Cannot find irq resource 'hif%i', aborting\n", i);
-			return -EIO;
-		}
-		pfe_cfg->irq_vector_hif_chnls[i] = irq;
-		dev_dbg(&pdev->dev, "irq 'hif%i': %u\n", i, irq);
-	}
-
-	/* IRQ nocpy */
-	irq = platform_get_irq_byname(pdev, "nocpy");
-	if (irq < 0) {
-		dev_err(&pdev->dev, "Cannot find irq resource 'nocpy', aborting\n");
-		return -EIO;
-	}
-	pfe_cfg->irq_vector_hif_nocpy = irq;
-	dev_dbg(&pdev->dev, "irq 'nocpy' : %u\n", irq);
-
-	/* IRQ bmu */
-	irq = platform_get_irq_byname(pdev, "bmu");
-	if (irq < 0) {
-		dev_err(&pdev->dev, "Cannot find irq resource 'bmu', aborting\n");
-		return -EIO;
-	}
-	pfe_cfg->irq_vector_bmu = irq;
-	dev_dbg(&pdev->dev, "irq 'bmu' : %u\n", irq);
-
-#ifdef PFE_CFG_PFE_MASTER
-	/* IRQ upe/gpt */
-	irq = platform_get_irq_byname(pdev, "upegpt");
-	if (irq < 0) {
-		dev_err(&pdev->dev, "Cannot find irq resource 'upegpt', aborting\n");
-		return -EIO;
-	}
-	pfe_cfg->irq_vector_upe_gpt = irq;
-	dev_dbg(&pdev->dev, "irq 'upegpt' : %u\n", irq);
-
-	/* IRQ safety */
-	irq = platform_get_irq_byname(pdev, "safety");
-	if (irq < 0) {
-		dev_err(&pdev->dev, "Cannot find irq resource 'safety', aborting\n");
-		return -EIO;
-	}
-	pfe_cfg->irq_vector_safety = irq;
-	dev_dbg(&pdev->dev, "irq 'safety' : %u\n", irq);
-#endif
-
-#ifdef PFE_CFG_PFE_SLAVE
-	if (of_property_read_u32(np, "fsl,pfeng-master-hif-channel", &propval)) {
-		dev_err(&pdev->dev, "Invalid hif-channel value");
-		priv->plat.ihc_master_chnl = HIF_CFG_MAX_CHANNELS;
-	} else {
-		priv->plat.ihc_master_chnl = propval;
-		dev_info(&pdev->dev, "MASTER IHC channel: %d", propval);
-	}
-#endif
-
-#if 0 /* MC HIF mode unsupported yet */
-	priv->plat.hif_chnl_mc = HIF_CFG_MAX_CHANNELS;
-	if (priv->plat.hif_mode == PFENG_HIF_MODE_MC) {
-		/* HIF channel for MC mode */
-		propval = HIF_CFG_MAX_CHANNELS;
-		if (of_find_property(np, "fsl,pfeng-hif-channel", NULL)) {
-			if (of_property_read_u32(np, "fsl,pfeng-hif-channel", &propval)) {
-				dev_err(&pdev->dev, "Invalid MC hif-channel");
-				return -EINVAL;
-			}
-			if (of_property_count_elems_of_size(np, "fsl,pfeng-hif-channel", sizeof(u32)) > 1)
-				dev_warn(&pdev->dev, "Only one HIF channel is supported. HIF%u is used.\n", propval);
-		}
-		if (propval >= HIF_CFG_MAX_CHANNELS) {
-			dev_err(&pdev->dev, "Unsupported HIF channel number %u, aborting\n", propval);
-			return -EINVAL;
-		}
-		priv->plat.hif_chnl_mc = propval;
-		dev_info(&pdev->dev, "HIF channel %u in MC mode", propval);
-		/* signal to platform to create channel */
-		pfe_cfg->hif_chnls_mask = 1 << propval;
-	} else {
-		if (of_find_property(np, "fsl,pfeng-hif-channel", NULL)) {
-			dev_warn(&pdev->dev, "Global HIF channel unsupported in HIF SC mode.");
-		}
-		/* Signal 'no MC channel configured' */
-		pfe_cfg->hif_chnls_mask = 0;
-	}
-#endif
-
-	/* Interfaces */
-	for_each_available_child_of_node(np, child) {
-		if (!of_device_is_available(child))
-			continue;
-		if (!of_device_is_compatible(child, PFENG_DT_NODENAME_ETHERNET))
-			continue;
-
-		eth = kzalloc(sizeof(*eth), GFP_KERNEL);
-		if (!eth) {
-			dev_err(&pdev->dev, "No memory for DT config\n");
-			ret = -ENOMEM;
-			goto err;
-		}
-
-		/* HIF IHC option */
-		if (of_find_property(child, "fsl,pfeng-ihc", NULL))
-			eth->ihc = true;
-		else
-			eth->ihc = false;
-
-		/* HIF channel for SC mode */
-		propval = HIF_CFG_MAX_CHANNELS;
-		if (of_find_property(child, "fsl,pfeng-hif-channel", NULL)) {
-			if (of_property_read_u32(child, "fsl,pfeng-hif-channel", &propval)) {
-				dev_err(&pdev->dev, "Invalid hif-channel value");
-				ret = -EINVAL;
-				goto err;
-			}
-			if (of_property_count_elems_of_size(child, "fsl,pfeng-hif-channel", sizeof(u32)) > 1)
-				dev_warn(&pdev->dev, "Only one HIF channel is supported. HIF%u is used.\n", propval);
-
-			if (propval >= HIF_CFG_MAX_CHANNELS) {
-				dev_err(&pdev->dev, "Unsupported HIF channel number %u, aborting\n", propval);
-				ret = -EINVAL;
-				goto err;
-			}
-			/* check if the channel was not already used */
-			if (pfe_cfg->hif_chnls_mask & (1 << propval)) {
-				dev_err(&pdev->dev, "HIF channel number %u already used, aborting\n", propval);
-				ret = -EINVAL;
-				goto err;
-			}
-			dev_info(&pdev->dev, "HIF channel %u in SC mode", propval);
-			/* signal to platform to create channel */
-			pfe_cfg->hif_chnls_mask |= 1 << propval;
-		}
-		eth->hif_chnl_sc = propval;
-
-		if (!of_find_property(child, "fsl,pfeng-if-name", NULL) ||
-			of_property_read_string(child, "fsl,pfeng-if-name", &eth->name)) {
-			dev_warn(&pdev->dev, "Valid ethernet name is missing (property 'fsl,pfeng-if-name')\n");
-
-			kfree(eth);
-			continue;
-		}
-
-		/* MAC eth address */
-		eth->addr = (u8 *)of_get_mac_address(child);
-		if (eth->addr)
-			dev_dbg(&pdev->dev, "DT mac addr: %pM", eth->addr);
-
-#ifdef PFE_CFG_PFE_MASTER
-		/* fixed-link check */
-		eth->fixed_link = of_phy_is_fixed_link(child);
-
-		 /* Get max speed */
-		if (of_property_read_u32(child, "max-speed", &eth->max_speed))
-			eth->max_speed = SPEED_2500;
-
-		/* Interface mode */
-		eth->intf_mode = of_get_phy_mode(child);
-		if (eth->intf_mode < 0)
-			/* for non managable interface */
-			eth->intf_mode = PHY_INTERFACE_MODE_INTERNAL;
-		dev_dbg(&pdev->dev, "interface mode: %d", eth->intf_mode);
-		if ((eth->intf_mode != PHY_INTERFACE_MODE_INTERNAL) &&
-			(eth->intf_mode != PHY_INTERFACE_MODE_SGMII) &&
-			!phy_interface_mode_is_rgmii(eth->intf_mode) &&
-			(eth->intf_mode != PHY_INTERFACE_MODE_RMII) &&
-			(eth->intf_mode != PHY_INTERFACE_MODE_MII)) {
-			dev_err(&pdev->dev, "Not supported phy interface mode: %s\n", phy_modes(eth->intf_mode));
-			ret = -EINVAL;
-			goto err;
-		}
-#endif
-#ifdef PFE_CFG_PFE_SLAVE
-		/* Slave driver is using FIXED-LINK */
-		eth->fixed_link = true;
-		eth->intf_mode = PHY_INTERFACE_MODE_INTERNAL;
-#endif
-
-		/* EMAC link */
-		if (!of_find_property(child, "fsl,pfeng-emac-id", NULL)) {
-			dev_err(&pdev->dev, "The required EMAC id is missing\n");
-			ret = -EINVAL;
-			goto err;
-		}
-		if (of_property_read_u32(child, "fsl,pfeng-emac-id", &eth->emac_id) ||
-			eth->emac_id > 2) {
-			dev_err(&pdev->dev, "The EMAC id is invalid: %d\n", eth->emac_id);
-			ret = -EINVAL;
-			goto err;
-		}
-		dev_info(&pdev->dev, "%s linked to EMAC %d", eth->name, eth->emac_id);
-
-		/* optional: tx,rx clocks */
-		scnprintf(clk_name, sizeof(clk_name), "tx_%s", phy_modes(eth->intf_mode));;
-		if (!phy_interface_mode_is_rgmii(eth->intf_mode) && (eth->intf_mode != PHY_INTERFACE_MODE_RMII))
-			remove_rgmii_suffix_str(clk_name);
-		eth->tx_clk = devm_get_clk_from_child(&pdev->dev, child, clk_name);
-		if (IS_ERR(eth->tx_clk)) {
-			eth->tx_clk = NULL;
-			dev_dbg(&pdev->dev, "No TX clock (%s) declared for %s\n", clk_name, eth->name);
-		} else {
-			ret = clk_prepare_enable(eth->tx_clk);
-			if (ret) {
-				dev_err(&pdev->dev, "TX clock %s for interface %s failed: %d\n", clk_name, eth->name, ret);
-				ret = 0;
-				devm_clk_put(&pdev->dev, eth->tx_clk);
-				eth->tx_clk = NULL;
-			} else
-				dev_info(&pdev->dev, "TX clock %s for %s installed\n", clk_name, eth->name);
-		}
-		scnprintf(clk_name, sizeof(clk_name), "rx_%s", phy_modes(eth->intf_mode));;
-		if (!phy_interface_mode_is_rgmii(eth->intf_mode) && (eth->intf_mode != PHY_INTERFACE_MODE_RMII))
-			remove_rgmii_suffix_str(clk_name);
-		eth->rx_clk = devm_get_clk_from_child(&pdev->dev, child, clk_name);
-		if (IS_ERR(eth->rx_clk)) {
-			eth->rx_clk = NULL;
-			dev_dbg(&pdev->dev, "No RX clock (%s) declared for interface %s\n", clk_name, eth->name);
-		} else {
-			ret = clk_prepare_enable(eth->rx_clk);
-			if (ret) {
-				dev_err(&pdev->dev, "RX clock %s for %s failed: %d\n", clk_name, eth->name, ret);
-				ret = 0;
-				devm_clk_put(&pdev->dev, eth->rx_clk);
-				eth->rx_clk = NULL;
-			} else
-				dev_info(&pdev->dev, "RX clock %s for %s installed\n", clk_name, eth->name);
-		}
-
-		eth->dn = of_node_get(child);
-
-		list_add_tail(&eth->lnode, &priv->plat.eth_list);
-	} /* for_each_available_child_of_node(np, child) */
-
-	dev_info(&pdev->dev, "HIF channels mask: 0x%04x", pfe_cfg->hif_chnls_mask);
-
-	return 0;
-
-err:
-	if (child)
-		of_node_put(child);
-	release_config(priv);
-
-	return ret;
-}
-
-/**
- * pfeng_s32g_probe
- *
- * @pdev: platform device pointer
- *
- * Description: This probing function gets called for all platform devices which
- * match the ID table and are not "owned" by other driver yet. This function
- * gets passed a "struct pplatform_device *" for each device whose entry in the ID table
- * matches the device. The probe functions returns zero when the driver choose
- * to take "ownership" of the device or an error code(-ve no) otherwise.
- */
-static int pfeng_s32g_probe(struct platform_device *pdev)
-{
-	struct pfeng_priv *priv;
-	int ret;
-
-	if (!pdev->dev.of_node)
-		return -ENODEV;
-
-	if (!of_match_device(pfeng_id_table, &pdev->dev))
-		return -ENODEV;
-
-	dev_info(&pdev->dev, "pfeng, ethernet driver loading ...\n");
-	dev_info(&pdev->dev, "Version: %s\n", PFENG_DRIVER_VERSION);
-
-#ifdef PFE_CFG_MULTI_INSTANCE_SUPPORT
-#ifdef PFE_CFG_PFE_MASTER
-	dev_info(&pdev->dev, "MASTER INSTANCE\n");
-#elif PFE_CFG_PFE_SLAVE
-	dev_info(&pdev->dev, "SLAVE INSTANCE\n");
-#else
-#error MULTI_INSTANCE_SUPPORT requires PFE_MASTER or PFE_SLAVE defined!
-#endif
-#else
-	dev_info(&pdev->dev, "MULTI-INSTANCE disabled\n");
-#endif
-
-	dev_info(&pdev->dev, "Compiled by: %s\n", __VERSION__);
-#if defined(PFE_COMPILER_BEHAVIOR_GUESSED_ONLY)
-	dev_warn(&pdev->dev, "WARNING: Unsupported compiler version\n", __VERSION__);
-#endif
-
-	/* Describe silicon cut version compatibility */
-#if (PFE_CFG_IP_VERSION == PFE_CFG_IP_VERSION_NPU_7_14)
-	dev_info(&pdev->dev, "S32G2 cut 1.1 errata activated\n");
-#endif
-#if (PFE_CFG_IP_VERSION == PFE_CFG_IP_VERSION_NPU_7_14a)
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(5,4,0)
-	if (!pdev->dev.dma_coherent)
-		dev_warn(&pdev->dev, "WARNING: you are running with disabled device coherency! Consider impact on device performance.\n");
-#endif
-#endif
-
-	if (dma_set_mask_and_coherent(&pdev->dev, DMA_BIT_MASK(32)) != 0) {
-		dev_err(&pdev->dev, "System does not support DMA, aborting\n");
-		return -EINVAL;
-	}
-
-	if (init_reserved_memory(&pdev->dev))
-		return -ENOMEM;
-
-	/* allocate driver context */
-	priv = pfeng_drv_alloc(pdev);
-	if(!priv) {
-		ret = -ENOMEM;
-		goto err_set_mask;
-	}
-
-	/* overwrite by DT values */
-	ret = create_config_from_dt(priv);
-	if (ret)
-		goto err_set_mask;
-
-#ifdef PFE_CFG_PFE_MASTER
-	if(pfeng_s32g_set_emac_interfaces(priv,
-		pfeng_drv_cfg_get_emac_intf_mode(priv, 0),
-		pfeng_drv_cfg_get_emac_intf_mode(priv, 1),
-		pfeng_drv_cfg_get_emac_intf_mode(priv, 2)))
-		dev_err(&pdev->dev, "WARNING: cannot enable power for EMACs\n");
-#endif
-
-	ret = pfeng_drv_probe(priv);
-	if(ret)
-		goto err_mod_probe;
-
-	return 0;
-
-err_mod_probe:
-	pfeng_drv_remove(priv);
-err_set_mask:
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(5,4,0)
-	of_reserved_mem_device_release(&pdev->dev);
-#endif
-
-	return ret;
-}
-
-/**
- * pfeng_s32g_remove
- *
- * @pdev: platform device pointer
- * Description: this function calls the main to free the net resources
- * and releases the platform resources.
- */
-static int pfeng_s32g_remove(struct platform_device *pdev)
-{
-	struct pfeng_priv *priv = dev_get_drvdata(&pdev->dev);
-
-	if (!priv) {
-		dev_err(&pdev->dev, "Removal failed. No priv data.\n");
-		return -ENOMEM;
-	}
-
-	list_del(&priv->plat.eth_list);
-
-	pfeng_drv_remove(priv);
-
-	return 0;
-}
-
-/* pm support */
-
-#ifdef CONFIG_PM_SLEEP
-/**
- * pfeng_pm_suspend
- * @dev: device pointer
- * Description: this function is invoked when suspend the driver and it direcly
- * call the main suspend function and then, if required, on some platform, it
- * can call an exit helper.
- */
-static int pfeng_pm_suspend(struct device *dev)
-{
-	dev_info(dev, "%s\n", __func__);
-
-	return 0;
-}
-
-/**
- * pfeng_pm_resume
- * @dev: device pointer
- * Description: this function is invoked when resume the driver before calling
- * the main resume function, on some platforms, it can call own init helper
- * if required.
- */
-static int pfeng_pm_resume(struct device *dev)
-{
-	dev_info(dev, "%s\n", __func__);
-
-	return 0;
-}
-#endif /* CONFIG_PM_SLEEP */
-
-SIMPLE_DEV_PM_OPS(pfeng_s32g_pm_ops,
-			pfeng_pm_suspend,
-			pfeng_pm_resume);
-
-/* platform data */
-
-static struct platform_driver pfeng_platform_driver = {
-	.probe = pfeng_s32g_probe,
-	.remove = pfeng_s32g_remove,
-	.driver = {
-		.name = PFENG_DRIVER_NAME,
-		.pm = &pfeng_s32g_pm_ops,
-		.of_match_table = of_match_ptr(pfeng_id_table),
-	},
-};
-
-module_platform_driver(pfeng_platform_driver);
diff --git a/sw/linux-pfeng/pfeng-hwts.c b/sw/linux-pfeng/pfeng-hwts.c
index d848cf0..ea9d292 100644
--- a/sw/linux-pfeng/pfeng-hwts.c
+++ b/sw/linux-pfeng/pfeng-hwts.c
@@ -6,19 +6,20 @@
  */
 
 #include <linux/net.h>
+#include <linux/net_tstamp.h>
 
 #include "pfeng.h"
 
 #ifdef PFE_CFG_PFE_MASTER
-static inline int pfeng_hwts_check_dup(struct pfeng_ndev *ndev,struct pfeng_ts_skb * new_entry)
+static inline int pfeng_hwts_check_dup(struct pfeng_netif *netif,struct pfeng_ts_skb * new_entry)
 {
 	struct list_head *tmp = NULL, *curr = NULL;
 	struct pfeng_ts_skb *ts_skb = NULL;
 
-	list_for_each_safe(curr, tmp, &ndev->ts_skb_list) {
+	list_for_each_safe(curr, tmp, &netif->ts_skb_list) {
 		ts_skb = list_entry(curr, struct pfeng_ts_skb, list);
 		if(new_entry->ref_num == ts_skb->ref_num) {
-			netdev_err(ndev->netdev, "Duplicate ref_num %04x dropping skb\n", new_entry->ref_num);
+			netdev_err(netif->netdev, "Duplicate ref_num %04x dropping skb\n", new_entry->ref_num);
 			return -EINVAL;
 		}
 	}
@@ -28,36 +29,36 @@ static inline int pfeng_hwts_check_dup(struct pfeng_ndev *ndev,struct pfeng_ts_s
 
 static void pfeng_hwts_work(struct work_struct *work)
 {
-	struct pfeng_ndev *ndev = container_of(work, struct pfeng_ndev, ts_tx_work);
+	struct pfeng_netif *netif = container_of(work, struct pfeng_netif, ts_tx_work);
 	struct pfeng_ts_skb *ts_skb = NULL, *curr_ts_skb = NULL;
 	struct list_head *tmp = NULL, *curr = NULL;
 	struct pfeng_tx_ts tx_timestamp = { 0 };
 
 	/* First extract all new skbs that are waiting for time stamp */
-	if(!kfifo_is_empty(&ndev->ts_skb_fifo)) {
+	if(!kfifo_is_empty(&netif->ts_skb_fifo)) {
 		do {
 			if (ts_skb) {
 				/* Check for duplicity juts to be sure */
-				if (pfeng_hwts_check_dup(ndev, ts_skb)){
+				if (pfeng_hwts_check_dup(netif, ts_skb)){
 					kfree_skb(ts_skb->skb);
 					kfree(ts_skb);
 					ts_skb = NULL;
 					continue;
 				}
-				list_add(&ts_skb->list, &ndev->ts_skb_list);
+				list_add(&ts_skb->list, &netif->ts_skb_list);
 			}
 			ts_skb = kmalloc(sizeof(struct pfeng_ts_skb), GFP_KERNEL);
-		} while (0 != kfifo_get(&ndev->ts_skb_fifo, ts_skb));
+		} while (0 != kfifo_get(&netif->ts_skb_fifo, ts_skb));
 
 		/* Free the unused member */
 		kfree(ts_skb);
 	}
 
 	/* Now match all time stamps that were received */
-	while (!kfifo_is_empty(&ndev->ts_tx_fifo) &&
-	       (0 != kfifo_get(&ndev->ts_tx_fifo, &tx_timestamp))) {
+	while (!kfifo_is_empty(&netif->ts_tx_fifo) &&
+	       (0 != kfifo_get(&netif->ts_tx_fifo, &tx_timestamp))) {
 		bool match = false;
-		list_for_each_safe(curr, tmp, &ndev->ts_skb_list) {
+		list_for_each_safe(curr, tmp, &netif->ts_skb_list) {
 			curr_ts_skb = list_entry(curr, struct pfeng_ts_skb, list);
 			if (curr_ts_skb->ref_num == tx_timestamp.ref_num) {
 				match = true;
@@ -70,14 +71,14 @@ static void pfeng_hwts_work(struct work_struct *work)
 		}
 
 		if (false == match)
-			netdev_err(ndev->netdev, "Dropping unknown TX time stamp with ref_num %04x\n", tx_timestamp.ref_num);
+			netdev_err(netif->netdev, "Dropping unknown TX time stamp with ref_num %04x\n", tx_timestamp.ref_num);
 	}
 
 	/* Here do aging (time stamp has to be available in less than 1ms but we will wait for 5ms) */
-	list_for_each_safe(curr, tmp, &ndev->ts_skb_list) {
+	list_for_each_safe(curr, tmp, &netif->ts_skb_list) {
 		curr_ts_skb = list_entry(curr, struct pfeng_ts_skb, list);
 		if (time_after(jiffies, curr_ts_skb->jif_enlisted + usecs_to_jiffies(5000U))) {
-			netdev_warn(ndev->netdev, "Aging TX time stamp with ref_num %04x\n", curr_ts_skb->ref_num);
+			netdev_warn(netif->netdev, "Aging TX time stamp with ref_num %04x\n", curr_ts_skb->ref_num);
 			kfree_skb(curr_ts_skb->skb);
 			list_del(&curr_ts_skb->list);
 			kfree(curr_ts_skb);
@@ -86,7 +87,7 @@ static void pfeng_hwts_work(struct work_struct *work)
 }
 
 /* Store HW time stamp to skb */
-void pfeng_hwts_skb_set_rx_ts(struct pfeng_ndev *ndev, struct sk_buff *skb)
+void pfeng_hwts_skb_set_rx_ts(struct pfeng_netif *netif, struct sk_buff *skb)
 {
 	pfe_ct_hif_rx_hdr_t *hif_hdr = (pfe_ct_hif_rx_hdr_t *)skb->data;
 	struct skb_shared_hwtstamps *hwts = skb_hwtstamps(skb);
@@ -99,7 +100,7 @@ void pfeng_hwts_skb_set_rx_ts(struct pfeng_ndev *ndev, struct sk_buff *skb)
 }
 
 /* Store reference to tx skb that should be time stamped */
-int pfeng_hwts_store_tx_ref(struct pfeng_ndev *ndev, struct sk_buff *skb)
+int pfeng_hwts_store_tx_ref(struct pfeng_netif *netif, struct sk_buff *skb)
 {
 	int ret = 1;
 	struct pfeng_ts_skb ts_skb_entry;
@@ -107,22 +108,22 @@ int pfeng_hwts_store_tx_ref(struct pfeng_ndev *ndev, struct sk_buff *skb)
 	/* Store info for future timestamp */
 	ts_skb_entry.skb = skb;
 	ts_skb_entry.jif_enlisted = jiffies;
-	ts_skb_entry.ref_num = ndev->ts_ref_num++ & 0x0FFFU;
+	ts_skb_entry.ref_num = netif->ts_ref_num++ & 0x0FFFU;
 
 	/* Send data to worker */
-	ret = kfifo_put(&ndev->ts_skb_fifo, ts_skb_entry);
+	ret = kfifo_put(&netif->ts_skb_fifo, ts_skb_entry);
 	if(0 == ret)
 		return -ENOMEM;
 
 	/* Increment reference counter (required to free the skb correctly)*/
 	(void)skb_get(skb);
-	schedule_work(&ndev->ts_tx_work);
+	schedule_work(&netif->ts_tx_work);
 
 	return ts_skb_entry.ref_num;
 }
 
 /* Store time stamp that should be matched with skb */
-void pfeng_hwts_get_tx_ts(struct pfeng_ndev *ndev, struct sk_buff *skb)
+void pfeng_hwts_get_tx_ts(struct pfeng_netif *netif, struct sk_buff *skb)
 {
 	pfe_ct_ets_report_t *etsr = (pfe_ct_ets_report_t *)((addr_t)skb->data + sizeof(pfe_ct_hif_rx_hdr_t));
 	struct pfeng_tx_ts tx_timestamp;
@@ -132,29 +133,29 @@ void pfeng_hwts_get_tx_ts(struct pfeng_ndev *ndev, struct sk_buff *skb)
 	tx_timestamp.ref_num = ntohs(etsr->ref_num) & 0x0FFFU;
 
 	/* Send time stamp to worker */
-	ret = kfifo_put(&ndev->ts_tx_fifo, tx_timestamp);
-	schedule_work(&ndev->ts_tx_work);
+	ret = kfifo_put(&netif->ts_tx_fifo, tx_timestamp);
+	schedule_work(&netif->ts_tx_work);
 
 	if(0 == ret)
-		netdev_err(ndev->netdev, "No more memory. Time stamp dropped.\n");
+		netdev_err(netif->netdev, "No more memory. Time stamp dropped.\n");
 }
 #else /* PFE_CFG_PFE_MASTER */
-void pfeng_hwts_skb_set_rx_ts(struct pfeng_ndev *ndev, struct sk_buff *skb)
+void pfeng_hwts_skb_set_rx_ts(struct pfeng_netif *netif, struct sk_buff *skb)
 {
 	/* NOP */
 }
 
-void pfeng_hwts_get_rx_ts(struct pfeng_ndev *ndev, struct sk_buff *skb)
+void pfeng_hwts_get_rx_ts(struct pfeng_netif *netif, struct sk_buff *skb)
 {
 	/* NOP */
 }
 
-int pfeng_hwts_store_tx_ref(struct pfeng_ndev *ndev, struct sk_buff *skb)
+int pfeng_hwts_store_tx_ref(struct pfeng_netif *netif, struct sk_buff *skb)
 {
 	return -ENOMEM;
 }
 
-void pfeng_hwts_get_tx_ts(struct pfeng_ndev *ndev, struct sk_buff *skb)
+void pfeng_hwts_get_tx_ts(struct pfeng_netif *netif, struct sk_buff *skb)
 {
 	/* NOP */
 }
@@ -164,79 +165,77 @@ static void pfeng_hwts_work(struct work_struct *work)
 }
 #endif /* else PFE_CFG_PFE_MASTER */
 
-int pfeng_hwts_ioctl_set(struct pfeng_ndev *ndev, struct ifreq *rq)
+int pfeng_hwts_ioctl_set(struct pfeng_netif *netif, struct ifreq *rq)
 {
-	__maybe_unused struct pfeng_priv *priv = dev_get_drvdata(ndev->dev);
 	struct hwtstamp_config cfg = { 0 };
 
 	if (copy_from_user(&cfg, rq->ifr_data, sizeof(cfg)))
 		return -EFAULT;
 
 #ifdef PFE_CFG_PFE_MASTER
-	if(!priv->ptp_reference_clk)
+	if(!netif->priv->clk_ptp_reference)
 #endif
 	{
-		ndev->tshw_cfg.rx_filter = HWTSTAMP_FILTER_NONE;
-		ndev->tshw_cfg.tx_type = HWTSTAMP_TX_OFF;
-		return copy_to_user(rq->ifr_data, &ndev->tshw_cfg, sizeof(cfg)) ? -EFAULT : 0;
+		netif->tshw_cfg.rx_filter = HWTSTAMP_FILTER_NONE;
+		netif->tshw_cfg.tx_type = HWTSTAMP_TX_OFF;
+		return copy_to_user(rq->ifr_data, &netif->tshw_cfg, sizeof(struct hwtstamp_config)) ? -EFAULT : 0;
 	}
 #ifdef PFE_CFG_PFE_MASTER
-	else {
-		switch (cfg.tx_type) {
-			case HWTSTAMP_TX_OFF:
-				ndev->tshw_cfg.tx_type = HWTSTAMP_TX_OFF;
-				break;
-			case HWTSTAMP_TX_ON:
-				ndev->tshw_cfg.tx_type = HWTSTAMP_TX_ON;
-				break;
-			default:
-				return -ERANGE;
-		}
 
-		/* Following messages are currently time stamped
-		 * SYNC, Follow_Up, Delay_Req, Delay_Resp*/
-		switch (cfg.rx_filter) {
-			case HWTSTAMP_FILTER_PTP_V1_L4_EVENT:
-			case HWTSTAMP_FILTER_PTP_V1_L4_SYNC:
-			case HWTSTAMP_FILTER_PTP_V1_L4_DELAY_REQ:
-			case HWTSTAMP_FILTER_PTP_V2_L4_EVENT:
-			case HWTSTAMP_FILTER_PTP_V2_L4_SYNC:
-			case HWTSTAMP_FILTER_PTP_V2_L4_DELAY_REQ:
-			case HWTSTAMP_FILTER_PTP_V2_L2_EVENT:
-			case HWTSTAMP_FILTER_PTP_V2_L2_SYNC:
-			case HWTSTAMP_FILTER_PTP_V2_L2_DELAY_REQ:
-			case HWTSTAMP_FILTER_PTP_V2_EVENT:
-			case HWTSTAMP_FILTER_PTP_V2_SYNC:
-			case HWTSTAMP_FILTER_PTP_V2_DELAY_REQ:
-				/* We currently do not support specific filtering */
-				ndev->tshw_cfg.rx_filter = cfg.rx_filter;
-				break;
-			case HWTSTAMP_FILTER_NONE:
-				/* We always time stamp some messages on RX */
-			case HWTSTAMP_FILTER_NTP_ALL:
-				/* No NTP time stamp */
-			case HWTSTAMP_FILTER_ALL:
-				/* We do not time stamp all incoming packets */
-			default:
-				return -ERANGE;
-		}
+	switch (cfg.tx_type) {
+	case HWTSTAMP_TX_OFF:
+		netif->tshw_cfg.tx_type = HWTSTAMP_TX_OFF;
+		break;
+	case HWTSTAMP_TX_ON:
+		netif->tshw_cfg.tx_type = HWTSTAMP_TX_ON;
+		break;
+	default:
+		return -ERANGE;
+	}
 
-		return copy_to_user(rq->ifr_data, &ndev->tshw_cfg, sizeof(cfg)) ? -EFAULT : 0;
+	/* Following messages are currently time stamped
+	 * SYNC, Follow_Up, Delay_Req, Delay_Resp*/
+	switch (cfg.rx_filter) {
+	case HWTSTAMP_FILTER_PTP_V1_L4_EVENT:
+	case HWTSTAMP_FILTER_PTP_V1_L4_SYNC:
+	case HWTSTAMP_FILTER_PTP_V1_L4_DELAY_REQ:
+	case HWTSTAMP_FILTER_PTP_V2_L4_EVENT:
+	case HWTSTAMP_FILTER_PTP_V2_L4_SYNC:
+	case HWTSTAMP_FILTER_PTP_V2_L4_DELAY_REQ:
+	case HWTSTAMP_FILTER_PTP_V2_L2_EVENT:
+	case HWTSTAMP_FILTER_PTP_V2_L2_SYNC:
+	case HWTSTAMP_FILTER_PTP_V2_L2_DELAY_REQ:
+	case HWTSTAMP_FILTER_PTP_V2_EVENT:
+	case HWTSTAMP_FILTER_PTP_V2_SYNC:
+	case HWTSTAMP_FILTER_PTP_V2_DELAY_REQ:
+		/* We currently do not support specific filtering */
+		netif->tshw_cfg.rx_filter = cfg.rx_filter;
+		break;
+	case HWTSTAMP_FILTER_NONE:
+		/* We always time stamp some messages on RX */
+	case HWTSTAMP_FILTER_NTP_ALL:
+		/* No NTP time stamp */
+	case HWTSTAMP_FILTER_ALL:
+		/* We do not time stamp all incoming packets */
+	default:
+		return -ERANGE;
 	}
-#endif
+
+	return copy_to_user(rq->ifr_data, &netif->tshw_cfg, sizeof(cfg)) ? -EFAULT : 0;
+#else
+	return -EFAULT;
+#endif /* PFE_CFG_PFE_MASTER */
 }
 
-int pfeng_hwts_ioctl_get(struct pfeng_ndev *ndev, struct ifreq *rq)
+int pfeng_hwts_ioctl_get(struct pfeng_netif *netif, struct ifreq *rq)
 {
-	return copy_to_user(rq->ifr_data, &ndev->tshw_cfg, sizeof(ndev->tshw_cfg)) ? -EFAULT : 0;
+	return copy_to_user(rq->ifr_data, &netif->tshw_cfg, sizeof(netif->tshw_cfg)) ? -EFAULT : 0;
 }
 
-int pfeng_hwts_ethtool(struct pfeng_ndev *ndev, struct ethtool_ts_info *info)
+int pfeng_hwts_ethtool(struct pfeng_netif *netif, struct ethtool_ts_info *info)
 {
-	__maybe_unused struct pfeng_priv *priv = dev_get_drvdata(ndev->dev);
-
 #ifdef PFE_CFG_PFE_MASTER
-	if(!priv->ptp_reference_clk)
+	if(!netif->priv->clk_ptp_reference)
 #endif
 	{
 		info->so_timestamping |= (SOF_TIMESTAMPING_TX_SOFTWARE |
@@ -275,36 +274,40 @@ int pfeng_hwts_ethtool(struct pfeng_ndev *ndev, struct ethtool_ts_info *info)
 	return 0;
 }
 
-int pfeng_hwts_init(struct pfeng_ndev *ndev)
+int pfeng_hwts_init(struct pfeng_netif *netif)
 {
 #ifdef PFE_CFG_PFE_MASTER
 
-	if (kfifo_alloc(&ndev->ts_skb_fifo, 32, GFP_KERNEL))
+	if (kfifo_alloc(&netif->ts_skb_fifo, 32, GFP_KERNEL))
 		return -ENOMEM;
 
-	if (kfifo_alloc(&ndev->ts_tx_fifo, 32, GFP_KERNEL))
+	if (kfifo_alloc(&netif->ts_tx_fifo, 32, GFP_KERNEL))
 		return -ENOMEM;
 #endif /* PFE_CFG_PFE_MASTER */
 
 	/* Initialize for master and slave to have easier cleanup */
-	INIT_LIST_HEAD(&ndev->ts_skb_list);
-	INIT_WORK(&ndev->ts_tx_work, pfeng_hwts_work);
+	INIT_LIST_HEAD(&netif->ts_skb_list);
+	INIT_WORK(&netif->ts_tx_work, pfeng_hwts_work);
+	netif->ts_work_on = true;
 
 	/* Store default config */
-	ndev->tshw_cfg.flags = 0;
-	ndev->tshw_cfg.rx_filter = HWTSTAMP_FILTER_NONE;
-	ndev->tshw_cfg.tx_type = HWTSTAMP_TX_OFF;
+	netif->tshw_cfg.flags = 0;
+	netif->tshw_cfg.rx_filter = HWTSTAMP_FILTER_NONE;
+	netif->tshw_cfg.tx_type = HWTSTAMP_TX_OFF;
 
 	return 0;
 }
 
-void pfeng_hwts_release(struct pfeng_ndev *ndev)
+void pfeng_hwts_release(struct pfeng_netif *netif)
 {
-	cancel_work_sync(&ndev->ts_tx_work);
+	if (netif->ts_work_on) {
+		cancel_work_sync(&netif->ts_tx_work);
+		netif->ts_work_on = false;
+	}
 
-	if (kfifo_initialized(&ndev->ts_skb_fifo))
-		kfifo_free(&ndev->ts_skb_fifo);
+	if (kfifo_initialized(&netif->ts_skb_fifo))
+		kfifo_free(&netif->ts_skb_fifo);
 
-	if (kfifo_initialized(&ndev->ts_tx_fifo))
-		kfifo_free(&ndev->ts_tx_fifo);
+	if (kfifo_initialized(&netif->ts_tx_fifo))
+		kfifo_free(&netif->ts_tx_fifo);
 }
diff --git a/sw/linux-pfeng/pfeng-mdio.c b/sw/linux-pfeng/pfeng-mdio.c
index e99c380..0adf668 100644
--- a/sw/linux-pfeng/pfeng-mdio.c
+++ b/sw/linux-pfeng/pfeng-mdio.c
@@ -18,10 +18,12 @@
 
 #include "pfeng.h"
 
+/* represents DT mdio@ node */
+#define PFENG_DT_NODENAME_MDIO		"fsl,pfeng-mdio"
+
 static int pfeng_mdio_read(struct mii_bus *bus, int phyaddr, int phyreg)
 {
-	struct pfeng_ndev *ndev = bus->priv;
-	pfe_emac_t *emac = ndev->priv->pfe->emac[ndev->eth->emac_id];
+	pfe_emac_t *emac = bus->priv;
 	int ret;
 	u16 val;
 
@@ -39,8 +41,7 @@ static int pfeng_mdio_read(struct mii_bus *bus, int phyaddr, int phyreg)
 
 static int pfeng_mdio_write(struct mii_bus *bus, int phyaddr, int phyreg, u16 phydata)
 {
-	struct pfeng_ndev *ndev = bus->priv;
-	pfe_emac_t *emac = ndev->priv->pfe->emac[ndev->eth->emac_id];
+	pfe_emac_t *emac = bus->priv;
 	int ret;
 
 	if (phyreg & MII_ADDR_C45) {
@@ -58,67 +59,108 @@ static int pfeng_mdio_write(struct mii_bus *bus, int phyaddr, int phyreg, u16 ph
 /**
  * @brief	Create new MDIO bus instance
  * @details	Creates and initializes the MDIO bus instance
- * @param[in]	netdev net device structure
- * @return	0 if OK, error number if failed
+ * @param[in]	priv The driver main structure
+ * @return	> 0 if OK, negative error number if failed
  */
-int pfeng_mdio_register(struct pfeng_ndev *ndev)
+int pfeng_mdio_register(struct pfeng_priv *priv)
 {
-	struct mii_bus *bus;
-	struct device_node *dn;
-	int ret;
-
-	dn = of_get_compatible_child(ndev->eth->dn, PFENG_DT_NODENAME_MDIO);
-	if (!dn) {
-		netdev_dbg(ndev->netdev, "No compatible MDIO bus\n");
-		return 0;
+	struct device *dev = &priv->pdev->dev;
+	int i;
+
+	for (i = 0; i < ARRAY_SIZE(pfeng_emac_ids); i++) {
+		struct mii_bus *bus;
+		int ret;
+
+		if (!priv->emac[i].enabled) {
+			dev_warn(dev, "MDIO bus %d disabled: No EMAC\n", i);
+			continue;
+		}
+
+		if (!priv->emac[i].dn_mdio) {
+			dev_info(dev, "MDIO bus %d disabled: Not found in DT\n", i);
+			continue;
+		}
+
+		if (!of_device_is_available(priv->emac[i].dn_mdio)) {
+			dev_info(dev, "MDIO bus %d disabled in DT\n", i);
+			continue;
+		}
+
+		if (!priv->pfe_platform->emac[i]) {
+			dev_warn(dev, "MDIO bus %d can't get linked EMAC\n", i);
+			continue;
+		}
+
+		/* create MDIO bus */
+		bus = mdiobus_alloc();
+		if (!bus)
+			return -ENOMEM;
+
+		bus->priv = priv->pfe_platform->emac[i];
+		bus->name = "PFEng Ethernet MDIO";
+		snprintf(bus->id, MII_BUS_ID_SIZE, "%s.%d", bus->name, i);
+		bus->read = pfeng_mdio_read;
+		bus->write = pfeng_mdio_write;
+		bus->parent = dev;
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5,9,0)
+		bus->probe_capabilities = MDIOBUS_C22_C45;
+#endif
+
+		ret = of_mdiobus_register(bus, priv->emac[i].dn_mdio);
+		if (ret) {
+			mdiobus_free(bus);
+			return ret;
+		}
+
+		priv->emac[i].mii_bus = bus;
 	}
 
-	if (!of_device_is_available(dn)) {
-		netdev_dbg(ndev->netdev, "MDIO bus disabled\n");
-		return 0;
-	}
-
-	/* create MDIO bus */
-	bus = mdiobus_alloc();
-	if (!bus)
-		return -ENOMEM;
-
-	bus->priv = ndev;
-	bus->name = "PFEng Ethernet MDIO";
-	snprintf(bus->id, MII_BUS_ID_SIZE, "%s.%s",
-		 bus->name, ndev->eth->name);
-	bus->read = pfeng_mdio_read;
-	bus->write = pfeng_mdio_write;
-	bus->parent = ndev->dev;
-	ndev->mii_bus = bus;
-
-	ret = of_mdiobus_register(bus, dn);
-	if (ret) {
-		mdiobus_free(bus);
-		ndev->mii_bus = NULL;
-		return ret;
-	}
-
-	return 0;
+	return i;
 }
 
 /**
  * @brief	Destroy the MDIO bus
  * @details	Unregister and destroy the MDIO bus instance
- * @param[in]	netdev net device structure
- * @return	0 if OK, error number if failed
+ * @param[in]	priv The driver main structure
  */
-int pfeng_mdio_unregister(struct pfeng_ndev *ndev)
+void pfeng_mdio_unregister(struct pfeng_priv *priv)
 {
-	if (!ndev) {
-		return 0;
+	int i;
+
+	if (!priv)
+		return;
+
+	for (i = 0; i < ARRAY_SIZE(pfeng_emac_ids); i++) {
+
+		if (!priv->emac[i].mii_bus)
+			continue;
+
+		mdiobus_unregister(priv->emac[i].mii_bus);
+		mdiobus_free(priv->emac[i].mii_bus);
+		priv->emac[i].mii_bus = NULL;
 	}
+}
+
+int pfeng_mdio_suspend(struct pfeng_priv *priv)
+{
+	/* empty */
+	return 0;
+}
+
+int pfeng_mdio_resume(struct pfeng_priv *priv)
+{
+	int i;
 
-	if (!ndev->mii_bus)
-		return 0;
+	for (i = 0; i < ARRAY_SIZE(pfeng_emac_ids); i++) {
+		if (!priv->emac[i].enabled)
+			continue;
 
-	mdiobus_unregister(ndev->mii_bus);
-	mdiobus_free(ndev->mii_bus);
+		if (!priv->emac[i].mii_bus)
+			continue;
+
+		/* Refresh EMAC link (was changed after platform reload) */
+		priv->emac[i].mii_bus->priv = priv->pfe_platform->emac[i];
+	}
 
 	return 0;
 }
diff --git a/sw/linux-pfeng/pfeng-napi.c b/sw/linux-pfeng/pfeng-napi.c
deleted file mode 100644
index 0c7de16..0000000
--- a/sw/linux-pfeng/pfeng-napi.c
+++ /dev/null
@@ -1,977 +0,0 @@
-/*
- * Copyright 2020-2021 NXP
- *
- * SPDX-License-Identifier: GPL-2.0
- *
- */
-
-#include <linux/phylink.h>
-#include <linux/net.h>
-
-#include "pfeng.h"
-
-/* sanity check: we need RX buffering internal support disabled */
-#if (TRUE == PFE_HIF_CHNL_CFG_RX_BUFFERS_ENABLED)
-#error "Invalid PFE HIF channel mode"
-#endif
-
-/* The dma mapping info, embedded to the TX skbuff used in RXCONF cleanup */
-struct pfeng_qdesc {
-	dma_addr_t			map;
-	u32				len;
-};
-
-static int pfeng_logif_set_mac_address(struct net_device *netdev, void *p)
-{
-	struct pfeng_ndev *ndata = netdev_priv(netdev);
-	struct sockaddr *addr = (struct sockaddr *)p;
-	int ret;
-
-	if (is_valid_ether_addr(addr->sa_data)) {
-		ether_addr_copy(netdev->dev_addr, addr->sa_data);
-	} else {
-		netdev_warn(netdev, "No MAC address found, using random\n");
-		eth_hw_addr_random(netdev);
-	}
-
-	netdev_info(netdev, "setting MAC addr: %pM\n", netdev->dev_addr);
-
-	if (!ndata->logif_emac)
-		return 0;
-
-	ret = pfe_log_if_add_mac_addr(ndata->logif_emac, netdev->dev_addr, ndata->priv->local_drv_id);
-	if (!ret)
-		return 0;
-
-	return -ENOSPC;
-}
-
-static void pfeng_hif_client_remove(struct pfeng_ndev *ndev)
-{
-
-	/* EMAC */
-	if(ndev->logif_emac) {
-		if (EOK != pfe_platform_unregister_log_if(ndev->priv->pfe, ndev->logif_emac))
-			netdev_warn(ndev->netdev, "Can't unregister EMAC Logif\n");
-		else
-			pfe_log_if_destroy(ndev->logif_emac);
-		ndev->logif_emac = NULL;
-	}
-	ndev->phyif_emac = NULL; /* Don't destroy, just forget */
-
-	if(ndev->client) {
-		pfe_hif_drv_client_unregister(ndev->client);
-		ndev->client = NULL;
-	}
-
-	/* Uninstall HIF SC channel */
-	if (ndev->chnl_sc.drv)
-		pfeng_hif_chnl_drv_remove(ndev);
-}
-
-/**
- * @brief		HIF client event handler
- * @details		Called by HIF when client-related event happens (packet received, packet
- * 				transmitted).
- */
-static int pfeng_hif_event_handler(pfe_hif_drv_client_t *client, void *data, uint32_t event, uint32_t qno)
-{
-	struct pfeng_ndev *ndev = (struct pfeng_ndev *)data;
-
-	if (event == EVENT_RX_PKT_IND) {
-
-		if(napi_schedule_prep(&ndev->napi)) {
-
-			pfe_hif_chnl_rx_irq_mask(ndev->chnl_sc.priv);
-
-			__napi_schedule_irqoff(&ndev->napi);
-
-		} else
-			ndev->xstats.napi_poll_onrun++;
-	}
-
-	return 0;
-}
-
-static int pfeng_hif_client_add(struct pfeng_ndev *ndev)
-{
-	int ret = 0;
-	struct sockaddr saddr;
-
-	if (ndev->eth->hif_chnl_sc >= HIF_CFG_MAX_CHANNELS) {
-		netdev_err(ndev->netdev, "Unsupported channel index: %u\n", ndev->eth->hif_chnl_sc);
-		return -ENODEV;
-	}
-
-	/* Create SC HIF channel */
-	ret = pfeng_hif_chnl_drv_create(ndev);
-	if (ret)
-		return ret;
-
-	/* Create bman for channel */
-	if (!ndev->bman.rx_pool) {
-		ret = pfeng_bman_pool_create(ndev);
-		if (ret) {
-			netdev_err(ndev->netdev, "Unable to attach bman\n");
-			return -ENODEV;
-		}
-		/* Fill by prebuilt RX skbuf */
-		pfeng_hif_chnl_fill_rx_buffers(ndev);
-	}
-
-	/* Connect to HIF */
-	ndev->client = pfe_hif_drv_client_register(
-				ndev->chnl_sc.drv,		/* HIF Driver instance */
-				HIF_CLIENTS_MAX,		/* Client ID - unused for now */
-				1,				/* TX Queue Count */
-				1,				/* RX Queue Count */
-				PFE_HIF_RING_CFG_LENGTH,	/* TX Queue Depth */
-				PFE_HIF_RING_CFG_LENGTH,	/* RX Queue Depth */
-				&pfeng_hif_event_handler,	/* Client's event handler */
-				(void *)ndev);			/* Meta data */
-
-	if (!ndev->client) {
-		netdev_err(ndev->netdev, "Unable to register HIF client: %s\n", ndev->eth->name);
-		return -ENODEV;
-	}
-
-#ifdef PFE_CFG_MULTI_INSTANCE_SUPPORT
-	if (ndev->eth->ihc) {
-		if (pfe_idex_init(ndev->chnl_sc.drv, pfeng_hif_ids[ndev->priv->plat.ihc_master_chnl])) {
-			netdev_err(ndev->netdev, "Can't initialize IDEX, HIF IHC support disabled.\n");
-			ndev->eth->ihc = false;
-		} else {
-			if (EOK != pfe_idex_set_rpc_cbk(&pfe_platform_idex_rpc_cbk, ndev->priv->pfe)) {
-				netdev_err(ndev->netdev, "Unable to set IDEX RPC callback. HIF IHC support disabled\n");
-				ndev->eth->ihc = false;
-				pfe_idex_fini();
-			} else {
-				netdev_info(ndev->netdev, "IDEX RPC installed. HIF IHC support enabled\n");
-			}
-		}
-	} else
-		netdev_info(ndev->netdev, "HIF IHC not enabled\n");
-#endif /* PFE_CFG_MULTI_INSTANCE_SUPPORT */
-
-#ifndef PFE_CFG_MULTI_INSTANCE_SUPPORT
-	/* Set local_drv_id to lowest managed HIF channel */
-	if (ndev->priv->local_drv_id > ndev->eth->hif_chnl_sc)
-		ndev->priv->local_drv_id = ndev->eth->hif_chnl_sc;
-#else
-	/* Set local_drv_id to IHC channel */
-	if (ndev->eth->ihc)
-		ndev->priv->local_drv_id = ndev->eth->hif_chnl_sc;
-#endif
-
-#ifdef PFE_CFG_PFE_SLAVE
-	/* start HIF channel driver */
-	napi_enable(&ndev->napi);
-	pfe_hif_drv_start(ndev->chnl_sc.drv);
-#endif
-
-	/* 
-	 * Create platform-wide pool of interfaces. Must be done here where HIF channel
-	 * is already initialized to allow slave driver create the instances via IDEX.
-	 */
-	if (pfe_platform_create_ifaces(ndev->priv->pfe)) {
-		netdev_err(ndev->netdev, "Can't init platform interfaces\n");
-		return -ENODEV;
-	}
-
-	/*	Get EMAC physical interface */
-	ndev->phyif_emac = pfe_platform_get_phy_if_by_id(ndev->priv->pfe, ndev->eth->emac_id);
-	if (NULL == ndev->phyif_emac) {
-		netdev_err(ndev->netdev, "Could not get EMAC physical interface\n");
-		return -ENODEV;
-	}
-
-	/*	Create EMAC logical interface */
-	ndev->logif_emac = pfe_log_if_create(ndev->phyif_emac, (char *)ndev->eth->name);
-	if (!ndev->logif_emac) {
-		netdev_err(ndev->netdev, "EMAC Logif doesn't exist: %s\n", ndev->eth->name);
-			return -ENODEV;
-	} else {
-		ret = pfe_platform_register_log_if(ndev->priv->pfe, ndev->logif_emac);
-		if (ret) {
-			netdev_err(ndev->netdev, "Can't register EMAC Logif\n");
-			goto err;
-		}
-	}
-
-	/* Set MAC address */
-	if (ndev->eth->addr && is_valid_ether_addr(ndev->eth->addr))
-		memcpy(&saddr.sa_data, ndev->eth->addr, sizeof(saddr.sa_data));
-	else
-		memset(&saddr.sa_data, 0, sizeof(saddr.sa_data));
-	pfeng_logif_set_mac_address(ndev->netdev, (void *)&saddr);
-
-	/* Add debugfs entry for HIF channel */
-	pfeng_debugfs_add_hif_chnl(ndev->priv, ndev);
-
-
-	if (EOK != pfe_hif_drv_client_set_inject_if(ndev->client,
-					pfe_phy_if_get_id(ndev->phyif_emac)))
-	{
-		netdev_err(ndev->netdev, "Can't set inject interface\n");
-		goto err;
-	}
-
-#ifdef PFE_CFG_PFE_MASTER
-	/* Send packets received via 'log_if' to exclusively associated HIF channel */
-	ret = pfe_log_if_set_egress_ifs(ndev->logif_emac, 1 << pfeng_hif_ids[ndev->eth->hif_chnl_sc]);
-	if (EOK != ret) {
-		netdev_err(ndev->netdev, "Can't set egress interface %s\n", pfe_log_if_get_name(ndev->logif_emac));
-		ret = -ret;
-		goto err;
-	}
-#elif PFE_CFG_PFE_SLAVE
-	/* Make sure that EMAC ingress traffic will be forwarded to respective HIF channel */
-	ret = pfe_log_if_add_egress_if(ndev->logif_emac, pfe_platform_get_phy_if_by_id(ndev->priv->pfe, pfeng_hif_ids[ndev->eth->hif_chnl_sc]));
-	if (EOK != ret) {
-		netdev_err(ndev->netdev, "Can't set egress interface %s\n", pfe_log_if_get_name(ndev->logif_emac));
-		ret = -ret;
-		goto err;
-	}
-	/* Configure the logical interface to accept frames matching local MAC address */
-	ret = pfe_log_if_add_match_rule(ndev->logif_emac, IF_MATCH_DMAC, (void *)ndev->netdev->dev_addr, 6U);
-	if (EOK != ret) {
-		netdev_err(ndev->netdev, "Can't add match rule for %s\n", pfe_log_if_get_name(ndev->logif_emac));
-		ret = -ret;
-		goto err;
-	}
-	/* Set parent physical interface to FlexibleRouter mode */
-	ret = pfe_phy_if_set_op_mode(ndev->phyif_emac, IF_OP_FLEX_ROUTER);
-	if (EOK != ret) {
-		netdev_err(ndev->netdev, "Can't set operation mode for %s\n", pfe_log_if_get_name(ndev->logif_emac));
-		ret = -ret;
-		goto err;
-	}
-	netdev_info(ndev->netdev, "receive traffic matching its MAC address\n");
-#endif
-
-	netdev_info(ndev->netdev, "Register HIF client %s on logif %d\n", ndev->eth->name, pfe_log_if_get_id(ndev->logif_emac));
-
-	return 0;
-
-err:
-	pfeng_hif_client_remove(ndev);
-
-	/* convert to linux style */
-	if (ret > 0)
-		ret = -ret;
-
-	return ret;
-}
-
-/**
- *  pfeng_release - close entry point of the driver
- *  @dev : device pointer.
- *  Description:
- *  This is the stop entry point of the driver.
- */
-static int pfeng_logif_release(struct net_device *netdev)
-{
-	struct pfeng_ndev *ndev = netdev_priv(netdev);
-
-	netdev_info(netdev, "%s\n", __func__);
-
-	netif_tx_stop_queue(netdev_get_tx_queue(netdev, 0));
-
-	/* Stop log if */
-	pfe_log_if_disable(ndev->logif_emac);
-
-#ifdef PFE_CFG_PFE_MASTER
-	/* stop napi */
-	napi_disable(&ndev->napi);
-
-	/* stop phylink */
-	if (ndev->phylink)
-		pfeng_phylink_stop(ndev);
-
-	pfe_hif_drv_stop(ndev->chnl_sc.drv);
-#else
-	netif_carrier_off(netdev);
-#endif /* PFE_CFG_PFE_MASTER */
-
-	return 0;
-}
-
-/**
- *  pfeng_open - open entry point of the driver
- *  @dev : pointer to the device structure.
- *  Description:
- *  This function is the open entry point of the driver.
- *  Return value:
- *  0 on success and an appropriate integer as defined in errno.h
- *  file on failure.
- */
-static int pfeng_logif_open(struct net_device *netdev)
-{
-	struct pfeng_ndev *ndev = netdev_priv(netdev);
-	int ret;
-
-	netdev_dbg(netdev, "%s: %s\n", __func__, ndev ? ndev->eth->name : "???");
-
-	if(!ndev) {
-		netdev_err(netdev, "Cannot init NAPI. NO <ndata>\n");
-		return -ENODEV;
-	}
-
-	/* clear xstats */
-	ndev->xstats.napi_poll = 0;
-	ndev->xstats.napi_poll_onrun = 0;
-	ndev->xstats.napi_poll_resched = 0;
-	ndev->xstats.napi_poll_completed = 0;
-	ndev->xstats.napi_poll_rx = 0;
-	ndev->xstats.txconf_loop = 0;
-	ndev->xstats.txconf = 0;
-	ndev->xstats.tx_busy = 0;
-	ndev->xstats.tx_pkt_frags = 0;
-	ndev->xstats.tx_pkt_frag_deep = 0;
-#ifdef PFE_CFG_MULTI_INSTANCE_SUPPORT
-	ndev->xstats.ihc_rx = 0;
-	ndev->xstats.ihc_tx = 0;
-#endif
-
-#ifdef PFE_CFG_PFE_MASTER
-	/* start HIF channel driver */
-	pfe_hif_drv_start(ndev->chnl_sc.drv);
-
-	/* start phylink */
-	if (ndev->phylink) {
-		if(!(ndev->opts & PFENG_LOGIF_OPTS_PHY_CONNECTED)) {
-			ret = pfeng_phylink_connect_phy(ndev);
-			if (ret)
-				netdev_err(netdev, "Error connecting to the phy: %d\n", ret);
-			else
-				ndev->opts |= PFENG_LOGIF_OPTS_PHY_CONNECTED;
-		}
-		if((ndev->opts & PFENG_LOGIF_OPTS_PHY_CONNECTED)) {
-			ret = pfeng_phylink_start(ndev);
-			if (ret)
-				netdev_warn(netdev, "Error starting phylink: %d\n", ret);
-		}
-	}
-#endif
-
-	/* Enable EMAC logif */
-	ret = pfe_log_if_enable(ndev->logif_emac);
-	if (ret) {
-		netdev_err(netdev, "Cannot enable EMAC: %d\n", ret);
-		goto err_mac_ena;
-	}
-
-#ifdef PFE_CFG_PFE_MASTER
-	napi_enable(&ndev->napi);
-#elif PFE_CFG_PFE_SLAVE
-	netif_carrier_on(netdev);
-#endif
-
-	netif_tx_start_queue(netdev_get_tx_queue(netdev, 0));
-
-	return ret;
-
-err_mac_ena:
-
-	return ret;
-}
-
-static int pfeng_napi_txack(struct pfeng_ndev *ndev, int limit)
-{
-	unsigned int done = 0;
-	void *ref;
-
-	while((ref = pfe_hif_drv_client_receive_tx_conf(ndev->client, 0))) {
-		u32 refid = (u32)(u64)ref;
-
-		/* Decrement required after transportation */
-		pfeng_hif_chnl_txconf_free_map_full(ndev, refid - 1);
-
-		done++;
-	}
-	ndev->xstats.txconf += done;
-
-	if (likely(done))
-		ndev->xstats.txconf_loop++;
-
-	return done;
-}
-
-/**
- *  pfeng_xmit - Tx entry point of the driver
- *  @skb : the socket buffer
- *  @dev : device pointer
- *  Description : this is the tx entry point of the driver.
- *  It programs the chain or the ring [TODO: and supports oversized frames
- *  and SG feature].
- */
-static netdev_tx_t pfeng_logif_xmit(struct sk_buff *skb, struct net_device *netdev)
-{
-	struct pfeng_ndev *ndev = netdev_priv(netdev);
-
-	hif_drv_sg_list_t sg_list = { 0 };
-	errno_t ret = -EINVAL;
-	unsigned int plen = skb_headlen(skb);
-	u32 nfrags;
-	dma_addr_t des = 0;
-	int f, ref_num, refid = -1;
-
-	/* Cleanup Tx ring first */
-	pfeng_napi_txack(ndev, 0 /* no NAPI */);
-
-	/* Check if fragmented skb fits in our SG_LIST */
-	if (unlikely(skb_shinfo(skb)->nr_frags > (HIF_MAX_SG_LIST_LENGTH - 2))) {
-		ret = skb_linearize(skb);
-		if (ret) {
-			net_err_ratelimited("%s: Packet dropped. Error %d\n", netdev->name, ret);
-			netdev->stats.tx_dropped++;
-			return NET_XMIT_DROP;
-		}
-        }
-
-	/* Check for space in TX ring */
-	if (unlikely(!pfeng_hif_chnl_txconf_check(ndev, skb_shinfo(skb)->nr_frags + 2))) {
-		ret = skb_linearize(skb);
-		if (ret) {
-			net_err_ratelimited("%s: Packet dropped. Error %d\n", netdev->name, ret);
-			netdev->stats.tx_dropped++;
-			return NET_XMIT_DROP;
-		}
-        }
-
-	nfrags = skb_shinfo(skb)->nr_frags;
-
-	/* Fill first part of packet */
-	des = dma_map_single(ndev->dev, skb->data, plen, DMA_TO_DEVICE);
-	if (unlikely(dma_mapping_error(ndev->dev, des))) {
-		net_err_ratelimited("%s: Frame mapping failed. Packet dropped.\n", netdev->name);
-		netdev->stats.tx_dropped++;
-		return NET_XMIT_DROP;
-	}
-	refid = pfeng_hif_chnl_txconf_put_map_frag(ndev, skb->data, des, plen, skb);
-	/* Increment to be able to pass number 0 */
-	refid++;
-
-	sg_list.items[0].data_pa = (void *)des;
-	sg_list.items[0].data_va = skb->data;
-	sg_list.items[0].len = plen;
-#ifdef PFE_CFG_HIF_TX_FIFO_FIX
-	sg_list.total_bytes += plen;
-#endif /* PFE_CFG_HIF_TX_FIFO_FIX */
-	sg_list.size = 1;
-
-	/* Process frags */
-	for (f = 0; f < nfrags; f++) {
-		skb_frag_t *frag = &skb_shinfo(skb)->frags[f];
-
-		plen = skb_frag_size(frag);
-		if (!plen)
-			continue;
-
-		des = skb_frag_dma_map(ndev->dev, frag, 0, plen, DMA_TO_DEVICE);
-		if (dma_mapping_error(ndev->dev, des)) {
-			net_err_ratelimited("%s: Fragment mapping failed. Packet dropped. Error %d\n", netdev->name, dma_mapping_error(ndev->dev, des));
-			pfeng_hif_chnl_txconf_unroll_map_full(ndev, refid - 1, f);
-			netdev->stats.tx_dropped++;
-			return NET_XMIT_DROP;
-		}
-		sg_list.items[f + 1].data_pa = (void *)des;
-		sg_list.items[f + 1].data_va = frag;
-		sg_list.items[f + 1].len = plen;
-#ifdef PFE_CFG_HIF_TX_FIFO_FIX
-		sg_list.total_bytes += plen;
-#endif /* PFE_CFG_HIF_TX_FIFO_FIX */
-		sg_list.size++;
-
-		pfeng_hif_chnl_txconf_put_map_frag(ndev, frag, des, plen, NULL);
-	}
-
-	if (likely(netdev->features & NETIF_F_IP_CSUM))
-		sg_list.flags.tx_flags |= HIF_TX_IP_CSUM | HIF_TX_TCP_CSUM | HIF_TX_UDP_CSUM;
-
-	if (unlikely((skb_shinfo(skb)->tx_flags & SKBTX_HW_TSTAMP) &&
-		     (ndev->tshw_cfg.tx_type == HWTSTAMP_TX_ON))) {
-
-		ref_num = pfeng_hwts_store_tx_ref(ndev, skb);
-		if(likely(-ENOMEM != ref_num)) {
-			/* Tell stack to wait for hw timestamp */
-			skb_shinfo(skb)->tx_flags |= SKBTX_IN_PROGRESS;
-
-			/* Tell HW to make timestamp  with our ref_num */
-			sg_list.flags.tx_flags |= HIF_TX_ETS;
-			sg_list.est_ref_num = htons(ref_num);
-		}
-		/* In error case no warning is necessary, it will come later from the worker. */
-	}
-
-	/* Software tx time stamp */
-	skb_tx_timestamp(skb);
-
-	ret = pfe_hif_drv_client_xmit_sg_pkt(ndev->client, 0, &sg_list, (void *)(u64)refid);
-	if (unlikely(EOK != ret)) {
-		ndev->xstats.tx_busy++;
-		net_err_ratelimited("%s: Packet dropped. Error %d\n", netdev->name, ret);
-		pfeng_hif_chnl_txconf_unroll_map_full(ndev, refid - 1, nfrags);
-		netdev->stats.tx_dropped++;
-		return NET_XMIT_DROP;
-	}
-
-	netdev->stats.tx_packets++;
-	netdev->stats.tx_bytes += skb->len;
-	if (nfrags) {
-		ndev->xstats.tx_pkt_frags++;
-		if (ndev->xstats.tx_pkt_frag_deep < nfrags)
-			ndev->xstats.tx_pkt_frag_deep = nfrags;
-	}
-
-	return NETDEV_TX_OK;
-}
-
-/**
- * @brief		Transmit IHC packet given as a SG list of buffers
- * @param[in]	client Client instance
- * @param[in]	dst Destination physical interface ID. Should by HIFs only.
- * @param[in]	queue TX queue number
- * @param[in]	sg_list Pointer to the SG list
- * @param[in]	ref_ptr Reference pointer to be provided within TX confirmation.
- * @return		EOK if success, error code otherwise.
- */
-errno_t pfe_hif_drv_client_xmit_ihc_sg_pkt(pfe_hif_drv_client_t *client, pfe_ct_phy_if_id_t dst, uint32_t queue, hif_drv_sg_list_t *sg_list, void *ref_ptr)
-{
-	struct sk_buff *skb;
-	dma_addr_t des = 0;
-	int refid = -1, ret;
-	hif_drv_sg_list_t sg_out = { 0 };
-	u32 plen = sg_list->items[0].len;
-	struct pfeng_ndev *ndev = pfe_hif_drv_client_get_priv(client);
-
-	/* Cleanup Tx ring first */
-	pfeng_napi_txack(ndev, 0 /* no NAPI */);
-
-	/* Copy sg_list buffer to skb to reuse txconf standard cleaning */
-	skb = netdev_alloc_skb(ndev->netdev, plen + 2);
-	if (!skb)
-		return ENOMEM;
-	/* Align IP on 16 byte boundaries */
-	skb_reserve(skb, 2);
-	skb_put_data(skb, sg_list->items[0].data_va, plen);
-
-	/* Remap skb */
-	des = dma_map_single(ndev->dev, skb->data, plen, DMA_TO_DEVICE);
-	if (unlikely(dma_mapping_error(ndev->dev, des))) {
-		netdev_err(ndev->netdev, "No possible to map frame, dropped.\n");
-		kfree_skb(skb);
-		return ENOMEM;
-	}
-	refid = pfeng_hif_chnl_txconf_put_map_frag(ndev, skb->data, des, plen, skb);
-	/* Increment to be able to pass number 0 */
-	refid++;
-
-	/* Free original sg_list */
-	oal_mm_free_contig(ref_ptr);
-
-	/* Build new sg_list */
-	sg_out.dst_phy = dst;
-	sg_out.items[0].data_pa = (void *)des;
-	sg_out.items[0].data_va = skb->data;
-	sg_out.items[0].len = plen;
-#ifdef PFE_CFG_HIF_TX_FIFO_FIX
-	sg_out.total_bytes += plen;
-#endif /* PFE_CFG_HIF_TX_FIFO_FIX */
-	sg_out.size = 1;
-
-	ret = pfe_hif_drv_client_xmit_sg_pkt(client, queue, &sg_out, (void *)(u64)refid);
-	if (ret) {
-		pfeng_hif_chnl_txconf_free_map_full(ndev, refid - 1);
-		kfree_skb(skb);
-		return ret;
-	}
-
-	return 0;
-}
-
-/**
- * @brief		Release packet
- * @param[in]	pkt The packet instance
- */
-void pfe_hif_pkt_free(pfe_hif_pkt_t *pkt)
-{
-	if (pkt->ref_ptr)
-		kfree_skb(pkt->ref_ptr);
-	oal_mm_free(pkt);
-}
-
-static int pfeng_napi_ioctl(struct net_device *netdev, struct ifreq *rq, int cmd)
-{
-	struct pfeng_ndev *ndev = netdev_priv(netdev);
-	int ret = -EOPNOTSUPP;
-
-	if (!netif_running(netdev))
-		return -EINVAL;
-
-#ifdef PFE_CFG_PFE_MASTER
-	switch (cmd) {
-	case SIOCGMIIPHY:
-	case SIOCGMIIREG:
-	case SIOCSMIIREG:
-		ret = phylink_mii_ioctl(ndev->phylink, rq, cmd);
-		break;
-	case SIOCSHWTSTAMP:
-		return pfeng_hwts_ioctl_set(ndev, rq);
-		break;
-	case SIOCGHWTSTAMP:
-		return pfeng_hwts_ioctl_get(ndev, rq);
-		break;
-	default:
-		break;
-	}
-#endif
-
-	return ret;
-}
-
-static int pfeng_napi_change_mtu(struct net_device *netdev, int mtu)
-{
-#ifdef PFE_CFG_PFE_MASTER
-	struct pfeng_ndev *ndev = netdev_priv(netdev);
-	pfe_emac_t *emac = ndev->priv->pfe->emac[ndev->eth->emac_id];
-#endif
-
-	netdev_info(netdev, "%s: mtu change to %d\n", __func__, mtu);
-
-	if (mtu < (ETH_ZLEN - ETH_HLEN) || mtu > (SKB_MAX_HEAD(NET_SKB_PAD + NET_IP_ALIGN))) {
-		netdev_err(netdev, "Error: Invalid MTU value requested: %d\n", mtu);
-		return -EINVAL;
-	}
-
-	if (netif_running(netdev)) {
-		netdev_err(netdev, "Error: Must be stopped to change its MTU\n");
-		return -EBUSY;
-	}
-
-#ifdef PFE_CFG_PFE_MASTER
-	if (pfe_emac_set_max_frame_length(emac, mtu) != EOK) {
-		netdev_err(netdev, "Error: Invalid MTU value requested: %d\n", mtu);
-		return -EINVAL;
-	}
-#endif
-
-	netdev->mtu = mtu;
-
-	netdev_update_features(netdev);
-
-	return 0;
-}
-
-static void pfeng_logif_set_rx_mode(struct net_device *netdev)
-{
-#ifdef PFE_CFG_PFE_MASTER
-	struct pfeng_ndev *ndev = netdev_priv(netdev);
-	pfe_ct_phy_if_id_t hif_id = ndev->priv->local_drv_id;
-
-	/* 	Since we don't know which addresses were removed, it's necessary
-		to flush all multicast addresses from the internal database and
-		then add only active addresses. */
-	if (pfe_log_if_flush_mac_addrs(ndev->logif_emac, PFE_FLUSH_MODE_MULTI, hif_id) == EOK)
-		netdev_dbg(netdev, "flushed multicast MAC addrs owned by ID %d\n", hif_id);
-
-	if (netdev->flags & IFF_PROMISC) {
-		/* Enable promiscuous mode */
-		if (pfe_log_if_promisc_enable(ndev->logif_emac) == EOK)
-			netdev_dbg(netdev, "promisc enabled\n");
-	} else if (netdev->flags & IFF_ALLMULTI) {
-		if (pfe_log_if_allmulti_enable(ndev->logif_emac) == EOK)
-			netdev_dbg(netdev, "allmulti enabled\n");
-	} else if (netdev->flags & IFF_MULTICAST) {
-		struct netdev_hw_addr *ha;
-		netdev_for_each_mc_addr(ha, netdev) {
-			if (pfe_log_if_add_mac_addr(ndev->logif_emac, ha->addr, hif_id) == EOK)
-				netdev_dbg(netdev, "added multicast MAC addr: %pM\n", ha->addr);
-		}
-	} else {
-		/* Disable promiscuous mode */
-		if (pfe_log_if_promisc_disable(ndev->logif_emac) == EOK)
-			netdev_dbg(netdev, "promisc disabled\n");
-		/* Disable allmulti mode */
-		if (pfe_log_if_allmulti_disable(ndev->logif_emac) == EOK)
-			netdev_dbg(netdev, "allmulti disabled\n");
-	}
-#endif
-}
-
-static const struct net_device_ops pfeng_netdev_ops = {
-	.ndo_open		= pfeng_logif_open,
-	.ndo_start_xmit		= pfeng_logif_xmit,
-	.ndo_stop		= pfeng_logif_release,
-	.ndo_change_mtu		= pfeng_napi_change_mtu,
-	.ndo_do_ioctl		= pfeng_napi_ioctl,
-	.ndo_set_mac_address	= pfeng_logif_set_mac_address,
-	.ndo_set_rx_mode	= pfeng_logif_set_rx_mode,
-};
-
-static struct sk_buff *pfeng_hif_rx_get(struct pfeng_ndev *ndev, unsigned int *ihc_processed)
-{
-	struct sk_buff *skb;
-	pfe_ct_hif_rx_hdr_t *hif_hdr;
-
-	if(!ndev->client)
-		return NULL;
-
-	while(1) {
-
-		skb = pfeng_hif_drv_client_receive_pkt(ndev->client, 0);
-		if (unlikely(!skb))
-			/* no more packets */
-			return NULL;
-
-		hif_hdr = (pfe_ct_hif_rx_hdr_t *)skb->data;
-		hif_hdr->flags = (pfe_ct_hif_rx_flags_t)oal_ntohs(hif_hdr->flags);
-
-		if (unlikely(hif_hdr->flags & HIF_RX_TS)) {
-			/* Get rx hw time stamp */
-			pfeng_hwts_skb_set_rx_ts(ndev, skb);
-		} else if(unlikely(hif_hdr->flags & HIF_RX_ETS)) {
-			/* Get tx hw time stamp */
-			pfeng_hwts_get_tx_ts(ndev, skb);
-			/* Skb has only time stamp report so consume it */
-			consume_skb(skb);
-			/* Refill buffer */
-			pfeng_hif_chnl_refill_rx_buffer(ndev, false);
-			continue;
-		}
-
-#ifdef PFE_CFG_MULTI_INSTANCE_SUPPORT
-		/* Check for IHC frame */
-		if (unlikely (hif_hdr->flags & HIF_RX_IHC)) {
-			(*ihc_processed)++;
-
-			/* IHC client callback */
-			if (!pfe_hif_drv_ihc_put_pkt(ndev->chnl_sc.drv, skb->data, skb->len, skb)) {
-				pfe_hif_drv_ihc_do_cbk(ndev->chnl_sc.drv);
-			} else {
-				netdev_err(ndev->netdev, "RX IHC queuing failed. Origin phyif %d\n", hif_hdr->i_phy_if);
-				kfree_skb(skb);
-			}
-
-			continue;
-		}
-#endif /* PFE_CFG_MULTI_INSTANCE_SUPPORT */
-
-		/* Skip HIF header */
-		skb_pull(skb, 16);
-
-		return skb;
-	}
-
-	return NULL;
-}
-
-/**
- * pfeng_rx - manage the receive process
- * @priv: driver private structure
- * @limit: napi budget
- * @queue: RX client id
- * Description :  this the function called by the napi poll method.
- * It gets all the frames inside the ring.
- */
-static int pfeng_napi_rx(struct pfeng_ndev *ndev, int limit)
-{
-	struct net_device *netdev = ndev->netdev;
-	unsigned int done = 0;
-	unsigned int ihc_processed = 0;
-	struct sk_buff *skb;
-
-	while((skb = pfeng_hif_rx_get(ndev, &ihc_processed))) {
-
-		if (likely(netdev->features & NETIF_F_RXCSUM)) {
-			/* we have only OK info, signal it */
-			skb->ip_summed = CHECKSUM_UNNECESSARY;
-			/* one level csumming support */
-			skb->csum_level = 0;
-		}
-
-		/* Pass to upper layer */
-		skb->protocol = eth_type_trans(skb, netdev);
-
-		if (unlikely(skb->ip_summed == CHECKSUM_NONE))
-			netif_receive_skb(skb);
-		else
-			napi_gro_receive(&ndev->napi, skb);
-
-		netdev->stats.rx_packets++;
-		netdev->stats.rx_bytes += skb_headlen(skb);
-
-		pfeng_hif_chnl_refill_rx_buffer(ndev, false);
-		done++;
-		if(unlikely(done == limit))
-			break;
-	}
-
-	if (likely(done))
-		ndev->xstats.napi_poll_rx++;
-
-#ifdef PFE_CFG_MULTI_INSTANCE_SUPPORT
-	if (likely(ihc_processed))
-		ndev->xstats.ihc_rx += ihc_processed;
-
-	return done + ihc_processed;
-#else
-	return done;
-#endif
-}
-
-/**
- *  pfeng_poll - pfeng poll method (NAPI)
- *  @napi : pointer to the napi structure.
- *  @budget : maximum number of packets that the current CPU can receive from
- *        all interfaces.
- *  Description :
- *  To look at the incoming frames and clear the tx resources.
- */
-static int pfeng_napi_poll(struct napi_struct *napi, int budget)
-{
-	struct pfeng_ndev *ndev = container_of(napi, struct pfeng_ndev, napi);
-	int done = 0;
-
-	/* Consume RX pkt(s) */
-	done = pfeng_napi_rx(ndev, budget);
-
-	ndev->xstats.napi_poll++;
-
-	if (done < budget && napi_complete_done(napi, done)) {
-		ndev->xstats.napi_poll_completed++;
-
-		/* Enable RX interrupt */
-		pfe_hif_drv_client_rx_done(ndev->client);
-	}
-
-	return done;
-}
-
-struct pfeng_ndev *pfeng_napi_if_create(struct pfeng_priv *priv, struct pfeng_eth *eth)
-{
-	struct device *dev = &priv->pdev->dev;
-	struct net_device *netdev;
-	struct pfeng_ndev *ndev;
-	int ret;
-
-	if (!eth->name || !strlen(eth->name)) {
-		dev_err(dev, "Interface name is missing: %s\n", eth->name);
-		return NULL;
-	}
-
-	/* allocate net device with one RX and one TX queue */
-	netdev = alloc_etherdev_mqs(sizeof(*ndev), 1, 1);
-	if (!netdev) {
-		dev_err(dev, "Error allocating the etherdev\n");
-		return NULL;
-	}
-
-	/* Set the sysfs physical device reference for the network logical device */
-	SET_NETDEV_DEV(netdev, dev);
-
-	/* set ifconfig visible config */
-	netdev->mem_start = (unsigned long)priv->cfg->cbus_base;
-	netdev->mem_end = priv->cfg->cbus_base + priv->cfg->cbus_len;
-
-	/* Set private structures */
-	ndev = netdev_priv(netdev);
-	ndev->dev = dev;
-	ndev->netdev = netdev;
-	ndev->priv = priv;
-	ndev->eth = eth;
-	ndev->client = NULL;
-	ndev->emac_regs = NULL;
-	ndev->emac_speed = 0;
-	ndev->phylink = NULL;
-
-	/* Set netdev IRQ */
-	netdev->irq = priv->cfg->irq_vector_hif_chnls[eth->hif_chnl_sc];
-
-	/* Configure real RX and TX queues */
-	netif_set_real_num_rx_queues(netdev, 1);
-	netif_set_real_num_tx_queues(netdev, 1);
-
-	/* Set up explicit device name based on platform names */
-	strlcpy(netdev->name, eth->name, IFNAMSIZ);
-
-	netdev->netdev_ops = &pfeng_netdev_ops;
-
-	/* MTU ranges */
-	netdev->min_mtu = ETH_ZLEN - ETH_HLEN;
-
-#ifdef PFE_CFG_PFE_MASTER
-	pfeng_ethtool_init(netdev);
-
-	/* Add phylink */
-	if (eth->intf_mode != PHY_INTERFACE_MODE_INTERNAL)
-		pfeng_phylink_create(ndev);
-#endif
-
-	/* Accelerated feature */
-	netdev->hw_features |= NETIF_F_IP_CSUM | NETIF_F_IPV6_CSUM | NETIF_F_RXCSUM;
-	netdev->hw_features |= NETIF_F_SG;
-	netdev->features = netdev->hw_features;
-
-	netif_napi_add(netdev, &ndev->napi, pfeng_napi_poll, NAPI_POLL_WEIGHT);
-
-	ret = register_netdev(netdev);
-	if (ret) {
-		dev_err(dev, "Error registering the device: %d\n", ret);
-		goto err_ndev_reg;
-	}
-	netdev_info(netdev, "registered\n");
-
-	/* start without the RUNNING flag, phylink controls it later */
-	netif_carrier_off(netdev);
-
-	/* attach to the hif channel */
-	ret = pfeng_hif_client_add(ndev);
-	if (ret) {
-		netdev_err(netdev, "Cannot add HIF client: %d)\n", ret);
-		goto err_ndev_reg;
-	}
-
-	/* Init hw timestamp */
-	ret = pfeng_hwts_init(ndev);
-	if (ret) {
-		netdev_err(netdev, "Cannot initialize timestamping: %d)\n", ret);
-		goto err_ndev_reg;
-	}
-
-	return ndev;
-
-err_ndev_reg:
-	pfeng_napi_if_release(ndev);
-	return NULL;
-}
-
-void pfeng_napi_if_release(struct pfeng_ndev *ndev)
-{
-	if (!ndev)
-		return;
-
-	netdev_info(ndev->netdev, "unregisted\n");
-
-	unregister_netdev(ndev->netdev); /* calls ndo_stop */
-
-	/* Remove HIF client */
-	pfeng_hif_client_remove(ndev);
-
-	/* Release timestamp memory */
-	pfeng_hwts_release(ndev);
-
-	/* Detach Bman */
-	if (ndev->bman.rx_pool) {
-		pfeng_bman_pool_destroy(ndev);
-		ndev->bman.rx_pool = NULL;
-	}
-
-#ifdef PFE_CFG_PFE_MASTER
-	if (ndev->phylink)
-		pfeng_phylink_destroy(ndev);
-#endif
-
-	netif_napi_del(&ndev->napi);
-	free_netdev(ndev->netdev);
-}
diff --git a/sw/linux-pfeng/pfeng-netif.c b/sw/linux-pfeng/pfeng-netif.c
new file mode 100644
index 0000000..079f8b4
--- /dev/null
+++ b/sw/linux-pfeng/pfeng-netif.c
@@ -0,0 +1,1357 @@
+/*
+ * Copyright 2020-2021 NXP
+ *
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ */
+
+#include <linux/net.h>
+#include <linux/rtnetlink.h>
+#include <linux/list.h>
+#include <linux/clk.h>
+
+#include "pfe_cfg.h"
+#include "oal.h"
+#include "pfe_platform.h"
+
+#include "pfeng.h"
+
+#define pfeng_netif_for_each_chnl(netif, chnl_idx, chnl)			\
+	for (chnl_idx = 0, chnl = &netif->priv->hif_chnl[chnl_idx];		\
+		chnl_idx < PFENG_PFE_HIF_CHANNELS;				\
+		chnl_idx++, chnl = &netif->priv->hif_chnl[chnl_idx])
+
+typedef struct
+{
+	pfe_mac_addr_t addr;		/* The MAC address */
+	struct list_head iterator;	/* List chain entry */
+	pfe_drv_id_t owner;		/* Identification of the driver that owns this entry */
+} pfeng_netif_mac_db_list_entry_t;
+
+static int pfeng_netif_logif_open(struct net_device *netdev)
+{
+	struct pfeng_netif *netif = netdev_priv(netdev);
+	struct pfeng_hif_chnl *chnl;
+	int ret = 0, i;
+
+#ifdef PFE_CFG_PFE_SLAVE
+	if (!netif->slave_netif_inited) {
+		netdev_err(netif->netdev, "SLAVE init transaction failed.\n");
+		return -EINVAL;
+	}
+#endif /* PFE_CFG_PFE_SLAVE */
+
+	/* Configure real RX and TX queues */
+	netif_set_real_num_rx_queues(netdev, netif->cfg->hifs);
+	netif_set_real_num_tx_queues(netdev, 1);
+
+	/* start HIF channel(s) */
+	pfeng_netif_for_each_chnl(netif, i, chnl) {
+		if (!(netif->cfg->hifmap & (1 << i)))
+			continue;
+
+		if (chnl->status == PFENG_HIF_STATUS_ENABLED)
+			pfeng_hif_chnl_start(chnl);
+
+		if (chnl->status != PFENG_HIF_STATUS_RUNNING) {
+			netdev_err(netif->netdev, "Invalid HIF%u (not running)\n", i);
+			return -EINVAL;
+		}
+	}
+
+#ifdef PFE_CFG_PFE_MASTER
+	/* Start PHY */
+	if (netif->phylink) {
+		ret = pfeng_phylink_start(netif);
+		if (ret)
+			netdev_warn(netdev, "Error starting phylink: %d\n", ret);
+	}
+#endif
+
+	/* Enable EMAC logif */
+	ret = pfe_log_if_enable(netif->priv->emac[netif->cfg->emac].logif_emac);
+	if (ret) {
+		netdev_err(netdev, "Cannot enable EMAC: %d\n", ret);
+		goto err_mac_ena;
+	}
+
+#ifdef PFE_CFG_PFE_SLAVE
+	netif_carrier_on(netdev);
+#endif
+
+	netif_tx_start_all_queues(netdev);
+
+	return ret;
+
+err_mac_ena:
+	return ret;
+}
+
+/* Map TX traffic to HIF channel. Currently is used only first HIF channel for TX */
+static struct pfeng_hif_chnl *pfeng_netif_map_tx_channel(struct pfeng_netif *netif, struct sk_buff *skb)
+{
+	u32 id = ffs(netif->cfg->hifmap);
+
+	if (id < 1)
+		return NULL;
+
+	//TODO: id = skb_get_queue_mapping(skb);
+
+	return &netif->priv->hif_chnl[id - 1];
+}
+
+static int pfeng_netif_logif_txack(struct pfeng_hif_chnl *chnl, int limit)
+{
+	unsigned int done = 0;
+
+	while(pfe_hif_chnl_get_tx_conf(chnl->priv) == EOK) {
+
+#ifdef PFE_CFG_MULTI_INSTANCE_SUPPORT
+		/* Check for IHC packet first */
+		if (unlikely (pfeng_hif_chnl_txconf_get_flag(chnl) == PFENG_MAP_PKT_IHC)) {
+			pfe_hif_drv_client_t *client = &chnl->ihc_client;
+			/* IDEX confirmation must return IDEX API compatible data */
+			if (!pfe_hif_drv_ihc_put_conf(client)) {
+				/* Call IHC TX callback */
+				client->event_handler(client, client->priv, EVENT_TXDONE_IND, 0);
+			} else {
+				dev_err(chnl->dev, "TXconf IHC queuing failed.\n");
+			}
+		}
+#endif /* PFE_CFG_MULTI_INSTANCE_SUPPORT */
+
+		pfeng_hif_chnl_txconf_free_map_full(chnl);
+
+		done++;
+	}
+	return done;
+}
+
+static void pfeng_netif_tx_conf(struct work_struct *work)
+{
+	struct pfeng_netif *netif = container_of(work, struct pfeng_netif, tx_conf_work);
+	struct pfeng_hif_chnl *chnl;
+	int ring_len;
+
+	/* TODO: replace this with Tx NAPI! */
+	chnl = pfeng_netif_map_tx_channel(netif, NULL);
+	pfeng_netif_logif_txack(chnl, 0 /* no NAPI */);
+	ring_len = pfe_hif_chnl_get_tx_fifo_depth(chnl->priv);
+
+	if (pfe_hif_chnl_can_accept_tx_num(chnl->priv, ring_len >> 1)) {
+		/* only one queue per netdev used at this point */
+		netif_wake_subqueue(netif->netdev, 0);
+	} else {
+		schedule_work(&netif->tx_conf_work);
+	}
+}
+
+static netdev_tx_t pfeng_netif_logif_xmit(struct sk_buff *skb, struct net_device *netdev)
+{
+	struct pfeng_netif *netif = netdev_priv(netdev);
+	errno_t ret = -EINVAL;
+	unsigned int plen;
+	u32 nfrags = skb_shinfo(skb)->nr_frags;
+	dma_addr_t des = 0;
+	int f, ref_num = 0, refid = -1;
+	struct pfeng_hif_chnl *chnl;
+	pfe_ct_hif_tx_hdr_t *tx_hdr;
+
+	/* Get mapped HIF channel */
+	chnl = pfeng_netif_map_tx_channel(netif, skb);
+	if (unlikely (!chnl)) {
+		net_err_ratelimited("%s: Packet dropped. Map channel failed\n", netdev->name);
+		netdev->stats.tx_dropped++;
+		return NETDEV_TX_BUSY;
+	}
+	if (unlikely (chnl->status != PFENG_HIF_STATUS_RUNNING)) {
+		net_err_ratelimited("%s: Packet dropped. Channel is not in running state\n", netdev->name);
+		netdev->stats.tx_dropped++;
+		return NETDEV_TX_BUSY;
+	}
+
+	/* Protect shared HIF channel resource */
+#ifndef PFE_CFG_MULTI_INSTANCE_SUPPORT
+	if (unlikely(chnl->cl_mode == PFENG_HIF_MODE_SHARED))
+#else
+	if (unlikely((chnl->cl_mode == PFENG_HIF_MODE_SHARED) || chnl->ihc))
+#endif /* PFE_CFG_MULTI_INSTANCE_SUPPORT */
+#ifdef LOCK_TX_SPINLOCK
+		spin_lock(&chnl->lock_tx);
+#else
+		mutex_lock(&chnl->lock_tx);
+#endif
+
+#ifdef PFE_CFG_HIF_TX_FIFO_FIX
+	if (unlikely(FALSE == pfe_hif_chnl_can_accept_tx_data(chnl->priv, skb_pagelen(skb) + PFENG_TX_PKT_HEADER_SIZE))) {
+		net_err_ratelimited("%s: Packet overlimited.\n", netdev->name);
+		goto busy_drop;
+	}
+#endif /* PFE_CFG_HIF_TX_FIFO_FIX */
+
+	/* Cleanup Tx HIF channel ring(s) first */
+	pfeng_netif_logif_txack(chnl, 0 /* no NAPI */);
+
+	/* Check for ring space */
+	if (unlikely(!pfe_hif_chnl_can_accept_tx_num(chnl->priv, nfrags + 1))) {
+		netif_stop_subqueue(netdev, skb->queue_mapping);
+		/* TODO: replace this with Tx NAPI! */
+		schedule_work(&netif->tx_conf_work);
+		goto busy_drop;
+	}
+
+	/* Prepare headroom for TX PFE packet header */
+	if (skb_headroom(skb) < PFENG_TX_PKT_HEADER_SIZE) {
+		struct sk_buff *skb_new;
+
+		skb_new = skb_realloc_headroom(skb, PFENG_TX_PKT_HEADER_SIZE);
+		if (!skb_new)
+			goto busy_drop;
+		kfree_skb(skb);
+		skb = skb_new;
+	}
+
+	skb_push(skb, PFENG_TX_PKT_HEADER_SIZE);
+
+	plen = skb_headlen(skb);
+
+	/* Set TX header */
+	tx_hdr = (pfe_ct_hif_tx_hdr_t *)skb->data;
+	memset(tx_hdr, 0, sizeof(*tx_hdr));
+	tx_hdr->chid = chnl->idx;
+
+#ifdef PFE_CFG_HIF_PRIO_CTRL
+	/* Firmware will assign queue/priority */
+	tx_hdr->queue = 255;
+#else
+	tx_hdr->queue = 0;
+#endif /* PFE_CFG_HIF_PRIO_CTRL */
+
+#ifdef PFE_CFG_ROUTE_HIF_TRAFFIC
+	/* Tag the frame with ID of target physical interface */
+	tx_hdr->cookie = oal_htonl(netif->cfg->emac);
+#else
+	tx_hdr->flags |= HIF_TX_INJECT;
+	tx_hdr->e_phy_ifs = oal_htonl(1U << netif->cfg->emac);
+#endif /* PFE_CFG_ROUTE_HIF_TRAFFIC */
+
+	if (likely(netdev->features & NETIF_F_IP_CSUM))
+		tx_hdr->flags |= HIF_TX_IP_CSUM | HIF_TX_TCP_CSUM | HIF_TX_UDP_CSUM;
+
+	/* HW timestamping */
+	if (unlikely((skb_shinfo(skb)->tx_flags & SKBTX_HW_TSTAMP) &&
+		     (netif->tshw_cfg.tx_type == HWTSTAMP_TX_ON))) {
+
+		ref_num = pfeng_hwts_store_tx_ref(netif, skb);
+
+		if(likely(-ENOMEM != ref_num)) {
+			/* Tell stack to wait for hw timestamp */
+			skb_shinfo(skb)->tx_flags |= SKBTX_IN_PROGRESS;
+
+			/* Tell HW to make timestamp  with our ref_num */
+			tx_hdr->flags |= HIF_TX_ETS;
+			tx_hdr->refnum = htons(ref_num);
+		}
+		/* In error case no warning is necessary, it will come later from the worker. */
+	}
+
+	/* Fill linear part of packet */
+	des = dma_map_single(netif->dev, skb->data, plen, DMA_TO_DEVICE);
+	if (unlikely(dma_mapping_error(netif->dev, des))) {
+		net_err_ratelimited("%s: Frame mapping failed. Packet dropped.\n", netdev->name);
+		goto busy_drop;
+	}
+	refid = pfeng_hif_chnl_txconf_put_map_frag(chnl, skb->data, des, plen, skb, PFENG_MAP_PKT_NORMAL);
+	/* Increment to be able to pass number 0 */
+	refid++;
+
+	/* Software tx time stamp */
+	skb_tx_timestamp(skb);
+
+	/* Put linear part */
+	ret = pfe_hif_chnl_tx(chnl->priv, (void *)des, skb->data, plen, !nfrags);
+	if (unlikely(EOK != ret)) {
+		net_err_ratelimited("%s: HIF channel tx failed. Packet dropped. Error %d\n", netdev->name, ret);
+		pfeng_hif_chnl_txconf_unroll_map_full(chnl, refid - 1, 0);
+		goto busy_drop;
+	}
+
+	/* Process frags */
+	for (f = 0; f < nfrags; f++) {
+		skb_frag_t *frag = &skb_shinfo(skb)->frags[f];
+
+		plen = skb_frag_size(frag);
+		if (!plen) {
+			nfrags--;
+			continue;
+		}
+
+		des = skb_frag_dma_map(netif->dev, frag, 0, plen, DMA_TO_DEVICE);
+		if (dma_mapping_error(netif->dev, des)) {
+			net_err_ratelimited("%s: Fragment mapping failed. Packet dropped. Error %d\n", netdev->name, dma_mapping_error(netif->dev, des));
+			pfeng_hif_chnl_txconf_unroll_map_full(chnl, refid - 1, f);
+			goto busy_drop;
+		}
+
+		ret = pfe_hif_chnl_tx(chnl->priv, (void *)des, frag, plen, (f + 1) >= nfrags);
+		if (unlikely(EOK != ret)) {
+			net_err_ratelimited("%s: HIF channel frag tx failed. Packet dropped. Error %d\n", netdev->name, ret);
+			pfeng_hif_chnl_txconf_unroll_map_full(chnl, refid - 1, f);
+			goto busy_drop;
+		}
+
+		pfeng_hif_chnl_txconf_put_map_frag(chnl, frag, des, plen, NULL, PFENG_MAP_PKT_NORMAL);
+	}
+
+#ifndef PFE_CFG_MULTI_INSTANCE_SUPPORT
+	if (unlikely(chnl->cl_mode == PFENG_HIF_MODE_SHARED))
+#else
+	if (unlikely((chnl->cl_mode == PFENG_HIF_MODE_SHARED) || chnl->ihc))
+#endif /* PFE_CFG_MULTI_INSTANCE_SUPPORT */
+#ifdef LOCK_TX_SPINLOCK
+		spin_unlock(&chnl->lock_tx);
+#else
+		mutex_unlock(&chnl->lock_tx);
+#endif
+
+	netdev->stats.tx_packets++;
+	netdev->stats.tx_bytes += skb->len;
+
+	return NETDEV_TX_OK;
+
+busy_drop:
+#ifndef PFE_CFG_MULTI_INSTANCE_SUPPORT
+	if (unlikely(chnl->cl_mode == PFENG_HIF_MODE_SHARED))
+#else
+	if (unlikely((chnl->cl_mode == PFENG_HIF_MODE_SHARED) || chnl->ihc))
+#endif /* PFE_CFG_MULTI_INSTANCE_SUPPORT */
+#ifdef LOCK_TX_SPINLOCK
+		spin_unlock(&chnl->lock_tx);
+#else
+		mutex_unlock(&chnl->lock_tx);
+#endif
+
+	netdev->stats.tx_dropped++;
+	return NETDEV_TX_BUSY;
+
+}
+
+#ifdef PFE_CFG_MULTI_INSTANCE_SUPPORT
+
+static void dump_idex_rawpkt(const char *label, void *data, u32 dlen)
+{
+#if 0
+#ifdef PFE_CFG_PFE_MASTER
+	const char *mode = "MASTER";
+#else
+	const char *mode = "SLAVE";
+#endif
+	const uint32_t hdrsize = sizeof(pfe_ct_hif_rx_hdr_t);
+	//pfe_ct_phy_if_id_t i_phy_id = pfe_hif_pkt_get_ingress_phy_id(pkt);
+
+	printk("IDEX-%s: %s: %*ph\n", mode, label, hdrsize, data);
+	printk("IDEX-%s: %s: %*ph\n", mode, label, dlen - hdrsize, data + hdrsize);
+#endif
+}
+
+void pfeng_ihc_tx_work_handler(struct work_struct *work)
+{
+	struct pfeng_priv* priv = container_of(work, struct pfeng_priv, ihc_tx_work);
+	struct pfeng_hif_chnl *chnl = priv->ihc_chnl;
+	struct pfeng_ihc_tx ihc_tx = { 0 };
+	struct sk_buff *skb = NULL;
+	dma_addr_t des = 0;
+	int refid = -1, ret;
+
+	/* IHC transport requires protection */
+#ifdef LOCK_TX_SPINLOCK
+	spin_lock(&chnl->lock_tx);
+#else
+	mutex_lock(&chnl->lock_tx);
+#endif
+
+	if (!kfifo_get(&priv->ihc_tx_fifo, &ihc_tx)) {
+		dev_err(chnl->dev, "No IHC TX data!\n");
+		goto err;
+	}
+	skb = ihc_tx.skb;
+
+	/* Cleanup Tx HIF channel ring first */
+	pfeng_netif_logif_txack(chnl, 0 /* no NAPI */);
+
+	/* Remap skb */
+	des = dma_map_single(chnl->dev, skb->data, skb_headlen(skb), DMA_TO_DEVICE);
+	if (unlikely(dma_mapping_error(chnl->dev, des))) {
+		dev_err(chnl->dev, "No possible to map IHC frame, dropped.\n");
+		goto err;
+	}
+	refid = pfeng_hif_chnl_txconf_put_map_frag(chnl, skb->data, des, skb_headlen(skb), skb, PFENG_MAP_PKT_IHC);
+	/* Increment to be able to pass number 0 */
+	refid++;
+
+	ret = pfe_hif_chnl_tx(chnl->priv, (void *)des, skb->data, skb_headlen(skb), true);
+	if (unlikely(EOK != ret)) {
+		pfeng_hif_chnl_txconf_unroll_map_full(chnl, refid - 1, 0);
+		goto err;
+	}
+#ifdef LOCK_TX_SPINLOCK
+	spin_unlock(&chnl->lock_tx);
+#else
+	mutex_unlock(&chnl->lock_tx);
+#endif
+
+	return;
+
+err:
+#ifdef LOCK_TX_SPINLOCK
+	spin_unlock(&chnl->lock_tx);
+#else
+	mutex_unlock(&chnl->lock_tx);
+#endif
+	if(skb)
+		kfree_skb(skb);
+
+	return;
+}
+
+/**
+ * @brief		Transmit IHC packet
+ * @param[in]	client Client instance
+ * @param[in]	dst Destination physical interface ID. Should by HIFs only.
+ * @param[in]	queue TX queue number
+ * @param[in]	idex_frame Pointer to the IHC packet with TX header
+ * @return		EOK if success, error code otherwise.
+ */
+errno_t pfe_hif_drv_client_xmit_ihc_pkt(pfe_hif_drv_client_t *client, pfe_ct_phy_if_id_t dst, uint32_t queue, void *idex_frame, uint32_t flen)
+{
+	struct pfeng_hif_chnl *chnl = container_of(client, struct pfeng_hif_chnl, ihc_client);
+	struct pfeng_priv *priv = (struct pfeng_priv *)dev_get_drvdata(chnl->dev);
+	struct sk_buff *skb = NULL;
+	int ret, pktlen;
+	pfe_ct_hif_tx_hdr_t *tx_hdr;
+	struct pfeng_ihc_tx ihc_tx = { 0 };
+
+	/* Find minimal pkt size */
+	if ((PFENG_TX_PKT_HEADER_SIZE + flen) < 68)
+		pktlen = 68;
+	else
+		pktlen = PFENG_TX_PKT_HEADER_SIZE + flen;
+
+	/* Copy packet to skb to reuse txconf standard cleaning */
+	skb = alloc_skb(pktlen, GFP_ATOMIC);
+	if (!skb) {
+		oal_mm_free_contig(idex_frame);
+		return ENOMEM;
+	}
+
+	/* Set TX header */
+	tx_hdr = (pfe_ct_hif_tx_hdr_t *)skb->data;
+	memset(tx_hdr, 0, PFENG_TX_PKT_HEADER_SIZE);
+	tx_hdr->chid = chnl->idx;
+	tx_hdr->flags |= HIF_TX_IHC | HIF_TX_INJECT;
+	tx_hdr->e_phy_ifs = oal_htonl(1U << dst);
+	skb_put(skb, PFENG_TX_PKT_HEADER_SIZE);
+
+	/* Append IDEX frame */
+	skb_put_data(skb, idex_frame, flen);
+dump_idex_rawpkt("TX", skb->data, skb_headlen(skb));
+
+	/* Free original idex_frame */
+	oal_mm_free_contig(idex_frame);
+
+	ihc_tx.chnl = chnl;
+	ihc_tx.skb = skb;
+
+	/* Send data to worker */
+	ret = kfifo_put(&priv->ihc_tx_fifo, ihc_tx);
+	if (ret != 1) {
+		dev_err(chnl->dev, "IHC TX kfifo full\n");
+		kfree_skb(skb);
+		return -ENOMEM;
+	}
+
+	schedule_work(&priv->ihc_tx_work);
+
+	return 0;
+}
+#endif /* PFE_CFG_MULTI_INSTANCE_SUPPORT */
+
+static int pfeng_netif_logif_stop(struct net_device *netdev)
+{
+	struct pfeng_netif *netif = netdev_priv(netdev);
+
+	if (!netif || !netif->cfg)
+		return 0;
+
+#ifdef PFE_CFG_PFE_MASTER
+	/* Stop PHY */
+	if (netif->phylink)
+		pfeng_phylink_stop(netif);
+#endif
+
+	netif_tx_stop_all_queues(netdev);
+
+	return 0;
+}
+
+static int pfeng_netif_logif_change_mtu(struct net_device *netdev, int mtu)
+{
+	netdev->mtu = mtu;
+	netdev_update_features(netdev);
+
+	/* Note: Max packet size is not changed on PFE_EMAC */
+
+	return 0;
+}
+
+static int pfeng_netif_logif_ioctl(struct net_device *netdev, struct ifreq *rq, int cmd)
+{
+	struct pfeng_netif *netif = netdev_priv(netdev);
+	int ret = -EOPNOTSUPP;
+
+	if (!netif_running(netdev))
+		return -EINVAL;
+
+	switch (cmd) {
+	case SIOCGMIIPHY:
+	case SIOCGMIIREG:
+	case SIOCSMIIREG:
+		ret = phylink_mii_ioctl(netif->phylink, rq, cmd);
+		break;
+	case SIOCSHWTSTAMP:
+		return pfeng_hwts_ioctl_set(netif, rq);
+	case SIOCGHWTSTAMP:
+		return pfeng_hwts_ioctl_get(netif, rq);
+	default:
+		break;
+	}
+
+	return ret;
+}
+
+static int pfeng_netif_logif_set_mac_address(struct net_device *netdev, void *p)
+{
+	struct pfeng_netif *netif = netdev_priv(netdev);
+	struct pfeng_emac *emac = &netif->priv->emac[netif->cfg->emac];
+	struct sockaddr *addr = (struct sockaddr *)p;
+	int ret = 0;
+
+	if (is_valid_ether_addr(addr->sa_data)) {
+		ether_addr_copy(netdev->dev_addr, addr->sa_data);
+	} else {
+		netdev_warn(netdev, "No MAC address found, using random\n");
+		eth_hw_addr_random(netdev);
+	}
+
+	netdev_info(netdev, "setting MAC addr: %pM\n", netdev->dev_addr);
+
+	if (emac->logif_emac) {
+		ret = pfe_log_if_flush_mac_addrs(
+			emac->logif_emac,
+			MAC_DB_CRIT_BY_OWNER_AND_TYPE,
+			PFE_TYPE_UC,
+			netif->priv->local_drv_id);
+
+		if (ret) {
+			netdev_err(netdev, "Can't delete existing unicast MAC address, new address won't be added!\n");
+			return ret;
+		}
+
+		ret = pfe_log_if_add_mac_addr(emac->logif_emac, netdev->dev_addr, netif->priv->local_drv_id);
+	}
+	if (!ret)
+		return 0;
+
+	return -ENOSPC;
+}
+
+#ifdef PFE_CFG_PFE_MASTER
+static char_t *mac_to_str(pfe_mac_addr_t addr)
+{
+	static char_t buf[18];
+
+	scnprintf(buf, sizeof(buf), "%pM", &addr[0]);
+
+	return buf;
+}
+
+/**
+ * @brief		Add new MAC addresses from list of requested addresses
+ * @param[in]	netdev The pointer to the network device structure
+ * @param[in]	iface The interface instance
+ * @param[in]	req_list List of requested addresses
+ * @retval		Execution status, EOK Success, error code otherwise
+ */
+static int pfeng_netif_add_mac_addrs(struct net_device *netdev, pfe_log_if_t *iface, struct list_head *req_list)
+{
+	int ret = EOK;
+	struct list_head *item;
+	pfeng_netif_mac_db_list_entry_t *entry;
+	pfe_mac_addr_t addr;
+	pfe_ct_phy_if_id_t owner;
+
+	/* Iterate over list of requested addresses */
+	list_for_each(item, req_list) {
+		entry = list_entry(item, pfeng_netif_mac_db_list_entry_t, iterator);
+		(void)memcpy(addr, entry->addr, sizeof(pfe_mac_addr_t));
+		owner = entry->owner;
+
+		netdev_dbg(netdev, "Adding %s to %s\n",
+					mac_to_str(addr), pfe_log_if_get_name(iface));
+
+		/* Add address into interface active list */
+		ret = pfe_log_if_add_mac_addr(iface, addr, owner);
+		if((ret != EOK) && (ret != ENOEXEC)) {
+			netdev_warn(netdev, "unable to add %s into %s: %d\n",
+						mac_to_str(addr), pfe_log_if_get_name(iface), ret);
+			return ret;
+		}
+	}
+
+	return EOK;
+}
+
+/**
+ * @brief		Delete unused MAC addresses based on comparison of requested list with
+ * 				internal MAC database according to specified rules.
+ * @param[in]	netdev The pointer to the network device structure
+ * @param[in]	iface The interface instance
+ * @param[in]	req_list List of requested addresses
+ * @param[in]	mac_db MAC database instance
+ * @retval		Execution status, EOK Success, error code otherwise
+ */
+static int pfeng_netif_del_mac_addrs(struct net_device *netdev, pfe_log_if_t *iface, struct list_head *req_list, pfe_mac_db_t *mac_db)
+{
+	int ret = EOK;
+	pfeng_netif_mac_db_list_entry_t *entry = NULL;
+	pfe_mac_addr_t addr_act;
+	struct list_head *item;
+	bool entry_found;
+
+	if((ret = pfe_mac_db_get_first_addr(mac_db, MAC_DB_CRIT_BY_TYPE, PFE_TYPE_MC, PFE_CFG_LOCAL_IF, addr_act)) != EOK)
+		netdev_dbg(netdev, "get first MAC address status: %d\n", ret);
+
+	while(ret == EOK) {
+		entry_found = false;
+
+		list_for_each(item, req_list) {
+			entry = list_entry(item, pfeng_netif_mac_db_list_entry_t, iterator);
+			if (!memcmp(addr_act, entry->addr, sizeof(pfe_mac_addr_t))) {
+				entry_found = true;
+				break;
+			}
+		}
+
+		if ((!entry_found) && (pfe_emac_is_multi(addr_act))) {
+			/* Del address from interface active list */
+			netdev_dbg(netdev, "Removing %s from %s\n",
+						mac_to_str(addr_act), pfe_log_if_get_name(iface));
+
+			ret = pfe_log_if_del_mac_addr(iface, addr_act);
+			if ((ret != EOK) && (ret != ENOENT)) {
+				netdev_warn(netdev, "unable to del %s from %s: %d\n",
+							mac_to_str(addr_act), pfe_log_if_get_name(iface), ret);
+				return ret;
+			}
+		}
+
+		ret = pfe_mac_db_get_next_addr(mac_db, addr_act);
+	}
+
+	return EOK;
+}
+
+/**
+ * @brief		Add MAC address into the list of requested addresses
+ * @param[in]	netdev The pointer to the network device structure
+ * @param[in]	list Pointer to list of requested addresses
+ * @param[in]	addr The MAC address to add
+ * @param[in]	owner The identification of driver instance
+ * @retval		EOK Success
+ * @retval		ENOMEM Not enough memory
+ */
+static int pfeng_netif_add_mac_to_request_list(struct net_device *netdev, struct list_head *list, pfe_mac_addr_t addr, pfe_drv_id_t owner)
+{
+	int ret = EOK;
+	pfeng_netif_mac_db_list_entry_t *entry = NULL;
+	struct list_head *item;
+	bool is_present = false;
+
+	list_for_each(item, list) {
+		entry = list_entry(item, pfeng_netif_mac_db_list_entry_t, iterator);
+		if (!memcmp(addr, entry->addr, sizeof(pfe_mac_addr_t))) {
+			is_present = true;
+			break;
+		}
+	}
+
+	if(!is_present) {
+		/* Add address to the list */
+		entry = kmalloc(sizeof(pfeng_netif_mac_db_list_entry_t), GFP_KERNEL);
+		if (!entry) {
+			netdev_err(netdev, "Memory allocation failed\n");
+			ret = ENOMEM;
+		} else {
+			(void)memcpy(entry->addr, addr, sizeof(pfe_mac_addr_t));
+			entry->owner = owner;
+			list_add_tail(&entry->iterator, list);
+		}
+	}
+
+	return ret;
+}
+
+/**
+ * @brief		Destroy list of requested addresses and free memory
+ * @param[in]	list requested list
+ * @retval		EOK Success
+ * @retval		ENOEXEC Command failed
+ */
+static int pfeng_netif_destroy_mac_request_list(struct list_head *list)
+{
+	int ret = EOK;
+	struct list_head *item, *aux;
+	pfeng_netif_mac_db_list_entry_t *entry;
+
+	/* Destroy list of requested addresses and free memory */
+	list_for_each_safe(item, aux, list) {
+		entry = list_entry(item, pfeng_netif_mac_db_list_entry_t, iterator);
+		if (NULL != entry) {
+			list_del_init(&entry->iterator);
+			kfree(entry);
+			entry = NULL;
+		}
+	}
+
+	return ret;
+}
+#endif /* PFE_CFG_PFE_MASTER */
+
+static void pfeng_netif_logif_set_rx_mode(struct net_device *netdev)
+{
+#ifdef PFE_CFG_PFE_MASTER
+	struct pfeng_netif *netif = netdev_priv(netdev);
+	pfe_ct_phy_if_id_t hif_id = netif->priv->local_drv_id;
+	pfe_log_if_t *logif_emac = netif->priv->emac[netif->cfg->emac].logif_emac;
+
+	struct list_head req_mac_list; /* List of requested MAC addresses from stack to be written into HW */
+	pfe_mac_db_t *mac_db;
+
+	if (netdev->flags & IFF_PROMISC) {
+		/* Enable promiscuous mode */
+		if (pfe_log_if_promisc_enable(logif_emac) == EOK)
+			netdev_dbg(netdev, "promisc enabled\n");
+	} else if (netdev->flags & IFF_ALLMULTI) {
+		if (pfe_log_if_allmulti_enable(logif_emac) == EOK)
+			netdev_dbg(netdev, "allmulti enabled\n");
+	} else if (netdev->flags & IFF_MULTICAST) {
+		struct netdev_hw_addr *ha;
+		INIT_LIST_HEAD(&req_mac_list);
+		/* Create list of requested MAC addresses to be written into HW */
+		netdev_for_each_mc_addr(ha, netdev) {
+			if (EOK != pfeng_netif_add_mac_to_request_list(netdev, &req_mac_list, ha->addr, hif_id)) {
+				pfeng_netif_destroy_mac_request_list(&req_mac_list);
+				return;
+			}
+		}
+
+		/* Check if request list is not empty */
+		if (!list_empty(&req_mac_list)) {
+			mac_db = pfe_log_if_get_mac_db(logif_emac);
+			if (!mac_db) {
+				netdev_warn(netdev, "no MAC database found\n");
+			} else {
+				/* Add new addresses from requested list */
+				if (EOK != pfeng_netif_add_mac_addrs(netdev, logif_emac, &req_mac_list)) {
+					pfeng_netif_destroy_mac_request_list(&req_mac_list);
+					return;
+				}
+
+				/* Delete all addresses not present in requested list based on given criterion */
+				if (EOK != pfeng_netif_del_mac_addrs(netdev, logif_emac, &req_mac_list, mac_db)) {
+					pfeng_netif_destroy_mac_request_list(&req_mac_list);
+					return;
+				}
+			}
+		}
+
+		/* Destroy requested list */
+		pfeng_netif_destroy_mac_request_list(&req_mac_list);
+	} else {
+		/* Disable promiscuous mode */
+		if (pfe_log_if_promisc_disable(logif_emac) == EOK)
+			netdev_dbg(netdev, "promisc disabled\n");
+		/* Disable allmulti mode */
+		if (pfe_log_if_allmulti_disable(logif_emac) == EOK)
+			netdev_dbg(netdev, "allmulti disabled\n");
+	}
+#endif
+	return;
+}
+
+static const struct net_device_ops pfeng_netdev_ops = {
+	.ndo_open		= pfeng_netif_logif_open,
+	.ndo_start_xmit		= pfeng_netif_logif_xmit,
+	.ndo_stop		= pfeng_netif_logif_stop,
+	.ndo_change_mtu		= pfeng_netif_logif_change_mtu,
+	.ndo_do_ioctl		= pfeng_netif_logif_ioctl,
+	.ndo_set_mac_address	= pfeng_netif_logif_set_mac_address,
+	.ndo_set_rx_mode	= pfeng_netif_logif_set_rx_mode,
+};
+
+static void pfeng_netif_detach_hifs(struct pfeng_netif *netif)
+{
+	struct net_device *netdev = netif->netdev;
+	struct pfeng_hif_chnl *chnl;
+	int ret = -EINVAL, i;
+
+	pfeng_netif_for_each_chnl(netif, i, chnl) {
+		if (!(netif->cfg->hifmap & (1 << i)))
+			continue;
+
+		/* Unsubscribe from HIF channel */
+		if (chnl->netifs[netif->cfg->emac] != netif) {
+			netdev_err(netdev, "Unknown netif registered to HIF%u\n", i);
+			ret = -EINVAL;
+			return;
+		}
+		chnl->netifs[netif->cfg->emac] = NULL;
+		netdev_err(netdev, "Unsubscribe from HIF%u\n", chnl->idx);
+	}
+}
+
+static int pfeng_netif_attach_hifs(struct pfeng_netif *netif)
+{
+	struct net_device *netdev = netif->netdev;
+	struct pfeng_hif_chnl *chnl;
+	int ret = -EINVAL, i;
+
+	pfeng_netif_for_each_chnl(netif, i, chnl) {
+		if (!(netif->cfg->hifmap & (1 << i)))
+			continue;
+
+		if ((chnl->status != PFENG_HIF_STATUS_ENABLED) && (chnl->ihc && (chnl->status != PFENG_HIF_STATUS_RUNNING))) {
+			netdev_err(netdev, "Invalid HIF%u configuration\n", i);
+			ret = -EINVAL;
+			goto err;
+		}
+
+		/* Subscribe to HIF channel */
+		if (chnl->netifs[netif->cfg->emac]) {
+			netdev_err(netdev, "Unable to register to HIF%u\n", i);
+			ret = -EINVAL;
+			goto err;
+		}
+		chnl->netifs[netif->cfg->emac] = netif;
+		netdev_err(netdev, "Subscribe to HIF%u\n", chnl->idx);
+	}
+	ret = 0;
+
+err:
+	return ret;
+}
+
+static void pfeng_netif_logif_remove(struct pfeng_netif *netif)
+{
+	pfe_log_if_t *logif_emac = netif->priv->emac[netif->cfg->emac].logif_emac;
+
+	if (!netif->netdev)
+		return;
+
+	unregister_netdev(netif->netdev); /* calls ndo_stop */
+
+#ifdef PFE_CFG_PFE_SLAVE
+	cancel_work_sync(&netif->ihc_slave_work);
+#endif /* PFE_CFG_PFE_SLAVE */
+
+#ifdef PFE_CFG_PFE_MASTER
+	if (netif->phylink)
+		pfeng_phylink_destroy(netif);
+#endif /* PFE_CFG_PFE_MASTER */
+
+	/* Stop EMAC logif */
+	if (logif_emac) {
+		pfe_log_if_disable(logif_emac);
+		if (EOK != pfe_platform_unregister_log_if(netif->priv->pfe_platform, logif_emac))
+			netdev_warn(netif->netdev, "Can't unregister EMAC Logif\n");
+		else
+			pfe_log_if_destroy(logif_emac);
+		netif->priv->emac[netif->cfg->emac].logif_emac = NULL;
+	}
+
+	netdev_info(netif->netdev, "unregisted\n");
+
+#ifdef PFE_CFG_PFE_MASTER
+	pfeng_ptp_unregister(netif);
+#endif /* PFE_CFG_PFE_MASTER */
+
+	/* Release timestamp memory */
+	pfeng_hwts_release(netif);
+
+	/* Detach netif from HIF(s) */
+	pfeng_netif_detach_hifs(netif);
+
+	free_netdev(netif->netdev);
+}
+
+/**
+ * @brief	Fetch necessary PFE Platform interfaces
+ * @param[in]	netif Net interface instance
+ * @return	0 OK
+ *
+ */
+static int pfeng_netif_control_platform_ifs(struct pfeng_netif *netif)
+{
+	struct net_device *netdev = netif->netdev;
+	struct pfeng_priv *priv = netif->priv;
+	struct pfeng_emac *emac = &priv->emac[netif->cfg->emac];
+	struct pfeng_hif_chnl *chnl;
+	int ret, i;
+
+	/* Create PFE platform-wide pool of interfaces */
+	if (pfe_platform_create_ifaces(priv->pfe_platform)) {
+		netdev_err(netdev, "Can't init platform interfaces\n");
+		goto err;
+	}
+
+	/* Prefetch linked EMAC interfaces */
+	if (!emac->phyif_emac) {
+		emac->phyif_emac = pfe_platform_get_phy_if_by_id(priv->pfe_platform, netif->cfg->emac);
+		if (!emac->phyif_emac) {
+			netdev_err(netdev, "Could not get linked EMAC physical interface\n");
+			goto err;
+		}
+	}
+	if (!emac->logif_emac) {
+		emac->logif_emac = pfe_log_if_create(emac->phyif_emac, (char *)netif->cfg->name);
+		if (!emac->logif_emac) {
+			netdev_err(netdev, "EMAC Logif can't be created: %s\n", netif->cfg->name);
+			goto err;
+		} else {
+			ret = pfe_platform_register_log_if(priv->pfe_platform, emac->logif_emac);
+			if (ret) {
+				netdev_err(netdev, "Can't register EMAC Logif\n");
+				goto err;
+			}
+		}
+		netdev_dbg(netdev, "EMAC Logif created: %s @%px\n", netif->cfg->name, emac->logif_emac);
+	}
+	else
+		netdev_dbg(netdev, "EMAC Logif reused: %s @%px\n", netif->cfg->name, emac->logif_emac);
+
+	/* Make sure that EMAC ingress traffic will be forwarded to respective HIF channel */
+	i = ffs(netif->cfg->hifmap) - 1;
+#ifdef PFE_CFG_PFE_MASTER
+	if (netif->cfg->hifs > 1)
+		/* Loadbalansing requires routing to PFE_PHY_IF_ID_HIF */
+		ret = pfe_log_if_set_egress_ifs(emac->logif_emac, 1 << PFE_PHY_IF_ID_HIF);
+	else
+		ret = pfe_log_if_set_egress_ifs(emac->logif_emac, 1 << pfeng_hif_ids[i]);
+#else
+	ret = pfe_log_if_add_egress_if(emac->logif_emac, pfe_platform_get_phy_if_by_id(priv->pfe_platform, pfeng_hif_ids[i]));
+#endif /* PFE_CFG_PFE_MASTER */
+	if (EOK != ret) {
+		netdev_err(netdev, "Can't set EMAC egress interface\n");
+		goto err;
+	}
+
+	/* Prefetch linked HIF(s) */
+	pfeng_netif_for_each_chnl(netif, i, chnl) {
+		if (!(netif->cfg->hifmap & (1 << i)))
+			continue;
+
+		if (!chnl->phyif_hif) {
+			chnl->phyif_hif = pfe_platform_get_phy_if_by_id(priv->pfe_platform, pfeng_hif_ids[i]);
+			if (!chnl->phyif_hif) {
+				netdev_err(netdev, "Could not get HIF%u physical interface\n", i);
+				goto err;
+			}
+		}
+
+		if (netif->cfg->hifs > 1) {
+#ifdef PFE_CFG_PFE_MASTER
+			/* Enable loadbalance for multi-HIF config */
+			ret = pfe_phy_if_loadbalance_enable(chnl->phyif_hif);
+			if (EOK != ret) {
+				netdev_err(netdev, "Can't set loadbalancing mode to HIF%u\n", i);
+				goto err;
+			} else
+				netdev_info(netdev, "add HIF%u loadbalance\n", i);
+#else
+			netdev_warn(netdev, "Can't set loadbalancing mode to HIF%u on SLAVE instance\n", i);
+#endif
+		}
+
+		ret = pfe_phy_if_enable(chnl->phyif_hif);
+		if (EOK != ret) {
+			netdev_err(netdev, "Can't enable HIF%u\n", i);
+			goto err;
+		}
+		netdev_info(netdev, "Enable HIF%u\n", i);
+	}
+
+	/* Add rule for local MAC */
+	if (!netif->cfg->tx_inject) {
+		/* Configure the logical interface to accept frames matching local MAC address */
+		ret = pfe_log_if_add_match_rule(emac->logif_emac, IF_MATCH_DMAC, (void *)netif->cfg->macaddr, 6U);
+		if (EOK != ret) {
+			netdev_err(netdev, "Can't add DMAC match rule\n");
+			ret = -ret;
+			goto err;
+		}
+		/* Set parent physical interface to FlexibleRouter mode */
+		ret = pfe_phy_if_set_op_mode(emac->phyif_emac, IF_OP_FLEX_ROUTER);
+		if (EOK != ret) {
+			netdev_err(netdev, "Can't set flexrouter operation mode\n");
+			ret = -ret;
+			goto err;
+		}
+		netdev_info(netdev, "receive traffic matching its MAC address\n");
+	}
+
+	return 0;
+
+err:
+	return -EINVAL;
+}
+
+static int pfeng_netif_logif_init_second_stage(struct pfeng_netif *netif)
+{
+	struct net_device *netdev = netif->netdev;
+	struct sockaddr saddr;
+	int ret;
+
+	/* Set PFE platform phyifs */
+	ret = pfeng_netif_control_platform_ifs(netif);
+	if (ret)
+		goto err;
+
+	/* Set MAC address */
+	if (netif->cfg->macaddr && is_valid_ether_addr(netif->cfg->macaddr))
+		memcpy(&saddr.sa_data, netif->cfg->macaddr, sizeof(saddr.sa_data));
+	else
+		memset(&saddr.sa_data, 0, sizeof(saddr.sa_data));
+	pfeng_netif_logif_set_mac_address(netdev, (void *)&saddr);
+
+	/* Init hw timestamp */
+	ret = pfeng_hwts_init(netif);
+	if (ret) {
+		netdev_err(netdev, "Cannot initialize timestamping: %d\n", ret);
+		goto err;
+	}
+#ifdef PFE_CFG_PFE_MASTER
+	pfeng_ptp_register(netif);
+#endif /* PFE_CFG_PFE_MASTER */
+
+	return 0;
+
+err:
+	return ret;
+}
+
+#ifdef PFE_CFG_PFE_SLAVE
+void pfeng_netif_slave_work_handler(struct work_struct *work)
+{
+	struct pfeng_netif* netif = container_of(work, struct pfeng_netif, ihc_slave_work);
+	int ret;
+
+	ret = pfeng_netif_logif_init_second_stage(netif);
+	if (ret)
+		goto err;
+
+	netif_carrier_on(netif->netdev);
+
+	netif->slave_netif_inited = true;
+err:
+	return;
+}
+#endif /* PFE_CFG_PFE_SLAVE */
+
+static struct pfeng_netif *pfeng_netif_logif_create(struct pfeng_priv *priv, struct pfeng_netif_cfg *netif_cfg)
+{
+	struct device *dev = &priv->pdev->dev;
+	struct pfeng_netif *netif;
+	struct net_device *netdev;
+	int ret;
+
+	if (!netif_cfg->name || !strlen(netif_cfg->name)) {
+		dev_err(dev, "Interface name is missing: %s\n", netif_cfg->name);
+		return NULL;
+	}
+
+	/* allocate net device with max RX and max TX queues */
+	netdev = alloc_etherdev_mqs(sizeof(*netif), PFENG_PFE_HIF_CHANNELS, PFENG_PFE_HIF_CHANNELS);
+	if (!netdev) {
+		dev_err(dev, "Error allocating the etherdev\n");
+		return NULL;
+	}
+
+	/* Set the sysfs physical device reference for the network logical device */
+	SET_NETDEV_DEV(netdev, dev);
+
+	/* set ifconfig visible config */
+	netdev->mem_start = (unsigned long)priv->pfe_cfg->cbus_base;
+	netdev->mem_end = priv->pfe_cfg->cbus_base + priv->pfe_cfg->cbus_len - 1;
+
+	/* Set private structures */
+	netif = netdev_priv(netdev);
+	netif->dev = dev;
+	netif->netdev = netdev;
+	netif->priv = priv;
+	netif->cfg = netif_cfg;
+	netif->phylink = NULL;
+
+	/* Set up explicit device name based on platform names */
+	strlcpy(netdev->name, netif_cfg->name, IFNAMSIZ);
+
+	netdev->netdev_ops = &pfeng_netdev_ops;
+
+	/* MTU ranges */
+	netdev->min_mtu = ETH_MIN_MTU;
+	netdev->max_mtu = ETH_DATA_LEN;
+
+	/* Each packet requires extra buffer for Tx header (metadata) */
+	netdev->needed_headroom = PFENG_TX_PKT_HEADER_SIZE;
+
+#ifdef PFE_CFG_PFE_MASTER
+	pfeng_ethtool_init(netdev);
+
+	/* Add phylink */
+	if (priv->emac[netif_cfg->emac].intf_mode != PHY_INTERFACE_MODE_INTERNAL)
+		pfeng_phylink_create(netif);
+#endif
+
+	INIT_WORK(&netif->tx_conf_work, pfeng_netif_tx_conf);
+
+	/* Accelerated feature */
+	netdev->hw_features |= NETIF_F_IP_CSUM | NETIF_F_IPV6_CSUM | NETIF_F_RXCSUM;
+	netdev->hw_features |= NETIF_F_SG;
+	netdev->features = netdev->hw_features;
+
+	ret = register_netdev(netdev);
+	if (ret) {
+		dev_err(dev, "Error registering the device: %d\n", ret);
+		goto err_netdev_reg;
+	}
+	netdev_info(netdev, "registered\n");
+
+	/* start without the RUNNING flag, phylink/idex controls it later */
+	netif_carrier_off(netdev);
+
+	/* Attach netif to HIF(s) */
+	ret = pfeng_netif_attach_hifs(netif);
+	if (ret)
+		goto err_netdev_reg;
+
+#ifdef PFE_CFG_PFE_SLAVE
+	/*
+	 * SLAVE mode init = start IHC HIF channel now
+	 * and finish the rest in thread
+	 * */
+	if (!priv->ihc_chnl) {
+		netdev_err(netdev, "IHC channel not configured.\n");
+		goto err_netdev_reg;
+	}
+	ret = pfeng_hif_chnl_start(priv->ihc_chnl);
+	if (ret) {
+		netdev_err(netdev, "IHC channel not started\n");
+		goto err_netdev_reg;
+	}
+
+	/* Finish device init in deffered work */
+	INIT_WORK(&netif->ihc_slave_work, pfeng_netif_slave_work_handler);
+	if (!queue_work(priv->ihc_slave_wq, &netif->ihc_slave_work)) {
+		netdev_err(netdev, "second stage of netif init failed\n");
+		goto err_netdev_reg;
+	}
+
+	return netif;
+#endif /* PFE_CFG_PFE_SLAVE */
+
+	ret = pfeng_netif_logif_init_second_stage(netif);
+	if (ret)
+		goto err_netdev_reg;
+
+#ifdef PFE_CFG_PFE_MASTER
+	if (netif->phylink) {
+		ret = pfeng_phylink_connect_phy(netif);
+		if (ret)
+			netdev_err(netdev, "Error connecting to the phy: %d\n", ret);
+	}
+#endif /* PFE_CFG_PFE_MASTER */
+
+	return netif;
+
+err_netdev_reg:
+	pfeng_netif_logif_remove(netif);
+	return NULL;
+}
+
+void pfeng_netif_remove(struct pfeng_priv *priv)
+{
+	struct pfeng_netif *netif, *tmp;
+
+	list_for_each_entry_safe(netif, tmp, &priv->netif_list, lnode)
+		pfeng_netif_logif_remove(netif);
+}
+
+int pfeng_netif_create(struct pfeng_priv *priv)
+{
+	int ret = 0;
+	struct pfeng_netif_cfg *netif_cfg, *tmp;
+	struct pfeng_netif *netif;
+
+	list_for_each_entry_safe(netif_cfg, tmp, &priv->netif_cfg_list, lnode) {
+		netif = pfeng_netif_logif_create(priv, netif_cfg);
+		if (netif)
+			list_add_tail(&netif->lnode, &priv->netif_list);
+	}
+
+	return ret;
+}
+
+static int pfeng_netif_logif_suspend(struct pfeng_netif *netif)
+{
+	struct pfeng_emac *emac = &netif->priv->emac[netif->cfg->emac];
+	struct pfeng_hif_chnl *chnl;
+	int i;
+
+#ifdef PFE_CFG_PFE_MASTER
+	pfeng_phylink_mac_change(netif, false);
+#endif /* PFE_CFG_PFE_MASTER */
+
+	netif_device_detach(netif->netdev);
+
+	rtnl_lock();
+
+	pfe_log_if_disable(emac->logif_emac);
+
+#ifdef PFE_CFG_PFE_MASTER
+	/* Stop PHY */
+	if (netif_running(netif->netdev) && netif->phylink)
+		pfeng_phylink_stop(netif);
+
+	/* Stop RX/TX EMAC clocks */
+	if (emac->tx_clk)
+		clk_disable_unprepare(emac->tx_clk);
+	if (emac->rx_clk)
+		clk_disable_unprepare(emac->rx_clk);
+#endif /* PFE_CFG_PFE_MASTER */
+
+	rtnl_unlock();
+
+	/* Reset attached HIF PhyIfs */
+	pfeng_netif_for_each_chnl(netif, i, chnl) {
+		if (!(netif->cfg->hifmap & (1 << i)))
+			continue;
+
+#ifdef PFE_CFG_MULTI_INSTANCE_SUPPORT
+		/* Skip in case of IHC channel */
+		if (!chnl->ihc)
+#endif /* PFE_CFG_MULTI_INSTANCE_SUPPORT */
+			chnl->phyif_hif = NULL;
+	}
+
+	/* Reset linked EMAC IFs */
+	emac->phyif_emac = NULL;
+	emac->logif_emac = NULL;
+
+	return 0;
+}
+
+static int pfeng_netif_logif_resume(struct pfeng_netif *netif)
+{
+	struct pfeng_priv *priv = netif->priv;
+	__maybe_unused struct device *dev = &priv->pdev->dev;
+	struct net_device *netdev = netif->netdev;
+	struct pfeng_emac *emac = &netif->priv->emac[netif->cfg->emac];
+	struct pfeng_hif_chnl *chnl;
+	int ret, i;
+
+	rtnl_lock();
+
+#ifdef PFE_CFG_PFE_MASTER
+	/* Restart RX/TX EMAC clocks */
+	if (emac->tx_clk) {
+		ret = clk_prepare_enable(emac->tx_clk);
+		if (ret) {
+			dev_err(dev, "TX clocks restart on EMAC%d failed: %d\n", netif->cfg->emac, ret);
+			ret = 0;
+			devm_clk_put(dev, emac->tx_clk);
+			emac->tx_clk = NULL;
+		} else
+			dev_info(dev, "TX clocks on EMAC%d restarted\n", netif->cfg->emac);
+	}
+	if (emac->rx_clk) {
+		ret = clk_prepare_enable(emac->rx_clk);
+		if (ret) {
+			dev_err(dev, "RX clocks restart on EMAC%d failed: %d\n", netif->cfg->emac, ret);
+			ret = 0;
+			devm_clk_put(dev, emac->rx_clk);
+			emac->rx_clk = NULL;
+		} else
+			dev_info(dev, "RX clocks on EMAC%d restarted\n", netif->cfg->emac);
+	}
+#endif /* PFE_CFG_PFE_MASTER */
+
+
+	ret = pfeng_netif_logif_init_second_stage(netif);
+
+	/* start HIF channel(s) */
+	pfeng_netif_for_each_chnl(netif, i, chnl) {
+		if (!(netif->cfg->hifmap & (1 << i)))
+			continue;
+
+		if (chnl->status == PFENG_HIF_STATUS_ENABLED)
+			pfeng_hif_chnl_start(chnl);
+
+		if (chnl->status != PFENG_HIF_STATUS_RUNNING)
+			netdev_warn(netif->netdev, "HIF%u in invalid state: not running\n", i);
+	}
+
+	/* Enable EMAC logif */
+	ret = pfe_log_if_enable(emac->logif_emac);
+	if (ret)
+		netdev_warn(netdev, "Cannot enable EMAC: %d\n", ret);
+
+#ifdef PFE_CFG_PFE_SLAVE
+	netif_carrier_on(netdev);
+#endif
+
+#ifdef PFE_CFG_PFE_MASTER
+	if (netif_running(netif->netdev) && netif->phylink) {
+		ret = pfeng_phylink_start(netif);
+		if (ret)
+			netdev_err(netdev, "Error starting phy: %d\n", ret);
+
+		pfeng_phylink_mac_change(netif, true);
+	}
+#endif /* PFE_CFG_PFE_MASTER */
+
+	rtnl_unlock();
+
+	netif_device_attach(netdev);
+
+	return ret;
+}
+
+int pfeng_netif_suspend(struct pfeng_priv *priv)
+{
+	struct pfeng_netif *netif, *tmp;
+
+
+	list_for_each_entry_safe(netif, tmp, &priv->netif_list, lnode)
+		pfeng_netif_logif_suspend(netif);
+
+	return 0;
+}
+
+int pfeng_netif_resume(struct pfeng_priv *priv)
+{
+	struct pfeng_netif *netif, *tmp;
+
+	list_for_each_entry_safe(netif, tmp, &priv->netif_list, lnode)
+		pfeng_netif_logif_resume(netif);
+
+	return 0;
+}
diff --git a/sw/linux-pfeng/pfeng-phylink.c b/sw/linux-pfeng/pfeng-phylink.c
index 72baced..a6fd7af 100644
--- a/sw/linux-pfeng/pfeng-phylink.c
+++ b/sw/linux-pfeng/pfeng-phylink.c
@@ -19,26 +19,96 @@
 #include "pfeng.h"
 
 #define MAC_PHYIF_CTRL_STATUS	0xF8
-#define EMAC_TX_RATE_325M	325000000	/* 325MHz */
-#define EMAC_TX_RATE_125M	125000000	/* 125MHz */
-#define EMAC_TX_RATE_25M	25000000	/* 25MHz */
-#define EMAC_TX_RATE_2M5	2500000		/* 2.5MHz */
+#define EMAC_CLK_RATE_325M	325000000	/* 325MHz */
+#define EMAC_CLK_RATE_125M	125000000	/* 125MHz */
+#define EMAC_CLK_RATE_25M	25000000	/* 25MHz */
+#define EMAC_CLK_RATE_2M5	2500000		/* 2.5MHz */
+
+#define XPCS_POLL_MS		1000
+
+static void pfeng_cfg_to_plat(struct pfeng_netif *netif, const struct phylink_link_state *state)
+{
+	struct pfeng_emac *emac = &netif->priv->emac[netif->cfg->emac];
+	pfe_emac_t *pfe_emac = netif->priv->pfe_platform->emac[netif->cfg->emac];
+	u32 emac_speed, emac_duplex;
+	bool speed_valid = true, duplex_valid = true;
+
+	switch (state->speed) {
+	default:
+		netdev_dbg(netif->netdev, "Speed not supported\n");
+		speed_valid = false;
+		return;
+	case SPEED_2500:
+		emac_speed = EMAC_SPEED_2500_MBPS;
+		break;
+	case SPEED_1000:
+		emac_speed = EMAC_SPEED_1000_MBPS;
+		break;
+	case SPEED_100:
+		emac_speed = EMAC_SPEED_100_MBPS;
+		break;
+	case SPEED_10:
+		emac_speed = EMAC_SPEED_10_MBPS;
+		break;
+	}
+
+	if (speed_valid) {
+		pfe_emac_set_link_speed(pfe_emac, emac_speed);
+		emac->speed = state->speed;
+	}
+
+	switch (state->duplex) {
+	case DUPLEX_HALF:
+		emac_duplex = EMAC_DUPLEX_HALF;
+		break;
+	case DUPLEX_FULL:
+		emac_duplex = EMAC_DUPLEX_FULL;
+		break;
+	default:
+		netdev_dbg(netif->netdev, "Unknown duplex\n");
+		duplex_valid = false;
+		return;
+		break;
+	}
+
+	if (emac_duplex) {
+		pfe_emac_set_link_duplex(pfe_emac, emac_duplex);
+		emac->speed = state->duplex;
+	}
+}
+
+#if !defined(PFENG_CFG_LINUX_NO_SERDES_SUPPORT)
+/* This is done automatically in phylink in 5.10 */
+void pfeng_xpcs_poll(struct work_struct * work) {
+	struct pfeng_netif *netif = container_of(work, struct pfeng_netif, xpcs_poll_work.work);
+	struct pfeng_emac *emac  = &netif->priv->emac[netif->cfg->emac];
+	struct phylink_link_state sgmii_state = { 0 };
+
+	emac->xpcs_ops->xpcs_get_state(emac->xpcs, &sgmii_state);
+
+	if (sgmii_state.duplex != emac->duplex ||
+	    sgmii_state.speed != emac->speed ||
+	    sgmii_state.link != emac->sgmii_link) {
+		phylink_mac_change(netif->phylink, sgmii_state.link);
+	}
+
+	schedule_delayed_work(&netif->xpcs_poll_work, msecs_to_jiffies(XPCS_POLL_MS));
+}
+#endif /* PFENG_CFG_LINUX_NO_SERDES_SUPPORT */
 
 /**
  * @brief	Validate and update the link configuration
  */
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(5,4,0)
 static void pfeng_phylink_validate(struct phylink_config *config, unsigned long *supported, struct phylink_link_state *state)
 {
-	struct pfeng_ndev *ndev = netdev_priv(to_net_dev(config->dev));
-#else
-static void pfeng_phylink_validate(struct net_device *netdev, unsigned long *supported, struct phylink_link_state *state)
-{
-	struct pfeng_ndev *ndev = netdev_priv(netdev);
-#endif
+	struct pfeng_netif *netif = netdev_priv(to_net_dev(config->dev));
+	struct pfeng_priv *priv = netif->priv;
 	__ETHTOOL_DECLARE_LINK_MODE_MASK(mask) = { 0, };
 	__ETHTOOL_DECLARE_LINK_MODE_MASK(mac_supported) = { 0, };
-	int max_speed = ndev->eth->max_speed;
+	int max_speed = priv->emac[netif->cfg->emac].max_speed;
+#if !defined(PFENG_CFG_LINUX_NO_SERDES_SUPPORT)
+	int an_serdes_speed = priv->emac[netif->cfg->emac].serdes_an_speed;
+#endif /* PFENG_CFG_LINUX_NO_SERDES_SUPPORT */
 
 	/* We only support SGMII and R/G/MII modes */
 	if (state->interface != PHY_INTERFACE_MODE_NA &&
@@ -50,15 +120,16 @@ static void pfeng_phylink_validate(struct net_device *netdev, unsigned long *sup
 		return;
 	}
 
+	phylink_set(mac_supported, Pause);
+	phylink_set(mac_supported, Asym_Pause);
+	phylink_set(mac_supported, Autoneg);
 	phylink_set(mac_supported, 10baseT_Half);
 	phylink_set(mac_supported, 10baseT_Full);
 
 	if (max_speed > SPEED_10) {
 		phylink_set(mac_supported, 100baseT_Half);
 		phylink_set(mac_supported, 100baseT_Full);
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(5,4,0)
 		phylink_set(mac_supported, 100baseT1_Full);
-#endif
 	}
 
 	if (max_speed > SPEED_100) {
@@ -69,14 +140,36 @@ static void pfeng_phylink_validate(struct net_device *netdev, unsigned long *sup
 
 	if (max_speed > SPEED_1000 &&
 		/* Only PFE_EMAC_0 supports 2.5G over SGMII */
-		!ndev->eth->emac_id &&
-		state->interface == PHY_INTERFACE_MODE_SGMII) {
+		!netif->cfg->emac &&
+		(state->interface == PHY_INTERFACE_MODE_SGMII ||
+		state->interface == PHY_INTERFACE_MODE_NA)) {
 		phylink_set(mac_supported, 2500baseT_Full);
 		phylink_set(mac_supported, 2500baseX_Full);
 	}
 
-	if (!ndev->eth->fixed_link)
-		phylink_set(mac_supported, Autoneg);
+#if !defined(PFENG_CFG_LINUX_NO_SERDES_SUPPORT)
+	/* SGMII AN can't distinguish between 1G and 2.5G */
+	if (state->interface == PHY_INTERFACE_MODE_SGMII &&
+	    priv->emac[netif->cfg->emac].link_an == MLO_AN_INBAND) {
+		if (an_serdes_speed == SPEED_2500) {
+			phylink_set(mask, 10baseT_Half);
+			phylink_set(mask, 10baseT_Full);
+			phylink_set(mask, 100baseT_Half);
+			phylink_set(mask, 100baseT_Full);
+			phylink_set(mask, 100baseT1_Full);
+			phylink_set(mask, 1000baseT_Half);
+			phylink_set(mask, 1000baseT_Full);
+			phylink_set(mask, 1000baseX_Full);
+		} else if (an_serdes_speed == SPEED_1000) {
+			phylink_set(mask, 2500baseT_Full);
+			phylink_set(mask, 2500baseX_Full);
+		}
+	} else
+#endif /* PFENG_CFG_LINUX_NO_SERDES_SUPPORT */
+	if (priv->emac[netif->cfg->emac].link_an == MLO_AN_FIXED) {
+		phylink_clear(mac_supported, Autoneg);
+	}
+
 
 	phylink_set(mac_supported, MII);
 	phylink_set_port_modes(mac_supported);
@@ -89,77 +182,52 @@ static void pfeng_phylink_validate(struct net_device *netdev, unsigned long *sup
 		__ETHTOOL_LINK_MODE_MASK_NBITS);
 	bitmap_andnot(state->advertising, state->advertising, mask,
 		__ETHTOOL_LINK_MODE_MASK_NBITS);
-
-#if LINUX_VERSION_CODE < KERNEL_VERSION(5,4,0)
-	phylink_helper_basex_speed(state);
-#endif
 }
 
 /**
- * @brief	Read the current link state from the hardware
+ * @brief	Read the current link state from the PCS
  */
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(5,4,0)
-static int pfeng_mac_link_state(struct phylink_config *config, struct phylink_link_state *state)
-{
-	struct pfeng_ndev *ndev = netdev_priv(to_net_dev(config->dev));
-#else
-static int pfeng_mac_link_state(struct net_device *netdev, struct phylink_link_state *state)
+static int _pfeng_mac_link_state(struct phylink_config *config, struct phylink_link_state *state)
 {
-	struct pfeng_ndev *ndev = netdev_priv(netdev);
-#endif
-	pfe_emac_t *emac = ndev->priv->pfe->emac[ndev->eth->emac_id];
-	int updated = 0;
-	u32 speed, duplex;
-	bool link;
+	struct pfeng_netif *netif = netdev_priv(to_net_dev(config->dev));
+	struct pfeng_emac *emac = &netif->priv->emac[netif->cfg->emac];
 
-	state->interface = ndev->eth->intf_mode;
+	state->interface = emac->intf_mode;
 
-	switch (state->interface) {
-	case PHY_INTERFACE_MODE_SGMII:
-		break;
-	case PHY_INTERFACE_MODE_RGMII:
-	case PHY_INTERFACE_MODE_RGMII_ID:
-	case PHY_INTERFACE_MODE_RGMII_TXID:
-	case PHY_INTERFACE_MODE_RGMII_RXID:
-		if (EOK == pfe_emac_get_link_config(emac, &speed, (pfe_emac_duplex_t *)&duplex)) {
-			switch (speed) {
-			default:
-			case EMAC_SPEED_10_MBPS:
-				state->speed = SPEED_10;
-				break;
-			case EMAC_SPEED_100_MBPS:
-				state->speed = SPEED_100;
-				break;
-			case EMAC_SPEED_1000_MBPS:
-				state->speed = SPEED_1000;
-				break;
-			case EMAC_SPEED_2500_MBPS:
-				state->speed = SPEED_2500;
-				break;
-			}
-			updated = 1;
-		}
-		if (EOK == pfe_emac_get_link_status(emac, &speed, (pfe_emac_duplex_t *)&duplex, &link)) {
-			state->link = link;
-			state->duplex = duplex == EMAC_DUPLEX_FULL ? 1 : 0;
-			state->pause = MLO_PAUSE_NONE;
-			updated = 1;
-		}
-	default:
-		break;
+#if !defined(PFENG_CFG_LINUX_NO_SERDES_SUPPORT)
+	if (state->interface != PHY_INTERFACE_MODE_SGMII || !emac->xpcs) {
+		netdev_err(netif->netdev, "Configuration not supported\n");
+		return -ENOTSUPP;
 	}
 
-	if (updated)
-		ndev->emac_speed = state->speed;
+	emac->xpcs_ops->xpcs_get_state(emac->xpcs, state);
 
-	return updated;
-}
+	/* our MAC status is not connected to PCS so update it manually */
+	if (emac->phyless) {
+		emac->xpcs_ops->xpcs_config(emac->xpcs, state);
+		pfeng_cfg_to_plat(netif, state);
+		emac->sgmii_link = state->link;
+	}
 
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(5,4,0)
-static void pfeng_mac_an_restart(struct phylink_config *config)
+	return 0;
 #else
-static void pfeng_mac_an_restart(struct net_device *netdev)
+	return -ENOTSUPP;
+#endif /* PFENG_CFG_LINUX_NO_SERDES_SUPPORT */
+}
+
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5,5,0)
+static void pfeng_mac_link_state(struct phylink_config *config, struct phylink_link_state *state)
+{
+	_pfeng_mac_link_state(config, state);
+}
+#else /* kernel 5.4 */
+static int pfeng_mac_link_state(struct phylink_config *config, struct phylink_link_state *state)
+{
+	return _pfeng_mac_link_state(config, state);
+}
 #endif
+
+static void pfeng_mac_an_restart(struct phylink_config *config)
 {
 	return;
 }
@@ -167,104 +235,122 @@ static void pfeng_mac_an_restart(struct net_device *netdev)
 /**
  * @brief	Set necessary S32G clocks
  */
-static void s32g_set_tx_clock(struct pfeng_ndev *ndev, unsigned int speed)
+static int s32g_set_rgmii_speed(struct pfeng_netif *netif, unsigned int speed)
 {
-	u32 emac_speed;
-	bool rgmii = phy_interface_mode_is_rgmii(ndev->eth->intf_mode);
+	struct clk *tx_clk = netif->priv->emac[netif->cfg->emac].tx_clk;
+	struct clk *rx_clk = netif->priv->emac[netif->cfg->emac].rx_clk;
+	unsigned long rate = 0;
 
-	/* Only RGMII TX clock switch is supported */
 	switch (speed) {
 	default:
-		netdev_dbg(ndev->netdev, "Skipped TX clock setting\n");
-		return;
-	case SPEED_2500:
-		/* Seting TX clock for 2.5Gbps is unsupported */
-		emac_speed = EMAC_SPEED_2500_MBPS;
-		break;
+		netdev_dbg(netif->netdev, "Skipped clock setting\n");
+		return -EINVAL;
 	case SPEED_1000:
-		if (ndev->eth->tx_clk && rgmii) {
-			netdev_info(ndev->netdev, "Set TX clock to 125M\n");
-			clk_set_rate(ndev->eth->tx_clk, EMAC_TX_RATE_125M);
-		}
-		emac_speed = EMAC_SPEED_1000_MBPS;
+		rate = EMAC_CLK_RATE_125M;
 		break;
 	case SPEED_100:
-		if (ndev->eth->tx_clk && rgmii) {
-			netdev_info(ndev->netdev, "Set TX clock to 25M\n");
-			clk_set_rate(ndev->eth->tx_clk, EMAC_TX_RATE_25M);
-		}
-		emac_speed = EMAC_SPEED_100_MBPS;
+		rate = EMAC_CLK_RATE_25M;
 		break;
 	case SPEED_10:
-		if (ndev->eth->tx_clk && rgmii) {
-			netdev_info(ndev->netdev, "Set TX clock to 2.5M\n");
-			clk_set_rate(ndev->eth->tx_clk, EMAC_TX_RATE_2M5);
-		}
-		emac_speed = EMAC_SPEED_10_MBPS;
+		rate = EMAC_CLK_RATE_2M5;
 		break;
 	}
 
-	pfe_emac_cfg_set_speed(ndev->emac_regs, emac_speed);
+	if (tx_clk) {
+		clk_set_rate(tx_clk, rate);
+		netdev_info(netif->netdev, "Set TX clock to %luHz\n", rate);
+	}
+
+	if (rx_clk)
+		clk_set_rate(rx_clk, rate);
+
+	return 0;
 }
 
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(5,4,0)
 static void pfeng_mac_config(struct phylink_config *config, unsigned int mode, const struct phylink_link_state *state)
 {
-	struct pfeng_ndev *ndev = netdev_priv(to_net_dev(config->dev));
-#else
-static void pfeng_mac_config(struct net_device *netdev, unsigned int mode, const struct phylink_link_state *state)
-{
-	struct pfeng_ndev *ndev = netdev_priv(netdev);
-#endif
+	struct pfeng_netif *netif = netdev_priv(to_net_dev(config->dev));
+	struct pfeng_emac *emac = &netif->priv->emac[netif->cfg->emac];
+	__maybe_unused struct phylink_link_state sgmii_state = { 0 };
+
+	if (state->speed == emac->speed &&
+	    state->duplex == emac->duplex)
+		return;
 
-	switch (mode) {
-		case MLO_AN_FIXED:
-			/* FALLTHRU */
-		case MLO_AN_PHY:
-			if (state->speed == ndev->emac_speed)
-				break;
-
-			s32g_set_tx_clock(ndev, state->speed);
-			ndev->emac_speed = state->speed;
-			break;
-		default:
-			break;
+	if (mode == MLO_AN_FIXED || mode == MLO_AN_PHY) {
+		if (phy_interface_mode_is_rgmii(emac->intf_mode)) {
+			if (s32g_set_rgmii_speed(netif, state->speed))
+				return;
+		} else if  (emac->intf_mode == PHY_INTERFACE_MODE_SGMII) {
+#if !defined(PFENG_CFG_LINUX_NO_SERDES_SUPPORT)
+			if (!emac->xpcs || !emac->xpcs_ops)
+				return;
+
+			emac->xpcs_ops->xpcs_get_state(emac->xpcs, &sgmii_state);
+			sgmii_state.speed = state->speed;
+			sgmii_state.duplex = state->duplex;
+			sgmii_state.an_enabled = false;
+			emac->xpcs_ops->xpcs_config(emac->xpcs, &sgmii_state);
+#else
+			return;
+#endif /* PFENG_CFG_LINUX_NO_SERDES_SUPPORT */
+		} else {
+			netdev_err(netif->netdev, "Interface not supported\n");
+			return;
+		}
+#if !defined(PFENG_CFG_LINUX_NO_SERDES_SUPPORT)
+	} else if (mode == MLO_AN_INBAND) {
+		if (emac->intf_mode == PHY_INTERFACE_MODE_SGMII &&
+		    emac->xpcs && emac->xpcs_ops) {
+			emac->xpcs_ops->xpcs_config(emac->xpcs, state);
+		} else {
+			netdev_err(netif->netdev, "Interface not supported\n");
+			return;
+		}
+#endif /* PFENG_CFG_LINUX_NO_SERDES_SUPPORT */
+	} else {
+		return;
 	}
+
+	pfeng_cfg_to_plat(netif, state);
 }
 
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(5,4,0)
 static void pfeng_mac_link_down(struct phylink_config *config, unsigned int mode, phy_interface_t interface)
 {
-	struct pfeng_ndev *ndev = netdev_priv(to_net_dev(config->dev));
+	struct pfeng_netif *netif = netdev_priv(to_net_dev(config->dev));
 
 	/* Disable Rx and Tx */
-	netif_tx_stop_all_queues(ndev->netdev);
+	netif_tx_stop_all_queues(netif->netdev);
 }
 
-static void pfeng_mac_link_up(struct phylink_config *config, unsigned int mode, phy_interface_t interface, struct phy_device *phy)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5,5,0)
+static void pfeng_mac_link_up(struct phylink_config *config,  struct phy_device *phy,
+			      unsigned int mode, phy_interface_t interface, int speed,
+			      int duplex, bool tx_pause, bool rx_pause)
 {
-	struct pfeng_ndev *ndev = netdev_priv(to_net_dev(config->dev));
+	struct pfeng_netif *netif = netdev_priv(to_net_dev(config->dev));
 
 	/* Enable Rx and Tx */
-	netif_tx_wake_all_queues(ndev->netdev);
+	netif_tx_wake_all_queues(netif->netdev);
 }
-#else
-static void pfeng_mac_link_down(struct net_device *netdev, unsigned int mode, phy_interface_t interface)
+#else	/* kernel 5.4 */
+static void pfeng_mac_link_up(struct phylink_config *config, unsigned int mode,
+			      phy_interface_t interface, struct phy_device *phy)
 {
-	/* Disable Rx and Tx */
-	netif_tx_stop_all_queues(netdev);
-}
+	struct pfeng_netif *netif = netdev_priv(to_net_dev(config->dev));
 
-static void pfeng_mac_link_up(struct net_device *netdev, unsigned int mode, phy_interface_t interface, struct phy_device *phy)
-{
 	/* Enable Rx and Tx */
-	netif_tx_wake_all_queues(netdev);
+	netif_tx_wake_all_queues(netif->netdev);
 }
 #endif
 
 static const struct phylink_mac_ops pfeng_phylink_ops = {
 	.validate = pfeng_phylink_validate,
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5,5,0)
+	.mac_pcs_get_state = pfeng_mac_link_state,
+#else
 	.mac_link_state = pfeng_mac_link_state,
+#endif
 	.mac_an_restart = pfeng_mac_an_restart,
 	.mac_config = pfeng_mac_config,
 	.mac_link_down = pfeng_mac_link_down,
@@ -274,47 +360,65 @@ static const struct phylink_mac_ops pfeng_phylink_ops = {
 /**
  * @brief	Create new phylink instance
  * @details	Creates the phylink instance for particular interface
- * @param[in]	ndev pfeng net device structure
+ * @param[in]	netif pfeng net device structure
  * @return	0 if OK, error number if failed
  */
-int pfeng_phylink_create(struct pfeng_ndev *ndev)
+int pfeng_phylink_create(struct pfeng_netif *netif)
 {
+	struct pfeng_priv *priv = netif->priv;
+	struct pfeng_emac *emac = &priv->emac[netif->cfg->emac];
 	struct phylink *phylink;
-	void *syscon;
 
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(5,4,0)
-	ndev->phylink_cfg.dev = &ndev->netdev->dev;
-	ndev->phylink_cfg.type = PHYLINK_NETDEV;
-	phylink = phylink_create(&ndev->phylink_cfg, of_fwnode_handle(ndev->eth->dn), ndev->eth->intf_mode, &pfeng_phylink_ops);
-#else
-	phylink = phylink_create(ndev->netdev, of_fwnode_handle(ndev->eth->dn), ndev->eth->intf_mode, &pfeng_phylink_ops);
-
-#endif
+	netif->phylink_cfg.dev = &netif->netdev->dev;
+	netif->phylink_cfg.type = PHYLINK_NETDEV;
+	phylink = phylink_create(&netif->phylink_cfg, of_fwnode_handle(netif->cfg->dn), emac->intf_mode, &pfeng_phylink_ops);
 	if (IS_ERR(phylink))
 		return PTR_ERR(phylink);
 
-	ndev->phylink = phylink;
+	netif->phylink = phylink;
 
-	/* add EMAC access register */
-	syscon = ioremap_nocache(ndev->priv->cfg->cbus_base + CBUS_EMAC1_BASE_ADDR + (ndev->eth->emac_id * (CBUS_EMAC2_BASE_ADDR - CBUS_EMAC1_BASE_ADDR)),
-			CBUS_EMAC2_BASE_ADDR - CBUS_EMAC1_BASE_ADDR);
-	if(!syscon)
-		netdev_warn(ndev->netdev, "Cannot map EMAC%d regs\n", ndev->eth->emac_id);
-	else
-		ndev->emac_regs = syscon;
+#if !defined(PFENG_CFG_LINUX_NO_SERDES_SUPPORT)
+	INIT_DELAYED_WORK(&netif->xpcs_poll_work, pfeng_xpcs_poll);
 
+	/* Get XPCS instance */
+	if (emac->serdes_phy) {
+		if (!phy_init(emac->serdes_phy) && !phy_power_on(emac->serdes_phy)) {
+			if (!phy_configure(emac->serdes_phy, NULL)) {
+				emac->xpcs = s32gen1_phy2xpcs(emac->serdes_phy);
+				emac->xpcs_ops = s32gen1_xpcs_get_ops();
+			} else {
+				netdev_err(netif->netdev, "SerDes PHY configuration failed on EMAC%d\n", netif->cfg->emac);
+			}
+		} else {
+			netdev_err(netif->netdev, "SerDes PHY init failed on EMAC%d\n", netif->cfg->emac);
+		}
+
+		if (!emac->xpcs || !emac->xpcs_ops) {
+			netdev_err(netif->netdev, "Can't get SGMII PCS on EMAC%d\n", netif->cfg->emac);
+			emac->xpcs_ops = NULL;
+			emac->xpcs = NULL;
+		}
+	}
+#endif /* PFENG_CFG_LINUX_NO_SERDES_SUPPORT */
 	return 0;
 }
 
 /**
  * @brief	Start phylink
  * @details	Starts phylink
- * @param[in]	ndev pfeng net device structure
+ * @param[in]	netif pfeng net device structure
  * @return	0 if OK, error number if failed
  */
-int pfeng_phylink_start(struct pfeng_ndev *ndev)
+int pfeng_phylink_start(struct pfeng_netif *netif)
 {
-	phylink_start(ndev->phylink);
+	__maybe_unused struct pfeng_emac *emac = &netif->priv->emac[netif->cfg->emac];
+
+	phylink_start(netif->phylink);
+
+#if !defined(PFENG_CFG_LINUX_NO_SERDES_SUPPORT)
+	if (emac->xpcs && emac->xpcs_ops && emac->phyless)
+		schedule_delayed_work(&netif->xpcs_poll_work, msecs_to_jiffies(XPCS_POLL_MS));
+#endif /* PFENG_CFG_LINUX_NO_SERDES_SUPPORT */
 
 	return 0;
 }
@@ -322,16 +426,16 @@ int pfeng_phylink_start(struct pfeng_ndev *ndev)
 /**
  * @brief	Connect PHY
  * @details	Connects to the PHY
- * @param[in]	ndev pfeng net device structure
+ * @param[in]	netif pfeng net device structure
  * @return	0 if OK, error number if failed
  */
-int pfeng_phylink_connect_phy(struct pfeng_ndev *ndev)
+int pfeng_phylink_connect_phy(struct pfeng_netif *netif)
 {
 	int ret;
 
-	ret = phylink_of_phy_connect(ndev->phylink, ndev->eth->dn, 0);
+	ret = phylink_of_phy_connect(netif->phylink, netif->cfg->dn, 0);
 	if (ret)
-		netdev_err(ndev->netdev, "could not attach PHY: %d\n", ret);
+		netdev_err(netif->netdev, "could not attach PHY: %d\n", ret);
 
 	return ret;
 }
@@ -339,42 +443,53 @@ int pfeng_phylink_connect_phy(struct pfeng_ndev *ndev)
 /**
  * @brief	Disconnect PHY
  * @details	Disconnects connected PHY
- * @param[in]	ndev pfeng net device structure
- * @return	0 if OK, error number if failed
+ * @param[in]	netif pfeng net device structure
  */
-int pfeng_phylink_disconnect_phy(struct pfeng_ndev *ndev)
+void pfeng_phylink_disconnect_phy(struct pfeng_netif *netif)
 {
-	phylink_disconnect_phy(ndev->phylink);
+	phylink_disconnect_phy(netif->phylink);
+}
 
-	return 0;
+/**
+ * @brief	Signalize MAC link change
+ * @details	Signal to phylink MAC link change
+ * @param[in]	up indicates whether the link is currently up
+ */
+void pfeng_phylink_mac_change(struct pfeng_netif *netif, bool up)
+{
+	phylink_mac_change(netif->phylink, up);
 }
 
 /**
  * @brief	Stop phylink
  * @details	Stops phylink
- * @param[in]	ndev pfeng net device structure
- * @return	0 if OK, error number if failed
+ * @param[in]	netif pfeng net device structure
  */
-int pfeng_phylink_stop(struct pfeng_ndev *ndev)
+void pfeng_phylink_stop(struct pfeng_netif *netif)
 {
-	phylink_stop(ndev->phylink);
+	__maybe_unused struct pfeng_emac *emac = &netif->priv->emac[netif->cfg->emac];
 
-	return 0;
+	phylink_stop(netif->phylink);
+
+#if !defined(PFENG_CFG_LINUX_NO_SERDES_SUPPORT)
+	if (emac->xpcs && emac->xpcs_ops && emac->phyless)
+		cancel_delayed_work_sync(&netif->xpcs_poll_work);
+#endif /* PFENG_CFG_LINUX_NO_SERDES_SUPPORT */
 }
 
 /**
  * @brief	Destroy the MDIO bus
  * @details	Unregister and destroy the MDIO bus instance
- * @param[in]	ndev pfeng net device structure
- * @return	0 if OK, error number if failed
+ * @param[in]	netif pfeng net device structure
  */
-int pfeng_phylink_destroy(struct pfeng_ndev *ndev)
+void pfeng_phylink_destroy(struct pfeng_netif *netif)
 {
-	phylink_destroy(ndev->phylink);
-	ndev->phylink = NULL;
+	__maybe_unused struct pfeng_emac *emac = &netif->priv->emac[netif->cfg->emac];
+	phylink_destroy(netif->phylink);
+	netif->phylink = NULL;
 
-	if (ndev->emac_regs)
-		iounmap(ndev->emac_regs);
-
-	return 0;
+#if !defined(PFENG_CFG_LINUX_NO_SERDES_SUPPORT)
+	if (emac->serdes_phy)
+		phy_exit(emac->serdes_phy);
+#endif
 }
diff --git a/sw/linux-pfeng/pfeng-ptp.c b/sw/linux-pfeng/pfeng-ptp.c
index 0e90f7b..4e99a96 100644
--- a/sw/linux-pfeng/pfeng-ptp.c
+++ b/sw/linux-pfeng/pfeng-ptp.c
@@ -15,12 +15,13 @@
 
 int pfeng_ptp_adjfreq(struct ptp_clock_info *ptp, s32 delta)
 {
-	struct pfeng_ndev *priv = container_of(ptp, struct pfeng_ndev, ptp_ops);
-	pfe_emac_t *emac = pfe_phy_if_get_emac(priv->phyif_emac);
+	struct pfeng_netif *netif = container_of(ptp, struct pfeng_netif, ptp_ops);
+	struct pfeng_priv *priv = netif->priv;
+        pfe_emac_t *emac = priv->pfe_platform->emac[netif->cfg->emac];
 	bool_t sgn = TRUE;
 	errno_t ret = 0;
 
-	PTP_DEBUG(priv->netdev, "%s, delta %d\n",__func__, delta);
+	PTP_DEBUG(netif->netdev, "%s, delta %d\n",__func__, delta);
 
 	if (delta < 0) {
 		delta = -delta;
@@ -30,7 +31,7 @@ int pfeng_ptp_adjfreq(struct ptp_clock_info *ptp, s32 delta)
 	ret = pfe_emac_set_ts_freq_adjustment(emac, delta, sgn);
 
 	if (ret != 0){
-		netdev_err(priv->netdev, "Frequency adjustment failed (err %d)\n", ret);
+		netdev_err(netif->netdev, "Frequency adjustment failed (err %d)\n", ret);
 		ret = -EINVAL;
 	}
 
@@ -39,13 +40,14 @@ int pfeng_ptp_adjfreq(struct ptp_clock_info *ptp, s32 delta)
 
 int pfeng_ptp_adjtime(struct ptp_clock_info *ptp, s64 delta)
 {
-	struct pfeng_ndev *priv = container_of(ptp, struct pfeng_ndev, ptp_ops);
-	pfe_emac_t *emac = pfe_phy_if_get_emac(priv->phyif_emac);
+	struct pfeng_netif *netif = container_of(ptp, struct pfeng_netif, ptp_ops);
+	struct pfeng_priv *priv = netif->priv;
+        pfe_emac_t *emac = priv->pfe_platform->emac[netif->cfg->emac];
 	errno_t ret = 0;
 	bool_t sgn = TRUE;
 	uint32_t sec = 0, nsec = 0;
 
-	PTP_DEBUG(priv->netdev, "%s, delta %lld\n",__func__, delta);
+	PTP_DEBUG(netif->netdev, "%s, delta %lld\n",__func__, delta);
 
 	if (delta < 0) {
 		delta = -delta;
@@ -58,7 +60,7 @@ int pfeng_ptp_adjtime(struct ptp_clock_info *ptp, s64 delta)
 	ret = pfe_emac_adjust_ts_time(emac, sec, nsec, sgn);
 
 	if (ret != 0) {
-		netdev_err(priv->netdev, "Time adjustment failed (err %d)\n", ret);
+		netdev_err(netif->netdev, "Time adjustment failed (err %d)\n", ret);
 		ret = -EINVAL;
 	}
 
@@ -67,8 +69,9 @@ int pfeng_ptp_adjtime(struct ptp_clock_info *ptp, s64 delta)
 
 int pfeng_ptp_gettime64(struct ptp_clock_info *ptp, struct timespec64 *ts)
 {
-	struct pfeng_ndev *priv = container_of(ptp, struct pfeng_ndev, ptp_ops);
-	pfe_emac_t *emac = pfe_phy_if_get_emac(priv->phyif_emac);
+	struct pfeng_netif *netif = container_of(ptp, struct pfeng_netif, ptp_ops);
+	struct pfeng_priv *priv = netif->priv;
+        pfe_emac_t *emac = priv->pfe_platform->emac[netif->cfg->emac];
 	uint32_t sec = 0, nsec = 0;
 	uint64_t nsts = 0;
 	errno_t ret;
@@ -77,10 +80,10 @@ int pfeng_ptp_gettime64(struct ptp_clock_info *ptp, struct timespec64 *ts)
 	nsts = nsec + sec * NS_IN_S;
 	*ts = ns_to_timespec64(nsts);
 
-	PTP_DEBUG(priv->netdev, "%s, returned s %lld ns %ld \n",__func__, ts->tv_sec, ts->tv_nsec);
+	PTP_DEBUG(netif->netdev, "%s, returned s %lld ns %ld \n",__func__, ts->tv_sec, ts->tv_nsec);
 
 	if (ret != 0) {
-		netdev_err(priv->netdev, "Get time failed (err %d)\n", ret);
+		netdev_err(netif->netdev, "Get time failed (err %d)\n", ret);
 		ret = -EINVAL;
 	}
 
@@ -89,16 +92,17 @@ int pfeng_ptp_gettime64(struct ptp_clock_info *ptp, struct timespec64 *ts)
 
 int pfeng_ptp_settime64(struct ptp_clock_info *ptp, const struct timespec64 *ts)
 {
-	struct pfeng_ndev *priv = container_of(ptp, struct pfeng_ndev, ptp_ops);
-	pfe_emac_t *emac = pfe_phy_if_get_emac(priv->phyif_emac);
+	struct pfeng_netif *netif = container_of(ptp, struct pfeng_netif, ptp_ops);
+	struct pfeng_priv *priv = netif->priv;
+        pfe_emac_t *emac = priv->pfe_platform->emac[netif->cfg->emac];
 	errno_t ret;
 
-	PTP_DEBUG(priv->netdev, "%s, s %lld ns %ld \n",__func__, ts->tv_sec, ts->tv_nsec);
+	PTP_DEBUG(netif->netdev, "%s, s %lld ns %ld \n",__func__, ts->tv_sec, ts->tv_nsec);
 
 	ret = pfe_emac_set_ts_time(emac, ts->tv_sec, ts->tv_nsec);
 
 	if (ret != 0) {
-		netdev_err(priv->netdev, "Set time failed (err %d)\n", ret);
+		netdev_err(netif->netdev, "Set time failed (err %d)\n", ret);
 		ret = -EINVAL;
 	}
 
@@ -129,7 +133,7 @@ static struct ptp_clock_info pfeng_ptp_ops = {
 	.enable = pfeng_ptp_enable,
 };
 
-static void pfeng_ptp_prepare_clock_adjustement(struct pfeng_ndev *ndev, unsigned long ptp_ref_hz) {
+static void pfeng_ptp_prepare_clock_adjustement(struct pfeng_netif *netif, unsigned long ptp_ref_hz) {
 	u32 ptp_ref_clk = ptp_ref_hz;
 	u32 ptp_out_clk = ptp_ref_hz/2UL;
 	u32 nil_addend = 0, max_addend = 0, max_freq_delta = 0;
@@ -140,49 +144,49 @@ static void pfeng_ptp_prepare_clock_adjustement(struct pfeng_ndev *ndev, unsigne
 	max_freq_delta = ptp_ref_clk - ptp_out_clk;
 	pfeng_ptp_ops.max_adj = (u64)((u64)max_freq_delta * 1000000000ULL) / max_addend;
 
-	netdev_info(ndev->netdev, "PTP HW addend 0x%08x, max_adj configured to %d ppb\n",nil_addend, pfeng_ptp_ops.max_adj);
+	netdev_info(netif->netdev, "PTP HW addend 0x%08x, max_adj configured to %d ppb\n",nil_addend, pfeng_ptp_ops.max_adj);
 }
 
-void pfeng_ptp_register(struct pfeng_ndev *ndev)
+void pfeng_ptp_register(struct pfeng_netif *netif)
 {
-	struct pfeng_priv *priv = dev_get_drvdata(ndev->dev);
-	pfe_emac_t *emac = ndev->priv->pfe->emac[ndev->eth->emac_id];
+	struct pfeng_priv *priv = netif->priv;
+        pfe_emac_t *emac = priv->pfe_platform->emac[netif->cfg->emac];
 	errno_t ret;
 
 	/* Set PTP clock to null in case of error */
-	ndev->ptp_clock = NULL;
+	netif->ptp_clock = NULL;
 
 	/* Check if we have reference clock */
-	if((!priv->ptp_reference_clk) || (NULL == priv->ptp_clk))
+	if((!priv->clk_ptp_reference) || (!priv->clk_ptp))
 		return;
 
 	/* Calculate max possible adjustment by controller */
-	pfeng_ptp_prepare_clock_adjustement(ndev, priv->ptp_reference_clk);
+	pfeng_ptp_prepare_clock_adjustement(netif, priv->clk_ptp_reference);
 
 	/* Start PTP clock and enable time stamping in platform */
-	ret = pfe_emac_enable_ts(emac, priv->ptp_reference_clk,
-				 priv->ptp_reference_clk / 2LLU);
+	ret = pfe_emac_enable_ts(emac, priv->clk_ptp_reference,
+				 priv->clk_ptp_reference / 2LLU);
 
 	if(ret) {
-		dev_err(ndev->dev, "Failed to register PTP clock on emac%d\n", ndev->eth->emac_id);
+		dev_err(netif->dev, "Failed to register PTP clock on EMAC%d\n", netif->cfg->emac);
 		return;
 	}
 
 	/* Register clock and ops */
-	ndev->ptp_ops = pfeng_ptp_ops;
-	ndev->ptp_clock = ptp_clock_register(&ndev->ptp_ops, ndev->dev);
+	netif->ptp_ops = pfeng_ptp_ops;
+	netif->ptp_clock = ptp_clock_register(&netif->ptp_ops, netif->dev);
 
-	if (IS_ERR(ndev->ptp_clock))
-		netdev_err(ndev->netdev, "Failed to register PTP clock on emac%d\n", ndev->eth->emac_id);
-	else if (ndev->ptp_clock)
-		netdev_info(ndev->netdev, "Registered PTP HW clock successfully on emac%d\n", ndev->eth->emac_id);
+	if (IS_ERR(netif->ptp_clock))
+		netdev_err(netif->netdev, "Failed to register PTP clock on EMAC%d\n", netif->cfg->emac);
+	else if (netif->ptp_clock)
+		netdev_info(netif->netdev, "Registered PTP HW clock successfully on EMAC%d\n", netif->cfg->emac);
 }
 
-void pfeng_ptp_unregister(struct pfeng_ndev *ndev)
+void pfeng_ptp_unregister(struct pfeng_netif *netif)
 {
-	if (ndev->ptp_clock) {
-		ptp_clock_unregister(ndev->ptp_clock);
-		ndev->ptp_clock = NULL;
-		netdev_info(ndev->netdev, "Unregistered PTP HW clock successfully\n");
+	if (netif->ptp_clock) {
+		ptp_clock_unregister(netif->ptp_clock);
+		netif->ptp_clock = NULL;
+		netdev_info(netif->netdev, "Unregistered PTP HW clock successfully on EMAC%d\n", netif->cfg->emac);
 	}
 }
diff --git a/sw/linux-pfeng/pfeng.h b/sw/linux-pfeng/pfeng.h
index 7e071dc..cc69ec7 100644
--- a/sw/linux-pfeng/pfeng.h
+++ b/sw/linux-pfeng/pfeng.h
@@ -11,7 +11,6 @@
 #include <linux/version.h>
 #include <linux/etherdevice.h>
 #include <linux/netdevice.h>
-#include <linux/stmmac.h>
 #include <linux/phy.h>
 #include <linux/module.h>
 #include <linux/platform_device.h>
@@ -19,31 +18,40 @@
 #include <linux/net_tstamp.h>
 #include <linux/phylink.h>
 #include <linux/kfifo.h>
-
+#include <linux/mutex.h>
+#if !defined(PFENG_CFG_LINUX_NO_SERDES_SUPPORT)
+#include <linux/pcs/fsl-s32gen1-xpcs.h>
+#include <linux/phy/phy.h>
+#endif /* PFENG_CFG_LINUX_NO_SERDES_SUPPORT */
 #include "pfe_cfg.h"
 #include "oal.h"
 #include "bpool.h"
+#include "fifo.h"
 #include "pfe_platform.h"
 #include "pfe_idex.h"
 #include "pfe_hif_drv.h"
 
 #ifdef PFE_CFG_PFE_MASTER
+#if (PFE_CFG_IP_VERSION < PFE_CFG_IP_VERSION_NPU_7_14a)
+#define PFENG_DRIVER_NAME		"pfeng-cut1"
+#else
 #define PFENG_DRIVER_NAME		"pfeng"
+#endif /* PFE_CFG_IP_VERSION_NPU_7_14a */
 #elif PFE_CFG_PFE_SLAVE
 #define PFENG_DRIVER_NAME		"pfeng-slave"
 #else
 #error Incorrect configuration!
 #endif
-
-#define PFENG_DRIVER_VERSION		"BETA 0.9.3"
-
-#define PFENG_MAX_RX_QUEUES		1
-#define PFENG_MAX_TX_QUEUES		1
+#define PFENG_DRIVER_VERSION		"BETA 0.9.4"
 
 #define PFENG_FW_CLASS_NAME		"s32g_pfe_class.fw"
 #define PFENG_FW_UTIL_NAME		"s32g_pfe_util.fw"
 
-#define PFENG_LOGIF_OPTS_PHY_CONNECTED	(1 << 1)
+static const pfe_ct_phy_if_id_t pfeng_emac_ids[] = {
+	PFE_PHY_IF_ID_EMAC0,
+	PFE_PHY_IF_ID_EMAC1,
+	PFE_PHY_IF_ID_EMAC2
+};
 
 static const pfe_hif_chnl_id_t pfeng_chnl_ids[] = {
 	HIF_CHNL_0,
@@ -59,155 +67,202 @@ static const pfe_ct_phy_if_id_t pfeng_hif_ids[] = {
 	PFE_PHY_IF_ID_HIF3
 };
 
+#define PFENG_PFE_HIF_CHANNELS		(ARRAY_SIZE(pfeng_hif_ids))
+#define PFENG_PFE_EMACS			(ARRAY_SIZE(pfeng_emac_ids))
+
 /* HIF channel mode variants */
 enum {
-	PFENG_HIF_MODE_SC,
-	/* PFENG_HIF_MODE_MC, unsupported now */
+	PFENG_HIF_MODE_EXCLUSIVE,
+	PFENG_HIF_MODE_SHARED
 };
 
-/* represents DT ethernet@ node */
-#define PFENG_DT_NODENAME_ETHERNET	"fsl,pfeng-logif"
-/* represents DT mdio@ node */
-#define PFENG_DT_NODENAME_MDIO		"fsl,pfeng-mdio"
-
-/* config option for ethernet@ node */
-struct pfeng_eth {
-	struct list_head		lnode;
-	const char			*name;
-	u32				hif_chnl_sc;
-	bool				ihc;
-	u8				*addr;
-	u8				fixed_link;
-	u32				max_speed;
-	int				intf_mode;
-	u32				emac_id;
-	struct device_node		*dn;
-	struct clk			*tx_clk;
-	struct clk			*rx_clk;
+enum {
+	PFENG_HIF_STATUS_DISABLED,
+	PFENG_HIF_STATUS_REQUESTED,
+	PFENG_HIF_STATUS_ENABLED,
+	PFENG_HIF_STATUS_RUNNING
 };
 
-/* here comes rest of DT config which not fits to pfe_platform_config_t */
-struct pfeng_plat_cfg {
-	u32				hif_mode;
-	struct resource			syscon;
-	u32				hif_chnl_mc;
-	struct list_head		eth_list;
-	u32				ihc_master_chnl;
+enum {
+	PFENG_MAP_PKT_NORMAL,
+	PFENG_MAP_PKT_IHC
 };
 
-struct pfeng_priv;
+#define PFENG_TX_PKT_HEADER_SIZE	(sizeof(pfe_ct_hif_tx_hdr_t))
 
-/* HIF channel */
-struct pfeng_hif_chnl {
-	pfe_hif_chnl_t			*priv;
-#ifdef OAL_IRQ_MODE
-	oal_irq_t			*irq;
-#else
-	u32				irqnum;
-#endif
-	pfe_hif_drv_t			*drv;
-	struct dentry			*dentry;
-};
-
-/* SKB waiting for time stamp */
+/* skbs waiting for time stamp */
 struct pfeng_ts_skb {
-	struct list_head list;
-	struct sk_buff *skb;
-	unsigned long jif_enlisted;
-	u16 ref_num;
+	struct list_head		list;
+	struct sk_buff			*skb;
+	unsigned long			jif_enlisted;
+	u16				ref_num;
 };
 
-/* Timestamp data */
+/* timestamp data */
 struct pfeng_tx_ts {
-	u16 ref_num;
-	struct skb_shared_hwtstamps ts;
+	u16				ref_num;
+	struct skb_shared_hwtstamps	ts;
+};
+
+/* config option for ethernet@ node */
+struct pfeng_netif_cfg {
+	struct list_head		lnode;
+	const char			*name;
+	struct device_node		*dn;
+	u8				*macaddr;
+	u8				emac;
+	u8				hifs;
+	u32				hifmap;
+	bool				tx_inject;
 };
 
 /* net interface private data */
-struct pfeng_rx_chnl_pool;
-struct pfeng_tx_chnl_pool;
-struct pfeng_ndev {
+struct pfeng_netif {
 	struct list_head		lnode;
-	struct napi_struct		napi ____cacheline_aligned_in_smp;
 	struct device			*dev;
 	struct net_device		*netdev;
 	struct phylink			*phylink;
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(5,4,0)
 	struct phylink_config		phylink_cfg;
-#endif
-	struct mii_bus			*mii_bus;
-	void				*emac_regs;
-	u32				emac_speed;
+	struct delayed_work		xpcs_poll_work;
+	struct pfeng_netif_cfg		*cfg;
+	struct pfeng_priv		*priv;
+#ifdef PFE_CFG_PFE_SLAVE
+	struct work_struct		ihc_slave_work;
+	bool				slave_netif_inited;
+#endif /* PFE_CFG_PFE_SLAVE */
 
+	struct work_struct		tx_conf_work;
 	/* PTP/Time stamping*/
-	struct ptp_clock_info		ptp_ops;
-	struct ptp_clock		*ptp_clock;
-	struct hwtstamp_config		tshw_cfg;
+	struct ptp_clock_info           ptp_ops;
+	struct ptp_clock                *ptp_clock;
+	struct hwtstamp_config          tshw_cfg;
 	DECLARE_KFIFO_PTR(ts_skb_fifo, struct pfeng_ts_skb);
 	DECLARE_KFIFO_PTR(ts_tx_fifo, struct pfeng_tx_ts);
-	struct work_struct		ts_tx_work;
-	struct list_head		ts_skb_list;
-	uint16_t			ts_ref_num;
+	struct work_struct              ts_tx_work;
+	struct list_head                ts_skb_list;
+	uint16_t                        ts_ref_num;
+	bool				ts_work_on;
+};
+
+#ifdef PFE_CFG_MULTI_INSTANCE_SUPPORT
+struct pfe_hif_drv_client_tag
+{
+	pfe_ct_phy_if_id_t		phy_if_id;
+	pfe_hif_drv_client_event_handler	event_handler;
+	void				*priv;
+	pfe_hif_drv_t			*hif_drv;
+	fifo_t				*ihc_rx_fifo;
+	fifo_t				*ihc_txconf_fifo;
+	bool				inited;
+};
+
+struct pfe_hif_drv_tag
+{
+	pfe_hif_drv_client_t		*ihc_client;
+};
+#endif /* PFE_CFG_MULTI_INSTANCE_SUPPORT */
+
+struct pfeng_rx_chnl_pool;
+struct pfeng_tx_chnl_pool;
+struct pfeng_hif_chnl {
+	struct napi_struct		napi ____cacheline_aligned_in_smp;
+	struct mutex			lock_tx;
+	struct net_device		dummy_netdev;
+	struct device			*dev;
+	pfe_hif_chnl_t			*priv;
+	struct dentry			*dentry;
+	int				cl_mode;
+	bool				ihc;
+	u8				status;
+	u8				idx;
+	u8				netif_q_idx;
+	u32				features;
+
+	struct pfeng_netif		*netifs[HIF_CLIENTS_MAX];
+
+#ifdef PFE_CFG_MULTI_INSTANCE_SUPPORT
+	/* For IDEX support only */
+	pfe_hif_drv_t			hif_drv;
+	pfe_hif_drv_client_t		ihc_client;
+#endif /* PFE_CFG_MULTI_INSTANCE_SUPPORT */
 
-	struct pfeng_priv		*priv;
-	struct pfeng_eth		*eth;
-	pfe_hif_drv_client_t		*client;
-	pfe_phy_if_t			*phyif_emac;
-	pfe_log_if_t			*logif_emac;
-	struct pfeng_hif_chnl		chnl_sc;
 	struct {
 		struct pfeng_rx_chnl_pool	*rx_pool;
 		struct pfeng_tx_chnl_pool	*tx_pool;
 	} bman;
 
-	u32				opts;
+	pfe_phy_if_t			*phyif_hif;
+	pfe_log_if_t			*logif_hif;
+};
 
-	struct {
-		u64			napi_poll;
-		u64			napi_poll_onrun;
-		u64			napi_poll_completed;
-		u64			napi_poll_resched;
-		u64			napi_poll_rx;
-		u64			txconf_loop;
-		u64			tx_busy;
-		u64			txconf;
-		u64			tx_pkt_frags;
-		u64			tx_pkt_frag_deep;
-#ifdef PFE_CFG_MULTI_INSTANCE_SUPPORT
-		u64			ihc_rx;
-		u64			ihc_tx;
-#endif
-	} xstats;
+struct pfeng_emac {
+	struct clk			*tx_clk;
+	struct clk			*rx_clk;
+	phy_interface_t			intf_mode;
+	u32				link_an;
+	u32				max_speed;
+	u32				speed;
+	u32				duplex;
+	bool				enabled;
+	bool				phyless;
+	struct device_node		*dn_mdio;
+	struct mii_bus			*mii_bus;
+#if !defined(PFENG_CFG_LINUX_NO_SERDES_SUPPORT)
+	/* XPCS */
+	struct phy			*serdes_phy;
+	struct s32gen1_xpcs		*xpcs;
+	const struct s32gen1_xpcs_ops	*xpcs_ops;
+	struct phylink_link_state 	xpcs_link;
+	u32				serdes_an_speed;
+	bool				sgmii_link;
+#endif /* PFENG_CFG_LINUX_NO_SERDES_SUPPORT */
+
+	pfe_phy_if_t			*phyif_emac;
+	pfe_log_if_t			*logif_emac;
+};
+
+struct pfeng_ihc_tx {
+	struct pfeng_hif_chnl		*chnl;
+	struct sk_buff			*skb;
 };
 
 /* driver private data */
 struct pfeng_priv {
 	struct platform_device		*pdev;
+	struct reset_control		*rst;
 	struct dentry			*dbgfs;
-	struct list_head		ndev_list;
-	struct clk			*sys_clk;
-	struct clk			*ptp_clk;
-	uint64_t			ptp_reference_clk;
-	struct pfeng_plat_cfg		plat;
-	u32				msg_enable;
+	struct list_head		netif_cfg_list;
+	struct list_head		netif_list;
+	struct clk			*clk_sys;
+	struct clk			*clk_pe;
+	struct clk                      *clk_ptp;
+	uint64_t                        clk_ptp_reference;
+	bool				msg_enable;
 	u32				msg_verbosity;
-	u32				local_drv_id;
+	struct pfeng_emac		emac[PFENG_PFE_EMACS];
+	struct pfeng_hif_chnl		hif_chnl[PFENG_PFE_HIF_CHANNELS];
+	pfe_ct_phy_if_id_t		drv_id;
+#ifdef PFE_CFG_MULTI_INSTANCE_SUPPORT
+	struct pfeng_hif_chnl		*ihc_chnl;
+	u32				ihc_master_chnl;
+	bool				ihc_enabled;
+	struct workqueue_struct		*ihc_tx_wq;
+	struct work_struct		ihc_tx_work;
+	DECLARE_KFIFO_PTR(ihc_tx_fifo, struct pfeng_ihc_tx);
+#ifdef PFE_CFG_PFE_SLAVE
+	struct workqueue_struct		*ihc_slave_wq;
+#endif /* PFE_CFG_PFE_SLAVE */
+#endif /* PFE_CFG_MULTI_INSTANCE_SUPPORT */
+	struct resource			syscon;
+	u8				local_drv_id;
+	bool				in_suspend;
 
-	pfe_platform_config_t		*cfg;
+	pfe_platform_t			*pfe_platform;
+	pfe_platform_config_t		*pfe_cfg;
 	const char			*fw_class_name;
 	const char			*fw_util_name;
-	pfe_platform_t			*pfe;
-
 };
 
-/* drv */
-struct pfeng_priv *pfeng_drv_alloc(struct platform_device *pdev);
-int pfeng_hif_chnl_drv_create(struct pfeng_ndev *ndev);
-void pfeng_hif_chnl_drv_remove(struct pfeng_ndev *ndev);
-int pfeng_drv_remove(struct pfeng_priv *priv);
-int pfeng_drv_probe(struct pfeng_priv *priv);
-int pfeng_drv_cfg_get_emac_intf_mode(struct pfeng_priv *priv, u8 id);
-
 /* fw */
 int pfeng_fw_load(struct pfeng_priv *priv, const char *fw_class_name, const char *fw_util_name);
 void pfeng_fw_free(struct pfeng_priv *priv);
@@ -215,49 +270,63 @@ void pfeng_fw_free(struct pfeng_priv *priv);
 /* debugfs */
 int pfeng_debugfs_create(struct pfeng_priv *priv);
 void pfeng_debugfs_remove(struct pfeng_priv *priv);
-int pfeng_debugfs_add_hif_chnl(struct pfeng_priv *priv, struct pfeng_ndev *ndev);
-
-/* NAPI */
-struct pfeng_ndev *pfeng_napi_if_create(struct pfeng_priv *priv, struct pfeng_eth *eth);
-void pfeng_napi_if_release(struct pfeng_ndev *ndev);
+int pfeng_debugfs_add_hif_chnl(struct pfeng_priv *priv, u32 idx);
 
-void pfeng_ethtool_init(struct net_device *netdev);
+/* mdio */
+int pfeng_mdio_register(struct pfeng_priv *priv);
+void pfeng_mdio_unregister(struct pfeng_priv *priv);
+int pfeng_mdio_suspend(struct pfeng_priv *priv);
+int pfeng_mdio_resume(struct pfeng_priv *priv);
 
 /* hif */
-void pfeng_bman_pool_destroy(struct pfeng_ndev *ndev);
-int pfeng_bman_pool_create(struct pfeng_ndev *ndev);
-struct sk_buff *pfeng_hif_drv_client_receive_pkt(pfe_hif_drv_client_t *client, uint32_t queue);
-int pfeng_hif_chnl_refill_rx_buffer(struct pfeng_ndev *ndev, bool preempt);
-int pfeng_hif_chnl_fill_rx_buffers(struct pfeng_ndev *ndev);
-bool pfeng_hif_chnl_txconf_check(struct pfeng_ndev *ndev, u32 elems);
-int pfeng_hif_chnl_txconf_put_map_frag(struct pfeng_ndev *ndev, void *va_addr, addr_t pa_addr, u32 size, struct sk_buff *skb);
-int pfeng_hif_chnl_txconf_free_map_full(struct pfeng_ndev *ndev, u32 idx);
-int pfeng_hif_chnl_txconf_unroll_map_full(struct pfeng_ndev *ndev, u32 idx, u32 nfrags);
-int pfe_hif_drv_ihc_do_cbk(pfe_hif_drv_t *hif_drv);
-int pfe_hif_drv_ihc_put_pkt(pfe_hif_drv_t *hif_drv, void *data, uint32_t len, void *ref);
-
-/* MDIO */
-int pfeng_mdio_register(struct pfeng_ndev *ndev);
-int pfeng_mdio_unregister(struct pfeng_ndev *ndev);
-int pfeng_phylink_create(struct pfeng_ndev *ndev);
-int pfeng_phylink_start(struct pfeng_ndev *ndev);
-int pfeng_phylink_connect_phy(struct pfeng_ndev *ndev);
-int pfeng_phylink_disconnect_phy(struct pfeng_ndev *ndev);
-int pfeng_phylink_stop(struct pfeng_ndev *ndev);
-int pfeng_phylink_destroy(struct pfeng_ndev *ndev);
-
-/* PTP */
-void pfeng_ptp_register(struct pfeng_ndev *ndev);
-void pfeng_ptp_unregister(struct pfeng_ndev *ndev);
-
-/* HW time stamp */
-int pfeng_hwts_init(struct pfeng_ndev *ndev);
-void pfeng_hwts_release(struct pfeng_ndev *ndev);
-void pfeng_hwts_skb_set_rx_ts(struct pfeng_ndev *ndev, struct sk_buff *skb);
-void pfeng_hwts_get_tx_ts(struct pfeng_ndev *ndev, struct sk_buff *skb);
-int pfeng_hwts_store_tx_ref(struct pfeng_ndev *ndev, struct sk_buff *skb);
-int pfeng_hwts_ioctl_set(struct pfeng_ndev *ndev, struct ifreq *rq);
-int pfeng_hwts_ioctl_get(struct pfeng_ndev *ndev, struct ifreq *rq);
-int pfeng_hwts_ethtool(struct pfeng_ndev *ndev, struct ethtool_ts_info *info);
+int pfeng_hif_create(struct pfeng_priv *priv);
+void pfeng_hif_remove(struct pfeng_priv *priv);
+struct sk_buff *pfeng_hif_chnl_receive_pkt(struct pfeng_hif_chnl *chnl, uint32_t queue);
+int pfeng_hif_chnl_event_handler(pfe_hif_drv_client_t *client, void *data, uint32_t event, uint32_t qno);
+int pfe_hif_drv_ihc_put_pkt(pfe_hif_drv_client_t *client, void *data, uint32_t len, void *ref);
+int pfe_hif_drv_ihc_put_conf(pfe_hif_drv_client_t *client);
+int pfeng_hif_chnl_start(struct pfeng_hif_chnl *chnl);
+#ifdef PFE_CFG_MULTI_INSTANCE_SUPPORT
+void pfeng_ihc_tx_work_handler(struct work_struct *work);
+#endif /* PFE_CFG_MULTI_INSTANCE_SUPPORT */
+
+/* bman */
+int pfeng_bman_pool_create(struct pfeng_hif_chnl *chnl);
+void pfeng_bman_pool_destroy(struct pfeng_hif_chnl *chnl);
+int pfeng_hif_chnl_fill_rx_buffers(struct pfeng_hif_chnl *chnl);
+int pfeng_hif_chnl_txconf_put_map_frag(struct pfeng_hif_chnl *chnl, void *va_addr, addr_t pa_addr, u32 size, struct sk_buff *skb, u8 flags);
+u8 pfeng_hif_chnl_txconf_get_flag(struct pfeng_hif_chnl *chnl);
+struct sk_buff *pfeng_hif_chnl_txconf_get_skbuf(struct pfeng_hif_chnl *chnl);
+int pfeng_hif_chnl_txconf_unroll_map_full(struct pfeng_hif_chnl *chnl, u32 idx, u32 nfrags);
+int pfeng_hif_chnl_txconf_free_map_full(struct pfeng_hif_chnl *chnl);
+bool pfeng_hif_chnl_txconf_check(struct pfeng_hif_chnl *chnl, u32 elems);
+
+/* netif */
+int pfeng_netif_create(struct pfeng_priv *priv);
+void pfeng_netif_remove(struct pfeng_priv *priv);
+int pfeng_netif_suspend(struct pfeng_priv *priv);
+int pfeng_netif_resume(struct pfeng_priv *priv);
+void pfeng_ethtool_init(struct net_device *netdev);
+int pfeng_phylink_create(struct pfeng_netif *netif);
+int pfeng_phylink_connect_phy(struct pfeng_netif *netif);
+int pfeng_phylink_start(struct pfeng_netif *netif);
+void pfeng_phylink_stop(struct pfeng_netif *netif);
+void pfeng_phylink_disconnect_phy(struct pfeng_netif *netif);
+void pfeng_phylink_destroy(struct pfeng_netif *netif);
+void pfeng_phylink_mac_change(struct pfeng_netif *netif, bool up);
+
+/* ptp */
+void pfeng_ptp_register(struct pfeng_netif *netif);
+void pfeng_ptp_unregister(struct pfeng_netif *netif);
+
+/* hw timestamp */
+int pfeng_hwts_init(struct pfeng_netif *netif);
+void pfeng_hwts_release(struct pfeng_netif *netif);
+void pfeng_hwts_skb_set_rx_ts(struct pfeng_netif *netif, struct sk_buff *skb);
+void pfeng_hwts_get_tx_ts(struct pfeng_netif *netif, struct sk_buff *skb);
+int pfeng_hwts_store_tx_ref(struct pfeng_netif *netif, struct sk_buff *skb);
+int pfeng_hwts_ioctl_set(struct pfeng_netif *netif, struct ifreq *rq);
+int pfeng_hwts_ioctl_get(struct pfeng_netif *netif, struct ifreq *rq);
+int pfeng_hwts_ethtool(struct pfeng_netif *netif, struct ethtool_ts_info *info);
 
 #endif
diff --git a/sw/oal/Makefile b/sw/oal/Makefile
index b968bf9..78e04b4 100644
--- a/sw/oal/Makefile
+++ b/sw/oal/Makefile
@@ -1,5 +1,5 @@
 # =========================================================================
-#  Copyright 2018-2020 NXP
+#  Copyright 2018-2021 NXP
 #
 #  SPDX-License-Identifier: GPL-2.0
 #
@@ -39,7 +39,7 @@ LIBS_profile += -lprofilingS
 CCFLAGS_pfe += -D$(PFE_CFG_TARGET_ARCH_DEF) -D$(PFE_CFG_TARGET_OS_DEF) -D$(PFE_CFG_BUILD_PROFILE_DEF)
 
 #Generic compiler flags (which include build type flags)
-CCFLAGS_all += -Wall -fmessage-length=0
+CCFLAGS_all += -Wall -fmessage-length=0 -fvisibility=hidden
 CCFLAGS_all += $(CCFLAGS_$(BUILD_PROFILE))
 CCFLAGS_all += $(CCFLAGS_pfe)
 #Shared library has to be compiled with -fPIC
@@ -114,6 +114,7 @@ rebuild: clean all
 ccflags-y += $(INCLUDES)
 ccflags-y += $(CCFLAGS_pfe)
 ccflags-y += $(GLOBAL_CCFLAGS)
+ccflags-y += -Werror
 
 oal-y := $(OBJS)
 
diff --git a/sw/oal/public/linux/errno.h b/sw/oal/public/linux/errno.h
deleted file mode 100644
index 2609e4b..0000000
--- a/sw/oal/public/linux/errno.h
+++ /dev/null
@@ -1,9 +0,0 @@
-/* =========================================================================
- *  Copyright 2018,2020 NXP
- *
- *  SPDX-License-Identifier: GPL-2.0
- *
- * ========================================================================= */
- 
-/* empty */
-
diff --git a/sw/oal/public/linux/stdbool.h b/sw/oal/public/linux/stdbool.h
deleted file mode 100644
index 8139182..0000000
--- a/sw/oal/public/linux/stdbool.h
+++ /dev/null
@@ -1,6 +0,0 @@
-/* =========================================================================
- *  Copyright 2018,2020 NXP
- *
- *  SPDX-License-Identifier: GPL-2.0
- *
- * ========================================================================= */
diff --git a/sw/oal/public/linux/stdint.h b/sw/oal/public/linux/stdint.h
deleted file mode 100644
index 8139182..0000000
--- a/sw/oal/public/linux/stdint.h
+++ /dev/null
@@ -1,6 +0,0 @@
-/* =========================================================================
- *  Copyright 2018,2020 NXP
- *
- *  SPDX-License-Identifier: GPL-2.0
- *
- * ========================================================================= */
diff --git a/sw/oal/public/linux/stdlib.h b/sw/oal/public/linux/stdlib.h
deleted file mode 100644
index 8139182..0000000
--- a/sw/oal/public/linux/stdlib.h
+++ /dev/null
@@ -1,6 +0,0 @@
-/* =========================================================================
- *  Copyright 2018,2020 NXP
- *
- *  SPDX-License-Identifier: GPL-2.0
- *
- * ========================================================================= */
diff --git a/sw/oal/public/linux/string.h b/sw/oal/public/linux/string.h
deleted file mode 100644
index 8139182..0000000
--- a/sw/oal/public/linux/string.h
+++ /dev/null
@@ -1,6 +0,0 @@
-/* =========================================================================
- *  Copyright 2018,2020 NXP
- *
- *  SPDX-License-Identifier: GPL-2.0
- *
- * ========================================================================= */
diff --git a/sw/oal/public/linux/unistd.h b/sw/oal/public/linux/unistd.h
deleted file mode 100644
index ac491ed..0000000
--- a/sw/oal/public/linux/unistd.h
+++ /dev/null
@@ -1,7 +0,0 @@
-/* =========================================================================
- *  Copyright 2018,2020 NXP
- *
- *  SPDX-License-Identifier: GPL-2.0
- *
- * ========================================================================= */
-
diff --git a/sw/oal/public/oal_irq.h b/sw/oal/public/oal_irq.h
index 09309af..a17b65b 100644
--- a/sw/oal/public/oal_irq.h
+++ b/sw/oal/public/oal_irq.h
@@ -1,5 +1,5 @@
 /* =========================================================================
- *  Copyright 2018-2020 NXP
+ *  Copyright 2018-2021 NXP
  *
  *  SPDX-License-Identifier: GPL-2.0
  *
@@ -133,7 +133,7 @@ errno_t oal_irq_unmask(oal_irq_t *irq);
  * @param[in]	irq The IRQ instance
  * @return		The IRQ ID associated with the instance or -1 if failed
  */
-int32_t oal_irq_get_id(oal_irq_t *irq);
+int32_t oal_irq_get_id(const oal_irq_t *irq);
 
 /**
  * @brief		Get IRQ flags
@@ -141,7 +141,7 @@ int32_t oal_irq_get_id(oal_irq_t *irq);
  * @param[out]	flags Pointer to write interrupt type flags to
  * @return		EOK if success, error code otherwise
  */
-errno_t oal_irq_get_flags(oal_irq_t *irq, oal_irq_flags_t *flags);
+errno_t oal_irq_get_flags(const oal_irq_t *irq, oal_irq_flags_t *flags);
 
 #endif /* OAL_IRQ_H_ */
 
diff --git a/sw/oal/public/oal_job.h b/sw/oal/public/oal_job.h
index 04d6082..d62c583 100644
--- a/sw/oal/public/oal_job.h
+++ b/sw/oal/public/oal_job.h
@@ -1,5 +1,5 @@
 /* =========================================================================
- *  Copyright 2019-2020 NXP
+ *  Copyright 2019-2021 NXP
  *
  *  SPDX-License-Identifier: GPL-2.0
  *
@@ -72,7 +72,7 @@ errno_t oal_job_run(oal_job_t *job);
  * @param[in]	job The job instance
  * @return		EOK if success, error code otherwise
  */
-errno_t oal_job_drain(oal_job_t *job);
+errno_t oal_job_drain(const oal_job_t *job);
 
 #endif /* PUBLIC_OAL_JOB_H_ */
 
diff --git a/sw/oal/public/oal_mbox.h b/sw/oal/public/oal_mbox.h
index f6fbb36..3e8ec04 100644
--- a/sw/oal/public/oal_mbox.h
+++ b/sw/oal/public/oal_mbox.h
@@ -1,5 +1,5 @@
 /* =========================================================================
- *  Copyright 2018-2020 NXP
+ *  Copyright 2018-2021 NXP
  *
  *  SPDX-License-Identifier: GPL-2.0
  *
@@ -111,7 +111,7 @@ typedef enum
  * @note	This is general representation and it is the same for message as
  * 			well as signal type.
  */
-typedef struct oal_mbox_msg_tag
+typedef struct
 {
 	struct
 	{
@@ -126,7 +126,7 @@ typedef struct oal_mbox_msg_tag
 		union {
 			int32_t id;			/*	Internal message ID, shall not be touched by user */
 			void *ptr;			/*	Internal message handle pointer, shall not be touched by user */
-		};
+		} msg_info;
 	} metadata;
 } oal_mbox_msg_t;
 
diff --git a/sw/oal/public/oal_mm.h b/sw/oal/public/oal_mm.h
index 530d8f1..54cf564 100644
--- a/sw/oal/public/oal_mm.h
+++ b/sw/oal/public/oal_mm.h
@@ -1,5 +1,5 @@
 /* =========================================================================
- *  Copyright 2018-2020 NXP
+ *  Copyright 2018-2021 NXP
  *
  *  SPDX-License-Identifier: GPL-2.0
  *
@@ -52,7 +52,7 @@
  * @param[in]	dev The OS specific device structure associated with the memory management. Only for Linux supported.
  * @return		EOK if success
  */
-errno_t oal_mm_init(void *dev);
+errno_t oal_mm_init(const void *dev);
 
 /**
  * @brief		Shut the memory management library down
diff --git a/sw/oal/public/oal_types.h b/sw/oal/public/oal_types.h
index 2e851ec..c77bb51 100644
--- a/sw/oal/public/oal_types.h
+++ b/sw/oal/public/oal_types.h
@@ -1,5 +1,5 @@
 /* =========================================================================
- *  Copyright 2018-2020 NXP
+ *  Copyright 2018-2021 NXP
  *
  *  SPDX-License-Identifier: GPL-2.0
  *
@@ -8,15 +8,15 @@
 /**
  * @addtogroup	dxgrOAL
  * @{
- * 
+ *
  * @defgroup    dxgr_OAL_TYPES TYPES
  * @brief		Standard types
- * @details		
- * 	
- * 	
+ * @details
+ *
+ *
  * @addtogroup	dxgr_OAL_TYPES
  * @{
- * 
+ *
  * @file		oal_types.h
  * @brief		Header for standard types
  * @details		TODO
@@ -49,7 +49,7 @@
 
 /*
  * BARE METAL
- * 
+ *
  */
 #elif defined(PFE_CFG_TARGET_OS_BARE)
 #include "oal_types_bare.h"
@@ -62,17 +62,7 @@
 #error "PFE_CFG_TARGET_OS_xx was not set!"
 #endif /* PFE_CFG_TARGET_OS_xx */
 
-#define STRINGIFY(x) #x
-#define TOSTRING(x) STRINGIFY(x)
-
-#define ASSERT_CONCAT_(a, b) a##b
-#define ASSERT_CONCAT(a, b) ASSERT_CONCAT_(a, b)
-
-#ifdef __ghs__ /* AAVB-2386 */
-#define ct_assert(e) 
-#else
-#define ct_assert(e) enum { ASSERT_CONCAT(precompile_assert_, __COUNTER__) = 1/(!!(e)) }
-#endif
+#include "ct_assert.h"
 
 /**
  * @brief		Swap byte order in a buffer
diff --git a/sw/oal/public/oal_types_linux.h b/sw/oal/public/oal_types_linux.h
index e70e9c4..efd6f22 100644
--- a/sw/oal/public/oal_types_linux.h
+++ b/sw/oal/public/oal_types_linux.h
@@ -1,5 +1,5 @@
 /* =========================================================================
- *  Copyright 2018-2020 NXP
+ *  Copyright 2018-2021 NXP
  *
  *  SPDX-License-Identifier: GPL-2.0
  *
@@ -15,6 +15,8 @@
 #define __STR_HELPER(x) #x
 #define __STR(x) __STR_HELPER(x)
 
+#define NXP_LOG_ENABLED
+
 #define NXP_LOG_WARNING(...) printk(KERN_WARNING "["__FILE__":"__STR(__LINE__)"] WRN: " __VA_ARGS__)
 #define NXP_LOG_ERROR(...) printk(KERN_ERR "["__FILE__":"__STR(__LINE__)"] ERR: " __VA_ARGS__)
 
@@ -33,14 +35,14 @@
 #if defined(PFE_CFG_TARGET_ARCH_i386)
 typedef unsigned int addr_t;
 #define PRINT64 "l"
-#define PRINTADDR_T "u"
+#define PRINTADDR_T "x"
 #elif defined(PFE_CFG_TARGET_ARCH_x86_64) || defined(PFE_CFG_TARGET_ARCH_aarch64)
 
 #define MAX_ADDR_T_VAL UINT_MAX
 
 typedef unsigned long long addr_t;
 #define PRINT64 "ll"
-#define PRINTADDR_T "llu"
+#define PRINTADDR_T "llx"
 #else
 #error Unsupported or no platform defined
 #endif
@@ -62,6 +64,10 @@ typedef unsigned int uint_t; /* For use within printf like functions */
 #define FALSE 0
 #endif /* FALSE */
 
+#ifndef NULL_ADDR
+#define NULL_ADDR ((addr_t)0U)
+#endif /* NULL_ADDR */
+
 #define oal_htons(x)	htons(x)
 #define oal_ntohs(x)	ntohs(x)
 #define oal_htonl(x)	htonl(x)
diff --git a/sw/oal/src/oal_irq_linux.c b/sw/oal/src/oal_irq_linux.c
index 07b45cb..8cea01c 100644
--- a/sw/oal/src/oal_irq_linux.c
+++ b/sw/oal/src/oal_irq_linux.c
@@ -1,5 +1,5 @@
 /* =========================================================================
- *  Copyright 2018-2020 NXP
+ *  Copyright 2018-2021 NXP
  *
  *  SPDX-License-Identifier: GPL-2.0
  *
@@ -326,7 +326,7 @@ errno_t oal_irq_unmask(oal_irq_t *irq)
 	return EOK;
 }
 
-int32_t oal_irq_get_id(oal_irq_t *irq)
+int32_t oal_irq_get_id(const oal_irq_t *irq)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == irq))
@@ -339,7 +339,7 @@ int32_t oal_irq_get_id(oal_irq_t *irq)
 	return irq->id;
 }
 
-errno_t oal_irq_get_flags(oal_irq_t *irq, oal_irq_flags_t *flags)
+errno_t oal_irq_get_flags(const oal_irq_t *irq, oal_irq_flags_t *flags)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely((NULL == irq) || (NULL == flags)))
diff --git a/sw/oal/src/oal_job_linux.c b/sw/oal/src/oal_job_linux.c
index 2239424..ac5ee09 100644
--- a/sw/oal/src/oal_job_linux.c
+++ b/sw/oal/src/oal_job_linux.c
@@ -1,5 +1,5 @@
 /* =========================================================================
- *  Copyright 2019-2020 NXP
+ *  Copyright 2019-2021 NXP
  *
  *  SPDX-License-Identifier: GPL-2.0
  *
@@ -54,7 +54,7 @@ errno_t oal_job_run(oal_job_t *job)
 	return ret;
 }
 
-errno_t oal_job_drain(oal_job_t *job)
+errno_t oal_job_drain(const oal_job_t *job)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == job))
diff --git a/sw/oal/src/oal_mbox_linux.c b/sw/oal/src/oal_mbox_linux.c
index 1a19412..aa2ca25 100644
--- a/sw/oal/src/oal_mbox_linux.c
+++ b/sw/oal/src/oal_mbox_linux.c
@@ -1,5 +1,5 @@
 /* =========================================================================
- *  Copyright 2018-2020 NXP
+ *  Copyright 2018-2021 NXP
  *
  *  SPDX-License-Identifier: GPL-2.0
  *
@@ -102,7 +102,7 @@ static atomic_t mbox_cnt = ATOMIC_INIT(0);	/* to serialize workqueue globally */
 
 static void mbox_ack_msg_internal(oal_mbox_msg_t *msg)
 {
-	oal_mbox_t *mbox = msg->metadata.ptr;
+	oal_mbox_t *mbox = msg->metadata.msg_info.ptr;
 
 	/* signal the cmd is done */
 	atomic_set(&mbox->msg.fin, 1);
@@ -116,7 +116,7 @@ static void mbox_ack_msg_internal(oal_mbox_msg_t *msg)
 void oal_mbox_ack_msg(oal_mbox_msg_t *msg)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
-	if (unlikely(NULL == msg) || unlikely(NULL == msg->metadata.ptr))
+	if (unlikely(NULL == msg) || unlikely(NULL == msg->metadata.msg_info.ptr))
 	{
 		NXP_LOG_ERROR("NULL argument received\n");
 		return;
@@ -149,7 +149,7 @@ static errno_t mbox_send_generic(oal_mbox_t *mbox, oal_mbox_msg_type mtype, int3
 
 	/* Fill cmd's data */
 	mbox->msg.data.metadata.type = mtype;
-	mbox->msg.data.metadata.ptr = mbox;
+	mbox->msg.data.metadata.msg_info.ptr = mbox;
 	mbox->msg.data.payload.code = code;
 	mbox->msg.data.payload.ptr = (mtype == OAL_MBOX_MSG_MESSAGE) ? data : NULL;
 	mbox->msg.data.payload.len = (mtype == OAL_MBOX_MSG_MESSAGE) ? len : 0;
diff --git a/sw/oal/src/oal_mm_linux.c b/sw/oal/src/oal_mm_linux.c
index abfdf99..cf38071 100644
--- a/sw/oal/src/oal_mm_linux.c
+++ b/sw/oal/src/oal_mm_linux.c
@@ -1,5 +1,5 @@
 /* =========================================================================
- *  Copyright 2018-2020 NXP
+ *  Copyright 2018-2021 NXP
  *
  *  SPDX-License-Identifier: GPL-2.0
  *
@@ -15,49 +15,49 @@
  *
  */
 
+#include <linux/version.h>
 #include <linux/kernel.h>
 #include <linux/slab.h>
 #include <linux/dma-mapping.h>
 #include <linux/types.h>
 #include <linux/hashtable.h>
+#include <linux/genalloc.h>
+#include <linux/of.h>
+#include <linux/of_reserved_mem.h>
 
 #include "pfe_cfg.h"
 #include "oal.h"
 #include "oal_mm.h"
 
-#define PTR_ALIGN(p, a)         ((typeof(p))ALIGN((unsigned long)(p), (a)))
-
-enum pfe_kmem_type
-{
+enum pfe_kmem_type {
 	PFE_MEM_INVALID = 0,
 	PFE_MEM_KMALLOC,
+	PFE_MEM_DMA_ALLOC,
+	PFE_MEM_RESERVED_ALLOC,
+	PFE_MEM_BMU2_RESERVED_ALLOC,
 };
 
-struct pfe_kmem
-{
+struct pfe_kmem {
 	struct hlist_node node;
 	enum pfe_kmem_type type;
 	void *addr;
+	addr_t size;
+	dma_addr_t dma_addr;
 };
 
-/**
- * Memory range properties
- */
-#define HWB_CFG_MEM_BUF_WATCH
-#define NXP_MAGICINT 0x5f4e5850 /* _NXP */
-struct mem_props
-{
-#ifdef HWB_CFG_MEM_BUF_WATCH
-	uint32_t magicword;
-#endif /* HWB_CFG_MEM_BUF_WATCH */
-	addr_t map_start_va;		/*	Memory region start virt(kernel) address */
-	addr_t map_start_pa;		/*	Memory region start phys  address */
-	addr_t map_length;
-
-	addr_t buf_start_va;		/*	Original VA given by process calling the __hwb_malloc_contig() */
-	dma_addr_t handle;
+struct pfe_reserved_mem {
+	struct list_head node;
+	char_t *name;
+	struct gen_pool *pool_alloc;
+	void *map_start_va;
+	phys_addr_t map_start_pa;
+	addr_t map_size;
 };
 
+static LIST_HEAD(pfe_reserved_mem_list);
+static void *bmu_start_va = NULL;
+static phys_addr_t bmu_start_pa;
+
 #define OAL_CACHE_ALLIGN	64
 
 /* struct device *dev associated with mm */
@@ -66,101 +66,188 @@ static struct device *__dev = NULL;
 /* define hash table to store address */
 static DEFINE_HASHTABLE(pfe_addr_htable, 8);
 
+static struct pfe_reserved_mem *__oal_mm_reserved_mem_get(const char_t *name)
+{
+	struct pfe_reserved_mem *res_mem = NULL;
+	bool_t found = false;
+
+	if (list_empty(&pfe_reserved_mem_list))
+		return NULL;
+
+	list_for_each_entry(res_mem, &pfe_reserved_mem_list, node) {
+		if (!strcmp(res_mem->name, name)) {
+			found = true;
+			break;
+		}
+	}
+
+	if (!found)
+		res_mem = NULL;
+
+	return res_mem;
+}
+
 /**
- *	Allocate physically contiguous buffer physically aligned to "align" bytes. If
- *	"align" is zero, no alignment will be performed.
+ *	Allocate physically contiguous buffer physically aligned to "align" bytes.
  */
-static void *__oal_mm_malloc_contig(const addr_t size, const uint32_t align, const bool_t cacheable)
+static void *__oal_mm_dma_alloc_htable(const addr_t size, const uint32_t align)
 {
-	void *vaddr, *paddr;
-	addr_t offset;
-	addr_t map_start_va;
-	addr_t map_start_pa;
-	const addr_t map_length = (size + align + sizeof(struct mem_props));
-	struct mem_props *props;
-	dma_addr_t handle;
+	struct pfe_kmem *hnode;
+	void *vaddr;
+	dma_addr_t dma_addr;
 
 	/*	Get memory block */
-	vaddr = dma_alloc_coherent(__dev, map_length, &handle, GFP_ATOMIC);
+	vaddr = dma_alloc_coherent(__dev, size, &dma_addr, GFP_KERNEL);
 	if (!vaddr)
-	{
+		return NULL;
+
+	if (!IS_ALIGNED(dma_addr, align ? : OAL_CACHE_ALLIGN)) {
+		dma_free_coherent(__dev, size, vaddr, dma_addr);
+		NXP_LOG_ERROR("Alignment not supported\n");
 		return NULL;
 	}
-	paddr = (void*)handle;
 
-	map_start_va = (unsigned long)(vaddr);
-	map_start_pa = (unsigned long)(paddr);
+	hnode = kzalloc(sizeof(struct pfe_kmem), GFP_KERNEL);
+	if (!hnode) {
+		dma_free_coherent(__dev, size, vaddr, dma_addr);
+		return NULL;
+	}
 
-	/*	Align the PA */
-	paddr += sizeof(struct mem_props);
+	hash_add(pfe_addr_htable, &hnode->node, (uint64_t)vaddr);
+	hnode->type = PFE_MEM_DMA_ALLOC;
+	hnode->addr = vaddr;
+	hnode->size = size;
+	hnode->dma_addr = dma_addr;
 
-	if (align)
-	{
-		paddr = (void *)PTR_ALIGN(paddr, align);
-	}
+	return vaddr;
+}
 
-	offset = (addr_t)(paddr) - map_start_pa;
+static void __oal_mm_dma_free_htable(struct pfe_kmem *hnode)
+{
+	hnode->type = PFE_MEM_INVALID;
+	if (hnode->addr)
+		dma_free_coherent(__dev, hnode->size, hnode->addr, hnode->dma_addr);
+	kfree(hnode);
+}
 
-	/*	Move VA by the same offset than the aligned PA to point to same location */
-	vaddr += offset;
+static void *__oal_mm_kmalloc_htable(const addr_t size)
+{
+	struct pfe_kmem *hnode;
+	void *vaddr;
 
-	/*	Set buffer properties */
-	props = (struct mem_props *)(vaddr - sizeof(struct mem_props));
-	props->map_length = map_length;
-	props->map_start_va = map_start_va;
-	props->map_start_pa = map_start_pa;
-	props->buf_start_va = (addr_t)vaddr;
-	props->handle = handle; //FIXME: use map_start_pa instead and add 'offs'
-#ifdef HWB_CFG_MEM_BUF_WATCH
-	props->magicword = NXP_MAGICINT;
-#endif /* HWB_CFG_MEM_BUF_WATCH */
+	vaddr = kmalloc(size, GFP_KERNEL);
+	if (!vaddr)
+		return NULL;
 
-	if (TRUE == cacheable)
-	{
-		/*	Flush the cache over props */
-		//TODO: needed on ARM
+	hnode = kzalloc(sizeof(struct pfe_kmem), GFP_KERNEL);
+	if (!hnode) {
+		kfree(vaddr);
+		return NULL;
 	}
 
+	hash_add(pfe_addr_htable, &hnode->node, (uint64_t)vaddr);
+	hnode->type = PFE_MEM_KMALLOC;
+	hnode->addr = vaddr;
+
 	return vaddr;
 }
-static void *__oal_mm_kmalloc_htable(const addr_t size)
+
+static void __oal_mm_kfree_htable(struct pfe_kmem *hnode)
+{
+	hnode->type = PFE_MEM_INVALID;
+	if (hnode->addr)
+		kfree(hnode->addr);
+	kfree(hnode);
+}
+
+static void *__oal_mm_reserved_mem_alloc_htable(struct gen_pool *pool_alloc, const addr_t size, const uint32_t align)
 {
 	struct pfe_kmem *hnode;
-	void *new_mem;
+	void *vaddr;
+
+	if (align && ((1 << pool_alloc->min_alloc_order) % align)) {
+		NXP_LOG_ERROR("Alignment not supported\n");
+		return NULL;
+	}
 
-	new_mem = kmalloc(size, GFP_KERNEL);
-	if (!new_mem)
+	vaddr = (void *)gen_pool_alloc(pool_alloc, size);
+	if (!vaddr)
 		return NULL;
 
-	hnode = kmalloc(sizeof(struct pfe_kmem), GFP_KERNEL);
+	hnode = kzalloc(sizeof(struct pfe_kmem), GFP_KERNEL);
 	if (!hnode) {
-		kfree(new_mem);
+		gen_pool_free(pool_alloc, (unsigned long)vaddr, size);
 		return NULL;
 	}
 
-	hash_add(pfe_addr_htable, &hnode->node, (uint64_t)new_mem);
-	hnode->type = PFE_MEM_KMALLOC;
-	hnode->addr = new_mem;
+	hash_add(pfe_addr_htable, &hnode->node, (uint64_t)vaddr);
+	hnode->type = PFE_MEM_RESERVED_ALLOC;
+	hnode->addr = vaddr;
+	hnode->size = size;
 
-	return new_mem;
+	return vaddr;
 }
 
-static void __oal_mm_kfree_htable(struct pfe_kmem *hnode)
+static void __oal_mm_reserved_mem_free_htable(struct pfe_kmem *hnode)
 {
+	struct pfe_reserved_mem *res_mem = __oal_mm_reserved_mem_get(PFE_CFG_BD_MEM);
+
 	hnode->type = PFE_MEM_INVALID;
-	if (hnode)
-	{
-		if (hnode->addr)
-			kfree(hnode->addr);
-		kfree(hnode);
+	if (hnode->addr && res_mem->pool_alloc)
+		gen_pool_free(res_mem->pool_alloc, (unsigned long)hnode->addr, hnode->size);
+	kfree(hnode);
+}
+
+static void *__oal_mm_reserved_sys_mem_alloc_htable(struct pfe_reserved_mem *res_mem, const addr_t size, const uint32_t align)
+{
+	struct pfe_kmem *hnode;
+
+	if (!IS_ALIGNED(res_mem->map_start_pa, align)) {
+		NXP_LOG_ERROR("BMU2 buffer pool reserved mem region addr not aligned\n");
+		return NULL;
+	}
+
+	if (res_mem->map_size < size) {
+		NXP_LOG_ERROR("BMU2 buffer pool reserved mem region size exceeded\n");
+		/* try default allocation */
+		return NULL;
+	}
+
+	if (bmu_start_va) {
+		NXP_LOG_ERROR("Allocation attempt in BMU2 exclusive zone\n");
+		/* try default allocation */
+		return NULL;
 	}
+
+	bmu_start_va = res_mem->map_start_va;
+	bmu_start_pa = res_mem->map_start_pa;
+
+	hnode = kzalloc(sizeof(struct pfe_kmem), GFP_KERNEL);
+	if (!hnode) {
+		bmu_start_va = NULL;
+		return NULL;
+	}
+
+	hash_add(pfe_addr_htable, &hnode->node, (uint64_t)bmu_start_va);
+	hnode->type = PFE_MEM_BMU2_RESERVED_ALLOC;
+	hnode->addr = bmu_start_va;
+	hnode->size = size;
+
+	return bmu_start_va;
+}
+
+static void __oal_mm_reserved_sys_mem_free_htable(struct pfe_kmem *hnode)
+{
+	bmu_start_va = NULL;
+	kfree(hnode);
 }
+
 /**
  *	Allocate aligned, contiguous, non-cacheable memory region
  */
 void *oal_mm_malloc_contig_aligned_nocache(const addr_t size, const uint32_t align)
 {
-	return __oal_mm_malloc_contig(size, align, FALSE);
+	return __oal_mm_dma_alloc_htable(size, align);
 }
 
 /**
@@ -170,8 +257,7 @@ void *oal_mm_malloc_contig_aligned_cache(const addr_t size, const uint32_t align
 {
 	/* All kmalloc memory is automatically aligned to at least 128B(or higher power of two) on arm64.
 	 * This should be replaced with genpool align allocator in future.*/
-	if (align && 0 != (ARCH_KMALLOC_MINALIGN % align))
-	{
+	if (align && (ARCH_KMALLOC_MINALIGN % align)) {
 		NXP_LOG_ERROR("Alignment not supported\n");
 		return NULL;
 	}
@@ -183,8 +269,23 @@ void *oal_mm_malloc_contig_aligned_cache(const addr_t size, const uint32_t align
  */
 void *oal_mm_malloc_contig_named_aligned_nocache(const char_t *pool, const addr_t size, const uint32_t align)
 {
-	// TODO: switch to reserved memory
-	return __oal_mm_malloc_contig(size, align, FALSE);
+	struct pfe_reserved_mem *res_mem;
+
+	if (strcmp(pool, PFE_CFG_BD_MEM) && strcmp(pool, PFE_CFG_SYS_MEM))
+		goto default_alloc;
+
+	/* use reserved memory */
+	res_mem = __oal_mm_reserved_mem_get(pool);
+	if (!res_mem)
+		goto default_alloc;
+
+	if (!strcmp(pool, PFE_CFG_SYS_MEM))
+		return __oal_mm_reserved_sys_mem_alloc_htable(res_mem, size, align);
+	else
+		return __oal_mm_reserved_mem_alloc_htable(res_mem->pool_alloc, size, align);
+
+default_alloc:
+	return __oal_mm_dma_alloc_htable(size, align);
 }
 
 /**
@@ -194,49 +295,61 @@ void *oal_mm_malloc_contig_named_aligned_cache(const char_t *pool, const addr_t
 {
 	/* All kmalloc memory is automatically aligned to at least 128B(or higher power of two) on arm64.
 	 * This should be replaced with genpool align allocator in future.*/
-	if (align && 0 != (ARCH_KMALLOC_MINALIGN % align))
-	{
+	if (align && (ARCH_KMALLOC_MINALIGN % align)) {
 		NXP_LOG_ERROR("Alignment not supported\n");
 		return NULL;
 	}
 	return __oal_mm_kmalloc_htable(size);
 }
 
+static struct pfe_kmem *__oal_mm_get_vaddr_node(const void *vaddr)
+{
+	struct pfe_kmem *mem = NULL;
+
+	hash_for_each_possible(pfe_addr_htable, mem, node, (uint64_t)vaddr)
+		if (vaddr == mem->addr)
+			break;
+	return mem;
+}
+
 /**
- *	Release memory allocated by __hwb_malloc_contig()
+ *	Release memory allocated by oal_mm_malloc_contig*()
  */
 void oal_mm_free_contig(const void *vaddr)
 {
-	struct mem_props *props = (struct mem_props *)(vaddr - sizeof(struct mem_props));
 	struct pfe_kmem *mem;
-	if (NULL == vaddr)
-	{
+
+	if (!vaddr) {
 		NXP_LOG_ERROR("Attempt to release NULL-pointed memory\n");
+		return;
 	}
-	else
-	{
-		hash_for_each_possible(pfe_addr_htable, mem, node, (uint64_t)vaddr) {
-			if (vaddr == mem->addr)
-			{
-				if (PFE_MEM_KMALLOC == mem->type) {
-					hash_del(&mem->node);
-					__oal_mm_kfree_htable(mem);
-					return;
-				}
-				else
-				{
-					NXP_LOG_ERROR("Invalid oal_mm_free_contig\n");
-				}
-			}
-		}
-/* Check only for dma coherent memory */
-#ifdef HWB_CFG_MEM_BUF_WATCH
-		if (NXP_MAGICINT != props->magicword)
-		{
-			NXP_LOG_ERROR("%s: Memory region check failure\n", __func__);
-		}
-#endif /* HWB_CFG_MEM_BUF_WATCH */
-		dma_free_coherent(__dev, props->map_length, (void *)props->map_start_va, props->handle);
+
+	mem = __oal_mm_get_vaddr_node(vaddr);
+	if (!mem) {
+		NXP_LOG_WARNING("address not found\n");
+		return;
+	}
+
+	switch (mem->type) {
+		case PFE_MEM_KMALLOC:
+			hash_del(&mem->node);
+			__oal_mm_kfree_htable(mem);
+			break;
+		case PFE_MEM_DMA_ALLOC:
+			hash_del(&mem->node);
+			__oal_mm_dma_free_htable(mem);
+			break;
+		case PFE_MEM_RESERVED_ALLOC:
+			hash_del(&mem->node);
+			__oal_mm_reserved_mem_free_htable(mem);
+			break;
+		case PFE_MEM_BMU2_RESERVED_ALLOC:
+			hash_del(&mem->node);
+			__oal_mm_reserved_sys_mem_free_htable(mem);
+			break;
+		default:
+			NXP_LOG_ERROR("invalid address node\n");
+			return;
 	}
 }
 
@@ -266,24 +379,15 @@ void oal_mm_free(const void *vaddr)
 
 void *oal_mm_virt_to_phys_contig(void *vaddr)
 {
-	struct mem_props *props = (struct mem_props *)(vaddr - sizeof(struct mem_props));
-	int64_t offs;
+	struct pfe_kmem *mem = __oal_mm_get_vaddr_node(vaddr);
 
-#ifdef HWB_CFG_MEM_BUF_WATCH
-		if (NXP_MAGICINT != props->magicword)
-		{
-			NXP_LOG_ERROR("%s: Memory region check failure\n", __func__);
-		}
-#endif /* HWB_CFG_MEM_BUF_WATCH */
+	if (mem && mem->dma_addr)
+		return (void *)mem->dma_addr;
 
-	offs = (int64_t)vaddr - props->buf_start_va;
-	offs += props->buf_start_va - props->map_start_va;
-	if(offs < 0) {
-		NXP_LOG_ERROR("%s: @@@!!!@@@ Virt to phys calculation failed (offset=%lld \n", __func__, offs);
-		return NULL;
-	}
+	if (bmu_start_va == vaddr)
+		return (void *)bmu_start_pa;
 
-	return (void *)(props->map_start_pa + offs);
+	return (void *)virt_to_phys((volatile void *)vaddr);
 }
 
 /**
@@ -305,7 +409,7 @@ void *oal_mm_phys_to_virt(void *paddr)
 
 void *oal_mm_dev_map(void *paddr, const addr_t len)
 {
-	return ioremap_nocache((resource_size_t)paddr, len);
+	return ioremap((resource_size_t)paddr, len);
 }
 
 void *oal_mm_dev_map_cache(void *paddr, const addr_t len)
@@ -336,9 +440,176 @@ uint32_t oal_mm_cache_get_line_size(void)
 	return OAL_CACHE_ALLIGN; //oal_cache_context.cache_line_size;
 }
 
-errno_t oal_mm_init(void *dev)
+#ifdef PFE_CFG_PFE_MASTER
+static int pfeng_reserved_bmu2_pool_region_init(struct device *dev, int idx, struct reserved_mem **rmem_out)
+{
+	struct device_node *mem_node;
+	struct reserved_mem *rmem;
+	void *base_va;
+
+	mem_node = of_parse_phandle(dev->of_node, "memory-region", idx);
+	if (!mem_node) {
+		dev_warn(dev, "No memory-region found at index %d\n", idx);
+		goto out;
+	}
+
+	if (!of_device_is_compatible(mem_node, "fsl,pfe-bmu2-pool")) {
+		/* don't fail probing if node not found */
+		dev_warn(dev, "fsl,pfe-bmu2-pool node missing\n");
+		goto out;
+	}
+
+	rmem = of_reserved_mem_lookup(mem_node);
+	if (!rmem) {
+		dev_err(dev, "of_reserved_mem_lookup() returned NULL\n");
+		goto out;
+	}
+
+	of_node_put(mem_node);
+
+	base_va = devm_memremap(dev, rmem->base, rmem->size, MEMREMAP_WC);
+	if (!base_va) {
+		dev_err(dev, "PFE BMU2 pool mapping failed\n");
+		return -EINVAL;
+	}
+
+	rmem->priv = base_va;
+	*rmem_out = rmem;
+
+	return 0;
+
+out:
+	dev_warn(dev, "fallback to default BMU2 pool allocation\n");
+	of_node_put(mem_node);
+
+	return 0;
+}
+#endif /* PFE_CFG_PFE_MASTER */
+
+#if (PFE_CFG_IP_VERSION == PFE_CFG_IP_VERSION_NPU_7_14a)
+static int pfeng_reserved_bdr_pool_region_init(struct device *dev, int idx, struct gen_pool **pool_alloc)
+{
+	struct device_node *mem_node;
+	struct reserved_mem *rmem;
+	struct gen_pool *p;
+	void *base;
+	int ret;
+
+	mem_node = of_parse_phandle(dev->of_node, "memory-region", idx);
+	if (!mem_node) {
+		dev_warn(dev, "No memory-region found at index %d\n", idx);
+		goto out;
+	}
+
+	if (!of_device_is_compatible(mem_node, "fsl,pfe-bdr-pool")) {
+		/* don't fail probing if node not found */
+		dev_warn(dev, "fsl,pfe-bdr-pool node missing\n");
+		goto out;
+	}
+
+	rmem = of_reserved_mem_lookup(mem_node);
+	if (!rmem) {
+		dev_err(dev, "of_reserved_mem_lookup() returned NULL\n");
+		goto out;
+	}
+
+	of_node_put(mem_node);
+
+	base = devm_memremap(dev, rmem->base, rmem->size, MEMREMAP_WB);
+	if (!base) {
+		dev_err(dev, "PFE BDR pool map failed\n");
+		return -EINVAL;
+	}
+
+	p = devm_gen_pool_create(dev, L1_CACHE_SHIFT, -1, "pfe-bdr-pool");
+	if (!p) {
+		dev_err(dev, "gen pool create failed\n");
+		memunmap(base);
+		return -EINVAL;
+	}
+
+	ret = gen_pool_add(p, (unsigned long)base, rmem->size, -1);
+	if (ret) {
+		dev_err(dev, "gen pool add failed\n");
+		memunmap(base);
+		gen_pool_destroy(p);
+		return ret;
+	}
+
+	*pool_alloc = p;
+
+	return 0;
+
+out:
+	dev_warn(dev, "allocate BDRs in non-cacheable memory\n");
+	of_node_put(mem_node);
+
+	return 0;
+}
+#endif
+
+errno_t oal_mm_init(const void *devh)
 {
-	__dev = (struct device *)dev;
+	struct device *dev = (struct device *)devh;
+	struct pfe_reserved_mem *pfe_res_mem;
+	struct gen_pool *pool_alloc = NULL;
+	struct reserved_mem *rmem = NULL;
+	int idx = 0;
+	int ret;
+
+#ifdef PFE_CFG_PFE_MASTER
+	/* BMU2 region is required by MASTER only */
+	ret = pfeng_reserved_bmu2_pool_region_init(dev, idx, &rmem);
+	if (ret) {
+		dev_err(dev, "BMU2 pool reservation failed. Error %d\n", ret);
+		return -ENOMEM;
+	}
+
+	if (rmem)
+		idx++;
+#endif /* PFE_CFG_PFE_MASTER */
+
+	ret = of_reserved_mem_device_init_by_idx(dev, dev->of_node, idx);
+	if (ret) {
+		dev_err(dev, "shared-dma-pool reservation failed. Error %d\n", ret);
+		return -ENOMEM;
+	}
+	idx++;
+
+#if (PFE_CFG_IP_VERSION == PFE_CFG_IP_VERSION_NPU_7_14a)
+	ret = pfeng_reserved_bdr_pool_region_init(dev, idx, &pool_alloc);
+	if (ret) {
+		dev_err(dev, "BDR pool reservation failed. Error %d\n", ret);
+		return -ENOMEM;
+	}
+#endif
+
+	if (pool_alloc) {
+		pfe_res_mem = devm_kzalloc(dev, sizeof(*pfe_res_mem), GFP_KERNEL);
+		if (!pfe_res_mem)
+			return -ENOMEM;
+
+		pfe_res_mem->name = PFE_CFG_BD_MEM;
+		pfe_res_mem->pool_alloc = pool_alloc;
+		INIT_LIST_HEAD(&pfe_res_mem->node);
+		list_add(&pfe_res_mem->node, &pfe_reserved_mem_list);
+	}
+
+	if (rmem) {
+		pfe_res_mem = devm_kzalloc(dev, sizeof(*pfe_res_mem), GFP_KERNEL);
+		if (!pfe_res_mem)
+			return -ENOMEM;
+
+		pfe_res_mem->name = PFE_CFG_SYS_MEM;
+		pfe_res_mem->map_start_va = rmem->priv;
+		pfe_res_mem->map_start_pa = rmem->base;
+		pfe_res_mem->map_size = rmem->size;
+		INIT_LIST_HEAD(&pfe_res_mem->node);
+		list_add(&pfe_res_mem->node, &pfe_reserved_mem_list);
+	}
+
+	__dev = dev;
+
 	hash_init(pfe_addr_htable);
 
 	return EOK;
@@ -346,6 +617,10 @@ errno_t oal_mm_init(void *dev)
 
 void oal_mm_shutdown(void)
 {
+	of_reserved_mem_device_release(__dev);
+	/* reserved_mem list nodes will be released by devm_ */
+	INIT_LIST_HEAD(&pfe_reserved_mem_list);
+
 	__dev = NULL;
 	if (!hash_empty(pfe_addr_htable)) {
 		NXP_LOG_ERROR("Unfreed memory detected\n");
diff --git a/sw/pfe_hif_drv/Makefile b/sw/pfe_hif_drv/Makefile
index c012994..39d0218 100644
--- a/sw/pfe_hif_drv/Makefile
+++ b/sw/pfe_hif_drv/Makefile
@@ -1,5 +1,5 @@
 # =========================================================================
-#  Copyright 2018-2020 NXP
+#  Copyright 2018-2021 NXP
 #
 #  SPDX-License-Identifier: GPL-2.0
 #
@@ -29,6 +29,10 @@ INCLUDES += -I$(INC_PREFIX)src \
 			-I$(INC_PREFIX)../fifo/public \
 			-I$(INC_PREFIX)..
 
+ifeq ($(TARGET_OS),LINUX)
+INCLUDES += -I$(INC_PREFIX)../linux-pfeng
+endif
+
 #Dependencies
 DEPENDENCIES = $(subst -L,,$(subst $(EMPTY) $(EMPTY)-l:,/,$(LIBS)))
 
@@ -43,7 +47,7 @@ LIBS_profile += -lprofilingS
 CCFLAGS_pfe += -D$(PFE_CFG_TARGET_ARCH_DEF) -D$(PFE_CFG_TARGET_OS_DEF) -D$(PFE_CFG_BUILD_PROFILE_DEF)
 
 #Generic compiler flags (which include build type flags)
-CCFLAGS_all += -Wall -fmessage-length=0
+CCFLAGS_all += -Wall -fmessage-length=0 -fvisibility=hidden
 CCFLAGS_all += $(CCFLAGS_$(BUILD_PROFILE))
 CCFLAGS_all += $(CCFLAGS_pfe)
 #Shared library has to be compiled with -fPIC
diff --git a/sw/pfe_hif_drv/public/pfe_hif_drv.h b/sw/pfe_hif_drv/public/pfe_hif_drv.h
index ca0f93c..991da99 100644
--- a/sw/pfe_hif_drv/public/pfe_hif_drv.h
+++ b/sw/pfe_hif_drv/public/pfe_hif_drv.h
@@ -102,7 +102,7 @@ enum
 	#define HIF_CFG_USE_DYNAMIC_TX_HEADERS
 #endif /* PFE_CFG_MULTI_INSTANCE_SUPPORT */
 #ifndef PFE_CFG_CSUM_ALL_FRAMES
-/*	Enable dynamic tx headers for individual CSUM 
+/*	Enable dynamic tx headers for individual CSUM
 	(on demand) calculation if it is not already enabled */
 	#ifndef HIF_CFG_USE_DYNAMIC_TX_HEADERS
 		#define HIF_CFG_USE_DYNAMIC_TX_HEADERS
@@ -118,7 +118,7 @@ enum
     #define HIF_CFG_DETACH_TX_CONFIRMATION_JOB		TRUE
 #else
     #define HIF_CFG_DETACH_TX_CONFIRMATION_JOB		FALSE
-#endif    
+#endif
 
 /**
  * @def	    HIF_CFG_IRQ_TRIGGERED_TX_CONFIRMATION
@@ -152,7 +152,7 @@ enum
 #endif
 
 /**
- * @brief	HIF common RX/TX packet flags 
+ * @brief	HIF common RX/TX packet flags
  */
 typedef	enum
 {
@@ -169,10 +169,10 @@ typedef struct
 	{
 		pfe_ct_hif_rx_flags_t rx_flags;
 		pfe_ct_hif_tx_flags_t tx_flags;
-	};
+	} specific;
 } pfe_hif_drv_flags_t;
 
-typedef struct sg_list_tag
+typedef struct
 {
 	uint32_t size;						/*	Number of valid 'items' entries */
 
@@ -180,7 +180,7 @@ typedef struct sg_list_tag
 	uint32_t total_bytes;				/*	Total data length (sum of items[0..size].len) in number of bytes */
 #endif /* PFE_CFG_HIF_TX_FIFO_FIX */
 
-	struct item
+	struct
 	{
 		void *data_pa;					/*	Pointer to buffer (PA) */
 		void *data_va;					/*	Pointer to buffer (VA) */
@@ -209,7 +209,7 @@ enum
 	HIF_EVENT_MAX
 };
 
-typedef struct pfe_pfe_hif_drv_client_tag pfe_hif_drv_client_t;
+typedef struct pfe_hif_drv_client_tag pfe_hif_drv_client_t;
 
 /**
  * @brief	Packet representation struct
@@ -236,60 +236,63 @@ typedef struct pfe_hif_drv_tag pfe_hif_drv_t;
 typedef struct pfe_hif_pkt_tag pfe_hif_pkt_t;
 typedef errno_t (* pfe_hif_drv_client_event_handler)(pfe_hif_drv_client_t *client, void *arg, uint32_t event, uint32_t qno);
 
-void hif_xmit_pkt__(pfe_hif_drv_t *hif, uint32_t client_id, uint32_t q_no, void *data, uint32_t len, uint32_t flags);
-errno_t hif_xmit_pkt(pfe_hif_drv_t *hif, uint32_t client_id, uint32_t q_no, void *data, uint32_t len);
 pfe_hif_drv_t *pfe_hif_drv_create(pfe_hif_chnl_t *channel);
 void pfe_hif_drv_destroy(pfe_hif_drv_t *hif_drv);
 errno_t pfe_hif_drv_init(pfe_hif_drv_t *hif_drv);
 errno_t pfe_hif_drv_start(pfe_hif_drv_t *hif_drv);
-void pfe_hif_drv_tick(pfe_hif_drv_t *hif_drv);
 void pfe_hif_drv_stop(pfe_hif_drv_t *hif_drv);
 void pfe_hif_drv_exit(pfe_hif_drv_t *hif_drv);
+
+#ifdef PFE_CFG_MC_HIF
 void pfe_hif_drv_show_ring_status(pfe_hif_drv_t *hif_drv, bool_t rx, bool_t tx);
+#endif /*PFE_CFG_MC_HIF*/
 
 /*	IHC API */
 #ifdef PFE_CFG_MULTI_INSTANCE_SUPPORT
 pfe_hif_drv_client_t * pfe_hif_drv_ihc_client_register(pfe_hif_drv_t *hif_drv, pfe_hif_drv_client_event_handler handler, void *priv);
 #ifdef PFE_CFG_TARGET_OS_LINUX
-errno_t pfe_hif_drv_client_xmit_ihc_sg_pkt(pfe_hif_drv_client_t *client, pfe_ct_phy_if_id_t dst, uint32_t queue, hif_drv_sg_list_t *sg_list, void *ref_ptr);
+errno_t pfe_hif_drv_client_xmit_ihc_pkt(pfe_hif_drv_client_t *client, pfe_ct_phy_if_id_t dst, uint32_t queue, void *idex_frame, uint32_t plen);
 #endif
 #endif /* PFE_CFG_MULTI_INSTANCE_SUPPORT */
 
 /*	AUX API */
+#ifdef PFE_CFG_MC_HIF
 pfe_hif_drv_client_t * pfe_hif_drv_aux_client_register(pfe_hif_drv_t *hif_drv, pfe_hif_drv_client_event_handler handler, void *priv);
+#endif /*PFE_CFG_MC_HIF*/
+
 
 /*	HIF client */
 pfe_hif_drv_client_t * pfe_hif_drv_client_register(pfe_hif_drv_t *hif_drv, pfe_ct_phy_if_id_t phy_if_id, uint32_t txq_num, uint32_t rxq_num,
 		uint32_t txq_depth, uint32_t rxq_depth, pfe_hif_drv_client_event_handler handler, void *priv);
 errno_t pfe_hif_drv_client_set_inject_if(pfe_hif_drv_client_t *client, pfe_ct_phy_if_id_t phy_if_id);
-pfe_hif_drv_t *pfe_hif_drv_client_get_drv(pfe_hif_drv_client_t *client);
-void *pfe_hif_drv_client_get_priv(pfe_hif_drv_client_t *client);
+pfe_hif_drv_t *pfe_hif_drv_client_get_drv(const pfe_hif_drv_client_t *client);
+void *pfe_hif_drv_client_get_priv(const pfe_hif_drv_client_t *client);
 void pfe_hif_drv_client_unregister(pfe_hif_drv_client_t *client);
-void pfe_hif_drv_client_rx_done(pfe_hif_drv_client_t *client);
-void pfe_hif_drv_client_tx_done(pfe_hif_drv_client_t *client);
+void pfe_hif_drv_client_rx_done(const pfe_hif_drv_client_t *client);
+void pfe_hif_drv_client_tx_done(const pfe_hif_drv_client_t *client);
 
 /*	Packet transmission */
 errno_t pfe_hif_drv_client_xmit_pkt(pfe_hif_drv_client_t *client, uint32_t queue, void *data_pa, void *data_va, uint32_t len, void *ref_ptr);
 errno_t pfe_hif_drv_client_xmit_sg_pkt(pfe_hif_drv_client_t *client, uint32_t queue, const hif_drv_sg_list_t *const sg_list, void *ref_ptr);
-void * pfe_hif_drv_client_receive_tx_conf(pfe_hif_drv_client_t *client, uint32_t queue);
+void * pfe_hif_drv_client_receive_tx_conf(const pfe_hif_drv_client_t *client, uint32_t queue);
 
 /*	Packet reception */
-bool_t pfe_hif_drv_client_has_rx_pkt(pfe_hif_drv_client_t *client, uint32_t queue);
+bool_t pfe_hif_drv_client_has_rx_pkt(const pfe_hif_drv_client_t *client, uint32_t queue);
 #if (TRUE == PFE_HIF_CHNL_CFG_RX_BUFFERS_ENABLED) || defined(PFE_CFG_TARGET_OS_LINUX)
 pfe_hif_pkt_t * pfe_hif_drv_client_receive_pkt(pfe_hif_drv_client_t *client, uint32_t queue);
-void pfe_hif_pkt_free(pfe_hif_pkt_t *pkt);
+void pfe_hif_pkt_free(const pfe_hif_pkt_t *pkt);
 #endif /* PFE_HIF_CHNL_CFG_RX_BUFFERS_ENABLED */
 
 /*	PTP Timestamps */
-errno_t pfe_hif_drv_client_get_ts(pfe_hif_drv_client_t *client, bool_t rx,
-		uint8_t type, uint16_t port, uint16_t seq_id, uint32_t *ts_sec, uint32_t *ts_nsec);
+errno_t pfe_hif_drv_client_get_ts(const pfe_hif_drv_client_t *client, bool_t rx,
+		uint8_t type, uint16_t port, uint16_t seq_id, const uint32_t *ts_sec, const uint32_t *ts_nsec);
 
 /**
  * @brief		Get information if packet is last in frame
  * @param[in]	pkt The packet
  * @return		TRUE if 'pkt' is last packet of a frame. False otherwise.
  */
-static inline bool_t pfe_hif_pkt_is_last(pfe_hif_pkt_t *pkt)
+static inline bool_t pfe_hif_pkt_is_last(const pfe_hif_pkt_t *pkt)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == pkt))
@@ -307,7 +310,7 @@ static inline bool_t pfe_hif_pkt_is_last(pfe_hif_pkt_t *pkt)
  * @param[in]	pkt The packet
  * @return		TRUE if IP checksum has been verified and is valid
  */
-static inline bool_t pfe_hif_pkt_ipv4_csum_valid(pfe_hif_pkt_t *pkt)
+static inline bool_t pfe_hif_pkt_ipv4_csum_valid(const pfe_hif_pkt_t *pkt)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == pkt))
@@ -317,7 +320,7 @@ static inline bool_t pfe_hif_pkt_ipv4_csum_valid(pfe_hif_pkt_t *pkt)
 	}
 #endif /* PFE_CFG_NULL_ARG_CHECK */
 
-	return !!(pkt->flags.rx_flags & HIF_RX_IPV4_CSUM);
+	return !!(pkt->flags.specific.rx_flags & HIF_RX_IPV4_CSUM);
 }
 
 /**
@@ -325,7 +328,7 @@ static inline bool_t pfe_hif_pkt_ipv4_csum_valid(pfe_hif_pkt_t *pkt)
  * @param[in]	pkt The packet
  * @return		TRUE if UDP checksum has been verified and is valid
  */
-static inline bool_t pfe_hif_pkt_udpv4_csum_valid(pfe_hif_pkt_t *pkt)
+static inline bool_t pfe_hif_pkt_udpv4_csum_valid(const pfe_hif_pkt_t *pkt)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == pkt))
@@ -335,14 +338,14 @@ static inline bool_t pfe_hif_pkt_udpv4_csum_valid(pfe_hif_pkt_t *pkt)
 	}
 #endif /* PFE_CFG_NULL_ARG_CHECK */
 
-	return !!(pkt->flags.rx_flags & HIF_RX_UDPV4_CSUM);
+	return !!(pkt->flags.specific.rx_flags & HIF_RX_UDPV4_CSUM);
 }
 /**
  * @brief		Get information that UDP checksum within ipv6 fragment has been verified by PFE
  * @param[in]	pkt The packet
  * @return		TRUE if UDP checksum has been verified and is valid
  */
-static inline bool_t pfe_hif_pkt_udpv6_csum_valid(pfe_hif_pkt_t *pkt)
+static inline bool_t pfe_hif_pkt_udpv6_csum_valid(const pfe_hif_pkt_t *pkt)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == pkt))
@@ -352,14 +355,14 @@ static inline bool_t pfe_hif_pkt_udpv6_csum_valid(pfe_hif_pkt_t *pkt)
 	}
 #endif /* PFE_CFG_NULL_ARG_CHECK */
 
-	return !!(pkt->flags.rx_flags & HIF_RX_UDPV6_CSUM);
+	return !!(pkt->flags.specific.rx_flags & HIF_RX_UDPV6_CSUM);
 }
 /**
  * @brief		Get information that TCP checksum has been verified by PFE
  * @param[in]	pkt The packet
  * @return		TRUE if TCP checksum withing ipv4 frame has been verified and is valid
  */
-static inline bool_t pfe_hif_pkt_tcpv4_csum_valid(pfe_hif_pkt_t *pkt)
+static inline bool_t pfe_hif_pkt_tcpv4_csum_valid(const pfe_hif_pkt_t *pkt)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == pkt))
@@ -369,14 +372,14 @@ static inline bool_t pfe_hif_pkt_tcpv4_csum_valid(pfe_hif_pkt_t *pkt)
 	}
 #endif /* PFE_CFG_NULL_ARG_CHECK */
 
-	return !!(pkt->flags.rx_flags & HIF_RX_TCPV4_CSUM);
+	return !!(pkt->flags.specific.rx_flags & HIF_RX_TCPV4_CSUM);
 }
 /**
  * @brief		Get information that TCP checksum has been verified by PFE
  * @param[in]	pkt The packet
  * @return		TRUE if TCP checksum has been verified and is valid
  */
-static inline bool_t pfe_hif_pkt_tcpv6_csum_valid(pfe_hif_pkt_t *pkt)
+static inline bool_t pfe_hif_pkt_tcpv6_csum_valid(const pfe_hif_pkt_t *pkt)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == pkt))
@@ -386,7 +389,7 @@ static inline bool_t pfe_hif_pkt_tcpv6_csum_valid(pfe_hif_pkt_t *pkt)
 	}
 #endif /* PFE_CFG_NULL_ARG_CHECK */
 
-	return !!(pkt->flags.rx_flags & HIF_RX_TCPV6_CSUM);
+	return !!(pkt->flags.specific.rx_flags & HIF_RX_TCPV6_CSUM);
 }
 
 /**
@@ -394,7 +397,7 @@ static inline bool_t pfe_hif_pkt_tcpv6_csum_valid(pfe_hif_pkt_t *pkt)
  * @param[in]	pkt The packet
  * @return		Pointer to packet data
  */
-static inline addr_t pfe_hif_pkt_get_data(pfe_hif_pkt_t *pkt)
+static inline addr_t pfe_hif_pkt_get_data(const pfe_hif_pkt_t *pkt)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == pkt))
@@ -412,7 +415,7 @@ static inline addr_t pfe_hif_pkt_get_data(pfe_hif_pkt_t *pkt)
  * @param[in]	pkt The packet
  * @return		Number of bytes in data buffer
  */
-static inline uint32_t pfe_hif_pkt_get_data_len(pfe_hif_pkt_t *pkt)
+static inline uint32_t pfe_hif_pkt_get_data_len(const pfe_hif_pkt_t *pkt)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == pkt))
@@ -449,7 +452,7 @@ static inline void *pfe_hif_pkt_get_ref_ptr(pfe_hif_pkt_t *pkt)
  * @param[in]	pkt The packet
  * @return		The HIF client instance
  */
-static inline pfe_hif_drv_client_t *pfe_hif_pkt_get_client(pfe_hif_pkt_t *pkt)
+static inline pfe_hif_drv_client_t *pfe_hif_pkt_get_client(const pfe_hif_pkt_t *pkt)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == pkt))
@@ -467,7 +470,7 @@ static inline pfe_hif_drv_client_t *pfe_hif_pkt_get_client(pfe_hif_pkt_t *pkt)
  * @param[in]	pkt The packet
  * @return		The physical interface ID
  */
-static inline pfe_ct_phy_if_id_t pfe_hif_pkt_get_ingress_phy_id(pfe_hif_pkt_t *pkt)
+static inline pfe_ct_phy_if_id_t pfe_hif_pkt_get_ingress_phy_id(const pfe_hif_pkt_t *pkt)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == pkt))
diff --git a/sw/pfe_hif_drv/public/pfe_hif_ptp.h b/sw/pfe_hif_drv/public/pfe_hif_ptp.h
index 7be2300..775007b 100644
--- a/sw/pfe_hif_drv/public/pfe_hif_ptp.h
+++ b/sw/pfe_hif_drv/public/pfe_hif_ptp.h
@@ -1,7 +1,7 @@
 /* =========================================================================
  *  
  *  Copyright (c) 2019 Imagination Technologies Limited
- *  Copyright 2020 NXP
+ *  Copyright 2020-2021 NXP
  *
  *  SPDX-License-Identifier: GPL-2.0
  *
@@ -17,6 +17,7 @@ typedef struct
 	oal_mutex_t *lock;
 	LLIST_t entries;
 	oal_thread_t *worker;
+	oal_mbox_t *mbox;
 	uint8_t count;
 	bool_t reported;
 } pfe_hif_ptp_ts_db_t;
diff --git a/sw/pfe_hif_drv/src/pfe_hif_drv_linux.c b/sw/pfe_hif_drv/src/pfe_hif_drv_linux.c
index c8bda25..403c46f 100644
--- a/sw/pfe_hif_drv/src/pfe_hif_drv_linux.c
+++ b/sw/pfe_hif_drv/src/pfe_hif_drv_linux.c
@@ -17,8 +17,6 @@
  * 				dispatching, no TX resource locking, no internal detached jobs).
  */
 
-#include <string.h>
-
 #include "pfe_cfg.h"
 #include "oal.h"
 #include "hal.h"
@@ -27,340 +25,102 @@
 #include "pfe_hif_drv.h"
 #include "pfe_platform_cfg.h"
 
-#include <linux/skbuff.h>
+#include "pfeng.h"
 
-typedef struct pfe_hif_pkt_tag pfe_hif_tx_meta_t;
-typedef struct pfe_hif_pkt_tag pfe_hif_rx_meta_t;
-
-/**
- * @brief	The HIF driver client instance structure - single client
- */
-struct __attribute__((aligned(HAL_CACHE_LINE_SIZE), packed)) pfe_pfe_hif_drv_client_tag
-{
-	pfe_ct_phy_if_id_t phy_if_id;
-	pfe_hif_drv_client_event_handler event_handler;
-	void *priv;
-	pfe_hif_drv_t *hif_drv;
-	bool_t active;
-
-	struct {
-		fifo_t *rx_fifo;	/* This is the client's RX ring */
-		uint32_t size;
-	} ihc;
-
-};
-
-/**
- * @brief	The HIF driver instance structure
- */
-struct __attribute__((aligned(HAL_CACHE_LINE_SIZE), packed)) pfe_hif_drv_tag
-{
-/*	Common */
-	pfe_hif_chnl_t *channel;
-
-/*	HIF RX processing */
-	bool_t started;
-	bool_t rx_enabled;
-
-/*	TX and TX confirmation processing */
-	pfe_hif_tx_meta_t *tx_meta;
-	uint32_t tx_meta_rd_idx;
-	uint32_t tx_meta_wr_idx;
-	pfe_ct_phy_if_id_t i_phy_if;
-	bool_t tx_enabled;
+#include <linux/skbuff.h>
 
-/*	Single client per instance only */
-	pfe_hif_drv_client_t client __attribute__((aligned(HAL_CACHE_LINE_SIZE)));
+/* We need pfe_hif_drv API compatibility only for IHC/IDEX */
 
-/*	Special client to be used for HIF-to-HIF communication */
-	pfe_hif_drv_client_t ihc_client;
-	volatile bool_t initialized;	/*	If TRUE the HIF has been properly initialized */
 #ifdef PFE_CFG_MULTI_INSTANCE_SUPPORT
-	oal_mutex_t tx_lock __attribute__((aligned(HAL_CACHE_LINE_SIZE)));	/*	TX resources protection object */
-#endif
-};
-
-/*	Channel management */
-static errno_t pfe_hif_drv_create_data_channel(pfe_hif_drv_t *hif_drv);
-static void pfe_hif_drv_destroy_data_channel(pfe_hif_drv_t *hif_drv);
-
-/**
- * @brief		HIF channel RX ISR
- * @details		Will be called by HIF channel instance when RX event has occurred
- * @note		To see which context the ISR is running in please see the
- * 				pfe_hif_chnl module implementation.
- */
-static void pfe_hif_drv_chnl_rx_isr(void *arg)
-{
-	pfe_hif_drv_t *hif_drv = (pfe_hif_drv_t *)arg;
-
-	/*	Call directly the client's event handler */
-	(void)hif_drv->client.event_handler(&hif_drv->client, hif_drv->client.priv, EVENT_RX_PKT_IND, 0U);
-}
-
-/**
- * @brief	Indicate end of reception
- * @details	Re-enable interrupts, trigger DMA, ...
- */
-void pfe_hif_drv_client_rx_done(pfe_hif_drv_client_t *client)
-{
-	/*	Enable RX interrupt */
-	pfe_hif_chnl_rx_irq_unmask(client->hif_drv->channel);
 
-	/*	Trigger the RX DMA */
-	pfe_hif_chnl_rx_dma_start(client->hif_drv->channel);
-}
+typedef struct pfe_hif_pkt_tag pfe_hif_tx_meta_t;
+typedef struct pfe_hif_pkt_tag pfe_hif_rx_meta_t;
 
-/**
- * @brief	Indicate end of TX confirmation
- * @details	Re-enable interrupts, trigger DMA, ...
- */
-void pfe_hif_drv_client_tx_done(pfe_hif_drv_client_t *client)
-{
-	/*	NOOP */
-}
+/* structs pfe_hif_drv_tag and pfe_hif_drv_client_tag are declared in pfeng.h */
 
-static errno_t pfe_hif_drv_create_data_channel(pfe_hif_drv_t *hif_drv)
+void pfe_hif_drv_client_unregister(pfe_hif_drv_client_t *client)
 {
-	errno_t ret = EOK;
+	struct pfeng_hif_chnl *chnl = container_of(client, struct pfeng_hif_chnl, ihc_client);
 
-#ifdef PFE_CFG_NULL_ARG_CHECK
-	if (unlikely(NULL == hif_drv))
-	{
-		NXP_LOG_ERROR("NULL argument received\n");
-		return EINVAL;
-	}
-#endif /* PFE_CFG_NULL_ARG_CHECK */
-
-	/*	Allocate the TX metadata storage and initialize indexes */
-	hif_drv->tx_meta = oal_mm_malloc(sizeof(pfe_hif_tx_meta_t) * pfe_hif_chnl_get_tx_fifo_depth(hif_drv->channel));
-	if (NULL == hif_drv->tx_meta)
-	{
-		NXP_LOG_ERROR("oal_mm_malloc() failed\n");
-		ret = ENOMEM;
-		goto destroy_and_fail;
-	}
-
-	memset(hif_drv->tx_meta, 0, sizeof(pfe_hif_tx_meta_t) * pfe_hif_chnl_get_tx_fifo_depth(hif_drv->channel));
-	hif_drv->tx_meta_rd_idx = 0U;
-	hif_drv->tx_meta_wr_idx = 0U;
-
-	/*	Allocate HIF TX headers. Allocate smaller chunks to reduce memory segmentation. */
-	{
-		uint32_t ii;
-
-		for (ii=0U; ii<pfe_hif_chnl_get_tx_fifo_depth(hif_drv->channel); ii++)
-		{
-			hif_drv->tx_meta[ii].hif_tx_header = oal_mm_malloc_contig_named_aligned_nocache(PFE_CFG_BD_MEM, sizeof(pfe_ct_hif_tx_hdr_t), 8U);
-			if (NULL == hif_drv->tx_meta[ii].hif_tx_header)
-			{
-				NXP_LOG_ERROR("Memory allocation failed");
-				ret = ENOMEM;
-				goto destroy_and_fail;
-			}
-
-			hif_drv->tx_meta[ii].hif_tx_header_pa = oal_mm_virt_to_phys_contig((void *)hif_drv->tx_meta[ii].hif_tx_header);
-			if (NULL == hif_drv->tx_meta[ii].hif_tx_header_pa)
-			{
-				NXP_LOG_ERROR("VA-PA conversion failed\n");
-				ret = EIO;
-				goto destroy_and_fail;
-			}
+	/*	Release IHC fifo */
+	if (client->ihc_rx_fifo) {
+		u32 fill_level;
+		errno_t err = fifo_get_fill_level(client->ihc_rx_fifo, &fill_level);
 
-			/*	Initialize channel ID */
-			hif_drv->tx_meta[ii].hif_tx_header->chid = pfe_hif_chnl_get_id(hif_drv->channel);
+		if (unlikely(EOK != err)) {
+			dev_info(chnl->dev, "Unable to get IHC fifo fill level: %d\n", err);
+		} else if (fill_level) {
+			dev_info(chnl->dev, "IHC Queue is not empty\n");
 		}
-	}
-
-	return EOK;
 
-destroy_and_fail:
-	pfe_hif_drv_destroy_data_channel(hif_drv);
-
-	return ret;
-}
-
-/**
- * @brief	Destroy HIF channel and release allocated resources
- * @details	Will also release all RX buffers associated with RX ring and confirm
- * 			all pending TX frames from the TX ring.
- */
-static void pfe_hif_drv_destroy_data_channel(pfe_hif_drv_t *hif_drv)
-{
-#ifdef PFE_CFG_NULL_ARG_CHECK
-	if (unlikely(NULL == hif_drv))
-	{
-		NXP_LOG_ERROR("NULL argument received\n");
-		return;
+		fifo_destroy(client->ihc_rx_fifo);
+		client->ihc_rx_fifo = NULL;
 	}
-#endif /* PFE_CFG_NULL_ARG_CHECK */
 
-	/*	Disable and invalidate RX and TX */
-	pfe_hif_chnl_rx_disable(hif_drv->channel);
-	pfe_hif_chnl_tx_disable(hif_drv->channel);
+	if (client->ihc_txconf_fifo) {
+		u32 fill_level;
+		errno_t err = fifo_get_fill_level(client->ihc_txconf_fifo, &fill_level);
 
-	{
-		uint32_t ii;
-
-		/*	Release dynamic HIF TX headers */
-		for (ii=0U; ii<pfe_hif_chnl_get_tx_fifo_depth(hif_drv->channel); ii++)
-		{
-			if (NULL != hif_drv->tx_meta[ii].hif_tx_header)
-			{
-				oal_mm_free_contig(hif_drv->tx_meta[ii].hif_tx_header);
-				hif_drv->tx_meta[ii].hif_tx_header = NULL;
-			}
+		if (unlikely(EOK != err)) {
+			dev_info(chnl->dev, "Unable to get IHC tx conf fifo fill level: %d\n", err);
+		} else if (fill_level) {
+			dev_info(chnl->dev, "IHC Tx conf Queue is not empty\n");
 		}
-	}
 
-	/*	Release the TX metadata storage */
-	if (NULL != hif_drv->tx_meta)
-	{
-		oal_mm_free(hif_drv->tx_meta);
-		hif_drv->tx_meta = NULL;
+		fifo_destroy(client->ihc_txconf_fifo);
+		client->ihc_txconf_fifo = NULL;
 	}
 
-	return;
+	/*	Cleanup memory */
+	memset(client, 0, sizeof(pfe_hif_drv_client_t));
+
+	dev_info(chnl->dev, "IHC client unregistered\n");
 }
 
-/**
- * @brief		This function is used to register a client driver with the HIF driver.
- * @details		Routine creates new HIF driver client, associates it with given logical interface
- * 				and adjusts internal HIF dispatching table to properly route ingress packets to
- * 				client's queues. HIF driver remains suspended after the call and pfe_hif_drv_start()
- * 				is required to re-enable the operation.
- * @param[in]	hif_drv The HIF driver instance the client shall be associated with
- * @param[in]	phy_if_id Physical interface ID to be handled by the client
- * @param[in]	txq_num Number of client's TX queues
- * @param[in]	rxq_num Number of client's RX queues
- * @param[in]	txq_depth Depth of each TX queue
- * @param[in]	rxq_depth Depth of each RX queue
- * @param[in]	handler Pointer to function to be called to indicate events (data available, ...).
- * 						Mandatory. Can be called from various contexts.
- * @param[in]	priv Private data to be stored within the client instance
- *
- * @return 		Client instance or NULL if failed
- */
-pfe_hif_drv_client_t * pfe_hif_drv_client_register(pfe_hif_drv_t *hif_drv, pfe_ct_phy_if_id_t phy_if_id, uint32_t txq_num, uint32_t rxq_num,
-								uint32_t txq_depth, uint32_t rxq_depth, pfe_hif_drv_client_event_handler handler, void *priv)
+pfe_hif_drv_client_t * pfe_hif_drv_ihc_client_register(pfe_hif_drv_t *hif_drv, pfe_hif_drv_client_event_handler handler, void *priv)
 {
-	pfe_hif_drv_client_t *client = NULL;
-
-#ifdef PFE_CFG_NULL_ARG_CHECK
-	if (unlikely((NULL == hif_drv) || (NULL == log_if)))
-	{
-		NXP_LOG_ERROR("NULL argument received\n");
-		return NULL;
-	}
-#endif /* PFE_CFG_NULL_ARG_CHECK */
-
-	NXP_LOG_INFO("Attempt to register HIF client: %d\n", phy_if_id);
 
-	if (NULL == handler)
-	{
-		NXP_LOG_ERROR("Event handler is mandatory\n");
-		goto unlock_and_fail;
-	}
+	struct pfeng_hif_chnl *chnl = container_of(hif_drv, struct pfeng_hif_chnl, hif_drv);
+	pfe_hif_drv_client_t *client = &chnl->ihc_client;
+	int ret;
 
-	/*	Only single client is allowed in this mode */
-	client = &hif_drv->client;
-	if (FALSE != client->active)
-	{
-		NXP_LOG_ERROR("SC HIF driver variant allows only single client\n");
-		goto unlock_and_fail;
+	if (client->hif_drv) {
+		dev_err(chnl->dev, "IHC client already registered\n");
+		return NULL;
 	}
 
-	/*	Initialize the instance */
+	/* Initialize the instance */
 	memset(client, 0, sizeof(pfe_hif_drv_client_t));
-	client->active = FALSE;
-	client->hif_drv = hif_drv;
-	client->phy_if_id = phy_if_id;
-
-	client->event_handler = handler;
-	client->priv = priv;
-
-	/*	Suspend HIF driver to get exclusive access to client table */
-	pfe_hif_drv_stop(hif_drv);
-
-	/*	Activate the client */
-	client->active = TRUE;
-	return client;
-
-unlock_and_fail:
-	/*	Release the client instance */
-	pfe_hif_drv_client_unregister(client);
-
-	return NULL;
-}
-
-/**
- * @brief		Get hif_drv instance associated with the client
- * @param[in]	client Client instance
- * @return		Pointer to the HIF DRV instance
- */
-pfe_hif_drv_t *pfe_hif_drv_client_get_drv(pfe_hif_drv_client_t *client)
-{
-#ifdef PFE_CFG_NULL_ARG_CHECK
-	if (unlikely(NULL == client))
-	{
-		NXP_LOG_ERROR("NULL argument received\n");
+	client->ihc_rx_fifo = fifo_create(32);
+	if (!client->ihc_rx_fifo) {
+		dev_err(chnl->dev, "Can't create IHC RX fifo. Err %d\n", ret);
 		return NULL;
 	}
-#endif /* PFE_CFG_NULL_ARG_CHECK */
-
-	return client->hif_drv;
-}
-
-/**
- * @brief		Get private pointer provided in registration
- * @param[in]	client Client instance
- * @return		Private pointer value
- */
-void *pfe_hif_drv_client_get_priv(pfe_hif_drv_client_t *client)
-{
-#ifdef PFE_CFG_NULL_ARG_CHECK
-	if (unlikely(NULL == client))
-	{
-		NXP_LOG_ERROR("NULL argument received\n");
+	client->ihc_txconf_fifo = fifo_create(32);
+	if (!client->ihc_txconf_fifo) {
+		dev_err(chnl->dev, "Can't create IHC TXconf fifo. Err %d\n", ret);
 		return NULL;
 	}
-#endif /* PFE_CFG_NULL_ARG_CHECK */
+	client->hif_drv = hif_drv;
+	client->priv = priv;
+	client->event_handler = handler;
+	client->inited = true;
 
-	return client->priv;
+	dev_info(chnl->dev, "IHC client registered\n");
+	return client;
 }
 
 /**
- * @brief		Unregister client from the HIF driver
- * @param[in]	client Client instance
+ * @brief		Release packet
+ * @param[in]	pkt The packet instance
  */
-void pfe_hif_drv_client_unregister(pfe_hif_drv_client_t *client)
+void pfe_hif_pkt_free(const pfe_hif_pkt_t *pkt)
 {
-	if (NULL != client)
-	{
-		/*	Suspend HIF driver to get exclusive access to client table */
-		pfe_hif_drv_stop(client->hif_drv);
-
-		/*	Unregister from HIF. After this the HIF RX dispatcher will not fill client's RX queues. */
-		client->active = FALSE;
-
-		NXP_LOG_INFO("HIF client %d removed\n", client->phy_if_id);
-
-		/*	Cleanup memory */
-		memset(client, 0, sizeof(pfe_hif_drv_client_t));
-	}
+	if (pkt->ref_ptr)
+		kfree_skb(pkt->ref_ptr);
+	oal_mm_free(pkt);
 }
 
-/*
- * The code adds support for IHC communication to the original SC driver.
- *
- * The following API calls has to be implemented:
- *
- *		pfe_hif_drv_ihc_client_register()
- *		pfe_hif_drv_ihc_client_unregister()
- *		pfe_hif_drv_client_receive_pkt()
- *
- */
-
 /**
  * @brief		Get packet from RX queue for IHC data
  * @param[in]	client IHC Client instance
@@ -372,41 +132,49 @@ void pfe_hif_drv_client_unregister(pfe_hif_drv_client_t *client)
  */
 pfe_hif_pkt_t * pfe_hif_drv_client_receive_pkt(pfe_hif_drv_client_t *client, uint32_t queue)
 {
-#if defined(PFE_CFG_NULL_ARG_CHECK)
-	if (unlikely(NULL == client))
-	{
-		NXP_LOG_ERROR("NULL argument received\n");
-		return NULL;
-	}
-#endif /* PFE_CFG_NULL_ARG_CHECK */
+	struct pfeng_hif_chnl *chnl = container_of(client, struct pfeng_hif_chnl, ihc_client);
 
-	if (&client->hif_drv->ihc_client != client)
+	if (&chnl->ihc_client != client)
 	{
 		/* Only IHC client supported */
-		NXP_LOG_ERROR("Only HIF IHC client supported\n");
+		dev_err(chnl->dev, "Only HIF IHC client supported\n");
 		return NULL;
 	}
 
-	/*	No resource protection here */
-	return fifo_get(client->ihc.rx_fifo);
+	/* No resource protection here */
+	return fifo_get(client->ihc_rx_fifo);
 }
 
-errno_t pfe_hif_drv_ihc_do_cbk(pfe_hif_drv_t *hif_drv)
+errno_t pfe_hif_drv_ihc_put_conf(pfe_hif_drv_client_t *client)
 {
-	pfe_hif_drv_client_t *client = &hif_drv->ihc_client;
+	struct pfeng_hif_chnl *chnl = container_of(client, struct pfeng_hif_chnl, ihc_client);
+	struct sk_buff *skb = pfeng_hif_chnl_txconf_get_skbuf(chnl);
+	void *idex_frame;
+
+	if (unlikely(!skb))
+		return EINVAL;
 
-	return client->event_handler(client, client->priv, EVENT_RX_PKT_IND, 0);
+	/* Convert skb to IDEX frame */
+	idex_frame = oal_mm_malloc_contig_aligned_nocache(skb_headlen(skb), 0U);
+	if (likely(idex_frame)) {
+		memcpy(idex_frame, skb->data, skb_headlen(skb));
+
+		if (unlikely(EOK != fifo_put(client->ihc_txconf_fifo, idex_frame))) {
+			dev_err(chnl->dev, "IHC TX fifo full\n");
+			oal_mm_free_contig(idex_frame);
+			return EINVAL;
+		}
+	} else
+		return ENOMEM;
+
+	return EOK;
 }
 
-errno_t pfe_hif_drv_ihc_put_pkt(pfe_hif_drv_t *hif_drv, void *data, uint32_t len, void *ref)
+errno_t pfe_hif_drv_ihc_put_pkt(pfe_hif_drv_client_t *client, void *data, uint32_t len, void *ref)
 {
-	
-	pfe_hif_drv_client_t *client = &hif_drv->ihc_client;
-	pfe_ct_hif_rx_hdr_t *hif_hdr = (pfe_ct_hif_rx_hdr_t *)data;
+	struct pfeng_hif_chnl *chnl = container_of(client, struct pfeng_hif_chnl, ihc_client);
 	pfe_hif_rx_meta_t *rx_metadata;
-
-	if (NULL == hif_drv)
-		return EINVAL;
+	pfe_ct_hif_rx_hdr_t *hif_hdr = (pfe_ct_hif_rx_hdr_t *)data;
 
 	/*	Create the RX metadata */
 	rx_metadata = (pfe_hif_rx_meta_t *)oal_mm_malloc(sizeof(pfe_hif_rx_meta_t));
@@ -418,13 +186,12 @@ errno_t pfe_hif_drv_ihc_put_pkt(pfe_hif_drv_t *hif_drv, void *data, uint32_t len
 	rx_metadata->data = (addr_t)data;
 	rx_metadata->len = len;
 
-	rx_metadata->flags.rx_flags = hif_hdr->flags;
+	rx_metadata->flags.specific.rx_flags = hif_hdr->flags;
 	rx_metadata->i_phy_if = hif_hdr->i_phy_if;
 	rx_metadata->ref_ptr = ref;
 
-	if (unlikely(EOK != fifo_put(client->ihc.rx_fifo, rx_metadata)))
-	{
-		NXP_LOG_ERROR("IHC RX fifo full\n");
+	if (unlikely(EOK != fifo_put(client->ihc_rx_fifo, rx_metadata))) {
+		dev_err(chnl->dev, "IHC RX fifo full\n");
 		/*	Drop the frame. Resource protection is embedded. */
 		pfe_hif_pkt_free(rx_metadata);
 		return EINVAL;
@@ -433,105 +200,6 @@ errno_t pfe_hif_drv_ihc_put_pkt(pfe_hif_drv_t *hif_drv, void *data, uint32_t len
 	return EOK;
 }
 
-/**
- * @brief		Unregister IHC client and release all associated resources
- * @param[in]	client Client instance
- * @warning		Can only be called on HIF driver is stopped.
- */
-void pfe_hif_drv_ihc_client_unregister(pfe_hif_drv_client_t *client)
-{
-	if (NULL != client)
-	{
-		/*	Release IHC fifo */
-		if (client->ihc.rx_fifo)
-		{
-			uint32_t fill_level;
-			errno_t err = fifo_get_fill_level(client->ihc.rx_fifo, &fill_level);
-
-			if (unlikely(EOK != err))
-			{
-				NXP_LOG_ERROR("Unable to get IHC fifo fill level: %d\n", err);
-			}
-			else if (fill_level != 0U)
-			{
-				NXP_LOG_WARNING("IHC Queue is not empty\n");
-			}
-
-			fifo_destroy(client->ihc.rx_fifo);
-			client->ihc.rx_fifo = NULL;
-		}
-
-		/*	Cleanup memory */
-		memset(client, 0, sizeof(pfe_hif_drv_client_t));
-
-		NXP_LOG_INFO("HIF IHC client removed\n");
-	}
-}
-
-pfe_hif_drv_client_t * pfe_hif_drv_ihc_client_register(pfe_hif_drv_t *hif_drv, pfe_hif_drv_client_event_handler handler, void *priv)
-{
-	pfe_hif_drv_client_t *client;
-
-	if (NULL == handler)
-	{
-		NXP_LOG_ERROR("Event handler is mandatory\n");
-		return NULL;
-	}
-
-	/*	Initialize the instance */
-	client = &hif_drv->ihc_client;
-
-	if (FALSE != client->active)
-	{
-		NXP_LOG_ERROR("IHC client already registered\n");
-		goto free_and_fail;
-	}
-
-	memset(client, 0, sizeof(pfe_hif_drv_client_t));
-
-	client->ihc.rx_fifo = fifo_create(32);
-	if (NULL == client->ihc.rx_fifo)
-	{
-		NXP_LOG_ERROR("Can't create IHC RX fifo\n");
-		goto free_and_fail;
-	}
-
-	client->hif_drv = hif_drv;
-	client->event_handler = handler;
-	/* Use hif_drv's client priv if priv == NULL */
-	client->priv = priv ? : hif_drv->client.priv;
-
-	return client;
-
-free_and_fail:
-	pfe_hif_drv_ihc_client_unregister(client);
-	return NULL;
-}
-
-/**
- * @brief		Check if there is another Rx packet in queue
- * @param[in]	client Client instance
- * @param[in]	queue RX queue number
- * @retval		TRUE There is at least one Rx packet in Rx queue
- * @retval		FALSE There is no Rx packet in Rx queue
- *
- * @warning		Intended to be called from a single client context only, i.e.
- * 				from a single thread per client.
- */
-bool_t pfe_hif_drv_client_has_rx_pkt(pfe_hif_drv_client_t *client, uint32_t queue)
-{
-#ifdef PFE_CFG_NULL_ARG_CHECK
-	if (unlikely(NULL == client) || unlikely(NULL == client->hif_drv))
-	{
-		NXP_LOG_ERROR("NULL argument received\n");
-		return FALSE;
-	}
-#endif /* PFE_CFG_NULL_ARG_CHECK */
-
-	/*	Implement check when needed */
-	return TRUE;
-}
-
 /**
  * @brief		Get TX confirmation
  * @param[in]	client Client instance
@@ -541,575 +209,20 @@ bool_t pfe_hif_drv_client_has_rx_pkt(pfe_hif_drv_client_t *client, uint32_t queu
  * @note		Only a single thread can call this function for given client+queue
  * 				combination.
  */
-void * pfe_hif_drv_client_receive_tx_conf(pfe_hif_drv_client_t *client, uint32_t queue)
-{
-	pfe_hif_tx_meta_t *tx_metadata;
-	pfe_hif_drv_t *hif_drv;
-
-#ifdef PFE_CFG_NULL_ARG_CHECK
-	if (unlikely(NULL == client))
-	{
-		NXP_LOG_ERROR("NULL argument received\n");
-		return NULL;
-	}
-#endif /* PFE_CFG_NULL_ARG_CHECK */
-
-	hif_drv = client->hif_drv;
-
-	/*	Get confirmation directly from channel. This is actually only check whether
-		some next frame has been transmitted. */
-	if (EOK != pfe_hif_chnl_get_tx_conf(hif_drv->channel))
-	{
-		/*	No more entries to dequeue */
-		return NULL;
-	}
-	else
-	{
-		/*	Get metadata associated with the transmitted frame */
-		tx_metadata = &hif_drv->tx_meta[hif_drv->tx_meta_rd_idx & (PFE_HIF_RING_CFG_LENGTH-1U)];
-
-		/*	Move to next entry */
-		hif_drv->tx_meta_rd_idx++;
-
-		/*	Return the reference data */
-		return tx_metadata->ref_ptr;
-	}
-}
-
-/**
- * @brief		Set physical interface for TX traffic injection
- * @details		Set physical interface to be used when driver will attempt to transmit
- * 				a packet in "inject" mode.
- * @param[in]	client Client instance
- * @param[in]	phy_if_id The physical interface ID
- * @return		EOK if success, error code otherwise
- */
-errno_t pfe_hif_drv_client_set_inject_if(pfe_hif_drv_client_t *client, pfe_ct_phy_if_id_t phy_if_id)
+void *pfe_hif_drv_client_receive_tx_conf(const pfe_hif_drv_client_t *client, uint32_t queue)
 {
-	if (phy_if_id >= PFE_PHY_IF_ID_INVALID)
-	{
-		return EINVAL;
-	}
-
-	/*	Set new physical interface */
-	client->phy_if_id = phy_if_id;
-
-	/*	NOOP: Dynamic header will be updated with every "xmit" call */
-
-	return EOK;
-}
-
-/**
- * @brief		Transmit packet given as a SG list of buffers
- * @param[in]	client Client instance
- * @param[in]	queue TX queue number
- * @param[in]	sg_list Pointer to the SG list
- * @param[in]	ref_ptr Reference pointer to be provided within TX confirmation.
- * @return		EOK if success, error code otherwise.
- */
-errno_t pfe_hif_drv_client_xmit_sg_pkt(pfe_hif_drv_client_t *client, uint32_t queue, const hif_drv_sg_list_t *const sg_list, void *ref_ptr)
-{
-	errno_t err;
-	uint32_t ii;
-	pfe_hif_tx_meta_t *tx_metadata;
-	pfe_hif_drv_t *hif_drv;
-	pfe_ct_hif_tx_hdr_t *tx_hdr, *tx_hdr_pa;
-
-#ifdef PFE_CFG_NULL_ARG_CHECK
-	if (unlikely((NULL == client) || (NULL == sg_list)))
-	{
-		NXP_LOG_ERROR("NULL argument received\n");
-		return EINVAL;
-	}
-#endif /* PFE_CFG_NULL_ARG_CHECK */
-
-	/*	Get HIF driver instance from client */
-	hif_drv = client->hif_drv;
-
-#ifdef PFE_CFG_MULTI_INSTANCE_SUPPORT
-	err = oal_mutex_lock(&hif_drv->tx_lock);
-	if (EOK != err)
-	{
-		NXP_LOG_ERROR("Couldn't lock mutex (tx_lock): %d\n", err);
-		goto end;
-	}
-#endif
-
-	if (unlikely(FALSE == hif_drv->tx_enabled))
-	{
-		err = EPERM;
-		goto end;
-	}
-
-	/*
-		Check if we have enough TX resources. We need one for each SG entry plus
-	 	one for HIF header.
-	*/
-	if (unlikely(FALSE == pfe_hif_chnl_can_accept_tx_num(hif_drv->channel, (sg_list->size + 1U))))
-	{
-		/*	Channel can't accept buffers (TX ring full?). Try to schedule
-		 	TX maintenance to process potentially transmitted packets and
-		 	make some space in TX ring. */
-		pfe_hif_chnl_tx_dma_start(hif_drv->channel);
-
-		err = ENOSPC;
-		goto end;
-	}
-
-#ifdef PFE_CFG_HIF_TX_FIFO_FIX
-	if (unlikely(FALSE == pfe_hif_chnl_can_accept_tx_data(hif_drv->channel, (sg_list->total_bytes + sizeof(pfe_ct_hif_tx_hdr_t)))))
-	{
-		err = ENOSPC;
-		goto end;
-	}
-#endif /* PFE_CFG_HIF_TX_FIFO_FIX */
-
-	/*
-		HIF driver must keep local copy of the HW TX ring to gain access
-		to virtual buffer addresses in case when data is being
-		acknowledged to a client. For this purpose the SW descriptors
-		are being used.
-	*/
-
-	/*	Get metadata storage */
-	tx_metadata = &hif_drv->tx_meta[hif_drv->tx_meta_wr_idx & (PFE_HIF_RING_CFG_LENGTH-1U)];
-
-	/*	Use dynamic TX header */
-	tx_hdr = tx_metadata->hif_tx_header;
-	tx_hdr_pa = tx_metadata->hif_tx_header_pa;
-
-	/*	Update the header */
-#ifdef PFE_CFG_HIF_PRIO_CTRL
-	/*	Firmware will assign queue/priority */
-	tx_hdr->queue = 255U;
-#else
-	tx_hdr->queue = queue;
-#endif /* PFE_CFG_HIF_PRIO_CTRL */
-
-	tx_hdr->flags = sg_list->flags.tx_flags;
-
-	tx_hdr->refnum = sg_list->est_ref_num;
-
-	/* 	Preprocess IHC message */
-	if (&client->hif_drv->ihc_client == client)
-	{
-		tx_hdr->flags |= HIF_TX_IHC | HIF_TX_INJECT;
-		tx_hdr->e_phy_ifs = oal_htonl(1U << sg_list->dst_phy);
-	}
-	else
-	{
-#ifdef PFE_CFG_ROUTE_HIF_TRAFFIC
-		/*	Tag the frame with ID of target physical interface */
-		tx_hdr->cookie = oal_htonl(client->phy_if_id);
-#else
-		tx_hdr->flags |= HIF_TX_INJECT;
-		tx_hdr->e_phy_ifs = oal_htonl(1U << client->phy_if_id);
-#endif /* PFE_CFG_ROUTE_HIF_TRAFFIC */
-	}
-
-	/*	Enqueue the HIF packet header */
-	err = pfe_hif_chnl_tx(	hif_drv->channel,
-							(void *)tx_hdr_pa,
-							(void *)tx_hdr,
-							sizeof(pfe_ct_hif_tx_hdr_t),
-							FALSE);
-
-	if (unlikely(EOK != err))
-	{
-		/*	Channel did not accept the buffer */
-		NXP_LOG_ERROR("Channel did not accept buffer: %d\n", err);
-		err = ECANCELED;
-		goto end;
-	}
-
-	/*	Store the frame metadata */
-	/* tx_metadata->q_no = queue; */
-	tx_metadata->ref_ptr = ref_ptr;
-
-	/*	Move to next entry */
-	hif_drv->tx_meta_wr_idx++;
+	struct pfeng_hif_chnl *chnl = container_of(client, struct pfeng_hif_chnl, ihc_client);
 
-	/*	Transmit particular packet buffers */
-	for (ii=0U; ii<sg_list->size; ii++)
+	if (&chnl->ihc_client != client)
 	{
-		/*	Transmit the buffer */
-		err = pfe_hif_chnl_tx(	client->hif_drv->channel,
-								sg_list->items[ii].data_pa,
-								sg_list->items[ii].data_va,
-								sg_list->items[ii].len,
-								((ii+1) >= sg_list->size));
-
-		if (unlikely(EOK != err))
-		{
-			/*	TODO: We need somehow reset the TX BD Ring because HIF header has already been enqueued. */
-			NXP_LOG_ERROR("Fatal error, TX channel will get stuck...\n");
-
-			/*	Undo move to next entry */
-			hif_drv->tx_meta_wr_idx--;
-			err = ECANCELED;
-			goto end;
-		}
-	}
-
-end:
-#ifdef PFE_CFG_MULTI_INSTANCE_SUPPORT
-	if (EOK != oal_mutex_unlock(&hif_drv->tx_lock))
-	{
-		NXP_LOG_ERROR("Couldn't unlock mutex (tx_lock)\n");
-	}
-#endif
-
-	return err;
-}
-
-/**
- * @brief		Transmit a single-buffer packet
- * @param[in]	client Client instance
- * @param[in]	queue TX queue number
- * @param[in]	data_pa Physical address of buffer to be sent
- * @param[in]	data_va Virtual address of buffer to be sent
- * @param[in]	len Length of the buffer
- * @param[in]	ref_ptr Reference pointer to be provided within TX confirmation.
- * @return		EOK if success, error code otherwise.
- */
-errno_t pfe_hif_drv_client_xmit_pkt(pfe_hif_drv_client_t *client, uint32_t queue, void *data_pa, void *data_va, uint32_t len, void *ref_ptr)
-{
-	hif_drv_sg_list_t sg_list;
-
-	sg_list.size = 1;
-
-#ifdef PFE_CFG_HIF_TX_FIFO_FIX
-	sg_list.total_bytes = len;
-#endif /* PFE_CFG_HIF_TX_FIFO_FIX */
-
-	sg_list.flags.common = (pfe_hif_drv_common_flags_t)0U;
-	sg_list.flags.tx_flags = (pfe_ct_hif_tx_flags_t)0U;
-	sg_list.items[0].data_pa = data_pa;
-	sg_list.items[0].data_va = data_va;
-	sg_list.items[0].len = len;
-
-	return pfe_hif_drv_client_xmit_sg_pkt(client, queue, &sg_list, ref_ptr);
-}
-
-/**
- * @brief		Get PTP timestamp
- * @details		Function will return timestamp for PTP message given by set arguments
- * 				if such timestamp has been captured
- * @param[in]	client The client instance
- * @param[in]	rx TRUE means to get ingress TS, FALSE means egress
- * @param[in]	type PTP message type
- * @param[in]	port PTP source port ID
- * @param[in]	seq_id PTP sequence ID
- * @param[out]	ts_sec Seconds part of the timestamp
- * @param[out]	ts_nsec Nanoseconds part of the timestamp
- * @retval		EOK Timestamp has been found and is valid
- * @retval		ENOENT Timestamp matching given criteria not found
- */
-errno_t pfe_hif_drv_client_get_ts(pfe_hif_drv_client_t *client, bool_t rx,
-		uint8_t type, uint16_t port, uint16_t seq_id, uint32_t *ts_sec, uint32_t *ts_nsec)
-{
-	NXP_LOG_ERROR("%s not supported\n", __func__);
-	return EOPNOTSUPP;
-
-}
-
-/**
- * @brief		Create new HIF driver instance
- * @param[in]	channel The HIF channel instance to be managed
- */
-pfe_hif_drv_t *pfe_hif_drv_create(pfe_hif_chnl_t *channel)
-{
-	pfe_hif_drv_t *hif_drv;
-
-#ifdef PFE_CFG_NULL_ARG_CHECK
-	if (unlikely(NULL == channel))
-	{
-		NXP_LOG_ERROR("NULL argument received\n");
-		return NULL;
-	}
-#endif /* PFE_CFG_NULL_ARG_CHECK */
-
-	hif_drv = oal_mm_malloc(sizeof(pfe_hif_drv_t));
-
-	if (NULL == hif_drv)
-	{
-		NXP_LOG_ERROR("oal_mm_malloc() failed\n");
+		/* Only IHC client supported */
+		dev_err(chnl->dev, "Only HIF IHC client supported\n");
 		return NULL;
 	}
-	else
-	{
-		memset(hif_drv, 0, sizeof(pfe_hif_drv_t));
-		hif_drv->channel = channel;
-
-		return hif_drv;
-	}
-}
 
-/**
- * @brief 	HIF initialization routine
- * @details	Function performs following initialization:
- * 			- Initializes HIF interrupt handler(s)
- * 			- Performs HIF HW initialization and enables RX/TX DMA
- */
-errno_t pfe_hif_drv_init(pfe_hif_drv_t *hif_drv)
-{
-	errno_t ret;
-
-#ifdef PFE_CFG_NULL_ARG_CHECK
-	if (unlikely(NULL == hif_drv))
-	{
-		NXP_LOG_ERROR("NULL argument received\n");
-		return EINVAL;
-	}
-#endif /* PFE_CFG_NULL_ARG_CHECK */
-
-	if (hif_drv->initialized)
-	{
-		NXP_LOG_ERROR("HIF already initialized. Exiting.\n");
-		return ECANCELED;
-	}
-
-	/*	Initialize RX/TX resources */
-	hif_drv->started = FALSE;
-
-	ret = pfe_hif_drv_create_data_channel(hif_drv);
-	if (EOK != ret)
-	{
-		NXP_LOG_ERROR("Could not initialize data channel: %d\n", ret);
-		return ret;
-	}
-
-	/*	Attach channel RX ISR */
-	ret = pfe_hif_chnl_set_event_cbk(hif_drv->channel, HIF_CHNL_EVT_RX_IRQ, &pfe_hif_drv_chnl_rx_isr, (void *)hif_drv);
-	if (EOK != ret)
-	{
-		NXP_LOG_ERROR("Could not register RX ISR: %d\n", ret);
-		pfe_hif_drv_destroy_data_channel(hif_drv);
-		return ret;
-	}
-
-#ifdef PFE_CFG_MULTI_INSTANCE_SUPPORT
-	ret = oal_mutex_init(&hif_drv->tx_lock);
-	if (EOK != ret)
-	{
-		NXP_LOG_ERROR("Couldn't init mutex (tx_lock): %d\n", ret);
-		return ret;
-	}
-#endif
-
-	hif_drv->rx_enabled = FALSE;
-	hif_drv->tx_enabled = FALSE;
-	hif_drv->initialized = TRUE;
-
-	return EOK;
-}
-
-/**
- * @brief		Start traffic at HIF level
- * @details		Data transmission/reception is enabled
- * @param[in]	hif_drv The driver instance
- */
-errno_t pfe_hif_drv_start(pfe_hif_drv_t *hif_drv)
-{
-#ifdef PFE_CFG_NULL_ARG_CHECK
-	if (unlikely(NULL == hif_drv))
-	{
-		NXP_LOG_ERROR("NULL argument received\n");
-		return EINVAL;
-	}
-#endif /* PFE_CFG_NULL_ARG_CHECK */
-
-	if (FALSE == hif_drv->initialized)
-	{
-		NXP_LOG_ERROR("HIF driver not initialized\n");
-		return ENODEV;
-	}
-
-	/*	Enable channel interrupt */
-	pfe_hif_chnl_irq_unmask(hif_drv->channel);
-
-	/*	Enable RX */
-	if (EOK != pfe_hif_chnl_rx_enable(hif_drv->channel))
-	{
-		NXP_LOG_ERROR("Couldn't enable RX\n");
-	}
-	else
-	{
-		hif_drv->rx_enabled = TRUE;
-	}
-
-	/*	Enable TX */
-	if (EOK != pfe_hif_chnl_tx_enable(hif_drv->channel))
-	{
-		NXP_LOG_ERROR("Couldn't enable TX\n");
-	}
-	else
-	{
-		hif_drv->tx_enabled = TRUE;
-	}
-
-	/*	Enable the channel RX interrupts */
-	pfe_hif_chnl_rx_irq_unmask(hif_drv->channel);
-
-	NXP_LOG_INFO("HIF driver started\n");
-
-	return EOK;
-}
-
-/**
- * @brief		Stop traffic at HIF level
- * @details		No resource releasing is done here. This call
- * 				only ensures that all traffic is suppressed at
- * 				the HIF channel level so HIF driver is not receiving
- * 				any notifications about data transfers (RX/TX) and
- * 				is not accessing any RX/TX resources.
- * @param[in]	hif_drv The driver instance
- */
-void pfe_hif_drv_stop(pfe_hif_drv_t *hif_drv)
-{
-	uint32_t hif_stop_timeout;
-
-#ifdef PFE_CFG_NULL_ARG_CHECK
-	if (unlikely(NULL == hif_drv))
-	{
-		NXP_LOG_ERROR("NULL argument received\n");
-		return;
-	}
-#endif /* PFE_CFG_NULL_ARG_CHECK */
-
-	/*	Stop RX */
-	if (TRUE == hif_drv->rx_enabled)
-	{
-		NXP_LOG_DEBUG("Disabling channel RX path\n");
-		pfe_hif_chnl_rx_disable(hif_drv->channel);
-
-		hif_stop_timeout = 10;
-		do
-		{
-			if (pfe_hif_chnl_is_rx_dma_active(hif_drv->channel))
-			{
-				oal_time_usleep(250);
-			}
-			else
-			{
-				break;
-			}
-		} while (0 != hif_stop_timeout--);
-
-		if (pfe_hif_chnl_is_rx_dma_active(hif_drv->channel))
-		{
-			NXP_LOG_WARNING("Unable to stop the HIF RX DMA\n");
-		}
-
-		/*	Disallow reception and ensure the change has been applied */
-		hif_drv->rx_enabled = FALSE;
-
-		NXP_LOG_DEBUG("Disabling channel RX IRQ\n");
-		pfe_hif_chnl_rx_irq_mask(hif_drv->channel);
-	}
-
-	/*	Stop TX */
-	if (TRUE == hif_drv->tx_enabled)
-	{
-		NXP_LOG_DEBUG("Disabling channel TX path\n");
-		pfe_hif_chnl_tx_disable(hif_drv->channel);
-
-		hif_stop_timeout = 10;
-		do
-		{
-			if (pfe_hif_chnl_is_tx_dma_active(hif_drv->channel))
-			{
-				oal_time_usleep(250);
-			}
-			else
-			{
-				break;
-			}
-		} while (0 != hif_stop_timeout--);
-
-		if (pfe_hif_chnl_is_tx_dma_active(hif_drv->channel))
-		{
-			NXP_LOG_WARNING("Unable to stop the HIF TX DMA\n");
-		}
-
-		/*	Disallow transmission and ensure the change has been applied */
-		hif_drv->tx_enabled = FALSE;
-
-		NXP_LOG_INFO("HIF driver TX path is stopped\n");
-	}
-
-	/*
-	 *	-----------------------------------------------------
-	 *	Now the RX and TX resource of HIF channel are frozen
-	 *	-----------------------------------------------------
-	 */
-
-	/*	Disable channel interrupt */
-	pfe_hif_chnl_irq_mask(hif_drv->channel);
-}
-
-/**
- * @brief		Exit the HIF driver
- * @details		Terminate the HIF driver and release all allocated
- * 				resources.
- * @param[in]	hif_drv The driver instance
- */
-void pfe_hif_drv_exit(pfe_hif_drv_t *hif_drv)
-{
-#ifdef PFE_CFG_NULL_ARG_CHECK
-	if (unlikely(NULL == hif_drv))
-	{
-		NXP_LOG_ERROR("NULL argument received\n");
-		return;
-	}
-#endif /* PFE_CFG_NULL_ARG_CHECK */
-
-	if (FALSE == hif_drv->initialized)
-	{
-		NXP_LOG_WARNING("HIF is already disabled\n");
-		return;
-	}
-
-	/*	Check if a client is still registered */
-	if (TRUE == hif_drv->client.active)
-	{
-		NXP_LOG_ERROR("Client is still active\n");
-	}
-
-	/*	Stop the traffic */
-	pfe_hif_drv_stop(hif_drv);
-
-	/*	Just a sanity check */
-	if (hif_drv->tx_meta_rd_idx != hif_drv->tx_meta_wr_idx)
-	{
-		NXP_LOG_WARNING("TX confirmation FIFO still contains %d entries\n", hif_drv->tx_meta_wr_idx - hif_drv->tx_meta_rd_idx);
-	}
-	else
-	{
-		NXP_LOG_INFO("TX confirmation FIFO is empty\n");
-	}
-
-	/*	Detach event handlers */
-	(void)pfe_hif_chnl_set_event_cbk(hif_drv->channel, HIF_CHNL_EVT_RX_IRQ, NULL, NULL);
-
-	/*	Release HIF channel and buffers */
-	pfe_hif_drv_destroy_data_channel(hif_drv);
-	hif_drv->initialized = FALSE;
-	NXP_LOG_INFO("HIF SC exited\n");
-}
-
-void pfe_hif_drv_destroy(pfe_hif_drv_t *hif_drv)
-{
-	if (NULL == hif_drv)
-	{
-		return;
-	}
-	else
-	{
-		pfe_hif_drv_exit(hif_drv);
-		oal_mm_free(hif_drv);
-		hif_drv = NULL;
-	}
+	/* No resource protection here */
+	return fifo_get(client->ihc_txconf_fifo);
 }
+#endif /* PFE_CFG_MULTI_INSTANCE_SUPPORT */
 
 /** @}*/
diff --git a/sw/pfe_hif_drv/src/pfe_hif_ptp.c b/sw/pfe_hif_drv/src/pfe_hif_ptp.c
index 9e0c986..b3ca7ce 100644
--- a/sw/pfe_hif_drv/src/pfe_hif_ptp.c
+++ b/sw/pfe_hif_drv/src/pfe_hif_ptp.c
@@ -1,7 +1,7 @@
 /* =========================================================================
  *  
  *  Copyright (c) 2019 Imagination Technologies Limited
- *  Copyright 2020 NXP
+ *  Copyright 2020-2021 NXP
  *
  *  SPDX-License-Identifier: GPL-2.0
  *
@@ -21,6 +21,9 @@
 /*	Entry timeout in number of ticks */
 #define PFE_HIF_PTP_DB_TIMEOUT				1
 
+#define PFE_PTP_WORKER_SHUTDOWN		(1)
+#define PFE_PTP_WORKER_TICK			(2)
+
 typedef struct
 {
 	uint32_t ticks;		/* Timeout counter (in number of ticks). Zero means entry is aged. */
@@ -44,41 +47,55 @@ static void *pfe_hif_ptp_ts_db_tick(void *arg)
 	pfe_hif_ptp_ts_db_t *db = (pfe_hif_ptp_ts_db_t *)arg;
 	LLIST_t *item, *aux;
 	pfe_hif_ptp_ts_db_entry_t *entry;
+	oal_mbox_msg_t msg;
 
 	while (1)
 	{
-		if (EOK != oal_mutex_lock(db->lock))
-		{
-			NXP_LOG_DEBUG("Mutex lock failed\n");
-		}
-
-		/*	Release aged entries */
-		LLIST_ForEachRemovable(item, aux, &db->entries)
+		if (EOK == oal_mbox_receive(db->mbox, &msg))
 		{
-			entry = LLIST_Data(item, pfe_hif_ptp_ts_db_entry_t, lm);
-			if ((NULL != entry) && (entry->ticks <= 0U))
+			if (PFE_PTP_WORKER_SHUTDOWN == msg.payload.code)
 			{
-				NXP_LOG_INFO("Removing aged TS DB entry (Type: 0x%x, Port: 0x%x, SeqID: 0x%x)\n",
-						entry->type, entry->port, entry->seq_id);
-				LLIST_Remove(item);
-				oal_mm_free(entry);
-				db->count--;
+				break;
 			}
 			else
 			{
-				entry->ticks--;
+				if (EOK != oal_mutex_lock(db->lock))
+				{
+					NXP_LOG_DEBUG("Mutex lock failed\n");
+				}
+
+				/*	Release aged entries */
+				LLIST_ForEachRemovable(item, aux, &db->entries)
+				{
+					entry = LLIST_Data(item, pfe_hif_ptp_ts_db_entry_t, lm);
+					if ((NULL != entry) && (entry->ticks <= 0U))
+					{
+						NXP_LOG_INFO("Removing aged TS DB entry (Type: 0x%x, Port: 0x%x, SeqID: 0x%x)\n",
+								entry->type, entry->port, entry->seq_id);
+						LLIST_Remove(item);
+						oal_mm_free(entry);
+						db->count--;
+					}
+					else
+					{
+						entry->ticks--;
+					}
+				}
+
+				if (EOK != oal_mutex_unlock(db->lock))
+				{
+					NXP_LOG_DEBUG("Mutex unlock failed\n");
+				}
 			}
 		}
-
-		if (EOK != oal_mutex_unlock(db->lock))
+		else
 		{
-			NXP_LOG_DEBUG("Mutex unlock failed\n");
+			NXP_LOG_WARNING("mbox_receive() failed\n");
 		}
-
-		/*	Tick = 1s */
-		oal_time_mdelay(10000);
 	}
 
+	NXP_LOG_INFO("TS DB worker shutting down\n");
+
 	return NULL;
 }
 
@@ -100,9 +117,27 @@ errno_t pfe_hif_ptp_ts_db_init(pfe_hif_ptp_ts_db_t *db)
 
 	LLIST_Init(&db->entries);
 
+	db->mbox = oal_mbox_create();
+	if (NULL == db->mbox)
+	{
+		NXP_LOG_ERROR("Can't create mbox\n");
+		oal_mm_free(db->lock);
+		return ENOEXEC;
+	}
+
+	if (EOK != oal_mbox_attach_timer(db->mbox, 1000U, PFE_PTP_WORKER_TICK))
+	{
+		NXP_LOG_ERROR("Could not attach timer\n");
+		oal_mbox_destroy(db->mbox);
+		oal_mm_free(db->lock);
+		return ENOEXEC;
+	}
+
 	db->worker = oal_thread_create(&pfe_hif_ptp_ts_db_tick, db, "TS DB worker", 0);
 	if (NULL == db->worker)
 	{
+		oal_mbox_detach_timer(db->mbox);
+		oal_mbox_destroy(db->mbox);
 		oal_mm_free(db->lock);
 		return ENOMEM;
 	}
@@ -118,6 +153,26 @@ void pfe_hif_ptp_ts_db_fini(pfe_hif_ptp_ts_db_t *db)
 	LLIST_t *item, *aux;
 	pfe_hif_ptp_ts_db_entry_t *entry;
 
+	if (NULL != db->worker)
+	{
+		NXP_LOG_INFO("Stopping TS DB worker\n");
+
+		if (EOK != oal_mbox_send_signal(db->mbox, PFE_PTP_WORKER_SHUTDOWN))
+		{
+			NXP_LOG_ERROR("Could not send shutdown signal\n");
+		}
+
+		if (EOK != oal_thread_join(db->worker, NULL))
+		{
+			NXP_LOG_ERROR("Can't join TS DB worker thread\n");
+		}
+		else
+		{
+			NXP_LOG_INFO("TS DB worker stopped\n");
+			db->worker = NULL;
+		}
+	}
+
 	if (NULL != db->lock)
 	{
 		if (EOK != oal_mutex_lock(db->lock))
@@ -141,24 +196,11 @@ void pfe_hif_ptp_ts_db_fini(pfe_hif_ptp_ts_db_t *db)
 			NXP_LOG_DEBUG("Mutex unlock failed\n");
 		}
 
+		oal_mbox_destroy(db->mbox);
 		oal_mutex_destroy(db->lock);
 		oal_mm_free(db->lock);
 		db->lock = NULL;
 	}
-
-	if (NULL != db->worker)
-	{
-		(void)oal_thread_cancel(db->worker);
-
-		if (EOK != oal_thread_join(db->worker, NULL))
-		{
-			NXP_LOG_ERROR("Can't join TS DB worker thread\n");
-		}
-		else
-		{
-			NXP_LOG_INFO("TS DB worker stopped\n");
-		}
-	}
 }
 
 /**
diff --git a/sw/pfe_platform/Makefile b/sw/pfe_platform/Makefile
index 3205b07..9881b7f 100644
--- a/sw/pfe_platform/Makefile
+++ b/sw/pfe_platform/Makefile
@@ -53,7 +53,7 @@ CCFLAGS_pfe +=-DPFE_CFG_PFE_CT_H_MD5=$(PFE_CT_H_MD5)
 $(info pfe_ct.h MD5 sum is $(PFE_CT_H_MD5))
 
 #Generic compiler flags (which include build type flags)
-CCFLAGS_all += -Wall -fmessage-length=0
+CCFLAGS_all += -Wall -fmessage-length=0 -fvisibility=hidden
 CCFLAGS_all += $(CCFLAGS_$(BUILD_PROFILE))
 CCFLAGS_all += $(CCFLAGS_pfe)
 #Shared library has to be compiled with -fPIC
@@ -75,7 +75,8 @@ SRCS =	src/pfe_class.c \
 		src/pfe_log_if_slave.c \
 		src/pfe_if_db.c \
 		src/pfe_pe.c \
-		src/pfe_phy_if_slave.c
+		src/pfe_phy_if_slave.c \
+		src/pfe_mac_db.c
 else
 SRCS =	src/pfe_bmu.c \
 		src/pfe_class.c \
@@ -100,13 +101,14 @@ SRCS =	src/pfe_bmu.c \
 		src/pfe_flexible_filter.c \
 		src/pfe_fw_feature.c \
 		src/pfe_spd.c \
-		src/pfe_spd_acc.c
+		src/pfe_spd_acc.c \
+		src/pfe_mac_db.c
 
 ifeq ($(PFE_CFG_MULTI_INSTANCE_SUPPORT),1)
 SRCS += src/pfe_idex.c
 endif
 endif
-		
+
 SRCS += hw/$(TARGET_HW)/pfe_bmu_csr.c \
 		hw/$(TARGET_HW)/pfe_emac_csr.c \
 		hw/$(TARGET_HW)/pfe_hif_csr.c \
@@ -167,6 +169,7 @@ ccflags-y += -Og
 endif
 ccflags-y += $(CCFLAGS_pfe)
 ccflags-y += $(GLOBAL_CCFLAGS)
+ccflags-y += -Werror
 
 ifeq ($(PFE_CFG_PFE_MASTER),0)
 pfe_platform-y := src/pfe_hif_chnl.o \
@@ -175,7 +178,8 @@ pfe_platform-y := src/pfe_hif_chnl.o \
 		src/pfe_log_if_slave.o \
 		src/pfe_if_db.o \
 		src/pfe_pe.o \
-		src/pfe_phy_if_slave.o
+		src/pfe_phy_if_slave.o \
+		src/pfe_mac_db.o
 else
 pfe_platform-y := src/pfe_bmu.o \
 	src/pfe_class.o \
@@ -195,7 +199,8 @@ pfe_platform-y := src/pfe_bmu.o \
 	src/pfe_if_db.o \
 	src/pfe_safety.o \
 	src/pfe_spd.o \
-	src/pfe_spd_acc.o
+	src/pfe_spd_acc.o \
+	src/pfe_mac_db.o
 
 ifeq ($(PFE_CFG_RTABLE_ENABLE),1)
     pfe_platform-y += src/pfe_rtable.o
@@ -222,7 +227,7 @@ ifneq ($(PFE_CFG_IP_VERSION),PFE_CFG_IP_VERSION_FPGA_5_0_4)
 pfe_platform-y += hw/$(TARGET_HW)/pfe_wdt_csr.o
 pfe_platform-y += src/pfe_wdt.o
 endif
-	
+
 ifeq ($(PFE_CFG_PFE_MASTER),0)
 pfe_platform-y += hw/$(TARGET_HW)/pfe_platform_slave.o
 else
@@ -232,7 +237,7 @@ endif
 ifneq ($(PFE_CFG_MULTI_INSTANCE_SUPPORT),0)
 pfe_platform-y += src/pfe_idex.o
 endif
-     
+
 obj-m += pfe_platform.o
 
 linux:
diff --git a/sw/pfe_platform/hw/s32g/pfe_bmu_csr.c b/sw/pfe_platform/hw/s32g/pfe_bmu_csr.c
index abb2ba4..02c49fa 100644
--- a/sw/pfe_platform/hw/s32g/pfe_bmu_csr.c
+++ b/sw/pfe_platform/hw/s32g/pfe_bmu_csr.c
@@ -23,7 +23,7 @@
 #error Unsupported IP version
 #endif /* PFE_CFG_IP_VERSION */
 
-static void pfe_bmu_cfg_clear_buf_cnt_memory(void *base_va, uint32_t cnt)
+static void pfe_bmu_cfg_clear_buf_cnt_memory(addr_t base_va, uint32_t cnt)
 {
 	uint32_t ii;
 
@@ -35,7 +35,7 @@ static void pfe_bmu_cfg_clear_buf_cnt_memory(void *base_va, uint32_t cnt)
 	}
 }
 
-static void pfe_bmu_cfg_clear_internal_memory(void *base_va, uint32_t cnt)
+static void pfe_bmu_cfg_clear_internal_memory(addr_t base_va, uint32_t cnt)
 {
 	uint32_t ii;
 
@@ -57,11 +57,11 @@ static void pfe_bmu_cfg_clear_internal_memory(void *base_va, uint32_t cnt)
  * @return		EOK if interrupt has been handled, error code otherwise
  * @note		Make sure the call is protected by some per-BMU mutex
  */
-errno_t pfe_bmu_cfg_isr(void *base_va, void *cbus_base_va)
+errno_t pfe_bmu_cfg_isr(addr_t base_va, addr_t cbus_base_va)
 {
 	uint32_t reg_src, reg_en, reg, reg_reen = 0U;
 	errno_t ret = ENOENT;
-	addr_t bmu_offset = (addr_t)base_va - (addr_t)cbus_base_va;
+	addr_t bmu_offset = base_va - cbus_base_va;
 #ifndef NXP_LOG_ENABLED
 	(void)bmu_offset;
 #endif /* NXP_LOG_ENABLED */
@@ -105,7 +105,7 @@ errno_t pfe_bmu_cfg_isr(void *base_va, void *cbus_base_va)
 		/*	More (or equal) than "threshold" number of buffers have been
 			allocated. Read and print the threshold value. Stay disabled. */
 		reg = hal_read32(base_va + BMU_THRES);
-		NXP_LOG_INFO("BMU_THRES_INT (BMU @ p0x%p). Pool being depleted. Threshold: %d.\n", (void *)bmu_offset, (reg & 0xffffU));
+		NXP_LOG_INFO("BMU_THRES_INT (BMU @ p0x%p). Pool being depleted. Threshold: %u.\n", (void *)bmu_offset, ((uint_t)reg & 0xffffU));
 
 		/*	Stay disabled but re-enable the "empty" interrupt */
 		reg_reen |= BMU_EMPTY_INT;
@@ -115,7 +115,7 @@ errno_t pfe_bmu_cfg_isr(void *base_va, void *cbus_base_va)
 	if ((reg_src & reg_en & BMU_FREE_ERR_INT) != 0U)
 	{
 		/*	Free error interrupt. Keep this one always enabled */
-		NXP_LOG_INFO("BMU_FREE_ERR_INT (BMU @ p0x%p) address 0x%x\n", (void *)bmu_offset, hal_read32(base_va + BMU_FREE_ERROR_ADDR));
+		NXP_LOG_INFO("BMU_FREE_ERR_INT (BMU @ p0x%p) address 0x%x\n", (void *)bmu_offset, (uint_t)hal_read32(base_va + BMU_FREE_ERROR_ADDR));
 		ret = EOK;
 	}
 
@@ -141,7 +141,7 @@ errno_t pfe_bmu_cfg_isr(void *base_va, void *cbus_base_va)
  * @param[in]	base_va Base address of the BMU register space (virtual)
  * @note		Make sure the call is protected by some per-BMU mutex
  */
-void pfe_bmu_cfg_irq_mask(void *base_va)
+void pfe_bmu_cfg_irq_mask(addr_t base_va)
 {
 	uint32_t reg;
 
@@ -155,7 +155,7 @@ void pfe_bmu_cfg_irq_mask(void *base_va)
  * @param[in]	base_va Base address of the BMU register space (virtual)
  * @note		Make sure the call is protected by some per-BMU mutex
  */
-void pfe_bmu_cfg_irq_unmask(void *base_va)
+void pfe_bmu_cfg_irq_unmask(addr_t base_va)
 {
 	uint32_t reg;
 
@@ -169,19 +169,24 @@ void pfe_bmu_cfg_irq_unmask(void *base_va)
  * @param[in]	base_va Base address of the BMU register space (virtual)
  * @param[in]	cfg Pointer to the configuration structure
  */
-void pfe_bmu_cfg_init(void *base_va, pfe_bmu_cfg_t *cfg)
+void pfe_bmu_cfg_init(addr_t base_va, const pfe_bmu_cfg_t *cfg)
 {
 	hal_write32(0U, base_va + BMU_CTRL);
 	hal_write32(0x0U, base_va + BMU_INT_ENABLE);
 	hal_write32(0xffffffffU, base_va + BMU_INT_SRC);
 
-	hal_write32((uint32_t)((addr_t)cfg->pool_pa & 0xffffffffU), base_va + BMU_UCAST_BASEADDR);
+	hal_write32((uint32_t)(cfg->pool_pa & 0xffffffffU), base_va + BMU_UCAST_BASEADDR);
 	hal_write32(cfg->max_buf_cnt & 0xffffU, base_va + BMU_UCAST_CONFIG);
 	hal_write32(cfg->buf_size & 0xffffU, base_va + BMU_BUF_SIZE);
 
 	/*	Thresholds. 75% of maximum number of available buffers. */
 	hal_write32((cfg->max_buf_cnt * 75U) / 100U, base_va + BMU_THRES);
 
+	/*	Low Watermark for pause frame generation start 5% of free buffers. */
+	hal_write32((cfg->max_buf_cnt * 5U) / 100U, base_va + BMU_LOW_WATERMARK);
+	/*	High Watermark for pause frame generation stop 10% of free buffers. */
+	hal_write32((cfg->max_buf_cnt * 10U) / 100U, base_va + BMU_HIGH_WATERMARK);
+
 	pfe_bmu_cfg_clear_internal_memory(base_va, cfg->int_mem_loc_cnt);
 	pfe_bmu_cfg_clear_buf_cnt_memory(base_va, cfg->buf_mem_loc_cnt);
 
@@ -193,7 +198,7 @@ void pfe_bmu_cfg_init(void *base_va, pfe_bmu_cfg_t *cfg)
  * @brief		Finalize the BMU
  * @param[in]	base_va Base address of HIF register space (virtual)
  */
-void pfe_bmu_cfg_fini(void *base_va)
+void pfe_bmu_cfg_fini(addr_t base_va)
 {
 	hal_write32(0U, base_va + BMU_CTRL);
 	hal_write32(0x0U, base_va + BMU_INT_ENABLE);
@@ -205,7 +210,7 @@ void pfe_bmu_cfg_fini(void *base_va)
  * @param[in]	base_va Base address of the BMU register space (virtual)
  * @return		EOK if success or error code otherwise
  */
-errno_t pfe_bmu_cfg_reset(void *base_va)
+errno_t pfe_bmu_cfg_reset(addr_t base_va)
 {
 	uint32_t ii = 0U;
 
@@ -229,7 +234,7 @@ errno_t pfe_bmu_cfg_reset(void *base_va)
  * @brief		Enable the BMU block
  * @param[in]	base_va Base address of the BMU register space (virtual)
  */
-void pfe_bmu_cfg_enable(void *base_va)
+void pfe_bmu_cfg_enable(addr_t base_va)
 {
 	hal_write32(0x1U, base_va + BMU_CTRL);
 }
@@ -238,7 +243,7 @@ void pfe_bmu_cfg_enable(void *base_va)
  * @brief		Disable the BMU block
  * @param[in]	base_va Base address of the BMU register space (virtual)
  */
-void pfe_bmu_cfg_disable(void *base_va)
+void pfe_bmu_cfg_disable(addr_t base_va)
 {
 	hal_write32(0x0U, base_va + BMU_CTRL);
 }
@@ -248,7 +253,7 @@ void pfe_bmu_cfg_disable(void *base_va)
  * @param[in]	base_va Base address of the BMU register space (virtual)
  * @return		Pointer to the allocated buffer
  */
-void * pfe_bmu_cfg_alloc_buf(void *base_va)
+void * pfe_bmu_cfg_alloc_buf(addr_t base_va)
 {
 	return (void *)(addr_t)hal_read32(base_va + BMU_ALLOC_CTRL);
 }
@@ -258,9 +263,9 @@ void * pfe_bmu_cfg_alloc_buf(void *base_va)
  * @param[in]	base_va Base address of the BMU register space (virtual)
  * @param[in]	buffer Pointer to the buffer to be released
  */
-void pfe_bmu_cfg_free_buf(void *base_va, void *buffer)
+void pfe_bmu_cfg_free_buf(addr_t base_va, addr_t buffer)
 {
-	hal_write32((uint32_t)((addr_t)buffer & 0xffffffffU), base_va + BMU_FREE_CTRL);
+	hal_write32((uint32_t)(buffer & 0xffffffffU), base_va + BMU_FREE_CTRL);
 }
 
 /**
@@ -273,13 +278,13 @@ void pfe_bmu_cfg_free_buf(void *base_va, void *buffer)
  * @param[in]	verb_level 	Verbosity level
  * @return		Number of bytes written to the buffer
  */
-uint32_t pfe_bmu_cfg_get_text_stat(void *base_va, char_t *buf, uint32_t size, uint8_t verb_level)
+uint32_t pfe_bmu_cfg_get_text_stat(addr_t base_va, char_t *buf, uint32_t size, uint8_t verb_level)
 {
 	uint32_t len = 0U;
 	uint32_t reg, ii;
 
 #if defined(PFE_CFG_NULL_ARG_CHECK)
-	if (unlikely(NULL == base_va))
+	if (unlikely(NULL_ADDR == base_va))
 	{
 		NXP_LOG_ERROR("NULL argument received (pfe_bmu_cfg_get_text_stat)\n");
 		return 0U;
diff --git a/sw/pfe_platform/hw/s32g/pfe_bmu_csr.h b/sw/pfe_platform/hw/s32g/pfe_bmu_csr.h
index 0aa81e3..a22e1b4 100644
--- a/sw/pfe_platform/hw/s32g/pfe_bmu_csr.h
+++ b/sw/pfe_platform/hw/s32g/pfe_bmu_csr.h
@@ -1,7 +1,7 @@
 /* =========================================================================
  *  
  *  Copyright (c) 2019 Imagination Technologies Limited
- *  Copyright 2018-2020 NXP
+ *  Copyright 2018-2021 NXP
  *
  *  SPDX-License-Identifier: GPL-2.0
  *
@@ -90,16 +90,16 @@
 #define BMU_MCAST_THRES_INT			(1UL << 7U)
 #define BMU_MCAST_FREE_ERR_INT		(1UL << 8U)
 
-errno_t pfe_bmu_cfg_isr(void *base_va, void *cbus_base_va);
- void pfe_bmu_cfg_irq_mask(void *base_va);
- void pfe_bmu_cfg_irq_unmask(void *base_va);
-void pfe_bmu_cfg_init(void *base_va, pfe_bmu_cfg_t *cfg);
-void pfe_bmu_cfg_fini(void *base_va);
-errno_t pfe_bmu_cfg_reset(void *base_va);
-void pfe_bmu_cfg_enable(void *base_va);
-void pfe_bmu_cfg_disable(void *base_va);
-void * pfe_bmu_cfg_alloc_buf(void *base_va);
-void pfe_bmu_cfg_free_buf(void *base_va, void *buffer);
-uint32_t pfe_bmu_cfg_get_text_stat(void *base_va, char_t *buf, uint32_t size, uint8_t verb_level);
+errno_t pfe_bmu_cfg_isr(addr_t base_va, addr_t cbus_base_va);
+ void pfe_bmu_cfg_irq_mask(addr_t base_va);
+ void pfe_bmu_cfg_irq_unmask(addr_t base_va);
+void pfe_bmu_cfg_init(addr_t base_va, const pfe_bmu_cfg_t *cfg);
+void pfe_bmu_cfg_fini(addr_t base_va);
+errno_t pfe_bmu_cfg_reset(addr_t base_va);
+void pfe_bmu_cfg_enable(addr_t base_va);
+void pfe_bmu_cfg_disable(addr_t base_va);
+void * pfe_bmu_cfg_alloc_buf(addr_t base_va);
+void pfe_bmu_cfg_free_buf(addr_t base_va, addr_t buffer);
+uint32_t pfe_bmu_cfg_get_text_stat(addr_t base_va, char_t *buf, uint32_t size, uint8_t verb_level);
 
 #endif /* PFE_BMU_CSR_H_ */
diff --git a/sw/pfe_platform/hw/s32g/pfe_cbus.h b/sw/pfe_platform/hw/s32g/pfe_cbus.h
index 47e3b7e..69643e0 100644
--- a/sw/pfe_platform/hw/s32g/pfe_cbus.h
+++ b/sw/pfe_platform/hw/s32g/pfe_cbus.h
@@ -1,7 +1,7 @@
 /* =========================================================================
  *  
  *  Copyright (c) 2019 Imagination Technologies Limited
- *  Copyright 2018-2020 NXP
+ *  Copyright 2018-2021 NXP
  *
  *  SPDX-License-Identifier: GPL-2.0
  *
diff --git a/sw/pfe_platform/hw/s32g/pfe_class_csr.c b/sw/pfe_platform/hw/s32g/pfe_class_csr.c
index 16329a6..b07c98f 100644
--- a/sw/pfe_platform/hw/s32g/pfe_class_csr.c
+++ b/sw/pfe_platform/hw/s32g/pfe_class_csr.c
@@ -29,7 +29,7 @@
  * @param[in]	base_va Base address of CLASS register space (virtual)
  * @param[in]	cfg Pointer to the configuration structure
  */
-void pfe_class_cfg_set_config(void *base_va, pfe_class_cfg_t *cfg)
+void pfe_class_cfg_set_config(addr_t base_va, const pfe_class_cfg_t *cfg)
 {
 	(void)cfg;
 
@@ -47,6 +47,8 @@ void pfe_class_cfg_set_config(void *base_va, pfe_class_cfg_t *cfg)
 	hal_write32(0U, base_va + CLASS_L4_CHKSUM);
 	hal_write32((PFE_CFG_RO_HDR_SIZE << 16) | PFE_CFG_LMEM_HDR_SIZE, base_va + CLASS_HDR_SIZE);
 	hal_write32(PFE_CFG_LMEM_BUF_SIZE, base_va + CLASS_LMEM_BUF_SIZE);
+	hal_write32(CLASS_TPID0_TPID1_VAL, base_va + CLASS_TPID0_TPID1);
+	hal_write32(CLASS_TPID2_VAL, base_va + CLASS_TPID2);
 
 	hal_write32(0U
 			| RT_TWO_LEVEL_REF(FALSE)
@@ -71,7 +73,7 @@ void pfe_class_cfg_set_config(void *base_va, pfe_class_cfg_t *cfg)
  * @brief		Reset the classifier block
  * @param[in]	base_va Base address of CLASS register space (virtual)
  */
-void pfe_class_cfg_reset(void *base_va)
+void pfe_class_cfg_reset(addr_t base_va)
 {
 	hal_write32(PFE_CORE_SW_RESET, base_va + CLASS_TX_CTRL);
 }
@@ -81,7 +83,7 @@ void pfe_class_cfg_reset(void *base_va)
  * @details		Enable all classifier PEs
  * @param[in]	base_va Base address of CLASS register space (virtual)
  */
-void pfe_class_cfg_enable(void *base_va)
+void pfe_class_cfg_enable(addr_t base_va)
 {
 	hal_write32(PFE_CORE_ENABLE, base_va + CLASS_TX_CTRL);
 }
@@ -91,7 +93,7 @@ void pfe_class_cfg_enable(void *base_va)
  * @details		Disable all classifier PEs
  * @param[in]	base_va Base address of CLASS register space (virtual)
  */
-void pfe_class_cfg_disable(void *base_va)
+void pfe_class_cfg_disable(addr_t base_va)
 {
 	hal_write32(PFE_CORE_DISABLE, base_va + CLASS_TX_CTRL);
 }
@@ -102,22 +104,24 @@ void pfe_class_cfg_disable(void *base_va)
  * @param[in]	rtable_pa Physical address of the routing table space
  * @param[in]	rtable_len Number of entries in the table
  * @param[in]	entry_size Routing table entry size in number of bytes
+ * @return		Execution status, EOK if success, error code otherwise
  */
-void pfe_class_cfg_set_rtable(void *base_va, void *rtable_pa, uint32_t rtable_len, uint32_t entry_size)
+errno_t pfe_class_cfg_set_rtable(addr_t base_va, addr_t rtable_pa, uint32_t rtable_len, uint32_t entry_size)
 {
 	uint8_t ii;
 	uint32_t reg = hal_read32(base_va + CLASS_ROUTE_MULTI);
 
-	if (NULL == rtable_pa)
+	if (NULL_ADDR == rtable_pa)
 	{
 		hal_write32(reg & (~PARSE_ROUTE_EN(TRUE)), base_va + CLASS_ROUTE_MULTI);
-		return;
+		return EOK;
 	}
 
 	/* rtable not NULL, add it */
 	if (entry_size > ROUTE_ENTRY_SIZE(0xffffffffu))
 	{
 		NXP_LOG_ERROR("Entry size exceeds maximum value\n");
+		return EINVAL;
 	}
 
 	reg = hal_read32(base_va + CLASS_ROUTE_MULTI);
@@ -126,6 +130,7 @@ void pfe_class_cfg_set_rtable(void *base_va, void *rtable_pa, uint32_t rtable_le
 		if (entry_size != 128U)
 		{
 			NXP_LOG_ERROR("FATAL: Route table entry length exceeds 128bytes\n");
+			return EINVAL;
 		}
 	}
 
@@ -135,19 +140,21 @@ void pfe_class_cfg_set_rtable(void *base_va, void *rtable_pa, uint32_t rtable_le
 		{
 			if (0U != (rtable_len & ~(1UL << ii)))
 			{
-				NXP_LOG_WARNING("Routing table length is not a power of 2\n");
+				NXP_LOG_ERROR("Routing table length is not a power of 2\n");
+				return EINVAL;
 			}
 
 			if ((ii < 6U) || (ii > 20U))
 			{
-				NXP_LOG_WARNING("Table length out of boundaries\n");
+				NXP_LOG_ERROR("Table length out of boundaries\n");
+				return EINVAL;
 			}
 
 			break;
 		}
 	}
 
-	hal_write32((uint32_t)((addr_t)rtable_pa & 0xffffffffU), base_va + CLASS_ROUTE_TABLE_BASE);
+	hal_write32((uint32_t)(rtable_pa & 0xffffffffU), base_va + CLASS_ROUTE_TABLE_BASE);
 	hal_write32(0UL
 				| ROUTE_HASH_SIZE(ii)
 				| ROUTE_ENTRY_SIZE(entry_size)
@@ -155,6 +162,8 @@ void pfe_class_cfg_set_rtable(void *base_va, void *rtable_pa, uint32_t rtable_le
 
 	reg = hal_read32(base_va + CLASS_ROUTE_MULTI);
 	hal_write32(reg | PARSE_ROUTE_EN(TRUE), base_va + CLASS_ROUTE_MULTI);
+
+	return EOK;
 }
 
 /**
@@ -164,7 +173,7 @@ void pfe_class_cfg_set_rtable(void *base_va, void *rtable_pa, uint32_t rtable_le
  * @param[in]	base_va Base address of CLASS register space (virtual)
  * @param[in]	vlan The default VLAN ID (12bit)
  */
-void pfe_class_cfg_set_def_vlan(void *base_va, uint16_t vlan)
+void pfe_class_cfg_set_def_vlan(addr_t base_va, uint16_t vlan)
 {
 	hal_write32(0UL
 			| USE_DEFAULT_VLANID(TRUE)
@@ -182,13 +191,13 @@ void pfe_class_cfg_set_def_vlan(void *base_va, uint16_t vlan)
  * @param[in]	verb_level 	Verbosity level
  * @return		Number of bytes written to the buffer
  */
-uint32_t pfe_class_cfg_get_text_stat(void *base_va, char_t *buf, uint32_t size, uint8_t verb_level)
+uint32_t pfe_class_cfg_get_text_stat(addr_t base_va, char_t *buf, uint32_t size, uint8_t verb_level)
 {
 	uint32_t len = 0U;
 	uint32_t reg;
 
 #if defined(PFE_CFG_NULL_ARG_CHECK)
-	if (unlikely(NULL == base_va))
+	if (unlikely(NULL_ADDR == base_va))
 	{
 		NXP_LOG_ERROR("NULL argument received\n");
 		return 0U;
diff --git a/sw/pfe_platform/hw/s32g/pfe_class_csr.h b/sw/pfe_platform/hw/s32g/pfe_class_csr.h
index afeb0a1..d7312fa 100644
--- a/sw/pfe_platform/hw/s32g/pfe_class_csr.h
+++ b/sw/pfe_platform/hw/s32g/pfe_class_csr.h
@@ -2,7 +2,7 @@
  *  
  *  Copyright (c) 2019 Imagination Technologies Limited
  *  Copyright 2015-2016 Freescale Semiconductor, Inc.
- *  Copyright 2017-2020 NXP
+ *  Copyright 2017-2021 NXP
  *
  *  SPDX-License-Identifier: GPL-2.0
  *
@@ -307,6 +307,12 @@
 #define CLASS_PE0_QB_DM_ADDR0_VAL	((CLASS_PBUF1_HEADER_BASE_ADDR << 16U) | CLASS_PBUF0_HEADER_BASE_ADDR)
 #define CLASS_PE0_QB_DM_ADDR1_VAL	((CLASS_PBUF3_HEADER_BASE_ADDR << 16U) | CLASS_PBUF2_HEADER_BASE_ADDR)
 
+#define CLASS_TPID_DOT1Q			0x8100UL
+#define CLASS_TPID_DOT1AD_0			0x88A8UL
+#define CLASS_TPID_DOT1AD_1			0x9100UL
+#define CLASS_TPID0_TPID1_VAL		((CLASS_TPID_DOT1AD_1 << 16U) | CLASS_TPID_DOT1AD_0)
+#define CLASS_TPID2_VAL				(CLASS_TPID_DOT1Q)
+
 #define RT_TWO_LEVEL_REF(x)			((!!x) ? (1UL << 0U) : 0U)
 #define PHYNO_IN_HASH(x)			((!!x) ? (1UL << 1U) : 0U)
 #define PARSE_ROUTE_EN(x)			((!!x) ? (1UL << 3U) : 0U)
@@ -337,12 +343,12 @@
 #define PE_IBUS_BYTES(x)			((1UL << (x)) - 1U) << (4U - (x)) /* 0x1 = LSB, 0x8 = MSB (BE) */
 
 
-void pfe_class_cfg_set_config(void *base_va, pfe_class_cfg_t *cfg);
-void pfe_class_cfg_reset(void *base_va);
-void pfe_class_cfg_enable(void *base_va);
-void pfe_class_cfg_disable(void *base_va);
-uint32_t pfe_class_cfg_get_text_stat(void *base_va, char_t *buf, uint32_t size, uint8_t verb_level);
-void pfe_class_cfg_set_rtable(void *base_va, void *rtable_pa, uint32_t rtable_len, uint32_t entry_size);
-void pfe_class_cfg_set_def_vlan(void *base_va, uint16_t vlan);
+void pfe_class_cfg_set_config(addr_t base_va, const pfe_class_cfg_t *cfg);
+void pfe_class_cfg_reset(addr_t base_va);
+void pfe_class_cfg_enable(addr_t base_va);
+void pfe_class_cfg_disable(addr_t base_va);
+uint32_t pfe_class_cfg_get_text_stat(addr_t base_va, char_t *buf, uint32_t size, uint8_t verb_level);
+errno_t pfe_class_cfg_set_rtable(addr_t base_va, addr_t rtable_pa, uint32_t rtable_len, uint32_t entry_size);
+void pfe_class_cfg_set_def_vlan(addr_t base_va, uint16_t vlan);
 
 #endif /* PFE_CLASS_CSR_H_ */
diff --git a/sw/pfe_platform/hw/s32g/pfe_emac_csr.c b/sw/pfe_platform/hw/s32g/pfe_emac_csr.c
index 84d4d52..3b4f66c 100644
--- a/sw/pfe_platform/hw/s32g/pfe_emac_csr.c
+++ b/sw/pfe_platform/hw/s32g/pfe_emac_csr.c
@@ -19,19 +19,6 @@
 #error Unsupported IP version
 #endif /* PFE_CFG_IP_VERSION */
 
-/* Mode conversion table */
-static const char_t * phy_mode[] =
-{
-		"GMII_MII",
-		"RGMII",
-		"SGMII",
-		"TBI",
-		"RMII",
-		"RTBI",
-		"SMII",
-		"RevMII",
-		"INVALID",
-};
 
 static inline uint32_t crc32_reversed(const uint8_t *const data, const uint32_t len)
 {
@@ -68,6 +55,19 @@ static inline uint32_t crc32_reversed(const uint8_t *const data, const uint32_t
  */
 static inline const char_t* phy_mode_to_str(uint32_t mode)
 {
+	/* Mode conversion table */
+	static const char_t * const phy_mode[] =
+	{
+			"GMII_MII",
+			"RGMII",
+			"SGMII",
+			"TBI",
+			"RMII",
+			"RTBI",
+			"SMII",
+			"RevMII",
+			"INVALID",
+	};
 	/* Initialize to invalid */
 	uint32_t index  = ((uint32_t)(sizeof(phy_mode))/(uint32_t)(sizeof(phy_mode[0]))) - 1UL;
 
@@ -118,13 +118,13 @@ static const char *emac_speed_to_str(pfe_emac_speed_t speed)
  * @param[in]	duplex Duplex type to be configured @see pfe_emac_duplex_t
  * @return		EOK if success, error code if invalid configuration is detected
  */
-errno_t pfe_emac_cfg_init(void *base_va, pfe_emac_mii_mode_t mode,  pfe_emac_speed_t speed, pfe_emac_duplex_t duplex)
+errno_t pfe_emac_cfg_init(addr_t base_va, pfe_emac_mii_mode_t mode,  pfe_emac_speed_t speed, pfe_emac_duplex_t duplex)
 {
 	uint32_t reg;
 
-	hal_write32(0U, (addr_t)base_va + MAC_CONFIGURATION);
-	hal_write32(0x8000ffeeU, (addr_t)base_va + MAC_ADDRESS0_HIGH);
-	hal_write32(0xddccbbaaU, (addr_t)base_va + MAC_ADDRESS0_LOW);
+	hal_write32(0U, base_va + MAC_CONFIGURATION);
+	hal_write32(0x8000ffeeU, base_va + MAC_ADDRESS0_HIGH);
+	hal_write32(0xddccbbaaU, base_va + MAC_ADDRESS0_LOW);
 	hal_write32(0U
 			| DROP_NON_TCP_UDP(0U)
 			| L3_L4_FILTER_ENABLE(0U)
@@ -139,12 +139,13 @@ errno_t pfe_emac_cfg_init(void *base_va, pfe_emac_mii_mode_t mode,  pfe_emac_spe
 			| HASH_MULTICAST(1U)
 			| HASH_UNICAST(1U)
 			| PROMISCUOUS_MODE(0U)
-			, (addr_t)base_va + MAC_PACKET_FILTER);
+			, base_va + MAC_PACKET_FILTER);
 
-	reg = hal_read32((addr_t)base_va + MAC_Q0_TX_FLOW_CTRL);
+	hal_write32(0x1U, base_va + MTL_DPP_CONTROL);
+	reg = hal_read32(base_va + MAC_Q0_TX_FLOW_CTRL);
 	reg &= ~TX_FLOW_CONTROL_ENABLE(1U);
-	hal_write32(reg, (addr_t)base_va + MAC_Q0_TX_FLOW_CTRL);
-	hal_write32(0U, (addr_t)base_va + MAC_INTERRUPT_ENABLE);
+	hal_write32(reg, base_va + MAC_Q0_TX_FLOW_CTRL);
+	hal_write32(0U, base_va + MAC_INTERRUPT_ENABLE);
 	hal_write32(0U
 			| ARP_OFFLOAD_ENABLE(0U)
 			| SA_INSERT_REPLACE_CONTROL(CTRL_BY_SIGNALS)
@@ -171,18 +172,17 @@ errno_t pfe_emac_cfg_init(void *base_va, pfe_emac_mii_mode_t mode,  pfe_emac_spe
 			| PREAMBLE_LENGTH_TX(PREAMBLE_7B)
 			| TRANSMITTER_ENABLE(0U)
 			| RECEIVER_ENABLE(0U)
-			, (addr_t)base_va + MAC_CONFIGURATION);
+			, base_va + MAC_CONFIGURATION);
 
 	hal_write32((uint32_t)0U
 			| FORWARD_ERROR_PACKETS(1U)
-			, (addr_t)base_va + MTL_RXQ0_OPERATION_MODE);
+			, base_va + MTL_RXQ0_OPERATION_MODE);
 
-	hal_write32(0U, (addr_t)base_va + MTL_TXQ0_OPERATION_MODE);
-	hal_write32(GIANT_PACKET_SIZE_LIMIT(0x3000U), (addr_t)base_va + MAC_EXT_CONFIGURATION);
-	hal_write32(0x1U, (addr_t)base_va + MTL_DPP_CONTROL);
+	hal_write32(0U, base_va + MTL_TXQ0_OPERATION_MODE);
+	hal_write32(GIANT_PACKET_SIZE_LIMIT(1518U), base_va + MAC_EXT_CONFIGURATION);
 
-	hal_write32(0U, (addr_t)base_va + MAC_TIMESTAMP_CONTROL);
-	hal_write32(0U, (addr_t)base_va + MAC_SUB_SECOND_INCREMENT);
+	hal_write32(0U, base_va + MAC_TIMESTAMP_CONTROL);
+	hal_write32(0U, base_va + MAC_SUB_SECOND_INCREMENT);
 
 	/*	Set speed */
 	if (EOK != pfe_emac_cfg_set_speed(base_va, speed))
@@ -213,7 +213,7 @@ errno_t pfe_emac_cfg_init(void *base_va, pfe_emac_mii_mode_t mode,  pfe_emac_spe
  * @param[in]	o_clk_hz Requested nominal output frequency
  * @param[in]	en TRUE means ENABLE, FALSE means DISABLE
  */
-errno_t pfe_emac_cfg_enable_ts(void *base_va, bool_t eclk, uint32_t i_clk_hz, uint32_t o_clk_hz)
+errno_t pfe_emac_cfg_enable_ts(addr_t base_va, bool_t eclk, uint32_t i_clk_hz, uint32_t o_clk_hz)
 {
 	uint64_t val = 1000000000000ULL;
 	uint32_t ss = 0U, sns = 0U;
@@ -229,8 +229,8 @@ errno_t pfe_emac_cfg_enable_ts(void *base_va, bool_t eclk, uint32_t i_clk_hz, ui
 			| DIGITAL_ROLLOVER(1U)
 			| FINE_UPDATE(1U)
 			| ENABLE_TIMESTAMP(1U)
-			| ENABLE_TIMESTAMP_FOR_All(1U), (addr_t)base_va + MAC_TIMESTAMP_CONTROL);
-	regval = hal_read32((addr_t)base_va + MAC_TIMESTAMP_CONTROL);
+			| ENABLE_TIMESTAMP_FOR_All(1U), base_va + MAC_TIMESTAMP_CONTROL);
+	regval = hal_read32(base_va + MAC_TIMESTAMP_CONTROL);
 
 	if (eclk == TRUE)
 	{
@@ -244,7 +244,7 @@ errno_t pfe_emac_cfg_enable_ts(void *base_va, bool_t eclk, uint32_t i_clk_hz, ui
 	/*	Get sub-nanosecond part */
 	sns = (val / (uint64_t)o_clk_hz) - (((val / 1000ULL) / (uint64_t)o_clk_hz) * 1000ULL);
 
-	NXP_LOG_INFO("IEEE1588: Input Clock: %dHz, Output: %dHz, Accuracy: %d.%dns\n", i_clk_hz, o_clk_hz, ss, sns);
+	NXP_LOG_INFO("IEEE1588: Input Clock: %uHz, Output: %uHz, Accuracy: %u.%uns\n", (uint_t)i_clk_hz, (uint_t)o_clk_hz, (uint_t)ss, (uint_t)sns);
 
 	if (0U == (regval & DIGITAL_ROLLOVER(1)))
 	{
@@ -255,17 +255,17 @@ errno_t pfe_emac_cfg_enable_ts(void *base_va, bool_t eclk, uint32_t i_clk_hz, ui
 	sns = (sns * 256U) / 1000U;
 
 	/*	Set 'increment' values */
-	hal_write32(((uint32_t)ss << 16U) | ((uint32_t)sns << 8U), (addr_t)base_va + MAC_SUB_SECOND_INCREMENT);
+	hal_write32(((uint32_t)ss << 16U) | ((uint32_t)sns << 8U), base_va + MAC_SUB_SECOND_INCREMENT);
 
 	/*	Set initial 'addend' value */
-	hal_write32(((uint64_t)o_clk_hz << 32U) / (uint64_t)i_clk_hz, (addr_t)base_va + MAC_TIMESTAMP_ADDEND);
+	hal_write32(((uint64_t)o_clk_hz << 32U) / (uint64_t)i_clk_hz, base_va + MAC_TIMESTAMP_ADDEND);
 
-	regval = hal_read32((addr_t)base_va + MAC_TIMESTAMP_CONTROL);
-	hal_write32(regval | UPDATE_ADDEND(1), (addr_t)base_va + MAC_TIMESTAMP_CONTROL);
+	regval = hal_read32(base_va + MAC_TIMESTAMP_CONTROL);
+	hal_write32(regval | UPDATE_ADDEND(1), base_va + MAC_TIMESTAMP_CONTROL);
 	ii = 0U;
 	do
 	{
-		regval = hal_read32((addr_t)base_va + MAC_TIMESTAMP_CONTROL);
+		regval = hal_read32(base_va + MAC_TIMESTAMP_CONTROL);
 		oal_time_usleep(100U);
 		if (((regval & UPDATE_ADDEND(1)) != 0U) && (ii < 10U))
 		{
@@ -283,17 +283,17 @@ errno_t pfe_emac_cfg_enable_ts(void *base_va, bool_t eclk, uint32_t i_clk_hz, ui
 	}
 
 	/*	Set 'update' values */
-	hal_write32(0U, (addr_t)base_va + MAC_STSU);
-	hal_write32(0U, (addr_t)base_va + MAC_STNSU);
+	hal_write32(0U, base_va + MAC_STSU);
+	hal_write32(0U, base_va + MAC_STNSU);
 
-	regval = hal_read32((addr_t)base_va + MAC_TIMESTAMP_CONTROL);
+	regval = hal_read32(base_va + MAC_TIMESTAMP_CONTROL);
 	regval |= INITIALIZE_TIMESTAMP(1);
-	hal_write32(regval, (addr_t)base_va + MAC_TIMESTAMP_CONTROL);
+	hal_write32(regval, base_va + MAC_TIMESTAMP_CONTROL);
 
 	ii = 0U;
 	do
 	{
-		regval = hal_read32((addr_t)base_va + MAC_TIMESTAMP_CONTROL);
+		regval = hal_read32(base_va + MAC_TIMESTAMP_CONTROL);
 		oal_time_usleep(100U);
 		if (((regval & INITIALIZE_TIMESTAMP(1)) != 0U) && (ii < 10U))
 		{
@@ -316,9 +316,9 @@ errno_t pfe_emac_cfg_enable_ts(void *base_va, bool_t eclk, uint32_t i_clk_hz, ui
 /**
  * @brief	Disable timestamping
  */
-void pfe_emac_cfg_disable_ts(void *base_va)
+void pfe_emac_cfg_disable_ts(addr_t base_va)
 {
-	hal_write32(0U, (addr_t)base_va + MAC_TIMESTAMP_CONTROL);
+	hal_write32(0U, base_va + MAC_TIMESTAMP_CONTROL);
 }
 
 /**
@@ -327,7 +327,7 @@ void pfe_emac_cfg_disable_ts(void *base_va)
  * @param[in]	ppb Frequency change in [ppb]
  * @param[in]	sgn If TRUE then 'ppb' is positive, else it is negative
  */
-errno_t pfe_emac_cfg_adjust_ts_freq(void *base_va, uint32_t i_clk_hz, uint32_t o_clk_hz, uint32_t ppb, bool_t sgn)
+errno_t pfe_emac_cfg_adjust_ts_freq(addr_t base_va, uint32_t i_clk_hz, uint32_t o_clk_hz, uint32_t ppb, bool_t sgn)
 {
 	uint32_t nil, delta, regval, ii;
 
@@ -364,7 +364,7 @@ errno_t pfe_emac_cfg_adjust_ts_freq(void *base_va, uint32_t i_clk_hz, uint32_t o
 	}
 
 	/*	Update the 'addend' value */
-	hal_write32(regval, (addr_t)base_va + MAC_TIMESTAMP_ADDEND);
+	hal_write32(regval, base_va + MAC_TIMESTAMP_ADDEND);
 
 	/*	Request update 'addend' value */
 	regval = hal_read32((addr_t)base_va + MAC_TIMESTAMP_CONTROL);
@@ -374,7 +374,7 @@ errno_t pfe_emac_cfg_adjust_ts_freq(void *base_va, uint32_t i_clk_hz, uint32_t o
 	ii = 0U;
 	do
 	{
-		regval = hal_read32((addr_t)base_va + MAC_TIMESTAMP_CONTROL);
+		regval = hal_read32(base_va + MAC_TIMESTAMP_CONTROL);
 		oal_time_usleep(100U);
 		if (((regval & UPDATE_ADDEND(1)) != 0U) && (ii < 10U))
 		{
@@ -400,10 +400,10 @@ errno_t pfe_emac_cfg_adjust_ts_freq(void *base_va, uint32_t i_clk_hz, uint32_t o
  * @param[in,out]	sec Seconds
  * @param[in,out]	nsec NanoSeconds
  */
-void pfe_emac_cfg_get_ts_time(void *base_va, uint32_t *sec, uint32_t *nsec)
+void pfe_emac_cfg_get_ts_time(addr_t base_va, uint32_t *sec, uint32_t *nsec)
 {
-	*sec = hal_read32((addr_t)base_va + MAC_SYSTEM_TIME_SECONDS);
-	*nsec = hal_read32((addr_t)base_va + MAC_SYSTEM_TIME_NANOSECONDS);
+	*sec = hal_read32(base_va + MAC_SYSTEM_TIME_SECONDS);
+	*nsec = hal_read32(base_va + MAC_SYSTEM_TIME_NANOSECONDS);
 }
 
 /**
@@ -413,7 +413,7 @@ void pfe_emac_cfg_get_ts_time(void *base_va, uint32_t *sec, uint32_t *nsec)
  * @param[in]	sec Seconds
  * @param[in]	nsec NanoSeconds
  */
-errno_t pfe_emac_cfg_set_ts_time(void *base_va, uint32_t sec, uint32_t nsec)
+errno_t pfe_emac_cfg_set_ts_time(addr_t base_va, uint32_t sec, uint32_t nsec)
 {
 	uint32_t regval, ii;
 
@@ -422,19 +422,19 @@ errno_t pfe_emac_cfg_set_ts_time(void *base_va, uint32_t sec, uint32_t nsec)
 		return EINVAL;
 	}
 
-	hal_write32(sec, (addr_t)base_va + MAC_STSU);
-	hal_write32(nsec, (addr_t)base_va + MAC_STNSU);
+	hal_write32(sec, base_va + MAC_STSU);
+	hal_write32(nsec, base_va + MAC_STNSU);
 
 	/*	Initialize time */
-	regval = hal_read32((addr_t)base_va + MAC_TIMESTAMP_CONTROL);
+	regval = hal_read32(base_va + MAC_TIMESTAMP_CONTROL);
 	regval |= INITIALIZE_TIMESTAMP(1);
-	hal_write32(regval, (addr_t)base_va + MAC_TIMESTAMP_CONTROL);
+	hal_write32(regval, base_va + MAC_TIMESTAMP_CONTROL);
 
 	/*	Wait for completion */
 	ii = 0U;
 	do
 	{
-		regval = hal_read32((addr_t)base_va + MAC_TIMESTAMP_CONTROL);
+		regval = hal_read32(base_va + MAC_TIMESTAMP_CONTROL);
 		oal_time_usleep(100U);
 		if (((regval & INITIALIZE_TIMESTAMP(1)) != 0U) && (ii < 10U))
 		{
@@ -461,7 +461,7 @@ errno_t pfe_emac_cfg_set_ts_time(void *base_va, uint32_t sec, uint32_t nsec)
  * @param[in]	nsec NanoSeconds
  * @param[in]	sgn Sing of the adjustment (TRUE - positive, FALSE - negative)
  */
-errno_t pfe_emac_cfg_adjust_ts_time(void *base_va, uint32_t sec, uint32_t nsec, bool_t sgn)
+errno_t pfe_emac_cfg_adjust_ts_time(addr_t base_va, uint32_t sec, uint32_t nsec, bool_t sgn)
 {
 	uint32_t regval, ii;
 	uint32_t nsec_temp = nsec;
@@ -472,7 +472,7 @@ errno_t pfe_emac_cfg_adjust_ts_time(void *base_va, uint32_t sec, uint32_t nsec,
 		return EINVAL;
 	}
 
-	regval = hal_read32((addr_t)base_va + MAC_TIMESTAMP_CONTROL);
+	regval = hal_read32(base_va + MAC_TIMESTAMP_CONTROL);
 
 	if (!sgn)
 	{
@@ -496,19 +496,19 @@ errno_t pfe_emac_cfg_adjust_ts_time(void *base_va, uint32_t sec, uint32_t nsec,
 		}
 	}
 
-	hal_write32(sec_temp, (addr_t)base_va + MAC_STSU);
-	hal_write32(ADDSUB(!sgn) | nsec_temp, (addr_t)base_va + MAC_STNSU);
+	hal_write32(sec_temp, base_va + MAC_STSU);
+	hal_write32(ADDSUB(!sgn) | nsec_temp, base_va + MAC_STNSU);
 
 	/*	Trigger the update */
-	regval = hal_read32((addr_t)base_va + MAC_TIMESTAMP_CONTROL);
+	regval = hal_read32(base_va + MAC_TIMESTAMP_CONTROL);
 	regval |= UPDATE_TIMESTAMP(1);
-	hal_write32(regval, (addr_t)base_va + MAC_TIMESTAMP_CONTROL);
+	hal_write32(regval, base_va + MAC_TIMESTAMP_CONTROL);
 
 	/*	Wait for completion */
 	ii = 0U;
 	do
 	{
-		regval = hal_read32((addr_t)base_va + MAC_TIMESTAMP_CONTROL);
+		regval = hal_read32(base_va + MAC_TIMESTAMP_CONTROL);
 		oal_time_usleep(100U);
 		if (((regval & UPDATE_TIMESTAMP(1)) != 0U) && (ii < 10U))
 		{
@@ -528,9 +528,9 @@ errno_t pfe_emac_cfg_adjust_ts_time(void *base_va, uint32_t sec, uint32_t nsec,
 	return EOK;
 }
 
-void pfe_emac_cfg_tx_disable(void *base_va)
+void pfe_emac_cfg_tx_disable(addr_t base_va)
 {
-	hal_write32(0U, (addr_t)base_va + MAC_TIMESTAMP_CONTROL);
+	hal_write32(0U, base_va + MAC_TIMESTAMP_CONTROL);
 }
 
 /**
@@ -539,9 +539,9 @@ void pfe_emac_cfg_tx_disable(void *base_va)
  * @param[in]	duplex Duplex type to be configured @see pfe_emac_duplex_t
  * @return		EOK if success, error code when invalid configuration is requested
  */
-errno_t pfe_emac_cfg_set_duplex(void *base_va, pfe_emac_duplex_t duplex)
+errno_t pfe_emac_cfg_set_duplex(addr_t base_va, pfe_emac_duplex_t duplex)
 {
-	uint32_t reg = hal_read32((addr_t)base_va + MAC_CONFIGURATION) & ~(DUPLEX_MODE(1U));
+	uint32_t reg = hal_read32(base_va + MAC_CONFIGURATION) & ~(DUPLEX_MODE(1U));
 	errno_t ret = EOK;
 
 	switch (duplex)
@@ -564,7 +564,7 @@ errno_t pfe_emac_cfg_set_duplex(void *base_va, pfe_emac_duplex_t duplex)
 	}
 	if(ret == EOK)
 	{
-		hal_write32(reg, (addr_t)base_va + MAC_CONFIGURATION);
+		hal_write32(reg, base_va + MAC_CONFIGURATION);
 	}
 
 	return ret;
@@ -576,7 +576,7 @@ errno_t pfe_emac_cfg_set_duplex(void *base_va, pfe_emac_duplex_t duplex)
  * @param[in]	mode MII mode to be configured @see pfe_emac_mii_mode_t
  * @return		EOK if success, error code when invalid configuration is requested
  */
-errno_t pfe_emac_cfg_set_mii_mode(void *base_va, pfe_emac_mii_mode_t mode)
+errno_t pfe_emac_cfg_set_mii_mode(addr_t base_va, pfe_emac_mii_mode_t mode)
 {
 	/*
 		 The PHY mode selection is done using a HW interface. See the "phy_intf_sel" signal.
@@ -594,9 +594,9 @@ errno_t pfe_emac_cfg_set_mii_mode(void *base_va, pfe_emac_mii_mode_t mode)
  * @param[in]	speed Speed to be configured @see pfe_emac_speed_t
  * @return		EOK if success, error code when invalid configuration is requested
  */
-errno_t pfe_emac_cfg_set_speed(void *base_va, pfe_emac_speed_t speed)
+errno_t pfe_emac_cfg_set_speed(addr_t base_va, pfe_emac_speed_t speed)
 {
-	uint32_t reg = hal_read32((addr_t)base_va + MAC_CONFIGURATION) & ~(PORT_SELECT(1U) | SPEED(1U));
+	uint32_t reg = hal_read32(base_va + MAC_CONFIGURATION) & ~(PORT_SELECT(1U) | SPEED(1U));
 	errno_t ret = EOK;
 
 	switch (speed)
@@ -636,22 +636,19 @@ errno_t pfe_emac_cfg_set_speed(void *base_va, pfe_emac_speed_t speed)
 
 	if(ret == EOK)
 	{
-		hal_write32(reg, (addr_t)base_va + MAC_CONFIGURATION);
+		hal_write32(reg, base_va + MAC_CONFIGURATION);
 	}
 
 	return ret;
 }
 
-errno_t pfe_emac_cfg_get_link_config(void *base_va, pfe_emac_speed_t *speed, pfe_emac_duplex_t *duplex)
+errno_t pfe_emac_cfg_get_link_config(addr_t base_va, pfe_emac_speed_t *speed, pfe_emac_duplex_t *duplex)
 {
-	uint32_t reg = hal_read32((addr_t)base_va + MAC_CONFIGURATION);
+	uint32_t reg = hal_read32(base_va + MAC_CONFIGURATION);
 
 	/* speed */
 	switch (GET_LINE_SPEED(reg))
 	{
-		case 0x0U:
-			*speed = EMAC_SPEED_1000_MBPS;
-			break;
 		case 0x01U:
 			*speed = EMAC_SPEED_2500_MBPS;
 			break;
@@ -661,6 +658,7 @@ errno_t pfe_emac_cfg_get_link_config(void *base_va, pfe_emac_speed_t *speed, pfe
 		case 0x03U:
 			*speed = EMAC_SPEED_100_MBPS;
 			break;
+		case 0x0U:
 		default:
 			*speed = EMAC_SPEED_1000_MBPS;
 			break;
@@ -680,16 +678,13 @@ errno_t pfe_emac_cfg_get_link_config(void *base_va, pfe_emac_speed_t *speed, pfe
  * @param[out]	link Current link state
  * @return		EOK if success
  */
-errno_t pfe_emac_cfg_get_link_status(void *base_va, pfe_emac_link_speed_t *link_speed, pfe_emac_duplex_t *duplex, bool_t *link)
+errno_t pfe_emac_cfg_get_link_status(addr_t base_va, pfe_emac_link_speed_t *link_speed, pfe_emac_duplex_t *duplex, bool_t *link)
 {
-	uint32_t reg = hal_read32((addr_t)base_va + MAC_PHYIF_CONTROL_STATUS);
+	uint32_t reg = hal_read32(base_va + MAC_PHYIF_CONTROL_STATUS);
 
 	/* speed */
 	switch (LNKSPEED(reg))
 	{
-		case 0x0U:
-			*link_speed = EMAC_LINK_SPEED_2_5_MHZ;
-			break;
 		case 0x01U:
 			*link_speed = EMAC_LINK_SPEED_25_MHZ;
 			break;
@@ -699,6 +694,7 @@ errno_t pfe_emac_cfg_get_link_status(void *base_va, pfe_emac_link_speed_t *link_
 		case 0x03U:
 			*link_speed = EMAC_LINK_SPEED_INVALID;
 			break;
+		case 0x0U:
 		default:
 			*link_speed = EMAC_LINK_SPEED_2_5_MHZ;
 			break;
@@ -719,7 +715,7 @@ errno_t pfe_emac_cfg_get_link_status(void *base_va, pfe_emac_link_speed_t *link_
  * @param[in]	len The new maximum frame length
  * @return		EOK if success, error code if invalid value is requested
  */
-errno_t pfe_emac_cfg_set_max_frame_length(void *base_va, uint32_t len)
+errno_t pfe_emac_cfg_set_max_frame_length(addr_t base_va, uint32_t len)
 {
 	uint32_t reg, maxlen = 0U;
 	bool_t je, s2kp, gpslce, edvlp;
@@ -730,12 +726,12 @@ errno_t pfe_emac_cfg_set_max_frame_length(void *base_va, uint32_t len)
 		particular parameters (JE, S2KP, GPSLCE, DVLP, and GPSL must be changed).
 	*/
 
-	reg = hal_read32((addr_t)base_va + MAC_CONFIGURATION);
+	reg = hal_read32(base_va + MAC_CONFIGURATION);
 	je = !!(reg & JUMBO_PACKET_ENABLE(1U));
 	s2kp = !!(reg & SUPPORT_2K_PACKETS(1U));
 	gpslce = !!(reg & GIANT_PACKET_LIMIT_CONTROL(1U));
 
-	reg = hal_read32((addr_t)base_va + MAC_VLAN_TAG_CTRL);
+	reg = hal_read32(base_va + MAC_VLAN_TAG_CTRL);
 	edvlp = !!(reg & ENABLE_DOUBLE_VLAN(1U));
 
 	if (je && edvlp)
@@ -750,7 +746,7 @@ errno_t pfe_emac_cfg_set_max_frame_length(void *base_va, uint32_t len)
 
 	if (!je && !s2kp && gpslce && edvlp)
 	{
-		reg = hal_read32((addr_t)base_va + MAC_EXT_CONFIGURATION);
+		reg = hal_read32(base_va + MAC_EXT_CONFIGURATION);
 		maxlen = reg & GIANT_PACKET_SIZE_LIMIT((uint32_t)-1);
 		maxlen += 8U;
 	}
@@ -767,7 +763,7 @@ errno_t pfe_emac_cfg_set_max_frame_length(void *base_va, uint32_t len)
 
 	if (!je && !s2kp && gpslce && !edvlp)
 	{
-		reg = hal_read32((addr_t)base_va + MAC_EXT_CONFIGURATION);
+		reg = hal_read32(base_va + MAC_EXT_CONFIGURATION);
 		maxlen = reg & GIANT_PACKET_SIZE_LIMIT((uint32_t)-1);
 		maxlen += 4U;
 	}
@@ -792,7 +788,7 @@ errno_t pfe_emac_cfg_set_max_frame_length(void *base_va, uint32_t len)
  * @param[in]	slot Index of slot where the address shall be written
  * @note		Maximum number of slots is given by EMAC_CFG_INDIVIDUAL_ADDR_SLOTS_COUNT
  */
-void pfe_emac_cfg_write_addr_slot(void *base_va, pfe_mac_addr_t addr, uint8_t slot)
+void pfe_emac_cfg_write_addr_slot(addr_t base_va, const pfe_mac_addr_t addr, uint8_t slot)
 {
 	uint32_t bottom = ((uint32_t)addr[3] << 24U) | ((uint32_t)addr[2] << 16U) | ((uint32_t)addr[1] << 8U) | ((uint32_t)addr[0] << 0U);
 	uint32_t top = ((uint32_t)addr[5] << 8U) | ((uint32_t)addr[4] << 0U);
@@ -803,10 +799,10 @@ void pfe_emac_cfg_write_addr_slot(void *base_va, pfe_mac_addr_t addr, uint8_t sl
 		top |= 0x80000000U;
 	}
 
-	hal_write32(top, (addr_t)base_va + MAC_ADDRESS_HIGH(slot));
-	hal_write32(bottom, (addr_t)base_va + MAC_ADDRESS_LOW(slot));
+	hal_write32(top, base_va + MAC_ADDRESS_HIGH(slot));
+	hal_write32(bottom, base_va + MAC_ADDRESS_LOW(slot));
 	oal_time_usleep(10);
-	hal_write32(bottom, (addr_t)base_va + MAC_ADDRESS_LOW(slot));
+	hal_write32(bottom, base_va + MAC_ADDRESS_LOW(slot));
 }
 
 /**
@@ -815,7 +811,7 @@ void pfe_emac_cfg_write_addr_slot(void *base_va, pfe_mac_addr_t addr, uint8_t sl
  * @param[in]	addr The MAC address to compute the hash for
  * @retval		The hash value as represented/used by the HW
  */
-uint32_t pfe_emac_cfg_get_hash(void *base_va, pfe_mac_addr_t addr)
+uint32_t pfe_emac_cfg_get_hash(addr_t base_va, const pfe_mac_addr_t addr)
 {
 	(void)base_va;
 
@@ -828,14 +824,14 @@ uint32_t pfe_emac_cfg_get_hash(void *base_va, pfe_mac_addr_t addr)
  * @param[in]	hash The hash value
  * @param[in]	en TRUE means ENABLE, FALSE means DISABLE
  */
-void pfe_emac_cfg_set_uni_group(void *base_va, uint32_t hash, bool_t en)
+void pfe_emac_cfg_set_uni_group(addr_t base_va, uint32_t hash, bool_t en)
 {
 	uint32_t reg;
 	uint32_t val = (hash & 0xfc000000U) >> 26U;
 	uint8_t hash_table_idx = ((uint8_t)val & 0x40U) >> 6U;
 	uint8_t pos = ((uint8_t)val & 0x1fU);
 
-	reg = hal_read32((addr_t)base_va + MAC_HASH_TABLE_REG(hash_table_idx));
+	reg = hal_read32(base_va + MAC_HASH_TABLE_REG(hash_table_idx));
 
 	if (en)
 	{
@@ -846,10 +842,10 @@ void pfe_emac_cfg_set_uni_group(void *base_va, uint32_t hash, bool_t en)
 		reg &= ~((uint32_t)1U << pos);
 	}
 
-	hal_write32(reg, (addr_t)base_va + MAC_HASH_TABLE_REG(hash_table_idx));
+	hal_write32(reg, base_va + MAC_HASH_TABLE_REG(hash_table_idx));
 	/*	Wait at least 4 clock cycles ((G)MII) */
 	oal_time_usleep(10);
-	hal_write32(reg, (addr_t)base_va + MAC_HASH_TABLE_REG(hash_table_idx));
+	hal_write32(reg, base_va + MAC_HASH_TABLE_REG(hash_table_idx));
 }
 
 /**
@@ -858,7 +854,7 @@ void pfe_emac_cfg_set_uni_group(void *base_va, uint32_t hash, bool_t en)
  * @param[in]	hash The hash value
  * @param[in]	en TRUE means ENABLE, FALSE means DISABLE
  */
-void pfe_emac_cfg_set_multi_group(void *base_va, uint32_t hash, bool_t en)
+void pfe_emac_cfg_set_multi_group(addr_t base_va, uint32_t hash, bool_t en)
 {
 	pfe_emac_cfg_set_uni_group(base_va, hash, en);
 }
@@ -868,13 +864,13 @@ void pfe_emac_cfg_set_multi_group(void *base_va, uint32_t hash, bool_t en)
  * @param[in]	base_va Base address of MAC register space (virtual)
  * @param		en TRUE means ENABLE, FALSE means DISABLE
  */
-void pfe_emac_cfg_set_loopback(void *base_va, bool_t en)
+void pfe_emac_cfg_set_loopback(addr_t base_va, bool_t en)
 {
-	uint32_t reg = hal_read32((addr_t)base_va + MAC_CONFIGURATION) & ~(LOOPBACK_MODE(1));
+	uint32_t reg = hal_read32(base_va + MAC_CONFIGURATION) & ~(LOOPBACK_MODE(1));
 
 	reg |= LOOPBACK_MODE(en);
 
-	hal_write32(reg, (addr_t)base_va + MAC_CONFIGURATION);
+	hal_write32(reg, base_va + MAC_CONFIGURATION);
 }
 
 /**
@@ -882,13 +878,13 @@ void pfe_emac_cfg_set_loopback(void *base_va, bool_t en)
  * @param[in]	base_va Base address of MAC register space (virtual)
  * @param		en TRUE means ENABLE, FALSE means DISABLE
  */
-void pfe_emac_cfg_set_promisc_mode(void *base_va, bool_t en)
+void pfe_emac_cfg_set_promisc_mode(addr_t base_va, bool_t en)
 {
-	uint32_t reg = hal_read32((addr_t)base_va + MAC_PACKET_FILTER) & ~(PROMISCUOUS_MODE(1));
+	uint32_t reg = hal_read32(base_va + MAC_PACKET_FILTER) & ~(PROMISCUOUS_MODE(1));
 
 	reg |= PROMISCUOUS_MODE(en);
 
-	hal_write32(reg, (addr_t)base_va + MAC_PACKET_FILTER);
+	hal_write32(reg, base_va + MAC_PACKET_FILTER);
 }
 
 /**
@@ -896,13 +892,13 @@ void pfe_emac_cfg_set_promisc_mode(void *base_va, bool_t en)
  * @param[in]	base_va Base address of MAC register space (virtual)
  * @param		en TRUE means ENABLE, FALSE means DISABLE
  */
-void pfe_emac_cfg_set_allmulti_mode(void *base_va, bool_t en)
+void pfe_emac_cfg_set_allmulti_mode(addr_t base_va, bool_t en)
 {
-	uint32_t reg = hal_read32((addr_t)base_va + MAC_PACKET_FILTER) & ~(PASS_ALL_MULTICAST(1));
+	uint32_t reg = hal_read32(base_va + MAC_PACKET_FILTER) & ~(PASS_ALL_MULTICAST(1));
 
 	reg |= PASS_ALL_MULTICAST(en);
 
-	hal_write32(reg, (addr_t)base_va + MAC_PACKET_FILTER);
+	hal_write32(reg, base_va + MAC_PACKET_FILTER);
 }
 
 /**
@@ -910,13 +906,13 @@ void pfe_emac_cfg_set_allmulti_mode(void *base_va, bool_t en)
  * @param[in]	base_va Base address of MAC register space (virtual)
  * @param		en TRUE means ENABLE, FALSE means DISABLE
  */
-void pfe_emac_cfg_set_broadcast(void *base_va, bool_t en)
+void pfe_emac_cfg_set_broadcast(addr_t base_va, bool_t en)
 {
-	uint32_t reg = hal_read32((addr_t)base_va + MAC_PACKET_FILTER) & ~(DISABLE_BROADCAST_PACKETS(1));
+	uint32_t reg = hal_read32(base_va + MAC_PACKET_FILTER) & ~(DISABLE_BROADCAST_PACKETS(1));
 
 	reg |= DISABLE_BROADCAST_PACKETS(!en);
 
-	hal_write32(reg, (addr_t)base_va + MAC_PACKET_FILTER);
+	hal_write32(reg, base_va + MAC_PACKET_FILTER);
 }
 
 /**
@@ -924,29 +920,43 @@ void pfe_emac_cfg_set_broadcast(void *base_va, bool_t en)
  * @param[in]	base_va Base address of MAC register space (virtual)
  * @param		en TRUE means ENABLE, FALSE means DISABLE
  */
-void pfe_emac_cfg_set_enable(void *base_va, bool_t en)
+void pfe_emac_cfg_set_enable(addr_t base_va, bool_t en)
 {
-	uint32_t reg = hal_read32((addr_t)base_va + MAC_CONFIGURATION);
+	uint32_t reg = hal_read32(base_va + MAC_CONFIGURATION);
 
 	reg &= ~(TRANSMITTER_ENABLE(1) | RECEIVER_ENABLE(1));
 	reg |= TRANSMITTER_ENABLE(en) | RECEIVER_ENABLE(en);
 
-	hal_write32(reg, (addr_t)base_va + MAC_CONFIGURATION);
+	hal_write32(reg, base_va + MAC_CONFIGURATION);
+}
+
+void pfe_emac_cfg_get_tx_flow_control(addr_t base_va, bool_t* en)
+{
+	uint32_t reg = hal_read32(base_va + MAC_Q0_TX_FLOW_CTRL);
+
+	*en = reg & TX_FLOW_CONTROL_ENABLE(1);
+}
+
+void pfe_emac_cfg_get_rx_flow_control(addr_t base_va, bool_t* en)
+{
+	uint32_t reg = hal_read32(base_va + MAC_RX_FLOW_CTRL);
+
+	*en = reg & RX_FLOW_CONTROL_ENABLE(1);
 }
 
 /**
- * @brief		Enable/Disable the flow control
- * @details		Once enabled the MAC shall process PAUSE frames
+ * @brief		Enable/Disable the tx flow control
+ * @details		Once enabled the MAC shall send PAUSE frames
  * @param[in]	base_va Base address of MAC register space (virtual)
  * @param		en TRUE means ENABLE, FALSE means DISABLE
  */
-void pfe_emac_cfg_set_flow_control(void *base_va, bool_t en)
+void pfe_emac_cfg_set_tx_flow_control(addr_t base_va, bool_t en)
 {
 	uint32_t reg, ii=0U;
 
 	do
 	{
-		reg = hal_read32((addr_t)base_va + MAC_Q0_TX_FLOW_CTRL);
+		reg = hal_read32(base_va + MAC_Q0_TX_FLOW_CTRL);
 		oal_time_usleep(100U);
 		ii++;
 	} while ((reg & BUSY_OR_BACKPRESSURE_ACTIVE(1)) && (ii < 10U));
@@ -960,7 +970,26 @@ void pfe_emac_cfg_set_flow_control(void *base_va, bool_t en)
 	reg &= ~(TX_FLOW_CONTROL_ENABLE(1));
 	reg |= TX_FLOW_CONTROL_ENABLE(en);
 
-	hal_write32(reg, (addr_t)base_va + MAC_Q0_TX_FLOW_CTRL);
+	reg |= TX_PAUSE_TIME(DEFAULT_PAUSE_QUANTA);
+	reg |= TX_PAUSE_LOW_TRASHOLD(0x0);
+
+	hal_write32(reg, base_va + MAC_Q0_TX_FLOW_CTRL);
+}
+
+/**
+ * @brief               Enable/Disable the rx flow control
+ * @details             Once enabled the MAC shall process PAUSE frames
+ * @param[in]   base_va Base address of MAC register space (virtual)
+ * @param               en TRUE means ENABLE, FALSE means DISABLE
+ */
+void pfe_emac_cfg_set_rx_flow_control(addr_t base_va, bool_t en)
+{
+	int32_t reg =  hal_read32(base_va + MAC_RX_FLOW_CTRL);
+
+	reg &= ~(RX_FLOW_CONTROL_ENABLE(1));
+	reg |= RX_FLOW_CONTROL_ENABLE(en);
+
+	hal_write32(reg, base_va + MAC_RX_FLOW_CTRL);
 }
 
 /**
@@ -971,7 +1000,7 @@ void pfe_emac_cfg_set_flow_control(void *base_va, bool_t en)
  * @param[out]	val If success the the read value is written here (16 bit)
  * @retval		EOK Success
  */
-errno_t pfe_emac_cfg_mdio_read22(void *base_va, uint8_t pa, uint8_t ra, uint16_t *val)
+errno_t pfe_emac_cfg_mdio_read22(addr_t base_va, uint8_t pa, uint8_t ra, uint16_t *val)
 {
 	uint32_t reg;
 	uint32_t timeout = 500U;
@@ -1017,7 +1046,7 @@ errno_t pfe_emac_cfg_mdio_read22(void *base_va, uint8_t pa, uint8_t ra, uint16_t
  * @param[out]	val If success the the read value is written here (16-bit)
  * @retval		EOK Success
  */
-errno_t pfe_emac_cfg_mdio_read45(void *base_va, uint8_t pa, uint8_t dev, uint16_t ra, uint16_t *val)
+errno_t pfe_emac_cfg_mdio_read45(addr_t base_va, uint8_t pa, uint8_t dev, uint16_t ra, uint16_t *val)
 {
 	uint32_t reg;
 	uint32_t timeout = 500U;
@@ -1064,13 +1093,13 @@ errno_t pfe_emac_cfg_mdio_read45(void *base_va, uint8_t pa, uint8_t dev, uint16_
  * @param[in]	val Value to be written into the register (16 bit)
  * @retval		EOK Success
  */
-errno_t pfe_emac_cfg_mdio_write22(void *base_va, uint8_t pa, uint8_t ra, uint16_t val)
+errno_t pfe_emac_cfg_mdio_write22(addr_t base_va, uint8_t pa, uint8_t ra, uint16_t val)
 {
 	uint32_t reg;
 	uint32_t timeout = 500U;
 
 	reg = (uint32_t)GMII_DATA(val);
-	hal_write32(reg, (addr_t)base_va + MAC_MDIO_DATA);
+	hal_write32(reg, base_va + MAC_MDIO_DATA);
 
 	reg = GMII_BUSY(1U)
 				| CLAUSE45_ENABLE(0U)
@@ -1084,8 +1113,8 @@ errno_t pfe_emac_cfg_mdio_write22(void *base_va, uint8_t pa, uint8_t ra, uint16_
 				| BACK_TO_BACK(0U)
 				| PREAMBLE_SUPPRESSION(0U);
 
-	hal_write32(reg, (addr_t)base_va + MAC_MDIO_ADDRESS);
-	while(GMII_BUSY(1) == (hal_read32((addr_t)base_va + MAC_MDIO_ADDRESS) & GMII_BUSY(1)))
+	hal_write32(reg, base_va + MAC_MDIO_ADDRESS);
+	while(GMII_BUSY(1) == (hal_read32(base_va + MAC_MDIO_ADDRESS) & GMII_BUSY(1)))
 	{
 		if (timeout-- == 0U)
 		{
@@ -1106,7 +1135,7 @@ errno_t pfe_emac_cfg_mdio_write22(void *base_va, uint8_t pa, uint8_t ra, uint16_
  * @param[in]	val Value to be written (16-bit)
  * @retval		EOK Success
  */
-errno_t pfe_emac_cfg_mdio_write45(void *base_va, uint8_t pa, uint8_t dev, uint16_t ra, uint16_t val)
+errno_t pfe_emac_cfg_mdio_write45(addr_t base_va, uint8_t pa, uint8_t dev, uint16_t ra, uint16_t val)
 {
 	uint32_t reg;
 	uint32_t timeout = 500U;
@@ -1140,6 +1169,26 @@ errno_t pfe_emac_cfg_mdio_write45(void *base_va, uint8_t pa, uint8_t dev, uint16
 	return EOK;
 }
 
+/**
+ * @brief		Get number of transmitted packets
+ * @param[in]	base_va Base address of EMAC register space (virtual)
+ * @return		Number of transmitted packets
+ */
+uint32_t pfe_emac_cfg_get_tx_cnt(addr_t base_va)
+{
+	return hal_read32(base_va + TX_PACKET_COUNT_GOOD_BAD);
+}
+
+/**
+ * @brief		Get number of received packets
+ * @param[in]	base_va Base address of EMAC register space (virtual)
+ * @return		Number of received packets
+ */
+uint32_t pfe_emac_cfg_get_rx_cnt(addr_t base_va)
+{
+	return hal_read32(base_va + RX_PACKETS_COUNT_GOOD_BAD);
+}
+
 /**
  * @brief		Get EMAC statistics in text form
  * @details		This is a HW-specific function providing detailed text statistics
@@ -1150,7 +1199,7 @@ errno_t pfe_emac_cfg_mdio_write45(void *base_va, uint8_t pa, uint8_t dev, uint16
  * @param[in]	verb_level 	Verbosity level
  * @return		Number of bytes written to the buffer
  */
-uint32_t pfe_emac_cfg_get_text_stat(void *base_va, char_t *buf, uint32_t size, uint8_t verb_level)
+uint32_t pfe_emac_cfg_get_text_stat(addr_t base_va, char_t *buf, uint32_t size, uint8_t verb_level)
 {
 	uint32_t len = 0U;
 	uint32_t reg;
@@ -1158,7 +1207,7 @@ uint32_t pfe_emac_cfg_get_text_stat(void *base_va, char_t *buf, uint32_t size, u
 	pfe_emac_duplex_t duplex;
 
 #if defined(PFE_CFG_NULL_ARG_CHECK)
-	if (unlikely(NULL == base_va))
+	if (unlikely(NULL_ADDR == base_va))
 	{
 		NXP_LOG_ERROR("NULL argument received\n");
 		return 0U;
@@ -1167,151 +1216,151 @@ uint32_t pfe_emac_cfg_get_text_stat(void *base_va, char_t *buf, uint32_t size, u
 
 
 	/*	Get version */
-	reg = hal_read32((addr_t)base_va + MAC_VERSION);
+	reg = hal_read32(base_va + MAC_VERSION);
 	len += oal_util_snprintf(buf + len, size - len, "SNPVER                    : 0x%x\n", reg & 0xffU);
 	len += oal_util_snprintf(buf + len, size - len, "USERVER                   : 0x%x\n", (reg >> 8) & 0xffU);
 
-	reg = hal_read32((addr_t)base_va + RX_PACKETS_COUNT_GOOD_BAD);
+	reg = hal_read32(base_va + RX_PACKETS_COUNT_GOOD_BAD);
 	len += oal_util_snprintf(buf + len, size - len, "RX_PACKETS_COUNT_GOOD_BAD : 0x%x\n", reg);
-	reg = hal_read32((addr_t)base_va + TX_PACKET_COUNT_GOOD_BAD);
+	reg = hal_read32(base_va + TX_PACKET_COUNT_GOOD_BAD);
 	len += oal_util_snprintf(buf + len, size - len, "TX_PACKET_COUNT_GOOD_BAD  : 0x%x\n", reg);
 
 	(void)pfe_emac_cfg_get_link_config(base_va, &speed, &duplex);
-	reg = hal_read32((addr_t)base_va + MAC_CONFIGURATION);
+	reg = hal_read32(base_va + MAC_CONFIGURATION);
 	len += oal_util_snprintf(buf + len, size - len, "MAC_CONFIGURATION         : 0x%x [speed: %s]\n", reg, emac_speed_to_str(speed));
 
-	reg = (hal_read32((addr_t)base_va + MAC_HW_FEATURE0) >> 28U) & 0x07U;
+	reg = (hal_read32(base_va + MAC_HW_FEATURE0) >> 28U) & 0x07U;
 	len += oal_util_snprintf(buf + len, size - len, "ACTPHYSEL(MAC_HW_FEATURE0): %s\n", phy_mode_to_str(reg));
 
 	/* Error debugging */
 	if(verb_level >= 8U)
 	{
-		reg = hal_read32((addr_t)base_va + TX_UNDERFLOW_ERROR_PACKETS);
+		reg = hal_read32(base_va + TX_UNDERFLOW_ERROR_PACKETS);
 		len += oal_util_snprintf(buf + len, size - len, "TX_UNDERFLOW_ERROR_PACKETS        : 0x%x\n", reg);
-		reg = hal_read32((addr_t)base_va + TX_SINGLE_COLLISION_GOOD_PACKETS);
+		reg = hal_read32(base_va + TX_SINGLE_COLLISION_GOOD_PACKETS);
 		len += oal_util_snprintf(buf + len, size - len, "TX_SINGLE_COLLISION_GOOD_PACKETS  : 0x%x\n", reg);
-		reg = hal_read32((addr_t)base_va + TX_MULTIPLE_COLLISION_GOOD_PACKETS);
+		reg = hal_read32(base_va + TX_MULTIPLE_COLLISION_GOOD_PACKETS);
 		len += oal_util_snprintf(buf + len, size - len, "TX_MULTIPLE_COLLISION_GOOD_PACKETS: 0x%x\n", reg);
-		reg = hal_read32((addr_t)base_va + TX_DEFERRED_PACKETS);
+		reg = hal_read32(base_va + TX_DEFERRED_PACKETS);
 		len += oal_util_snprintf(buf + len, size - len, "TX_DEFERRED_PACKETS               : 0x%x\n", reg);
-		reg = hal_read32((addr_t)base_va + TX_LATE_COLLISION_PACKETS);
+		reg = hal_read32(base_va + TX_LATE_COLLISION_PACKETS);
 		len += oal_util_snprintf(buf + len, size - len, "TX_LATE_COLLISION_PACKETS         : 0x%x\n", reg);
-		reg = hal_read32((addr_t)base_va + TX_EXCESSIVE_COLLISION_PACKETS);
+		reg = hal_read32(base_va + TX_EXCESSIVE_COLLISION_PACKETS);
 		len += oal_util_snprintf(buf + len, size - len, "TX_EXCESSIVE_COLLISION_PACKETS    : 0x%x\n", reg);
-		reg = hal_read32((addr_t)base_va + TX_CARRIER_ERROR_PACKETS);
+		reg = hal_read32(base_va + TX_CARRIER_ERROR_PACKETS);
 		len += oal_util_snprintf(buf + len, size - len, "TX_CARRIER_ERROR_PACKETS          : 0x%x\n", reg);
-		reg = hal_read32((addr_t)base_va + TX_EXCESSIVE_DEFERRAL_ERROR);
+		reg = hal_read32(base_va + TX_EXCESSIVE_DEFERRAL_ERROR);
 		len += oal_util_snprintf(buf + len, size - len, "TX_EXCESSIVE_DEFERRAL_ERROR       : 0x%x\n", reg);
 
-		reg = hal_read32((addr_t)base_va + TX_OSIZE_PACKETS_GOOD);
+		reg = hal_read32(base_va + TX_OSIZE_PACKETS_GOOD);
 		len += oal_util_snprintf(buf + len, size - len, "TX_OSIZE_PACKETS_GOOD             : 0x%x\n", reg);
 
-		reg = hal_read32((addr_t)base_va + RX_CRC_ERROR_PACKETS);
+		reg = hal_read32(base_va + RX_CRC_ERROR_PACKETS);
 		len += oal_util_snprintf(buf + len, size - len, "RX_CRC_ERROR_PACKETS              : 0x%x\n", reg);
-		reg = hal_read32((addr_t)base_va + RX_ALIGNMENT_ERROR_PACKETS);
+		reg = hal_read32(base_va + RX_ALIGNMENT_ERROR_PACKETS);
 		len += oal_util_snprintf(buf + len, size - len, "RX_ALIGNMENT_ERROR_PACKETS        : 0x%x\n", reg);
-		reg = hal_read32((addr_t)base_va + RX_RUNT_ERROR_PACKETS);
+		reg = hal_read32(base_va + RX_RUNT_ERROR_PACKETS);
 		len += oal_util_snprintf(buf + len, size - len, "RX_RUNT_ERROR_PACKETS             : 0x%x\n", reg);
-		reg = hal_read32((addr_t)base_va + RX_JABBER_ERROR_PACKETS);
+		reg = hal_read32(base_va + RX_JABBER_ERROR_PACKETS);
 		len += oal_util_snprintf(buf + len, size - len, "RX_JABBER_ERROR_PACKETS           : 0x%x\n", reg);
-		reg = hal_read32((addr_t)base_va + RX_LENGTH_ERROR_PACKETS);
+		reg = hal_read32(base_va + RX_LENGTH_ERROR_PACKETS);
 		len += oal_util_snprintf(buf + len, size - len, "RX_LENGTH_ERROR_PACKETS           : 0x%x\n", reg);
-		reg = hal_read32((addr_t)base_va + RX_OUT_OF_RANGE_TYPE_PACKETS);
+		reg = hal_read32(base_va + RX_OUT_OF_RANGE_TYPE_PACKETS);
 		len += oal_util_snprintf(buf + len, size - len, "RX_OUT_OF_RANGE_TYPE_PACKETS      : 0x%x\n", reg);
-		reg = hal_read32((addr_t)base_va + RX_FIFO_OVERFLOW_PACKETS);
+		reg = hal_read32(base_va + RX_FIFO_OVERFLOW_PACKETS);
 		len += oal_util_snprintf(buf + len, size - len, "RX_FIFO_OVERFLOW_PACKETS          : 0x%x\n", reg);
-		reg = hal_read32((addr_t)base_va + RX_RECEIVE_ERROR_PACKETS);
+		reg = hal_read32(base_va + RX_RECEIVE_ERROR_PACKETS);
 		len += oal_util_snprintf(buf + len, size - len, "RX_RECEIVE_ERROR_PACKETS          : 0x%x\n", reg);
-		reg = hal_read32((addr_t)base_va + RX_RECEIVE_ERROR_PACKETS);
+		reg = hal_read32(base_va + RX_RECEIVE_ERROR_PACKETS);
 		len += oal_util_snprintf(buf + len, size - len, "RX_RECEIVE_ERROR_PACKETS          : 0x%x\n", reg);
 	}
 
 	/* Cast/vlan/flow control */
 	if(verb_level >= 3U)
 	{
-		reg = hal_read32((addr_t)base_va + TX_UNICAST_PACKETS_GOOD_BAD);
+		reg = hal_read32(base_va + TX_UNICAST_PACKETS_GOOD_BAD);
 		len += oal_util_snprintf(buf + len, size - len, "TX_UNICAST_PACKETS_GOOD_BAD       : 0x%x\n", reg);
-		reg = hal_read32((addr_t)base_va + TX_BROADCAST_PACKETS_GOOD);
+		reg = hal_read32(base_va + TX_BROADCAST_PACKETS_GOOD);
 		len += oal_util_snprintf(buf + len, size - len, "TX_BROADCAST_PACKETS_GOOD         : 0x%x\n", reg);
-		reg = hal_read32((addr_t)base_va + TX_BROADCAST_PACKETS_GOOD_BAD);
+		reg = hal_read32(base_va + TX_BROADCAST_PACKETS_GOOD_BAD);
 		len += oal_util_snprintf(buf + len, size - len, "TX_BROADCAST_PACKETS_GOOD_BAD     : 0x%x\n", reg);
-		reg = hal_read32((addr_t)base_va + TX_MULTICAST_PACKETS_GOOD);
+		reg = hal_read32(base_va + TX_MULTICAST_PACKETS_GOOD);
 		len += oal_util_snprintf(buf + len, size - len, "TX_MULTICAST_PACKETS_GOOD         : 0x%x\n", reg);
-		reg = hal_read32((addr_t)base_va + TX_MULTICAST_PACKETS_GOOD_BAD);
+		reg = hal_read32(base_va + TX_MULTICAST_PACKETS_GOOD_BAD);
 		len += oal_util_snprintf(buf + len, size - len, "TX_MULTICAST_PACKETS_GOOD_BAD     : 0x%x\n", reg);
-		reg = hal_read32((addr_t)base_va + TX_VLAN_PACKETS_GOOD);
+		reg = hal_read32(base_va + TX_VLAN_PACKETS_GOOD);
 		len += oal_util_snprintf(buf + len, size - len, "TX_VLAN_PACKETS_GOOD              : 0x%x\n", reg);
-		reg = hal_read32((addr_t)base_va + TX_PAUSE_PACKETS);
+		reg = hal_read32(base_va + TX_PAUSE_PACKETS);
 		len += oal_util_snprintf(buf + len, size - len, "TX_PAUSE_PACKETS                  : 0x%x\n", reg);
 	}
 
 	if(verb_level >= 4U)
 	{
-		reg = hal_read32((addr_t)base_va + RX_UNICAST_PACKETS_GOOD);
+		reg = hal_read32(base_va + RX_UNICAST_PACKETS_GOOD);
 		len += oal_util_snprintf(buf + len, size - len, "RX_UNICAST_PACKETS_GOOD           : 0x%x\n", reg);
-		reg = hal_read32((addr_t)base_va + RX_BROADCAST_PACKETS_GOOD);
+		reg = hal_read32(base_va + RX_BROADCAST_PACKETS_GOOD);
 		len += oal_util_snprintf(buf + len, size - len, "RX_BROADCAST_PACKETS_GOOD         : 0x%x\n", reg);
-		reg = hal_read32((addr_t)base_va + RX_MULTICAST_PACKETS_GOOD);
+		reg = hal_read32(base_va + RX_MULTICAST_PACKETS_GOOD);
 		len += oal_util_snprintf(buf + len, size - len, "RX_MULTICAST_PACKETS_GOOD         : 0x%x\n", reg);
-		reg = hal_read32((addr_t)base_va + RX_VLAN_PACKETS_GOOD_BAD);
+		reg = hal_read32(base_va + RX_VLAN_PACKETS_GOOD_BAD);
 		len += oal_util_snprintf(buf + len, size - len, "RX_VLAN_PACKETS_GOOD_BAD          : 0x%x\n", reg);
-		reg = hal_read32((addr_t)base_va + RX_PAUSE_PACKETS);
+		reg = hal_read32(base_va + RX_PAUSE_PACKETS);
 		len += oal_util_snprintf(buf + len, size - len, "RX_PAUSE_PACKETS                  : 0x%x\n", reg);
-		reg = hal_read32((addr_t)base_va + RX_CONTROL_PACKETS_GOOD);
+		reg = hal_read32(base_va + RX_CONTROL_PACKETS_GOOD);
 		len += oal_util_snprintf(buf + len, size - len, "RX_CONTROL_PACKETS_GOOD           : 0x%x\n", reg);
 	}
 
 	if(verb_level >= 1U)
 	{
-		reg = hal_read32((addr_t)base_va + TX_OCTET_COUNT_GOOD);
+		reg = hal_read32(base_va + TX_OCTET_COUNT_GOOD);
 		len += oal_util_snprintf(buf + len, size - len, "TX_OCTET_COUNT_GOOD                : 0x%x\n", reg);
-		reg = hal_read32((addr_t)base_va + TX_OCTET_COUNT_GOOD_BAD);
+		reg = hal_read32(base_va + TX_OCTET_COUNT_GOOD_BAD);
 		len += oal_util_snprintf(buf + len, size - len, "TX_OCTET_COUNT_GOOD_BAD            : 0x%x\n", reg);
-		reg = hal_read32((addr_t)base_va + TX_64OCTETS_PACKETS_GOOD_BAD);
+		reg = hal_read32(base_va + TX_64OCTETS_PACKETS_GOOD_BAD);
 		len += oal_util_snprintf(buf + len, size - len, "TX_64OCTETS_PACKETS_GOOD_BAD       : 0x%x\n", reg);
-		reg = hal_read32((addr_t)base_va + TX_65TO127OCTETS_PACKETS_GOOD_BAD);
+		reg = hal_read32(base_va + TX_65TO127OCTETS_PACKETS_GOOD_BAD);
 		len += oal_util_snprintf(buf + len, size - len, "TX_65TO127OCTETS_PACKETS_GOOD_BAD  : 0x%x\n", reg);
-		reg = hal_read32((addr_t)base_va + TX_128TO255OCTETS_PACKETS_GOOD_BAD);
+		reg = hal_read32(base_va + TX_128TO255OCTETS_PACKETS_GOOD_BAD);
 		len += oal_util_snprintf(buf + len, size - len, "TX_128TO255OCTETS_PACKETS_GOOD_BAD : 0x%x\n", reg);
-		reg = hal_read32((addr_t)base_va + TX_256TO511OCTETS_PACKETS_GOOD_BAD);
+		reg = hal_read32(base_va + TX_256TO511OCTETS_PACKETS_GOOD_BAD);
 		len += oal_util_snprintf(buf + len, size - len, "TX_256TO511OCTETS_PACKETS_GOOD_BAD : 0x%x\n", reg);
-		reg = hal_read32((addr_t)base_va + TX_512TO1023OCTETS_PACKETS_GOOD_BAD);
+		reg = hal_read32(base_va + TX_512TO1023OCTETS_PACKETS_GOOD_BAD);
 		len += oal_util_snprintf(buf + len, size - len, "TX_512TO1023OCTETS_PACKETS_GOOD_BAD: 0x%x\n", reg);
-		reg = hal_read32((addr_t)base_va + TX_1024TOMAXOCTETS_PACKETS_GOOD_BAD);
+		reg = hal_read32(base_va + TX_1024TOMAXOCTETS_PACKETS_GOOD_BAD);
 		len += oal_util_snprintf(buf + len, size - len, "TX_1024TOMAXOCTETS_PACKETS_GOOD_BAD: 0x%x\n", reg);
 	}
 
 	if(verb_level >= 5U)
 	{
-		reg = hal_read32((addr_t)base_va + TX_OSIZE_PACKETS_GOOD);
+		reg = hal_read32(base_va + TX_OSIZE_PACKETS_GOOD);
 		len += oal_util_snprintf(buf + len, size - len, "TX_OSIZE_PACKETS_GOOD              : 0x%x\n", reg);
 	}
 
 	if(verb_level >= 2U)
 	{
-		reg = hal_read32((addr_t)base_va + RX_OCTET_COUNT_GOOD);
+		reg = hal_read32(base_va + RX_OCTET_COUNT_GOOD);
 		len += oal_util_snprintf(buf + len, size - len, "RX_OCTET_COUNT_GOOD                : 0x%x\n", reg);
-		reg = hal_read32((addr_t)base_va + RX_OCTET_COUNT_GOOD_BAD);
+		reg = hal_read32(base_va + RX_OCTET_COUNT_GOOD_BAD);
 		len += oal_util_snprintf(buf + len, size - len, "RX_OCTET_COUNT_GOOD_BAD            : 0x%x\n", reg);
-		reg = hal_read32((addr_t)base_va + RX_64OCTETS_PACKETS_GOOD_BAD);
+		reg = hal_read32(base_va + RX_64OCTETS_PACKETS_GOOD_BAD);
 		len += oal_util_snprintf(buf + len, size - len, "RX_64OCTETS_PACKETS_GOOD_BAD       : 0x%x\n", reg);
-		reg = hal_read32((addr_t)base_va + RX_65TO127OCTETS_PACKETS_GOOD_BAD);
+		reg = hal_read32(base_va + RX_65TO127OCTETS_PACKETS_GOOD_BAD);
 		len += oal_util_snprintf(buf + len, size - len, "RX_65TO127OCTETS_PACKETS_GOOD_BAD  : 0x%x\n", reg);
-		reg = hal_read32((addr_t)base_va + RX_128TO255OCTETS_PACKETS_GOOD_BAD);
+		reg = hal_read32(base_va + RX_128TO255OCTETS_PACKETS_GOOD_BAD);
 		len += oal_util_snprintf(buf + len, size - len, "RX_128TO255OCTETS_PACKETS_GOOD_BAD : 0x%x\n", reg);
-		reg = hal_read32((addr_t)base_va + RX_256TO511OCTETS_PACKETS_GOOD_BAD);
+		reg = hal_read32(base_va + RX_256TO511OCTETS_PACKETS_GOOD_BAD);
 		len += oal_util_snprintf(buf + len, size - len, "RX_256TO511OCTETS_PACKETS_GOOD_BAD : 0x%x\n", reg);
-		reg = hal_read32((addr_t)base_va + RX_512TO1023OCTETS_PACKETS_GOOD_BAD);
+		reg = hal_read32(base_va + RX_512TO1023OCTETS_PACKETS_GOOD_BAD);
 		len += oal_util_snprintf(buf + len, size - len, "RX_512TO1023OCTETS_PACKETS_GOOD_BAD: 0x%x\n", reg);
-		reg = hal_read32((addr_t)base_va + RX_1024TOMAXOCTETS_PACKETS_GOOD_BAD);
+		reg = hal_read32(base_va + RX_1024TOMAXOCTETS_PACKETS_GOOD_BAD);
 		len += oal_util_snprintf(buf + len, size - len, "RX_1024TOMAXOCTETS_PACKETS_GOOD_BAD: 0x%x\n", reg);
 	}
 
 	if(verb_level >= 5U)
 	{
-		reg = hal_read32((addr_t)base_va + RX_OVERSIZE_PACKETS_GOOD);
+		reg = hal_read32(base_va + RX_OVERSIZE_PACKETS_GOOD);
 		len += oal_util_snprintf(buf + len, size - len, "TX_OSIZE_PACKETS_GOOD              : 0x%x\n", reg);
-		reg = hal_read32((addr_t)base_va + RX_UNDERSIZE_PACKETS_GOOD);
+		reg = hal_read32(base_va + RX_UNDERSIZE_PACKETS_GOOD);
 		len += oal_util_snprintf(buf + len, size - len, "RX_UNDERSIZE_PACKETS_GOOD          : 0x%x\n", reg);
 	}
 
diff --git a/sw/pfe_platform/hw/s32g/pfe_emac_csr.h b/sw/pfe_platform/hw/s32g/pfe_emac_csr.h
index 6582eee..4a25ad2 100644
--- a/sw/pfe_platform/hw/s32g/pfe_emac_csr.h
+++ b/sw/pfe_platform/hw/s32g/pfe_emac_csr.h
@@ -214,7 +214,11 @@
 #define RECEIVER_ENABLE(x)				((!!(x)) ? (1UL << 0U) : 0UL)	/* RE     */
 #define ENABLE_DOUBLE_VLAN(x)			((!!(x)) ? (1UL << 26U) : 0U)	/* EDVLP  */
 #define GIANT_PACKET_SIZE_LIMIT(x)		(((uint32_t)(x) & 0x3fffUL) << 0U)		/* GPSL   */
+#define TX_PAUSE_TIME(x)			(((uint32_t)(x) & 0xffffUL) << 16U)       /* PT  */
+#define TX_PAUSE_LOW_TRASHOLD(x)		(((uint32_t)(x) & 0x7UL) << 4U)       /* PLT  */
 #define TX_FLOW_CONTROL_ENABLE(x)		((!!(x)) ? (1UL << 1U) : 0U)	/* TFE    */
+#define RX_FLOW_CONTROL_ENABLE(x)		((!!(x)) ? (1UL << 0U) : 0U)    /* RFE    */
+#define RX_FLOW_CONTROL_UNICAST(x)		((!!(x)) ? (1UL << 1U) : 0U)    /* UP    */
 #define BUSY_OR_BACKPRESSURE_ACTIVE(x)	((!!(x)) ? (1UL << 0U) : 0U)	/* FCB_BPA */
 #define GMII_BUSY(x)					((!!(x)) ? (1UL << 0U) : 0UL)	/* GB     */
 #define CLAUSE45_ENABLE(x)				((!!(x)) ? (1UL << 1U) : 0UL)	/* C45E   */
@@ -274,34 +278,42 @@
  */
 #define EMAC_CFG_INDIVIDUAL_ADDR_SLOTS_COUNT	8U
 
-errno_t pfe_emac_cfg_init(void *base_va, pfe_emac_mii_mode_t mode, pfe_emac_speed_t speed, pfe_emac_duplex_t duplex);
-errno_t pfe_emac_cfg_enable_ts(void *base_va, bool_t eclk, uint32_t i_clk_hz, uint32_t o_clk_hz);
-void pfe_emac_cfg_disable_ts(void *base_va);
-errno_t pfe_emac_cfg_adjust_ts_freq(void *base_va, uint32_t i_clk_hz, uint32_t o_clk_hz, uint32_t ppb, bool_t sgn);
-void pfe_emac_cfg_get_ts_time(void *base_va, uint32_t *sec, uint32_t *nsec);
-errno_t pfe_emac_cfg_set_ts_time(void *base_va, uint32_t sec, uint32_t nsec);
-errno_t pfe_emac_cfg_adjust_ts_time(void *base_va, uint32_t sec, uint32_t nsec, bool_t sgn);
-void pfe_emac_cfg_tx_disable(void *base_va);
-errno_t pfe_emac_cfg_set_duplex(void *base_va, pfe_emac_duplex_t duplex);
-errno_t pfe_emac_cfg_set_mii_mode(void *base_va, pfe_emac_mii_mode_t mode);
-errno_t pfe_emac_cfg_set_speed(void *base_va, pfe_emac_speed_t speed);
-errno_t pfe_emac_cfg_set_max_frame_length(void *base_va, uint32_t len);
-errno_t pfe_emac_cfg_get_link_config(void *base_va, pfe_emac_speed_t *speed, pfe_emac_duplex_t *duplex);
-errno_t pfe_emac_cfg_get_link_status(void *base_va, pfe_emac_link_speed_t *link_speed, pfe_emac_duplex_t *duplex, bool_t *link);
-void pfe_emac_cfg_write_addr_slot(void *base_va, pfe_mac_addr_t addr, uint8_t slot);
-uint32_t pfe_emac_cfg_get_hash(void *base_va, pfe_mac_addr_t addr);
-void pfe_emac_cfg_set_uni_group(void *base_va, uint32_t hash, bool_t en);
-void pfe_emac_cfg_set_multi_group(void *base_va, uint32_t hash, bool_t en);
-void pfe_emac_cfg_set_loopback(void *base_va, bool_t en);
-void pfe_emac_cfg_set_promisc_mode(void *base_va, bool_t en);
-void pfe_emac_cfg_set_allmulti_mode(void *base_va, bool_t en);
-void pfe_emac_cfg_set_broadcast(void *base_va, bool_t en);
-void pfe_emac_cfg_set_enable(void *base_va, bool_t en);
-void pfe_emac_cfg_set_flow_control(void *base_va, bool_t en);
-errno_t pfe_emac_cfg_mdio_read22(void *base_va, uint8_t pa, uint8_t ra, uint16_t *val);
-errno_t pfe_emac_cfg_mdio_read45(void *base_va, uint8_t pa, uint8_t dev, uint16_t ra, uint16_t *val);
-errno_t pfe_emac_cfg_mdio_write22(void *base_va, uint8_t pa, uint8_t ra, uint16_t val);
-errno_t pfe_emac_cfg_mdio_write45(void *base_va, uint8_t pa, uint8_t dev, uint16_t ra, uint16_t val);
-uint32_t pfe_emac_cfg_get_text_stat(void *base_va, char_t *buf, uint32_t size, uint8_t verb_level);
+/* Default Tx time between frame control pkts */
+#define DEFAULT_PAUSE_QUANTA                   0xF000U
+
+errno_t pfe_emac_cfg_init(addr_t base_va, pfe_emac_mii_mode_t mode, pfe_emac_speed_t speed, pfe_emac_duplex_t duplex);
+errno_t pfe_emac_cfg_enable_ts(addr_t base_va, bool_t eclk, uint32_t i_clk_hz, uint32_t o_clk_hz);
+void pfe_emac_cfg_disable_ts(addr_t base_va);
+errno_t pfe_emac_cfg_adjust_ts_freq(addr_t base_va, uint32_t i_clk_hz, uint32_t o_clk_hz, uint32_t ppb, bool_t sgn);
+void pfe_emac_cfg_get_ts_time(addr_t base_va, uint32_t *sec, uint32_t *nsec);
+errno_t pfe_emac_cfg_set_ts_time(addr_t base_va, uint32_t sec, uint32_t nsec);
+errno_t pfe_emac_cfg_adjust_ts_time(addr_t base_va, uint32_t sec, uint32_t nsec, bool_t sgn);
+void pfe_emac_cfg_tx_disable(addr_t base_va);
+errno_t pfe_emac_cfg_set_duplex(addr_t base_va, pfe_emac_duplex_t duplex);
+errno_t pfe_emac_cfg_set_mii_mode(addr_t base_va, pfe_emac_mii_mode_t mode);
+errno_t pfe_emac_cfg_set_speed(addr_t base_va, pfe_emac_speed_t speed);
+errno_t pfe_emac_cfg_set_max_frame_length(addr_t base_va, uint32_t len);
+errno_t pfe_emac_cfg_get_link_config(addr_t base_va, pfe_emac_speed_t *speed, pfe_emac_duplex_t *duplex);
+errno_t pfe_emac_cfg_get_link_status(addr_t base_va, pfe_emac_link_speed_t *link_speed, pfe_emac_duplex_t *duplex, bool_t *link);
+void pfe_emac_cfg_write_addr_slot(addr_t base_va, const pfe_mac_addr_t addr, uint8_t slot);
+uint32_t pfe_emac_cfg_get_hash(addr_t base_va, const pfe_mac_addr_t addr);
+void pfe_emac_cfg_set_uni_group(addr_t base_va, uint32_t hash, bool_t en);
+void pfe_emac_cfg_set_multi_group(addr_t base_va, uint32_t hash, bool_t en);
+void pfe_emac_cfg_set_loopback(addr_t base_va, bool_t en);
+void pfe_emac_cfg_set_promisc_mode(addr_t base_va, bool_t en);
+void pfe_emac_cfg_set_allmulti_mode(addr_t base_va, bool_t en);
+void pfe_emac_cfg_set_broadcast(addr_t base_va, bool_t en);
+void pfe_emac_cfg_set_enable(addr_t base_va, bool_t en);
+void pfe_emac_cfg_set_tx_flow_control(addr_t base_va, bool_t en);
+void pfe_emac_cfg_set_rx_flow_control(addr_t base_va, bool_t en);
+void pfe_emac_cfg_get_tx_flow_control(addr_t base_va, bool_t *en);
+void pfe_emac_cfg_get_rx_flow_control(addr_t base_va, bool_t *en);
+errno_t pfe_emac_cfg_mdio_read22(addr_t base_va, uint8_t pa, uint8_t ra, uint16_t *val);
+errno_t pfe_emac_cfg_mdio_read45(addr_t base_va, uint8_t pa, uint8_t dev, uint16_t ra, uint16_t *val);
+errno_t pfe_emac_cfg_mdio_write22(addr_t base_va, uint8_t pa, uint8_t ra, uint16_t val);
+errno_t pfe_emac_cfg_mdio_write45(addr_t base_va, uint8_t pa, uint8_t dev, uint16_t ra, uint16_t val);
+uint32_t pfe_emac_cfg_get_text_stat(addr_t base_va, char_t *buf, uint32_t size, uint8_t verb_level);
+uint32_t pfe_emac_cfg_get_tx_cnt(addr_t base_va);
+uint32_t pfe_emac_cfg_get_rx_cnt(addr_t base_va);
 
 #endif /* SRC_PFE_EMAC_CSR_H_ */
diff --git a/sw/pfe_platform/hw/s32g/pfe_global_wsp.h b/sw/pfe_platform/hw/s32g/pfe_global_wsp.h
index b9b90d3..ba29db5 100644
--- a/sw/pfe_platform/hw/s32g/pfe_global_wsp.h
+++ b/sw/pfe_platform/hw/s32g/pfe_global_wsp.h
@@ -1,7 +1,7 @@
 /* =========================================================================
  *  
  *  Copyright (c) 2019 Imagination Technologies Limited
- *  Copyright 2019-2020 NXP
+ *  Copyright 2019-2021 NXP
  *
  *  SPDX-License-Identifier: GPL-2.0
  *
diff --git a/sw/pfe_platform/hw/s32g/pfe_gpi_csr.c b/sw/pfe_platform/hw/s32g/pfe_gpi_csr.c
index 62572f5..da8aa91 100644
--- a/sw/pfe_platform/hw/s32g/pfe_gpi_csr.c
+++ b/sw/pfe_platform/hw/s32g/pfe_gpi_csr.c
@@ -1,7 +1,7 @@
 /* =========================================================================
  *  
  *  Copyright (c) 2019 Imagination Technologies Limited
- *  Copyright 2018-2020 NXP
+ *  Copyright 2018-2021 NXP
  *
  *  SPDX-License-Identifier: GPL-2.0
  *
@@ -26,13 +26,13 @@
 #error Unsupported IP version
 #endif /* PFE_CFG_IP_VERSION */
 
-static void pfe_gpi_cfg_init_inqos(void *base_va);
+static void pfe_gpi_cfg_init_inqos(addr_t base_va);
 
 /**
  * @brief		Initialize ingress QoS module
  * @param[in]	base_va Base address of GPI register space (virtual)
  */
-static void pfe_gpi_cfg_init_inqos(void *base_va)
+static void pfe_gpi_cfg_init_inqos(addr_t base_va)
 {
 	uint32_t ii;
 	uint32_t val;
@@ -78,9 +78,9 @@ static void pfe_gpi_cfg_init_inqos(void *base_va)
  * @param[in]	base_va Base address of GPI register space (virtual)
  * @return		EOK if success, error code if invalid configuration is detected
  */
-errno_t pfe_gpi_cfg_init(void *cbus_va, void *base_va, pfe_gpi_cfg_t *cfg)
+errno_t pfe_gpi_cfg_init(addr_t cbus_va, addr_t base_va, const pfe_gpi_cfg_t *cfg)
 {
-	addr_t gpi_cbus_offset = (addr_t)base_va - (addr_t)cbus_va;
+	addr_t gpi_cbus_offset = base_va - cbus_va;
 
 	switch (gpi_cbus_offset)
 	{
@@ -124,7 +124,7 @@ errno_t pfe_gpi_cfg_init(void *cbus_va, void *base_va, pfe_gpi_cfg_t *cfg)
  * @retval		EOK Success
  * @retval		ETIMEDOUT Reset procedure timed-out
  */
-errno_t pfe_gpi_cfg_reset(void *base_va)
+errno_t pfe_gpi_cfg_reset(addr_t base_va)
 {
 	uint32_t timeout = 20U;
 	uint32_t reg = hal_read32(base_va + GPI_CTRL);
@@ -152,7 +152,7 @@ errno_t pfe_gpi_cfg_reset(void *base_va)
  * @brief		Enable the GPI module
  * @param[in]	base_va Base address of GPI register space (virtual)
  */
-void pfe_gpi_cfg_enable(void *base_va)
+void pfe_gpi_cfg_enable(addr_t base_va)
 {
 	uint32_t reg = hal_read32(base_va + GPI_CTRL);
 
@@ -163,7 +163,7 @@ void pfe_gpi_cfg_enable(void *base_va)
  * @brief		Disable the GPI module
  * @param[in]	base_va Base address of GPI register space (virtual)
  */
-void pfe_gpi_cfg_disable(void *base_va)
+void pfe_gpi_cfg_disable(addr_t base_va)
 {
 	uint32_t reg = hal_read32(base_va + GPI_CTRL);
 
@@ -180,13 +180,13 @@ void pfe_gpi_cfg_disable(void *base_va)
  * @param[in]	verb_level 	Verbosity level
  * @return		Number of bytes written to the buffer
  */
-uint32_t pfe_gpi_cfg_get_text_stat(void *base_va, char_t *buf, uint32_t size, uint8_t verb_level)
+uint32_t pfe_gpi_cfg_get_text_stat(addr_t base_va, char_t *buf, uint32_t size, uint8_t verb_level)
 {
 	uint32_t len = 0U;
 	uint32_t reg;
 
 #if defined(PFE_CFG_NULL_ARG_CHECK)
-	if (unlikely(NULL == base_va))
+	if (unlikely(NULL_ADDR == base_va))
 	{
 		NXP_LOG_ERROR("NULL argument received\n");
 		return 0U;
diff --git a/sw/pfe_platform/hw/s32g/pfe_gpi_csr.h b/sw/pfe_platform/hw/s32g/pfe_gpi_csr.h
index a178742..468e8b5 100644
--- a/sw/pfe_platform/hw/s32g/pfe_gpi_csr.h
+++ b/sw/pfe_platform/hw/s32g/pfe_gpi_csr.h
@@ -1,7 +1,7 @@
 /* =========================================================================
  *  
  *  Copyright (c) 2019 Imagination Technologies Limited
- *  Copyright 2018-2020 NXP
+ *  Copyright 2018-2021 NXP
  *
  *  SPDX-License-Identifier: GPL-2.0
  *
@@ -165,10 +165,10 @@ typedef struct {
 #define HGPI_TMLF_TXTHRES				0xBCU
 #define HGPI_ASEQ_LEN					0x40U
 
-errno_t pfe_gpi_cfg_init(void *cbus_va, void *base_va, pfe_gpi_cfg_t *cfg);
-errno_t pfe_gpi_cfg_reset(void *base_va);
-void pfe_gpi_cfg_enable(void *base_va);
-void pfe_gpi_cfg_disable(void *base_va);
-uint32_t pfe_gpi_cfg_get_text_stat(void *base_va, char_t *buf, uint32_t size, uint8_t verb_level);
+errno_t pfe_gpi_cfg_init(addr_t cbus_va, addr_t base_va, const pfe_gpi_cfg_t *cfg);
+errno_t pfe_gpi_cfg_reset(addr_t base_va);
+void pfe_gpi_cfg_enable(addr_t base_va);
+void pfe_gpi_cfg_disable(addr_t base_va);
+uint32_t pfe_gpi_cfg_get_text_stat(addr_t base_va, char_t *buf, uint32_t size, uint8_t verb_level);
 
 #endif /* PFE_GPI_CSR_H_ */
diff --git a/sw/pfe_platform/hw/s32g/pfe_hif_csr.c b/sw/pfe_platform/hw/s32g/pfe_hif_csr.c
index bba7f38..7d24020 100644
--- a/sw/pfe_platform/hw/s32g/pfe_hif_csr.c
+++ b/sw/pfe_platform/hw/s32g/pfe_hif_csr.c
@@ -1,7 +1,7 @@
 /* =========================================================================
  *  
  *  Copyright (c) 2019 Imagination Technologies Limited
- *  Copyright 2018-2020 NXP
+ *  Copyright 2018-2021 NXP
  *
  *  SPDX-License-Identifier: GPL-2.0
  *
@@ -30,90 +30,99 @@
  * 			then user must trigger the HIF to fetch next BD explicitly by
  * 			pfe_hif_rx_dma_start() and pfe_hif_tx_dma_start().
  */
+#ifdef	PFE_CFG_HIF_USE_BD_TRIGGER
+#define	PFE_HIF_CFG_USE_BD_POLLING		FALSE
+#else
 #define	PFE_HIF_CFG_USE_BD_POLLING		TRUE
+#endif
 
-static inline void dump_hif_channel(void *base_va, uint32_t channel_id)
+static inline void dump_hif_channel(addr_t base_va, uint32_t channel_id)
 {
+#ifdef NXP_LOG_ENABLED
 	uint32_t reg;
 
 	reg = hal_read32(base_va + HIF_CTRL_CHn(channel_id));
-	NXP_LOG_INFO("HIF_CTRL_CH%d                    : 0x%08x\n", channel_id, reg);
+	NXP_LOG_INFO("HIF_CTRL_CH%u                    : 0x%08x\n", (uint_t)channel_id, (uint_t)reg);
 	reg = hal_read32(base_va + HIF_RX_BDP_WR_LOW_ADDR_CHn(channel_id));
-	NXP_LOG_INFO("HIF_RX_BDP_WR_LOW_ADDR_CH%d      : 0x%08x\n", channel_id, reg);
+	NXP_LOG_INFO("HIF_RX_BDP_WR_LOW_ADDR_CH%u      : 0x%08x\n", (uint_t)channel_id, (uint_t)reg);
 	reg = hal_read32(base_va + HIF_RX_BDP_WR_HIGH_ADDR_CHn(channel_id));
-	NXP_LOG_INFO("HIF_RX_BDP_WR_HIGH_ADDR_CH%d     : 0x%08x\n", channel_id, reg);
+	NXP_LOG_INFO("HIF_RX_BDP_WR_HIGH_ADDR_CH%u     : 0x%08x\n", (uint_t)channel_id, (uint_t)reg);
 	reg = hal_read32(base_va + HIF_RX_BDP_RD_LOW_ADDR_CHn(channel_id));
-	NXP_LOG_INFO("HIF_RX_BDP_RD_LOW_ADDR_CH%d      : 0x%08x\n", channel_id, reg);
+	NXP_LOG_INFO("HIF_RX_BDP_RD_LOW_ADDR_CH%u      : 0x%08x\n", (uint_t)channel_id, (uint_t)reg);
 	reg = hal_read32(base_va + HIF_RX_BDP_RD_HIGH_ADDR_CHn(channel_id));
-	NXP_LOG_INFO("HIF_RX_BDP_RD_HIGH_ADDR_CH%d     : 0x%08x\n", channel_id, reg);
+	NXP_LOG_INFO("HIF_RX_BDP_RD_HIGH_ADDR_CH%u     : 0x%08x\n", (uint_t)channel_id, (uint_t)reg);
 	reg = hal_read32(base_va + HIF_TX_BDP_WR_LOW_ADDR_CHn(channel_id));
-	NXP_LOG_INFO("HIF_TX_BDP_WR_LOW_ADDR_CH%d      : 0x%08x\n", channel_id, reg);
+	NXP_LOG_INFO("HIF_TX_BDP_WR_LOW_ADDR_CH%u      : 0x%08x\n", (uint_t)channel_id, (uint_t)reg);
 	reg = hal_read32(base_va + HIF_TX_BDP_WR_HIGH_ADDR_CHn(channel_id));
-	NXP_LOG_INFO("HIF_TX_BDP_WR_HIGH_ADDR_CH%d     : 0x%08x\n", channel_id, reg);
+	NXP_LOG_INFO("HIF_TX_BDP_WR_HIGH_ADDR_CH%u     : 0x%08x\n", (uint_t)channel_id, (uint_t)reg);
 	reg = hal_read32(base_va + HIF_TX_BDP_RD_LOW_ADDR_CHn(channel_id));
-	NXP_LOG_INFO("HIF_TX_BDP_RD_LOW_ADDR_CH%d      : 0x%08x\n", channel_id, reg);
+	NXP_LOG_INFO("HIF_TX_BDP_RD_LOW_ADDR_CH%u      : 0x%08x\n", (uint_t)channel_id, (uint_t)reg);
 	reg = hal_read32(base_va + HIF_TX_BDP_RD_HIGH_ADDR_CHn(channel_id));
-	NXP_LOG_INFO("HIF_TX_BDP_RD_HIGH_ADDR_CH%d     : 0x%08x\n", channel_id, reg);
+	NXP_LOG_INFO("HIF_TX_BDP_RD_HIGH_ADDR_CH%u     : 0x%08x\n", (uint_t)channel_id, (uint_t)reg);
 	reg = hal_read32(base_va + HIF_RX_WRBK_BD_CHn_BUFFER_SIZE(channel_id));
-	NXP_LOG_INFO("HIF_RX_WRBK_BD_CH%d_BUFFER_SIZE  : 0x%08x\n", channel_id, reg);
+	NXP_LOG_INFO("HIF_RX_WRBK_BD_CH%u_BUFFER_SIZE  : 0x%08x\n", (uint_t)channel_id, (uint_t)reg);
 	reg = hal_read32(base_va + HIF_RX_CHn_START(channel_id));
-	NXP_LOG_INFO("HIF_RX_CH%d_START                : 0x%08x\n", channel_id, reg);
+	NXP_LOG_INFO("HIF_RX_CH%u_START                : 0x%08x\n", (uint_t)channel_id, (uint_t)reg);
 	reg = hal_read32(base_va + HIF_TX_WRBK_BD_CHn_BUFFER_SIZE(channel_id));
-	NXP_LOG_INFO("HIF_TX_WRBK_BD_CH%d_BUFFER_SIZE  : 0x%08x\n", channel_id, reg);
+	NXP_LOG_INFO("HIF_TX_WRBK_BD_CH%u_BUFFER_SIZE  : 0x%08x\n", (uint_t)channel_id, (uint_t)reg);
 	reg = hal_read32(base_va + HIF_TX_CHn_START(channel_id));
-	NXP_LOG_INFO("HIF_TX_CH%d_START                : 0x%08x\n", channel_id, reg);
+	NXP_LOG_INFO("HIF_TX_CH%u_START                : 0x%08x\n", (uint_t)channel_id, (uint_t)reg);
 	reg = hal_read32(base_va + HIF_CHn_INT_SRC(channel_id));
-	NXP_LOG_INFO("HIF_CH%d_INT_SRC                 : 0x%08x\n", channel_id, reg);
+	NXP_LOG_INFO("HIF_CH%u_INT_SRC                 : 0x%08x\n", (uint_t)channel_id, (uint_t)reg);
 	reg = hal_read32(base_va + HIF_TX_RD_CURR_BD_LOW_ADDR_CHn(channel_id));
-	NXP_LOG_INFO("HIF_TX_RD_CURR_BD_LOW_ADDR_CH%d  : 0x%08x\n", channel_id, reg);
+	NXP_LOG_INFO("HIF_TX_RD_CURR_BD_LOW_ADDR_CH%u  : 0x%08x\n", (uint_t)channel_id, (uint_t)reg);
 	reg = hal_read32(base_va + HIF_TX_RD_CURR_BD_HIGH_ADDR_CHn(channel_id));
-	NXP_LOG_INFO("HIF_TX_RD_CURR_BD_HIGH_ADDR_CH%d : 0x%08x\n", channel_id, reg);
+	NXP_LOG_INFO("HIF_TX_RD_CURR_BD_HIGH_ADDR_CH%u : 0x%08x\n", (uint_t)channel_id, (uint_t)reg);
 	reg = hal_read32(base_va + HIF_TX_WR_CURR_BD_LOW_ADDR_CHn(channel_id));
-	NXP_LOG_INFO("HIF_TX_WR_CURR_BD_LOW_ADDR_CH%d  : 0x%08x\n", channel_id, reg);
+	NXP_LOG_INFO("HIF_TX_WR_CURR_BD_LOW_ADDR_CH%u  : 0x%08x\n", (uint_t)channel_id, (uint_t)reg);
 	reg = hal_read32(base_va + HIF_TX_WR_CURR_BD_HIGH_ADDR_CHn(channel_id));
-	NXP_LOG_INFO("HIF_TX_WR_CURR_BD_HIGH_ADDR_CH%d : 0x%08x\n", channel_id, reg);
+	NXP_LOG_INFO("HIF_TX_WR_CURR_BD_HIGH_ADDR_CH%u : 0x%08x\n", (uint_t)channel_id, (uint_t)reg);
 	reg = hal_read32(base_va + HIF_BDP_CHn_TX_FIFO_CNT(channel_id));
-	NXP_LOG_INFO("HIF_BDP_CH%d_TX_FIFO_CNT         : 0x%08x\n", channel_id, reg);
+	NXP_LOG_INFO("HIF_BDP_CH%u_TX_FIFO_CNT         : 0x%08x\n", (uint_t)channel_id, (uint_t)reg);
 	reg = hal_read32(base_va + HIF_TX_DMA_STATUS_0_CHn(channel_id));
-	NXP_LOG_INFO("HIF_TX_DMA_STATUS_0_CH%d         : 0x%08x\n", channel_id, reg);
+	NXP_LOG_INFO("HIF_TX_DMA_STATUS_0_CH%u         : 0x%08x\n", (uint_t)channel_id, (uint_t)reg);
 	reg = hal_read32(base_va + HIF_TX_STATUS_0_CHn(channel_id));
-	NXP_LOG_INFO("HIF_TX_STATUS_0_CH%d             : 0x%08x\n", channel_id, reg);
+	NXP_LOG_INFO("HIF_TX_STATUS_0_CH%u             : 0x%08x\n", (uint_t)channel_id, (uint_t)reg);
 	reg = hal_read32(base_va + HIF_TX_STATUS_1_CHn(channel_id));
-	NXP_LOG_INFO("HIF_TX_STATUS_1_CH%d             : 0x%08x\n", channel_id, reg);
+	NXP_LOG_INFO("HIF_TX_STATUS_1_CH%u             : 0x%08x\n", (uint_t)channel_id, (uint_t)reg);
 	reg = hal_read32(base_va + HIF_TX_PKT_CNT0_CHn(channel_id));
-	NXP_LOG_INFO("HIF_TX_PKT_CNT0_CH%d             : 0x%08x\n", channel_id, reg);
+	NXP_LOG_INFO("HIF_TX_PKT_CNT0_CH%u             : 0x%08x\n", (uint_t)channel_id, (uint_t)reg);
 	reg = hal_read32(base_va + HIF_TX_PKT_CNT1_CHn(channel_id));
-	NXP_LOG_INFO("HIF_TX_PKT_CNT1_CH%d             : 0x%08x\n", channel_id, reg);
+	NXP_LOG_INFO("HIF_TX_PKT_CNT1_CH%u             : 0x%08x\n", (uint_t)channel_id, (uint_t)reg);
 	reg = hal_read32(base_va + HIF_TX_PKT_CNT2_CHn(channel_id));
-	NXP_LOG_INFO("HIF_TX_PKT_CNT2_CH%d             : 0x%08x\n", channel_id, reg);
+	NXP_LOG_INFO("HIF_TX_PKT_CNT2_CH%u             : 0x%08x\n", (uint_t)channel_id, (uint_t)reg);
 	reg = hal_read32(base_va + HIF_RX_RD_CURR_BD_LOW_ADDR_CHn(channel_id));
-	NXP_LOG_INFO("HIF_RX_RD_CURR_BD_LOW_ADDR_CH%d  : 0x%08x\n", channel_id, reg);
+	NXP_LOG_INFO("HIF_RX_RD_CURR_BD_LOW_ADDR_CH%u  : 0x%08x\n", (uint_t)channel_id, (uint_t)reg);
 	reg = hal_read32(base_va + HIF_RX_RD_CURR_BD_HIGH_ADDR_CHn(channel_id));
-	NXP_LOG_INFO("HIF_RX_RD_CURR_BD_HIGH_ADDR_CH%d : 0x%08x\n", channel_id, reg);
+	NXP_LOG_INFO("HIF_RX_RD_CURR_BD_HIGH_ADDR_CH%u : 0x%08x\n", (uint_t)channel_id, (uint_t)reg);
 	reg = hal_read32(base_va + HIF_RX_WR_CURR_BD_LOW_ADDR_CHn(channel_id));
-	NXP_LOG_INFO("HIF_RX_WR_CURR_BD_LOW_ADDR_CH%d  : 0x%08x\n", channel_id, reg);
+	NXP_LOG_INFO("HIF_RX_WR_CURR_BD_LOW_ADDR_CH%u  : 0x%08x\n", (uint_t)channel_id, (uint_t)reg);
 	reg = hal_read32(base_va + HIF_RX_WR_CURR_BD_HIGH_ADDR_CHn(channel_id));
-	NXP_LOG_INFO("HIF_RX_WR_CURR_BD_HIGH_ADDR_CH%d : 0x%08x\n", channel_id, reg);
+	NXP_LOG_INFO("HIF_RX_WR_CURR_BD_HIGH_ADDR_CH%u : 0x%08x\n", (uint_t)channel_id, (uint_t)reg);
 	reg = hal_read32(base_va + HIF_BDP_CHn_RX_FIFO_CNT(channel_id));
-	NXP_LOG_INFO("HIF_BDP_CH%d_RX_FIFO_CNT         : 0x%08x\n", channel_id, reg);
+	NXP_LOG_INFO("HIF_BDP_CH%u_RX_FIFO_CNT         : 0x%08x\n", (uint_t)channel_id, (uint_t)reg);
 	reg = hal_read32(base_va + HIF_RX_DMA_STATUS_0_CHn(channel_id));
-	NXP_LOG_INFO("HIF_RX_DMA_STATUS_0_CH%d         : 0x%08x\n", channel_id, reg);
+	NXP_LOG_INFO("HIF_RX_DMA_STATUS_0_CH%u         : 0x%08x\n", (uint_t)channel_id, (uint_t)reg);
 	reg = hal_read32(base_va + HIF_RX_STATUS_0_CHn(channel_id));
-	NXP_LOG_INFO("HIF_RX_STATUS_0_CH%d             : 0x%08x\n", channel_id, reg);
+	NXP_LOG_INFO("HIF_RX_STATUS_0_CH%u             : 0x%08x\n", (uint_t)channel_id, (uint_t)reg);
 	reg = hal_read32(base_va + HIF_RX_PKT_CNT0_CHn(channel_id));
-	NXP_LOG_INFO("HIF_RX_PKT_CNT0_CH%d             : 0x%08x\n", channel_id, reg);
+	NXP_LOG_INFO("HIF_RX_PKT_CNT0_CH%u             : 0x%08x\n", (uint_t)channel_id, (uint_t)reg);
 	reg = hal_read32(base_va + HIF_RX_PKT_CNT1_CHn(channel_id));
-	NXP_LOG_INFO("HIF_RX_PKT_CNT1_CH%d             : 0x%08x\n", channel_id, reg);
+	NXP_LOG_INFO("HIF_RX_PKT_CNT1_CH%u             : 0x%08x\n", (uint_t)channel_id, (uint_t)reg);
 	reg = hal_read32(base_va + HIF_LTC_MAX_PKT_CHn_ADDR(channel_id));
-	NXP_LOG_INFO("HIF_LTC_MAX_PKT_CH_ADDR%d        : 0x%08x\n", channel_id, reg);
+	NXP_LOG_INFO("HIF_LTC_MAX_PKT_CH_ADDR%u        : 0x%08x\n", (uint_t)channel_id, (uint_t)reg);
 	reg = hal_read32(base_va + HIF_ABS_INT_TIMER_CHn(channel_id));
-	NXP_LOG_INFO("HIF_ABS_INT_TIMER_CH%d           : 0x%08x\n", channel_id, reg);
+	NXP_LOG_INFO("HIF_ABS_INT_TIMER_CH%u           : 0x%08x\n", (uint_t)channel_id, (uint_t)reg);
 	reg = hal_read32(base_va + HIF_ABS_FRAME_COUNT_CHn(channel_id));
-	NXP_LOG_INFO("HIF_ABS_FRAME_COUNT_CH%d         : 0x%08x\n", channel_id, reg);
+	NXP_LOG_INFO("HIF_ABS_FRAME_COUNT_CH%u         : 0x%08x\n", (uint_t)channel_id, (uint_t)reg);
 	reg = hal_read32(base_va + HIF_INT_COAL_EN_CHn(channel_id));
-	NXP_LOG_INFO("HIF_INT_COAL_EN_CH%d             : 0x%08x\n", channel_id, reg);
+	NXP_LOG_INFO("HIF_INT_COAL_EN_CH%u             : 0x%08x\n", (uint_t)channel_id, (uint_t)reg);
 	reg = hal_read32(base_va + HIF_CHn_INT_EN(channel_id));
-	NXP_LOG_INFO("HIF_INT_EN_CH%d                  : 0x%08x\n", channel_id, reg);
+	NXP_LOG_INFO("HIF_INT_EN_CH%u                  : 0x%08x\n", (uint_t)channel_id, (uint_t)reg);
+#else
+    (void) base_va;
+    (void) channel_id;
+#endif /* NXP_LOG_ENABLED */
 }
 
 /**
@@ -123,7 +132,7 @@ static inline void dump_hif_channel(void *base_va, uint32_t channel_id)
  * @return		EOK if interrupt has been handled, error code otherwise
  * @note		Make sure the call is protected by some per-HIF mutex
  */
-errno_t pfe_hif_cfg_isr(void *base_va)
+errno_t pfe_hif_cfg_isr(addr_t base_va)
 {
 	uint32_t glob_src, reg_src, reg_en;
 	errno_t ret = ENOENT;
@@ -149,7 +158,7 @@ errno_t pfe_hif_cfg_isr(void *base_va)
 			/*	Process interrupts which are triggered AND enabled */
 			if ((reg_src & reg_en & HIF_ERR_INT) != 0U)
 			{
-				NXP_LOG_INFO("HIF_ERR_INT (0x%x)\n", reg_src);
+				NXP_LOG_INFO("HIF_ERR_INT (0x%x)\n", (uint_t)reg_src);
 				ret = EOK;
 			}
 			else
@@ -174,7 +183,7 @@ errno_t pfe_hif_cfg_isr(void *base_va)
 			/*	Process interrupts which are triggered AND enabled */
 			if ((reg_src & reg_en & HIF_TX_FIFO_ERR_INT) != 0U)
 			{
-				NXP_LOG_INFO("HIF_TX_FIFO_ERR_INT (0x%x)\n", reg_src);
+				NXP_LOG_INFO("HIF_TX_FIFO_ERR_INT (0x%x)\n", (uint_t)reg_src);
 				ret = EOK;
 			}
 			else
@@ -199,7 +208,7 @@ errno_t pfe_hif_cfg_isr(void *base_va)
 			/*	Process interrupts which are triggered AND enabled */
 			if ((reg_src & reg_en & HIF_RX_FIFO_ERR_INT) != 0U)
 			{
-				NXP_LOG_INFO("HIF_RX_FIFO_ERR_INT (0x%x)\n", reg_src);
+				NXP_LOG_INFO("HIF_RX_FIFO_ERR_INT (0x%x)\n", (uint_t)reg_src);
 				ret = EOK;
 			}
 			else
@@ -218,7 +227,7 @@ errno_t pfe_hif_cfg_isr(void *base_va)
  * @param[in]	base_va Base address of HIF register space (virtual)
  * @note		Make sure the call is protected by some per-HIF mutex
  */
-void pfe_hif_cfg_irq_mask(void *base_va)
+void pfe_hif_cfg_irq_mask(addr_t base_va)
 {
 	uint32_t reg;
 
@@ -239,7 +248,7 @@ void pfe_hif_cfg_irq_mask(void *base_va)
  * @param[in]	base_va Base address of HIF register space (virtual)
  * @note		Make sure the call is protected by some per-HIF mutex
  */
-void pfe_hif_cfg_irq_unmask(void *base_va)
+void pfe_hif_cfg_irq_unmask(addr_t base_va)
 {
 	uint32_t reg;
 
@@ -263,11 +272,11 @@ void pfe_hif_cfg_irq_unmask(void *base_va)
  * @return		EOK if interrupt has been handled, error code otherwise
  * @note		Make sure the call is protected by some per-channel mutex
  */
-errno_t pfe_hif_chnl_cfg_isr(void *base_va, uint32_t channel_id, pfe_hif_chnl_event_t *events)
+errno_t pfe_hif_chnl_cfg_isr(addr_t base_va, uint32_t channel_id, pfe_hif_chnl_event_t *events)
 {
 	uint32_t reg_src, reg_en;
 	errno_t ret = ENOENT;
-	
+
 	*events = (pfe_hif_chnl_event_t)0;
 
 	if (unlikely(channel_id >= HIF_CFG_MAX_CHANNELS))
@@ -312,9 +321,9 @@ errno_t pfe_hif_chnl_cfg_isr(void *base_va, uint32_t channel_id, pfe_hif_chnl_ev
 	|| (PFE_CFG_IP_VERSION == PFE_CFG_IP_VERSION_NPU_7_14) \
 	|| (PFE_CFG_IP_VERSION == PFE_CFG_IP_VERSION_NPU_7_14a))
 			/*	AAVB-2144 */
-			NXP_LOG_INFO("BDP_RD_CSR_RX_TIMEOUT_CH%d_INT. Interrupt disabled.\n", channel_id);
+			NXP_LOG_INFO("BDP_RD_CSR_RX_TIMEOUT_CH%u_INT. Interrupt disabled.\n", (uint_t)channel_id);
 #else
-			NXP_LOG_INFO("BDP_RD_CSR_RX_TIMEOUT_CH%d_INT\n", channel_id);
+			NXP_LOG_INFO("BDP_RD_CSR_RX_TIMEOUT_CH%u_INT\n", (uint_t)channel_id);
 #endif /* PFE_CFG_IP_VERSION */
 		}
 
@@ -324,9 +333,9 @@ errno_t pfe_hif_chnl_cfg_isr(void *base_va, uint32_t channel_id, pfe_hif_chnl_ev
 	|| (PFE_CFG_IP_VERSION == PFE_CFG_IP_VERSION_NPU_7_14) \
 	|| (PFE_CFG_IP_VERSION == PFE_CFG_IP_VERSION_NPU_7_14a))
 			/*	AAVB-2144 */
-			NXP_LOG_INFO("BDP_WR_CSR_RX_TIMEOUT_CH%d_INT. Interrupt disabled.\n", channel_id);
+			NXP_LOG_INFO("BDP_WR_CSR_RX_TIMEOUT_CH%u_INT. Interrupt disabled.\n", (uint_t)channel_id);
 #else
-			NXP_LOG_INFO("BDP_WR_CSR_RX_TIMEOUT_CH%d_INT\n", channel_id);
+			NXP_LOG_INFO("BDP_WR_CSR_RX_TIMEOUT_CH%u_INT\n", (uint_t)channel_id);
 #endif /* PFE_CFG_IP_VERSION */
 		}
 
@@ -336,9 +345,9 @@ errno_t pfe_hif_chnl_cfg_isr(void *base_va, uint32_t channel_id, pfe_hif_chnl_ev
 	|| (PFE_CFG_IP_VERSION == PFE_CFG_IP_VERSION_NPU_7_14) \
 	|| (PFE_CFG_IP_VERSION == PFE_CFG_IP_VERSION_NPU_7_14a))
 			/*	AAVB-2144 */
-			NXP_LOG_INFO("BDP_RD_CSR_TX_TIMEOUT_CH%d_INT. Interrupt disabled.\n", channel_id);
+			NXP_LOG_INFO("BDP_RD_CSR_TX_TIMEOUT_CH%u_INT. Interrupt disabled.\n", (uint_t)channel_id);
 #else
-			NXP_LOG_INFO("BDP_RD_CSR_TX_TIMEOUT_CH%d_INT\n", channel_id);
+			NXP_LOG_INFO("BDP_RD_CSR_TX_TIMEOUT_CH%u_INT\n", (uint_t)channel_id);
 #endif /* PFE_CFG_IP_VERSION */
 		}
 
@@ -348,9 +357,9 @@ errno_t pfe_hif_chnl_cfg_isr(void *base_va, uint32_t channel_id, pfe_hif_chnl_ev
 	|| (PFE_CFG_IP_VERSION == PFE_CFG_IP_VERSION_NPU_7_14) \
 	|| (PFE_CFG_IP_VERSION == PFE_CFG_IP_VERSION_NPU_7_14a))
 			/*	AAVB-2144 */
-			NXP_LOG_INFO("BDP_WR_CSR_TX_TIMEOUT_CH%d_INT. Interrupt disabled.\n", channel_id);
+			NXP_LOG_INFO("BDP_WR_CSR_TX_TIMEOUT_CH%u_INT. Interrupt disabled.\n", (uint_t)channel_id);
 #else
-			NXP_LOG_INFO("BDP_WR_CSR_TX_TIMEOUT_CH%d_INT\n", channel_id);
+			NXP_LOG_INFO("BDP_WR_CSR_TX_TIMEOUT_CH%u_INT\n", (uint_t)channel_id);
 #endif /* PFE_CFG_IP_VERSION */
 		}
 
@@ -360,9 +369,9 @@ errno_t pfe_hif_chnl_cfg_isr(void *base_va, uint32_t channel_id, pfe_hif_chnl_ev
 	|| (PFE_CFG_IP_VERSION == PFE_CFG_IP_VERSION_NPU_7_14) \
 	|| (PFE_CFG_IP_VERSION == PFE_CFG_IP_VERSION_NPU_7_14a))
 			/*	AAVB-2144 */
-			NXP_LOG_INFO("DXR_CSR_RX_TIMEOUT_CH%d_INT. Interrupt disabled.\n", channel_id);
+			NXP_LOG_INFO("DXR_CSR_RX_TIMEOUT_CH%u_INT. Interrupt disabled.\n", (uint_t)channel_id);
 #else
-			NXP_LOG_INFO("DXR_CSR_RX_TIMEOUT_CH%d_INT\n", channel_id);
+			NXP_LOG_INFO("DXR_CSR_RX_TIMEOUT_CH%u_INT\n", (uint_t)channel_id);
 #endif /* PFE_CFG_IP_VERSION */
 		}
 
@@ -372,9 +381,9 @@ errno_t pfe_hif_chnl_cfg_isr(void *base_va, uint32_t channel_id, pfe_hif_chnl_ev
 	|| (PFE_CFG_IP_VERSION == PFE_CFG_IP_VERSION_NPU_7_14) \
 	|| (PFE_CFG_IP_VERSION == PFE_CFG_IP_VERSION_NPU_7_14a))
 			/*	AAVB-2144 */
-			NXP_LOG_INFO("DXR_CSR_TX_TIMEOUT_CH%d_INT. Interrupt disabled.\n", channel_id);
+			NXP_LOG_INFO("DXR_CSR_TX_TIMEOUT_CH%u_INT. Interrupt disabled.\n", (uint_t)channel_id);
 #else
-			NXP_LOG_INFO("DXR_CSR_TX_TIMEOUT_CH%d_INT\n", channel_id);
+			NXP_LOG_INFO("DXR_CSR_TX_TIMEOUT_CH%u_INT\n", (uint_t)channel_id);
 #endif /* PFE_CFG_IP_VERSION */
 		}
 
@@ -403,7 +412,7 @@ errno_t pfe_hif_chnl_cfg_isr(void *base_va, uint32_t channel_id, pfe_hif_chnl_ev
  * @return		EOK if success, error code otherwise
  * @note		Make sure the call is protected by some per-channel mutex
  */
-errno_t pfe_hif_chnl_cfg_init(void *base_va, uint32_t channel_id)
+errno_t pfe_hif_chnl_cfg_init(addr_t base_va, uint32_t channel_id)
 {
 	/*	Disable channel interrupts */
 	hal_write32(0U, base_va + HIF_CHn_INT_EN(channel_id));
@@ -413,9 +422,9 @@ errno_t pfe_hif_chnl_cfg_init(void *base_va, uint32_t channel_id)
 	pfe_hif_chnl_cfg_rx_disable(base_va, channel_id);
 	pfe_hif_chnl_cfg_tx_disable(base_va, channel_id);
 
-	hal_write32(0x0U, base_va + HIF_INT_COAL_EN_CHn(channel_id));
-	hal_write32(0x0U, base_va + HIF_ABS_INT_TIMER_CHn(channel_id));
-	hal_write32(0x0U, base_va + HIF_ABS_FRAME_COUNT_CHn(channel_id));
+	/*	Disable RX coalescing */
+	(void)pfe_hif_chnl_cfg_set_rx_irq_coalesce(base_va, channel_id, 0U, 0U);
+
 	hal_write32(0x0U, base_va + HIF_LTC_MAX_PKT_CHn_ADDR(channel_id));
 
 	/*	Enable channel status interrupts except of the RX/TX and
@@ -436,11 +445,11 @@ errno_t pfe_hif_chnl_cfg_init(void *base_va, uint32_t channel_id)
  * @param[in]	base_va Base address of HIF register space (virtual)
  * @note		Make sure the call is protected by some per-channel mutex
  */
-void pfe_hif_chnl_cfg_fini(void *base_va, uint32_t channel_id)
+void pfe_hif_chnl_cfg_fini(addr_t base_va, uint32_t channel_id)
 {
 	if (channel_id >= HIF_CFG_MAX_CHANNELS)
 	{
-		NXP_LOG_ERROR("Unsupported channel ID: %d\n", channel_id);
+		NXP_LOG_ERROR("Unsupported channel ID: %u\n", (uint_t)channel_id);
 		return;
 	}
 
@@ -461,7 +470,7 @@ void pfe_hif_chnl_cfg_fini(void *base_va, uint32_t channel_id)
  * @return		EOK if success, error code otherwise
  * @note		Make sure the call is protected by some per-HIF mutex
  */
-errno_t pfe_hif_cfg_init(void *base_va)
+errno_t pfe_hif_cfg_init(addr_t base_va)
 {
 	uint32_t ii = 0u;
 
@@ -493,18 +502,27 @@ errno_t pfe_hif_cfg_init(void *base_va)
 	hal_write32((0xffUL << 16U) | (0xffUL), base_va + HIF_RX_POLL_CTRL);
 #endif /* PFE_HIF_CFG_USE_BD_POLLING */
 
-	/*	MICS */
-	hal_write32(0U
+    /*    MICS */
 #ifdef PFE_CFG_HIF_SEQNUM_CHECK
-				| SEQ_NUM_CHECK_EN
+    hal_write32(0U
+                | SEQ_NUM_CHECK_EN
+                /* | BDPRD_AXI_WRITE_DONE */
+                /* | DBPWR_AXI_WRITE_DONE */
+                /* | RXDXR_AXI_WRITE_DONE */
+                /* | TXDXR_AXI_WRITE_DONE */
+                | HIF_TIMEOUT_EN
+                | BD_START_SEQ_NUM(0x0U)
+                , base_va + HIF_MISC);
+#else
+    hal_write32(0U
+            /* | BDPRD_AXI_WRITE_DONE */
+            /* | DBPWR_AXI_WRITE_DONE */
+            /* | RXDXR_AXI_WRITE_DONE */
+            /* | TXDXR_AXI_WRITE_DONE */
+            | HIF_TIMEOUT_EN
+            | BD_START_SEQ_NUM(0x0U)
+            , base_va + HIF_MISC);
 #endif /* PFE_CFG_HIF_SEQNUM_CHECK */
-				/* | BDPRD_AXI_WRITE_DONE */
-				/* | DBPWR_AXI_WRITE_DONE */
-				/* | RXDXR_AXI_WRITE_DONE */
-				/* | TXDXR_AXI_WRITE_DONE */
-				| HIF_TIMEOUT_EN
-				| BD_START_SEQ_NUM(0x0U)
-				, base_va + HIF_MISC);
 
 	hal_write32(100000000U, base_va + HIF_TIMEOUT_REG);
 	hal_write32(0x33221100U, base_va + HIF_RX_QUEUE_MAP_CH_NO_ADDR);
@@ -523,7 +541,7 @@ errno_t pfe_hif_cfg_init(void *base_va)
  * @param[in]	base_va Base address of HIF register space (virtual)
  * @note		Make sure the call is protected by some per-HIF mutex
  */
-void pfe_hif_cfg_fini(void *base_va)
+void pfe_hif_cfg_fini(addr_t base_va)
 {
 	/*	Disable HIF interrupts */
 	hal_write32(0U, base_va + HIF_ERR_INT_EN);
@@ -536,7 +554,7 @@ void pfe_hif_cfg_fini(void *base_va)
  * @param[in]	base_va Base address of HIF register space (virtual)
  * @return		Number of bytes in HIF FX FIFO
  */
-uint32_t pfe_hif_cfg_get_tx_fifo_fill_level(void *base_va)
+uint32_t pfe_hif_cfg_get_tx_fifo_fill_level(addr_t base_va)
 {
 	return (8U * hal_read32(base_va + HIF_DXR_TX_FIFO_CNT));
 }
@@ -546,13 +564,13 @@ uint32_t pfe_hif_cfg_get_tx_fifo_fill_level(void *base_va)
  * @param[in]	base_va Base address of HIF channel register space (virtual)
  * @param[in]	channel_id Channel identifier
  */
-void pfe_hif_chnl_cfg_tx_enable(void *base_va, uint32_t channel_id)
+void pfe_hif_chnl_cfg_tx_enable(addr_t base_va, uint32_t channel_id)
 {
 	uint32_t reg;
 
 	if (channel_id >= HIF_CFG_MAX_CHANNELS)
 	{
-		NXP_LOG_ERROR("Unsupported channel ID: %d\n", channel_id);
+		NXP_LOG_ERROR("Unsupported channel ID: %u\n", (uint_t)channel_id);
 		return;
 	}
 
@@ -579,13 +597,13 @@ void pfe_hif_chnl_cfg_tx_enable(void *base_va, uint32_t channel_id)
  * @param[in]	base_va Base address of HIF channel register space (virtual)
  * @param[in]	channel_id Channel identifier
  */
-void pfe_hif_chnl_cfg_tx_disable(void *base_va, uint32_t channel_id)
+void pfe_hif_chnl_cfg_tx_disable(addr_t base_va, uint32_t channel_id)
 {
 	uint32_t reg;
 
 	if (channel_id >= HIF_CFG_MAX_CHANNELS)
 	{
-		NXP_LOG_ERROR("Unsupported channel ID: %d\n", channel_id);
+		NXP_LOG_ERROR("Unsupported channel ID: %u\n", (uint_t)channel_id);
 		return;
 	}
 
@@ -602,13 +620,13 @@ void pfe_hif_chnl_cfg_tx_disable(void *base_va, uint32_t channel_id)
  * @param[in]	base_va Base address of HIF channel register space (virtual)
  * @param[in]	channel_id Channel identifier
  */
-void pfe_hif_chnl_cfg_rx_enable(void *base_va, uint32_t channel_id)
+void pfe_hif_chnl_cfg_rx_enable(addr_t base_va, uint32_t channel_id)
 {
 	uint32_t reg;
 
 	if (channel_id >= HIF_CFG_MAX_CHANNELS)
 	{
-		NXP_LOG_ERROR("Unsupported channel ID: %d\n", channel_id);
+		NXP_LOG_ERROR("Unsupported channel ID: %u\n", (uint_t)channel_id);
 		return;
 	}
 
@@ -633,13 +651,13 @@ void pfe_hif_chnl_cfg_rx_enable(void *base_va, uint32_t channel_id)
  * @param[in]	base_va Base address of HIF channel register space (virtual)
  * @param[in]	channel_id Channel identifier
  */
-void pfe_hif_chnl_cfg_rx_disable(void *base_va, uint32_t channel_id)
+void pfe_hif_chnl_cfg_rx_disable(addr_t base_va, uint32_t channel_id)
 {
 	uint32_t reg;
 
 	if (channel_id >= HIF_CFG_MAX_CHANNELS)
 	{
-		NXP_LOG_ERROR("Unsupported channel ID: %d\n", channel_id);
+		NXP_LOG_ERROR("Unsupported channel ID: %u\n", (uint_t)channel_id);
 		return;
 	}
 
@@ -655,7 +673,7 @@ void pfe_hif_chnl_cfg_rx_disable(void *base_va, uint32_t channel_id)
  * @param[in]	base_va Base address of HIF channel register space (virtual)
  * @param[in]	channel_id Channel identifier
  */
-void pfe_hif_chnl_cfg_rx_dma_start(void *base_va, uint32_t channel_id)
+void pfe_hif_chnl_cfg_rx_dma_start(addr_t base_va, uint32_t channel_id)
 {
 #if (FALSE == PFE_HIF_CFG_USE_BD_POLLING)
 	hal_write32(RX_BDP_CH_START, base_va + HIF_RX_CHn_START(channel_id));
@@ -670,7 +688,7 @@ void pfe_hif_chnl_cfg_rx_dma_start(void *base_va, uint32_t channel_id)
  * @param[in]	base_va Base address of HIF channel register space (virtual)
  * @param[in]	channel_id Channel identifier
  */
-void pfe_hif_chnl_cfg_tx_dma_start(void *base_va, uint32_t channel_id)
+void pfe_hif_chnl_cfg_tx_dma_start(addr_t base_va, uint32_t channel_id)
 {
 #if (FALSE == PFE_HIF_CFG_USE_BD_POLLING)
 	hal_write32(TX_BDP_CH_START, base_va + HIF_TX_CHn_START(channel_id));
@@ -686,7 +704,7 @@ void pfe_hif_chnl_cfg_tx_dma_start(void *base_va, uint32_t channel_id)
  * @param[in]	channel_id Channel identifier
  * @note		Make sure the call is protected by some per-channel mutex
  */
-void pfe_hif_chnl_cfg_irq_mask(void *base_va, uint32_t channel_id)
+void pfe_hif_chnl_cfg_irq_mask(addr_t base_va, uint32_t channel_id)
 {
 	uint32_t reg;
 
@@ -701,7 +719,7 @@ void pfe_hif_chnl_cfg_irq_mask(void *base_va, uint32_t channel_id)
  * @param[in]	channel_id Channel identifier
  * @note		Make sure the call is protected by some per-channel mutex
  */
-void pfe_hif_chnl_cfg_irq_unmask(void *base_va, uint32_t channel_id)
+void pfe_hif_chnl_cfg_irq_unmask(addr_t base_va, uint32_t channel_id)
 {
 	uint32_t reg;
 
@@ -716,7 +734,7 @@ void pfe_hif_chnl_cfg_irq_unmask(void *base_va, uint32_t channel_id)
  * @param[in]	channel_id Channel identifier
  * @note		Make sure the call is protected by some per-channel mutex
  */
-void pfe_hif_chnl_cfg_rx_irq_mask(void *base_va, uint32_t channel_id)
+void pfe_hif_chnl_cfg_rx_irq_mask(addr_t base_va, uint32_t channel_id)
 {
 	uint32_t reg;
 
@@ -734,7 +752,7 @@ void pfe_hif_chnl_cfg_rx_irq_mask(void *base_va, uint32_t channel_id)
  * @param[in]	channel_id Channel identifier
  * @note		Make sure the call is protected by some per-channel mutex
  */
-void pfe_hif_chnl_cfg_rx_irq_unmask(void *base_va, uint32_t channel_id)
+void pfe_hif_chnl_cfg_rx_irq_unmask(addr_t base_va, uint32_t channel_id)
 {
 	uint32_t reg;
 
@@ -752,7 +770,7 @@ void pfe_hif_chnl_cfg_rx_irq_unmask(void *base_va, uint32_t channel_id)
  * @param[in]	channel_id Channel identifier
  * @note		Make sure the call is protected by some per-channel mutex
  */
-void pfe_hif_chnl_cfg_tx_irq_mask(void *base_va, uint32_t channel_id)
+void pfe_hif_chnl_cfg_tx_irq_mask(addr_t base_va, uint32_t channel_id)
 {
 	uint32_t reg;
 
@@ -770,7 +788,7 @@ void pfe_hif_chnl_cfg_tx_irq_mask(void *base_va, uint32_t channel_id)
  * @param[in]	channel_id Channel identifier
  * @note		Make sure the call is protected by some per-channel mutex
  */
-void pfe_hif_chnl_cfg_tx_irq_unmask(void *base_va, uint32_t channel_id)
+void pfe_hif_chnl_cfg_tx_irq_unmask(addr_t base_va, uint32_t channel_id)
 {
 	uint32_t reg;
 
@@ -788,11 +806,11 @@ void pfe_hif_chnl_cfg_tx_irq_unmask(void *base_va, uint32_t channel_id)
  * @param[in]	channel_id Channel identifier
  * @param[in]	rx_ring_pa The RX ring address (physical, as seen by host)
  */
-void pfe_hif_chnl_cfg_set_rx_bd_ring_addr(void *base_va, uint32_t channel_id, void *rx_ring_pa)
+void pfe_hif_chnl_cfg_set_rx_bd_ring_addr(addr_t base_va, uint32_t channel_id, const void *rx_ring_pa)
 {
 	if (channel_id >= HIF_CFG_MAX_CHANNELS)
 	{
-		NXP_LOG_ERROR("Unsupported channel ID: %d\n", channel_id);
+		NXP_LOG_ERROR("Unsupported channel ID: %u\n", (uint_t)channel_id);
 		return;
 	}
 
@@ -807,17 +825,17 @@ void pfe_hif_chnl_cfg_set_rx_bd_ring_addr(void *base_va, uint32_t channel_id, vo
  * @param[in]	wb_ring_pa The write-back table address (physical, as seen by host)
  * @param[in]	ring_len Number of entries in the WB table
  */
-void pfe_hif_chnl_cfg_set_rx_wb_table(void *base_va, uint32_t channel_id, void *wb_tbl_pa, uint32_t tbl_len)
+void pfe_hif_chnl_cfg_set_rx_wb_table(addr_t base_va, uint32_t channel_id, const void *wb_tbl_pa, uint32_t tbl_len)
 {
 	if (channel_id >= HIF_CFG_MAX_CHANNELS)
 	{
-		NXP_LOG_ERROR("Unsupported channel ID: %d\n", channel_id);
+		NXP_LOG_ERROR("Unsupported channel ID: %u\n", (uint_t)channel_id);
 		return;
 	}
 
 	if (tbl_len > 0xffffU)
 	{
-		NXP_LOG_ERROR("Unsupported WB table size: %d\n", tbl_len);
+		NXP_LOG_ERROR("Unsupported WB table size: %u\n", (uint_t)tbl_len);
 		return;
 	}
 
@@ -832,11 +850,11 @@ void pfe_hif_chnl_cfg_set_rx_wb_table(void *base_va, uint32_t channel_id, void *
  * @param[in]	channel_id Channel identifier
  * @param[in]	tx_ring_pa The TX ring address (physical, as seen by host)
  */
-void pfe_hif_chnl_cfg_set_tx_bd_ring_addr(void *base_va, uint32_t channel_id, void *tx_ring_pa)
+void pfe_hif_chnl_cfg_set_tx_bd_ring_addr(addr_t base_va, uint32_t channel_id, const void *tx_ring_pa)
 {
 	if (channel_id >= HIF_CFG_MAX_CHANNELS)
 	{
-		NXP_LOG_ERROR("Unsupported channel ID: %d\n", channel_id);
+		NXP_LOG_ERROR("Unsupported channel ID: %u\n", (uint_t)channel_id);
 		return;
 	}
 
@@ -851,17 +869,17 @@ void pfe_hif_chnl_cfg_set_tx_bd_ring_addr(void *base_va, uint32_t channel_id, vo
  * @param[in]	wb_ring_pa The write-back table address (physical, as seen by host)
  * @param[in]	ring_len Number of entries in the WB table
  */
-void pfe_hif_chnl_cfg_set_tx_wb_table(void *base_va, uint32_t channel_id, void *wb_tbl_pa, uint32_t tbl_len)
+void pfe_hif_chnl_cfg_set_tx_wb_table(addr_t base_va, uint32_t channel_id, const void *wb_tbl_pa, uint32_t tbl_len)
 {
 	if (channel_id >= HIF_CFG_MAX_CHANNELS)
 	{
-		NXP_LOG_ERROR("Unsupported channel ID: %d\n", channel_id);
+		NXP_LOG_ERROR("Unsupported channel ID: %u\n", (uint_t)channel_id);
 		return;
 	}
 
 	if (tbl_len > 0xffffU)
 	{
-		NXP_LOG_ERROR("Unsupported WB table size: %d\n", tbl_len);
+		NXP_LOG_ERROR("Unsupported WB table size: %u\n", (uint_t)tbl_len);
 		return;
 	}
 
@@ -876,7 +894,7 @@ void pfe_hif_chnl_cfg_set_tx_wb_table(void *base_va, uint32_t channel_id, void *
  * @param[in]	channel_id Channel identifier
  * @return		TRUE when the RX ring BD processor is active or FALSE when it is idle
  */
-bool_t pfe_hif_chnl_cfg_is_rx_dma_active(void *base_va, uint32_t channel_id)
+bool_t pfe_hif_chnl_cfg_is_rx_dma_active(addr_t base_va, uint32_t channel_id)
 {
 	uint32_t reg;
 
@@ -900,7 +918,7 @@ bool_t pfe_hif_chnl_cfg_is_rx_dma_active(void *base_va, uint32_t channel_id)
  * @param[in]	channel_id Channel identifier
  * @return		TRUE when the TX ring BD processor is active or FALSE when it is idle
  */
-bool_t pfe_hif_chnl_cfg_is_tx_dma_active(void *base_va, uint32_t channel_id)
+bool_t pfe_hif_chnl_cfg_is_tx_dma_active(addr_t base_va, uint32_t channel_id)
 {
 	uint32_t reg;
 
@@ -924,7 +942,7 @@ bool_t pfe_hif_chnl_cfg_is_tx_dma_active(void *base_va, uint32_t channel_id)
  * @param[in]	channel_id Channel identifier
  * @return		The sequence number
  */
-uint16_t pfe_hif_chnl_cfg_get_rx_seqnum(void *base_va, uint32_t channel_id)
+uint16_t pfe_hif_chnl_cfg_get_rx_seqnum(addr_t base_va, uint32_t channel_id)
 {
 	if (0U == hal_read32(base_va + HIF_RX_PKT_CNT0_CHn(channel_id)))
 	{
@@ -942,7 +960,7 @@ uint16_t pfe_hif_chnl_cfg_get_rx_seqnum(void *base_va, uint32_t channel_id)
  * @param[in]	channel_id Channel identifier
  * @return		The sequence number
  */
-uint16_t pfe_hif_chnl_cfg_get_tx_seqnum(void *base_va, uint32_t channel_id)
+uint16_t pfe_hif_chnl_cfg_get_tx_seqnum(addr_t base_va, uint32_t channel_id)
 {
 	if (0U == hal_read32(base_va + HIF_TX_PKT_CNT1_CHn(channel_id)))
 	{
@@ -961,7 +979,7 @@ uint16_t pfe_hif_chnl_cfg_get_tx_seqnum(void *base_va, uint32_t channel_id)
  * @retval		TRUE The FIFO is empty
  * @retval		FALSE The FIFO is not emtpy
  */
-bool_t pfe_hif_chnl_cfg_is_rx_bdp_fifo_empty(void *base_va, uint32_t channel_id)
+bool_t pfe_hif_chnl_cfg_is_rx_bdp_fifo_empty(addr_t base_va, uint32_t channel_id)
 {
 	return (0U == hal_read32(base_va + HIF_BDP_CHn_RX_FIFO_CNT(channel_id)));
 }
@@ -973,11 +991,118 @@ bool_t pfe_hif_chnl_cfg_is_rx_bdp_fifo_empty(void *base_va, uint32_t channel_id)
  * @retval		TRUE The FIFO is empty
  * @retval		FALSE The FIFO is not emtpy
  */
-bool_t pfe_hif_chnl_cfg_is_tx_bdp_fifo_empty(void *base_va, uint32_t channel_id)
+bool_t pfe_hif_chnl_cfg_is_tx_bdp_fifo_empty(addr_t base_va, uint32_t channel_id)
 {
 	return (0U == hal_read32(base_va + HIF_BDP_CHn_TX_FIFO_CNT(channel_id)));
 }
 
+/**
+ * @brief		Get RX coalesce setting
+ * @param[in]	base_va Base address of HIF channel register space (virtual)
+ * @param[in]	channel_id Channel identifier
+ * @param[out]	frames Number of frames
+ * @param[out]	cycles Number of cycles
+ */
+errno_t pfe_hif_chnl_cfg_get_rx_irq_coalesce(addr_t base_va, uint32_t channel_id, uint32_t *frames, uint32_t *cycles)
+{
+	uint32_t ena = hal_read32(base_va + HIF_INT_COAL_EN_CHn(channel_id));
+
+	if (0U == (ena & (HIF_INT_COAL_TIME_ENABLE | HIF_INT_COAL_FRAME_ENABLE)))
+	{
+		/* Coalesce is disabled */
+		*cycles = 0U;
+		*frames = 0U;
+	}
+	else
+	{
+		if (0U != (ena & HIF_INT_COAL_TIME_ENABLE))
+		{
+			*cycles = hal_read32(base_va + HIF_ABS_INT_TIMER_CHn(channel_id));
+		}
+		else
+		{
+			*cycles = 0U;
+		}
+
+		if (0U != (ena & HIF_INT_COAL_FRAME_ENABLE))
+		{
+			*frames = hal_read32(base_va + HIF_ABS_FRAME_COUNT_CHn(channel_id));
+		}
+		else
+		{
+			*frames = 0U;
+		}
+	}
+
+	return EOK;
+}
+
+/**
+ * @brief		Set HIF channel RX coalesce setting
+ * @details		The coalesce setting for HIF channel.
+ * 				If both frames and cycles are zero, then coalesting
+ * 				will be disabled.
+ * @param[in]	base_va Base address of HIF channel register space (virtual)
+ * @param[in]	channel_id Channel identifier
+ * @param[in]	frames Number of frames
+ * @param[in]	cycles Number of cycles
+ */
+errno_t pfe_hif_chnl_cfg_set_rx_irq_coalesce(addr_t base_va, uint32_t channel_id, uint32_t frames, uint32_t cycles)
+{
+	errno_t ret;
+
+	/* Disable coalescing */
+	hal_write32(0x0U, base_va + HIF_INT_COAL_EN_CHn(channel_id));
+	hal_write32(0x0U, base_va + HIF_ABS_FRAME_COUNT_CHn(channel_id));
+	hal_write32(0x0U, base_va + HIF_ABS_INT_TIMER_CHn(channel_id));
+
+	if ((0U == cycles) && (0U == frames))
+	{
+		/* Remain coalesce disabled */
+		ret = EOK;
+	}
+	else
+	{
+		if (0U < frames)
+		{
+			/* Frame based coalescing is unsupported on S32G2 silicon */
+			ret = EINVAL;
+		}
+		else
+		{
+
+			/* Enable time-based coalescing */
+			hal_write32(HIF_INT_COAL_TIME_ENABLE, base_va + HIF_INT_COAL_EN_CHn(channel_id));
+			hal_write32(frames, base_va + HIF_ABS_FRAME_COUNT_CHn(channel_id));
+			ret = EOK;
+		}
+	}
+
+	return ret;
+}
+
+/**
+ * @brief		Get number of transmitted packets
+ * @param[in]	base_va Base address of channel register space (virtual)
+ * @param[in]	channel_id 	Channel identifier
+ * @return		Number of transmitted packets
+ */
+uint32_t pfe_hif_chnl_cfg_get_tx_cnt(addr_t base_va, uint32_t channel_id)
+{
+	return hal_read32(base_va + HIF_RX_PKT_CNT1_CHn(channel_id));
+}
+
+/**
+ * @brief		Get number of received packets
+ * @param[in]	base_va Base address of channel register space (virtual)
+ * @param[in]	channel_id 	Channel identifier
+ * @return		Number of received packets
+ */
+uint32_t pfe_hif_chnl_cfg_get_rx_cnt(addr_t base_va, uint32_t channel_id)
+{
+	return hal_read32(base_va + HIF_TX_PKT_CNT2_CHn(channel_id));
+}
+
 /**
  * @brief		Get HIF channel statistics in text form
  * @details		This is a HW-specific function providing detailed text statistics
@@ -989,16 +1114,36 @@ bool_t pfe_hif_chnl_cfg_is_tx_bdp_fifo_empty(void *base_va, uint32_t channel_id)
  * @param[in]	verb_level 	Verbosity level number of data written to the buffer (0:less 1:more)
  * @return		Number of bytes written to the buffer
  */
-uint32_t pfe_hif_chnl_cfg_get_text_stat(void *base_va, uint32_t channel_id, char_t *buf, uint32_t size, uint8_t verb_level)
+uint32_t pfe_hif_chnl_cfg_get_text_stat(addr_t base_va, uint32_t channel_id, char_t *buf, uint32_t size, uint8_t verb_level)
 {
 	/*	Fill the buffer with runtime data */
-    (void)base_va;
-    (void)channel_id;
-    (void)buf;
-    (void)size;
-    (void)verb_level;
-    
-	return 0U;
+	uint32_t len = 0U;
+	uint32_t reg;
+
+	(void)verb_level;
+
+	len += oal_util_snprintf(buf + len, size - len, "[CHANNEL %d]\n", channel_id);
+	reg = hal_read32(base_va + HIF_RX_STATUS_0_CHn(channel_id));
+	len += oal_util_snprintf(buf + len, size - len, "HIF_RX_STATUS_0           : 0x%x\n", reg);
+	reg = hal_read32(base_va + HIF_RX_DMA_STATUS_0_CHn(channel_id));
+	len += oal_util_snprintf(buf + len, size - len, "HIF_RX_DMA_STATUS_0       : 0x%x\n", reg);
+	reg = hal_read32(base_va + HIF_RX_PKT_CNT0_CHn(channel_id));
+	len += oal_util_snprintf(buf + len, size - len, "HIF_RX_PKT_CNT0           : 0x%x\n", reg);
+	reg = hal_read32(base_va + HIF_RX_PKT_CNT1_CHn(channel_id));
+	len += oal_util_snprintf(buf + len, size - len, "HIF_RX_PKT_CNT1           : 0x%x\n", reg);
+
+	reg = hal_read32(base_va + HIF_TX_STATUS_0_CHn(channel_id));
+	len += oal_util_snprintf(buf + len, size - len, "HIF_TX_STATUS_0           : 0x%x\n", reg);
+	reg = hal_read32(base_va + HIF_TX_STATUS_1_CHn(channel_id));
+	len += oal_util_snprintf(buf + len, size - len, "HIF_TX_STATUS_1           : 0x%x\n", reg);
+	reg = hal_read32(base_va + HIF_TX_DMA_STATUS_0_CHn(channel_id));
+	len += oal_util_snprintf(buf + len, size - len, "HIF_TX_DMA_STATUS_0       : 0x%x\n", reg);
+	reg = hal_read32(base_va + HIF_TX_PKT_CNT0_CHn(channel_id));
+	len += oal_util_snprintf(buf + len, size - len, "HIF_TX_PKT_CNT0           : 0x%x\n", reg);
+	reg = hal_read32(base_va + HIF_TX_PKT_CNT1_CHn(channel_id));
+	len += oal_util_snprintf(buf + len, size - len, "HIF_TX_PKT_CNT1           : 0x%x\n", reg);
+
+	return len;
 }
 
 /**
@@ -1011,13 +1156,13 @@ uint32_t pfe_hif_chnl_cfg_get_text_stat(void *base_va, uint32_t channel_id, char
  * @param[in]	verb_level 	Verbosity level
  * @return		Number of bytes written to the buffer
  */
-uint32_t pfe_hif_cfg_get_text_stat(void *base_va, char_t *buf, uint32_t size, uint8_t verb_level)
+uint32_t pfe_hif_cfg_get_text_stat(addr_t base_va, char_t *buf, uint32_t size, uint8_t verb_level)
 {
 	uint32_t len = 0U;
 	uint32_t reg;
 
 #if defined(PFE_CFG_NULL_ARG_CHECK)
-	if (unlikely(NULL == base_va))
+	if (unlikely(NULL_ADDR == base_va))
 	{
 		NXP_LOG_ERROR("NULL argument received\n");
 		return 0U;
diff --git a/sw/pfe_platform/hw/s32g/pfe_hif_csr.h b/sw/pfe_platform/hw/s32g/pfe_hif_csr.h
index 51cf8b7..b127804 100644
--- a/sw/pfe_platform/hw/s32g/pfe_hif_csr.h
+++ b/sw/pfe_platform/hw/s32g/pfe_hif_csr.h
@@ -187,7 +187,8 @@
 #define HIF_TXPKT_INT_EN					(1UL << 4U)
 #define HIF_RX_POLL_CTRL_CYCLE				0x0400UL
 #define HIF_TX_POLL_CTRL_CYCLE				0x0400UL
-#define HIF_INT_COAL_ENABLE					(1UL << 31)
+#define HIF_INT_COAL_TIME_ENABLE			(1UL << 0U)
+#define HIF_INT_COAL_FRAME_ENABLE			(1UL << 1U)
 #define BDP_CSR_RX_DMA_ACTV					(1UL << 16)
 #define HIF_INT_SRC_HIF_CH0_INT				(1UL << 0U)
 #define HIF_INT_SRC_HIF_CH1_INT				(1UL << 1U)
@@ -253,38 +254,42 @@
 #define DXR_CSR_RX_BVALID_FIFO_UNDERRUN_INT			(1UL << 19U)
 #define HIF_AXI_DXR_CSR_RX_BVALID_FIFO_UNDERRUN_INT	(1UL << 20U)
 
-errno_t pfe_hif_cfg_isr(void *base_va);
-void pfe_hif_cfg_irq_mask(void *base_va);
-void pfe_hif_cfg_irq_unmask(void *base_va);
-errno_t pfe_hif_chnl_cfg_isr(void *base_va, uint32_t channel_id, pfe_hif_chnl_event_t *events);
-errno_t pfe_hif_chnl_cfg_init(void *base_va, uint32_t channel_id);
-void pfe_hif_chnl_cfg_fini(void *base_va, uint32_t channel_id);
-void pfe_hif_chnl_cfg_irq_mask(void *base_va, uint32_t channel_id);
-void pfe_hif_chnl_cfg_rx_irq_mask(void *base_va, uint32_t channel_id);
-void pfe_hif_chnl_cfg_tx_irq_mask(void *base_va, uint32_t channel_id);
-void pfe_hif_chnl_cfg_irq_unmask(void *base_va, uint32_t channel_id);
-void pfe_hif_chnl_cfg_rx_irq_unmask(void *base_va, uint32_t channel_id);
-void pfe_hif_chnl_cfg_tx_irq_unmask(void *base_va, uint32_t channel_id);
-errno_t pfe_hif_cfg_init(void *base_va);
-void pfe_hif_cfg_fini(void *base_va);
-uint32_t pfe_hif_cfg_get_tx_fifo_fill_level(void *base_va);
-void pfe_hif_chnl_cfg_tx_enable(void *base_va, uint32_t channel_id);
-void pfe_hif_chnl_cfg_tx_disable(void *base_va, uint32_t channel_id);
-void pfe_hif_chnl_cfg_rx_enable(void *base_va, uint32_t channel_id);
-void pfe_hif_chnl_cfg_rx_disable(void *base_va, uint32_t channel_id);
-void pfe_hif_chnl_cfg_rx_dma_start(void *base_va, uint32_t channel_id);
-void pfe_hif_chnl_cfg_tx_dma_start(void *base_va, uint32_t channel_id);
-void pfe_hif_chnl_cfg_set_rx_bd_ring_addr(void *base_va, uint32_t channel_id, void *rx_ring_pa);
-void pfe_hif_chnl_cfg_set_tx_bd_ring_addr(void *base_va, uint32_t channel_id, void *tx_ring_pa);
-void pfe_hif_chnl_cfg_set_rx_wb_table(void *base_va, uint32_t channel_id, void *wb_tbl_pa, uint32_t tbl_len);
-void pfe_hif_chnl_cfg_set_tx_wb_table(void *base_va, uint32_t channel_id, void *wb_tbl_pa, uint32_t tbl_len);
-bool_t pfe_hif_chnl_cfg_is_rx_dma_active(void *base_va, uint32_t channel_id);
-bool_t pfe_hif_chnl_cfg_is_tx_dma_active(void *base_va, uint32_t channel_id);
-uint16_t pfe_hif_chnl_cfg_get_rx_seqnum(void *base_va, uint32_t channel_id);
-uint16_t pfe_hif_chnl_cfg_get_tx_seqnum(void *base_va, uint32_t channel_id);
-bool_t pfe_hif_chnl_cfg_is_rx_bdp_fifo_empty(void *base_va, uint32_t channel_id);
-bool_t pfe_hif_chnl_cfg_is_tx_bdp_fifo_empty(void *base_va, uint32_t channel_id);
-uint32_t pfe_hif_chnl_cfg_get_text_stat(void *base_va, uint32_t channel_id, char_t *buf, uint32_t size, uint8_t verb_level);
-uint32_t pfe_hif_cfg_get_text_stat(void *base_va, char_t *buf, uint32_t size, uint8_t verb_level);
+errno_t pfe_hif_cfg_isr(addr_t base_va);
+void pfe_hif_cfg_irq_mask(addr_t base_va);
+void pfe_hif_cfg_irq_unmask(addr_t base_va);
+errno_t pfe_hif_chnl_cfg_isr(addr_t base_va, uint32_t channel_id, pfe_hif_chnl_event_t *events);
+errno_t pfe_hif_chnl_cfg_init(addr_t base_va, uint32_t channel_id);
+void pfe_hif_chnl_cfg_fini(addr_t base_va, uint32_t channel_id);
+void pfe_hif_chnl_cfg_irq_mask(addr_t base_va, uint32_t channel_id);
+void pfe_hif_chnl_cfg_rx_irq_mask(addr_t base_va, uint32_t channel_id);
+void pfe_hif_chnl_cfg_tx_irq_mask(addr_t base_va, uint32_t channel_id);
+void pfe_hif_chnl_cfg_irq_unmask(addr_t base_va, uint32_t channel_id);
+void pfe_hif_chnl_cfg_rx_irq_unmask(addr_t base_va, uint32_t channel_id);
+void pfe_hif_chnl_cfg_tx_irq_unmask(addr_t base_va, uint32_t channel_id);
+errno_t pfe_hif_cfg_init(addr_t base_va);
+void pfe_hif_cfg_fini(addr_t base_va);
+uint32_t pfe_hif_cfg_get_tx_fifo_fill_level(addr_t base_va);
+void pfe_hif_chnl_cfg_tx_enable(addr_t base_va, uint32_t channel_id);
+void pfe_hif_chnl_cfg_tx_disable(addr_t base_va, uint32_t channel_id);
+void pfe_hif_chnl_cfg_rx_enable(addr_t base_va, uint32_t channel_id);
+void pfe_hif_chnl_cfg_rx_disable(addr_t base_va, uint32_t channel_id);
+void pfe_hif_chnl_cfg_rx_dma_start(addr_t base_va, uint32_t channel_id);
+void pfe_hif_chnl_cfg_tx_dma_start(addr_t base_va, uint32_t channel_id);
+void pfe_hif_chnl_cfg_set_rx_bd_ring_addr(addr_t base_va, uint32_t channel_id, const void *rx_ring_pa);
+void pfe_hif_chnl_cfg_set_tx_bd_ring_addr(addr_t base_va, uint32_t channel_id, const void *tx_ring_pa);
+void pfe_hif_chnl_cfg_set_rx_wb_table(addr_t base_va, uint32_t channel_id, const void *wb_tbl_pa, uint32_t tbl_len);
+void pfe_hif_chnl_cfg_set_tx_wb_table(addr_t base_va, uint32_t channel_id, const void *wb_tbl_pa, uint32_t tbl_len);
+bool_t pfe_hif_chnl_cfg_is_rx_dma_active(addr_t base_va, uint32_t channel_id);
+bool_t pfe_hif_chnl_cfg_is_tx_dma_active(addr_t base_va, uint32_t channel_id);
+uint16_t pfe_hif_chnl_cfg_get_rx_seqnum(addr_t base_va, uint32_t channel_id);
+uint16_t pfe_hif_chnl_cfg_get_tx_seqnum(addr_t base_va, uint32_t channel_id);
+bool_t pfe_hif_chnl_cfg_is_rx_bdp_fifo_empty(addr_t base_va, uint32_t channel_id);
+bool_t pfe_hif_chnl_cfg_is_tx_bdp_fifo_empty(addr_t base_va, uint32_t channel_id);
+errno_t pfe_hif_chnl_cfg_set_rx_irq_coalesce(addr_t base_va, uint32_t channel_id, uint32_t frames, uint32_t cycles);
+errno_t pfe_hif_chnl_cfg_get_rx_irq_coalesce(addr_t base_va, uint32_t channel_id, uint32_t *frames, uint32_t *cycles);
+uint32_t pfe_hif_chnl_cfg_get_text_stat(addr_t base_va, uint32_t channel_id, char_t *buf, uint32_t size, uint8_t verb_level);
+uint32_t pfe_hif_chnl_cfg_get_tx_cnt(addr_t base_va, uint32_t channel_id);
+uint32_t pfe_hif_chnl_cfg_get_rx_cnt(addr_t base_va, uint32_t channel_id);
+uint32_t pfe_hif_cfg_get_text_stat(addr_t base_va, char_t *buf, uint32_t size, uint8_t verb_level);
 
 #endif /* PFE_HIF_CSR_H_ */
diff --git a/sw/pfe_platform/hw/s32g/pfe_hif_nocpy_csr.c b/sw/pfe_platform/hw/s32g/pfe_hif_nocpy_csr.c
index 0a4ff1c..74e14a3 100644
--- a/sw/pfe_platform/hw/s32g/pfe_hif_nocpy_csr.c
+++ b/sw/pfe_platform/hw/s32g/pfe_hif_nocpy_csr.c
@@ -53,7 +53,7 @@ static pfe_hif_nocpy_cfg_cbk_t nocpy_tx_cbk = {NULL, NULL};
  * @return		EOK if interrupt has been handled, error code otherwise
  * @note		Make sure the call is protected by some per-HIF mutex
  */
-errno_t pfe_hif_nocpy_cfg_isr(void *base_va)
+errno_t pfe_hif_nocpy_cfg_isr(addr_t base_va)
 {
 	uint32_t reg_src, reg_en;
 	errno_t ret = ENOENT;
@@ -109,7 +109,7 @@ errno_t pfe_hif_nocpy_cfg_isr(void *base_va)
  * @param[in]	base_va Base address of HIF NOCPY register space (virtual)
  * @note		Make sure the call is protected by some per-HIF mutex
  */
-void pfe_hif_nocpy_cfg_irq_mask(void *base_va)
+void pfe_hif_nocpy_cfg_irq_mask(addr_t base_va)
 {
 	uint32_t reg;
 
@@ -123,7 +123,7 @@ void pfe_hif_nocpy_cfg_irq_mask(void *base_va)
  * @param[in]	base_va Base address of HIF register space (virtual)
  * @note		Make sure the call is protected by some per-HIF mutex
  */
-void pfe_hif_nocpy_cfg_irq_unmask(void *base_va)
+void pfe_hif_nocpy_cfg_irq_unmask(addr_t base_va)
 {
 	uint32_t reg;
 
@@ -178,7 +178,7 @@ errno_t pfe_hif_nocpy_cfg_set_cbk(pfe_hif_chnl_event_t event, pfe_hif_chnl_cbk_t
  * @return		EOK if success, error code otherwise
  * @note		Make sure the call is protected by some per-HIF mutex
  */
-errno_t pfe_hif_nocpy_cfg_init(void *base_va)
+errno_t pfe_hif_nocpy_cfg_init(addr_t base_va)
 {
 	/*	Disable channel interrupts */
 	hal_write32(0U, base_va + HIF_NOCPY_INT_EN);
@@ -214,7 +214,7 @@ errno_t pfe_hif_nocpy_cfg_init(void *base_va)
  * @param[in]	base_va Base address of HIF register space (virtual)
  * @note		Make sure the call is protected by some per-HIF mutex
  */
-void pfe_hif_nocpy_cfg_fini(void *base_va)
+void pfe_hif_nocpy_cfg_fini(addr_t base_va)
 {
 	/*	Disable HIF NOCPY interrupts */
 	hal_write32(0U, base_va + HIF_NOCPY_INT_EN);
@@ -225,7 +225,7 @@ void pfe_hif_nocpy_cfg_fini(void *base_va)
  * @param[in]	base_va Base address of HIF_NOCPY register space (virtual)
  * @param[in]	channel_id Channel identifier
  */
-void pfe_hif_nocpy_cfg_tx_enable(void *base_va)
+void pfe_hif_nocpy_cfg_tx_enable(addr_t base_va)
 {
 	uint32_t regval;
 
@@ -245,7 +245,7 @@ void pfe_hif_nocpy_cfg_tx_enable(void *base_va)
  * @param[in]	base_va Base address of HIF_NOCPY register space (virtual)
  * @param[in]	channel_id Channel identifier
  */
-void pfe_hif_nocpy_cfg_tx_disable(void *base_va)
+void pfe_hif_nocpy_cfg_tx_disable(addr_t base_va)
 {
 	hal_write32(0U, base_va + HIF_NOCPY_TX_CTRL);
 	pfe_hif_nocpy_cfg_tx_irq_mask(base_va);
@@ -256,7 +256,7 @@ void pfe_hif_nocpy_cfg_tx_disable(void *base_va)
  * @param[in]	base_va Base address of HIF_NOCPY register space (virtual)
  * @param[in]	channel_id Channel identifier
  */
-void pfe_hif_nocpy_cfg_rx_enable(void *base_va)
+void pfe_hif_nocpy_cfg_rx_enable(addr_t base_va)
 {
 	uint32_t regval;
 
@@ -276,7 +276,7 @@ void pfe_hif_nocpy_cfg_rx_enable(void *base_va)
  * @param[in]	base_va Base address of HIF_NOCPY register space (virtual)
  * @param[in]	channel_id Channel identifier
  */
-void pfe_hif_nocpy_cfg_rx_disable(void *base_va)
+void pfe_hif_nocpy_cfg_rx_disable(addr_t base_va)
 {
 
 	hal_write32(0U, base_va + HIF_NOCPY_RX_CTRL);
@@ -289,7 +289,7 @@ void pfe_hif_nocpy_cfg_rx_disable(void *base_va)
  * @param[in]	base_va Base address of HIF_NOCPY register space (virtual)
  * @param[in]	channel_id Channel identifier
  */
-void pfe_hif_nocpy_cfg_rx_dma_start(void *base_va)
+void pfe_hif_nocpy_cfg_rx_dma_start(addr_t base_va)
 {
 #if (FALSE == PFE_HIF_NOCPY_CFG_USE_BD_POLLING)
 	uint32_t regval;
@@ -305,7 +305,7 @@ void pfe_hif_nocpy_cfg_rx_dma_start(void *base_va)
  * @param[in]	base_va Base address of HIF_NOCPY register space (virtual)
  * @param[in]	channel_id Channel identifier
  */
-void pfe_hif_nocpy_cfg_tx_dma_start(void *base_va)
+void pfe_hif_nocpy_cfg_tx_dma_start(addr_t base_va)
 {
 #if (FALSE == PFE_HIF_NOCPY_CFG_USE_BD_POLLING)
 	uint32_t regval;
@@ -321,7 +321,7 @@ void pfe_hif_nocpy_cfg_tx_dma_start(void *base_va)
  * @param[in]	base_va Base address of HIF NOCPY register space (virtual)
  * @note		Make sure the call is protected by some per-HIF mutex
  */
-void pfe_hif_nocpy_cfg_rx_irq_mask(void *base_va)
+void pfe_hif_nocpy_cfg_rx_irq_mask(addr_t base_va)
 {
 	uint32_t reg;
 
@@ -337,7 +337,7 @@ void pfe_hif_nocpy_cfg_rx_irq_mask(void *base_va)
  * @param[in]	base_va Base address of HIF NOCPY register space (virtual)
  * @note		Make sure the call is protected by some per-HIF mutex
  */
-void pfe_hif_nocpy_cfg_rx_irq_unmask(void *base_va)
+void pfe_hif_nocpy_cfg_rx_irq_unmask(addr_t base_va)
 {
 	uint32_t reg;
 
@@ -353,7 +353,7 @@ void pfe_hif_nocpy_cfg_rx_irq_unmask(void *base_va)
  * @param[in]	base_va Base address of HIF NOCPY register space (virtual)
  * @note		Make sure the call is protected by some per-HIF mutex
  */
-void pfe_hif_nocpy_cfg_tx_irq_mask(void *base_va)
+void pfe_hif_nocpy_cfg_tx_irq_mask(addr_t base_va)
 {
 	uint32_t reg;
 
@@ -369,7 +369,7 @@ void pfe_hif_nocpy_cfg_tx_irq_mask(void *base_va)
  * @param[in]	base_va Base address of HIF NOCPY register space (virtual)
  * @note		Make sure the call is protected by some per-HIF mutex
  */
-void pfe_hif_nocpy_cfg_tx_irq_unmask(void *base_va)
+void pfe_hif_nocpy_cfg_tx_irq_unmask(addr_t base_va)
 {
 	uint32_t reg;
 
@@ -386,7 +386,7 @@ void pfe_hif_nocpy_cfg_tx_irq_unmask(void *base_va)
  * @param[in]	channel_id Channel identifier
  * @param[in]	rx_ring_pa The RX ring address (physical, as seen by host)
  */
-void pfe_hif_nocpy_cfg_set_rx_bd_ring_addr(void *base_va, void *rx_ring_pa)
+void pfe_hif_nocpy_cfg_set_rx_bd_ring_addr(addr_t base_va, const void *rx_ring_pa)
 {
 	hal_write32((uint32_t)PFE_CFG_MEMORY_PHYS_TO_PFE((addr_t)rx_ring_pa & 0xffffffffU), base_va + HIF_NOCPY_RX_BDP_ADDR);
 }
@@ -397,7 +397,7 @@ void pfe_hif_nocpy_cfg_set_rx_bd_ring_addr(void *base_va, void *rx_ring_pa)
  * @param[in]	channel_id Channel identifier
  * @param[in]	tx_ring_pa The TX ring address (physical, as seen by host)
  */
-void pfe_hif_nocpy_cfg_set_tx_bd_ring_addr(void *base_va, void *tx_ring_pa)
+void pfe_hif_nocpy_cfg_set_tx_bd_ring_addr(addr_t base_va, const void *tx_ring_pa)
 {
 	hal_write32((uint32_t)PFE_CFG_MEMORY_PHYS_TO_PFE((addr_t)tx_ring_pa), base_va + HIF_NOCPY_TX_BDP_ADDR);
 }
@@ -408,7 +408,7 @@ void pfe_hif_nocpy_cfg_set_tx_bd_ring_addr(void *base_va, void *tx_ring_pa)
  * @param[in]	channel_id Channel identifier
  * @return		TRUE when the RX ring BD processor is active or FALSE when it is idle
  */
-bool_t pfe_hif_nocpy_cfg_is_rx_dma_active(void *base_va)
+bool_t pfe_hif_nocpy_cfg_is_rx_dma_active(addr_t base_va)
 {
 	uint32_t reg;
 
@@ -430,7 +430,7 @@ bool_t pfe_hif_nocpy_cfg_is_rx_dma_active(void *base_va)
  * @param[in]	channel_id Channel identifier
  * @return		TRUE when the TX ring BD processor is active or FALSE when it is idle
  */
-bool_t pfe_hif_nocpy_cfg_is_tx_dma_active(void *base_va)
+bool_t pfe_hif_nocpy_cfg_is_tx_dma_active(addr_t base_va)
 {
 	uint32_t reg;
 
@@ -454,7 +454,7 @@ bool_t pfe_hif_nocpy_cfg_is_tx_dma_active(void *base_va)
  * @param[in]	verb_level 	Verbosity level number of data written to the buffer (0:less 1:more)
  * @return		Number of bytes written to the buffer
  */
-uint32_t pfe_hif_nocpy_chnl_cfg_get_text_stat(void *base_va, char_t *buf, uint32_t size, uint8_t verb_level)
+uint32_t pfe_hif_nocpy_chnl_cfg_get_text_stat(addr_t base_va, const char_t *buf, uint32_t size, uint8_t verb_level)
 {
     (void)base_va;
     (void)buf;
@@ -473,13 +473,13 @@ uint32_t pfe_hif_nocpy_chnl_cfg_get_text_stat(void *base_va, char_t *buf, uint32
  * @param[in]	verb_level 	Verbosity level
  * @return		Number of bytes written to the buffer
  */
-uint32_t pfe_hif_nocpy_cfg_get_text_stat(void *base_va, char_t *buf, uint32_t size, uint8_t verb_level)
+uint32_t pfe_hif_nocpy_cfg_get_text_stat(addr_t base_va, char_t *buf, uint32_t size, uint8_t verb_level)
 {
 	uint32_t len = 0U;
 	uint32_t reg;
 
 #if defined(PFE_CFG_NULL_ARG_CHECK)
-	if (unlikely(NULL == base_va))
+	if (unlikely(NULL_ADDR == base_va))
 	{
 		NXP_LOG_ERROR("NULL argument received\n");
 		return 0U;
diff --git a/sw/pfe_platform/hw/s32g/pfe_hif_nocpy_csr.h b/sw/pfe_platform/hw/s32g/pfe_hif_nocpy_csr.h
index 405e72f..a2e4c34 100644
--- a/sw/pfe_platform/hw/s32g/pfe_hif_nocpy_csr.h
+++ b/sw/pfe_platform/hw/s32g/pfe_hif_nocpy_csr.h
@@ -1,7 +1,7 @@
 /* =========================================================================
  *  
  *  Copyright (c) 2019 Imagination Technologies Limited
- *  Copyright 2018-2020 NXP
+ *  Copyright 2018-2021 NXP
  *
  *  SPDX-License-Identifier: GPL-2.0
  *
@@ -58,27 +58,27 @@
 #define BDP_CSR_TX_CBD_INT			(1U << 3)
 #define BDP_CSR_TX_PKT_INT			(1U << 4)
 
-errno_t pfe_hif_nocpy_cfg_isr(void *base_va);
-void pfe_hif_nocpy_cfg_irq_mask(void *base_va);
-void pfe_hif_nocpy_cfg_irq_unmask(void *base_va);
+errno_t pfe_hif_nocpy_cfg_isr(addr_t base_va);
+void pfe_hif_nocpy_cfg_irq_mask(addr_t base_va);
+void pfe_hif_nocpy_cfg_irq_unmask(addr_t base_va);
 errno_t pfe_hif_nocpy_cfg_set_cbk(pfe_hif_chnl_event_t event, pfe_hif_chnl_cbk_t cbk, void *arg);
-errno_t pfe_hif_nocpy_cfg_init(void *base_va);
-void pfe_hif_nocpy_cfg_fini(void *base_va);
-void pfe_hif_nocpy_cfg_tx_enable(void *base_va);
-void pfe_hif_nocpy_cfg_tx_disable(void *base_va);
-void pfe_hif_nocpy_cfg_rx_enable(void *base_va);
-void pfe_hif_nocpy_cfg_rx_disable(void *base_va);
-void pfe_hif_nocpy_cfg_rx_dma_start(void *base_va);
-void pfe_hif_nocpy_cfg_tx_dma_start(void *base_va);
-void pfe_hif_nocpy_cfg_rx_irq_mask(void *base_va);
-void pfe_hif_nocpy_cfg_rx_irq_unmask(void *base_va);
-void pfe_hif_nocpy_cfg_tx_irq_mask(void *base_va);
-void pfe_hif_nocpy_cfg_tx_irq_unmask(void *base_va);
-void pfe_hif_nocpy_cfg_set_rx_bd_ring_addr(void *base_va, void *rx_ring_pa);
-void pfe_hif_nocpy_cfg_set_tx_bd_ring_addr(void *base_va, void *tx_ring_pa);
-bool_t pfe_hif_nocpy_cfg_is_rx_dma_active(void *base_va);
-bool_t pfe_hif_nocpy_cfg_is_tx_dma_active(void *base_va);
-uint32_t pfe_hif_nocpy_chnl_cfg_get_text_stat(void *base_va, char_t *buf, uint32_t size, uint8_t verb_level);
-uint32_t pfe_hif_nocpy_cfg_get_text_stat(void *base_va, char_t *buf, uint32_t size, uint8_t verb_level);
+errno_t pfe_hif_nocpy_cfg_init(addr_t base_va);
+void pfe_hif_nocpy_cfg_fini(addr_t base_va);
+void pfe_hif_nocpy_cfg_tx_enable(addr_t base_va);
+void pfe_hif_nocpy_cfg_tx_disable(addr_t base_va);
+void pfe_hif_nocpy_cfg_rx_enable(addr_t base_va);
+void pfe_hif_nocpy_cfg_rx_disable(addr_t base_va);
+void pfe_hif_nocpy_cfg_rx_dma_start(addr_t base_va);
+void pfe_hif_nocpy_cfg_tx_dma_start(addr_t base_va);
+void pfe_hif_nocpy_cfg_rx_irq_mask(addr_t base_va);
+void pfe_hif_nocpy_cfg_rx_irq_unmask(addr_t base_va);
+void pfe_hif_nocpy_cfg_tx_irq_mask(addr_t base_va);
+void pfe_hif_nocpy_cfg_tx_irq_unmask(addr_t base_va);
+void pfe_hif_nocpy_cfg_set_rx_bd_ring_addr(addr_t base_va, const void *rx_ring_pa);
+void pfe_hif_nocpy_cfg_set_tx_bd_ring_addr(addr_t base_va, const  void *tx_ring_pa);
+bool_t pfe_hif_nocpy_cfg_is_rx_dma_active(addr_t base_va);
+bool_t pfe_hif_nocpy_cfg_is_tx_dma_active(addr_t base_va);
+uint32_t pfe_hif_nocpy_chnl_cfg_get_text_stat(addr_t base_va, const char_t *buf, uint32_t size, uint8_t verb_level);
+uint32_t pfe_hif_nocpy_cfg_get_text_stat(addr_t base_va, char_t *buf, uint32_t size, uint8_t verb_level);
 
 #endif /* PFE_HIF_NOCPY_CSR_H_ */
diff --git a/sw/pfe_platform/hw/s32g/pfe_l2br_table_csr.h b/sw/pfe_platform/hw/s32g/pfe_l2br_table_csr.h
index bcf1dc7..74ccb3d 100644
--- a/sw/pfe_platform/hw/s32g/pfe_l2br_table_csr.h
+++ b/sw/pfe_platform/hw/s32g/pfe_l2br_table_csr.h
@@ -1,7 +1,7 @@
 /* =========================================================================
  *  
  *  Copyright (c) 2019 Imagination Technologies Limited
- *  Copyright 2018-2020 NXP
+ *  Copyright 2018-2021 NXP
  *
  *  SPDX-License-Identifier: GPL-2.0
  *
diff --git a/sw/pfe_platform/hw/s32g/pfe_platform_master.c b/sw/pfe_platform/hw/s32g/pfe_platform_master.c
index 92ce6cd..c075e22 100644
--- a/sw/pfe_platform/hw/s32g/pfe_platform_master.c
+++ b/sw/pfe_platform/hw/s32g/pfe_platform_master.c
@@ -8,11 +8,12 @@
  * ========================================================================= */
 
 #include "pfe_cfg.h"
+#include "oal.h"
+
 #ifdef PFE_CFG_PFE_MASTER
 #include "elf_cfg.h"
 #include "elf.h"
 
-#include "oal.h"
 #include "hal.h"
 
 #include "pfe_cbus.h"
@@ -44,7 +45,7 @@ static pfe_platform_t pfe = {.probed = FALSE};
  */
 static bool_t pfe_platform_bmu_isr(void *arg)
 {
-	pfe_platform_t *platform = (pfe_platform_t *)arg;
+	const pfe_platform_t *platform = (pfe_platform_t *)arg;
 	bool_t handled = FALSE;
 
 	if (NULL != platform->bmu[0])
@@ -181,10 +182,10 @@ static void *pfe_poller_func(void *arg)
  */
 static bool_t pfe_platform_global_isr(void *arg)
 {
-	pfe_platform_t *platform = (pfe_platform_t *)arg;
+	const pfe_platform_t *platform = (pfe_platform_t *)arg;
 	bool_t handled = FALSE;
 	uint32_t ii;
-	static pfe_hif_chnl_id_t ids[] = {HIF_CHNL_0, HIF_CHNL_1, HIF_CHNL_2, HIF_CHNL_3};
+	static const pfe_hif_chnl_id_t ids[] = {HIF_CHNL_0, HIF_CHNL_1, HIF_CHNL_2, HIF_CHNL_3};
 	pfe_hif_chnl_t *chnls[sizeof(ids)/sizeof(pfe_hif_chnl_id_t)] = {NULL};
 
 	/*	Disable all participating IRQ sources */
@@ -436,7 +437,7 @@ void  pfe_platform_idex_rpc_cbk(pfe_ct_phy_if_id_t sender, uint32_t id, void *bu
 		}
 		case PFE_PLATFORM_RPC_PFE_LOG_IF_CREATE:
 		{
-			pfe_platform_rpc_pfe_log_if_create_arg_t *arg = (pfe_platform_rpc_pfe_log_if_create_arg_t *)buf;
+			pfe_platform_rpc_pfe_log_if_create_arg_t *arg_p = (pfe_platform_rpc_pfe_log_if_create_arg_t *)buf;
 			pfe_platform_rpc_pfe_log_if_create_ret_t rpc_ret = {0};
 			pfe_log_if_t *log_if = NULL;
 			static char_t namebuf[16];
@@ -448,7 +449,7 @@ void  pfe_platform_idex_rpc_cbk(pfe_ct_phy_if_id_t sender, uint32_t id, void *bu
 				/*	Generate some name to easily identify non-local interfaces. Foreign interfaces (the ones
 					created by slave driver instances contains sN. prefix where N identifies the slave
 					driver instance via host interface ID. */
-				(void)oal_util_snprintf(namebuf, sizeof(namebuf), "s%d.%s", sender, arg->name);
+				(void)oal_util_snprintf(namebuf, sizeof(namebuf), "s%d.%s", sender, arg_p->name);
 				log_if = pfe_log_if_create(phy_if_arg, namebuf);
 				if (NULL == log_if)
 				{
@@ -555,16 +556,16 @@ void  pfe_platform_idex_rpc_cbk(pfe_ct_phy_if_id_t sender, uint32_t id, void *bu
 
 		case PFE_PLATFORM_RPC_PFE_LOG_IF_SET_MATCH_RULES:
 		{
-			pfe_platform_rpc_pfe_log_if_set_match_rules_arg_t *arg = (pfe_platform_rpc_pfe_log_if_set_match_rules_arg_t *)buf;
+			pfe_platform_rpc_pfe_log_if_set_match_rules_arg_t *arg_p = (pfe_platform_rpc_pfe_log_if_set_match_rules_arg_t *)buf;
 
 			NXP_LOG_DEBUG("RPC: PFE_PLATFORM_RPC_PFE_LOG_IF_SET_MATCH_RULES\n");
 
 			if (EOK == ret)
 			{
-				ret = pfe_log_if_set_match_rules(log_if_arg, oal_ntohl(arg->rules), &arg->args);
+				ret = pfe_log_if_set_match_rules(log_if_arg, (pfe_ct_if_m_rules_t)oal_ntohl(arg_p->rules), &arg_p->args);
 				if (EOK == ret)
 				{
-					NXP_LOG_INFO("New match rules 0x%x set to %s\n", (uint32_t)oal_ntohl(arg->rules), pfe_log_if_get_name(log_if_arg));
+					NXP_LOG_INFO("New match rules 0x%x set to %s\n", (uint_t)oal_ntohl(arg_p->rules), pfe_log_if_get_name(log_if_arg));
 				}
 				else
 				{
@@ -591,7 +592,7 @@ void  pfe_platform_idex_rpc_cbk(pfe_ct_phy_if_id_t sender, uint32_t id, void *bu
 			if (EOK == ret)
 			{
 				ret = pfe_log_if_get_match_rules(log_if_arg, &rules, &rpc_ret.args);
-				rpc_ret.rules = oal_htonl(rules);
+				rpc_ret.rules = (pfe_ct_if_m_rules_t)oal_htonl(rules);
 			}
 
 			/*	Report execution status to caller */
@@ -605,20 +606,20 @@ void  pfe_platform_idex_rpc_cbk(pfe_ct_phy_if_id_t sender, uint32_t id, void *bu
 
 		case PFE_PLATFORM_RPC_PFE_LOG_IF_ADD_MATCH_RULE:
 		{
-			pfe_platform_rpc_pfe_log_if_add_match_rule_arg_t *arg = (pfe_platform_rpc_pfe_log_if_add_match_rule_arg_t *)buf;
+			pfe_platform_rpc_pfe_log_if_add_match_rule_arg_t *arg_p = (pfe_platform_rpc_pfe_log_if_add_match_rule_arg_t *)buf;
 
 			NXP_LOG_DEBUG("RPC: PFE_PLATFORM_RPC_PFE_LOG_IF_ADD_MATCH_RULE\n");
 
 			if (EOK == ret)
 			{
-				ret = pfe_log_if_add_match_rule(log_if_arg, oal_ntohl(arg->rule), arg->arg, oal_ntohl(arg->arg_len));
+				ret = pfe_log_if_add_match_rule(log_if_arg, (pfe_ct_if_m_rules_t)oal_ntohl(arg_p->rule), arg_p->arg, oal_ntohl(arg_p->arg_len));
 				if (EOK == ret)
 				{
-					NXP_LOG_INFO("New match rule 0x%x added to %s\n", oal_ntohl(arg->rule), pfe_log_if_get_name(log_if_arg));
+					NXP_LOG_INFO("New match rule 0x%x added to %s\n", (uint_t)oal_ntohl(arg_p->rule), pfe_log_if_get_name(log_if_arg));
 				}
 				else
 				{
-					NXP_LOG_ERROR("Can't add match rule 0x%x for %s\n", oal_ntohl(arg->rule), pfe_log_if_get_name(log_if_arg));
+					NXP_LOG_ERROR("Can't add match rule 0x%x for %s\n", (uint_t)oal_ntohl(arg_p->rule), pfe_log_if_get_name(log_if_arg));
 				}
 			}
 
@@ -633,20 +634,20 @@ void  pfe_platform_idex_rpc_cbk(pfe_ct_phy_if_id_t sender, uint32_t id, void *bu
 
 		case PFE_PLATFORM_RPC_PFE_LOG_IF_DEL_MATCH_RULE:
 		{
-			pfe_platform_rpc_pfe_log_if_del_match_rule_arg_t *arg = (pfe_platform_rpc_pfe_log_if_del_match_rule_arg_t *)buf;
+			pfe_platform_rpc_pfe_log_if_del_match_rule_arg_t *arg_p = (pfe_platform_rpc_pfe_log_if_del_match_rule_arg_t *)buf;
 
 			NXP_LOG_DEBUG("RPC: PFE_PLATFORM_RPC_PFE_LOG_IF_DEL_MATCH_RULE\n");
 
 			if (EOK == ret)
 			{
-				ret = pfe_log_if_del_match_rule(log_if_arg, oal_ntohl(arg->rule));
+				ret = pfe_log_if_del_match_rule(log_if_arg, (pfe_ct_if_m_rules_t)oal_ntohl(arg_p->rule));
 				if (EOK == ret)
 				{
-					NXP_LOG_INFO("Match rule 0x%x removed from %s\n", oal_ntohl(arg->rule), pfe_log_if_get_name(log_if_arg));
+					NXP_LOG_INFO("Match rule 0x%x removed from %s\n", (uint_t)oal_ntohl(arg_p->rule), pfe_log_if_get_name(log_if_arg));
 				}
 				else
 				{
-					NXP_LOG_ERROR("Can't delete match rule 0x%x for %s\n", oal_ntohl(arg->rule), pfe_log_if_get_name(log_if_arg));
+					NXP_LOG_ERROR("Can't delete match rule 0x%x for %s\n", (uint_t)oal_ntohl(arg_p->rule), pfe_log_if_get_name(log_if_arg));
 				}
 			}
 
@@ -661,13 +662,13 @@ void  pfe_platform_idex_rpc_cbk(pfe_ct_phy_if_id_t sender, uint32_t id, void *bu
 
 		case PFE_PLATFORM_RPC_PFE_LOG_IF_ADD_MAC_ADDR:
 		{
-			pfe_platform_rpc_pfe_log_if_add_mac_addr_arg_t *arg = (pfe_platform_rpc_pfe_log_if_add_mac_addr_arg_t *)buf;
+			pfe_platform_rpc_pfe_log_if_add_mac_addr_arg_t *arg_p = (pfe_platform_rpc_pfe_log_if_add_mac_addr_arg_t *)buf;
 
 			NXP_LOG_DEBUG("RPC: PFE_PLATFORM_RPC_PFE_LOG_IF_ADD_MAC_ADDR\n");
 
 			if (EOK == ret)
 			{
-				ret = pfe_log_if_add_mac_addr(log_if_arg, arg->addr, sender);
+				ret = pfe_log_if_add_mac_addr(log_if_arg, arg_p->addr, sender);
 			}
 
 			/*	Report execution status to caller */
@@ -679,13 +680,15 @@ void  pfe_platform_idex_rpc_cbk(pfe_ct_phy_if_id_t sender, uint32_t id, void *bu
 			break;
 		}
 
-		case PFE_PLATFORM_RPC_PFE_LOG_IF_CLEAR_MAC_ADDR:
+		case PFE_PLATFORM_RPC_PFE_LOG_IF_DEL_MAC_ADDR:
 		{
-			NXP_LOG_DEBUG("RPC: PFE_PLATFORM_RPC_PFE_LOG_IF_CLEAR_MAC_ADDR\n");
+			pfe_platform_rpc_pfe_log_if_del_mac_addr_arg_t *arg_p = (pfe_platform_rpc_pfe_log_if_del_mac_addr_arg_t *)buf;
+
+			NXP_LOG_DEBUG("RPC: PFE_PLATFORM_RPC_PFE_LOG_IF_DEL_MAC_ADDR\n");
 
 			if (EOK == ret)
 			{
-				ret = pfe_log_if_clear_mac_addr(log_if_arg);
+				ret = pfe_log_if_del_mac_addr(log_if_arg, arg_p->addr);
 			}
 
 			/*	Report execution status to caller */
@@ -699,13 +702,13 @@ void  pfe_platform_idex_rpc_cbk(pfe_ct_phy_if_id_t sender, uint32_t id, void *bu
 
 		case PFE_PLATFORM_RPC_PFE_LOG_IF_FLUSH_MAC_ADDRS:
 		{
-			pfe_platform_rpc_pfe_log_if_flush_mac_addrs_arg_t *arg = (pfe_platform_rpc_pfe_log_if_flush_mac_addrs_arg_t *)buf;
+			pfe_platform_rpc_pfe_log_if_flush_mac_addrs_arg_t *arg_p = (pfe_platform_rpc_pfe_log_if_flush_mac_addrs_arg_t *)buf;
 
 			NXP_LOG_DEBUG("RPC: PFE_PLATFORM_RPC_PFE_LOG_IF_FLUSH_MAC_ADDRS\n");
 
 			if (EOK == ret)
 			{
-				ret = pfe_log_if_flush_mac_addrs(log_if_arg, arg->mode, sender);
+				ret = pfe_log_if_flush_mac_addrs(log_if_arg, arg_p->crit, arg_p->type, sender);
 			}
 
 			/*	Report execution status to caller */
@@ -829,6 +832,42 @@ void  pfe_platform_idex_rpc_cbk(pfe_ct_phy_if_id_t sender, uint32_t id, void *bu
 			break;
 		}
 
+		case PFE_PLATFORM_RPC_PFE_LOG_IF_LOOPBACK_ENABLE:
+		{
+			NXP_LOG_DEBUG("RPC: PFE_PLATFORM_RPC_PFE_LOG_IF_LOOPBACK_ENABLE\n");
+
+			if (EOK == ret)
+			{
+				ret = pfe_log_if_loopback_enable(log_if_arg);
+			}
+
+			/*      Report execution status to caller */
+			if (EOK != pfe_idex_set_rpc_ret_val(ret, NULL, 0U))
+			{
+				NXP_LOG_ERROR("Could not send RPC response\n");
+			}
+
+			break;
+		}
+
+		case PFE_PLATFORM_RPC_PFE_LOG_IF_LOOPBACK_DISABLE:
+		{
+			NXP_LOG_DEBUG("RPC: PFE_PLATFORM_RPC_PFE_LOG_IF_LOOPBACK_DISABLE\n");
+
+			if (EOK == ret)
+			{
+				ret = pfe_log_if_loopback_disable(log_if_arg);
+			}
+
+			/*      Report execution status to caller */
+			if (EOK != pfe_idex_set_rpc_ret_val(ret, NULL, 0U))
+			{
+				NXP_LOG_ERROR("Could not send RPC response\n");
+			}
+
+			break;
+		}
+
 		case PFE_PLATFORM_RPC_PFE_LOG_IF_ALLMULTI_ENABLE:
 		{
 			NXP_LOG_DEBUG("RPC: PFE_PLATFORM_RPC_PFE_LOG_IF_ALLMULTI_ENABLE\n");
@@ -867,13 +906,13 @@ void  pfe_platform_idex_rpc_cbk(pfe_ct_phy_if_id_t sender, uint32_t id, void *bu
 
 		case PFE_PLATFORM_RPC_PFE_LOG_IF_ADD_EGRESS_IF:
 		{
-			pfe_platform_rpc_pfe_log_if_add_egress_if_arg_t *arg = (pfe_platform_rpc_pfe_log_if_add_egress_if_arg_t *)buf;
+			pfe_platform_rpc_pfe_log_if_add_egress_if_arg_t *arg_p = (pfe_platform_rpc_pfe_log_if_add_egress_if_arg_t *)buf;
 
 			NXP_LOG_DEBUG("RPC: PFE_PLATFORM_RPC_PFE_LOG_IF_ADD_EGRESS_IF\n");
 
 			if (EOK == ret)
 			{
-				ret = pfe_if_db_get_first(platform->phy_if_db, sender, IF_DB_CRIT_BY_ID, (void *)(addr_t)arg->phy_if_id, &entry);
+				ret = pfe_if_db_get_first(platform->phy_if_db, sender, IF_DB_CRIT_BY_ID, (void *)(addr_t)arg_p->phy_if_id, &entry);
 				phy_if_arg = pfe_if_db_entry_get_phy_if(entry);
 
 				if ((NULL == phy_if_arg) || (EOK != ret))
@@ -1081,6 +1120,42 @@ void  pfe_platform_idex_rpc_cbk(pfe_ct_phy_if_id_t sender, uint32_t id, void *bu
 			break;
 		}
 
+		case PFE_PLATFORM_RPC_PFE_PHY_IF_LOOPBACK_ENABLE:
+		{
+			NXP_LOG_DEBUG("RPC: PFE_PLATFORM_RPC_PFE_PHY_IF_LOOPBACK_ENABLE\n");
+
+			if (EOK == ret)
+			{
+				ret = pfe_phy_if_loopback_enable(phy_if_arg);
+			}
+
+			/*      Report execution status to caller */
+			if (EOK != pfe_idex_set_rpc_ret_val(ret, NULL, 0U))
+			{
+				NXP_LOG_ERROR("Could not send RPC response\n");
+			}
+
+			break;
+		}
+
+		case PFE_PLATFORM_RPC_PFE_PHY_IF_LOOPBACK_DISABLE:
+		{
+			NXP_LOG_DEBUG("RPC: PFE_PLATFORM_RPC_PFE_PHY_IF_LOOPBACK_DISABLE\n");
+
+			if (EOK == ret)
+			{
+				ret = pfe_phy_if_loopback_disable(phy_if_arg);
+			}
+
+			/*      Report execution status to caller */
+			if (EOK != pfe_idex_set_rpc_ret_val(ret, NULL, 0U))
+			{
+				NXP_LOG_ERROR("Could not send RPC response\n");
+			}
+
+			break;
+		}
+
 		case PFE_PLATFORM_RPC_PFE_PHY_IF_ALLMULTI_ENABLE:
 		{
 			NXP_LOG_DEBUG("RPC: PFE_PLATFORM_RPC_PFE_PHY_IF_ALLMULTI_ENABLE\n");
@@ -1171,7 +1246,7 @@ void  pfe_platform_idex_rpc_cbk(pfe_ct_phy_if_id_t sender, uint32_t id, void *bu
 
 			if (EOK == ret)
 			{
-				ret = pfe_phy_if_flush_mac_addrs(phy_if_arg, rpc_arg->mode, sender);
+				ret = pfe_phy_if_flush_mac_addrs(phy_if_arg, rpc_arg->crit, rpc_arg->type, sender);
 			}
 
 			/*	Report execution status to caller */
@@ -1241,7 +1316,7 @@ void  pfe_platform_idex_rpc_cbk(pfe_ct_phy_if_id_t sender, uint32_t id, void *bu
 
 		case PFE_PLATFORM_RPC_PFE_PHY_IF_GET_OP_MODE:
 		{
-			pfe_platform_rpc_pfe_phy_if_get_op_mode_ret_t rpc_ret = {0};
+			pfe_platform_rpc_pfe_phy_if_get_op_mode_ret_t rpc_ret = {IF_OP_DISABLED};
 			pfe_ct_if_op_mode_t mode = IF_OP_DISABLED;
 
 			NXP_LOG_DEBUG("RPC: PFE_PLATFORM_RPC_PFE_PHY_IF_GET_OP_MODE\n");
@@ -1330,7 +1405,7 @@ void  pfe_platform_idex_rpc_cbk(pfe_ct_phy_if_id_t sender, uint32_t id, void *bu
 
 		default:
 		{
-			NXP_LOG_WARNING("Unsupported RPC code: %d\n", id);
+			NXP_LOG_WARNING("Unsupported RPC code: %u\n", (uint_t)id);
 
 			/*	Report execution status to caller */
 			if (EOK != pfe_idex_set_rpc_ret_val(EINVAL, NULL, 0U))
@@ -1349,10 +1424,10 @@ void  pfe_platform_idex_rpc_cbk(pfe_ct_phy_if_id_t sender, uint32_t id, void *bu
 /**
  * @brief		Assign HIF to the platform
  */
-static errno_t pfe_platform_create_hif(pfe_platform_t *platform, pfe_platform_config_t *config)
+static errno_t pfe_platform_create_hif(pfe_platform_t *platform, const pfe_platform_config_t *config)
 {
 	uint32_t ii;
-	static pfe_hif_chnl_id_t ids[HIF_CFG_MAX_CHANNELS] = {HIF_CHNL_0, HIF_CHNL_1, HIF_CHNL_2, HIF_CHNL_3};
+	static const pfe_hif_chnl_id_t ids[HIF_CFG_MAX_CHANNELS] = {HIF_CHNL_0, HIF_CHNL_1, HIF_CHNL_2, HIF_CHNL_3};
 	pfe_hif_chnl_t *chnl;
 
 	platform->hif = pfe_hif_create(platform->cbus_baseaddr + CBUS_HIF_BASE_ADDR, config->hif_chnls_mask);
@@ -1482,7 +1557,7 @@ static void pfe_platform_destroy_hif_nocpy(pfe_platform_t *platform)
 /**
  * @brief		Assign BMU to the platform
  */
-static errno_t pfe_platform_create_bmu(pfe_platform_t *platform, pfe_platform_config_t *config)
+static errno_t pfe_platform_create_bmu(pfe_platform_t *platform, const pfe_platform_config_t *config)
 {
 	pfe_bmu_cfg_t bmu_cfg = {0U};
 
@@ -1494,8 +1569,8 @@ static errno_t pfe_platform_create_bmu(pfe_platform_t *platform, pfe_platform_co
 	}
 
 	/*	Must be aligned to BUF_COUNT * BUF_SIZE */
-	bmu_cfg.pool_pa = (void *)(PFE_CFG_CBUS_PHYS_BASE_ADDR + CBUS_LMEM_BASE_ADDR + PFE_CFG_BMU1_LMEM_BASEADDR);
-	NXP_LOG_INFO("BMU1 buffer base: p0x%p\n", bmu_cfg.pool_pa);
+	bmu_cfg.pool_pa = (PFE_CFG_CBUS_PHYS_BASE_ADDR + CBUS_LMEM_BASE_ADDR + PFE_CFG_BMU1_LMEM_BASEADDR);
+	NXP_LOG_INFO("BMU1 buffer base: p0x%"PRINTADDR_T"\n", bmu_cfg.pool_pa);
 	bmu_cfg.max_buf_cnt = PFE_CFG_BMU1_BUF_COUNT;
 	bmu_cfg.buf_size = PFE_CFG_BMU1_BUF_SIZE;
 	bmu_cfg.bmu_ucast_thres = 0x200U;
@@ -1503,7 +1578,7 @@ static errno_t pfe_platform_create_bmu(pfe_platform_t *platform, pfe_platform_co
 	bmu_cfg.int_mem_loc_cnt = 64U;
 	bmu_cfg.buf_mem_loc_cnt = 64U;
 
-	platform->bmu[0] = pfe_bmu_create(platform->cbus_baseaddr, (void *)CBUS_BMU1_BASE_ADDR, &bmu_cfg);
+	platform->bmu[0] = pfe_bmu_create(platform->cbus_baseaddr, CBUS_BMU1_BASE_ADDR, &bmu_cfg);
 	if (NULL == platform->bmu[0])
 	{
 		NXP_LOG_ERROR("Couldn't create BMU1 instance\n");
@@ -1526,17 +1601,17 @@ static errno_t pfe_platform_create_bmu(pfe_platform_t *platform, pfe_platform_co
 		return ENOMEM;
 	}
 
-	bmu_cfg.pool_va = platform->bmu_buffers_va;
-	bmu_cfg.pool_pa = oal_mm_virt_to_phys_contig(platform->bmu_buffers_va);
+	bmu_cfg.pool_va = (addr_t)platform->bmu_buffers_va;
+	bmu_cfg.pool_pa = (addr_t)oal_mm_virt_to_phys_contig((void*)platform->bmu_buffers_va);
 
 	/*	S32G: Some of PFE AXI MASTERs can only access range p0x00020000 - p0xbfffffff */
 	if (((addr_t)bmu_cfg.pool_pa < 0x00020000U) || (((addr_t)bmu_cfg.pool_pa + platform->bmu_buffers_size) > 0xbfffffffU))
 	{
-		NXP_LOG_WARNING("BMU2 buffers not in required range: starts @ p0x%p\n", bmu_cfg.pool_pa);
+		NXP_LOG_WARNING("BMU2 buffers not in required range: starts @ p0x%"PRINTADDR_T"\n", bmu_cfg.pool_pa);
 	}
 	else
 	{
-		NXP_LOG_INFO("BMU2 buffer base: p0x%p (%"PRINTADDR_T" bytes)\n", bmu_cfg.pool_pa, platform->bmu_buffers_size);
+		NXP_LOG_INFO("BMU2 buffer base: p0x%"PRINTADDR_T" (0x%"PRINTADDR_T" bytes)\n", bmu_cfg.pool_pa, platform->bmu_buffers_size);
 	}
 
 	bmu_cfg.max_buf_cnt = PFE_CFG_BMU2_BUF_COUNT;
@@ -1546,7 +1621,7 @@ static errno_t pfe_platform_create_bmu(pfe_platform_t *platform, pfe_platform_co
 	bmu_cfg.int_mem_loc_cnt = 1024U;
 	bmu_cfg.buf_mem_loc_cnt = 1024U;
 
-	platform->bmu[1] = pfe_bmu_create(platform->cbus_baseaddr, (void *)CBUS_BMU2_BASE_ADDR, &bmu_cfg);
+	platform->bmu[1] = pfe_bmu_create(platform->cbus_baseaddr, CBUS_BMU2_BASE_ADDR, &bmu_cfg);
 
 	if (NULL == platform->bmu[1])
 	{
@@ -1562,7 +1637,7 @@ static errno_t pfe_platform_create_bmu(pfe_platform_t *platform, pfe_platform_co
 		platform->irq_bmu = oal_irq_create((int32_t)config->irq_vector_bmu, (oal_irq_flags_t)0, "PFE BMU IRQ");
 		if (NULL == platform->irq_bmu)
 		{
-			NXP_LOG_ERROR("Could not create BMU IRQ vector %d\n", config->irq_vector_bmu);
+			NXP_LOG_ERROR("Could not create BMU IRQ vector %u\n", (uint_t)config->irq_vector_bmu);
 			return ENODEV;
 		}
 		else
@@ -1617,7 +1692,7 @@ static void pfe_platform_destroy_bmu(pfe_platform_t *platform)
 
 	if (NULL != platform->bmu_buffers_va)
 	{
-		oal_mm_free_contig(platform->bmu_buffers_va);
+		oal_mm_free_contig((void *)platform->bmu_buffers_va);
 		platform->bmu_buffers_va = NULL;
 	}
 }
@@ -1627,7 +1702,7 @@ static void pfe_platform_destroy_bmu(pfe_platform_t *platform)
  */
 static errno_t pfe_platform_create_gpi(pfe_platform_t *platform)
 {
-	pfe_gpi_cfg_t gpi_cfg;
+	pfe_gpi_cfg_t gpi_cfg_tmp;
 
 	platform->gpi = oal_mm_malloc(platform->gpi_count * sizeof(pfe_gpi_t *));
 	if (NULL == platform->gpi)
@@ -1637,12 +1712,12 @@ static errno_t pfe_platform_create_gpi(pfe_platform_t *platform)
 	}
 
 	/*	GPI1 */
-	gpi_cfg.alloc_retry_cycles = 0x200U;
-	gpi_cfg.gpi_tmlf_txthres = 0x178U;
-	gpi_cfg.gpi_dtx_aseq_len = 0x40; /* See AAVB-2028 */
-	gpi_cfg.emac_1588_ts_en = TRUE;
+	gpi_cfg_tmp.alloc_retry_cycles = 0x200U;
+	gpi_cfg_tmp.gpi_tmlf_txthres = 0x178U;
+	gpi_cfg_tmp.gpi_dtx_aseq_len = 0x40; /* See AAVB-2028 */
+	gpi_cfg_tmp.emac_1588_ts_en = TRUE;
 
-	platform->gpi[0] = pfe_gpi_create(platform->cbus_baseaddr, (void *)CBUS_EGPI1_BASE_ADDR, &gpi_cfg);
+	platform->gpi[0] = pfe_gpi_create(platform->cbus_baseaddr, CBUS_EGPI1_BASE_ADDR, &gpi_cfg_tmp);
 	if (NULL == platform->gpi[0])
 	{
 		NXP_LOG_ERROR("Couldn't create GPI1 instance\n");
@@ -1650,12 +1725,12 @@ static errno_t pfe_platform_create_gpi(pfe_platform_t *platform)
 	}
 
 	/*	GPI2 */
-	gpi_cfg.alloc_retry_cycles = 0x200U;
-	gpi_cfg.gpi_tmlf_txthres = 0x178U;
-	gpi_cfg.gpi_dtx_aseq_len = 0x40; /* See AAVB-2028 */
-	gpi_cfg.emac_1588_ts_en = TRUE;
+	gpi_cfg_tmp.alloc_retry_cycles = 0x200U;
+	gpi_cfg_tmp.gpi_tmlf_txthres = 0x178U;
+	gpi_cfg_tmp.gpi_dtx_aseq_len = 0x40; /* See AAVB-2028 */
+	gpi_cfg_tmp.emac_1588_ts_en = TRUE;
 
-	platform->gpi[1] = pfe_gpi_create(platform->cbus_baseaddr, (void *)CBUS_EGPI2_BASE_ADDR, &gpi_cfg);
+	platform->gpi[1] = pfe_gpi_create(platform->cbus_baseaddr, CBUS_EGPI2_BASE_ADDR, &gpi_cfg_tmp);
 	if (NULL == platform->gpi[1])
 	{
 		NXP_LOG_ERROR("Couldn't create GPI2 instance\n");
@@ -1663,12 +1738,12 @@ static errno_t pfe_platform_create_gpi(pfe_platform_t *platform)
 	}
 
 	/*	GPI3 */
-	gpi_cfg.alloc_retry_cycles = 0x200U;
-	gpi_cfg.gpi_tmlf_txthres = 0x178U;
-	gpi_cfg.gpi_dtx_aseq_len = 0x40; /* See AAVB-2028 */
-	gpi_cfg.emac_1588_ts_en = TRUE;
+	gpi_cfg_tmp.alloc_retry_cycles = 0x200U;
+	gpi_cfg_tmp.gpi_tmlf_txthres = 0x178U;
+	gpi_cfg_tmp.gpi_dtx_aseq_len = 0x40; /* See AAVB-2028 */
+	gpi_cfg_tmp.emac_1588_ts_en = TRUE;
 
-	platform->gpi[2] = pfe_gpi_create(platform->cbus_baseaddr, (void *)CBUS_EGPI3_BASE_ADDR, &gpi_cfg);
+	platform->gpi[2] = pfe_gpi_create(platform->cbus_baseaddr, CBUS_EGPI3_BASE_ADDR, &gpi_cfg_tmp);
 	if (NULL == platform->gpi[2])
 	{
 		NXP_LOG_ERROR("Couldn't create GPI3 instance\n");
@@ -1706,7 +1781,7 @@ static void pfe_platform_destroy_gpi(pfe_platform_t *platform)
  */
 static errno_t pfe_platform_create_etgpi(pfe_platform_t *platform)
 {
-	pfe_gpi_cfg_t gpi_cfg;
+	pfe_gpi_cfg_t gpi_cfg_tmp;
 
 	platform->etgpi = oal_mm_malloc(platform->etgpi_count * sizeof(pfe_gpi_t *));
 	if (NULL == platform->etgpi)
@@ -1716,12 +1791,12 @@ static errno_t pfe_platform_create_etgpi(pfe_platform_t *platform)
 	}
 
 	/*	ETGPI1 */
-	gpi_cfg.alloc_retry_cycles = 0x200U;
-	gpi_cfg.gpi_tmlf_txthres = 0xbcU;
-	gpi_cfg.gpi_dtx_aseq_len = 0x40; /* See AAVB-2028 */
-	gpi_cfg.emac_1588_ts_en = TRUE;
+	gpi_cfg_tmp.alloc_retry_cycles = 0x200U;
+	gpi_cfg_tmp.gpi_tmlf_txthres = 0xbcU;
+	gpi_cfg_tmp.gpi_dtx_aseq_len = 0x40; /* See AAVB-2028 */
+	gpi_cfg_tmp.emac_1588_ts_en = TRUE;
 
-	platform->etgpi[0] = pfe_gpi_create(platform->cbus_baseaddr, (void *)CBUS_ETGPI1_BASE_ADDR, &gpi_cfg);
+	platform->etgpi[0] = pfe_gpi_create(platform->cbus_baseaddr, CBUS_ETGPI1_BASE_ADDR, &gpi_cfg_tmp);
 	if (NULL == platform->etgpi[0])
 	{
 		NXP_LOG_ERROR("Couldn't create ETGPI1 instance\n");
@@ -1729,12 +1804,12 @@ static errno_t pfe_platform_create_etgpi(pfe_platform_t *platform)
 	}
 
 	/*	ETGPI2 */
-	gpi_cfg.alloc_retry_cycles = 0x200U;
-	gpi_cfg.gpi_tmlf_txthres = 0xbcU;
-	gpi_cfg.gpi_dtx_aseq_len = 0x40; /* See AAVB-2028 */
-	gpi_cfg.emac_1588_ts_en = TRUE;
+	gpi_cfg_tmp.alloc_retry_cycles = 0x200U;
+	gpi_cfg_tmp.gpi_tmlf_txthres = 0xbcU;
+	gpi_cfg_tmp.gpi_dtx_aseq_len = 0x40; /* See AAVB-2028 */
+	gpi_cfg_tmp.emac_1588_ts_en = TRUE;
 
-	platform->etgpi[1] = pfe_gpi_create(platform->cbus_baseaddr, (void *)CBUS_ETGPI2_BASE_ADDR, &gpi_cfg);
+	platform->etgpi[1] = pfe_gpi_create(platform->cbus_baseaddr, CBUS_ETGPI2_BASE_ADDR, &gpi_cfg_tmp);
 	if (NULL == platform->etgpi[1])
 	{
 		NXP_LOG_ERROR("Couldn't create ETGPI2 instance\n");
@@ -1742,12 +1817,12 @@ static errno_t pfe_platform_create_etgpi(pfe_platform_t *platform)
 	}
 
 	/*	ETGPI3 */
-	gpi_cfg.alloc_retry_cycles = 0x200U;
-	gpi_cfg.gpi_tmlf_txthres = 0xbcU;
-	gpi_cfg.gpi_dtx_aseq_len = 0x40; /* See AAVB-2028 */
-	gpi_cfg.emac_1588_ts_en = TRUE;
+	gpi_cfg_tmp.alloc_retry_cycles = 0x200U;
+	gpi_cfg_tmp.gpi_tmlf_txthres = 0xbcU;
+	gpi_cfg_tmp.gpi_dtx_aseq_len = 0x40; /* See AAVB-2028 */
+	gpi_cfg_tmp.emac_1588_ts_en = TRUE;
 
-	platform->etgpi[2] = pfe_gpi_create(platform->cbus_baseaddr, (void *)CBUS_ETGPI3_BASE_ADDR, &gpi_cfg);
+	platform->etgpi[2] = pfe_gpi_create(platform->cbus_baseaddr, CBUS_ETGPI3_BASE_ADDR, &gpi_cfg_tmp);
 	if (NULL == platform->etgpi[2])
 	{
 		NXP_LOG_ERROR("Couldn't create ETGPI3 instance\n");
@@ -1799,7 +1874,7 @@ static errno_t pfe_platform_create_hgpi(pfe_platform_t *platform)
 	hgpi_cfg.gpi_dtx_aseq_len = HGPI_ASEQ_LEN;
 	hgpi_cfg.emac_1588_ts_en = FALSE;
 
-	platform->hgpi[0] = pfe_gpi_create(platform->cbus_baseaddr, (void *)CBUS_HGPI_BASE_ADDR, &hgpi_cfg);
+	platform->hgpi[0] = pfe_gpi_create(platform->cbus_baseaddr, CBUS_HGPI_BASE_ADDR, &hgpi_cfg);
 	if (NULL == platform->hgpi[0])
 	{
 		NXP_LOG_ERROR("Couldn't create HGPI instance\n");
@@ -1847,7 +1922,7 @@ static errno_t pfe_platform_create_class(pfe_platform_t *platform)
 	};
 
 	ELF_File_t elf;
-	uint8_t *temp;
+	const uint8_t *temp;
 
 	if (NULL == platform->fw)
 	{
@@ -1977,16 +2052,25 @@ static void pfe_platform_destroy_l2_bridge(pfe_platform_t *platform)
 #endif /* PFE_CFG_L2BRIDGE_ENABLE */
 
 #if defined(PFE_CFG_RTABLE_ENABLE)
+
 /**
  * @brief		Assign Routing Table to the platform
  */
-static errno_t pfe_platform_create_rtable(pfe_platform_t *platform)
+static errno_t pfe_platform_create_rtable(pfe_platform_t *platform, const pfe_platform_config_t *config)
 {
-	void *htable_mem;
-	void *pool_mem;
-	uint32_t pool_offs = 256U * pfe_rtable_get_entry_size();
+	addr_t htable_mem;
+	addr_t pool_mem;
+	uint32_t pool_offs;
+
+	if (config->rtable_hash_size > PFE_CFG_RT_HASH_ENTRIES_MAX_CNT)
+	{
+		NXP_LOG_ERROR("Required HASH size exceeds allowed range.\n");
+		return EINVAL;
+	}
 
-	platform->rtable_size = 2U * 256U * pfe_rtable_get_entry_size();
+	pool_offs = config->rtable_hash_size * pfe_rtable_get_entry_size();
+
+	platform->rtable_size = (config->rtable_hash_size + config->rtable_collision_size) * pfe_rtable_get_entry_size();
 	platform->rtable_va = oal_mm_malloc_contig_named_aligned_nocache(PFE_CFG_RT_MEM, platform->rtable_size, 2048U);
 	if (NULL == platform->rtable_va)
 	{
@@ -1994,8 +2078,8 @@ static errno_t pfe_platform_create_rtable(pfe_platform_t *platform)
 		return ENOMEM;
 	}
 
-	htable_mem = platform->rtable_va;
-	pool_mem = (void *)((addr_t)platform->rtable_va + pool_offs);
+	htable_mem = (addr_t)platform->rtable_va;
+	pool_mem = (addr_t)platform->rtable_va + pool_offs;
 
 	if (NULL == platform->classifier)
 	{
@@ -2003,7 +2087,7 @@ static errno_t pfe_platform_create_rtable(pfe_platform_t *platform)
 		return ENODEV;
 	}
 
-	platform->rtable = pfe_rtable_create(platform->classifier, htable_mem, 256U, pool_mem, 256U);
+	platform->rtable = pfe_rtable_create(platform->classifier, htable_mem, config->rtable_hash_size, pool_mem, config->rtable_collision_size);
 
 	if (NULL == platform->rtable)
 	{
@@ -2012,7 +2096,7 @@ static errno_t pfe_platform_create_rtable(pfe_platform_t *platform)
 	}
 	else
 	{
-		NXP_LOG_INFO("Routing table created, Hash Table @ p%p, Pool @ p%p (%d bytes)\n", oal_mm_virt_to_phys_contig(htable_mem), oal_mm_virt_to_phys_contig(htable_mem) + pool_offs, (uint32_t)platform->rtable_size);
+		NXP_LOG_INFO("Routing table created, Hash Table @ p%p, Pool @ p%p (%d bytes)\n", oal_mm_virt_to_phys_contig((void *)htable_mem), oal_mm_virt_to_phys_contig((void *)htable_mem) + pool_offs, (uint32_t)platform->rtable_size);
 	}
 
 	return EOK;
@@ -2149,9 +2233,9 @@ static errno_t pfe_platform_create_emac(pfe_platform_t *platform)
 	/*	EMAC1 */
 #if ((PFE_CFG_IP_VERSION == PFE_CFG_IP_VERSION_NPU_7_14) \
 	|| (PFE_CFG_IP_VERSION == PFE_CFG_IP_VERSION_NPU_7_14a))
-	platform->emac[0] = pfe_emac_create(platform->cbus_baseaddr, (void *)CBUS_EMAC1_BASE_ADDR, EMAC_MODE_SGMII, EMAC_SPEED_1000_MBPS, EMAC_DUPLEX_FULL);
+	platform->emac[0] = pfe_emac_create(platform->cbus_baseaddr, CBUS_EMAC1_BASE_ADDR, EMAC_MODE_SGMII, EMAC_SPEED_1000_MBPS, EMAC_DUPLEX_FULL);
 #else /* FPGA */
-	platform->emac[0] = pfe_emac_create(platform->cbus_baseaddr, (void *)CBUS_EMAC1_BASE_ADDR, EMAC_MODE_SGMII, EMAC_SPEED_100_MBPS, EMAC_DUPLEX_FULL);
+	platform->emac[0] = pfe_emac_create(platform->cbus_baseaddr, CBUS_EMAC1_BASE_ADDR, EMAC_MODE_SGMII, EMAC_SPEED_100_MBPS, EMAC_DUPLEX_FULL);
 #endif
 	if (NULL == platform->emac[0])
 	{
@@ -2161,7 +2245,7 @@ static errno_t pfe_platform_create_emac(pfe_platform_t *platform)
 	else
 	{
 		(void)pfe_emac_set_max_frame_length(platform->emac[0], 1522);
-		pfe_emac_enable_flow_control(platform->emac[0]);
+		pfe_emac_enable_rx_flow_control(platform->emac[0]);
 		pfe_emac_enable_broadcast(platform->emac[0]);
 
 #ifdef PFE_CFG_IEEE1588_SUPPORT
@@ -2178,9 +2262,9 @@ static errno_t pfe_platform_create_emac(pfe_platform_t *platform)
 	/*	EMAC2 */
 #if ((PFE_CFG_IP_VERSION == PFE_CFG_IP_VERSION_NPU_7_14) \
 	|| (PFE_CFG_IP_VERSION == PFE_CFG_IP_VERSION_NPU_7_14a))
-	platform->emac[1] = pfe_emac_create(platform->cbus_baseaddr, (void *)CBUS_EMAC2_BASE_ADDR, EMAC_MODE_RGMII, EMAC_SPEED_1000_MBPS, EMAC_DUPLEX_FULL);
+	platform->emac[1] = pfe_emac_create(platform->cbus_baseaddr, CBUS_EMAC2_BASE_ADDR, EMAC_MODE_RGMII, EMAC_SPEED_1000_MBPS, EMAC_DUPLEX_FULL);
 #else /* FPGA */
-	platform->emac[1] = pfe_emac_create(platform->cbus_baseaddr, (void *)CBUS_EMAC2_BASE_ADDR, EMAC_MODE_SGMII, EMAC_SPEED_100_MBPS, EMAC_DUPLEX_FULL);
+	platform->emac[1] = pfe_emac_create(platform->cbus_baseaddr, CBUS_EMAC2_BASE_ADDR, EMAC_MODE_SGMII, EMAC_SPEED_100_MBPS, EMAC_DUPLEX_FULL);
 #endif
 	if (NULL == platform->emac[1])
 	{
@@ -2190,7 +2274,7 @@ static errno_t pfe_platform_create_emac(pfe_platform_t *platform)
 	else
 	{
 		(void)pfe_emac_set_max_frame_length(platform->emac[1], 1522);
-		pfe_emac_enable_flow_control(platform->emac[1]);
+		pfe_emac_enable_rx_flow_control(platform->emac[1]);
 		pfe_emac_enable_broadcast(platform->emac[1]);
 
 #ifdef PFE_CFG_IEEE1588_SUPPORT
@@ -2207,9 +2291,9 @@ static errno_t pfe_platform_create_emac(pfe_platform_t *platform)
 	/*	EMAC3 */
 #if ((PFE_CFG_IP_VERSION == PFE_CFG_IP_VERSION_NPU_7_14) \
 	|| (PFE_CFG_IP_VERSION == PFE_CFG_IP_VERSION_NPU_7_14a))
-	platform->emac[2] = pfe_emac_create(platform->cbus_baseaddr, (void *)CBUS_EMAC3_BASE_ADDR, EMAC_MODE_RGMII, EMAC_SPEED_1000_MBPS, EMAC_DUPLEX_FULL);
+	platform->emac[2] = pfe_emac_create(platform->cbus_baseaddr, CBUS_EMAC3_BASE_ADDR, EMAC_MODE_RGMII, EMAC_SPEED_1000_MBPS, EMAC_DUPLEX_FULL);
 #else /* FPGA */
-	platform->emac[2] = pfe_emac_create(platform->cbus_baseaddr, (void *)CBUS_EMAC3_BASE_ADDR, EMAC_MODE_SGMII, EMAC_SPEED_100_MBPS, EMAC_DUPLEX_FULL);
+	platform->emac[2] = pfe_emac_create(platform->cbus_baseaddr, CBUS_EMAC3_BASE_ADDR, EMAC_MODE_SGMII, EMAC_SPEED_100_MBPS, EMAC_DUPLEX_FULL);
 #endif
 	if (NULL == platform->emac[2])
 	{
@@ -2219,7 +2303,7 @@ static errno_t pfe_platform_create_emac(pfe_platform_t *platform)
 	else
 	{
 		(void)pfe_emac_set_max_frame_length(platform->emac[2], 1522);
-		pfe_emac_enable_flow_control(platform->emac[2]);
+		pfe_emac_enable_rx_flow_control(platform->emac[2]);
 		pfe_emac_enable_broadcast(platform->emac[2]);
 
 #ifdef PFE_CFG_IEEE1588_SUPPORT
@@ -2262,11 +2346,11 @@ static void pfe_platform_destroy_emac(pfe_platform_t *platform)
 /**
  * @brief		Assign SAFETY and Watchdogs to the platform
  */
-static errno_t pfe_platform_create_safety(pfe_platform_t *platform, pfe_platform_config_t *config)
+static errno_t pfe_platform_create_safety(pfe_platform_t *platform, const pfe_platform_config_t *config)
 {
 	(void)config;
 	/*	Safety */
-	platform->safety = pfe_safety_create(platform->cbus_baseaddr, (void *)CBUS_GLOBAL_CSR_BASE_ADDR);
+	platform->safety = pfe_safety_create(platform->cbus_baseaddr, CBUS_GLOBAL_CSR_BASE_ADDR);
 
 	if (NULL == platform->safety)
 	{
@@ -2280,7 +2364,7 @@ static errno_t pfe_platform_create_safety(pfe_platform_t *platform, pfe_platform
 
 #if (PFE_CFG_IP_VERSION != PFE_CFG_IP_VERSION_FPGA_5_0_4)
 	/*	Watchdogs */
-	platform->wdt = pfe_wdt_create(platform->cbus_baseaddr, (void *)CBUS_GLOBAL_CSR_BASE_ADDR);
+	platform->wdt = pfe_wdt_create(platform->cbus_baseaddr, CBUS_GLOBAL_CSR_BASE_ADDR);
 
 	if (NULL == platform->wdt)
 	{
@@ -2361,7 +2445,7 @@ static void pfe_platform_destroy_fci(pfe_platform_t *platform)
  * @brief		Register logical interface
  * @details		Add logical interface to internal database
  */
-errno_t pfe_platform_register_log_if(pfe_platform_t *platform, pfe_log_if_t *log_if)
+errno_t pfe_platform_register_log_if(const pfe_platform_t *platform, pfe_log_if_t *log_if)
 {
 	uint32_t session_id;
 	errno_t ret;
@@ -2402,7 +2486,7 @@ errno_t pfe_platform_register_log_if(pfe_platform_t *platform, pfe_log_if_t *log
  * @details		Logical interface will be removed from internal database
  * @warning		Should be called only with locked DB
  */
-errno_t pfe_platform_unregister_log_if(pfe_platform_t *platform, pfe_log_if_t *log_if)
+errno_t pfe_platform_unregister_log_if(const pfe_platform_t *platform, pfe_log_if_t *log_if)
 {
 	errno_t ret = EOK;
 	pfe_if_db_entry_t *entry = NULL;
@@ -2452,7 +2536,7 @@ errno_t pfe_platform_unregister_log_if(pfe_platform_t *platform, pfe_log_if_t *l
  *				instances and add the physical interface instance with various validity
  *				checks.
  */
-static errno_t pfe_platform_register_phy_if(pfe_platform_t *platform, uint32_t session_id, pfe_phy_if_t *phy_if)
+static errno_t pfe_platform_register_phy_if(const pfe_platform_t *platform, uint32_t session_id, pfe_phy_if_t *phy_if)
 {
 	errno_t ret;
 
@@ -2476,10 +2560,10 @@ static errno_t pfe_platform_register_phy_if(pfe_platform_t *platform, uint32_t s
  * @param[in]	id Logical interface ID. See pfe_log_if_t.
  * @return		Logical interface instance or NULL if failed.
  */
-pfe_log_if_t *pfe_platform_get_log_if_by_id(pfe_platform_t *platform, uint8_t id)
+pfe_log_if_t *pfe_platform_get_log_if_by_id(const pfe_platform_t *platform, uint8_t id)
 {
 	pfe_if_db_entry_t *entry = NULL;
-	uint32_t session_id;
+	uint32_t session_id = 0U;
 
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == platform))
@@ -2516,10 +2600,10 @@ pfe_log_if_t *pfe_platform_get_log_if_by_id(pfe_platform_t *platform, uint8_t id
  * @param[in]	name Logical interface name
  * @return		Logical interface instance or NULL if failed.
  */
-pfe_log_if_t *pfe_platform_get_log_if_by_name(pfe_platform_t *platform, char_t *name)
+pfe_log_if_t *pfe_platform_get_log_if_by_name(const pfe_platform_t *platform, char_t *name)
 {
 	pfe_if_db_entry_t *entry = NULL;
-	uint32_t session_id;
+	uint32_t session_id = 0U;
 
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == platform))
@@ -2556,10 +2640,10 @@ pfe_log_if_t *pfe_platform_get_log_if_by_name(pfe_platform_t *platform, char_t *
  * @param[in]	id Physical interface ID
  * @return		Logical interface instance or NULL if failed.
  */
-pfe_phy_if_t *pfe_platform_get_phy_if_by_id(pfe_platform_t *platform, pfe_ct_phy_if_id_t id)
+pfe_phy_if_t *pfe_platform_get_phy_if_by_id(const pfe_platform_t *platform, pfe_ct_phy_if_id_t id)
 {
 	pfe_if_db_entry_t *entry = NULL;
-	uint32_t session_id;
+	uint32_t session_id = 0U;
 
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == platform))
@@ -2597,7 +2681,7 @@ errno_t pfe_platform_create_ifaces(pfe_platform_t *platform)
 {
 	int32_t ii;
 	pfe_phy_if_t *phy_if = NULL;
-	uint32_t session_id;
+	uint32_t session_id = 0U;
 	pfe_if_db_entry_t *entry = NULL;
 
 	struct
@@ -2609,19 +2693,19 @@ errno_t pfe_platform_create_ifaces(pfe_platform_t *platform)
 		{
 			pfe_emac_t *emac;
 			pfe_hif_chnl_t *chnl;
-		};
+		} phy;
 	} phy_ifs[] =
 	{
-			{.name = "emac0", .id = PFE_PHY_IF_ID_EMAC0, .mac = GEMAC0_MAC, .emac = platform->emac[0]},
-			{.name = "emac1", .id = PFE_PHY_IF_ID_EMAC1, .mac = GEMAC1_MAC, .emac = platform->emac[1]},
-			{.name = "emac2", .id = PFE_PHY_IF_ID_EMAC2, .mac = GEMAC2_MAC, .emac = platform->emac[2]},
-			{.name = "util", .id = PFE_PHY_IF_ID_UTIL, .mac = {0}, .chnl = NULL},
-			{.name = "hif0", .id = PFE_PHY_IF_ID_HIF0, .mac = {0}, .chnl = pfe_hif_get_channel(platform->hif, HIF_CHNL_0)},
-			{.name = "hif1", .id = PFE_PHY_IF_ID_HIF1, .mac = {0}, .chnl = pfe_hif_get_channel(platform->hif, HIF_CHNL_1)},
-			{.name = "hif2", .id = PFE_PHY_IF_ID_HIF2, .mac = {0}, .chnl = pfe_hif_get_channel(platform->hif, HIF_CHNL_2)},
-			{.name = "hif3", .id = PFE_PHY_IF_ID_HIF3, .mac = {0}, .chnl = pfe_hif_get_channel(platform->hif, HIF_CHNL_3)},
+			{.name = "emac0", .id = PFE_PHY_IF_ID_EMAC0, .mac = GEMAC0_MAC, {.emac = platform->emac[0]}},
+			{.name = "emac1", .id = PFE_PHY_IF_ID_EMAC1, .mac = GEMAC1_MAC, {.emac = platform->emac[1]}},
+			{.name = "emac2", .id = PFE_PHY_IF_ID_EMAC2, .mac = GEMAC2_MAC, {.emac = platform->emac[2]}},
+			{.name = "util", .id = PFE_PHY_IF_ID_UTIL, .mac = {0}, {.chnl = NULL}},
+			{.name = "hif0", .id = PFE_PHY_IF_ID_HIF0, .mac = {0}, {.chnl = pfe_hif_get_channel(platform->hif, HIF_CHNL_0)}},
+			{.name = "hif1", .id = PFE_PHY_IF_ID_HIF1, .mac = {0}, {.chnl = pfe_hif_get_channel(platform->hif, HIF_CHNL_1)}},
+			{.name = "hif2", .id = PFE_PHY_IF_ID_HIF2, .mac = {0}, {.chnl = pfe_hif_get_channel(platform->hif, HIF_CHNL_2)}},
+			{.name = "hif3", .id = PFE_PHY_IF_ID_HIF3, .mac = {0}, {.chnl = pfe_hif_get_channel(platform->hif, HIF_CHNL_3)}},
 #if defined(PFE_CFG_HIF_NOCPY_SUPPORT)
-			{.name = "hifncpy", .id = PFE_PHY_IF_ID_HIF_NOCPY, .mac = {0}, .chnl = pfe_hif_nocpy_get_channel(platform->hif_nocpy, PFE_HIF_CHNL_NOCPY_ID)},
+			{.name = "hifncpy", .id = PFE_PHY_IF_ID_HIF_NOCPY, .mac = {0}, {.chnl = pfe_hif_nocpy_get_channel(platform->hif_nocpy, PFE_HIF_CHNL_NOCPY_ID)}},
 #endif /* PFE_CFG_HIF_NOCPY_SUPPORT */
 			{.name = NULL, .id = PFE_PHY_IF_ID_INVALID, .mac = {0}, {NULL}}
 	};
@@ -2675,7 +2759,7 @@ errno_t pfe_platform_create_ifaces(pfe_platform_t *platform)
 							|| (pfe_phy_if_get_id(phy_if) == PFE_PHY_IF_ID_EMAC2))
 					{
 						/*	Bind EMAC instance with the physical IF */
-						if (EOK != pfe_phy_if_bind_emac(phy_if, phy_ifs[ii].emac))
+						if (EOK != pfe_phy_if_bind_emac(phy_if, phy_ifs[ii].phy.emac))
 						{
 							NXP_LOG_ERROR("Can't bind interface with EMAC (%s)\n", phy_ifs[ii].name);
 							return ENODEV;
@@ -2696,9 +2780,9 @@ errno_t pfe_platform_create_ifaces(pfe_platform_t *platform)
 					else
 					{
 						/*	Bind HIF channel instance with the physical IF */
-						if (NULL != phy_ifs[ii].chnl)
+						if (NULL != phy_ifs[ii].phy.chnl)
 						{
-							if (EOK != pfe_phy_if_bind_hif(phy_if, phy_ifs[ii].chnl))
+							if (EOK != pfe_phy_if_bind_hif(phy_if, phy_ifs[ii].phy.chnl))
 							{
 								NXP_LOG_ERROR("Can't bind interface with HIF (%s)\n", phy_ifs[ii].name);
 								return ENODEV;
@@ -2714,11 +2798,7 @@ errno_t pfe_platform_create_ifaces(pfe_platform_t *platform)
 					if (EOK != pfe_platform_register_phy_if(platform, session_id, phy_if))
 					{
 						NXP_LOG_ERROR("Could not register %s\n", pfe_phy_if_get_name(phy_if));
-						if (EOK != pfe_phy_if_destroy(phy_if))
-						{
-							NXP_LOG_DEBUG("Could not destroy physical interface\n");
-						}
-
+						pfe_phy_if_destroy(phy_if);
 						phy_if = NULL;
 						return ENODEV;
 					}
@@ -2753,7 +2833,7 @@ static void pfe_platform_destroy_ifaces(pfe_platform_t *platform)
 	pfe_if_db_entry_t *entry = NULL;
 	pfe_log_if_t *log_if;
 	pfe_phy_if_t *phy_if;
-	uint32_t session_id;
+	uint32_t session_id = 0U;
 	errno_t ret;
 
 	if (NULL != platform->log_if_db)
@@ -2812,10 +2892,8 @@ static void pfe_platform_destroy_ifaces(pfe_platform_t *platform)
 				NXP_LOG_DEBUG("Could not remove phy_if DB entry\n");
 			}
 
-			if (EOK != pfe_phy_if_destroy(phy_if))
-			{
-				NXP_LOG_DEBUG("Can't destroy %s\n", pfe_phy_if_get_name(phy_if));
-			}
+			pfe_phy_if_destroy(phy_if);
+			phy_if = NULL;
 
 			ret = pfe_if_db_get_next(platform->phy_if_db, session_id, &entry);
 		}
@@ -2841,7 +2919,7 @@ static void pfe_platform_destroy_ifaces(pfe_platform_t *platform)
 /**
  * @brief		Perform PFE soft reset
  */
-errno_t pfe_platform_soft_reset(pfe_platform_t *platform)
+errno_t pfe_platform_soft_reset(const pfe_platform_t *platform)
 {
 	void *addr;
 	uint32_t regval;
@@ -2866,7 +2944,7 @@ errno_t pfe_platform_soft_reset(pfe_platform_t *platform)
  * @retval		TRUE Feature is available
  * @retval		FALSE Feature is not available
  */
-static bool_t pfe_platform_class_feature_avail(pfe_class_t *class, const char *name)
+static bool_t pfe_platform_class_feature_avail(const pfe_class_t *class, const char *name)
 {
     pfe_fw_feature_t *fw_feature;
     errno_t ret;
@@ -2885,7 +2963,7 @@ static bool_t pfe_platform_class_feature_avail(pfe_class_t *class, const char *n
  * @brief	The platform init function
  * @details	Initializes the PFE HW platform and prepares it for usage according to configuration.
  */
-errno_t pfe_platform_init(pfe_platform_config_t *config)
+errno_t pfe_platform_init(const pfe_platform_config_t *config)
 {
 	errno_t ret = EOK;
 	uint32_t *addr;
@@ -2898,15 +2976,15 @@ errno_t pfe_platform_init(pfe_platform_config_t *config)
 	pfe.fw = config->fw;
 
 	/*	Map CBUS address space */
-	pfe.cbus_baseaddr = oal_mm_dev_map((void *)config->cbus_base, config->cbus_len);
-	if (NULL == pfe.cbus_baseaddr)
+	pfe.cbus_baseaddr = (addr_t)oal_mm_dev_map((void *)config->cbus_base, config->cbus_len);
+	if (NULL_ADDR == pfe.cbus_baseaddr)
 	{
 		NXP_LOG_ERROR("Can't map PPFE CBUS\n");
 		goto exit;
 	}
 	else
 	{
-		NXP_LOG_INFO("PFE CBUS p0x%p mapped @ v0x%p\n", (void *)config->cbus_base, pfe.cbus_baseaddr);
+		NXP_LOG_INFO("PFE CBUS p0x%"PRINTADDR_T" mapped @ v0x%"PRINTADDR_T"\n", config->cbus_base, pfe.cbus_baseaddr);
 	}
 
 	/*	Initialize LMEM TODO: Get LMEM size from global WSP_LMEM_SIZE register */
@@ -3004,7 +3082,7 @@ errno_t pfe_platform_init(pfe_platform_config_t *config)
 #ifdef PFE_CFG_FCI_ENABLE
 #if defined(PFE_CFG_RTABLE_ENABLE)
 	/*	Routing Table */
-	ret = pfe_platform_create_rtable(&pfe);
+	ret = pfe_platform_create_rtable(&pfe, config);
 	if (EOK != ret)
 	{
 		goto exit;
@@ -3098,7 +3176,7 @@ errno_t pfe_platform_init(pfe_platform_config_t *config)
     /* Get FW features */
     if(FALSE != pfe_platform_class_feature_avail(pfe.classifier, "safety"))
     {
-        NXP_LOG_DEBUG("\'safety\' available\n");        
+        NXP_LOG_DEBUG("\'safety\' available\n");
     }
     else
     {
@@ -3106,7 +3184,7 @@ errno_t pfe_platform_init(pfe_platform_config_t *config)
     }
     if(FALSE != pfe_platform_class_feature_avail(pfe.classifier, "ingress_vlan"))
     {
-        NXP_LOG_DEBUG("\'ingress_vlan\' available\n");        
+        NXP_LOG_DEBUG("\'ingress_vlan\' available\n");
     }
     else
     {
@@ -3114,7 +3192,7 @@ errno_t pfe_platform_init(pfe_platform_config_t *config)
     }
     if(FALSE != pfe_platform_class_feature_avail(pfe.classifier, "egress_vlan"))
     {
-        NXP_LOG_DEBUG("\'egress_vlan\' available\n");        
+        NXP_LOG_DEBUG("\'egress_vlan\' available\n");
     }
     else
     {
@@ -3187,7 +3265,7 @@ errno_t pfe_platform_remove(void)
 	}
 
 	/*	Clear the generic control register */
-	if (NULL != pfe.cbus_baseaddr)
+	if (NULL_ADDR != pfe.cbus_baseaddr)
 	{
 		hal_write32(0U, (void *)(CBUS_GLOBAL_CSR_BASE_ADDR + 0x20U + (addr_t)(pfe.cbus_baseaddr)));
 	}
@@ -3228,9 +3306,9 @@ errno_t pfe_platform_remove(void)
 	pfe_platform_destroy_emac(&pfe);
 	pfe_platform_destroy_safety(&pfe);
 
-	if (NULL != pfe.cbus_baseaddr)
+	if (NULL_ADDR != pfe.cbus_baseaddr)
 	{
-		ret = oal_mm_dev_unmap(pfe.cbus_baseaddr, PFE_CFG_CBUS_LENGTH/* <- FIXME, should use value used on init instead */);
+		ret = oal_mm_dev_unmap((void *)pfe.cbus_baseaddr, PFE_CFG_CBUS_LENGTH/* <- FIXME, should use value used on init instead */);
 		if (EOK != ret)
 		{
 			NXP_LOG_ERROR("Can't unmap PPFE CBUS: %d\n", ret);
@@ -3265,7 +3343,7 @@ pfe_platform_t * pfe_platform_get_instance(void)
  * @param[out]	class_fw The class fw parsed metadata or NULL if not needed
  * @param[out]	util_fw The util fw parsed metadata or NULL if not needed
  */
-errno_t pfe_platform_get_fw_versions(pfe_platform_t *platform, pfe_ct_version_t *class_fw, pfe_ct_version_t *util_fw)
+errno_t pfe_platform_get_fw_versions(const pfe_platform_t *platform, pfe_ct_version_t *class_fw, pfe_ct_version_t *util_fw)
 {
 	/*	CLASS fw */
 	if (NULL != class_fw)
diff --git a/sw/pfe_platform/hw/s32g/pfe_platform_slave.c b/sw/pfe_platform/hw/s32g/pfe_platform_slave.c
index 433e630..a8e2baa 100644
--- a/sw/pfe_platform/hw/s32g/pfe_platform_slave.c
+++ b/sw/pfe_platform/hw/s32g/pfe_platform_slave.c
@@ -8,10 +8,10 @@
  * ========================================================================= */
 
 #include "pfe_cfg.h"
-#ifdef PFE_CFG_PFE_SLAVE
 #include "oal.h"
-#include "hal.h"
 
+#ifdef PFE_CFG_PFE_SLAVE
+#include "hal.h"
 #include "pfe_cbus.h"
 #include "pfe_platform_cfg.h"
 #include "pfe_platform.h"
@@ -51,7 +51,7 @@ void pfe_platform_idex_rpc_cbk(pfe_ct_phy_if_id_t sender, uint32_t id, void *buf
 /**
  * @brief		Assign HIF to the platform
  */
-static errno_t pfe_platform_create_hif(pfe_platform_t *platform, pfe_platform_config_t *config)
+static errno_t pfe_platform_create_hif(pfe_platform_t *platform, const pfe_platform_config_t *config)
 {
 	uint32_t ii;
 	static pfe_hif_chnl_id_t ids[HIF_CFG_MAX_CHANNELS] = {HIF_CHNL_0, HIF_CHNL_1, HIF_CHNL_2, HIF_CHNL_3};
@@ -131,7 +131,7 @@ static void pfe_platform_destroy_hif_nocpy(pfe_platform_t *platform)
  * @brief		Register logical interface
  * @details		Add logical interface to internal database
  */
-errno_t pfe_platform_register_log_if(pfe_platform_t *platform, pfe_log_if_t *log_if)
+errno_t pfe_platform_register_log_if(const pfe_platform_t *platform, pfe_log_if_t *log_if)
 {
 	uint32_t session_id;
 	errno_t ret;
@@ -172,7 +172,7 @@ errno_t pfe_platform_register_log_if(pfe_platform_t *platform, pfe_log_if_t *log
  * @details		Logical interface will be removed from internal database
  * @warning		Should be called only with locked DB
  */
-errno_t pfe_platform_unregister_log_if(pfe_platform_t *platform, pfe_log_if_t *log_if)
+errno_t pfe_platform_unregister_log_if(const pfe_platform_t *platform, pfe_log_if_t *log_if)
 {
 	errno_t ret = EOK;
 	pfe_if_db_entry_t *entry = NULL;
@@ -214,7 +214,7 @@ errno_t pfe_platform_unregister_log_if(pfe_platform_t *platform, pfe_log_if_t *l
 /**
  * @brief		Register physical interface
  */
-static errno_t pfe_platform_register_phy_if(pfe_platform_t *platform, uint32_t session_id, pfe_phy_if_t *phy_if)
+static errno_t pfe_platform_register_phy_if(const pfe_platform_t *platform, uint32_t session_id, pfe_phy_if_t *phy_if)
 {
 	errno_t ret;
 
@@ -238,7 +238,7 @@ static errno_t pfe_platform_register_phy_if(pfe_platform_t *platform, uint32_t s
  * @param[in]	id Physical interface ID
  * @return		Logical interface instance or NULL if failed.
  */
-pfe_phy_if_t *pfe_platform_get_phy_if_by_id(pfe_platform_t *platform, pfe_ct_phy_if_id_t id)
+pfe_phy_if_t *pfe_platform_get_phy_if_by_id(const pfe_platform_t *platform, pfe_ct_phy_if_id_t id)
 {
 	pfe_if_db_entry_t *entry = NULL;
 	uint32_t session_id;
@@ -334,11 +334,7 @@ errno_t pfe_platform_create_ifaces(pfe_platform_t *platform)
 				if (EOK != pfe_platform_register_phy_if(platform, session_id, phy_if))
 				{
 					NXP_LOG_ERROR("Could not register %s\n", pfe_phy_if_get_name(phy_if));
-					if (EOK != pfe_phy_if_destroy(phy_if))
-					{
-						NXP_LOG_DEBUG("Could not destroy physical interface\n");
-					}
-
+					pfe_phy_if_destroy(phy_if);
 					phy_if = NULL;
 					ret = ENODEV;
 					break;
@@ -374,22 +370,22 @@ errno_t pfe_platform_create_ifaces(pfe_platform_t *platform)
  * @brief	The platform initialization function
  * @details	Initializes the PFE HW platform and prepares it for usage according to configuration.
  */
-errno_t pfe_platform_init(pfe_platform_config_t *config)
+errno_t pfe_platform_init(const pfe_platform_config_t *config)
 {
 	errno_t ret = EOK;
 
 	memset(&pfe, 0U, sizeof(pfe_platform_t));
 
 	/*	Map CBUS address space */
-	pfe.cbus_baseaddr = oal_mm_dev_map((void *)config->cbus_base, config->cbus_len);
-	if (NULL == pfe.cbus_baseaddr)
+	pfe.cbus_baseaddr = (addr_t)oal_mm_dev_map((void *)config->cbus_base, config->cbus_len);
+	if (0ULL == pfe.cbus_baseaddr)
 	{
 		NXP_LOG_ERROR("Can't map PPFE CBUS\n");
 		goto exit;
 	}
 	else
 	{
-		NXP_LOG_INFO("PFE CBUS p0x%p mapped @ v0x%p\n", (void *)config->cbus_base, pfe.cbus_baseaddr);
+		NXP_LOG_INFO("PFE CBUS p0x%p mapped @ v0x%"PRINTADDR_T"\n", (void *)config->cbus_base, pfe.cbus_baseaddr);
 	}
 
 	ret = pfe_platform_create_hif(&pfe, config);
@@ -428,9 +424,9 @@ errno_t pfe_platform_remove(void)
 	pfe_platform_destroy_hif_nocpy(&pfe);
 #endif /* PFE_CFG_HIF_NOCPY_SUPPORT */
 
-	if (NULL != pfe.cbus_baseaddr)
+	if (0ULL != pfe.cbus_baseaddr)
 	{
-		ret = oal_mm_dev_unmap(pfe.cbus_baseaddr, PFE_CFG_CBUS_LENGTH/* <- FIXME, should use value used on init instead */);
+		ret = oal_mm_dev_unmap((void *)pfe.cbus_baseaddr, PFE_CFG_CBUS_LENGTH/* <- FIXME, should use value used on init instead */);
 		if (EOK != ret)
 		{
 			NXP_LOG_ERROR("Can't unmap PPFE CBUS: %d\n", ret);
diff --git a/sw/pfe_platform/hw/s32g/pfe_safety_csr.c b/sw/pfe_platform/hw/s32g/pfe_safety_csr.c
index 7471024..7343358 100644
--- a/sw/pfe_platform/hw/s32g/pfe_safety_csr.c
+++ b/sw/pfe_platform/hw/s32g/pfe_safety_csr.c
@@ -1,7 +1,7 @@
 /* =========================================================================
  *  
  *  Copyright (c) 2019 Imagination Technologies Limited
- *  Copyright 2019-2020 NXP
+ *  Copyright 2019-2021 NXP
  *
  *  SPDX-License-Identifier: GPL-2.0
  *
@@ -19,16 +19,61 @@
 #error Unsupported IP version
 #endif /* PFE_CFG_IP_VERSION */
 
+#define WSP_SAFETY_INT_SRC_NUMBER   28U
+#define TRIG_EN_INTERRUPTS_CHECK   (MASTER1_INT | MASTER2_INT | MASTER3_INT | MASTER4_INT | \
+									EMAC_CBUS_INT | EMAC_DBUS_INT | CLASS_CBUS_INT | CLASS_DBUS_INT | \
+									TMU_CBUS_INT | TMU_DBUS_INT | HIF_CBUS_INT | HIF_DBUS_INT | \
+									HIF_NOCPY_CBUS_INT | HIF_NOCPY_DBUS_INT | UPE_CBUS_INT | UPE_DBUS_INT | \
+									HRS_CBUS_INT | BRIDGE_CBUS_INT | EMAC_SLV_INT | BMU1_SLV_INT | \
+									BMU2_SLV_INT | CLASS_SLV_INT | HIF_SLV_INT | HIF_NOCPY_SLV_INT | \
+									LMEM_SLV_INT | TMU_SLV_INT | UPE_SLV_INT | WSP_GLOBAL_SLV_INT \
+								   )
+
 /**
  * @brief		SAFETY ISR
  * @details		MASK, ACK, and process triggered interrupts.
  * @param[in]	base_va SAFETY register space base address (virtual)
  * @return		EOK if interrupt has been handled, error code otherwise
  */
-errno_t pfe_safety_cfg_isr(void *base_va)
+errno_t pfe_safety_cfg_isr(addr_t base_va)
 {
 	uint32_t reg_en, reg_src;
 	errno_t ret = ENOENT;
+	uint32_t trig_en_interrupts;
+#ifdef NXP_LOG_ENABLED
+	uint8_t index = 0U;
+	const char_t * const wsp_safety_int_src_text[WSP_SAFETY_INT_SRC_NUMBER] = 
+	{
+		"MASTER1_INT-Master1 Parity error",
+		"MASTER2_INT-Master2 Parity error",
+		"MASTER3_INT-Master3 Parity error",
+		"MASTER4_INT-Master4 Parity error",
+		"EMAC_CBUS_INT-EMACX cbus parity error",
+		"EMAC_DBUS_INT-EMACX dbus parity error",
+		"CLASS_CBUS_INT-Class cbus parity error",
+		"CLASS_DBUS_INT-Class dbus parity error",
+		"TMU_CBUS_INT-TMU cbus parity error",
+		"TMU_DBUS_INT-TMU dbus parity error",
+		"HIF_CBUS_INT-HGPI cbus parity error",
+		"HIF_DBUS_INT-HGPI dbus parity error",
+		"HIF_NOCPY_CBUS_INT-HIF_NOCPY cbus parity error",
+		"HIF_NOCPY_DBUS_INT-HIF_NOCPY dbus parity error",
+		"UPE_CBUS_INT-UTIL_PE cbus parity error",
+		"UPE_DBUS_INT-UTIL_PE dbus parity error",
+		"HRS_CBUS_INT-HRS cbus parity error",
+		"BRIDGE_CBUS_INT-BRIDGE cbus parity error",
+		"EMAC_SLV_INT-EMACX slave parity error",
+		"BMU1_SLV_INT-BMU1 slave parity error",
+		"BMU2_SLV_INT-BMU2 slave parity error",
+		"CLASS_SLV_INT-CLASS slave parity error",
+		"HIF_SLV_INT-HIF slave parity error",
+		"HIF_NOCPY_SLV_INT-HIF_NOCPY slave parity error",
+		"LMEM_SLV_INT-LMEM slave parity error",
+		"TMU_SLV_INT-TMU slave parity error",
+		"UPE_SLV_INT-UTIL_PE slave parity error",
+		"WSP_GLOBAL_SLV_INT-WSP_GLOBAL slave parity error"
+	};
+#endif /* NXP_LOG_ENABLED */
 
 	/*	Get enabled interrupts */
 	reg_en = hal_read32(base_va + WSP_SAFETY_INT_EN);
@@ -40,171 +85,21 @@ errno_t pfe_safety_cfg_isr(void *base_va)
 	hal_write32(reg_src, base_va + WSP_SAFETY_INT_SRC);
 
 	/* Process interrupts which are triggered AND enabled */
-	if ((reg_src & reg_en & MASTER1_INT) != 0U)
-	{
-		NXP_LOG_INFO("MASTER1_INT-Master1 Parity error\n");
-		ret = EOK;
-	}
-
-	if ((reg_src & reg_en & MASTER2_INT) != 0U)
-	{
-		NXP_LOG_INFO("MASTER2_INT-Master2 Parity error\n");
-		ret = EOK;
-	}
-
-	if ((reg_src & reg_en & MASTER3_INT) != 0U)
-	{
-		NXP_LOG_INFO("MASTER3_INT-Master3 Parity error\n");
-		ret = EOK;
-	}
-
-	if ((reg_src & reg_en & MASTER4_INT) != 0U)
-	{
-		NXP_LOG_INFO("MASTER4_INT-Master4 Parity error\n");
-		ret = EOK;
-	}
-
-	if ((reg_src & reg_en & EMAC_CBUS_INT) != 0U)
-	{
-		NXP_LOG_INFO("EMAC_CBUS_INT-EMACX cbus parity error\n");
-		ret = EOK;
-	}
-
-	if ((reg_src & reg_en & EMAC_DBUS_INT) != 0U)
-	{
-		NXP_LOG_INFO("EMAC_DBUS_INT-EMACX dbus parity error\n");
-		ret = EOK;
-	}
-
-	if ((reg_src & reg_en & CLASS_CBUS_INT) != 0U)
-	{
-		NXP_LOG_INFO("CLASS_CBUS_INT-Class cbus parity error\n");
-		ret = EOK;
-	}
-
-	if ((reg_src & reg_en & CLASS_DBUS_INT) != 0U)
-	{
-		NXP_LOG_INFO("CLASS_DBUS_INT-Class dbus parity error\n");
-		ret = EOK;
-	}
-
-	if ((reg_src & reg_en & TMU_CBUS_INT) != 0U)
-	{
-		NXP_LOG_INFO("TMU_CBUS_INT-TMU cbus parity error\n");
-		ret = EOK;
-	}
-
-	if ((reg_src & reg_en & TMU_DBUS_INT) != 0U)
-	{
-		NXP_LOG_INFO("TMU_DBUS_INT-TMU dbus parity error\n");
-		ret = EOK;
-	}
-
-	if ((reg_src & reg_en & HIF_CBUS_INT) != 0U)
-	{
-		NXP_LOG_INFO("HIF_CBUS_INT-HGPI cbus parity error\n");
-		ret = EOK;
-	}
-
-	if ((reg_src & reg_en & HIF_DBUS_INT) != 0U)
-	{
-		NXP_LOG_INFO("HIF_DBUS_INT-HGPI dbus parity error\n");
-		ret = EOK;
-	}
-
-	if ((reg_src & reg_en & HIF_NOCPY_CBUS_INT) != 0U)
-	{
-		NXP_LOG_INFO("HIF_NOCPY_CBUS_INT-HIF_NOCPY cbus parity error\n");
-		ret = EOK;
-	}
-
-	if ((reg_src & reg_en & HIF_NOCPY_DBUS_INT) != 0U)
-	{
-		NXP_LOG_INFO("HIF_NOCPY_DBUS_INT-HIF_NOCPY dbus parity error\n");
-		ret = EOK;
-	}
-
-	if ((reg_src & reg_en & UPE_CBUS_INT) != 0U)
-	{
-		NXP_LOG_INFO("UPE_CBUS_INT-UTIL_PE cbus parity error\n");
-		ret = EOK;
-	}
-
-	if ((reg_src & reg_en & UPE_DBUS_INT) != 0U)
-	{
-		NXP_LOG_INFO("UPE_DBUS_INT-UTIL_PE dbus parity error\n");
-		ret = EOK;
-	}
-
-	if ((reg_src & reg_en & HRS_CBUS_INT) != 0U)
-	{
-		NXP_LOG_INFO("HRS_CBUS_INT-HRS cbus parity error\n");
-		ret = EOK;
-	}
-
-	if ((reg_src & reg_en & BRIDGE_CBUS_INT) != 0U)
-	{
-		NXP_LOG_INFO("BRIDGE_CBUS_INT-BRIDGE cbus parity error\n");
-		ret = EOK;
-	}
-
-	if ((reg_src & reg_en & EMAC_SLV_INT) != 0U)
-	{
-		NXP_LOG_INFO("EMAC_SLV_INT-EMACX slave parity error\n");
-		ret = EOK;
-	}
-
-	if ((reg_src & reg_en & BMU1_SLV_INT) != 0U)
-	{
-		NXP_LOG_INFO("BMU1_SLV_INT-BMU1 slave parity error\n");
-		ret = EOK;
-	}
-
-	if ((reg_src & reg_en & BMU2_SLV_INT) != 0U)
-	{
-		NXP_LOG_INFO("BMU2_SLV_INT-BMU2 slave parity error\n");
-		ret = EOK;
-	}
-
-	if ((reg_src & reg_en & CLASS_SLV_INT) != 0U)
-	{
-		NXP_LOG_INFO("CLASS_SLV_INT-CLASS slave parity error\n");
-		ret = EOK;
-	}
-
-	if ((reg_src & reg_en & HIF_SLV_INT) != 0U)
-	{
-		NXP_LOG_INFO("HIF_SLV_INT-HIF slave parity error\n");
-		ret = EOK;
-	}
-
-	if ((reg_src & reg_en & HIF_NOCPY_SLV_INT) != 0U)
-	{
-		NXP_LOG_INFO("HIF_NOCPY_SLV_INT-HIF_NOCPY slave parity error\n");
-		ret = EOK;
-	}
-
-	if ((reg_src & reg_en & LMEM_SLV_INT) != 0U)
-	{
-		NXP_LOG_INFO("LMEM_SLV_INT-LMEM slave parity error\n");
-		ret = EOK;
-	}
-
-	if ((reg_src & reg_en & TMU_SLV_INT) != 0U)
-	{
-		NXP_LOG_INFO("TMU_SLV_INT-TMU slave parity error\n");
-		ret = EOK;
-	}
-
-	if ((reg_src & reg_en & UPE_SLV_INT) != 0U)
-	{
-		NXP_LOG_INFO("UPE_SLV_INT-UTIL_PE slave parity error\n");
-		ret = EOK;
-	}
-
-	if ((reg_src & reg_en & WSP_GLOBAL_SLV_INT) != 0U)
+	trig_en_interrupts = reg_src & reg_en & TRIG_EN_INTERRUPTS_CHECK;
+	if (0U != trig_en_interrupts)
 	{
-		NXP_LOG_INFO("WSP_GLOBAL_SLV_INT-WSP_GLOBAL slave parity error\n");
+#ifdef NXP_LOG_ENABLED
+		trig_en_interrupts >>= 1U;
+		while (0U != trig_en_interrupts)
+		{
+			if (0U != (trig_en_interrupts && 1UL))
+			{
+				NXP_LOG_INFO("%s\n", wsp_safety_int_src_text[index]);
+			}
+			trig_en_interrupts >>= 1U;
+			index++;
+		}
+#endif /* NXP_LOG_ENABLED */    
 		ret = EOK;
 	}
 
@@ -218,7 +113,7 @@ errno_t pfe_safety_cfg_isr(void *base_va)
  * @brief		Mask SAFETY interrupts
  * @param[in]	base_va Base address of the SAFETY register space
  */
-void pfe_safety_cfg_irq_mask(void *base_va)
+void pfe_safety_cfg_irq_mask(addr_t base_va)
 {
 	uint32_t reg;
 
@@ -230,7 +125,7 @@ void pfe_safety_cfg_irq_mask(void *base_va)
  * @brief		Unmask SAFETY interrupts
  * @param[in]	base_va Base address of the SAFETY register space
  */
-void pfe_safety_cfg_irq_unmask(void *base_va)
+void pfe_safety_cfg_irq_unmask(addr_t base_va)
 {
 	uint32_t reg;
 
@@ -243,7 +138,7 @@ void pfe_safety_cfg_irq_unmask(void *base_va)
  * @param[in]	base_va Base address of the SAFETY register space
  * @note		This function is called from thread.
  */
-void pfe_safety_cfg_irq_unmask_all(void *base_va)
+void pfe_safety_cfg_irq_unmask_all(addr_t base_va)
 {
 	hal_write32(SAFETY_INT_ENABLE_ALL, base_va + WSP_SAFETY_INT_EN);
 }
diff --git a/sw/pfe_platform/hw/s32g/pfe_safety_csr.h b/sw/pfe_platform/hw/s32g/pfe_safety_csr.h
index 5636a1d..f113306 100644
--- a/sw/pfe_platform/hw/s32g/pfe_safety_csr.h
+++ b/sw/pfe_platform/hw/s32g/pfe_safety_csr.h
@@ -1,7 +1,7 @@
 /* =========================================================================
  *  
  *  Copyright (c) 2019 Imagination Technologies Limited
- *  Copyright 2019-2020 NXP
+ *  Copyright 2019-2021 NXP
  *
  *  SPDX-License-Identifier: GPL-2.0
  *
@@ -18,9 +18,9 @@
 #error Unsupported IP version
 #endif /* PFE_CFG_IP_VERSION */
 
-errno_t pfe_safety_cfg_isr(void *base_va);
-void pfe_safety_cfg_irq_mask(void *base_va);
-void pfe_safety_cfg_irq_unmask(void *base_va);
-void pfe_safety_cfg_irq_unmask_all(void *base_va);
+errno_t pfe_safety_cfg_isr(addr_t base_va);
+void pfe_safety_cfg_irq_mask(addr_t base_va);
+void pfe_safety_cfg_irq_unmask(addr_t base_va);
+void pfe_safety_cfg_irq_unmask_all(addr_t base_va);
 
 #endif /* PFE_SAFETY_CSR_H_ */
diff --git a/sw/pfe_platform/hw/s32g/pfe_tmu_csr.c b/sw/pfe_platform/hw/s32g/pfe_tmu_csr.c
index a85e185..1d01c45 100644
--- a/sw/pfe_platform/hw/s32g/pfe_tmu_csr.c
+++ b/sw/pfe_platform/hw/s32g/pfe_tmu_csr.c
@@ -24,35 +24,34 @@
 #error Unsupported IP version
 #endif /* PFE_CFG_IP_VERSION */
 
-/*	List of QoS configuration for each physical interface terminated with invalid entry */
-static const pfe_tmu_phy_cfg_t phys[] = {
-	{.id = PFE_PHY_IF_ID_EMAC0, .q_cnt = 8U, .sch_cnt = 2U, .shp_cnt = 4U},
-	{.id = PFE_PHY_IF_ID_EMAC1, .q_cnt = 8U, .sch_cnt = 2U, .shp_cnt = 4U},
-	{.id = PFE_PHY_IF_ID_EMAC2, .q_cnt = 8U, .sch_cnt = 2U, .shp_cnt = 4U},
-	{.id = PFE_PHY_IF_ID_HIF0, .q_cnt = 2U, .sch_cnt = 0U, .shp_cnt = 0U},
-	{.id = PFE_PHY_IF_ID_HIF1, .q_cnt = 2U, .sch_cnt = 0U, .shp_cnt = 0U},
-	{.id = PFE_PHY_IF_ID_HIF2, .q_cnt = 2U, .sch_cnt = 0U, .shp_cnt = 0U},
-	{.id = PFE_PHY_IF_ID_HIF3, .q_cnt = 2U, .sch_cnt = 0U, .shp_cnt = 0U},
-	{.id = PFE_PHY_IF_ID_HIF, .q_cnt = 8U, .sch_cnt = 2U, .shp_cnt = 4U},
-	{.id = PFE_PHY_IF_ID_HIF_NOCPY, .q_cnt = 8U, .sch_cnt = 2U, .shp_cnt = 4U},
-	{.id = PFE_PHY_IF_ID_UTIL, .q_cnt = 8U, .sch_cnt = 2U, .shp_cnt = 4U},
-	{.id = PFE_PHY_IF_ID_INVALID}
-};
-
 #define CLK_DIV_LOG2 (8U - 1U) /* Value of CLK_DIV_LOG2 log2(clk_div/2) */
 #define CLK_DIV ((uint64_t)1U << (CLK_DIV_LOG2 + 1U)) /* 256 */
 
-static errno_t pfe_tmu_cntx_mem_write(void *cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t loc, uint32_t data);
-static errno_t pfe_tmu_cntx_mem_read(void *cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t loc, uint32_t *data);
+static errno_t pfe_tmu_cntx_mem_write(addr_t cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t loc, uint32_t data);
+static errno_t pfe_tmu_cntx_mem_read(addr_t cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t loc, uint32_t *data);
 
 /**
  * @brief		Return QoS configuration of given physical interface
  * @param[in]	phy The physical interface to get QoS configuration for
  * @return		Pointer to the configuration or NULL if not found
  */
-const pfe_tmu_phy_cfg_t *const pfe_tmu_cfg_get_phy_config(pfe_ct_phy_if_id_t phy)
+const pfe_tmu_phy_cfg_t *pfe_tmu_cfg_get_phy_config(pfe_ct_phy_if_id_t phy)
 {
 	uint32_t ii;
+	/*	List of QoS configuration for each physical interface terminated with invalid entry */
+	static const pfe_tmu_phy_cfg_t phys[] = {
+		{.id = PFE_PHY_IF_ID_EMAC0, .q_cnt = 8U, .sch_cnt = 2U, .shp_cnt = 4U},
+		{.id = PFE_PHY_IF_ID_EMAC1, .q_cnt = 8U, .sch_cnt = 2U, .shp_cnt = 4U},
+		{.id = PFE_PHY_IF_ID_EMAC2, .q_cnt = 8U, .sch_cnt = 2U, .shp_cnt = 4U},
+		{.id = PFE_PHY_IF_ID_HIF0, .q_cnt = 2U, .sch_cnt = 0U, .shp_cnt = 0U},
+		{.id = PFE_PHY_IF_ID_HIF1, .q_cnt = 2U, .sch_cnt = 0U, .shp_cnt = 0U},
+		{.id = PFE_PHY_IF_ID_HIF2, .q_cnt = 2U, .sch_cnt = 0U, .shp_cnt = 0U},
+		{.id = PFE_PHY_IF_ID_HIF3, .q_cnt = 2U, .sch_cnt = 0U, .shp_cnt = 0U},
+		{.id = PFE_PHY_IF_ID_HIF, .q_cnt = 8U, .sch_cnt = 2U, .shp_cnt = 4U},
+		{.id = PFE_PHY_IF_ID_HIF_NOCPY, .q_cnt = 8U, .sch_cnt = 2U, .shp_cnt = 4U},
+		{.id = PFE_PHY_IF_ID_UTIL, .q_cnt = 8U, .sch_cnt = 2U, .shp_cnt = 4U},
+		{.id = PFE_PHY_IF_ID_INVALID}
+	};
 
 	for (ii=0U; phys[ii].id != PFE_PHY_IF_ID_INVALID; ii++)
 	{
@@ -71,7 +70,7 @@ const pfe_tmu_phy_cfg_t *const pfe_tmu_cfg_get_phy_config(pfe_ct_phy_if_id_t phy
  * @param[in]	cfg Pointer to the configuration structure
  * @return		EOK if success
  */
-errno_t pfe_tmu_cfg_init(void *cbus_base_va, pfe_tmu_cfg_t *cfg)
+errno_t pfe_tmu_cfg_init(addr_t cbus_base_va, const pfe_tmu_cfg_t *cfg)
 {
     uint8_t queue;
 	uint32_t ii;
@@ -202,7 +201,7 @@ errno_t pfe_tmu_cfg_init(void *cbus_base_va, pfe_tmu_cfg_t *cfg)
  * @brief		Issue TMU reset
  * @param[in]	cbus_base_va The cbus base address
  */
-void pfe_tmu_cfg_reset(void *cbus_base_va)
+void pfe_tmu_cfg_reset(addr_t cbus_base_va)
 {
 	uint32_t timeout = 20U;
 	uint32_t reg;
@@ -226,7 +225,7 @@ void pfe_tmu_cfg_reset(void *cbus_base_va)
  * @brief		Enable the TMU block
  * @param[in]	cbus_base_va The cbus base address
  */
-void pfe_tmu_cfg_enable(void *cbus_base_va)
+void pfe_tmu_cfg_enable(addr_t cbus_base_va)
 {
 	/*	nop */
 	(void)cbus_base_va;
@@ -236,7 +235,7 @@ void pfe_tmu_cfg_enable(void *cbus_base_va)
  * @brief		Disable the TMU block
  * @param[in]	base_va The cbus base address
  */
-void pfe_tmu_cfg_disable(void *cbus_base_va)
+void pfe_tmu_cfg_disable(addr_t cbus_base_va)
 {
 	/*	nop */
 	(void)cbus_base_va;
@@ -250,7 +249,7 @@ void pfe_tmu_cfg_disable(void *cbus_base_va)
  * @param[in]	buf_pa Buffer physical address
  * @param[in]	len Number of bytes to send
  */
-void pfe_tmu_cfg_send_pkt(void *cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t queue, void *buf_pa, uint16_t len)
+void pfe_tmu_cfg_send_pkt(addr_t cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t queue, const void *buf_pa, uint16_t len)
 {
 	hal_write32((uint32_t)((addr_t)PFE_CFG_MEMORY_PHYS_TO_PFE(buf_pa) & 0xffffffffU), cbus_base_va + TMU_PHY_INQ_PKTPTR);
 	hal_write32(((uint32_t)phy << 24) | ((uint32_t)queue << 16) | len, cbus_base_va + TMU_PHY_INQ_PKTINFO);
@@ -264,7 +263,7 @@ void pfe_tmu_cfg_send_pkt(void *cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t qu
  * @param[out]	data Data to be written
  * @return		EOK if success, error code otherwise
  */
-static errno_t pfe_tmu_cntx_mem_write(void *cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t loc, uint32_t data)
+static errno_t pfe_tmu_cntx_mem_write(addr_t cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t loc, uint32_t data)
 {
 	uint32_t reg;
 	uint32_t timeout = 20U;
@@ -323,7 +322,7 @@ static errno_t pfe_tmu_cntx_mem_write(void *cbus_base_va, pfe_ct_phy_if_id_t phy
  * @param[out]	data Pointer to memory where read data shall be written
  * @return		EOK if success, error code otherwise
  */
-static errno_t pfe_tmu_cntx_mem_read(void *cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t loc, uint32_t *data)
+static errno_t pfe_tmu_cntx_mem_read(addr_t cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t loc, uint32_t *data)
 {
 	uint32_t reg;
 	uint32_t timeout = 20U;
@@ -384,7 +383,7 @@ static errno_t pfe_tmu_cntx_mem_read(void *cbus_base_va, pfe_ct_phy_if_id_t phy,
 	return ret;
 }
 
-static uint8_t pfe_tmu_hif_q_to_tmu_q(void *cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t queue)
+static uint8_t pfe_tmu_hif_q_to_tmu_q(addr_t cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t queue)
 {
 	uint32_t reg, ii;
 	int8_t hif_queue = -1;
@@ -420,7 +419,7 @@ static uint8_t pfe_tmu_hif_q_to_tmu_q(void *cbus_base_va, pfe_ct_phy_if_id_t phy
  * @param[out]	level Pointer to memory where the fill level value shall be written
  * @return		EOK if success, error code otherwise
  */
-errno_t pfe_tmu_q_cfg_get_fill_level(void *cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t queue, uint32_t *level)
+errno_t pfe_tmu_q_cfg_get_fill_level(addr_t cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t queue, uint32_t *level)
 {
 	uint8_t queue_temp = queue;
 
@@ -448,7 +447,7 @@ errno_t pfe_tmu_q_cfg_get_fill_level(void *cbus_base_va, pfe_ct_phy_if_id_t phy,
  * @param[out]	cnt Pointer to memory where the drop count shall be written
  * @return		EOK if success, error code otherwise
  */
-errno_t pfe_tmu_q_cfg_get_drop_count(void *cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t queue, uint32_t *cnt)
+errno_t pfe_tmu_q_cfg_get_drop_count(addr_t cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t queue, uint32_t *cnt)
 {
 	uint8_t temp = queue;
 	if ((phy == PFE_PHY_IF_ID_HIF0)
@@ -475,7 +474,7 @@ errno_t pfe_tmu_q_cfg_get_drop_count(void *cbus_base_va, pfe_ct_phy_if_id_t phy,
  * @param[out]	cnt Pointer to memory where the TX count shall be written
  * @return		EOK if success, error code otherwise
  */
-errno_t pfe_tmu_q_cfg_get_tx_count(void *cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t queue, uint32_t *cnt)
+errno_t pfe_tmu_q_cfg_get_tx_count(addr_t cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t queue, uint32_t *cnt)
 {
 	uint8_t temp = queue;
 
@@ -504,7 +503,7 @@ errno_t pfe_tmu_q_cfg_get_tx_count(void *cbus_base_va, pfe_ct_phy_if_id_t phy, u
  * @param[out]	max Pointer to memory where 'min' value shall be written
  * @return		The queue mode
  */
-pfe_tmu_queue_mode_t pfe_tmu_q_get_mode(void *cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t queue, uint32_t *min, uint32_t *max)
+pfe_tmu_queue_mode_t pfe_tmu_q_get_mode(addr_t cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t queue, uint32_t *min, uint32_t *max)
 {
 	uint32_t reg;
 	errno_t ret;
@@ -567,7 +566,7 @@ pfe_tmu_queue_mode_t pfe_tmu_q_get_mode(void *cbus_base_va, pfe_ct_phy_if_id_t p
  * @param[in]	queue The queue ID
  * @return		EOK if success, error code otherwise
  */
-errno_t pfe_tmu_q_mode_set_default(void *cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t queue)
+errno_t pfe_tmu_q_mode_set_default(addr_t cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t queue)
 {
 	uint8_t temp = queue;
 
@@ -600,7 +599,7 @@ errno_t pfe_tmu_q_mode_set_default(void *cbus_base_va, pfe_ct_phy_if_id_t phy, u
  * 					the enqueue requests will result in packet drop.
  * @return		EOK if success, error code otherwise
  */
-errno_t pfe_tmu_q_mode_set_tail_drop(void *cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t queue, uint16_t max)
+errno_t pfe_tmu_q_mode_set_tail_drop(addr_t cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t queue, uint16_t max)
 {
 	uint32_t reg;
 	uint8_t queue_temp = queue;
@@ -657,7 +656,7 @@ errno_t pfe_tmu_q_mode_set_tail_drop(void *cbus_base_va, pfe_ct_phy_if_id_t phy,
  * @param[in]	max See algorithm above
  * @return		EOK if success, error code otherwise
  */
-errno_t pfe_tmu_q_mode_set_wred(void *cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t queue, uint16_t min, uint16_t max)
+errno_t pfe_tmu_q_mode_set_wred(addr_t cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t queue, uint16_t min, uint16_t max)
 {
 	uint32_t reg;
 	errno_t ret;
@@ -726,7 +725,7 @@ errno_t pfe_tmu_q_mode_set_wred(void *cbus_base_va, pfe_ct_phy_if_id_t phy, uint
  * @param[in]	prob Zone probability [%]
  * @return		EOK if success, error code otherwise
  */
-errno_t pfe_tmu_q_set_wred_probability(void *cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t queue, uint8_t zone, uint8_t prob)
+errno_t pfe_tmu_q_set_wred_probability(addr_t cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t queue, uint8_t zone, uint8_t prob)
 {
 	errno_t ret;
 	uint32_t reg;
@@ -790,7 +789,7 @@ errno_t pfe_tmu_q_set_wred_probability(void *cbus_base_va, pfe_ct_phy_if_id_t ph
  * @param[in]	prob Pointer to memory where zone probability [%] shall be written
  * @return		EOK if success, error code otherwise
  */
-errno_t pfe_tmu_q_get_wred_probability(void *cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t queue, uint8_t zone, uint8_t *prob)
+errno_t pfe_tmu_q_get_wred_probability(addr_t cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t queue, uint8_t zone, uint8_t *prob)
 {
 	errno_t ret;
 	uint32_t reg;
@@ -847,7 +846,7 @@ errno_t pfe_tmu_q_get_wred_probability(void *cbus_base_va, pfe_ct_phy_if_id_t ph
  * @param[in]	queue The queue ID
  * @return		Number of zones
  */
-uint8_t pfe_tmu_q_get_wred_zones(void *cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t queue)
+uint8_t pfe_tmu_q_get_wred_zones(addr_t cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t queue)
 {
 	(void) cbus_base_va;
 	(void) phy;
@@ -866,10 +865,10 @@ uint8_t pfe_tmu_q_get_wred_zones(void *cbus_base_va, pfe_ct_phy_if_id_t phy, uin
  * @param[in]	min_credit Minimum credit value. Must be negative.
  * @return		EOK if success, error code otherwise
  */
-errno_t pfe_tmu_shp_cfg_set_limits(void *cbus_base_va, pfe_ct_phy_if_id_t phy,
+errno_t pfe_tmu_shp_cfg_set_limits(addr_t cbus_base_va, pfe_ct_phy_if_id_t phy,
 		uint8_t shp, int32_t max_credit, int32_t min_credit)
 {
-	void *shp_base_va = cbus_base_va + TLITE_PHYn_SHPm_BASE_ADDR((uint32_t)phy, shp);
+	addr_t shp_base_va = cbus_base_va + TLITE_PHYn_SHPm_BASE_ADDR((uint32_t)phy, shp);
 
 	if ((max_credit > 0x3fffff) || (max_credit < 0))
 	{
@@ -899,10 +898,10 @@ errno_t pfe_tmu_shp_cfg_set_limits(void *cbus_base_va, pfe_ct_phy_if_id_t phy,
  * @param[in]	min_credit Pointer to memory where minimum credit value shall be written
  * @return		EOK if success, error code otherwise
  */
-errno_t pfe_tmu_shp_cfg_get_limits(void *cbus_base_va, pfe_ct_phy_if_id_t phy,
+errno_t pfe_tmu_shp_cfg_get_limits(addr_t cbus_base_va, pfe_ct_phy_if_id_t phy,
 		uint8_t shp, int32_t *max_credit, int32_t *min_credit)
 {
-	void *shp_base_va = cbus_base_va + TLITE_PHYn_SHPm_BASE_ADDR((uint32_t)phy, shp);
+	addr_t shp_base_va = cbus_base_va + TLITE_PHYn_SHPm_BASE_ADDR((uint32_t)phy, shp);
 
 	*max_credit = (int32_t)hal_read32(shp_base_va + TMU_SHP_MAX_CREDIT) >> 10;
 	*min_credit = -(int32_t)hal_read32(shp_base_va + TMU_SHP_MIN_CREDIT);
@@ -918,9 +917,9 @@ errno_t pfe_tmu_shp_cfg_get_limits(void *cbus_base_va, pfe_ct_phy_if_id_t phy,
  * @param[in]	pos New shaper position
  * @return		EOK if success, error code otherwise
  */
-errno_t pfe_tmu_shp_cfg_set_position(void *cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t shp, uint8_t pos)
+errno_t pfe_tmu_shp_cfg_set_position(addr_t cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t shp, uint8_t pos)
 {
-	void *shp_base_va = cbus_base_va + TLITE_PHYn_SHPm_BASE_ADDR((uint32_t)phy, shp);
+	addr_t shp_base_va = cbus_base_va + TLITE_PHYn_SHPm_BASE_ADDR((uint32_t)phy, shp);
 	uint32_t reg;
 
 	if ((pos >= 16U) && (pos != PFE_TMU_INVALID_POSITION))
@@ -944,9 +943,9 @@ errno_t pfe_tmu_shp_cfg_set_position(void *cbus_base_va, pfe_ct_phy_if_id_t phy,
  * @param[in]	shp Shaper instance/index
  * @return		Shaper position
  */
-uint8_t pfe_tmu_shp_cfg_get_position(void *cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t shp)
+uint8_t pfe_tmu_shp_cfg_get_position(addr_t cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t shp)
 {
-	void *shp_base_va = cbus_base_va + TLITE_PHYn_SHPm_BASE_ADDR((uint32_t)phy, shp);
+	addr_t shp_base_va = cbus_base_va + TLITE_PHYn_SHPm_BASE_ADDR((uint32_t)phy, shp);
 	return (uint8_t)((hal_read32(shp_base_va + TMU_SHP_CTRL2) >> 1U) & 0x1fU);
 }
 
@@ -956,10 +955,10 @@ uint8_t pfe_tmu_shp_cfg_get_position(void *cbus_base_va, pfe_ct_phy_if_id_t phy,
  * @param[in]	phy The physical interface
  * @param[in]	shp Shaper instance/index
  */
-errno_t pfe_tmu_shp_cfg_enable(void *cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t shp)
+errno_t pfe_tmu_shp_cfg_enable(addr_t cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t shp)
 {
 	uint32_t reg;
-	void *shp_base_va = cbus_base_va + TLITE_PHYn_SHPm_BASE_ADDR((uint32_t)phy, shp);
+	addr_t shp_base_va = cbus_base_va + TLITE_PHYn_SHPm_BASE_ADDR((uint32_t)phy, shp);
 
 	/*	Enable the shaper */
 	reg = hal_read32(shp_base_va + TMU_SHP_CTRL) | 0x1U;
@@ -976,11 +975,11 @@ errno_t pfe_tmu_shp_cfg_enable(void *cbus_base_va, pfe_ct_phy_if_id_t phy, uint8
  * @param[in]	mode Shaper mode
  * @return		EOK if success, error code otherwise
  */
-errno_t pfe_tmu_shp_cfg_set_rate_mode(void *cbus_base_va,
+errno_t pfe_tmu_shp_cfg_set_rate_mode(addr_t cbus_base_va,
 		pfe_ct_phy_if_id_t phy, uint8_t shp, pfe_tmu_rate_mode_t mode)
 {
 	uint32_t reg;
-	void *shp_base_va = cbus_base_va + TLITE_PHYn_SHPm_BASE_ADDR((uint32_t)phy, shp);
+	addr_t shp_base_va = cbus_base_va + TLITE_PHYn_SHPm_BASE_ADDR((uint32_t)phy, shp);
 
 	reg = hal_read32(shp_base_va + TMU_SHP_CTRL2);
 	if (mode == RATE_MODE_DATA_RATE)
@@ -1007,11 +1006,11 @@ errno_t pfe_tmu_shp_cfg_set_rate_mode(void *cbus_base_va,
  * @param[in]	shp The shaper ID
  * @return		Shaper rate mode
  */
-pfe_tmu_rate_mode_t pfe_tmu_shp_cfg_get_rate_mode(void *cbus_base_va,
+pfe_tmu_rate_mode_t pfe_tmu_shp_cfg_get_rate_mode(addr_t cbus_base_va,
 		pfe_ct_phy_if_id_t phy, uint8_t shp)
 {
 	uint32_t reg;
-	void *shp_base_va = cbus_base_va + TLITE_PHYn_SHPm_BASE_ADDR((uint32_t)phy, shp);
+	addr_t shp_base_va = cbus_base_va + TLITE_PHYn_SHPm_BASE_ADDR((uint32_t)phy, shp);
 
 	reg = hal_read32(shp_base_va + TMU_SHP_CTRL);
 	if (0U == (reg & 0x1U))
@@ -1039,18 +1038,18 @@ pfe_tmu_rate_mode_t pfe_tmu_shp_cfg_get_rate_mode(void *cbus_base_va,
  * @param[in]	isl Idle slope in units per second as given by chosen mode
  *					(bits-per-second, packets-per-second)
  */
-errno_t pfe_tmu_shp_cfg_set_idle_slope(void *cbus_base_va,
+errno_t pfe_tmu_shp_cfg_set_idle_slope(addr_t cbus_base_va,
 		pfe_ct_phy_if_id_t phy, uint8_t shp, uint32_t isl)
 {
 	uint32_t reg;
 	errno_t ret = EOK;
 	uint64_t wgt;
-	uint32_t sys_clk_hz;
-	void *shp_base_va = cbus_base_va + TLITE_PHYn_SHPm_BASE_ADDR((uint32_t)phy, shp);
+	uint64_t sys_clk_hz;
+	addr_t shp_base_va = cbus_base_va + TLITE_PHYn_SHPm_BASE_ADDR((uint32_t)phy, shp);
 
 	reg = hal_read32(cbus_base_va + CBUS_GLOBAL_CSR_BASE_ADDR + WSP_CLK_FRQ);
-	sys_clk_hz = (reg & 0xffffU) * 1000000U;
-	NXP_LOG_INFO("Using PFE sys_clk value %dHz\n", sys_clk_hz);
+	sys_clk_hz = (reg & 0xffffULL) * 1000000ULL;
+	NXP_LOG_INFO("Using PFE sys_clk value %"PRINT64"uHz\n", sys_clk_hz);
 
 	/*	Set weight (added to credit counter with each sys_clk_hz/clk_div tick) */
 	switch (pfe_tmu_shp_cfg_get_rate_mode(cbus_base_va, phy, shp))
@@ -1058,14 +1057,14 @@ errno_t pfe_tmu_shp_cfg_set_idle_slope(void *cbus_base_va,
 		case RATE_MODE_DATA_RATE:
 		{
 			/*	ISL is bps, WGT is [bytes-per-tick] */
-			wgt = ((uint64_t)isl * (uint64_t)CLK_DIV * (1ULL << 12)) / (8ULL * (uint64_t)sys_clk_hz);
+			wgt = ((uint64_t)isl * CLK_DIV * (1ULL << 12)) / (8ULL * sys_clk_hz);
 			break;
 		}
 
 		case RATE_MODE_PACKET_RATE:
 		{
 			/*	ISL is pps, WGT is [packets-per-tick] */
-			wgt = ((uint64_t)isl * (uint64_t)CLK_DIV * (1ULL << 12)) / ((uint64_t)sys_clk_hz);
+			wgt = ((uint64_t)isl * CLK_DIV * (1ULL << 12)) / (sys_clk_hz);
 			break;
 		}
 
@@ -1084,14 +1083,14 @@ errno_t pfe_tmu_shp_cfg_set_idle_slope(void *cbus_base_va,
 		}
 
 		hal_write32(wgt & 0xfffffU, shp_base_va + TMU_SHP_WGHT);
-		NXP_LOG_INFO("Shaper weight set to %d.%d\n",
-			(uint32_t)((wgt >> 12) & 0xffU), (uint32_t)(wgt & 0xfffU));
+		NXP_LOG_INFO("Shaper weight set to %u.%u\n",
+			(uint_t)((wgt >> 12) & 0xffU), (uint_t)(wgt & 0xfffU));
 
 		/*	Set clk_div */
 		reg = hal_read32(shp_base_va + TMU_SHP_CTRL);
 		reg &= 0x1U;
 		hal_write32(reg | (CLK_DIV_LOG2 << 1), shp_base_va + TMU_SHP_CTRL);
-		NXP_LOG_INFO("Shaper tick is %dHz\n", sys_clk_hz / CLK_DIV);
+		NXP_LOG_INFO("Shaper tick is %"PRINT64"uHz\n", sys_clk_hz / CLK_DIV);
 	}
 
 	return ret;
@@ -1104,18 +1103,18 @@ errno_t pfe_tmu_shp_cfg_set_idle_slope(void *cbus_base_va,
  * @param[in]	shp The shaper ID
  * @return		Current idle slope value
  */
-uint32_t pfe_tmu_shp_cfg_get_idle_slope(void *cbus_base_va,
+uint32_t pfe_tmu_shp_cfg_get_idle_slope(addr_t cbus_base_va,
 		pfe_ct_phy_if_id_t phy, uint8_t shp)
 {
-	uint32_t sys_clk_hz;
+	uint64_t sys_clk_hz;
 	uint32_t wgt, reg;
 	uint64_t isl;
-	void *shp_base_va = cbus_base_va + TLITE_PHYn_SHPm_BASE_ADDR((uint32_t)phy, shp);
+	addr_t shp_base_va = cbus_base_va + TLITE_PHYn_SHPm_BASE_ADDR((uint32_t)phy, shp);
 
 	reg = hal_read32(cbus_base_va + CBUS_GLOBAL_CSR_BASE_ADDR + WSP_CLK_FRQ);
-	sys_clk_hz = (reg & 0xffffU) * 1000000U;
+	sys_clk_hz = (reg & 0xffffULL) * 1000000ULL;
 	wgt = hal_read32(shp_base_va + TMU_SHP_WGHT) & 0xfffffU;
-	isl = ((uint64_t)wgt * 8ULL * (uint64_t)sys_clk_hz) / ((uint64_t)CLK_DIV * (1ULL << 12));
+	isl = ((uint64_t)wgt * 8ULL * sys_clk_hz) / (CLK_DIV * (1ULL << 12));
 
 	return (uint32_t)isl;
 }
@@ -1128,9 +1127,9 @@ uint32_t pfe_tmu_shp_cfg_get_idle_slope(void *cbus_base_va,
  * @param[in]	phy The physical interface
  * @param[in]	shp Shaper instance/index
  */
-void pfe_tmu_shp_cfg_disable(void *cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t shp)
+void pfe_tmu_shp_cfg_disable(addr_t cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t shp)
 {
-	void *shp_base_va = cbus_base_va + TLITE_PHYn_SHPm_BASE_ADDR((uint32_t)phy, shp);
+	addr_t shp_base_va = cbus_base_va + TLITE_PHYn_SHPm_BASE_ADDR((uint32_t)phy, shp);
 
 	uint32_t reg = hal_read32(shp_base_va + TMU_SHP_CTRL) & ~(uint32_t)0x1U;
 	hal_write32(reg, shp_base_va + TMU_SHP_CTRL);
@@ -1144,9 +1143,9 @@ void pfe_tmu_shp_cfg_disable(void *cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t
  * @param[in]	phy The physical interface
  * @param[in]	shp Shaper instance/index
  */
-void pfe_tmu_shp_cfg_init(void *cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t shp)
+void pfe_tmu_shp_cfg_init(addr_t cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t shp)
 {
-	void *shp_base_va = cbus_base_va + TLITE_PHYn_SHPm_BASE_ADDR((uint32_t)phy, shp);
+	addr_t shp_base_va = cbus_base_va + TLITE_PHYn_SHPm_BASE_ADDR((uint32_t)phy, shp);
 
 	/*	Disable */
 	pfe_tmu_shp_cfg_disable(cbus_base_va, phy, shp);
@@ -1167,9 +1166,9 @@ void pfe_tmu_shp_cfg_init(void *cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t sh
  * @param[in]	phy The physical interface
  * @param[in]	sch Scheduler instance/index
  */
-void pfe_tmu_sch_cfg_init(void *cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t sch)
+void pfe_tmu_sch_cfg_init(addr_t cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t sch)
 {
-	void *sch_base_va = cbus_base_va + TLITE_PHYn_SCHEDm_BASE_ADDR((uint32_t)phy, sch);
+	addr_t sch_base_va = cbus_base_va + TLITE_PHYn_SCHEDm_BASE_ADDR((uint32_t)phy, sch);
 
 	hal_write32(0xffffffffU, sch_base_va + TMU_SCH_Q_ALLOC0);
 	hal_write32(0xffffffffU, sch_base_va + TMU_SCH_Q_ALLOC1);
@@ -1188,11 +1187,11 @@ void pfe_tmu_sch_cfg_init(void *cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t sc
  * @param[in]	mode The rate mode to be used by scheduler
  * @return		EOK if success, error code otherwise
  */
-errno_t pfe_tmu_sch_cfg_set_rate_mode(void *cbus_base_va, pfe_ct_phy_if_id_t phy,
+errno_t pfe_tmu_sch_cfg_set_rate_mode(addr_t cbus_base_va, pfe_ct_phy_if_id_t phy,
 		uint8_t sch, pfe_tmu_rate_mode_t mode)
 {
 	uint32_t reg;
-	void *sch_base_va = cbus_base_va + TLITE_PHYn_SCHEDm_BASE_ADDR((uint32_t)phy, sch);
+	addr_t sch_base_va = cbus_base_va + TLITE_PHYn_SCHEDm_BASE_ADDR((uint32_t)phy, sch);
 
 	if (mode == RATE_MODE_DATA_RATE)
 	{
@@ -1219,11 +1218,11 @@ errno_t pfe_tmu_sch_cfg_set_rate_mode(void *cbus_base_va, pfe_ct_phy_if_id_t phy
  * @param[in]	sch Scheduler instance/index
  * @return		Current rate mode or RATE_MODE_INVALID in case of error
  */
-pfe_tmu_rate_mode_t pfe_tmu_sch_cfg_get_rate_mode(void *cbus_base_va,
+pfe_tmu_rate_mode_t pfe_tmu_sch_cfg_get_rate_mode(addr_t cbus_base_va,
 		pfe_ct_phy_if_id_t phy, uint8_t sch)
 {
 	uint32_t reg;
-	void *sch_base_va = cbus_base_va + TLITE_PHYn_SCHEDm_BASE_ADDR((uint32_t)phy, sch);
+	addr_t sch_base_va = cbus_base_va + TLITE_PHYn_SCHEDm_BASE_ADDR((uint32_t)phy, sch);
 	pfe_tmu_rate_mode_t rmode = RATE_MODE_INVALID;
 
 	reg = hal_read32(sch_base_va + TMU_SCH_BIT_RATE);
@@ -1252,11 +1251,11 @@ pfe_tmu_rate_mode_t pfe_tmu_sch_cfg_get_rate_mode(void *cbus_base_va,
  * @param[in]	algo The algorithm to be used
  * @return		EOK if success, error code otherwise
  */
-errno_t pfe_tmu_sch_cfg_set_algo(void *cbus_base_va,
+errno_t pfe_tmu_sch_cfg_set_algo(addr_t cbus_base_va,
 		pfe_ct_phy_if_id_t phy, uint8_t sch, pfe_tmu_sched_algo_t algo)
 {
 	uint32_t reg;
-	void *sch_base_va = cbus_base_va + TLITE_PHYn_SCHEDm_BASE_ADDR((uint32_t)phy, sch);
+	addr_t sch_base_va = cbus_base_va + TLITE_PHYn_SCHEDm_BASE_ADDR((uint32_t)phy, sch);
 
 	if (algo == SCHED_ALGO_PQ)
 	{
@@ -1301,11 +1300,11 @@ errno_t pfe_tmu_sch_cfg_set_algo(void *cbus_base_va,
  * @param[in]	algo The algorithm to be used
  * @return		EOK if success, error code otherwise
  */
-pfe_tmu_sched_algo_t pfe_tmu_sch_cfg_get_algo(void *cbus_base_va,
+pfe_tmu_sched_algo_t pfe_tmu_sch_cfg_get_algo(addr_t cbus_base_va,
 		pfe_ct_phy_if_id_t phy, uint8_t sch)
 {
 	uint32_t reg;
-	void *sch_base_va = cbus_base_va + TLITE_PHYn_SCHEDm_BASE_ADDR((uint32_t)phy, sch);
+	addr_t sch_base_va = cbus_base_va + TLITE_PHYn_SCHEDm_BASE_ADDR((uint32_t)phy, sch);
 	pfe_tmu_sched_algo_t algo = SCHED_ALGO_INVALID;
 
 	reg = hal_read32(sch_base_va + TMU_SCH_CTRL);
@@ -1355,10 +1354,10 @@ pfe_tmu_sched_algo_t pfe_tmu_sch_cfg_get_algo(void *cbus_base_va,
  * @param[in]	weight The weight value to be used by chosen scheduling algorithm
  * @return		EOK if success, error code otherwise
  */
-errno_t pfe_tmu_sch_cfg_set_input_weight(void *cbus_base_va,
+errno_t pfe_tmu_sch_cfg_set_input_weight(addr_t cbus_base_va,
 		pfe_ct_phy_if_id_t phy, uint8_t sch, uint8_t input, uint32_t weight)
 {
-	void *sch_base_va = cbus_base_va + TLITE_PHYn_SCHEDm_BASE_ADDR((uint32_t)phy, sch);
+	addr_t sch_base_va = cbus_base_va + TLITE_PHYn_SCHEDm_BASE_ADDR((uint32_t)phy, sch);
 
 	if (input >= TLITE_SCH_INPUTS_CNT)
 	{
@@ -1379,9 +1378,9 @@ errno_t pfe_tmu_sch_cfg_set_input_weight(void *cbus_base_va,
  * @param[in]	input Scheduler input
  * @return		The programmed weight value to be used by chosen scheduling algorithm
  */
-uint32_t pfe_tmu_sch_cfg_get_input_weight(void *cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t sch, uint8_t input)
+uint32_t pfe_tmu_sch_cfg_get_input_weight(addr_t cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t sch, uint8_t input)
 {
-	void *sch_base_va = cbus_base_va + TLITE_PHYn_SCHEDm_BASE_ADDR((uint32_t)phy, sch);
+	addr_t sch_base_va = cbus_base_va + TLITE_PHYn_SCHEDm_BASE_ADDR((uint32_t)phy, sch);
 
 	if (input >= TLITE_SCH_INPUTS_CNT)
 	{
@@ -1402,11 +1401,11 @@ uint32_t pfe_tmu_sch_cfg_get_input_weight(void *cbus_base_va, pfe_ct_phy_if_id_t
  * 					the input.
  * @return		EOK if success, error code otherwise
  */
-errno_t pfe_tmu_sch_cfg_bind_queue(void *cbus_base_va,
+errno_t pfe_tmu_sch_cfg_bind_queue(addr_t cbus_base_va,
 		pfe_ct_phy_if_id_t phy, uint8_t sch, uint8_t input, uint8_t queue)
 {
 	uint32_t reg;
-	void *sch_base_va = cbus_base_va + TLITE_PHYn_SCHEDm_BASE_ADDR((uint32_t)phy, sch);
+	addr_t sch_base_va = cbus_base_va + TLITE_PHYn_SCHEDm_BASE_ADDR((uint32_t)phy, sch);
 
 	if ((queue >= TLITE_PHY_QUEUES_CNT) && (queue != TLITE_SCH_INVALID_INPUT))
 	{
@@ -1437,10 +1436,10 @@ errno_t pfe_tmu_sch_cfg_bind_queue(void *cbus_base_va,
  * @param[in]	input Scheduler input to be queried
  * @return		Queue ID connected to the input or PFE_TMU_INVALID_QUEUE if not present
  */
-uint8_t pfe_tmu_sch_cfg_get_bound_queue(void *cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t sch, uint8_t input)
+uint8_t pfe_tmu_sch_cfg_get_bound_queue(addr_t cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t sch, uint8_t input)
 {
 	uint32_t reg;
-	void *sch_base_va = cbus_base_va + TLITE_PHYn_SCHEDm_BASE_ADDR((uint32_t)phy, sch);
+	addr_t sch_base_va = cbus_base_va + TLITE_PHYn_SCHEDm_BASE_ADDR((uint32_t)phy, sch);
 	uint8_t queue;
 
 	if (input >= TLITE_SCH_INPUTS_CNT)
@@ -1464,9 +1463,9 @@ uint8_t pfe_tmu_sch_cfg_get_bound_queue(void *cbus_base_va, pfe_ct_phy_if_id_t p
  * @param[in]	input The 'dst_sch' scheduler input where the output of 'src_sch' shall be connected
  * @return		EOK if success, error code otherwise
  */
-errno_t pfe_tmu_sch_cfg_bind_sched_output(void *cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t src_sch, uint8_t dst_sch, uint8_t input)
+errno_t pfe_tmu_sch_cfg_bind_sched_output(addr_t cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t src_sch, uint8_t dst_sch, uint8_t input)
 {
-	void *sch_base_va = cbus_base_va + TLITE_PHYn_SCHEDm_BASE_ADDR((uint32_t)phy, src_sch);
+	addr_t sch_base_va = cbus_base_va + TLITE_PHYn_SCHEDm_BASE_ADDR((uint32_t)phy, src_sch);
 
 	/*	Scheduler0 -> Scheduler1 is the only possible option */
 	if ((src_sch != 0U) || (dst_sch != 1U))
@@ -1495,9 +1494,9 @@ errno_t pfe_tmu_sch_cfg_bind_sched_output(void *cbus_base_va, pfe_ct_phy_if_id_t
  * @param[in]	input Scheduler input to be queried
  * @return		ID of the connected scheduler or PFE_TMU_INVALID_SCHEDULER
  */
-uint8_t pfe_tmu_sch_cfg_get_bound_sched_output(void *cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t sch, uint8_t input)
+uint8_t pfe_tmu_sch_cfg_get_bound_sched_output(addr_t cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t sch, uint8_t input)
 {
-	void *sch_base_va = cbus_base_va + TLITE_PHYn_SCHEDm_BASE_ADDR((uint32_t)phy, sch);
+	addr_t sch_base_va = cbus_base_va + TLITE_PHYn_SCHEDm_BASE_ADDR((uint32_t)phy, sch);
 	uint32_t reg;
 
 	/*	Scheduler0 -> Scheduler1 is the only possible option */
@@ -1529,13 +1528,13 @@ uint8_t pfe_tmu_sch_cfg_get_bound_sched_output(void *cbus_base_va, pfe_ct_phy_if
  *
  * @return		Number of bytes written to the buffer
  */
-uint32_t pfe_tmu_cfg_get_text_stat(void *base_va, char_t *buf, uint32_t size, uint8_t verb_level)
+uint32_t pfe_tmu_cfg_get_text_stat(addr_t base_va, char_t *buf, uint32_t size, uint8_t verb_level)
 {
 	uint32_t len = 0U;
 	uint32_t reg, ii;
 	uint8_t prob, queue, zone;
 	uint32_t level, drops, tx;
-	pfe_ct_phy_if_id_t phy_if_id_temp[TLITE_PHYS_CNT] = {PFE_PHY_IF_ID_EMAC0, PFE_PHY_IF_ID_EMAC1, PFE_PHY_IF_ID_EMAC2, PFE_PHY_IF_ID_HIF, PFE_PHY_IF_ID_HIF_NOCPY, PFE_PHY_IF_ID_UTIL};
+	const pfe_ct_phy_if_id_t phy_if_id_temp[TLITE_PHYS_CNT] = {PFE_PHY_IF_ID_EMAC0, PFE_PHY_IF_ID_EMAC1, PFE_PHY_IF_ID_EMAC2, PFE_PHY_IF_ID_HIF, PFE_PHY_IF_ID_HIF_NOCPY, PFE_PHY_IF_ID_UTIL};
 
 	/* Debug registers */
 	if(verb_level >= 10U)
diff --git a/sw/pfe_platform/hw/s32g/pfe_tmu_csr.h b/sw/pfe_platform/hw/s32g/pfe_tmu_csr.h
index 0b8889f..c0cde16 100644
--- a/sw/pfe_platform/hw/s32g/pfe_tmu_csr.h
+++ b/sw/pfe_platform/hw/s32g/pfe_tmu_csr.h
@@ -1,7 +1,7 @@
 /* =========================================================================
  *  
  *  Copyright (c) 2019 Imagination Technologies Limited
- *  Copyright 2018-2020 NXP
+ *  Copyright 2018-2021 NXP
  *
  *  SPDX-License-Identifier: GPL-2.0
  *
@@ -209,48 +209,48 @@ struct pfe_tmu_phy_cfg_tag
 	uint8_t shp_cnt;
 };
 
-const pfe_tmu_phy_cfg_t *const pfe_tmu_cfg_get_phy_config(pfe_ct_phy_if_id_t phy);
+const pfe_tmu_phy_cfg_t* pfe_tmu_cfg_get_phy_config(pfe_ct_phy_if_id_t phy);
 
-errno_t pfe_tmu_q_cfg_get_fill_level(void *cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t queue, uint32_t *level);
-errno_t pfe_tmu_q_cfg_get_drop_count(void *cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t queue, uint32_t *cnt);
-errno_t pfe_tmu_q_cfg_get_tx_count(void *cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t queue, uint32_t *cnt);
-pfe_tmu_queue_mode_t pfe_tmu_q_get_mode(void *cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t queue, uint32_t *min, uint32_t *max);
-errno_t pfe_tmu_q_mode_set_default(void *cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t queue);
-errno_t pfe_tmu_q_mode_set_tail_drop(void *cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t queue, uint16_t max);
-errno_t pfe_tmu_q_mode_set_wred(void *cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t queue, uint16_t min, uint16_t max);
-errno_t pfe_tmu_q_set_wred_probability(void *cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t queue, uint8_t zone, uint8_t prob);
-errno_t pfe_tmu_q_get_wred_probability(void *cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t queue, uint8_t zone, uint8_t *prob);
-uint8_t pfe_tmu_q_get_wred_zones(void *cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t queue);
+errno_t pfe_tmu_q_cfg_get_fill_level(addr_t cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t queue, uint32_t *level);
+errno_t pfe_tmu_q_cfg_get_drop_count(addr_t cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t queue, uint32_t *cnt);
+errno_t pfe_tmu_q_cfg_get_tx_count(addr_t cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t queue, uint32_t *cnt);
+pfe_tmu_queue_mode_t pfe_tmu_q_get_mode(addr_t cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t queue, uint32_t *min, uint32_t *max);
+errno_t pfe_tmu_q_mode_set_default(addr_t cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t queue);
+errno_t pfe_tmu_q_mode_set_tail_drop(addr_t cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t queue, uint16_t max);
+errno_t pfe_tmu_q_mode_set_wred(addr_t cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t queue, uint16_t min, uint16_t max);
+errno_t pfe_tmu_q_set_wred_probability(addr_t cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t queue, uint8_t zone, uint8_t prob);
+errno_t pfe_tmu_q_get_wred_probability(addr_t cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t queue, uint8_t zone, uint8_t *prob);
+uint8_t pfe_tmu_q_get_wred_zones(addr_t cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t queue);
 
-void pfe_tmu_shp_cfg_init(void *cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t shp);
-errno_t pfe_tmu_shp_cfg_enable(void *cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t shp);
-errno_t pfe_tmu_shp_cfg_set_rate_mode(void *cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t shp, pfe_tmu_rate_mode_t mode);
-pfe_tmu_rate_mode_t pfe_tmu_shp_cfg_get_rate_mode(void *cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t shp);
-errno_t pfe_tmu_shp_cfg_set_idle_slope(void *cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t shp, uint32_t isl);
-uint32_t pfe_tmu_shp_cfg_get_idle_slope(void *cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t shp);
-errno_t pfe_tmu_shp_cfg_set_limits(void *cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t shp, int32_t max_credit, int32_t min_credit);
-errno_t pfe_tmu_shp_cfg_get_limits(void *cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t shp, int32_t *max_credit, int32_t *min_credit);
-errno_t pfe_tmu_shp_cfg_set_position(void *cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t shp, uint8_t pos);
-uint8_t pfe_tmu_shp_cfg_get_position(void *cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t shp);
-void pfe_tmu_shp_cfg_disable(void *cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t shp);
+void pfe_tmu_shp_cfg_init(addr_t cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t shp);
+errno_t pfe_tmu_shp_cfg_enable(addr_t cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t shp);
+errno_t pfe_tmu_shp_cfg_set_rate_mode(addr_t cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t shp, pfe_tmu_rate_mode_t mode);
+pfe_tmu_rate_mode_t pfe_tmu_shp_cfg_get_rate_mode(addr_t cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t shp);
+errno_t pfe_tmu_shp_cfg_set_idle_slope(addr_t cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t shp, uint32_t isl);
+uint32_t pfe_tmu_shp_cfg_get_idle_slope(addr_t cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t shp);
+errno_t pfe_tmu_shp_cfg_set_limits(addr_t cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t shp, int32_t max_credit, int32_t min_credit);
+errno_t pfe_tmu_shp_cfg_get_limits(addr_t cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t shp, int32_t *max_credit, int32_t *min_credit);
+errno_t pfe_tmu_shp_cfg_set_position(addr_t cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t shp, uint8_t pos);
+uint8_t pfe_tmu_shp_cfg_get_position(addr_t cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t shp);
+void pfe_tmu_shp_cfg_disable(addr_t cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t shp);
 
-void pfe_tmu_sch_cfg_init(void *cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t sch);
-errno_t pfe_tmu_sch_cfg_set_rate_mode(void *cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t sch, pfe_tmu_rate_mode_t mode);
-pfe_tmu_rate_mode_t pfe_tmu_sch_cfg_get_rate_mode(void *cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t sch);
-errno_t pfe_tmu_sch_cfg_set_algo(void *cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t sch, pfe_tmu_sched_algo_t algo);
-pfe_tmu_sched_algo_t pfe_tmu_sch_cfg_get_algo(void *cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t sch);
-errno_t pfe_tmu_sch_cfg_set_input_weight(void *cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t sch, uint8_t input, uint32_t weight);
-uint32_t pfe_tmu_sch_cfg_get_input_weight(void *cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t sch, uint8_t input);
-errno_t pfe_tmu_sch_cfg_bind_sched_output(void *cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t src_sch, uint8_t dst_sch, uint8_t input);
-uint8_t pfe_tmu_sch_cfg_get_bound_sched_output(void *cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t sch, uint8_t input);
-errno_t pfe_tmu_sch_cfg_bind_queue(void *cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t sch, uint8_t input, uint8_t queue);
-uint8_t pfe_tmu_sch_cfg_get_bound_queue(void *cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t sch, uint8_t input);
+void pfe_tmu_sch_cfg_init(addr_t cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t sch);
+errno_t pfe_tmu_sch_cfg_set_rate_mode(addr_t cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t sch, pfe_tmu_rate_mode_t mode);
+pfe_tmu_rate_mode_t pfe_tmu_sch_cfg_get_rate_mode(addr_t cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t sch);
+errno_t pfe_tmu_sch_cfg_set_algo(addr_t cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t sch, pfe_tmu_sched_algo_t algo);
+pfe_tmu_sched_algo_t pfe_tmu_sch_cfg_get_algo(addr_t cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t sch);
+errno_t pfe_tmu_sch_cfg_set_input_weight(addr_t cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t sch, uint8_t input, uint32_t weight);
+uint32_t pfe_tmu_sch_cfg_get_input_weight(addr_t cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t sch, uint8_t input);
+errno_t pfe_tmu_sch_cfg_bind_sched_output(addr_t cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t src_sch, uint8_t dst_sch, uint8_t input);
+uint8_t pfe_tmu_sch_cfg_get_bound_sched_output(addr_t cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t sch, uint8_t input);
+errno_t pfe_tmu_sch_cfg_bind_queue(addr_t cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t sch, uint8_t input, uint8_t queue);
+uint8_t pfe_tmu_sch_cfg_get_bound_queue(addr_t cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t sch, uint8_t input);
 
-errno_t pfe_tmu_cfg_init(void *cbus_base_va, pfe_tmu_cfg_t *cfg);
-void pfe_tmu_cfg_reset(void *cbus_base_va);
-void pfe_tmu_cfg_enable(void *cbus_base_va);
-void pfe_tmu_cfg_disable(void *cbus_base_va);
-void pfe_tmu_cfg_send_pkt(void *cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t queue, void *buf_pa, uint16_t len);
-uint32_t pfe_tmu_cfg_get_text_stat(void *base_va, char_t *buf, uint32_t size, uint8_t verb_level);
+errno_t pfe_tmu_cfg_init(addr_t cbus_base_va, const pfe_tmu_cfg_t *cfg);
+void pfe_tmu_cfg_reset(addr_t cbus_base_va);
+void pfe_tmu_cfg_enable(addr_t cbus_base_va);
+void pfe_tmu_cfg_disable(addr_t cbus_base_va);
+void pfe_tmu_cfg_send_pkt(addr_t cbus_base_va, pfe_ct_phy_if_id_t phy, uint8_t queue, const void *buf_pa, uint16_t len);
+uint32_t pfe_tmu_cfg_get_text_stat(addr_t base_va, char_t *buf, uint32_t size, uint8_t verb_level);
 
 #endif /* TMU_CSR_H_ */
diff --git a/sw/pfe_platform/hw/s32g/pfe_util_csr.c b/sw/pfe_platform/hw/s32g/pfe_util_csr.c
index be26bf1..006547e 100644
--- a/sw/pfe_platform/hw/s32g/pfe_util_csr.c
+++ b/sw/pfe_platform/hw/s32g/pfe_util_csr.c
@@ -1,7 +1,7 @@
 /* =========================================================================
  *  
  *  Copyright (c) 2019 Imagination Technologies Limited
- *  Copyright 2018-2020 NXP
+ *  Copyright 2018-2021 NXP
  *
  *  SPDX-License-Identifier: GPL-2.0
  *
@@ -29,12 +29,12 @@
  * @param[in]	verb_level 	Verbosity level
  * @return		Number of bytes written to the buffer
  */
-uint32_t pfe_util_cfg_get_text_stat(void *base_va, char_t *buf, uint32_t size, uint8_t verb_level)
+uint32_t pfe_util_cfg_get_text_stat(addr_t base_va, char_t *buf, uint32_t size, uint8_t verb_level)
 {
 	uint32_t len = 0U, reg;
 
 #if defined(PFE_CFG_NULL_ARG_CHECK)
-	if (unlikely(NULL == base_va))
+	if (unlikely(NULL_ADDR == base_va))
 	{
 		NXP_LOG_ERROR("NULL argument received\n");
 		return 0U;
diff --git a/sw/pfe_platform/hw/s32g/pfe_util_csr.h b/sw/pfe_platform/hw/s32g/pfe_util_csr.h
index 706070b..8cb77e3 100644
--- a/sw/pfe_platform/hw/s32g/pfe_util_csr.h
+++ b/sw/pfe_platform/hw/s32g/pfe_util_csr.h
@@ -2,7 +2,7 @@
  *  
  *  Copyright (c) 2019 Imagination Technologies Limited
  *  Copyright 2015-2016 Freescale Semiconductor, Inc.
- *  Copyright 2017-2020 NXP
+ *  Copyright 2017-2021 NXP
  *
  *  SPDX-License-Identifier: GPL-2.0
  *
@@ -59,6 +59,6 @@
 #define UTIL_PE_IBUS_DMEM_BASE(i)	((((i) & 0x3) << 20U) | UTIL_PE_IBUS_ACCESS_DMEM)
 #define UTIL_PE_IBUS_PMEM_BASE(i)	((((i) & 0x3) << 20U) | UTIL_PE_IBUS_ACCESS_PMEM)
 
-uint32_t pfe_util_cfg_get_text_stat(void *base_va, char_t *buf, uint32_t size, uint8_t verb_level);
+uint32_t pfe_util_cfg_get_text_stat(addr_t base_va, char_t *buf, uint32_t size, uint8_t verb_level);
 
 #endif /* UTIL_CSR_H_ */
diff --git a/sw/pfe_platform/hw/s32g/pfe_wdt_csr.c b/sw/pfe_platform/hw/s32g/pfe_wdt_csr.c
index 0447b50..5f3fc4b 100644
--- a/sw/pfe_platform/hw/s32g/pfe_wdt_csr.c
+++ b/sw/pfe_platform/hw/s32g/pfe_wdt_csr.c
@@ -1,7 +1,7 @@
 /* =========================================================================
  *  
  *  Copyright (c) 2019 Imagination Technologies Limited
- *  Copyright 2020 NXP
+ *  Copyright 2020-2021 NXP
  *
  *  SPDX-License-Identifier: GPL-2.0
  *
@@ -19,6 +19,8 @@
 #error Unsupported IP version
 #endif /* PFE_CFG_IP_VERSION */
 
+#define WDT_INT_SRC_NUMBER 11U
+
 /**
  * @brief		WDT ISR
  * @details		MASK, ACK, and process triggered interrupts.
@@ -29,10 +31,32 @@
  * @return		EOK if interrupt has been handled, error code otherwise
  * @note		Make sure the call is protected by some per-BMU mutex
  */
-errno_t pfe_wdt_cfg_isr(void *base_va, void *cbus_base_va)
+errno_t pfe_wdt_cfg_isr(addr_t base_va, addr_t cbus_base_va)
 {
+	uint8_t index = 0U;
 	uint32_t reg_en, reg_src, reg_reen = 0U;
 	errno_t ret = ENOENT;
+	const uint32_t wdt_int_src_arr[WDT_INT_SRC_NUMBER] = 
+	{
+		WDT_BMU1_WDT_INT, WDT_BMU2_WDT_INT, WDT_CLASS_WDT_INT, WDT_EMAC0_GPI_WDT_INT, 
+		WDT_EMAC1_GPI_WDT_INT, WDT_EMAC2_GPI_WDT_INT, WDT_HIF_GPI_WDT_INT,
+		WDT_HIF_NOCPY_WDT_INT, WDT_HIF_WDT_INT, WDT_TLITE_WDT_INT, WDT_UTIL_WDT_INT
+	};
+	const uint32_t wdt_int_en_arr[WDT_INT_SRC_NUMBER]  = 
+	{
+		WDT_BMU1_WDT_INT_EN_BIT, WDT_BMU2_WDT_INT_EN_BIT, WDT_CLASS_WDT_INT_EN_BIT, 
+		WDT_EMAC0_GPI_WDT_INT_EN_BIT, WDT_EMAC1_GPI_WDT_INT_EN_BIT, WDT_EMAC2_GPI_WDT_INT_EN_BIT, 
+		WDT_HIF_GPI_WDT_INT_EN_BIT, WDT_HIF_NOCPY_WDT_INT_EN_BIT, WDT_HIF_WDT_INT_EN_BIT, 
+		WDT_TLITE_WDT_INT_EN_BIT, WDT_UTIL_PE_WDT_INT_EN_BIT
+	};
+#ifdef NXP_LOG_ENABLED
+	const char_t * const wdt_int_src_text[WDT_INT_SRC_NUMBER] = 
+	{
+		"WDT_BMU1_WDT_INT", "WDT_BMU2_WDT_INT", "WDT_CLASS_WDT_INT", "WDT_EMAC0_GPI_WDT_INT", 
+		"WDT_EMAC1_GPI_WDT_INT", "WDT_EMAC2_GPI_WDT_INT", "WDT_HIF_GPI_WDT_INT",
+		"WDT_HIF_NOCPY_WDT_INT", "WDT_HIF_WDT_INT", "WDT_TLITE_WDT_INT", "WDT_UTIL_WDT_INT"
+	};
+#endif /* NXP_LOG_ENABLED */
 
 	(void)cbus_base_va;
 
@@ -46,81 +70,16 @@ errno_t pfe_wdt_cfg_isr(void *base_va, void *cbus_base_va)
 	hal_write32(reg_src, base_va + WDT_INT_SRC);
 
 	/*	Process interrupts which are triggered AND enabled */
-	if (((reg_src & WDT_BMU1_WDT_INT) != 0U) && ((reg_en & WDT_BMU1_WDT_INT_EN_BIT) != 0U))
-	{
-		NXP_LOG_INFO("WDT_BMU1_WDT_INT\n");
-		reg_reen |= WDT_BMU1_WDT_INT_EN_BIT;
-		ret = EOK;
-	}
-
-	if (((reg_src & WDT_BMU2_WDT_INT) != 0U) && ((reg_en & WDT_BMU2_WDT_INT_EN_BIT) != 0U))
-	{
-		NXP_LOG_INFO("WDT_BMU2_WDT_INT\n");
-		reg_reen |= WDT_BMU2_WDT_INT_EN_BIT;
-		ret = EOK;
-	}
-
-	if (((reg_src & WDT_CLASS_WDT_INT) != 0U) && ((reg_en & WDT_CLASS_WDT_INT_EN_BIT) != 0U))
-	{
-		NXP_LOG_INFO("WDT_CLASS_WDT_INT\n");
-		reg_reen |= WDT_CLASS_WDT_INT_EN_BIT;
-		ret = EOK;
-	}
-
-	if (((reg_src & WDT_EMAC0_GPI_WDT_INT) != 0U) && ((reg_en & WDT_EMAC0_GPI_WDT_INT_EN_BIT) != 0U))
-	{
-		NXP_LOG_INFO("WDT_EMAC0_GPI_WDT_INT\n");
-		reg_reen |= WDT_EMAC0_GPI_WDT_INT_EN_BIT;
-		ret = EOK;
-	}
-
-	if (((reg_src & WDT_EMAC1_GPI_WDT_INT) != 0U) && ((reg_en & WDT_EMAC1_GPI_WDT_INT_EN_BIT) != 0U))
-	{
-		NXP_LOG_INFO("WDT_EMAC1_GPI_WDT_INT\n");
-		reg_reen |= WDT_EMAC1_GPI_WDT_INT_EN_BIT;
-		ret = EOK;
-	}
-
-	if (((reg_src & WDT_EMAC2_GPI_WDT_INT) != 0U) && ((reg_en & WDT_EMAC2_GPI_WDT_INT_EN_BIT) != 0U))
-	{
-		NXP_LOG_INFO("WDT_EMAC2_GPI_WDT_INT\n");
-		reg_reen |= WDT_EMAC2_GPI_WDT_INT_EN_BIT;
-		ret = EOK;
-	}
-
-	if (((reg_src & WDT_HIF_GPI_WDT_INT) != 0U) && ((reg_en & WDT_HIF_GPI_WDT_INT_EN_BIT) != 0U))
-	{
-		NXP_LOG_INFO("WDT_HIF_GPI_WDT_INT\n");
-		reg_reen |= WDT_HIF_GPI_WDT_INT_EN_BIT;
-		ret = EOK;
-	}
-
-	if (((reg_src & WDT_HIF_NOCPY_WDT_INT) != 0U) && ((reg_en & WDT_HIF_NOCPY_WDT_INT_EN_BIT) != 0U))
-	{
-		NXP_LOG_INFO("WDT_HIF_NOCPY_WDT_INT\n");
-		reg_reen |= WDT_HIF_NOCPY_WDT_INT_EN_BIT;
-		ret = EOK;
-	}
-
-	if (((reg_src & WDT_HIF_WDT_INT) != 0U) && ((reg_en & WDT_HIF_WDT_INT_EN_BIT) != 0U))
-	{
-		NXP_LOG_INFO("WDT_HIF_WDT_INT\n");
-		reg_reen |= WDT_HIF_WDT_INT_EN_BIT;
-		ret = EOK;
-	}
-
-	if (((reg_src & WDT_TLITE_WDT_INT) != 0U) && ((reg_en & WDT_TLITE_WDT_INT_EN_BIT) != 0U))
-	{
-		NXP_LOG_INFO("WDT_TLITE_WDT_INT\n");
-		reg_reen |= WDT_TLITE_WDT_INT_EN_BIT;
-		ret = EOK;
-	}
-
-	if (((reg_src & WDT_UTIL_WDT_INT) != 0U) && ((reg_en & WDT_UTIL_PE_WDT_INT_EN_BIT) != 0U))
+	for(index = 0U; index < WDT_INT_SRC_NUMBER; index++)
 	{
-		NXP_LOG_INFO("WDT_UTIL_WDT_INT\n");
-		reg_reen |= WDT_UTIL_PE_WDT_INT_EN_BIT;
-		ret = EOK;
+		if (((reg_src & wdt_int_src_arr[index]) != 0U) && ((reg_en & wdt_int_en_arr[index]) != 0U))
+		{
+#ifdef NXP_LOG_ENABLED
+			NXP_LOG_INFO("%s\n", wdt_int_src_text[index]);
+#endif /* NXP_LOG_ENABLED */
+			reg_reen |= wdt_int_en_arr[index];
+			ret = EOK;
+		}
 	}
 
 	/*	Don't re-enable triggered ones since they can't be cleared until PFE
@@ -135,7 +94,7 @@ errno_t pfe_wdt_cfg_isr(void *base_va, void *cbus_base_va)
  * @brief		Mask WDT interrupts
  * @param[in]	base_va Base address of the WDT register space
  */
-void pfe_wdt_cfg_irq_mask(void *base_va)
+void pfe_wdt_cfg_irq_mask(addr_t base_va)
 {
 	uint32_t reg;
 
@@ -147,7 +106,7 @@ void pfe_wdt_cfg_irq_mask(void *base_va)
  * @brief		Unmask WDT interrupts
  * @param[in]	base_va Base address of the WDT register space
  */
-void pfe_wdt_cfg_irq_unmask(void *base_va)
+void pfe_wdt_cfg_irq_unmask(addr_t base_va)
 {
 	uint32_t reg;
 
@@ -159,7 +118,7 @@ void pfe_wdt_cfg_irq_unmask(void *base_va)
  * @brief		init WDT interrupts
  * @param[in]	base_va Base address of the wsp register space
  */
-void pfe_wdt_cfg_init(void *base_va)
+void pfe_wdt_cfg_init(addr_t base_va)
 {
 	uint32_t reg;
 
@@ -199,7 +158,7 @@ void pfe_wdt_cfg_init(void *base_va)
  * @brief		Clear the WDT interrupt control and status registers
  * @param[in]	base_va Base address of HIF register space (virtual)
  */
-void pfe_wdt_cfg_fini(void *base_va)
+void pfe_wdt_cfg_fini(addr_t base_va)
 {
 	uint32_t reg;
 
@@ -219,12 +178,12 @@ void pfe_wdt_cfg_fini(void *base_va)
  * @param[in]	verb_level 	Verbosity level
  * @return		Number of bytes written to the buffer
  */
-uint32_t pfe_wdt_cfg_get_text_stat(void *base_va, char_t *buf, uint32_t size, uint8_t verb_level)
+uint32_t pfe_wdt_cfg_get_text_stat(addr_t base_va, char_t *buf, uint32_t size, uint8_t verb_level)
 {
 	uint32_t len = 0U;
 
 #if defined(GLOBAL_CFG_NULL_ARG_CHECK)
-	if (unlikely(NULL == base_va) || (NULL == char_t))
+	if (unlikely(NULL_ADDR == base_va) || (NULL == char_t))
 	{
 		NXP_LOG_ERROR("NULL argument received (pfe_wdt_cfg_get_text_stat)\n");
 		return 0U;
diff --git a/sw/pfe_platform/hw/s32g/pfe_wdt_csr.h b/sw/pfe_platform/hw/s32g/pfe_wdt_csr.h
index d3f4d70..1d4d102 100644
--- a/sw/pfe_platform/hw/s32g/pfe_wdt_csr.h
+++ b/sw/pfe_platform/hw/s32g/pfe_wdt_csr.h
@@ -1,7 +1,7 @@
 /* =========================================================================
  *  
  *  Copyright (c) 2019 Imagination Technologies Limited
- *  Copyright 2020 NXP
+ *  Copyright 2020-2021 NXP
  *
  *  SPDX-License-Identifier: GPL-2.0
  *
@@ -18,11 +18,11 @@
 #error Unsupported IP version
 #endif /* PFE_CFG_IP_VERSION */
 
-errno_t pfe_wdt_cfg_isr(void *base_va, void *cbus_base_va);
-void pfe_wdt_cfg_irq_mask(void *base_va);
-void pfe_wdt_cfg_irq_unmask(void *base_va);
-void pfe_wdt_cfg_init(void *base_va);
-void pfe_wdt_cfg_fini(void *base_va);
-uint32_t pfe_wdt_cfg_get_text_stat(void *base_va, char_t *buf, uint32_t size, uint8_t verb_level);
+errno_t pfe_wdt_cfg_isr(addr_t base_va, addr_t cbus_base_va);
+void pfe_wdt_cfg_irq_mask(addr_t base_va);
+void pfe_wdt_cfg_irq_unmask(addr_t base_va);
+void pfe_wdt_cfg_init(addr_t base_va);
+void pfe_wdt_cfg_fini(addr_t base_va);
+uint32_t pfe_wdt_cfg_get_text_stat(addr_t base_va, char_t *buf, uint32_t size, uint8_t verb_level);
 
 #endif /* PFE_WDT_CSR_H_ */
diff --git a/sw/pfe_platform/public/pfe_bmu.h b/sw/pfe_platform/public/pfe_bmu.h
index 9d4157a..b0475ef 100644
--- a/sw/pfe_platform/public/pfe_bmu.h
+++ b/sw/pfe_platform/public/pfe_bmu.h
@@ -1,7 +1,7 @@
 /* =========================================================================
  *  
  *  Copyright (c) 2019 Imagination Technologies Limited
- *  Copyright 2018-2020 NXP
+ *  Copyright 2018-2021 NXP
  *
  *  SPDX-License-Identifier: GPL-2.0
  *
@@ -14,8 +14,8 @@ typedef struct pfe_bmu_tag pfe_bmu_t;
 
 typedef struct
 {
-	void *pool_pa;				/*	Buffer pool base (physical, as seen by PFE). Needs to be aligned to buf_cnt * buf_size. */
-	void *pool_va;				/*  Buffer pool base (virtual) */
+	addr_t pool_pa;				/*	Buffer pool base (physical, as seen by PFE). Needs to be aligned to buf_cnt * buf_size. */
+	addr_t pool_va;				/*  Buffer pool base (virtual) */
 	uint32_t max_buf_cnt;		/*	Maximum number of buffers that can be used */
 	uint32_t buf_size;			/*	Buffer size of each of the buffers allocated and freed (size = 2^buf_size) */
 	uint32_t bmu_ucast_thres;
@@ -24,19 +24,19 @@ typedef struct
 	uint32_t buf_mem_loc_cnt;
 } pfe_bmu_cfg_t;
 
-pfe_bmu_t *pfe_bmu_create(void *cbus_base_va, void *bmu_base, pfe_bmu_cfg_t *cfg) __attribute__((cold));
-errno_t pfe_bmu_isr(pfe_bmu_t *bmu) __attribute__((cold));
-void pfe_bmu_irq_mask(pfe_bmu_t *bmu);
-void pfe_bmu_irq_unmask(pfe_bmu_t *bmu);
-void pfe_bmu_enable(pfe_bmu_t *bmu) __attribute__((cold));
-void pfe_bmu_reset(pfe_bmu_t *bmu) __attribute__((cold));
-void pfe_bmu_disable(pfe_bmu_t *bmu) __attribute__((cold));
-void *pfe_bmu_alloc_buf(pfe_bmu_t *bmu) __attribute__((hot));
-void *pfe_bmu_get_va(pfe_bmu_t *bmu, void *pa) __attribute__((hot, pure));
-void *pfe_bmu_get_pa(pfe_bmu_t *bmu, void *va) __attribute__((hot, pure));
-uint32_t pfe_bmu_get_buf_size(pfe_bmu_t *bmu) __attribute__((cold, pure));
-void pfe_bmu_free_buf(pfe_bmu_t *bmu, void *buffer) __attribute__((hot));
-uint32_t pfe_bmu_get_text_statistics(pfe_bmu_t *bmu, char_t *buf, uint32_t buf_len, uint8_t verb_level) __attribute__((cold));
-void pfe_bmu_destroy(pfe_bmu_t *bmu) __attribute__((cold));
+pfe_bmu_t *pfe_bmu_create(addr_t cbus_base_va, addr_t bmu_base, const pfe_bmu_cfg_t *cfg) __attribute__((cold));
+errno_t pfe_bmu_isr(const pfe_bmu_t *bmu) __attribute__((cold));
+void pfe_bmu_irq_mask(const pfe_bmu_t *bmu);
+void pfe_bmu_irq_unmask(const pfe_bmu_t *bmu);
+void pfe_bmu_enable(const pfe_bmu_t *bmu) __attribute__((cold));
+void pfe_bmu_reset(const pfe_bmu_t *bmu) __attribute__((cold));
+void pfe_bmu_disable(const pfe_bmu_t *bmu) __attribute__((cold));
+void *pfe_bmu_alloc_buf(const pfe_bmu_t *bmu) __attribute__((hot));
+void *pfe_bmu_get_va(const pfe_bmu_t *bmu, addr_t pa) __attribute__((hot, pure));
+void *pfe_bmu_get_pa(const pfe_bmu_t *bmu, addr_t va) __attribute__((hot, pure));
+uint32_t pfe_bmu_get_buf_size(const pfe_bmu_t *bmu) __attribute__((cold, pure));
+void pfe_bmu_free_buf(const pfe_bmu_t *bmu, addr_t buffer) __attribute__((hot));
+uint32_t pfe_bmu_get_text_statistics(const pfe_bmu_t *bmu, char_t *buf, uint32_t buf_len, uint8_t verb_level) __attribute__((cold));
+void pfe_bmu_destroy(const pfe_bmu_t *bmu) __attribute__((cold));
 
 #endif /* PUBLIC_PFE_BMU_H_ */
diff --git a/sw/pfe_platform/public/pfe_class.h b/sw/pfe_platform/public/pfe_class.h
index 86e4862..2e56e6e 100644
--- a/sw/pfe_platform/public/pfe_class.h
+++ b/sw/pfe_platform/public/pfe_class.h
@@ -30,36 +30,35 @@ typedef struct
 	uint32_t ddr_size;				/*	Size of the DDR region */
 } pfe_class_cfg_t;
 
-pfe_class_t *pfe_class_create(void *cbus_base_va, uint32_t pe_num, pfe_class_cfg_t *cfg);
-errno_t pfe_class_isr(pfe_class_t *class);
-void pfe_class_irq_mask(pfe_class_t *class);
-void pfe_class_irq_unmask(pfe_class_t *class);
+pfe_class_t *pfe_class_create(addr_t cbus_base_va, uint32_t pe_num, const pfe_class_cfg_t *cfg);
+errno_t pfe_class_isr(const pfe_class_t *class);
+void pfe_class_irq_mask(const pfe_class_t *class);
+void pfe_class_irq_unmask(const pfe_class_t *class);
 void pfe_class_enable(pfe_class_t *class);
 void pfe_class_reset(pfe_class_t *class);
 void pfe_class_disable(pfe_class_t *class);
 errno_t pfe_class_load_firmware(pfe_class_t *class, const void *elf);
 errno_t pfe_class_get_mmap(pfe_class_t *class, int32_t pe_idx, pfe_ct_class_mmap_t *mmap);
-errno_t pfe_class_write_dmem(void *class, int32_t pe_idx, void *dst, void *src, uint32_t len);
-errno_t pfe_class_read_dmem(void *class, int32_t pe_idx, void *dst, void *src, uint32_t len);
-errno_t pfe_class_gather_read_dmem(pfe_class_t *class, void *dst, void *src, uint32_t buffer_len, uint32_t read_len);
-errno_t pfe_class_read_pmem(pfe_class_t *class, uint32_t pe_idx, void *dst, void *src, uint32_t len);
-errno_t pfe_class_set_rtable(pfe_class_t *class, void *rtable_pa, uint32_t rtable_len, uint32_t entry_size);
-errno_t pfe_class_set_default_vlan(pfe_class_t *class, uint16_t vlan);
-uint32_t pfe_class_get_num_of_pes(pfe_class_t *class);
+errno_t pfe_class_write_dmem(void *class_p, int32_t pe_idx, addr_t dst_addr, void *src_ptr, uint32_t len);
+errno_t pfe_class_read_dmem(void *class_p, int32_t pe_idx, void *dst_ptr, addr_t src_addr, uint32_t len);
+errno_t pfe_class_gather_read_dmem(pfe_class_t *class, void *dst_ptr, addr_t src_addr, uint32_t buffer_len, uint32_t read_len);
+errno_t pfe_class_read_pmem(pfe_class_t *class, uint32_t pe_idx, void *dst_ptr, addr_t src_addr, uint32_t len);
+errno_t pfe_class_set_rtable(pfe_class_t *class, addr_t rtable_pa, uint32_t rtable_len, uint32_t entry_size);
+errno_t pfe_class_set_default_vlan(const pfe_class_t *class, uint16_t vlan);
+uint32_t pfe_class_get_num_of_pes(const pfe_class_t *class);
 uint32_t pfe_class_get_text_statistics(pfe_class_t *class, char_t *buf, uint32_t buf_len, uint8_t verb_level);
 void pfe_class_destroy(pfe_class_t *class);
-addr_t pfe_class_dmem_heap_alloc(pfe_class_t *class, uint32_t size);
-void pfe_class_dmem_heap_free(pfe_class_t *class, addr_t addr);
-uint32_t pfe_class_put_data(pfe_class_t *class, pfe_ct_buffer_t *buf);
-errno_t pfe_class_set_flexible_filter(pfe_class_t *class, const uint32_t dmem_addr);
-errno_t pfe_class_set_fw_feature_state(pfe_class_t *class, const uint32_t position, const uint8_t enable);
-errno_t pfe_class_get_fw_feature_state(pfe_class_t *class, const uint32_t position, uint8_t *enable);
-errno_t pfe_class_get_fw_feature_entry(pfe_class_t *class, uint32_t position, pfe_ct_feature_desc_t **entry);
-char *pfe_class_get_fw_feature_string(pfe_class_t *class, uint32_t location);
-errno_t pfe_class_get_fw_version(pfe_class_t *class, pfe_ct_version_t *ver);
+addr_t pfe_class_dmem_heap_alloc(const pfe_class_t *class, uint32_t size);
+void pfe_class_dmem_heap_free(const pfe_class_t *class, addr_t addr);
+uint32_t pfe_class_put_data(const pfe_class_t *class, pfe_ct_buffer_t *buf);
+errno_t pfe_class_get_fw_version(const pfe_class_t *class, pfe_ct_version_t *ver);
 
 errno_t pfe_class_get_feature_first(pfe_class_t *class, pfe_fw_feature_t **feature);
 errno_t pfe_class_get_feature_next(pfe_class_t *class, pfe_fw_feature_t **feature);
-errno_t pfe_class_get_feature(pfe_class_t *class, pfe_fw_feature_t **feature, const char *name);
+errno_t pfe_class_get_feature(const pfe_class_t *class, pfe_fw_feature_t **feature, const char *name);
+
+void pfe_class_flexi_parser_stats_endian(pfe_ct_class_flexi_parser_stats_t *stats);
+void pfe_class_sum_flexi_parser_stats(pfe_ct_class_flexi_parser_stats_t *sum, const pfe_ct_class_flexi_parser_stats_t *val);
+uint32_t pfe_class_fp_stat_to_str(const pfe_ct_class_flexi_parser_stats_t *stat, char *buf, uint32_t buf_len, uint8_t verb_level);
 
 #endif /* PFE_CLASS_H_ */
diff --git a/sw/pfe_platform/public/pfe_compiler.h b/sw/pfe_platform/public/pfe_compiler.h
index 29e33fe..7ca33e3 100644
--- a/sw/pfe_platform/public/pfe_compiler.h
+++ b/sw/pfe_platform/public/pfe_compiler.h
@@ -70,6 +70,15 @@
 			/* Compiling driver */
 			#define PFE_COMPILER_BITFIELD_BEHAVIOR PFE_COMPILER_BITFIELD_HIGH_LAST
 		#endif
+	#elif ((__GNUC__ == 8) && (__GNUC_MINOR__ == 3) && (__GNUC_PATCHLEVEL__ == 0))
+		/* GCC version 8.3.0 */
+		#if (defined(PFE_CFG_TARGET_ARCH_aarch64le))
+			/* Compiling driver */
+			#define PFE_COMPILER_BITFIELD_BEHAVIOR PFE_COMPILER_BITFIELD_HIGH_LAST
+		#elif (defined(PFE_CFG_TARGET_ARCH_armv7le))
+			/* Compiling driver */
+			#define PFE_COMPILER_BITFIELD_BEHAVIOR PFE_COMPILER_BITFIELD_HIGH_LAST
+		#endif
 	#elif (defined (__KERNEL__))
 		/* Linux kernel compilation for not supported compiler */
 		#if (defined(PFE_CFG_TARGET_ARCH_aarch64))
@@ -90,7 +99,7 @@
 
 /* Supported DIAB variants */
 #if (defined(__DCC__))
-	#if ((__VERSION_NUMBER__ == 7020) && defined(__ORDER_LITTLE_ENDIAN__))
+	#if (((__VERSION_NUMBER__ == 7020) || (__VERSION_NUMBER__ == 7030)) && defined(__ORDER_LITTLE_ENDIAN__))
 		/* Compiling MCAL driver */
 		#define PFE_COMPILER_BITFIELD_BEHAVIOR PFE_COMPILER_BITFIELD_HIGH_LAST
 	#endif
diff --git a/sw/pfe_platform/public/pfe_ct.h b/sw/pfe_platform/public/pfe_ct.h
index cb6d014..1972778 100644
--- a/sw/pfe_platform/public/pfe_ct.h
+++ b/sw/pfe_platform/public/pfe_ct.h
@@ -84,6 +84,8 @@ typedef enum __attribute__((packed))
 	PFE_PHY_IF_ID_INVALID
 } pfe_ct_phy_if_id_t;
 
+typedef pfe_ct_phy_if_id_t pfe_drv_id_t;
+
 /*	We expect given pfe_ct_phy_if_id_t size due to byte order compatibility. In case this
  	assert fails the respective code must be reviewed and every usage of the type must
  	be treated by byte order swap where necessary (typically any place in host software
@@ -100,38 +102,38 @@ typedef enum __attribute__((packed))
 {
 	/* HW Accelerated Rules */
     IF_MATCH_NONE = 0U,                     /*!< No match rule used */
-	IF_MATCH_TYPE_ETH = (1U << 0U),        /*!< Match ETH Packets */
+	IF_MATCH_TYPE_ETH = (1U << 0U),         /*!< Match ETH Packets */
     IF_MATCH_TYPE_VLAN = (1U << 1U),        /*!< Match VLAN Tagged Packets */
-    IF_MATCH_TYPE_PPPOE = (1U << 2U),        /*!< Match PPPoE Packets */
-    IF_MATCH_TYPE_ARP = (1U << 3U),        /*!< Match ARP Packets */
-    IF_MATCH_TYPE_MCAST = (1U << 4U),        /*!< Match Multicast (L2) Packets */
+    IF_MATCH_TYPE_PPPOE = (1U << 2U),       /*!< Match PPPoE Packets */
+    IF_MATCH_TYPE_ARP = (1U << 3U),         /*!< Match ARP Packets */
+    IF_MATCH_TYPE_MCAST = (1U << 4U),       /*!< Match Multicast (L2) Packets */
     IF_MATCH_TYPE_IPV4 = (1U << 5U),        /*!< Match IPv4 Packets */
     IF_MATCH_TYPE_IPV6 = (1U << 6U),        /*!< Match IPv6 Packets */
     IF_MATCH_RESERVED7 = (1U << 7U),        /*!< Reserved */
     IF_MATCH_RESERVED8 = (1U << 8U),        /*!< Reserved */
-    IF_MATCH_TYPE_IPX = (1U << 9U),        /*!< Match IPX Packets */
-    IF_MATCH_TYPE_BCAST = (1U << 10U),    /*!< Match Broadcast (L2) Packets */
+    IF_MATCH_TYPE_IPX = (1U << 9U),         /*!< Match IPX Packets */
+    IF_MATCH_TYPE_BCAST = (1U << 10U),      /*!< Match Broadcast (L2) Packets */
     IF_MATCH_TYPE_UDP = (1U << 11U),        /*!< Match UDP Packets */
     IF_MATCH_TYPE_TCP = (1U << 12U),        /*!< Match TCP Packets */
-    IF_MATCH_TYPE_ICMP = (1U << 13U),        /*!< Match ICMP Packets */
-    IF_MATCH_TYPE_IGMP = (1U << 14U),        /*!< Match IGMP Packets */
+    IF_MATCH_TYPE_ICMP = (1U << 13U),       /*!< Match ICMP Packets */
+    IF_MATCH_TYPE_IGMP = (1U << 14U),       /*!< Match IGMP Packets */
     IF_MATCH_VLAN = (1U << 15U),            /*!< Match VLAN ID */
-    IF_MATCH_PROTO = (1U << 16U),            /*!< Match IP Protocol */
-    IF_MATCH_SPORT = (1U << 20U),            /*!< Match L4 Source Port */
-    IF_MATCH_DPORT = (1U << 21U),            /*!< Match L4 Destination Port */
+    IF_MATCH_PROTO = (1U << 16U),           /*!< Match IP Protocol */
+    IF_MATCH_SPORT = (1U << 20U),           /*!< Match L4 Source Port */
+    IF_MATCH_DPORT = (1U << 21U),           /*!< Match L4 Destination Port */
 	/* Pure SW */
 	IF_MATCH_SIP6 = (1U << 22U),			/*!< Match Source IPv6 Address */
 	IF_MATCH_DIP6 = (1U << 23U),			/*!< Match Destination IPv6 Address */
-	IF_MATCH_SIP = (1U << 24U),			/*!< Match Source IPv4 Address */
-	IF_MATCH_DIP = (1U << 25U),			/*!< Match Destination IPv4 Address */
-	IF_MATCH_ETHTYPE = (1U << 26U),		/*!< Match EtherType */
-	IF_MATCH_FP0 = (1U << 27U),			/*!< Match Packets Accepted by Flexible Parser 0 */
-	IF_MATCH_FP1 = (1U << 28U),			/*!< Match Packets Accepted by Flexible Parser 1 */
+	IF_MATCH_SIP = (1U << 24U),				/*!< Match Source IPv4 Address */
+	IF_MATCH_DIP = (1U << 25U),				/*!< Match Destination IPv4 Address */
+	IF_MATCH_ETHTYPE = (1U << 26U),			/*!< Match EtherType */
+	IF_MATCH_FP0 = (1U << 27U),				/*!< Match Packets Accepted by Flexible Parser 0 */
+	IF_MATCH_FP1 = (1U << 28U),				/*!< Match Packets Accepted by Flexible Parser 1 */
 	IF_MATCH_SMAC = (1U << 29U),			/*!< Match Source MAC Address */
 	IF_MATCH_DMAC = (1U << 30U),			/*!< Match Destination MAC Address */
-	IF_MATCH_HIF_COOKIE = (1U << 31U),	/*!< Match HIF header cookie value */
+	IF_MATCH_HIF_COOKIE = (int)(1U << 31U),	/*!< Match HIF header cookie value */
 	/* Ensure proper size */
-	IF_MATCH_MAX = (1U << 31U)
+	IF_MATCH_MAX = (int)(1U << 31U)
 } pfe_ct_if_m_rules_t;
 
 /*	We expect given pfe_ct_if_m_rules_t size due to byte order compatibility. */
@@ -182,6 +184,17 @@ typedef struct __attribute__((packed, aligned(4)))
 
 ct_assert(sizeof(pfe_ct_fp_rule_t) == 12U);
 
+/*
+* @brief Statistics gathered during flexible parser classification
+*/
+typedef struct __attribute__((packed, aligned(4)))
+{
+	/* Number of frames matching the selection criteria */
+	uint32_t accepted;
+	/* Number of frames not matching the selection criteria */
+	uint32_t rejected;
+} pfe_ct_class_flexi_parser_stats_t;
+
 /**
  * @brief The Flexible Parser table
  */
@@ -194,9 +207,10 @@ typedef struct __attribute__((packed, aligned(4)))
 	uint16_t reserved16;
 	/* Pointer to the array of "count" rules */
 	PFE_PTR (pfe_ct_fp_rule_t) rules;
+	pfe_ct_class_flexi_parser_stats_t  __attribute__((aligned(4))) fp_stats; /* Must be aligned at 4 bytes */
 } pfe_ct_fp_table_t;
 
-ct_assert(sizeof(pfe_ct_fp_table_t) == 8U);
+ct_assert(sizeof(pfe_ct_fp_table_t) == 16U);
 
 /**
  * @brief	Interface matching rules arguments
@@ -228,7 +242,7 @@ typedef struct __attribute__((packed, aligned(4)))
 			uint32_t sip[4U];
 			uint32_t dip[4U];
 		} v6;
-	};
+	}ipv;
 	/* Flexible Parser 0 table (IF_MATCH_FP0) */
 	PFE_PTR(pfe_ct_fp_table_t) fp0_table;
 	/* Flexible Parser 1 table (IF_MATCH_FP1) */
@@ -313,17 +327,23 @@ ct_assert(sizeof(pfe_ct_if_op_mode_t) == sizeof(uint8_t));
 
 typedef enum __attribute__((packed))
 {
-	IF_FL_NONE = 0U,				/*!< No flag set */
-	IF_FL_ENABLED = (1U << 0U),		/*!< If set, interface is enabled */
-	IF_FL_PROMISC = (1U << 1U),		/*!< If set, interface is promiscuous */
-	IF_FL_FF_ALL_TCP = (1U << 2U),	/*!< Enable fast-forwarding of ingress TCP SYN|FIN|RST packets */
+	IF_FL_NONE = 0U,					/*!< No flag set */
+	IF_FL_ENABLED = (1U << 0U),			/*!< If set, interface is enabled */
+	IF_FL_PROMISC = (1U << 1U),			/*!< If set, interface is promiscuous */
+	IF_FL_FF_ALL_TCP = (1U << 2U),		/*!< Enable fast-forwarding of ingress TCP SYN|FIN|RST packets */
 	IF_FL_MATCH_OR = (1U << 3U),		/*!< Result of match is logical OR of rules, else AND */
-	IF_FL_DISCARD = (1U << 4U),		/*!< Discard packets on rules match */
-	IF_FL_LOAD_BALANCE = (1U << 6U)	/*!< HIF channel participates in load balancing */
+	IF_FL_DISCARD = (1U << 4U),			/*!< Discard packets on rules match */
+	IF_FL_LOAD_BALANCE = (1U << 6U),	/*!< HIF channel participates in load balancing */
+	IF_FL_VLAN_CONF_CHECK = (1U << 7U),	/*!< Enable VLAN conformance check */
+	IF_FL_PTP_CONF_CHECK = (1U << 8U),	/*!< Enable PTP conformance check */
+	IF_FL_PTP_PROMISC = (1U << 9U),		/*!< PTP traffic will bypass all ingress checks */
+	IF_FL_LOOPBACK = (1U << 10U),		/*!< If set, interface is in loopback mode */
+	IF_FL_ALLOW_Q_IN_Q = (1U << 11U),	/*!< If set, QinQ traffic is accepted */
+	IF_FL_MAX = (int)(1U << 31U)
 } pfe_ct_if_flags_t;
 
 /*	We expect given pfe_ct_if_flags_t size due to byte order compatibility. */
-ct_assert(sizeof(pfe_ct_if_flags_t) == sizeof(uint8_t));
+ct_assert(sizeof(pfe_ct_if_flags_t) == sizeof(uint32_t));
 
 /**
  * @brief	Acceptable frame types
@@ -365,17 +385,19 @@ typedef struct __attribute__((packed, aligned(4))) pfe_ct_log_if_tag
 	/*	List of egress physical interfaces. Bit positions correspond
 		to pfe_ct_phy_if_id_t values (1U << pfe_ct_phy_if_id_t). */
 	uint32_t e_phy_ifs;
-	/*	Arguments required by matching rules */
-	pfe_ct_if_m_args_t __attribute__((aligned(4))) m_args; /* Must be aligned at 4 bytes */
-	/*	Interface identifier */
-	uint8_t id;
-	/*	Operational mode */
-	pfe_ct_if_op_mode_t mode;
 	/*	Flags */
 	pfe_ct_if_flags_t flags;
 	/*	Match rules. Zero means that matching is disabled and packets
 		can be accepted on interface in promiscuous mode only. */
 	pfe_ct_if_m_rules_t m_rules;
+	/*	Interface identifier */
+	uint8_t id;
+	/*	Operational mode */
+	pfe_ct_if_op_mode_t mode;
+	/*	Reserved */
+	uint8_t res[2];
+	/*	Arguments required by matching rules */
+	pfe_ct_if_m_args_t __attribute__((aligned(4))) m_args; /* Must be aligned at 4 bytes */
 	/*	Gathered statistics */
 	pfe_ct_class_algo_stats_t __attribute__((aligned(4))) class_stats; /* Must be aligned at 4 bytes */
 } pfe_ct_log_if_t;
@@ -454,24 +476,22 @@ typedef struct __attribute__((packed, aligned(4)))
 	PFE_PTR(pfe_ct_log_if_t) log_ifs;
 	/*	Pointer to default logical interface (DMEM) */
 	PFE_PTR(pfe_ct_log_if_t) def_log_if;
+	/*	Flags */
+	pfe_ct_if_flags_t flags;
 	/*	Physical port number */
 	pfe_ct_phy_if_id_t id;
 	/*	Operational mode */
 	pfe_ct_if_op_mode_t mode;
-	/*	Flags */
-	pfe_ct_if_flags_t flags;
 	/*	Block state */
 	pfe_ct_block_state_t block_state;
 	/*	Mirroring to given port */
 	pfe_ct_phy_if_id_t mirror;
-	/*	Reserved */
-	uint8_t reserved[3U];
 	/*	SPD for IPsec */
 	PFE_PTR(pfe_ct_ipsec_spd_t) ipsec_spd;
 	/*	Flexible Filter */
 	PFE_PTR(pfe_ct_fp_table_t) filter;
 	/*	Gathered statistics */
-	pfe_ct_phy_if_stats_t __attribute__((aligned(4))) phy_stats; /* Must be aligned to 4 bytes */
+	pfe_ct_phy_if_stats_t phy_stats __attribute__((aligned(4))); /* Must be aligned to 4 bytes */
 } pfe_ct_phy_if_t;
 
 /**
@@ -489,117 +509,113 @@ typedef enum __attribute__((packed))
 /**
  * @brief	MAC table lookup result (31-bit)
  */
-typedef struct __attribute__((packed))
+typedef union __attribute__((packed))
 {
-	union
+	struct
 	{
-		struct
-		{
-			/* [19:0] Forward port list */
-			uint32_t forward_list : 20;
-			/* [27:20] Reserved */
-			uint32_t reserved : 8;
-			/* [28] Local L3 */
-			uint32_t local_l3 : 1;
-			/* [29] Fresh */
-			uint32_t fresh_flag : 1;
-			/* [30] Static */
-			uint32_t static_flag : 1;
-			/* [31] Reserved */
-			uint32_t reserved1 : 1;
-		};
-
-		uint32_t val : 32;
-	};
+		/* [19:0] Forward port list */
+		uint32_t forward_list : 20;
+		/* [25:20] Reserved */
+		uint32_t reserved : 6;
+		/* [26] Discard on DST MAC match */
+		uint32_t dst_discard : 1;
+		/* [27] Discard on SRC MAC match */
+		uint32_t src_discard : 1;
+		/* [28] Local L3 */
+		uint32_t local_l3 : 1;
+		/* [29] Fresh */
+		uint32_t fresh_flag : 1;
+		/* [30] Static */
+		uint32_t static_flag : 1;
+		/* [31] Reserved */
+		uint32_t reserved1 : 1;
+	} item;
+
+	uint32_t val : 32;
 } pfe_ct_mac_table_result_t;
 
 /**
  * @brief	VLAN table lookup result (64-bit)
  */
-typedef struct __attribute__((packed))
+typedef union __attribute__((packed))
 {
-	union
+	struct
 	{
-		struct
-		{
-			/*	[19:0]  Forward list (1U << pfe_ct_phy_if_id_t) */
-			uint64_t forward_list : 20;
-			/*	[39:20] Untag list (1U << pfe_ct_phy_if_id_t) */
-			uint64_t untag_list : 20;
-			/*	[42:40] Unicast hit action (pfe_ct_l2br_action_t) */
-			uint64_t ucast_hit_action : 3;
-			/*	[45:43] Multicast hit action (pfe_ct_l2br_action_t) */
-			uint64_t mcast_hit_action : 3;
-			/*	[48:46] Unicast miss action (pfe_ct_l2br_action_t) */
-			uint64_t ucast_miss_action : 3;
-			/*	[51:49] Multicast miss action (pfe_ct_l2br_action_t) */
-			uint64_t mcast_miss_action : 3;
-			/*	[54:52] Reserved */
-			uint64_t reserved : 3;
-			/*	[55 : 63] */ /* Reserved */
-			uint64_t  hw_reserved : 9;
-		};
-
-		uint64_t val;
-	};
+		/*	[19:0]  Forward list (1U << pfe_ct_phy_if_id_t) */
+		uint64_t forward_list : 20;
+		/*	[39:20] Untag list (1U << pfe_ct_phy_if_id_t) */
+		uint64_t untag_list : 20;
+		/*	[42:40] Unicast hit action (pfe_ct_l2br_action_t) */
+		uint64_t ucast_hit_action : 3;
+		/*	[45:43] Multicast hit action (pfe_ct_l2br_action_t) */
+		uint64_t mcast_hit_action : 3;
+		/*	[48:46] Unicast miss action (pfe_ct_l2br_action_t) */
+		uint64_t ucast_miss_action : 3;
+		/*	[51:49] Multicast miss action (pfe_ct_l2br_action_t) */
+		uint64_t mcast_miss_action : 3;
+		/*	[54:52] Reserved */
+		uint64_t reserved : 3;
+		/*	[55 : 63] */ /* Reserved */
+		uint64_t  hw_reserved : 9;
+	} item;
+
+	uint64_t val;
 } pfe_ct_vlan_table_result_t;
 #elif PFE_COMPILER_BITFIELD_BEHAVIOR == PFE_COMPILER_BITFIELD_HIGH_FIRST
 /**
  * @brief	MAC table lookup result (31-bit)
  */
-typedef struct __attribute__((packed))
+typedef union __attribute__((packed))
 {
-	union
+	struct
 	{
-		struct
-		{
-			/* [31] Reserved */
-			uint32_t reserved1 : 1;
-			/* [30] Static */
-			uint32_t static_flag : 1;
-			/* [29] Fresh */
-			uint32_t fresh_flag : 1;
-			/* [28] Local L3 */
-			uint32_t local_l3 : 1;
-			/* [27:20] Reserved */
-			uint32_t reserved : 8;
-			/* [19:0] Forward port list */
-			uint32_t forward_list : 20;
-		};
-
-		uint32_t val : 32;
-	};
+		/* [31] Reserved */
+		uint32_t reserved1 : 1;
+		/* [30] Static */
+		uint32_t static_flag : 1;
+		/* [29] Fresh */
+		uint32_t fresh_flag : 1;
+		/* [28] Local L3 */
+		uint32_t local_l3 : 1;
+		/* [27] Discard on SRC MAC match */
+		uint32_t src_discard : 1;
+		/* [26] Discard on DST MAC match */
+		uint32_t dst_discard : 1;
+		/* [25:20] Reserved */
+		uint32_t reserved : 6;
+		/* [19:0] Forward port list */
+		uint32_t forward_list : 20;
+	} item;
+
+	uint32_t val : 32;
 } pfe_ct_mac_table_result_t;
 
 /**
  * @brief	VLAN table lookup result (64-bit)
  */
-typedef struct __attribute__((packed))
+typedef union __attribute__((packed))
 {
-	union
+	struct
 	{
-		struct
-		{
-			/*	[55 : 63] */ /* Reserved */
-			uint64_t  hw_reserved : 9;
-			/*	[54:52] Reserved */
-			uint64_t reserved : 3;
-			/*	[51:49] Multicast miss action (pfe_ct_l2br_action_t) */
-			uint64_t mcast_miss_action : 3;
-			/*	[48:46] Unicast miss action (pfe_ct_l2br_action_t) */
-			uint64_t ucast_miss_action : 3;
-			/*	[45:43] Multicast hit action (pfe_ct_l2br_action_t) */
-			uint64_t mcast_hit_action : 3;
-			/*	[42:40] Unicast hit action (pfe_ct_l2br_action_t) */
-			uint64_t ucast_hit_action : 3;
-			/*	[39:20] Untag list (1U << pfe_ct_phy_if_id_t) */
-			uint64_t untag_list : 20;  /* List of ports to remove VLAN tag */
-			/*	[19:0]  Forward list (1U << pfe_ct_phy_if_id_t) */
-			uint64_t forward_list : 20;
-		};
-
-		uint64_t val;
-	};
+		/*	[55 : 63] */ /* Reserved */
+		uint64_t  hw_reserved : 9;
+		/*	[54:52] Reserved */
+		uint64_t reserved : 3;
+		/*	[51:49] Multicast miss action (pfe_ct_l2br_action_t) */
+		uint64_t mcast_miss_action : 3;
+		/*	[48:46] Unicast miss action (pfe_ct_l2br_action_t) */
+		uint64_t ucast_miss_action : 3;
+		/*	[45:43] Multicast hit action (pfe_ct_l2br_action_t) */
+		uint64_t mcast_hit_action : 3;
+		/*	[42:40] Unicast hit action (pfe_ct_l2br_action_t) */
+		uint64_t ucast_hit_action : 3;
+		/*	[39:20] Untag list (1U << pfe_ct_phy_if_id_t) */
+		uint64_t untag_list : 20;  /* List of ports to remove VLAN tag */
+		/*	[19:0]  Forward list (1U << pfe_ct_phy_if_id_t) */
+		uint64_t forward_list : 20;
+	} item;
+
+	uint64_t val;
 } pfe_ct_vlan_table_result_t;
 #else
 	#error Ambiguous definition of PFE_COMPILER_BITFIELD_BEHAVIOR
@@ -725,6 +741,8 @@ typedef struct __attribute__((packed, aligned(4)))
 	pfe_ct_class_algo_stats_t log_if;
 	/* Statistics gathered when hif-to-hif classification is done */
 	pfe_ct_class_algo_stats_t hif_to_hif;
+	/* Statisctics gathered by Flexible Filter */
+	pfe_ct_class_flexi_parser_stats_t flexible_filter;
 } pfe_ct_classify_stats_t;
 
 /**
@@ -770,16 +788,16 @@ typedef struct __attribute__((packed, aligned(4)))
 typedef enum __attribute__((packed))
 {
 	PFE_FW_STATE_UNINIT = 0U,        /* FW not started */
-	PFE_FW_STATE_INIT,              /* FW passed initialization */
-	PFE_FW_STATE_FRAMEWAIT,         /* FW waiting for a new frame arrival */
-	PFE_FW_STATE_FRAMEPARSE,        /* FW started parsing a new frame */
-	PFE_FW_STATE_FRAMECLASSIFY,     /* FW started classification of parsed frame */
-	PFE_FW_STATE_FRAMEDISCARD,      /* FW is discarding the frame */
-	PFE_FW_STATE_FRAMEMODIFY,       /* FW is modifying the frame */
-	PFE_FW_STATE_FRAMESEND,         /* FW is sending frame out (towards EMAC or HIF) */
-	PFE_FW_STATE_STOPPED,           /* FW was gracefully stopped by external request */
-	PFE_FW_STATE_EXCEPTION,         /* FW is stopped after an exception */
-	PFE_FW_STATE_FAIL_STOP          /* FW is stopped due to a safety fault */
+	PFE_FW_STATE_INIT,               /* FW passed initialization */
+	PFE_FW_STATE_FRAMEWAIT,          /* FW waiting for a new frame arrival */
+	PFE_FW_STATE_FRAMEPARSE,         /* FW started parsing a new frame */
+	PFE_FW_STATE_FRAMECLASSIFY,      /* FW started classification of parsed frame */
+	PFE_FW_STATE_FRAMEDISCARD,       /* FW is discarding the frame */
+	PFE_FW_STATE_FRAMEMODIFY,        /* FW is modifying the frame */
+	PFE_FW_STATE_FRAMESEND,          /* FW is sending frame out (towards EMAC or HIF) */
+	PFE_FW_STATE_STOPPED,            /* FW was gracefully stopped by external request */
+	PFE_FW_STATE_EXCEPTION,          /* FW is stopped after an exception */
+	PFE_FW_STATE_FAIL_STOP           /* FW is stopped due to a safety fault */
 } pfe_ct_pe_sw_state_t;
 
 /**
@@ -803,10 +821,10 @@ ct_assert(sizeof(pfe_ct_pe_sw_state_monitor_t) == 8U);
  */
 typedef struct __attribute__((packed, aligned(4)))
 {
-	uint32_t min; /* Minimal measured value */
-	uint32_t max; /* Maximal measured value */
-	uint32_t avg; /* Average of measured values */
-	uint32_t cnt; /* Count of measurements */
+	uint32_t min;	/* Minimal measured value */
+	uint32_t max;	/* Maximal measured value */
+	uint32_t avg;	/* Average of measured values */
+	uint32_t cnt;	/* Count of measurements */
 } pfe_ct_measurement_t;
 
 
@@ -925,7 +943,7 @@ typedef enum __attribute__((packed))
 {
 	/*	No flag being set */
 	HIF_RX_NO_FLAG = 0U,
-	/*	IP checksum valid */
+	/*	IPv4 checksum valid */
 	HIF_RX_IPV4_CSUM = (1U << 0U),
 	/*	TCP of IPv4 checksum valid */
 	HIF_RX_TCPV4_CSUM = (1U << 1U),
@@ -944,7 +962,9 @@ typedef enum __attribute__((packed))
 	/*	Inter - HIF communication frame */
 	HIF_RX_IHC = (1U << 8U),
 	/*	Frame is Egress Timestamp Report */
-	HIF_RX_ETS = (1U << 9U)
+	HIF_RX_ETS = (1U << 9U),
+	/*	IPv6 checksum valid */
+	HIF_RX_IPV6_CSUM = (1U << 10U)
 } pfe_ct_hif_rx_flags_t;
 
 /*	We expect given pfe_ct_hif_rx_flags_t size due to byte order compatibility. */
@@ -1066,18 +1086,18 @@ typedef struct __attribute__((packed))
  */
 typedef enum __attribute__((packed))
 {
-	RT_ACT_NONE = 0U,					/*!< No action set */
+	RT_ACT_NONE = 0U,						/*!< No action set */
 	RT_ACT_ADD_ETH_HDR = (1U << 0U),		/*!< Construct/Update Ethernet Header */
 	RT_ACT_ADD_VLAN_HDR = (1U << 1U),		/*!< Construct/Update outer VLAN Header */
-	RT_ACT_ADD_PPPOE_HDR = (1U << 2U),	/*!< Construct/Update PPPOE Header */
+	RT_ACT_ADD_PPPOE_HDR = (1U << 2U),		/*!< Construct/Update PPPOE Header */
 	RT_ACT_DEC_TTL = (1U << 7U),			/*!< Decrement TTL */
-	RT_ACT_ADD_VLAN1_HDR = (1U << 11U),	/*!< Construct/Update inner VLAN Header */
+	RT_ACT_ADD_VLAN1_HDR = (1U << 11U),		/*!< Construct/Update inner VLAN Header */
 	RT_ACT_CHANGE_SIP_ADDR = (1U << 17U),	/*!< Change Source IP Address */
-	RT_ACT_CHANGE_SPORT = (1U << 18U),	/*!< Change Source Port */
+	RT_ACT_CHANGE_SPORT = (1U << 18U),		/*!< Change Source Port */
 	RT_ACT_CHANGE_DIP_ADDR = (1U << 19U),	/*!< Change Destination IP Address */
-	RT_ACT_CHANGE_DPORT = (1U << 20U),	/*!< Change Destination Port */
-	RT_ACT_DEL_VLAN_HDR = (1U << 21U),	/*!< Delete outer VLAN Header */
-	RT_ACT_INVALID = (1U << 31U)			/*!< Invalid value */
+	RT_ACT_CHANGE_DPORT = (1U << 20U),		/*!< Change Destination Port */
+	RT_ACT_DEL_VLAN_HDR = (1U << 21U),		/*!< Delete outer VLAN Header */
+	RT_ACT_INVALID = (int)(1U << 31U)		/*!< Invalid value */
 } pfe_ct_route_actions_t;
 
 /*	We expect given pfe_ct_route_actions_t size due to byte order compatibility. */
@@ -1115,7 +1135,7 @@ typedef struct __attribute__((packed))
 			uint32_t	sip[4U];
 			uint32_t	dip[4U];
 		} v6;
-	};
+	} ipv;
 
 	/*	Inner VLAN ID (RT_ACT_ADD_VLAN1_HDR) */
 	uint16_t vlan1;
@@ -1129,10 +1149,10 @@ typedef struct __attribute__((packed))
  */
 typedef enum __attribute__((packed))
 {
-	RT_FL_NONE = 0U,			/*!< No flag set */
-	RT_FL_VALID = (1U << 0U),	/*!< Entry is valid */
-	RT_FL_IPV6 = (1U << 1U),	/*!< If set entry is IPv6 else it is IPv4 */
-	RT_FL_MAX = (1U << 31U)	/* Ensure proper size */
+	RT_FL_NONE = 0U,				/*!< No flag set */
+	RT_FL_VALID = (1U << 0U),		/*!< Entry is valid */
+	RT_FL_IPV6 = (1U << 1U),		/*!< If set entry is IPv6 else it is IPv4 */
+	RT_FL_MAX = (int)(1U << 31U)	/* Ensure proper size */
 } pfe_ct_rtable_flags_t;
 
 /*	We expect given pfe_ct_rtable_flags_t size due to byte order compatibility. */
diff --git a/sw/pfe_platform/public/pfe_emac.h b/sw/pfe_platform/public/pfe_emac.h
index 083f42e..c713b95 100644
--- a/sw/pfe_platform/public/pfe_emac.h
+++ b/sw/pfe_platform/public/pfe_emac.h
@@ -59,30 +59,51 @@ typedef struct pfe_emac_tag pfe_emac_t;
  * @details	Bytes are represented as:
  * 			\code
  * 				pfe_mac_addr_t mac;
- * 			
+ *
  * 				emac[0] = 0xaa;
  * 				emac[1] = 0xbb;
  * 				emac[2] = 0xcc;
  * 				emac[3] = 0xdd;
  * 				emac[4] = 0xee;
  * 				emac[5] = 0xff;
- * 			
+ *
  * 				printf("The MAC address is: %x:%x:%x:%x:%x:%x\n",
  * 						mac[0], emac[1], mac[2], mac[3], mac[4], mac[5]);
  * 			\endcode
  */
 typedef uint8_t pfe_mac_addr_t[6];
 
+/**
+ * @brief	Possible types of MAC addresses used while getting or flushing
+ */
+typedef enum
+{
+	PFE_TYPE_UC,
+	PFE_TYPE_MC,
+	PFE_TYPE_BC,
+	PFE_TYPE_ANY
+} pfe_mac_type_t;
+
+/**
+ * @brief	Temporary solution for remap of mac_db criterion to emac criterion.
+ * 			Order of the enum items must match with pfe_mac_db_crit_t defined in pfe_mac_db.h
+ */
+typedef enum __attribute__ ((packed)) {
+	EMAC_CRIT_BY_TYPE = 0U,
+	EMAC_CRIT_BY_OWNER,
+	EMAC_CRIT_BY_OWNER_AND_TYPE,
+	EMAC_CRIT_ALL,
+	EMAC_CRIT_INVALID,
+} pfe_emac_crit_t;
+
 /**
  * @brief		Check if given MAC address is broadcast
  * @param[in]	addr The address to check
  * @return		TRUE if the input address is broadcast
  */
-static inline bool_t pfe_emac_is_broad(pfe_mac_addr_t addr)
+static inline bool_t pfe_emac_is_broad(const pfe_mac_addr_t addr)
 {
-	static const pfe_mac_addr_t bc = {0xffU, 0xffU, 0xffU, 0xffU, 0xffU, 0xffU};
-
-	if (0 == memcmp(addr, bc, sizeof(pfe_mac_addr_t)))
+	if (0xffU == (addr[0] & addr[1] & addr[2] & addr[3] & addr[4] & addr[5]))
 	{
 		return TRUE;
 	}
@@ -97,9 +118,9 @@ static inline bool_t pfe_emac_is_broad(pfe_mac_addr_t addr)
  * @param[in]	addr The address to check
  * @return		TRUE if the input address is multicast
  */
-static inline bool_t pfe_emac_is_multi(pfe_mac_addr_t addr)
+static inline bool_t pfe_emac_is_multi(const pfe_mac_addr_t addr)
 {
-	if ((FALSE == pfe_emac_is_broad(addr)) && (0 != (addr[0] & 0x1U)))
+	if ((FALSE == pfe_emac_is_broad(addr)) && (0U != (addr[0] & 0x1U)))
 	{
 		return TRUE;
 	}
@@ -109,42 +130,68 @@ static inline bool_t pfe_emac_is_multi(pfe_mac_addr_t addr)
 	}
 }
 
-pfe_emac_t *pfe_emac_create(void *cbus_base_va, void *emac_base, pfe_emac_mii_mode_t mode, pfe_emac_speed_t speed, pfe_emac_duplex_t duplex);
-void pfe_emac_enable(pfe_emac_t *emac);
-void pfe_emac_disable(pfe_emac_t *emac);
+/**
+ * @brief		Check if entry match with the rule
+ * @param[in]	addr The address to check
+ * @param[in]	type Required type of MAC address (Broadcast, Multicast, Unicast, ANY) criterion
+ * @return		TRUE if entry match with the rule, FALSE otherwise
+ */
+static inline bool_t pfe_emac_check_crit_by_type(const pfe_mac_addr_t addr, pfe_mac_type_t type)
+{
+    bool_t ret = FALSE;
+    if ((type == PFE_TYPE_ANY) ||
+        ((type == PFE_TYPE_MC) && (TRUE  == pfe_emac_is_multi(addr))) ||
+        ((type == PFE_TYPE_BC) && (TRUE  == pfe_emac_is_broad(addr))) ||
+        ((type == PFE_TYPE_UC) && (FALSE  == pfe_emac_is_multi(addr)))
+       )
+    {
+        ret = TRUE;
+    }
+    return ret;
+}
+
+pfe_emac_t *pfe_emac_create(addr_t cbus_base_va, addr_t emac_base, pfe_emac_mii_mode_t mode, pfe_emac_speed_t speed, pfe_emac_duplex_t duplex);
+void pfe_emac_enable(const pfe_emac_t *emac);
+void pfe_emac_disable(const pfe_emac_t *emac);
 errno_t pfe_emac_enable_ts(pfe_emac_t *emac, uint32_t i_clk_hz, uint32_t o_clk_hz);
 errno_t pfe_emac_set_ts_freq_adjustment(pfe_emac_t *emac, uint32_t ppb, bool_t sgn);
 errno_t pfe_emac_get_ts_freq_adjustment(pfe_emac_t *emac, uint32_t *ppb, bool_t *sgn);
 errno_t pfe_emac_set_ts_time(pfe_emac_t *emac, uint32_t sec, uint32_t nsec);
 errno_t pfe_emac_adjust_ts_time(pfe_emac_t *emac, uint32_t sec, uint32_t nsec, bool_t sgn);
 errno_t pfe_emac_get_ts_time(pfe_emac_t *emac, uint32_t *sec, uint32_t *nsec);
-void pfe_emac_enable_loopback(pfe_emac_t *emac);
-void pfe_emac_disable_loopback(pfe_emac_t *emac);
-void pfe_emac_enable_promisc_mode(pfe_emac_t *emac);
-void pfe_emac_disable_promisc_mode(pfe_emac_t *emac);
-void pfe_emac_enable_allmulti_mode(pfe_emac_t *emac);
-void pfe_emac_disable_allmulti_mode(pfe_emac_t *emac);
-void pfe_emac_enable_broadcast(pfe_emac_t *emac);
-void pfe_emac_disable_broadcast(pfe_emac_t *emac);
-void pfe_emac_enable_flow_control(pfe_emac_t *emac);
-void pfe_emac_disable_flow_control(pfe_emac_t *emac);
-errno_t pfe_emac_set_max_frame_length(pfe_emac_t *emac, uint32_t len);
-pfe_emac_mii_mode_t pfe_emac_get_mii_mode(pfe_emac_t *emac);
-errno_t pfe_emac_get_link_config(pfe_emac_t *emac, pfe_emac_speed_t *speed, pfe_emac_duplex_t *duplex);
-errno_t pfe_emac_get_link_status(pfe_emac_t *emac, pfe_emac_link_speed_t *link_speed, pfe_emac_duplex_t *duplex, bool_t *link);
+void pfe_emac_enable_loopback(const pfe_emac_t *emac);
+void pfe_emac_disable_loopback(const pfe_emac_t *emac);
+void pfe_emac_enable_promisc_mode(const pfe_emac_t *emac);
+void pfe_emac_disable_promisc_mode(const pfe_emac_t *emac);
+void pfe_emac_enable_allmulti_mode(const pfe_emac_t *emac);
+void pfe_emac_disable_allmulti_mode(const pfe_emac_t *emac);
+void pfe_emac_enable_broadcast(const pfe_emac_t *emac);
+void pfe_emac_disable_broadcast(const pfe_emac_t *emac);
+void pfe_emac_enable_tx_flow_control(const pfe_emac_t *emac);
+void pfe_emac_disable_tx_flow_control(const pfe_emac_t *emac);
+void pfe_emac_enable_rx_flow_control(const pfe_emac_t *emac);
+void pfe_emac_disable_rx_flow_control(const pfe_emac_t *emac);
+void pfe_emac_get_flow_control(const pfe_emac_t *emac, bool_t *tx_enable, bool_t *rx_enable);
+errno_t pfe_emac_set_max_frame_length(const pfe_emac_t *emac, uint32_t len);
+pfe_emac_mii_mode_t pfe_emac_get_mii_mode(const pfe_emac_t *emac);
+errno_t pfe_emac_get_link_config(const pfe_emac_t *emac, pfe_emac_speed_t *speed, pfe_emac_duplex_t *duplex);
+errno_t pfe_emac_get_link_status(const pfe_emac_t *emac, pfe_emac_link_speed_t *link_speed, pfe_emac_duplex_t *duplex, bool_t *link);
+errno_t pfe_emac_set_link_speed(const pfe_emac_t *emac, pfe_emac_speed_t link_speed);
+errno_t pfe_emac_set_link_duplex(const pfe_emac_t *emac, pfe_emac_duplex_t duplex);
 errno_t pfe_emac_mdio_lock(pfe_emac_t *emac, uint32_t *key);
 errno_t pfe_emac_mdio_unlock(pfe_emac_t *emac, uint32_t key);
 errno_t pfe_emac_mdio_read22(pfe_emac_t *emac, uint8_t pa, uint8_t ra, uint16_t *val, uint32_t key);
 errno_t pfe_emac_mdio_write22(pfe_emac_t *emac, uint8_t pa, uint8_t ra, uint16_t val, uint32_t key);
 errno_t pfe_emac_mdio_read45(pfe_emac_t *emac, uint8_t pa, uint8_t dev, uint16_t ra, uint16_t *val, uint32_t key);
 errno_t pfe_emac_mdio_write45(pfe_emac_t *emac, uint8_t pa, uint8_t dev, uint16_t ra, uint16_t val, uint32_t key);
-errno_t pfe_emac_add_addr(pfe_emac_t *emac, pfe_mac_addr_t addr, pfe_ct_phy_if_id_t owner);
-errno_t pfe_emac_flush_mac_addrs(pfe_emac_t *emac, pfe_flush_mode_t mode, pfe_ct_phy_if_id_t owner);
+errno_t pfe_emac_add_addr(pfe_emac_t *emac, const pfe_mac_addr_t addr, pfe_drv_id_t owner);
+errno_t pfe_emac_flush_mac_addrs(pfe_emac_t *emac, pfe_emac_crit_t crit, pfe_mac_type_t type, pfe_drv_id_t owner);
 errno_t pfe_emac_get_addr(pfe_emac_t *emac, pfe_mac_addr_t addr);
-errno_t pfe_emac_del_addr(pfe_emac_t *emac, pfe_mac_addr_t addr);
+errno_t pfe_emac_del_addr(pfe_emac_t *emac, const pfe_mac_addr_t addr);
 void pfe_emac_destroy(pfe_emac_t *emac);
-uint32_t pfe_emac_get_text_statistics(pfe_emac_t *emac, char_t *buf, uint32_t buf_len, uint8_t verb_level);
+uint32_t pfe_emac_get_text_statistics(const pfe_emac_t *emac, char_t *buf, uint32_t buf_len, uint8_t verb_level);
+uint32_t pfe_emac_get_rx_cnt(const pfe_emac_t *emac);
+uint32_t pfe_emac_get_tx_cnt(const pfe_emac_t *emac);
 
-void pfe_emac_test(void *cbus_base_va, void *emac_base);
 
 #endif /* PUBLIC_PFE_EMAC_H_ */
diff --git a/sw/pfe_platform/public/pfe_fp.h b/sw/pfe_platform/public/pfe_fp.h
index 0b262da..cf5078e 100644
--- a/sw/pfe_platform/public/pfe_fp.h
+++ b/sw/pfe_platform/public/pfe_fp.h
@@ -1,7 +1,7 @@
 /* =========================================================================
  *  
  *  Copyright (c) 2019 Imagination Technologies Limited
- *  Copyright 2019-2020 NXP
+ *  Copyright 2019-2021 NXP
  *
  *  SPDX-License-Identifier: GPL-2.0
  *
@@ -15,5 +15,6 @@ void pfe_fp_init(void);
 uint32_t pfe_fp_create_table(pfe_class_t *class, uint8_t rules_count);
 uint32_t pfe_fp_table_write_rule(pfe_class_t *class, uint32_t table_address, pfe_ct_fp_rule_t *rule, uint8_t position);
 void pfe_fp_destroy_table(pfe_class_t *class, uint32_t table_address);
+errno_t pfe_fp_table_get_statistics(pfe_class_t *class, uint32_t pe_idx ,uint32_t table_address, pfe_ct_class_flexi_parser_stats_t *stats);
 
 #endif
diff --git a/sw/pfe_platform/public/pfe_fw_feature.h b/sw/pfe_platform/public/pfe_fw_feature.h
index cf87d6d..460c22f 100644
--- a/sw/pfe_platform/public/pfe_fw_feature.h
+++ b/sw/pfe_platform/public/pfe_fw_feature.h
@@ -10,21 +10,22 @@
 #ifndef PFE_FW_FEATURE_H
 #define PFE_FW_FEATURE_H
 
-typedef errno_t(*dmem_rw_func_t)(void *, int32_t, void *, void *, uint32_t);
+typedef errno_t(*dmem_read_func_t)(void *, int32_t, void *, addr_t, uint32_t);
+typedef errno_t(*dmem_write_func_t)(void *, int32_t, addr_t, void *, uint32_t);
 typedef struct pfe_fw_feature_tag pfe_fw_feature_t;
 
 pfe_fw_feature_t *pfe_fw_feature_create(void);
-void pfe_fw_feature_destroy(pfe_fw_feature_t *feature);
+void pfe_fw_feature_destroy(const pfe_fw_feature_t *feature);
 errno_t pfe_fw_feature_set_ll_data(pfe_fw_feature_t *feature, pfe_ct_feature_desc_t *ll_data);
 errno_t pfe_fw_feature_set_string_base(pfe_fw_feature_t *feature, const char *string_base);
-errno_t pfe_fw_feature_set_dmem_funcs(pfe_fw_feature_t *feature, dmem_rw_func_t read_func, dmem_rw_func_t write_func, void *data);
-errno_t pfe_fw_feature_get_name(pfe_fw_feature_t *feature, const char **name);
-errno_t pfe_fw_feature_get_desc(pfe_fw_feature_t *feature, const char **desc);
-errno_t pfe_fw_feature_get_variant(pfe_fw_feature_t *feature, uint8_t *variant);
-errno_t pfe_fw_feature_get_def_val(pfe_fw_feature_t *feature, uint8_t *def_val);
-errno_t pfe_fw_feature_get_val(pfe_fw_feature_t *feature, uint8_t *val);
-bool_t pfe_fw_feature_enabled(pfe_fw_feature_t *feature);
-errno_t pfe_fw_feature_set_val(pfe_fw_feature_t *feature, uint8_t val);
+errno_t pfe_fw_feature_set_dmem_funcs(pfe_fw_feature_t *feature, dmem_read_func_t read_func, dmem_write_func_t write_func, void *data);
+errno_t pfe_fw_feature_get_name(const pfe_fw_feature_t *feature, const char **name);
+errno_t pfe_fw_feature_get_desc(const pfe_fw_feature_t *feature, const char **desc);
+errno_t pfe_fw_feature_get_variant(const pfe_fw_feature_t *feature, uint8_t *variant);
+errno_t pfe_fw_feature_get_def_val(const pfe_fw_feature_t *feature, uint8_t *def_val);
+errno_t pfe_fw_feature_get_val(const pfe_fw_feature_t *feature, uint8_t *val);
+bool_t pfe_fw_feature_enabled(const pfe_fw_feature_t *feature);
+errno_t pfe_fw_feature_set_val(const pfe_fw_feature_t *feature, uint8_t val);
 
 #endif
 
diff --git a/sw/pfe_platform/public/pfe_gpi.h b/sw/pfe_platform/public/pfe_gpi.h
index 1aab741..beadfc0 100644
--- a/sw/pfe_platform/public/pfe_gpi.h
+++ b/sw/pfe_platform/public/pfe_gpi.h
@@ -1,7 +1,7 @@
 /* =========================================================================
  *  
  *  Copyright (c) 2019 Imagination Technologies Limited
- *  Copyright 2018-2020 NXP
+ *  Copyright 2018-2021 NXP
  *
  *  SPDX-License-Identifier: GPL-2.0
  *
@@ -20,11 +20,11 @@ typedef struct
 	bool_t emac_1588_ts_en;
 } pfe_gpi_cfg_t;
 
-pfe_gpi_t *pfe_gpi_create(void *cbus_base_va, void *gpi_base, pfe_gpi_cfg_t *cfg);
-void pfe_gpi_enable(pfe_gpi_t *gpi);
-void pfe_gpi_reset(pfe_gpi_t *gpi);
-void pfe_gpi_disable(pfe_gpi_t *gpi);
-uint32_t pfe_gpi_get_text_statistics(pfe_gpi_t *gpi, char_t *buf, uint32_t buf_len, uint8_t verb_level);
-void pfe_gpi_destroy(pfe_gpi_t *gpi);
+pfe_gpi_t *pfe_gpi_create(addr_t cbus_base_va, addr_t gpi_base, const pfe_gpi_cfg_t *cfg);
+void pfe_gpi_enable(const pfe_gpi_t *gpi);
+void pfe_gpi_reset(const pfe_gpi_t *gpi);
+void pfe_gpi_disable(const pfe_gpi_t *gpi);
+uint32_t pfe_gpi_get_text_statistics(const pfe_gpi_t *gpi, char_t *buf, uint32_t buf_len, uint8_t verb_level);
+void pfe_gpi_destroy(const pfe_gpi_t *gpi);
 
 #endif /* PUBLIC_PFE_GPI_H_ */
diff --git a/sw/pfe_platform/public/pfe_hif.h b/sw/pfe_platform/public/pfe_hif.h
index ce59d43..56d6e3f 100644
--- a/sw/pfe_platform/public/pfe_hif.h
+++ b/sw/pfe_platform/public/pfe_hif.h
@@ -1,7 +1,7 @@
 /* =========================================================================
  *  
  *  Copyright (c) 2019 Imagination Technologies Limited
- *  Copyright 2018-2020 NXP
+ *  Copyright 2018-2021 NXP
  *
  *  SPDX-License-Identifier: GPL-2.0
  *
@@ -50,15 +50,15 @@ static inline pfe_hif_chnl_id_t pfe_hif_chnl_from_phy_id(pfe_ct_phy_if_id_t phy)
 
 typedef struct pfe_hif_tag pfe_hif_t;
 
-pfe_hif_t *pfe_hif_create(void *cbus_base_va, pfe_hif_chnl_id_t channels_mask);
-pfe_hif_chnl_t *pfe_hif_get_channel(pfe_hif_t *hif, pfe_hif_chnl_id_t channel_id);
+pfe_hif_t *pfe_hif_create(addr_t cbus_base_va, pfe_hif_chnl_id_t channels_mask);
+pfe_hif_chnl_t *pfe_hif_get_channel(const pfe_hif_t *hif, pfe_hif_chnl_id_t channel_id);
 void pfe_hif_destroy(pfe_hif_t *hif);
 
 #ifdef PFE_CFG_PFE_MASTER
-errno_t pfe_hif_isr(pfe_hif_t *hif);
-void pfe_hif_irq_mask(pfe_hif_t *hif);
-void pfe_hif_irq_unmask(pfe_hif_t *hif);
-uint32_t pfe_hif_get_text_statistics(pfe_hif_t *hif, char_t *buf, uint32_t buf_len, uint8_t verb_level);
+errno_t pfe_hif_isr(const pfe_hif_t *hif);
+void pfe_hif_irq_mask(const pfe_hif_t *hif);
+void pfe_hif_irq_unmask(const pfe_hif_t *hif);
+uint32_t pfe_hif_get_text_statistics(const pfe_hif_t *hif, char_t *buf, uint32_t buf_len, uint8_t verb_level);
 #endif /* PFE_CFG_PFE_MASTER */
 
 #endif /* PUBLIC_PFE_HIF_H_ */
diff --git a/sw/pfe_platform/public/pfe_hif_chnl.h b/sw/pfe_platform/public/pfe_hif_chnl.h
index 220522a..89e1227 100644
--- a/sw/pfe_platform/public/pfe_hif_chnl.h
+++ b/sw/pfe_platform/public/pfe_hif_chnl.h
@@ -1,7 +1,7 @@
 /* =========================================================================
  *  
  *  Copyright (c) 2019 Imagination Technologies Limited
- *  Copyright 2018-2020 NXP
+ *  Copyright 2018-2021 NXP
  *
  *  SPDX-License-Identifier: GPL-2.0
  *
@@ -10,7 +10,7 @@
 /**
  * @file		pfe_hif_chnl.h
  * @brief		The Host Interface channel
- * @details     
+ * @details
  * 				Purpose
  * 				-------
  * 				This is the software representation of the HIF channel including both data RX, and
@@ -18,14 +18,14 @@
  *				use to gain access to the Ethernet traffic. All data transmission requests as well
  *				as data reception operations and related control tasks are provided by a HIF channel
  *				instance API.
- * 
+ *
  *				Initialization
  * 				--------------
  * 				The channel instance is created by pfe_hif_chnl_create(). Then it needs to be
  * 				initialized	to perform instance-specific configuration. For this purpose
  * 				the pfe_hif_chnl_init() shall be called. Once successfully initialized, the
  *				channel can be activated by pfe_hif_chnl_rx_enable() and pfe_hif_chnl_tx_enable().
- * 				
+ *
  * 				RX traffic management
  * 				---------------------
  * 				Upon activation the channel starts receiving data into its internal buffer ring.
@@ -35,10 +35,10 @@
  * 				RX buffers have become available (this means that multiple calls of
  * 				pfe_hif_chnl_supply_rx_buf() can be confirmed by a single
  * 				pfe_hif_chnl_rx_dma_start()).
- * 				
+ *
  * 				@note To query if the channel is able to accept new RX buffers one can also use
  * 					  the helper function pfe_hif_chnl_can_accept_rx_buf().
- * 				
+ *
  * 				Usually, new RX data is indicated via dedicated RX IRQ. The RX IRQ number associated
  * 				with channel can be retrieved via pfe_chi_chnl_get_irq() call. Driver then
  * 				processes the interrupt by calling the pfe_hif_chnl_rx() until the function
@@ -46,7 +46,7 @@
  * 				pfe_hif_chnl_ack_rx_irq(). Note that buffers dequeued by pfe_hif_chnl_rx() must
  * 				be replaced by fresh ones using the pfe_hif_chnl_supply_rx_buf() call to keep the
  * 				reception active.
- * 				
+ *
  * 				Typical RX operation could look like:
  * 				@code{.c}
  * 					void rx_irq_handler(void)
@@ -55,17 +55,17 @@
  * 						{
  * 							// Process the received buffer
  * 						}
- * 						
+ *
  * 						while (TRUE == pfe_hif_chnl_can_accept_rx_buf())
  * 						{
  * 							pfe_hif_chnl_supply_rx_buf();
  * 						}
- * 						
+ *
  * 						pfe_hif_chnl_rx_dma_start();
  * 						pfe_hif_chnl_ack_rx_irq();
  * 					}
  * 				@endcode
- * 				
+ *
  * 				TX traffic management
  * 				---------------------
  * 				A packet can be committed for transmission using the pfe_hif_chnl_tx() call. Since
@@ -73,10 +73,10 @@
  * 				mark each of them by so called 'lifm' (last-in-frame) flag and driver is responsible
  * 				for its validity. Transmission of committed buffer(s) is triggered by the
  * 				pfe_hif_chnl_tx_dma_start().
- * 				
+ *
  * 				@note To query if the channel is able to accept new TX buffers one can use
  * 					  the helper function pfe_hif_chnl_can_accept_rx_buf().
- * 				
+ *
  * 				Typical TX sequence could look like:
  * 				@code{.c}
  * 				...
@@ -91,11 +91,11 @@
  * 						// Failed
  * 					}
  * 				}
- * 				
+ *
  * 				pfe_hif_chnl_tx_dma_start();
  * 				...
  * 				@endcode
- * 				
+ *
  *				Once a buffer is transmitted a TX confirmation is generated. Driver can query
  *				for new TX confirmations using the pfe_hif_chnl_has_tx_conf(). If a TX
  *				confirmation is available it can be 'dequeued' via pfe_hif_chnl_get_tx_conf().
@@ -104,7 +104,7 @@
  *				not internally keep mapping between TX confirmations and transmitted buffers,
  *				the driver must do the mapping using order of transmitted buffers and received
  *				TX confirmations.
- *				
+ *
  *				TX confirmations can be handled for instance by periodic calls (or driven by
  *				TX IRQs) of routine such:
  *				@code{.c}
@@ -119,7 +119,7 @@
  *					}
  *				}
  *				@endcode
- *				
+ *
  *				Shutdown handling
  *				-----------------
  *				Once the channel is no more needed it can be stopped and subsequently destroyed.
@@ -185,30 +185,30 @@ typedef void (* pfe_hif_chnl_cbk_t)(void *arg);
 errno_t pfe_hif_chnl_rx_enable(pfe_hif_chnl_t *chnl) __attribute__((cold));
 void pfe_hif_chnl_rx_disable(pfe_hif_chnl_t *chnl) __attribute__((cold));
 errno_t pfe_hif_chnl_rx(pfe_hif_chnl_t *chnl, void **buf_pa, uint32_t *len, bool_t *lifm) __attribute__((hot));
-errno_t pfe_hif_chnl_rx_va(pfe_hif_chnl_t *chnl, void **buf_va, uint32_t *len, bool_t *lifm, void **meta) __attribute__((hot));
-uint32_t pfe_hif_chnl_get_meta_size(pfe_hif_chnl_t *chnl) __attribute__((cold));
+errno_t pfe_hif_chnl_rx_va(const pfe_hif_chnl_t *chnl, void **buf_va, uint32_t *len, bool_t *lifm, void **meta) __attribute__((hot));
+uint32_t pfe_hif_chnl_get_meta_size(const pfe_hif_chnl_t *chnl) __attribute__((cold));
 errno_t pfe_hif_chnl_release_buf(pfe_hif_chnl_t *chnl, void *buf_va) __attribute__((hot));
-void pfe_hif_chnl_rx_dma_start(pfe_hif_chnl_t *chnl) __attribute__((hot));
-bool_t pfe_hif_chnl_can_accept_rx_buf(pfe_hif_chnl_t *chnl) __attribute__((pure, hot));
-errno_t pfe_hif_chnl_supply_rx_buf(pfe_hif_chnl_t *chnl, void *buf_pa, uint32_t size) __attribute__((hot));
-uint32_t pfe_hif_chnl_get_rx_fifo_depth(pfe_hif_chnl_t *chnl) __attribute__((pure, cold));
+void pfe_hif_chnl_rx_dma_start(const pfe_hif_chnl_t *chnl) __attribute__((hot));
+bool_t pfe_hif_chnl_can_accept_rx_buf(const pfe_hif_chnl_t *chnl) __attribute__((pure, hot));
+errno_t pfe_hif_chnl_supply_rx_buf(const pfe_hif_chnl_t *chnl, const void *buf_pa, uint32_t size) __attribute__((hot));
+uint32_t pfe_hif_chnl_get_rx_fifo_depth(const pfe_hif_chnl_t *chnl) __attribute__((pure, cold));
 
 /*	TX */
 errno_t pfe_hif_chnl_tx_enable(pfe_hif_chnl_t *chnl) __attribute__((cold));
 void pfe_hif_chnl_tx_disable(pfe_hif_chnl_t *chnl) __attribute__((cold));
-errno_t pfe_hif_chnl_tx(pfe_hif_chnl_t *chnl, void *buf_pa, void *buf_va, uint32_t len, bool_t lifm) __attribute__((hot));
-void pfe_hif_chnl_tx_dma_start(pfe_hif_chnl_t *chnl) __attribute__((hot));
-bool_t pfe_hif_chnl_can_accept_tx_num(pfe_hif_chnl_t *chnl, uint16_t num) __attribute__((pure, hot));
+errno_t pfe_hif_chnl_tx(const pfe_hif_chnl_t *chnl, const void *buf_pa, const void *buf_va, uint32_t len, bool_t lifm) __attribute__((hot));
+void pfe_hif_chnl_tx_dma_start(const pfe_hif_chnl_t *chnl) __attribute__((hot));
+bool_t pfe_hif_chnl_can_accept_tx_num(const pfe_hif_chnl_t *chnl, uint16_t num) __attribute__((pure, hot));
 #ifdef PFE_CFG_HIF_TX_FIFO_FIX
 bool_t pfe_hif_chnl_can_accept_tx_data(pfe_hif_chnl_t *chnl, uint32_t num) __attribute__((hot));
 #endif /* PFE_CFG_HIF_TX_FIFO_FIX */
-bool_t pfe_hif_chnl_tx_fifo_empty(pfe_hif_chnl_t *chnl) __attribute__((pure, hot));
-bool_t pfe_hif_chnl_has_tx_conf(pfe_hif_chnl_t *chnl) __attribute__((pure, hot));
-errno_t pfe_hif_chnl_get_tx_conf(pfe_hif_chnl_t *chnl) __attribute__((hot));
-uint32_t pfe_hif_chnl_get_tx_fifo_depth(pfe_hif_chnl_t *chnl) __attribute__((pure, cold));
+bool_t pfe_hif_chnl_tx_fifo_empty(const pfe_hif_chnl_t *chnl) __attribute__((pure, hot));
+bool_t pfe_hif_chnl_has_tx_conf(const pfe_hif_chnl_t *chnl) __attribute__((pure, hot));
+errno_t pfe_hif_chnl_get_tx_conf(const pfe_hif_chnl_t *chnl) __attribute__((hot));
+uint32_t pfe_hif_chnl_get_tx_fifo_depth(const pfe_hif_chnl_t *chnl) __attribute__((pure, cold));
 
 /*	Instance control */
-pfe_hif_chnl_t *pfe_hif_chnl_create(void *cbus_base_va, uint32_t id, pfe_bmu_t *bmu) __attribute__((cold));
+pfe_hif_chnl_t *pfe_hif_chnl_create(addr_t cbus_base_va, uint32_t id, const pfe_bmu_t *bmu) __attribute__((cold));
 errno_t pfe_hif_chnl_isr(pfe_hif_chnl_t *chnl) __attribute__((hot));
 void pfe_hif_chnl_destroy(pfe_hif_chnl_t *chnl) __attribute__((cold));
 errno_t pfe_hif_chnl_set_event_cbk(pfe_hif_chnl_t *chnl, pfe_hif_chnl_event_t event, pfe_hif_chnl_cbk_t cbk, void *arg);
@@ -218,10 +218,14 @@ void pfe_hif_chnl_rx_irq_mask(pfe_hif_chnl_t *chnl) __attribute__((hot));
 void pfe_hif_chnl_rx_irq_unmask(pfe_hif_chnl_t *chnl) __attribute__((hot));
 void pfe_hif_chnl_tx_irq_mask(pfe_hif_chnl_t *chnl) __attribute__((hot));
 void pfe_hif_chnl_tx_irq_unmask(pfe_hif_chnl_t *chnl) __attribute__((hot));
-bool_t pfe_hif_chnl_is_rx_dma_active(pfe_hif_chnl_t *chnl) __attribute__((hot));
-bool_t pfe_hif_chnl_is_tx_dma_active(pfe_hif_chnl_t *chnl) __attribute__((hot));
-uint32_t pfe_hif_chnl_get_id(pfe_hif_chnl_t *chnl) __attribute__((pure, cold));
-uint32_t pfe_hif_chnl_dump_ring(pfe_hif_chnl_t *chnl, bool_t dump_rx, bool_t dump_tx, char_t *buf, uint32_t size, uint8_t verb_level) __attribute__((cold));
-uint32_t pfe_hif_chnl_get_text_statistics(pfe_hif_chnl_t *chnl, char_t *buf, uint32_t buf_len, uint8_t verb_level) __attribute__((cold));
+errno_t pfe_hif_chnl_get_rx_irq_coalesce(pfe_hif_chnl_t *chnl, uint32_t *frames, uint32_t *cycles);
+errno_t pfe_hif_chnl_set_rx_irq_coalesce(pfe_hif_chnl_t *chnl, uint32_t frames, uint32_t cycles);
+bool_t pfe_hif_chnl_is_rx_dma_active(const pfe_hif_chnl_t *chnl) __attribute__((hot));
+bool_t pfe_hif_chnl_is_tx_dma_active(const pfe_hif_chnl_t *chnl) __attribute__((hot));
+uint32_t pfe_hif_chnl_get_id(const pfe_hif_chnl_t *chnl) __attribute__((pure, cold));
+uint32_t pfe_hif_chnl_dump_ring(const pfe_hif_chnl_t *chnl, bool_t dump_rx, bool_t dump_tx, char_t *buf, uint32_t size, uint8_t verb_level) __attribute__((cold));
+uint32_t pfe_hif_chnl_get_text_statistics(const pfe_hif_chnl_t *chnl, char_t *buf, uint32_t buf_len, uint8_t verb_level) __attribute__((cold));
+uint32_t pfe_hif_chnl_get_tx_cnt(const pfe_hif_chnl_t *chnl);
+uint32_t pfe_hif_chnl_get_rx_cnt(const pfe_hif_chnl_t *chnl);
 
 #endif /* PUBLIC_PFE_HIF_CHNL_H_ */
diff --git a/sw/pfe_platform/public/pfe_hif_nocpy.h b/sw/pfe_platform/public/pfe_hif_nocpy.h
index 6410073..b64764c 100644
--- a/sw/pfe_platform/public/pfe_hif_nocpy.h
+++ b/sw/pfe_platform/public/pfe_hif_nocpy.h
@@ -1,7 +1,7 @@
 /* =========================================================================
  *  
  *  Copyright (c) 2019 Imagination Technologies Limited
- *  Copyright 2018-2020 NXP
+ *  Copyright 2018-2021 NXP
  *
  *  SPDX-License-Identifier: GPL-2.0
  *
@@ -21,9 +21,9 @@ typedef struct
 
 typedef struct pfe_hif_nocpy_tag pfe_hif_nocpy_t;
 
-pfe_hif_nocpy_t *pfe_hif_nocpy_create(void *base_va, pfe_bmu_t *bmu);
-pfe_hif_chnl_t *pfe_hif_nocpy_get_channel(pfe_hif_nocpy_t *hif, uint32_t channel_id);
-uint32_t pfe_hif_nocpy_get_text_statistics(pfe_hif_nocpy_t *hif, char_t *buf, uint32_t buf_len, uint8_t verb_level);
-void pfe_hif_nocpy_destroy(pfe_hif_nocpy_t *hif);
+pfe_hif_nocpy_t *pfe_hif_nocpy_create(addr_t base_va, const pfe_bmu_t *bmu);
+pfe_hif_chnl_t *pfe_hif_nocpy_get_channel(const pfe_hif_nocpy_t *hif, uint32_t channel_id);
+uint32_t pfe_hif_nocpy_get_text_statistics(const pfe_hif_nocpy_t *hif, char_t *buf, uint32_t buf_len, uint8_t verb_level);
+void pfe_hif_nocpy_destroy(const pfe_hif_nocpy_t *hif);
 
 #endif /* PUBLIC_PFE_HIF_NOCPY_H_ */
diff --git a/sw/pfe_platform/public/pfe_hif_ring.h b/sw/pfe_platform/public/pfe_hif_ring.h
index e27b29c..cc7ec9e 100644
--- a/sw/pfe_platform/public/pfe_hif_ring.h
+++ b/sw/pfe_platform/public/pfe_hif_ring.h
@@ -1,7 +1,7 @@
 /* =========================================================================
  *  
  *  Copyright (c) 2019 Imagination Technologies Limited
- *  Copyright 2018-2020 NXP
+ *  Copyright 2018-2021 NXP
  *
  *  SPDX-License-Identifier: GPL-2.0
  *
@@ -17,12 +17,12 @@
 typedef struct pfe_hif_ring_tag pfe_hif_ring_t;
 
 pfe_hif_ring_t *pfe_hif_ring_create(bool_t rx, uint16_t seqnum, bool_t nocpy) __attribute__((cold));
-uint32_t pfe_hif_ring_get_len(pfe_hif_ring_t *ring) __attribute__((pure, hot));
+uint32_t pfe_hif_ring_get_len(const pfe_hif_ring_t *ring) __attribute__((pure, hot));
 errno_t pfe_hif_ring_destroy(pfe_hif_ring_t *ring) __attribute__((cold));
-void *pfe_hif_ring_get_base_pa(pfe_hif_ring_t *ring) __attribute__((pure, cold));
-void *pfe_hif_ring_get_wb_tbl_pa(pfe_hif_ring_t *ring) __attribute__((pure, cold));
-uint32_t pfe_hif_ring_get_wb_tbl_len(pfe_hif_ring_t *ring) __attribute__((pure, cold));
-errno_t pfe_hif_ring_enqueue_buf(pfe_hif_ring_t *ring, void *buf_pa, uint32_t length, bool_t lifm) __attribute__((hot));
+void *pfe_hif_ring_get_base_pa(const pfe_hif_ring_t *ring) __attribute__((pure, cold));
+void *pfe_hif_ring_get_wb_tbl_pa(const pfe_hif_ring_t *ring) __attribute__((pure, cold));
+uint32_t pfe_hif_ring_get_wb_tbl_len(const pfe_hif_ring_t *ring) __attribute__((pure, cold));
+errno_t pfe_hif_ring_enqueue_buf(pfe_hif_ring_t *ring, const void *buf_pa, uint32_t length, bool_t lifm) __attribute__((hot));
 errno_t pfe_hif_ring_dequeue_buf(pfe_hif_ring_t *ring, void **buf_pa, uint32_t *length, bool_t *lifm) __attribute__((hot));
 #ifdef PFE_CFG_HIF_TX_FIFO_FIX
 errno_t pfe_hif_ring_dequeue_plain(pfe_hif_ring_t *ring, bool_t *lifm, uint32_t *len) __attribute__((hot));
@@ -30,11 +30,9 @@ errno_t pfe_hif_ring_dequeue_plain(pfe_hif_ring_t *ring, bool_t *lifm, uint32_t
 errno_t pfe_hif_ring_dequeue_plain(pfe_hif_ring_t *ring, bool_t *lifm) __attribute__((hot));
 #endif /* PFE_CFG_HIF_TX_FIFO_FIX */
 errno_t pfe_hif_ring_drain_buf(pfe_hif_ring_t *ring, void **buf_pa) __attribute__((cold));
-bool_t pfe_hif_ring_is_below_wm(pfe_hif_ring_t *ring) __attribute__((pure, hot));
-void pfe_hif_ring_lock(pfe_hif_ring_t *ring) __attribute__((hot));
-void pfe_hif_ring_unlock(pfe_hif_ring_t *ring) __attribute__((hot));
-void pfe_hif_ring_invalidate(pfe_hif_ring_t *ring) __attribute__((cold));
-uint32_t pfe_hif_ring_get_fill_level(pfe_hif_ring_t *ring) __attribute__((pure, hot));
+bool_t spfe_hif_ring_is_below_wm(const pfe_hif_ring_t *ring) __attribute__((pure, hot));
+void pfe_hif_ring_invalidate(const pfe_hif_ring_t *ring) __attribute__((cold));
+uint32_t pfe_hif_ring_get_fill_level(const pfe_hif_ring_t *ring) __attribute__((pure, hot));
 uint32_t pfe_hif_ring_dump(pfe_hif_ring_t *ring, char_t *name, char_t *buf, uint32_t size, uint8_t verb_level);
 #if defined(PFE_CFG_HIF_NOCPY_DIRECT)
 void pfe_hif_ring_set_egress_if(pfe_hif_ring_t *ring, pfe_ct_phy_if_id_t id) __attribute__((hot));
diff --git a/sw/pfe_platform/public/pfe_if_db.h b/sw/pfe_platform/public/pfe_if_db.h
index 3140a1d..9673b4f 100644
--- a/sw/pfe_platform/public/pfe_if_db.h
+++ b/sw/pfe_platform/public/pfe_if_db.h
@@ -1,5 +1,5 @@
 /* =========================================================================
- *  Copyright 2017-2020 NXP
+ *  Copyright 2017-2021 NXP
  *
  *  SPDX-License-Identifier: GPL-2.0
  *
@@ -42,18 +42,17 @@ typedef enum
 typedef struct pfe_if_db_tag pfe_if_db_t;
 
 pfe_if_db_t * pfe_if_db_create(pfe_if_db_type_t type);
-void pfe_if_db_destroy(pfe_if_db_t *db);
+void pfe_if_db_destroy(const pfe_if_db_t *db);
 errno_t pfe_if_db_add(pfe_if_db_t *db, uint32_t session_id, void *iface, pfe_ct_phy_if_id_t owner);
 errno_t pfe_if_db_remove(pfe_if_db_t *db, uint32_t session_id, pfe_if_db_entry_t *entry);
-errno_t pfe_log_if_db_drop_all(pfe_if_db_t *db, uint32_t session_id);
+errno_t pfe_log_if_db_drop_all(const pfe_if_db_t *db, uint32_t session_id);
 errno_t pfe_if_db_lock(uint32_t *session_id);
 errno_t pfe_if_db_lock_owned(uint32_t owner_id);
 errno_t pfe_if_db_unlock(uint32_t session_id);
 errno_t pfe_if_db_get_first(pfe_if_db_t *db, uint32_t session_id, pfe_if_db_get_criterion_t crit, void *arg, pfe_if_db_entry_t **db_entry);
 errno_t pfe_if_db_get_next(pfe_if_db_t *db, uint32_t session_id, pfe_if_db_entry_t **db_entry);
-uint32_t pfe_if_db_get_count(pfe_if_db_t *db, pfe_if_db_get_criterion_t crit, void *arg);
-pfe_phy_if_t *pfe_if_db_entry_get_phy_if(pfe_if_db_entry_t *entry) __attribute__((pure));
-pfe_log_if_t *pfe_if_db_entry_get_log_if(pfe_if_db_entry_t *entry) __attribute__((pure));
-errno_t pfe_if_db_get_single(pfe_if_db_t *db, uint32_t session_id, pfe_if_db_get_criterion_t crit, void *arg, pfe_if_db_entry_t **db_entry);
+pfe_phy_if_t *pfe_if_db_entry_get_phy_if(const pfe_if_db_entry_t *entry) __attribute__((pure));
+pfe_log_if_t *pfe_if_db_entry_get_log_if(const pfe_if_db_entry_t *entry) __attribute__((pure));
+errno_t pfe_if_db_get_single(const pfe_if_db_t *db, uint32_t session_id, pfe_if_db_get_criterion_t crit, void *arg, pfe_if_db_entry_t **db_entry);
 
 #endif /* PFE_LOG_IF_DB_H_ */
diff --git a/sw/pfe_platform/public/pfe_l2br.h b/sw/pfe_platform/public/pfe_l2br.h
index bc59ec5..0b01803 100644
--- a/sw/pfe_platform/public/pfe_l2br.h
+++ b/sw/pfe_platform/public/pfe_l2br.h
@@ -67,7 +67,11 @@ void pfe_l2br_static_entry_get_mac(pfe_l2br_static_entry_t *static_ent, pfe_mac_
 pfe_l2br_static_entry_t *pfe_l2br_static_entry_get_first(pfe_l2br_t *bridge, pfe_l2br_static_ent_get_crit_t crit, void* arg1, void *arg2);
 pfe_l2br_static_entry_t *pfe_l2br_static_entry_get_next(pfe_l2br_t *bridge);
 errno_t pfe_l2br_static_entry_get_local_flag(pfe_l2br_t *bridge, pfe_l2br_static_entry_t* static_ent, bool_t *local);
+errno_t pfe_l2br_static_entry_get_src_discard_flag(pfe_l2br_t *bridge, pfe_l2br_static_entry_t* static_ent, bool_t *src_discard);
+errno_t pfe_l2br_static_entry_get_dst_discard_flag(pfe_l2br_t *bridge, pfe_l2br_static_entry_t* static_ent, bool_t *dst_discard);
 errno_t pfe_l2br_static_entry_set_local_flag(pfe_l2br_t *bridge, pfe_l2br_static_entry_t* static_ent, bool_t local);
+errno_t pfe_l2br_static_entry_set_src_discard_flag(pfe_l2br_t *bridge, pfe_l2br_static_entry_t* static_ent, bool_t src_discard);
+errno_t pfe_l2br_static_entry_set_dst_discard_flag(pfe_l2br_t *bridge, pfe_l2br_static_entry_t* static_ent, bool_t dst_discard);
 
 pfe_l2br_t *pfe_l2br_create(pfe_class_t *class, uint16_t def_vlan, pfe_l2br_table_t *mac_table, pfe_l2br_table_t *vlan_table);
 errno_t pfe_l2br_destroy(pfe_l2br_t *bridge);
@@ -77,5 +81,8 @@ pfe_l2br_domain_t *pfe_l2br_get_first_domain(pfe_l2br_t *bridge, pfe_l2br_domain
 pfe_l2br_domain_t *pfe_l2br_get_next_domain(pfe_l2br_t *bridge);
 uint32_t pfe_l2br_get_text_statistics(pfe_l2br_t *bridge, char_t *buf, uint32_t buf_len, uint8_t verb_level);
 
+errno_t pfe_l2br_flush_learned(pfe_l2br_t *bridge);
+errno_t pfe_l2br_flush_static(pfe_l2br_t *bridge);
+errno_t pfe_l2br_flush_all(pfe_l2br_t *bridge);
 
 #endif /* PUBLIC_PFE_L2BR_H_ */
diff --git a/sw/pfe_platform/public/pfe_l2br_table.h b/sw/pfe_platform/public/pfe_l2br_table.h
index 19142e4..634e04b 100644
--- a/sw/pfe_platform/public/pfe_l2br_table.h
+++ b/sw/pfe_platform/public/pfe_l2br_table.h
@@ -32,8 +32,10 @@ typedef struct __pfe_l2br_table_tag pfe_l2br_table_t;
 typedef struct __pfe_l2br_table_iterator_tag pfe_l2br_table_iterator_t;
 typedef struct __pfe_l2br_table_entry_tag pfe_l2br_table_entry_t;
 
-pfe_l2br_table_t *pfe_l2br_table_create(void *cbus_base_va, pfe_l2br_table_type_t type);
+pfe_l2br_table_t *pfe_l2br_table_create(addr_t cbus_base_va, pfe_l2br_table_type_t type);
 void pfe_l2br_table_destroy(pfe_l2br_table_t *l2br);
+errno_t pfe_l2br_table_init(pfe_l2br_table_t *l2br);
+errno_t pfe_l2br_table_flush(pfe_l2br_table_t *l2br);
 errno_t pfe_l2br_table_add_entry(pfe_l2br_table_t *l2br, pfe_l2br_table_entry_t *entry);
 errno_t pfe_l2br_table_del_entry(pfe_l2br_table_t *l2br, pfe_l2br_table_entry_t *entry);
 errno_t pfe_l2br_table_update_entry(pfe_l2br_table_t *l2br, pfe_l2br_table_entry_t *entry);
@@ -42,6 +44,7 @@ pfe_l2br_table_iterator_t *pfe_l2br_iterator_create(void);
 errno_t pfe_l2br_iterator_destroy(pfe_l2br_table_iterator_t *l2t_iter);
 errno_t pfe_l2br_table_get_first(pfe_l2br_table_t *l2br, pfe_l2br_table_iterator_t *l2t_iter, pfe_l2br_table_get_criterion_t crit, pfe_l2br_table_entry_t *entry);
 errno_t pfe_l2br_table_get_next(pfe_l2br_table_t *l2br, pfe_l2br_table_iterator_t *l2t_iter, pfe_l2br_table_entry_t *entry);
+errno_t pfe_l2br_iterator_halt(pfe_l2br_table_iterator_t *inst);
 
 pfe_l2br_table_entry_t *pfe_l2br_table_entry_create(pfe_l2br_table_t *l2br);
 errno_t pfe_l2br_table_entry_destroy(pfe_l2br_table_entry_t *entry);
@@ -53,5 +56,4 @@ bool_t pfe_l2br_table_entry_is_fresh(pfe_l2br_table_entry_t *entry) __attribute_
 errno_t pfe_l2br_table_entry_set_static(pfe_l2br_table_t *l2br, pfe_l2br_table_entry_t *entry, bool_t is_static);
 bool_t pfe_l2br_table_entry_is_static(pfe_l2br_table_entry_t *entry) __attribute__((pure));
 uint32_t pfe_l2br_table_entry_to_str(pfe_l2br_table_entry_t *entry, char_t *buf, uint32_t buf_len);
-
 #endif /* PUBLIC_PFE_L2BR_TABLE_H_ */
diff --git a/sw/pfe_platform/public/pfe_log_if.h b/sw/pfe_platform/public/pfe_log_if.h
index acbf9bc..8bf5d1c 100644
--- a/sw/pfe_platform/public/pfe_log_if.h
+++ b/sw/pfe_platform/public/pfe_log_if.h
@@ -30,41 +30,45 @@ typedef struct pfe_log_if_tag pfe_log_if_t;
  */
 typedef void (* pfe_log_if_cbk_t)(pfe_log_if_t *iface, pfe_log_if_event_t event, void *arg);
 
-pfe_log_if_t *pfe_log_if_create(pfe_phy_if_t *parent, char_t *name);
-uint8_t pfe_log_if_get_id(pfe_log_if_t *iface) __attribute__((pure));
-__attribute__((pure)) pfe_phy_if_t *pfe_log_if_get_parent(pfe_log_if_t *iface);
+pfe_log_if_t *pfe_log_if_create(pfe_phy_if_t *parent, const char_t *name);
+uint8_t pfe_log_if_get_id(const pfe_log_if_t *iface) __attribute__((pure));
+__attribute__((pure)) pfe_phy_if_t *pfe_log_if_get_parent(const pfe_log_if_t *iface);
 errno_t pfe_log_if_set_next_dmem_ptr(pfe_log_if_t *iface, addr_t next_dmem_ptr);
 errno_t pfe_log_if_get_next_dmem_ptr(pfe_log_if_t *iface, addr_t *next_dmem_ptr);
-errno_t pfe_log_if_get_dmem_base(pfe_log_if_t *iface, addr_t *dmem_base);
+errno_t pfe_log_if_get_dmem_base(const pfe_log_if_t *iface, addr_t *dmem_base);
 void pfe_log_if_destroy(pfe_log_if_t *iface);
 errno_t pfe_log_if_set_match_or(pfe_log_if_t *iface);
 errno_t pfe_log_if_set_match_and(pfe_log_if_t *iface);
 bool_t pfe_log_if_is_match_or(pfe_log_if_t *iface);
-errno_t pfe_log_if_set_match_rules(pfe_log_if_t *iface, pfe_ct_if_m_rules_t rules, pfe_ct_if_m_args_t *args);
+errno_t pfe_log_if_set_match_rules(pfe_log_if_t *iface, pfe_ct_if_m_rules_t rules, const pfe_ct_if_m_args_t *args);
 errno_t pfe_log_if_get_match_rules(pfe_log_if_t *iface, pfe_ct_if_m_rules_t *rules, pfe_ct_if_m_args_t *args);
-errno_t pfe_log_if_add_match_rule(pfe_log_if_t *iface, pfe_ct_if_m_rules_t rule, void *arg, uint32_t arg_len);
+errno_t pfe_log_if_add_match_rule(pfe_log_if_t *iface, pfe_ct_if_m_rules_t rule, const void *arg, uint32_t arg_len);
 errno_t pfe_log_if_del_match_rule(pfe_log_if_t *iface, pfe_ct_if_m_rules_t rule);
-errno_t pfe_log_if_add_mac_addr(pfe_log_if_t *iface, pfe_mac_addr_t addr, pfe_ct_phy_if_id_t owner);
+errno_t pfe_log_if_add_mac_addr(pfe_log_if_t *iface, const pfe_mac_addr_t addr, pfe_drv_id_t owner);
+errno_t pfe_log_if_del_mac_addr(pfe_log_if_t *iface, const pfe_mac_addr_t addr);
+pfe_mac_db_t *pfe_log_if_get_mac_db(const pfe_log_if_t *iface);
 errno_t pfe_log_if_get_mac_addr(pfe_log_if_t *iface, pfe_mac_addr_t addr);
-errno_t pfe_log_if_flush_mac_addrs(pfe_log_if_t *iface, pfe_flush_mode_t mode, pfe_ct_phy_if_id_t owner);
+errno_t pfe_log_if_flush_mac_addrs(pfe_log_if_t *iface, pfe_mac_db_crit_t crit, pfe_mac_type_t type, pfe_drv_id_t owner);
 errno_t pfe_log_if_get_egress_ifs(pfe_log_if_t *iface, uint32_t *egress);
 errno_t pfe_log_if_set_egress_ifs(pfe_log_if_t *iface, uint32_t egress);
-errno_t pfe_log_if_add_egress_if(pfe_log_if_t *iface, pfe_phy_if_t *phy_if);
-errno_t pfe_log_if_del_egress_if(pfe_log_if_t *iface, pfe_phy_if_t *phy_if);
-errno_t pfe_log_if_clear_mac_addr(pfe_log_if_t *iface);
+errno_t pfe_log_if_add_egress_if(pfe_log_if_t *iface, const pfe_phy_if_t *phy_if);
+errno_t pfe_log_if_del_egress_if(pfe_log_if_t *iface, const pfe_phy_if_t *phy_if);
 errno_t pfe_log_if_enable(pfe_log_if_t *iface);
 errno_t pfe_log_if_disable(pfe_log_if_t *iface);
 bool_t pfe_log_if_is_enabled(pfe_log_if_t *iface) __attribute__((pure));
 errno_t pfe_log_if_promisc_enable(pfe_log_if_t *iface);
 errno_t pfe_log_if_promisc_disable(pfe_log_if_t *iface);
-errno_t pfe_log_if_allmulti_enable(pfe_log_if_t *iface);
-errno_t pfe_log_if_allmulti_disable(pfe_log_if_t *iface);
+errno_t pfe_log_if_loopback_enable(pfe_log_if_t *iface);
+errno_t pfe_log_if_loopback_disable(pfe_log_if_t *iface);
+errno_t pfe_log_if_allmulti_enable(const pfe_log_if_t *iface);
+errno_t pfe_log_if_allmulti_disable(const pfe_log_if_t *iface);
 bool_t pfe_log_if_is_promisc(pfe_log_if_t *iface) __attribute__((pure));
-const char_t *pfe_log_if_get_name(pfe_log_if_t *iface) __attribute__((pure));
+bool_t pfe_log_if_is_loopback(pfe_log_if_t *iface) __attribute__((pure));
+const char_t *pfe_log_if_get_name(const pfe_log_if_t *iface) __attribute__((pure));
 errno_t pfe_log_if_discard_enable(pfe_log_if_t *iface);
 errno_t pfe_log_if_discard_disable(pfe_log_if_t *iface);
 bool_t pfe_log_if_is_discard(pfe_log_if_t *iface);
-errno_t pfe_log_if_get_stats(pfe_log_if_t *iface, pfe_ct_class_algo_stats_t *stat);
-uint32_t pfe_log_if_get_text_statistics(pfe_log_if_t *iface, char_t *buf, uint32_t buf_len, uint8_t verb_level);
+errno_t pfe_log_if_get_stats(const pfe_log_if_t *iface, pfe_ct_class_algo_stats_t *stat);
+uint32_t pfe_log_if_get_text_statistics(const pfe_log_if_t *iface, char_t *buf, uint32_t buf_len, uint8_t verb_level);
 
 #endif /* PUBLIC_PFE_LOG_IF_H_ */
diff --git a/sw/pfe_platform/public/pfe_mac_db.h b/sw/pfe_platform/public/pfe_mac_db.h
new file mode 100644
index 0000000..3823300
--- /dev/null
+++ b/sw/pfe_platform/public/pfe_mac_db.h
@@ -0,0 +1,50 @@
+/* =========================================================================
+ *  
+ *  Copyright (c) 2019 Imagination Technologies Limited
+ *  Copyright 2021 NXP
+ *
+ *  SPDX-License-Identifier: GPL-2.0
+ *
+ * ========================================================================= */
+
+#ifndef PUBLIC_PFE_MAC_DB_H_
+#define PUBLIC_PFE_MAC_DB_H_
+
+#include "linked_list.h"
+#include "oal_types.h"
+
+#include "pfe_ct.h"
+#include "pfe_emac.h"
+
+#define PFE_MAC_DB_LOCKED	TRUE
+#define PFE_MAC_DB_UNLOCKED	FALSE
+
+typedef struct
+{
+	pfe_mac_addr_t addr;		/*	The MAC address */
+	LLIST_t iterator;			/*	List chain entry */
+	pfe_drv_id_t owner;			/*	Identification of the driver that owns this entry */
+} pfe_mac_db_list_entry_t;
+
+/**
+ * @brief	Possible rules to get or flush some sort of MAC addresses
+ */
+typedef enum __attribute__ ((packed)) {
+	MAC_DB_CRIT_BY_TYPE = 0U,
+	MAC_DB_CRIT_BY_OWNER,
+	MAC_DB_CRIT_BY_OWNER_AND_TYPE,
+	MAC_DB_CRIT_ALL,
+	MAC_DB_CRIT_INVALID,
+} pfe_mac_db_crit_t;
+
+typedef struct pfe_mac_db_tag pfe_mac_db_t;
+
+pfe_mac_db_t *pfe_mac_db_create(void);
+errno_t pfe_mac_db_destroy(pfe_mac_db_t *db);
+errno_t pfe_mac_db_add_addr(pfe_mac_db_t *db, const pfe_mac_addr_t addr, pfe_drv_id_t owner);
+errno_t pfe_mac_db_del_addr(pfe_mac_db_t *db, const pfe_mac_addr_t addr);
+errno_t pfe_mac_db_flush(pfe_mac_db_t *db, pfe_mac_db_crit_t crit, pfe_mac_type_t type, pfe_drv_id_t owner);
+errno_t pfe_mac_db_get_first_addr(pfe_mac_db_t *db, pfe_mac_db_crit_t crit, pfe_mac_type_t type, pfe_drv_id_t owner, pfe_mac_addr_t addr);
+errno_t pfe_mac_db_get_next_addr(pfe_mac_db_t *db, pfe_mac_addr_t addr);
+
+#endif /* PUBLIC_PFE_MAC_DB_H_ */
diff --git a/sw/pfe_platform/public/pfe_pe.h b/sw/pfe_platform/public/pfe_pe.h
index c60dd80..2aede7b 100644
--- a/sw/pfe_platform/public/pfe_pe.h
+++ b/sw/pfe_platform/public/pfe_pe.h
@@ -15,42 +15,39 @@
 
 typedef struct pfe_pe_tag pfe_pe_t;
 
-pfe_pe_t * pfe_pe_create(void *cbus_base_va, pfe_ct_pe_type_t type, uint8_t id);
+pfe_pe_t * pfe_pe_create(addr_t cbus_base_va, pfe_ct_pe_type_t type, uint8_t id);
 void pfe_pe_set_dmem(pfe_pe_t *pe, addr_t elf_base, addr_t len);
 void pfe_pe_set_imem(pfe_pe_t *pe, addr_t elf_base, addr_t len);
 void pfe_pe_set_lmem(pfe_pe_t *pe, addr_t elf_base, addr_t len);
-void pfe_pe_set_ddr(pfe_pe_t *pe, void *base_pa, void *base_va, addr_t len);
+void pfe_pe_set_ddr(pfe_pe_t *pe, addr_t base_pa, addr_t base_va, addr_t len);
 void pfe_pe_set_iaccess(pfe_pe_t *pe, uint32_t wdata_reg, uint32_t rdata_reg, uint32_t addr_reg);
 errno_t pfe_pe_load_firmware(pfe_pe_t *pe, const void *elf);
-errno_t pfe_pe_get_mmap(pfe_pe_t *pe, pfe_ct_pe_mmap_t *mmap);
-void pfe_pe_memcpy_from_host_to_dmem_32(pfe_pe_t *pe, addr_t dst, const void *src, uint32_t len);
-void pfe_pe_memcpy_from_dmem_to_host_32(pfe_pe_t *pe, void *dst, addr_t src, uint32_t len);
-errno_t pfe_pe_gather_memcpy_from_dmem_to_host_32(pfe_pe_t **pe, int32_t pe_count, void *dst, addr_t src, uint32_t buffer_len, uint32_t read_len);
-void pfe_pe_memcpy_from_host_to_imem_32(pfe_pe_t *pe, addr_t dst, const void *src, uint32_t len);
-void pfe_pe_memcpy_from_imem_to_host_32(pfe_pe_t *pe, void *dst, addr_t src, uint32_t len);
+errno_t pfe_pe_get_mmap(const pfe_pe_t *pe, pfe_ct_pe_mmap_t *mmap);
+void pfe_pe_memcpy_from_host_to_dmem_32(pfe_pe_t *pe, addr_t dst_addr, const void *src_ptr, uint32_t len);
+void pfe_pe_memcpy_from_dmem_to_host_32(pfe_pe_t *pe, void *dst_ptr, addr_t src_addr, uint32_t len);
+errno_t pfe_pe_gather_memcpy_from_dmem_to_host_32(pfe_pe_t **pe, int32_t pe_count, void *dst_ptr, addr_t src_addr, uint32_t buffer_len, uint32_t read_len);
+void pfe_pe_memcpy_from_host_to_imem_32(pfe_pe_t *pe, addr_t dst_addr, const void *src_ptr, uint32_t len);
+void pfe_pe_memcpy_from_imem_to_host_32(pfe_pe_t *pe, void *dst_ptr, addr_t src_addr, uint32_t len);
 void pfe_pe_dmem_memset(pfe_pe_t *pe, uint8_t val, addr_t addr, uint32_t len);
 void pfe_pe_imem_memset(pfe_pe_t *pe, uint8_t val, addr_t addr, uint32_t len);
 errno_t pfe_pe_get_fw_feature_entry(pfe_pe_t *pe, uint32_t id, pfe_ct_feature_desc_t **entry);
-errno_t pfe_pe_get_fw_feature_state(pfe_pe_t *pe, uint32_t position, uint8_t *enable);
-errno_t pfe_pe_set_fw_feature_state(pfe_pe_t *pe, const uint32_t position, const uint8_t enable);
-char *pfe_pe_get_fw_feature_string(pfe_pe_t *pe, uint32_t location);
 errno_t pfe_pe_get_pe_stats(pfe_pe_t *pe, uint32_t addr, pfe_ct_pe_stats_t *stats);
 errno_t pfe_pe_get_classify_stats(pfe_pe_t *pe, uint32_t addr, pfe_ct_classify_stats_t *stats);
 errno_t pfe_pe_get_class_algo_stats(pfe_pe_t *pe, uint32_t addr, pfe_ct_class_algo_stats_t *stats);
-uint32_t pfe_pe_stat_to_str(pfe_ct_class_algo_stats_t *stat, char *buf, uint32_t buf_len, uint8_t verb_level);
+uint32_t pfe_pe_stat_to_str(const pfe_ct_class_algo_stats_t *stat, char *buf, uint32_t buf_len, uint8_t verb_level);
 uint32_t pfe_pe_get_text_statistics(pfe_pe_t *pe, char_t *buf, uint32_t buf_len, uint8_t verb_level);
 void pfe_pe_destroy(pfe_pe_t *pe);
-errno_t pfe_pe_check_mmap(pfe_pe_t *pe);
+errno_t pfe_pe_check_mmap(const pfe_pe_t *pe);
 errno_t pfe_pe_get_fw_errors(pfe_pe_t *pe);
 errno_t pfe_pe_get_data(pfe_pe_t *pe, pfe_ct_buffer_t *buf);
 errno_t pfe_pe_put_data(pfe_pe_t *pe, pfe_ct_buffer_t *buf);
 errno_t pfe_pe_mem_lock(pfe_pe_t *pe);
 errno_t pfe_pe_mem_unlock(pfe_pe_t *pe);
 errno_t pfe_pe_lock(pfe_pe_t *pe);
-void pfe_pe_memcpy_from_dmem_to_host_32_nolock(pfe_pe_t *pe, void *dst, addr_t src, uint32_t len);
-void pfe_pe_memcpy_from_host_to_dmem_32_nolock(pfe_pe_t *pe, addr_t dst, const void *src, uint32_t len);
+void pfe_pe_memcpy_from_dmem_to_host_32_nolock(pfe_pe_t *pe, void *dst_ptr, addr_t src_addr, uint32_t len);
+void pfe_pe_memcpy_from_host_to_dmem_32_nolock(pfe_pe_t *pe, addr_t dst_addr, const void *src_ptr, uint32_t len);
 errno_t pfe_pe_unlock(pfe_pe_t *pe);
-char *pfe_pe_get_fw_feature_str_base(pfe_pe_t *pe);
+char *pfe_pe_get_fw_feature_str_base(const pfe_pe_t *pe);
 
 
 #endif /* PFE_PE_H_ */
diff --git a/sw/pfe_platform/public/pfe_phy_if.h b/sw/pfe_platform/public/pfe_phy_if.h
index 2f85729..3ca494b 100644
--- a/sw/pfe_platform/public/pfe_phy_if.h
+++ b/sw/pfe_platform/public/pfe_phy_if.h
@@ -13,6 +13,7 @@
 #include "oal_types.h"
 #include "pfe_ct.h"
 #include "pfe_emac.h"
+#include "pfe_mac_db.h"
 #include "pfe_hif_chnl.h"
 #include "pfe_class.h"
 
@@ -34,19 +35,19 @@ typedef struct pfe_phy_if_tag pfe_phy_if_t;
  */
 typedef void (* pfe_phy_if_cbk_t)(pfe_phy_if_t *iface, pfe_phy_if_event_t event, void *arg);
 
-pfe_phy_if_t *pfe_phy_if_create(pfe_class_t *class, pfe_ct_phy_if_id_t id, char_t *name);
-bool_t pfe_phy_if_has_log_if(pfe_phy_if_t *iface, pfe_log_if_t *log_if);
-errno_t pfe_phy_if_del_log_if(pfe_phy_if_t *iface, pfe_log_if_t *log_if);
+pfe_phy_if_t *pfe_phy_if_create(pfe_class_t *class, pfe_ct_phy_if_id_t id, const char_t *name);
+bool_t pfe_phy_if_has_log_if(pfe_phy_if_t *iface, const pfe_log_if_t *log_if);
+errno_t pfe_phy_if_del_log_if(pfe_phy_if_t *iface, const pfe_log_if_t *log_if);
 errno_t pfe_phy_if_add_log_if(pfe_phy_if_t *iface, pfe_log_if_t *log_if);
 errno_t pfe_phy_if_bind_emac(pfe_phy_if_t *iface, pfe_emac_t *emac);
-pfe_emac_t *pfe_phy_if_get_emac(pfe_phy_if_t *iface);
+pfe_emac_t *pfe_phy_if_get_emac(const pfe_phy_if_t *iface);
 errno_t pfe_phy_if_bind_hif(pfe_phy_if_t *iface, pfe_hif_chnl_t *hif);
-pfe_hif_chnl_t *pfe_phy_if_get_hif(pfe_phy_if_t *iface);
+pfe_hif_chnl_t *pfe_phy_if_get_hif(const pfe_phy_if_t *iface);
 errno_t pfe_phy_if_bind_util(pfe_phy_if_t *iface);
-pfe_ct_phy_if_id_t pfe_phy_if_get_id(pfe_phy_if_t *iface) __attribute__((pure));
-char_t *pfe_phy_if_get_name(pfe_phy_if_t *iface) __attribute__((pure));
-errno_t pfe_phy_if_destroy(pfe_phy_if_t *iface);
-pfe_class_t *pfe_phy_if_get_class(pfe_phy_if_t *iface) __attribute__((pure));
+pfe_ct_phy_if_id_t pfe_phy_if_get_id(const pfe_phy_if_t *iface) __attribute__((pure));
+char_t *pfe_phy_if_get_name(const pfe_phy_if_t *iface) __attribute__((pure));
+void pfe_phy_if_destroy(pfe_phy_if_t *iface);
+pfe_class_t *pfe_phy_if_get_class(const pfe_phy_if_t *iface) __attribute__((pure));
 errno_t pfe_phy_if_set_block_state(pfe_phy_if_t *iface, pfe_ct_block_state_t block_state);
 errno_t pfe_phy_if_get_block_state(pfe_phy_if_t *iface, pfe_ct_block_state_t *block_state);
 pfe_ct_if_op_mode_t pfe_phy_if_get_op_mode(pfe_phy_if_t *iface);
@@ -55,21 +56,32 @@ bool_t pfe_phy_if_is_enabled(pfe_phy_if_t *iface);
 errno_t pfe_phy_if_enable(pfe_phy_if_t *iface);
 errno_t pfe_phy_if_disable(pfe_phy_if_t *iface);
 bool_t pfe_phy_if_is_promisc(pfe_phy_if_t *iface);
+errno_t pfe_phy_if_loadbalance_enable(pfe_phy_if_t *iface);
+errno_t pfe_phy_if_loadbalance_disable(pfe_phy_if_t *iface);
 errno_t pfe_phy_if_promisc_enable(pfe_phy_if_t *iface);
 errno_t pfe_phy_if_promisc_disable(pfe_phy_if_t *iface);
+errno_t pfe_phy_if_loopback_enable(pfe_phy_if_t *iface);
+errno_t pfe_phy_if_loopback_disable(pfe_phy_if_t *iface);
 errno_t pfe_phy_if_allmulti_enable(pfe_phy_if_t *iface);
 errno_t pfe_phy_if_allmulti_disable(pfe_phy_if_t *iface);
-errno_t pfe_phy_if_add_mac_addr(pfe_phy_if_t *iface, pfe_mac_addr_t addr, pfe_ct_phy_if_id_t owner);
-errno_t pfe_phy_if_del_mac_addr(pfe_phy_if_t *iface, pfe_mac_addr_t addr);
+errno_t pfe_phy_if_add_mac_addr(pfe_phy_if_t *iface, const pfe_mac_addr_t addr, pfe_drv_id_t owner);
+errno_t pfe_phy_if_del_mac_addr(pfe_phy_if_t *iface, const pfe_mac_addr_t addr);
+pfe_mac_db_t *pfe_phy_if_get_mac_db(const pfe_phy_if_t *iface);
 errno_t pfe_phy_if_get_mac_addr(pfe_phy_if_t *iface, pfe_mac_addr_t addr);
-errno_t pfe_phy_if_flush_mac_addrs(pfe_phy_if_t *iface, pfe_flush_mode_t mode, pfe_ct_phy_if_id_t owner);
+errno_t pfe_phy_if_flush_mac_addrs(pfe_phy_if_t *iface, pfe_mac_db_crit_t crit, pfe_mac_type_t type, pfe_drv_id_t owner);
 errno_t pfe_phy_if_get_stats(pfe_phy_if_t *iface, pfe_ct_phy_if_stats_t *stat);
-uint32_t pfe_phy_if_get_text_statistics(pfe_phy_if_t *iface, char_t *buf, uint32_t buf_len, uint8_t verb_level);
+uint32_t pfe_phy_if_get_text_statistics(const pfe_phy_if_t *iface, char_t *buf, uint32_t buf_len, uint8_t verb_level);
 errno_t pfe_phy_if_set_mirroring(pfe_phy_if_t *iface, pfe_ct_phy_if_id_t mirror);
-pfe_ct_phy_if_id_t pfe_phy_if_get_mirroring(pfe_phy_if_t *iface);
-uint32_t pfe_phy_if_get_spd(pfe_phy_if_t *iface);
+pfe_ct_phy_if_id_t pfe_phy_if_get_mirroring(const pfe_phy_if_t *iface);
+uint32_t pfe_phy_if_get_spd(const pfe_phy_if_t *iface);
 errno_t pfe_phy_if_set_spd(pfe_phy_if_t *iface, uint32_t spd_addr);
 errno_t pfe_phy_if_set_ftable(pfe_phy_if_t *iface, uint32_t table);
 uint32_t pfe_phy_if_get_ftable(pfe_phy_if_t *iface);
+errno_t pfe_phy_if_set_flag(pfe_phy_if_t *iface, pfe_ct_if_flags_t flag);
+errno_t pfe_phy_if_clear_flag(pfe_phy_if_t *iface, pfe_ct_if_flags_t flag);
+pfe_ct_if_flags_t pfe_phy_if_get_flag(pfe_phy_if_t *iface, pfe_ct_if_flags_t flag);
+errno_t pfe_phy_if_get_flow_control(pfe_phy_if_t *iface, bool_t* tx_ena, bool_t* rx_ena);
+errno_t pfe_phy_if_set_tx_flow_control(pfe_phy_if_t *iface, bool_t tx_ena);
+errno_t pfe_phy_if_set_rx_flow_control(pfe_phy_if_t *iface, bool_t rx_ena);
 
 #endif /* PUBLIC_PFE_PHY_IF_H_ */
diff --git a/sw/pfe_platform/public/pfe_platform.h b/sw/pfe_platform/public/pfe_platform.h
index 03bb279..f90d68e 100644
--- a/sw/pfe_platform/public/pfe_platform.h
+++ b/sw/pfe_platform/public/pfe_platform.h
@@ -75,12 +75,14 @@ typedef struct
 	uint32_t irq_vector_safety; /* Safety IRQ number */
 	bool_t enable_util;			/* Shall be UTIL enabled? */
 	pfe_ct_phy_if_id_t local_hif; /* ID of the local interface */
+	uint32_t rtable_hash_size;	/* Size (number of entries) of hash area within routing table */
+	uint32_t rtable_collision_size;	/* Size (number of entries) of collision area within routing table */
 } pfe_platform_config_t;
 
 typedef struct
 {
 	volatile bool_t probed;
-	void *cbus_baseaddr;
+	addr_t cbus_baseaddr;
 	void *bmu_buffers_va;
 	addr_t bmu_buffers_size;
 	void *rtable_va;
@@ -130,20 +132,19 @@ typedef struct
 } pfe_platform_t;
 
 pfe_fw_t *pfe_fw_load(char_t *class_fw_name, char_t *util_fw_name);
-errno_t pfe_platform_init(pfe_platform_config_t *config);
+errno_t pfe_platform_init(const pfe_platform_config_t *config);
 errno_t pfe_platform_create_ifaces(pfe_platform_t *platform);
-errno_t pfe_platform_soft_reset(pfe_platform_t *platform);
+errno_t pfe_platform_soft_reset(const pfe_platform_t *platform);
 errno_t pfe_platform_remove(void);
-void pfe_platform_print_versions(pfe_platform_t *platform);
 pfe_platform_t *pfe_platform_get_instance(void);
-errno_t pfe_platform_register_log_if(pfe_platform_t *platform, pfe_log_if_t *log_if);
-errno_t pfe_platform_unregister_log_if(pfe_platform_t *platform, pfe_log_if_t *log_if);
-pfe_log_if_t *pfe_platform_get_log_if_by_id(pfe_platform_t *platform, uint8_t id);
-pfe_log_if_t *pfe_platform_get_log_if_by_name(pfe_platform_t *platform, char_t *name);
-pfe_phy_if_t *pfe_platform_get_phy_if_by_id(pfe_platform_t *platform, pfe_ct_phy_if_id_t id);
+errno_t pfe_platform_register_log_if(const pfe_platform_t *platform, pfe_log_if_t *log_if);
+errno_t pfe_platform_unregister_log_if(const pfe_platform_t *platform, pfe_log_if_t *log_if);
+pfe_log_if_t *pfe_platform_get_log_if_by_id(const pfe_platform_t *platform, uint8_t id);
+pfe_log_if_t *pfe_platform_get_log_if_by_name(const pfe_platform_t *platform, char_t *name);
+pfe_phy_if_t *pfe_platform_get_phy_if_by_id(const pfe_platform_t *platform, pfe_ct_phy_if_id_t id);
 #if defined(PFE_CFG_MULTI_INSTANCE_SUPPORT)
 void pfe_platform_idex_rpc_cbk(pfe_ct_phy_if_id_t sender, uint32_t id, void *buf, uint16_t buf_len, void *arg);
 #endif
-errno_t pfe_platform_get_fw_versions(pfe_platform_t *platform, pfe_ct_version_t *class_fw, pfe_ct_version_t *util_fw);
+errno_t pfe_platform_get_fw_versions(const pfe_platform_t *platform, pfe_ct_version_t *class_fw, pfe_ct_version_t *util_fw);
 
 #endif /* SRC_PFE_PLATFORM_H_ */
diff --git a/sw/pfe_platform/public/pfe_platform_cfg.h b/sw/pfe_platform/public/pfe_platform_cfg.h
index 5140acf..e258c37 100644
--- a/sw/pfe_platform/public/pfe_platform_cfg.h
+++ b/sw/pfe_platform/public/pfe_platform_cfg.h
@@ -1,7 +1,7 @@
 /* =========================================================================
  *  
  *  Copyright (c) 2019 Imagination Technologies Limited
- *  Copyright 2018-2020 NXP
+ *  Copyright 2018-2021 NXP
  *
  *  SPDX-License-Identifier: GPL-2.0
  *
@@ -180,4 +180,7 @@
 /* RO defines */
 #define PFE_CFG_RO_HDR_SIZE			0x0010UL
 
+/* Maximal count of entries within hash area of routing table */
+#define PFE_CFG_RT_HASH_ENTRIES_MAX_CNT 1048576U
+
 #endif /* SRC_PFE_PLATFORM_CFG_H_ */
diff --git a/sw/pfe_platform/public/pfe_platform_rpc.h b/sw/pfe_platform/public/pfe_platform_rpc.h
index 816dc28..2abc300 100644
--- a/sw/pfe_platform/public/pfe_platform_rpc.h
+++ b/sw/pfe_platform/public/pfe_platform_rpc.h
@@ -37,7 +37,9 @@ typedef enum __attribute__((packed))
 	PFE_PLATFORM_RPC_PFE_PHY_IF_FLUSH_MAC_ADDRS = 113U,		/* Arg: pfe_platform_rpc_pfe_phy_if_flush_mac_addrs_arg_t, Ret: None */
 	PFE_PLATFORM_RPC_PFE_PHY_IF_ALLMULTI_ENABLE = 114U,		/* Arg: pfe_platform_rpc_pfe_phy_if_allmulti_enable_arg_t, Ret: None */
 	PFE_PLATFORM_RPC_PFE_PHY_IF_ALLMULTI_DISABLE = 115U,		/* Arg: pfe_platform_rpc_pfe_phy_if_allmulti_disable_arg_t, Ret: None */
-	PFE_PLATFORM_RPC_PFE_PHY_IF_ID_COMPATIBLE_LAST = PFE_PLATFORM_RPC_PFE_PHY_IF_ALLMULTI_DISABLE, /* last entry compatible with generic phy_if structure for args*/
+	PFE_PLATFORM_RPC_PFE_PHY_IF_LOOPBACK_ENABLE = 116U,             /* Arg: pfe_platform_rpc_pfe_phy_if_loopback_enable_arg_t, Ret: None */
+	PFE_PLATFORM_RPC_PFE_PHY_IF_LOOPBACK_DISABLE = 117U,            /* Arg: pfe_platform_rpc_pfe_phy_if_loopback_disable_arg_t, Ret: None */
+	PFE_PLATFORM_RPC_PFE_PHY_IF_ID_COMPATIBLE_LAST = PFE_PLATFORM_RPC_PFE_PHY_IF_LOOPBACK_DISABLE, /* last entry compatible with generic phy_if structure for args*/
 
 	/* Lock for atomic operations */
 	PFE_PLATFORM_RPC_PFE_IF_LOCK = 190U,						/* Arg: None, Ret: None */
@@ -51,8 +53,8 @@ typedef enum __attribute__((packed))
 	PFE_PLATFORM_RPC_PFE_LOG_IF_GET_MATCH_RULES = 203U,		/* Arg: pfe_platform_rpc_pfe_log_if_get_match_rules_arg_t, Ret: pfe_platform_rpc_pfe_log_if_get_match_rules_ret_t */
 	PFE_PLATFORM_RPC_PFE_LOG_IF_ADD_MATCH_RULE = 204U,		/* Arg: pfe_platform_rpc_pfe_log_if_add_match_rule_arg_t, Ret: None */
 	PFE_PLATFORM_RPC_PFE_LOG_IF_DEL_MATCH_RULE = 205U,		/* Arg: pfe_platform_rpc_pfe_log_if_del_match_rule_arg_t, Ret: None */
-	PFE_PLATFORM_RPC_PFE_LOG_IF_ADD_MAC_ADDR = 206U,			/* Arg: pfe_platform_rpc_pfe_log_if_add_mac_addr_arg_t, Ret: None */
-	PFE_PLATFORM_RPC_PFE_LOG_IF_CLEAR_MAC_ADDR = 207U,		/* Arg: pfe_platform_rpc_pfe_log_if_clear_mac_addr_arg_t, Ret: None */
+	PFE_PLATFORM_RPC_PFE_LOG_IF_ADD_MAC_ADDR = 206U,		/* Arg: pfe_platform_rpc_pfe_log_if_add_mac_addr_arg_t, Ret: None */
+	PFE_PLATFORM_RPC_PFE_LOG_IF_DEL_MAC_ADDR = 207U,		/* Arg: pfe_platform_rpc_pfe_log_if_del_mac_addr_arg_t, Ret: None */
 	PFE_PLATFORM_RPC_PFE_LOG_IF_ADD_EGRESS_IF = 208U,		/* Arg: pfe_platform_rpc_pfe_log_if_add_egress_if_arg_t, Ret: None */
 	PFE_PLATFORM_RPC_PFE_LOG_IF_DEL_EGRESS_IF = 209U,		/* Arg: pfe_platform_rpc_pfe_log_if_del_egress_if_arg_t, Ret: None */
 	PFE_PLATFORM_RPC_PFE_LOG_IF_ENABLE = 210U,				/* Arg: pfe_platform_rpc_pfe_log_if_enable_arg_t, Ret: None */
@@ -63,13 +65,16 @@ typedef enum __attribute__((packed))
 	PFE_PLATFORM_RPC_PFE_LOG_IF_IS_PROMISC = 215U,			/* Arg: pfe_platform_rpc_pfe_log_if_is_promisc_arg_t, Ret: pfe_platform_rpc_pfe_log_if_is_enabled_ret_t */
 	PFE_PLATFORM_RPC_PFE_LOG_IF_GET_EGRESS = 216U,			/* Arg: pfe_platform_rpc_pfe_log_if_get_egress_arg_t, Ret: pfe_platform_rpc_pfe_log_if_get_egress_ret_t */
 	PFE_PLATFORM_RPC_PFE_LOG_IF_IS_MATCH_OR = 217U,			/* Arg: pfe_platform_rpc_pfe_log_if_is_match_or_arg_t, Ret: pfe_platform_rpc_pfe_log_if_is_match_or_ret_t */
-	PFE_PLATFORM_RPC_PFE_LOG_IF_SET_MATCH_OR = 218U,			/* Arg: pfe_platform_rpc_pfe_log_if_set_match_or_arg_t, Ret: None */
+	PFE_PLATFORM_RPC_PFE_LOG_IF_SET_MATCH_OR = 218U,		/* Arg: pfe_platform_rpc_pfe_log_if_set_match_or_arg_t, Ret: None */
 	PFE_PLATFORM_RPC_PFE_LOG_IF_SET_MATCH_AND = 219U,		/* Arg: pfe_platform_rpc_pfe_log_if_set_match_andr_arg_t, Ret: None */
 	PFE_PLATFORM_RPC_PFE_LOG_IF_STATS = 220U,				/* Arg: pfe_platform_rpc_pfe_log_if_stats_arg_t, Ret: pfe_platform_rpc_pfe_log_if_stats_ret_t */
 	PFE_PLATFORM_RPC_PFE_LOG_IF_FLUSH_MAC_ADDRS = 221U,		/* Arg: pfe_platform_rpc_pfe_log_if_flush_mac_addrs_arg_t, Ret: None */
 	PFE_PLATFORM_RPC_PFE_LOG_IF_ALLMULTI_ENABLE = 222U,		/* Arg: pfe_platform_rpc_pfe_log_if_allmulti_enable_arg_t, Ret: None */
 	PFE_PLATFORM_RPC_PFE_LOG_IF_ALLMULTI_DISABLE = 223U,		/* Arg: pfe_platform_rpc_pfe_log_if_allmulti_disable_arg_t, Ret: None */
-	PFE_PLATFORM_RPC_PFE_LOG_IF_ID_COMPATIBLE_LAST = PFE_PLATFORM_RPC_PFE_LOG_IF_ALLMULTI_DISABLE /* last entry compatible with generic log_if structure for args*/
+	PFE_PLATFORM_RPC_PFE_LOG_IF_LOOPBACK_ENABLE = 224U,              /* Arg: pfe_platform_rpc_pfe_log_if_loopback_enable_arg_t, Ret: None */
+	PFE_PLATFORM_RPC_PFE_LOG_IF_LOOPBACK_DISABLE = 225U,             /* Arg: pfe_platform_rpc_pfe_log_if_loopback_disable_arg_t, Ret: None */
+
+	PFE_PLATFORM_RPC_PFE_LOG_IF_ID_COMPATIBLE_LAST = PFE_PLATFORM_RPC_PFE_LOG_IF_LOOPBACK_DISABLE /* last entry compatible with generic log_if structure for args*/
 } pfe_platform_rpc_code_t;
 
 /* Generic log if type */
@@ -111,8 +116,6 @@ typedef pfe_platform_rpc_pfe_log_if_generic_t pfe_platform_rpc_pfe_log_if_destro
 ct_assert(0U == offsetof(pfe_platform_rpc_pfe_log_if_destroy_arg_t, log_if_id));
 typedef pfe_platform_rpc_pfe_log_if_generic_t pfe_platform_rpc_pfe_log_if_get_match_rules_arg_t;
 ct_assert(0U == offsetof(pfe_platform_rpc_pfe_log_if_get_match_rules_arg_t, log_if_id));
-typedef pfe_platform_rpc_pfe_log_if_generic_t pfe_platform_rpc_pfe_log_if_clear_mac_addr_arg_t;
-ct_assert(0U == offsetof(pfe_platform_rpc_pfe_log_if_clear_mac_addr_arg_t, log_if_id));
 typedef pfe_platform_rpc_pfe_log_if_generic_t pfe_platform_rpc_pfe_log_if_enable_arg_t;
 ct_assert(0U == offsetof(pfe_platform_rpc_pfe_log_if_enable_arg_t, log_if_id));
 typedef pfe_platform_rpc_pfe_log_if_generic_t pfe_platform_rpc_pfe_log_if_disable_arg_t;
@@ -139,11 +142,16 @@ typedef pfe_platform_rpc_pfe_log_if_generic_t pfe_platform_rpc_pfe_log_if_allmul
 ct_assert(0U == offsetof(pfe_platform_rpc_pfe_log_if_allmulti_enable_arg_t, log_if_id));
 typedef pfe_platform_rpc_pfe_log_if_generic_t pfe_platform_rpc_pfe_log_if_allmulti_disable_arg_t;
 ct_assert(0U == offsetof(pfe_platform_rpc_pfe_log_if_allmulti_disable_arg_t, log_if_id));
+typedef pfe_platform_rpc_pfe_log_if_generic_t pfe_platform_rpc_pfe_log_if_loopback_enable_arg_t;
+ct_assert(0U == offsetof(pfe_platform_rpc_pfe_log_if_loopback_enable_arg_t, log_if_id));
+typedef pfe_platform_rpc_pfe_log_if_generic_t pfe_platform_rpc_pfe_log_if_loopback_disable_arg_t;
+ct_assert(0U == offsetof(pfe_platform_rpc_pfe_log_if_loopback_disable_arg_t, log_if_id));
 
 typedef struct __attribute__((packed, aligned(4))) __pfe_platform_rpc_pfe_log_if_flush_mac_addrs_arg_tag
 {
 	uint8_t log_if_id;
-	pfe_flush_mode_t mode;
+	pfe_mac_db_crit_t crit;
+	pfe_mac_type_t type;
 } pfe_platform_rpc_pfe_log_if_flush_mac_addrs_arg_t;
 ct_assert(0U == offsetof(pfe_platform_rpc_pfe_log_if_flush_mac_addrs_arg_t, log_if_id));
 
@@ -165,7 +173,7 @@ typedef struct __attribute__((packed, aligned(4))) pfe_platform_rpc_pfe_log_if_s
 	/*	Rules */
 	pfe_ct_if_m_rules_t rules;
 	/*	Rules arguments structure */
-	pfe_ct_if_m_args_t args;
+	pfe_ct_if_m_args_t __attribute__((aligned(4))) args;
 } pfe_platform_rpc_pfe_log_if_set_match_rules_arg_t;
 ct_assert(0U == offsetof(pfe_platform_rpc_pfe_log_if_set_match_rules_arg_t, log_if_id));
 
@@ -203,6 +211,15 @@ typedef struct __attribute__((packed, aligned(4))) pfe_platform_rpc_pfe_log_if_a
 } pfe_platform_rpc_pfe_log_if_add_mac_addr_arg_t;
 ct_assert(0U == offsetof(pfe_platform_rpc_pfe_log_if_add_mac_addr_arg_t, log_if_id));
 
+typedef struct __attribute__((packed, aligned(4))) pfe_platform_rpc_pfe_log_if_del_mac_addr_arg_tag
+{
+	/*	Logical interface ID */
+	uint8_t log_if_id;
+	/*	The MAC address */
+	pfe_mac_addr_t addr;
+} pfe_platform_rpc_pfe_log_if_del_mac_addr_arg_t;
+ct_assert(0U == offsetof(pfe_platform_rpc_pfe_log_if_del_mac_addr_arg_t, log_if_id));
+
 typedef struct __attribute__((packed, aligned(4))) pfe_platform_rpc_pfe_log_if_add_egress_if_arg_tag
 {
 	/*	Logical interface ID */
@@ -245,11 +262,16 @@ typedef pfe_platform_rpc_pfe_phy_if_enable_arg_t pfe_platform_rpc_pfe_phy_if_all
 ct_assert(0U == offsetof(pfe_platform_rpc_pfe_phy_if_allmulti_enable_arg_t, phy_if_id));
 typedef pfe_platform_rpc_pfe_phy_if_enable_arg_t pfe_platform_rpc_pfe_phy_if_allmulti_disable_arg_t;
 ct_assert(0U == offsetof(pfe_platform_rpc_pfe_phy_if_allmulti_disable_arg_t, phy_if_id));
+typedef pfe_platform_rpc_pfe_phy_if_enable_arg_t pfe_platform_rpc_pfe_phy_if_loopback_enable_arg_t;
+ct_assert(0U == offsetof(pfe_platform_rpc_pfe_phy_if_loopback_enable_arg_t, phy_if_id));
+typedef pfe_platform_rpc_pfe_phy_if_enable_arg_t pfe_platform_rpc_pfe_phy_if_loopback_disable_arg_t;
+ct_assert(0U == offsetof(pfe_platform_rpc_pfe_phy_if_loopback_disable_arg_t, phy_if_id));
 
 typedef struct __attribute__((packed, aligned(4))) __pfe_platform_rpc_pfe_phy_if_flush_mac_addrs_arg_tag
 {
 	pfe_ct_phy_if_id_t phy_if_id;
-	pfe_flush_mode_t mode;
+	pfe_mac_db_crit_t crit;
+	pfe_mac_type_t type;
 } pfe_platform_rpc_pfe_phy_if_flush_mac_addrs_arg_t;
 ct_assert(0U == offsetof(pfe_platform_rpc_pfe_phy_if_flush_mac_addrs_arg_t, phy_if_id));
 
diff --git a/sw/pfe_platform/public/pfe_rtable.h b/sw/pfe_platform/public/pfe_rtable.h
index 99e433f..1ea9f41 100644
--- a/sw/pfe_platform/public/pfe_rtable.h
+++ b/sw/pfe_platform/public/pfe_rtable.h
@@ -79,7 +79,7 @@ typedef enum
  */
 typedef void (* pfe_rtable_callback_t)(void *arg, pfe_rtable_cbk_event_t event);
 
-pfe_rtable_t *pfe_rtable_create(pfe_class_t *class, void *htable_base_pa, uint32_t htable_size, void *pool_base_pa, uint32_t pool_size);
+pfe_rtable_t *pfe_rtable_create(pfe_class_t *class, addr_t htable_base_pa, uint32_t htable_size, addr_t pool_base_pa, uint32_t pool_size);
 errno_t pfe_rtable_add_entry(pfe_rtable_t *rtable, pfe_rtable_entry_t *entry);
 errno_t pfe_rtable_del_entry(pfe_rtable_t *rtable, pfe_rtable_entry_t *entry);
 void pfe_rtable_destroy(pfe_rtable_t *rtable);
@@ -90,6 +90,8 @@ pfe_rtable_entry_t *pfe_rtable_get_first(pfe_rtable_t *rtable, pfe_rtable_get_cr
 pfe_rtable_entry_t *pfe_rtable_get_next(pfe_rtable_t *rtable);
 uint32_t pfe_rtable_get_size(pfe_rtable_t *rtable);
 
+void pfe_rtable_entry_set_ttl_decrement(pfe_rtable_entry_t *entry);
+void pfe_rtable_entry_remove_ttl_decrement(pfe_rtable_entry_t *entry);
 pfe_rtable_entry_t *pfe_rtable_entry_create(void);
 void pfe_rtable_entry_free(pfe_rtable_entry_t *entry);
 errno_t pfe_rtable_entry_set_5t(pfe_rtable_entry_t *entry, pfe_5_tuple_t *tuple);
diff --git a/sw/pfe_platform/public/pfe_safety.h b/sw/pfe_platform/public/pfe_safety.h
index c9e41d6..c367836 100644
--- a/sw/pfe_platform/public/pfe_safety.h
+++ b/sw/pfe_platform/public/pfe_safety.h
@@ -1,7 +1,7 @@
 /* =========================================================================
  *  
  *  Copyright (c) 2019 Imagination Technologies Limited
- *  Copyright 2019-2020 NXP
+ *  Copyright 2019-2021 NXP
  *
  *  SPDX-License-Identifier: GPL-2.0
  *
@@ -12,10 +12,10 @@
 
 typedef struct pfe_safety_tag pfe_safety_t;
 
-pfe_safety_t *pfe_safety_create(void *cbus_base_va, void *safety_base);
+pfe_safety_t *pfe_safety_create(addr_t cbus_base_va, addr_t safety_base);
 void pfe_safety_destroy(pfe_safety_t *safety);
-errno_t pfe_safety_isr(pfe_safety_t *safety);
-void pfe_safety_irq_mask(pfe_safety_t *safety);
-void pfe_safety_irq_unmask(pfe_safety_t *safety);
+errno_t pfe_safety_isr(const pfe_safety_t *safety);
+void pfe_safety_irq_mask(const pfe_safety_t *safety);
+void pfe_safety_irq_unmask(const pfe_safety_t *safety);
 
 #endif /* PUBLIC_PFE_SAFETY_H_ */
diff --git a/sw/pfe_platform/public/pfe_tmu.h b/sw/pfe_platform/public/pfe_tmu.h
index 9f24f04..1200339 100644
--- a/sw/pfe_platform/public/pfe_tmu.h
+++ b/sw/pfe_platform/public/pfe_tmu.h
@@ -1,7 +1,7 @@
 /* =========================================================================
  *  
  *  Copyright (c) 2019 Imagination Technologies Limited
- *  Copyright 2018-2020 NXP
+ *  Copyright 2018-2021 NXP
  *
  *  SPDX-License-Identifier: GPL-2.0
  *
@@ -62,45 +62,45 @@ typedef struct
 	uint32_t pe_sys_clk_ratio;		/*	Clock mode ratio for sys_clk and pe_clk */
 } pfe_tmu_cfg_t;
 
-errno_t pfe_tmu_queue_get_fill_level(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t queue, uint32_t *level);
-errno_t pfe_tmu_queue_get_drop_count(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t queue, uint32_t *cnt);
-errno_t pfe_tmu_queue_get_tx_count(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t queue, uint32_t *cnt);
-errno_t pfe_tmu_queue_set_mode(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t queue, pfe_tmu_queue_mode_t mode, uint32_t min, uint32_t max);
-pfe_tmu_queue_mode_t pfe_tmu_queue_get_mode(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t queue, uint32_t *min, uint32_t *max);
-errno_t pfe_tmu_queue_set_wred_prob(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t queue, uint8_t zone, uint8_t prob);
-errno_t pfe_tmu_queue_get_wred_prob(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t queue, uint8_t zone, uint8_t *prob);
-uint8_t pfe_tmu_queue_get_wred_zones(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t queue);
-uint8_t pfe_tmu_queue_get_cnt(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy);
+errno_t pfe_tmu_queue_get_fill_level(const pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t queue, uint32_t *level);
+errno_t pfe_tmu_queue_get_drop_count(const pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t queue, uint32_t *cnt);
+errno_t pfe_tmu_queue_get_tx_count(const pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t queue, uint32_t *cnt);
+errno_t pfe_tmu_queue_set_mode(const pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t queue, pfe_tmu_queue_mode_t mode, uint32_t min, uint32_t max);
+pfe_tmu_queue_mode_t pfe_tmu_queue_get_mode(const pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t queue, uint32_t *min, uint32_t *max);
+errno_t pfe_tmu_queue_set_wred_prob(const pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t queue, uint8_t zone, uint8_t prob);
+errno_t pfe_tmu_queue_get_wred_prob(const pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t queue, uint8_t zone, uint8_t *prob);
+uint8_t pfe_tmu_queue_get_wred_zones(const pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t queue);
+uint8_t pfe_tmu_queue_get_cnt(const pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy);
 
-errno_t pfe_tmu_shp_enable(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t shp);
-errno_t pfe_tmu_shp_disable(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t shp);
-errno_t pfe_tmu_shp_set_rate_mode(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t shp, pfe_tmu_rate_mode_t mode);
-pfe_tmu_rate_mode_t pfe_tmu_shp_get_rate_mode(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t shp);
-errno_t pfe_tmu_shp_set_idle_slope(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t shp, uint32_t isl);
-uint32_t pfe_tmu_shp_get_idle_slope(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t shp);
-errno_t pfe_tmu_shp_set_limits(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t shp, int32_t max_credit, int32_t min_credit);
-errno_t pfe_tmu_shp_get_limits(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t shp, int32_t *max_credit, int32_t *min_credit);
-errno_t pfe_tmu_shp_set_position(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t shp, uint8_t pos);
-uint8_t pfe_tmu_shp_get_position(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t shp);
+errno_t pfe_tmu_shp_enable(const pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t shp);
+errno_t pfe_tmu_shp_disable(const pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t shp);
+errno_t pfe_tmu_shp_set_rate_mode(const pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t shp, pfe_tmu_rate_mode_t mode);
+pfe_tmu_rate_mode_t pfe_tmu_shp_get_rate_mode(const pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t shp);
+errno_t pfe_tmu_shp_set_idle_slope(const pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t shp, uint32_t isl);
+uint32_t pfe_tmu_shp_get_idle_slope(const pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t shp);
+errno_t pfe_tmu_shp_set_limits(const pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t shp, int32_t max_credit, int32_t min_credit);
+errno_t pfe_tmu_shp_get_limits(const pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t shp, int32_t *max_credit, int32_t *min_credit);
+errno_t pfe_tmu_shp_set_position(const pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t shp, uint8_t pos);
+uint8_t pfe_tmu_shp_get_position(const pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t shp);
 
-errno_t pfe_tmu_sch_set_rate_mode(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t sch, pfe_tmu_rate_mode_t mode);
-pfe_tmu_rate_mode_t pfe_tmu_sch_get_rate_mode(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t sch);
-errno_t pfe_tmu_sch_set_algo(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t sch, pfe_tmu_sched_algo_t algo);
-pfe_tmu_sched_algo_t pfe_tmu_sch_get_algo(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t sch);
-uint8_t pfe_tmu_sch_get_input_cnt(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t sch);
-errno_t pfe_tmu_sch_set_input_weight(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t sch, uint8_t input, uint32_t weight);
-uint32_t pfe_tmu_sch_get_input_weight(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t sch, uint8_t input);
-errno_t pfe_tmu_sch_bind_queue(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t sch, uint8_t input, uint8_t queue);
-uint8_t pfe_tmu_sch_get_bound_queue(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t sch, uint8_t input);
-errno_t pfe_tmu_sch_bind_sch_output(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t src_sch, uint8_t dst_sch, uint8_t input);
-uint8_t pfe_tmu_sch_get_bound_sch_output(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t sch, uint8_t input);
+errno_t pfe_tmu_sch_set_rate_mode(const pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t sch, pfe_tmu_rate_mode_t mode);
+pfe_tmu_rate_mode_t pfe_tmu_sch_get_rate_mode(const pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t sch);
+errno_t pfe_tmu_sch_set_algo(const pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t sch, pfe_tmu_sched_algo_t algo);
+pfe_tmu_sched_algo_t pfe_tmu_sch_get_algo(const pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t sch);
+uint8_t pfe_tmu_sch_get_input_cnt(const pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t sch);
+errno_t pfe_tmu_sch_set_input_weight(const pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t sch, uint8_t input, uint32_t weight);
+uint32_t pfe_tmu_sch_get_input_weight(const pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t sch, uint8_t input);
+errno_t pfe_tmu_sch_bind_queue(const pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t sch, uint8_t input, uint8_t queue);
+uint8_t pfe_tmu_sch_get_bound_queue(const pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t sch, uint8_t input);
+errno_t pfe_tmu_sch_bind_sch_output(const pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t src_sch, uint8_t dst_sch, uint8_t input);
+uint8_t pfe_tmu_sch_get_bound_sch_output(const pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t sch, uint8_t input);
 
-pfe_tmu_t *pfe_tmu_create(void *cbus_base_va, uint32_t pe_num, pfe_tmu_cfg_t *cfg);
-void pfe_tmu_enable(pfe_tmu_t *tmu);
-void pfe_tmu_reset(pfe_tmu_t *tmu);
-void pfe_tmu_disable(pfe_tmu_t *tmu);
-void pfe_tmu_send(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t queue, void *buf_pa, uint16_t len);
-uint32_t pfe_tmu_get_text_statistics(pfe_tmu_t *tmu, char_t *buf, uint32_t buf_len, uint8_t verb_level);
-void pfe_tmu_destroy(pfe_tmu_t *tmu);
+pfe_tmu_t *pfe_tmu_create(addr_t cbus_base_va, uint32_t pe_num, const pfe_tmu_cfg_t *cfg);
+void pfe_tmu_enable(const pfe_tmu_t *tmu);
+void pfe_tmu_reset(const pfe_tmu_t *tmu);
+void pfe_tmu_disable(const pfe_tmu_t *tmu);
+void pfe_tmu_send(const pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t queue, const void *buf_pa, uint16_t len);
+uint32_t pfe_tmu_get_text_statistics(const pfe_tmu_t *tmu, char_t *buf, uint32_t buf_len, uint8_t verb_level);
+void pfe_tmu_destroy(const pfe_tmu_t *tmu);
 
 #endif /* PFE_TMU_H_ */
diff --git a/sw/pfe_platform/public/pfe_util.h b/sw/pfe_platform/public/pfe_util.h
index dc57d36..628d259 100644
--- a/sw/pfe_platform/public/pfe_util.h
+++ b/sw/pfe_platform/public/pfe_util.h
@@ -1,7 +1,7 @@
 /* =========================================================================
  *  
  *  Copyright (c) 2019 Imagination Technologies Limited
- *  Copyright 2018-2020 NXP
+ *  Copyright 2018-2021 NXP
  *
  *  SPDX-License-Identifier: GPL-2.0
  *
@@ -17,16 +17,16 @@ typedef struct
 	uint32_t pe_sys_clk_ratio;		/*	Clock mode ratio for sys_clk and pe_clk */
 } pfe_util_cfg_t;
 
-pfe_util_t *pfe_util_create(void *cbus_base_va, uint32_t pe_num, pfe_util_cfg_t *cfg);
-void pfe_util_enable(pfe_util_t *util);
-void pfe_util_reset(pfe_util_t *util);
-void pfe_util_disable(pfe_util_t *util);
+pfe_util_t *pfe_util_create(addr_t cbus_base_va, uint32_t pe_num, const pfe_util_cfg_t *cfg);
+void pfe_util_enable(const pfe_util_t *util);
+void pfe_util_reset(const pfe_util_t *util);
+void pfe_util_disable(const pfe_util_t *util);
 errno_t pfe_util_load_firmware(pfe_util_t *util, const void *elf);
-uint32_t pfe_util_get_text_statistics(pfe_util_t *util, char_t *buf, uint32_t buf_len, uint8_t verb_level);
+uint32_t pfe_util_get_text_statistics(const pfe_util_t *util, char_t *buf, uint32_t buf_len, uint8_t verb_level);
 void pfe_util_destroy(pfe_util_t *util);
-errno_t pfe_util_isr(pfe_util_t *util);
-void pfe_util_irq_mask(pfe_util_t *util);
-void pfe_util_irq_unmask(pfe_util_t *util);
-errno_t pfe_util_get_fw_version(pfe_util_t *util, pfe_ct_version_t *ver);
+errno_t pfe_util_isr(const pfe_util_t *util);
+void pfe_util_irq_mask(const pfe_util_t *util);
+void pfe_util_irq_unmask(const pfe_util_t *util);
+errno_t pfe_util_get_fw_version(const pfe_util_t *util, pfe_ct_version_t *ver);
 
 #endif /* SRC_PFE_UTIL_H_ */
diff --git a/sw/pfe_platform/public/pfe_wdt.h b/sw/pfe_platform/public/pfe_wdt.h
index 923db0c..78099c6 100644
--- a/sw/pfe_platform/public/pfe_wdt.h
+++ b/sw/pfe_platform/public/pfe_wdt.h
@@ -1,7 +1,7 @@
 /* =========================================================================
  *  
  *  Copyright (c) 2019 Imagination Technologies Limited
- *  Copyright 2020 NXP
+ *  Copyright 2020-2021 NXP
  *
  *  SPDX-License-Identifier: GPL-2.0
  *
@@ -19,11 +19,11 @@ typedef struct
 } pfe_wdt_cfg_t;
 
 
-pfe_wdt_t *pfe_wdt_create(void *cbus_base_va, void *wdt_base);
+pfe_wdt_t *pfe_wdt_create(addr_t cbus_base_va, addr_t wdt_base);
 void pfe_wdt_destroy(pfe_wdt_t *wdt);
 errno_t pfe_wdt_isr(pfe_wdt_t *wdt);
 void pfe_wdt_irq_mask(pfe_wdt_t *wdt);
 void pfe_wdt_irq_unmask(pfe_wdt_t *wdt);
-uint32_t pfe_wdt_get_text_statistics(pfe_wdt_t *wdt, char_t *buf, uint32_t buf_len, uint8_t verb_level);
+uint32_t pfe_wdt_get_text_statistics(const pfe_wdt_t *wdt, char_t *buf, uint32_t buf_len, uint8_t verb_level);
 
 #endif /* PUBLIC_PFE_WDT_H_ */
diff --git a/sw/pfe_platform/src/pfe_bmu.c b/sw/pfe_platform/src/pfe_bmu.c
index 773bc31..f9fce09 100644
--- a/sw/pfe_platform/src/pfe_bmu.c
+++ b/sw/pfe_platform/src/pfe_bmu.c
@@ -1,7 +1,7 @@
 /* =========================================================================
  *  
  *  Copyright (c) 2019 Imagination Technologies Limited
- *  Copyright 2018-2020 NXP
+ *  Copyright 2018-2021 NXP
  *
  *  SPDX-License-Identifier: GPL-2.0
  *
@@ -22,16 +22,16 @@
 
 struct pfe_bmu_tag
 {
-	void *cbus_base_va;		/*	CBUS base virtual address */
-	void *bmu_base_va;		/*	BMU base address (virtual) */
+	addr_t cbus_base_va;		/*	CBUS base virtual address */
+	addr_t bmu_base_va;		/*	BMU base address (virtual) */
 	addr_t pool_va_offset;	/*	Pre-calculated VA-PA conversion offset */
-	void *pool_base_va;
-	void *pool_base_pa;
+	addr_t pool_base_va;
+	addr_t pool_base_pa;
 	addr_t pool_size;
 #ifdef PFE_CFG_PARANOID_IRQ
 	oal_mutex_t lock;
 #endif /* PFE_CFG_PARANOID_IRQ */
-	void *bmu_base_offset;	/*	BMU base offset within CBUS space */
+	addr_t bmu_base_offset;	/*	BMU base offset within CBUS space */
 	uint32_t buf_size;
 };
 
@@ -40,7 +40,7 @@ struct pfe_bmu_tag
  * @param[in]	bmu The BMU instance
  * @return		EOK if interrupt has been handled
  */
-__attribute__((cold)) errno_t pfe_bmu_isr(pfe_bmu_t *bmu)
+__attribute__((cold)) errno_t pfe_bmu_isr(const pfe_bmu_t *bmu)
 {
 	errno_t ret = ENOENT;
 
@@ -76,7 +76,7 @@ __attribute__((cold)) errno_t pfe_bmu_isr(pfe_bmu_t *bmu)
  * @brief		Mask BMU interrupts
  * @param[in]	bmu The BMU instance
  */
-void pfe_bmu_irq_mask(pfe_bmu_t *bmu)
+void pfe_bmu_irq_mask(const pfe_bmu_t *bmu)
 {
 #ifdef PFE_CFG_PARANOID_IRQ
 	if (EOK != oal_mutex_lock(&bmu->lock))
@@ -99,7 +99,7 @@ void pfe_bmu_irq_mask(pfe_bmu_t *bmu)
  * @brief		Unmask BMU interrupts
  * @param[in]	hif The BMU instance
  */
-void pfe_bmu_irq_unmask(pfe_bmu_t *bmu)
+void pfe_bmu_irq_unmask(const pfe_bmu_t *bmu)
 {
 #ifdef PFE_CFG_PARANOID_IRQ
 	if (EOK != oal_mutex_lock(&bmu->lock))
@@ -127,18 +127,18 @@ void pfe_bmu_irq_unmask(pfe_bmu_t *bmu)
  * @param[in]	cfg The BMU block configuration
  * @return		The BMU instance or NULL if failed
  */
-__attribute__((cold)) pfe_bmu_t *pfe_bmu_create(void *cbus_base_va, void *bmu_base, pfe_bmu_cfg_t *cfg)
+__attribute__((cold)) pfe_bmu_t *pfe_bmu_create(addr_t cbus_base_va, addr_t bmu_base, const pfe_bmu_cfg_t *cfg)
 {
 	pfe_bmu_t *bmu;
-	
+
 #if defined(PFE_CFG_NULL_ARG_CHECK)
-	if (unlikely((NULL == cfg) || (NULL == cbus_base_va)))
+	if (unlikely((NULL == cfg) || (NULL_ADDR == cbus_base_va)))
 	{
 		NXP_LOG_ERROR("NULL argument received\n");
 		return NULL;
 	}
 
-	if (unlikely(NULL == cfg->pool_pa))
+	if (unlikely(NULL_ADDR == cfg->pool_pa))
 	{
 		NXP_LOG_ERROR("Buffer pool base is NULL\n");
 		return NULL;
@@ -156,10 +156,10 @@ __attribute__((cold)) pfe_bmu_t *pfe_bmu_create(void *cbus_base_va, void *bmu_ba
 		(void)memset(bmu, 0, sizeof(pfe_bmu_t));
 		bmu->cbus_base_va = cbus_base_va;
 		bmu->bmu_base_offset = bmu_base;
-		bmu->bmu_base_va = (void *)((addr_t)bmu->cbus_base_va + (addr_t)bmu->bmu_base_offset);
+		bmu->bmu_base_va = (bmu->cbus_base_va + bmu->bmu_base_offset);
 		bmu->pool_base_pa = cfg->pool_pa;
 		bmu->pool_base_va = cfg->pool_va;
-		bmu->pool_va_offset = (addr_t)bmu->pool_base_va - (addr_t)bmu->pool_base_pa;
+		bmu->pool_va_offset = bmu->pool_base_va - bmu->pool_base_pa;
 		bmu->pool_size = ((uint32_t)1U << cfg->buf_size) * cfg->max_buf_cnt;
 		bmu->buf_size = ((uint32_t)1U << cfg->buf_size);
 
@@ -173,7 +173,7 @@ __attribute__((cold)) pfe_bmu_t *pfe_bmu_create(void *cbus_base_va, void *bmu_ba
 		}
 #endif /* PFE_CFG_PARANOID_IRQ */
 	}
-	
+
 	pfe_bmu_reset(bmu);
 
 #ifdef PFE_CFG_PARANOID_IRQ
@@ -200,7 +200,7 @@ __attribute__((cold)) pfe_bmu_t *pfe_bmu_create(void *cbus_base_va, void *bmu_ba
  * @brief		Reset the BMU block
  * @param[in]	bmu The BMU instance
  */
-__attribute__((cold)) void pfe_bmu_reset(pfe_bmu_t *bmu)
+__attribute__((cold)) void pfe_bmu_reset(const pfe_bmu_t *bmu)
 {
 	errno_t ret;
 
@@ -246,7 +246,7 @@ __attribute__((cold)) void pfe_bmu_reset(pfe_bmu_t *bmu)
  * @brief		Enable the BMU block
  * @param[in]	bmu The BMU instance
  */
-__attribute__((cold)) void pfe_bmu_enable(pfe_bmu_t *bmu)
+__attribute__((cold)) void pfe_bmu_enable(const pfe_bmu_t *bmu)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == bmu))
@@ -277,7 +277,7 @@ __attribute__((cold)) void pfe_bmu_enable(pfe_bmu_t *bmu)
  * @brief		Disable the BMU block
  * @param[in]	bmu The BMU instance
  */
-__attribute__((cold)) void pfe_bmu_disable(pfe_bmu_t *bmu)
+__attribute__((cold)) void pfe_bmu_disable(const pfe_bmu_t *bmu)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == bmu))
@@ -310,7 +310,7 @@ __attribute__((cold)) void pfe_bmu_disable(pfe_bmu_t *bmu)
  * @return		Allocated buffer pointer (physical)
  * @note		Thread safe
  */
-__attribute__((hot)) void *pfe_bmu_alloc_buf(pfe_bmu_t *bmu)
+__attribute__((hot)) void *pfe_bmu_alloc_buf(const pfe_bmu_t *bmu)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == bmu))
@@ -330,7 +330,7 @@ __attribute__((hot)) void *pfe_bmu_alloc_buf(pfe_bmu_t *bmu)
  * @param[in]	pa The address to be converted
  * @return		Associated virtual address or NULL if failed
  */
-__attribute__((hot, pure)) void *pfe_bmu_get_va(pfe_bmu_t *bmu, void *pa)
+__attribute__((hot, pure)) void *pfe_bmu_get_va(const pfe_bmu_t *bmu, addr_t pa)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == bmu))
@@ -340,13 +340,13 @@ __attribute__((hot, pure)) void *pfe_bmu_get_va(pfe_bmu_t *bmu, void *pa)
 	}
 #endif /* PFE_CFG_NULL_ARG_CHECK */
 
-	if (((addr_t)bmu->pool_base_pa + bmu->pool_size) < (addr_t)pa)
+	if ((bmu->pool_base_pa + bmu->pool_size) < pa)
 	{
 		/*	TODO: The condition is not sufficient and need to consider buffer size... */
 		NXP_LOG_DEBUG("PA out of range\n");
 	}
 
-	return (void *)((addr_t)pa + bmu->pool_va_offset);
+	return (void *)(pa + bmu->pool_va_offset);
 }
 
 /**
@@ -355,7 +355,7 @@ __attribute__((hot, pure)) void *pfe_bmu_get_va(pfe_bmu_t *bmu, void *pa)
  * @param[in]	pa The address to be converted
  * @return		Associated virtual address or NULL if failed
  */
-__attribute__((hot, pure)) void *pfe_bmu_get_pa(pfe_bmu_t *bmu, void *va)
+__attribute__((hot, pure)) void *pfe_bmu_get_pa(const pfe_bmu_t *bmu, addr_t va)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == bmu))
@@ -365,13 +365,13 @@ __attribute__((hot, pure)) void *pfe_bmu_get_pa(pfe_bmu_t *bmu, void *va)
 	}
 #endif /* PFE_CFG_NULL_ARG_CHECK */
 
-	if (((addr_t)bmu->pool_base_va + bmu->pool_size) < (addr_t)va)
+	if ((bmu->pool_base_va + bmu->pool_size) < va)
 	{
 		/*	TODO: The condition is not sufficient and need to consider buffer size... */
 		NXP_LOG_DEBUG("VA out of range\n");
 	}
 
-	return (void *)((addr_t)va - bmu->pool_va_offset);
+	return (void *)(va - bmu->pool_va_offset);
 }
 
 /**
@@ -379,7 +379,7 @@ __attribute__((hot, pure)) void *pfe_bmu_get_pa(pfe_bmu_t *bmu, void *va)
  * @param[in]	bmu The BMU instance
  * @return		Buffer size in number of bytes
  */
-__attribute__((cold, pure)) uint32_t pfe_bmu_get_buf_size(pfe_bmu_t *bmu)
+__attribute__((cold, pure)) uint32_t pfe_bmu_get_buf_size(const pfe_bmu_t *bmu)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == bmu))
@@ -398,7 +398,7 @@ __attribute__((cold, pure)) uint32_t pfe_bmu_get_buf_size(pfe_bmu_t *bmu)
  * @param[in]	buffer Pointer (physical) to the buffer to be freed.
  * @note		Thread safe
  */
-__attribute__((hot)) void pfe_bmu_free_buf(pfe_bmu_t *bmu, void *buffer)
+__attribute__((hot)) void pfe_bmu_free_buf(const pfe_bmu_t *bmu, addr_t buffer)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely((NULL == bmu) || (NULL == buffer)))
@@ -409,14 +409,14 @@ __attribute__((hot)) void pfe_bmu_free_buf(pfe_bmu_t *bmu, void *buffer)
 #endif /* PFE_CFG_NULL_ARG_CHECK */
 
 	/*	No resource protection here since it is done by register write */
-	pfe_bmu_cfg_free_buf(bmu->bmu_base_va, (void *)PFE_CFG_MEMORY_PHYS_TO_PFE(buffer));
+	pfe_bmu_cfg_free_buf(bmu->bmu_base_va, PFE_CFG_MEMORY_PHYS_TO_PFE(buffer));
 }
 
 /**
  * @brief		Destroy BMU instance
  * @param[in]	bmu The BMU instance
  */
-__attribute__((cold)) void pfe_bmu_destroy(pfe_bmu_t *bmu)
+__attribute__((cold)) void pfe_bmu_destroy(const pfe_bmu_t *bmu)
 {
 	if (NULL != bmu)
 	{
@@ -429,13 +429,13 @@ __attribute__((cold)) void pfe_bmu_destroy(pfe_bmu_t *bmu)
 
 		pfe_bmu_cfg_disable(bmu->bmu_base_va);
 		pfe_bmu_cfg_fini(bmu->bmu_base_va);
-		
+
 #ifdef PFE_CFG_PARANOID_IRQ
 		if (EOK != oal_mutex_unlock(&bmu->lock))
 		{
 			NXP_LOG_DEBUG("Mutex unlock failed\n");
 		}
-		
+
 		if (EOK != oal_mutex_destroy(&bmu->lock))
 		{
 			NXP_LOG_DEBUG("Mutex destroy failed\n");
@@ -455,10 +455,10 @@ __attribute__((cold)) void pfe_bmu_destroy(pfe_bmu_t *bmu)
  * @param[in]	verb_level 	Verbosity level
  * @return		Number of bytes written to the buffer
  */
-__attribute__((cold)) uint32_t pfe_bmu_get_text_statistics(pfe_bmu_t *bmu, char_t *buf, uint32_t buf_len, uint8_t verb_level)
+__attribute__((cold)) uint32_t pfe_bmu_get_text_statistics(const pfe_bmu_t *bmu, char_t *buf, uint32_t buf_len, uint8_t verb_level)
 {
 	uint32_t len = 0U;
-	
+
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == bmu))
 	{
diff --git a/sw/pfe_platform/src/pfe_class.c b/sw/pfe_platform/src/pfe_class.c
index 2b1d927..5cce9cb 100644
--- a/sw/pfe_platform/src/pfe_class.c
+++ b/sw/pfe_platform/src/pfe_class.c
@@ -31,7 +31,7 @@ struct pfe_classifier_tag
 {
 	bool_t is_fw_loaded;					/*	Flag indicating that firmware has been loaded */
 	bool_t enabled;							/*	Flag indicating that classifier has been enabled */
-	void *cbus_base_va;						/*	CBUS base virtual address */
+	addr_t cbus_base_va;						/*	CBUS base virtual address */
 	uint32_t pe_num;						/*	Number of PEs */
 	pfe_pe_t **pe;							/*	List of particular PEs */
 	blalloc_t *heap_context;				/* Heap manager context */
@@ -44,6 +44,10 @@ struct pfe_classifier_tag
 
 static errno_t pfe_class_dmem_heap_init(pfe_class_t *class);
 static errno_t pfe_class_load_fw_features(pfe_class_t *class);
+static void pfe_class_alg_stats_endian(pfe_ct_class_algo_stats_t *stat);
+static void pfe_class_pe_stats_endian(pfe_ct_pe_stats_t *stat);
+static void pfe_class_sum_pe_algo_stats(pfe_ct_class_algo_stats_t *sum, const pfe_ct_class_algo_stats_t *val);
+static uint32_t pfe_class_stat_to_str(const pfe_ct_class_algo_stats_t *stat, char *buf, uint32_t buf_len, uint8_t verb_level);
 
 /**
  * @brief		Read "put" buffer
@@ -58,7 +62,7 @@ errno_t pfe_pe_get_data(pfe_pe_t *pe, pfe_ct_buffer_t *buf)
 	uint8_t flags;
 	errno_t ret = ENOENT;
 	pfe_ct_pe_mmap_t mmap_data;
-	pfe_ct_class_mmap_t *class_mmap_data;
+	const pfe_ct_class_mmap_t *class_mmap_data;
 
 	/*	Get mmap base from PE[0] since all PEs have the same memory map */
 	if (EOK != pfe_pe_get_mmap(pe, &mmap_data))
@@ -125,7 +129,7 @@ errno_t pfe_pe_put_data(pfe_pe_t *pe, pfe_ct_buffer_t *buf)
 	uint8_t flags;
 	errno_t ret = ENOENT;
 	pfe_ct_pe_mmap_t mmap_data;
-	pfe_ct_class_mmap_t *class_mmap_data;
+	const pfe_ct_class_mmap_t *class_mmap_data;
 
 	if (EOK != pfe_pe_get_mmap(pe, &mmap_data))
 	{
@@ -175,7 +179,7 @@ errno_t pfe_pe_put_data(pfe_pe_t *pe, pfe_ct_buffer_t *buf)
  * @details Checks all PEs whether they report a firmware error
  * @param[in] class The CLASS instance
  */
-errno_t pfe_class_isr(pfe_class_t *class)
+errno_t pfe_class_isr(const pfe_class_t *class)
 {
 	uint32_t i;
 	pfe_ct_buffer_t buf;
@@ -231,7 +235,7 @@ errno_t pfe_class_isr(pfe_class_t *class)
  * @brief		Mask CLASS interrupts
  * @param[in]	class The CLASS instance
  */
-void pfe_class_irq_mask(pfe_class_t *class)
+void pfe_class_irq_mask(const pfe_class_t *class)
 {
 #if ((PFE_CFG_IP_VERSION == PFE_CFG_IP_VERSION_FPGA_5_0_4) \
 	|| (PFE_CFG_IP_VERSION == PFE_CFG_IP_VERSION_NPU_7_14) \
@@ -247,7 +251,7 @@ void pfe_class_irq_mask(pfe_class_t *class)
  * @brief		Unmask CLASS interrupts
  * @param[in]	class The CLASS instance
  */
-void pfe_class_irq_unmask(pfe_class_t *class)
+void pfe_class_irq_unmask(const pfe_class_t *class)
 {
 #if ((PFE_CFG_IP_VERSION == PFE_CFG_IP_VERSION_FPGA_5_0_4) \
 	|| (PFE_CFG_IP_VERSION == PFE_CFG_IP_VERSION_NPU_7_14) \
@@ -266,14 +270,14 @@ void pfe_class_irq_unmask(pfe_class_t *class)
  * @param[in]	cfg The classifier block configuration
  * @return		The classifier instance or NULL if failed
  */
-pfe_class_t *pfe_class_create(void *cbus_base_va, uint32_t pe_num, pfe_class_cfg_t *cfg)
+pfe_class_t *pfe_class_create(addr_t cbus_base_va, uint32_t pe_num, const pfe_class_cfg_t *cfg)
 {
 	pfe_class_t *class;
 	pfe_pe_t *pe;
 	uint32_t ii;
 
 #if defined(PFE_CFG_NULL_ARG_CHECK)
-	if (unlikely((NULL == cbus_base_va) || (NULL == cfg)))
+	if (unlikely((NULL_ADDR == cbus_base_va) || (NULL == cfg)))
 	{
 		NXP_LOG_ERROR("NULL argument received\n");
 		return NULL;
@@ -292,12 +296,19 @@ pfe_class_t *pfe_class_create(void *cbus_base_va, uint32_t pe_num, pfe_class_cfg
 		class->cbus_base_va = cbus_base_va;
 	}
 
+	if (EOK != oal_mutex_init(&class->mutex))
+	{
+		oal_mm_free(class);
+		return NULL;
+	}
+
 	if (pe_num > 0U)
 	{
 		class->pe = oal_mm_malloc(pe_num * sizeof(pfe_pe_t *));
 
 		if (NULL == class->pe)
 		{
+			(void)oal_mutex_destroy(&class->mutex);
 			oal_mm_free(class);
 			return NULL;
 		}
@@ -322,11 +333,6 @@ pfe_class_t *pfe_class_create(void *cbus_base_va, uint32_t pe_num, pfe_class_cfg
 			}
 		}
 
-		if (EOK != oal_mutex_init(&class->mutex))
-		{
-			goto free_and_fail;
-		}
-
 		/*	Issue block reset */
 		pfe_class_reset(class);
 
@@ -383,7 +389,7 @@ static errno_t pfe_class_dmem_heap_init(pfe_class_t *class)
  * @param[in]	size Requested memory size
  * @return		Address of the allocated memory or value 0 on failure.
  */
-addr_t pfe_class_dmem_heap_alloc(pfe_class_t *class, uint32_t size)
+addr_t pfe_class_dmem_heap_alloc(const pfe_class_t *class, uint32_t size)
 {
 	addr_t addr;
 	errno_t ret;
@@ -395,7 +401,7 @@ addr_t pfe_class_dmem_heap_alloc(pfe_class_t *class, uint32_t size)
 	}
 	else
 	{   /* Allocation failed - return "NULL" */
-		NXP_LOG_DEBUG("Failed to allocate memory (size %u)\n", size);
+		NXP_LOG_DEBUG("Failed to allocate memory (size %u)\n", (uint_t)size);
 		return 0U;
 	}
 }
@@ -405,7 +411,7 @@ addr_t pfe_class_dmem_heap_alloc(pfe_class_t *class, uint32_t size)
  * @param[in]	class The classifier instance
  * @param[in]	addr Address of the previously allocated memory by pfe_class_dmem_heap_alloc()
  */
-void pfe_class_dmem_heap_free(pfe_class_t *class, addr_t addr)
+void pfe_class_dmem_heap_free(const pfe_class_t *class, addr_t addr)
 {
 	if(0U == addr)
 	{   /* Ignore "NULL" */
@@ -414,7 +420,7 @@ void pfe_class_dmem_heap_free(pfe_class_t *class, addr_t addr)
 
 	if(addr < class->dmem_heap_base)
 	{
-		NXP_LOG_ERROR("Impossible address 0x%"PRINTADDR_T" (base is 0x%x)\n", addr, class->dmem_heap_base);
+		NXP_LOG_ERROR("Impossible address 0x%"PRINTADDR_T" (base is 0x%x)\n", addr, (uint_t)class->dmem_heap_base);
 		return;
 	}
 
@@ -544,7 +550,7 @@ errno_t pfe_class_load_firmware(pfe_class_t *class, const void *elf)
 
 		if (EOK != ret)
 		{
-			NXP_LOG_ERROR("Classifier firmware loading the PE %u failed: %d\n", ii, ret);
+			NXP_LOG_ERROR("Classifier firmware loading the PE %u failed: %d\n", (uint_t)ii, ret);
 			break;
 		}
 	}
@@ -613,7 +619,7 @@ static errno_t pfe_class_load_fw_features(pfe_class_t *class)
                     class->fw_features[i] = pfe_fw_feature_create();
                     if(NULL == class->fw_features[i])
                     {
-                        NXP_LOG_ERROR("Failed to create feature %u\n", i);
+                        NXP_LOG_ERROR("Failed to create feature %u\n", (uint_t)i);
                         /* Destroy previously created and return failure */
                         for(j = 0U; j < i; j++)
                         {
@@ -630,7 +636,7 @@ static errno_t pfe_class_load_fw_features(pfe_class_t *class)
                     ret = pfe_pe_get_fw_feature_entry(class->pe[0U], i, &entry);
                     if(EOK != ret)
                     {
-                         NXP_LOG_ERROR("Failed get ll data for feature %u\n", i);
+                         NXP_LOG_ERROR("Failed get ll data for feature %u\n", (uint_t)i);
                         /* Destroy previously created and return failure */
                         for(j = 0U; j < i; j++)
                         {
@@ -649,7 +655,7 @@ static errno_t pfe_class_load_fw_features(pfe_class_t *class)
                     ret = pfe_fw_feature_set_string_base(class->fw_features[i], pfe_pe_get_fw_feature_str_base(class->pe[0U]));
                     if(EOK != ret)
                     {
-                        NXP_LOG_ERROR("Failed to set string base for feature %u\n", i);
+                        NXP_LOG_ERROR("Failed to set string base for feature %u\n", (uint_t)i);
                         /* Destroy previously created and return failure */
                         for(j = 0U; j < i; j++)
                         {
@@ -663,7 +669,7 @@ static errno_t pfe_class_load_fw_features(pfe_class_t *class)
                         break;
                     }
                     /* Set functions to read/write DMEM and their data */
-                    pfe_fw_feature_set_dmem_funcs(class->fw_features[i], pfe_class_read_dmem, pfe_class_write_dmem, (void *)class);
+                    (void)pfe_fw_feature_set_dmem_funcs(class->fw_features[i], pfe_class_read_dmem, pfe_class_write_dmem, (void *)class);
                 }
             }
         } /* Else is OK too */
@@ -717,12 +723,12 @@ errno_t pfe_class_get_mmap(pfe_class_t *class, int32_t pe_idx, pfe_ct_class_mmap
  * @brief		Write data from host memory to DMEM
  * @param[in]	class_p The classifier instance
  * @param[in]	pe_idx PE index or -1 if all PEs shall be written
- * @param[in]	dst Destination address within DMEM (physical)
- * @param[in]	src Source address within host memory (virtual)
+ * @param[in]	dst_addr Destination address within DMEM (physical)
+ * @param[in]	src_ptr Pointer to data in host memory (virtual address)
  * @param[in]	len Number of bytes to be written
  * @return		EOK or error code in case of failure
  */
-errno_t pfe_class_write_dmem(void *class_p, int32_t pe_idx, void *dst, void *src, uint32_t len)
+errno_t pfe_class_write_dmem(void *class_p, int32_t pe_idx, addr_t dst_addr, void *src_ptr, uint32_t len)
 {
 	uint32_t ii;
     pfe_class_t *class = (pfe_class_t *)class_p;
@@ -748,14 +754,14 @@ errno_t pfe_class_write_dmem(void *class_p, int32_t pe_idx, void *dst, void *src
 	if (pe_idx >= 0)
 	{
 		/*	Single PE */
-		pfe_pe_memcpy_from_host_to_dmem_32(class->pe[pe_idx], (addr_t)dst, src, len);
+		pfe_pe_memcpy_from_host_to_dmem_32(class->pe[pe_idx], dst_addr, src_ptr, len);
 	}
 	else
 	{
 		/*	All PEs */
 		for (ii=0U; ii<class->pe_num; ii++)
 		{
-			pfe_pe_memcpy_from_host_to_dmem_32(class->pe[ii], (addr_t)dst, src, len);
+			pfe_pe_memcpy_from_host_to_dmem_32(class->pe[ii], dst_addr, src_ptr, len);
 		}
 	}
 
@@ -771,23 +777,23 @@ errno_t pfe_class_write_dmem(void *class_p, int32_t pe_idx, void *dst, void *src
  * @brief		Read data from DMEM to host memory
  * @param[in]	class_p The classifier instance
  * @param[in]	pe_idx PE index
- * @param[in]	dst Destination address within host memory (virtual)
- * @param[in]	src Source address within DMEM (physical)
+ * @param[in]	dst_ptr Destination address within host memory (virtual)
+ * @param[in]	src_addr Source address within DMEM (physical)
  * @param[in]	len Number of bytes to be read
  * @return		EOK or error code in case of failure
  */
-errno_t pfe_class_read_dmem(void *class_p, int32_t pe_idx, void *dst, void *src, uint32_t len)
+errno_t pfe_class_read_dmem(void *class_p, int32_t pe_idx, void *dst_ptr, addr_t src_addr, uint32_t len)
 {
     pfe_class_t *class = (pfe_class_t *)class_p;
 #if defined(PFE_CFG_NULL_ARG_CHECK)
-	if (unlikely((NULL == class) || (NULL == dst)))
+	if (unlikely((NULL == class) || (NULL == dst_ptr)))
 	{
 		NXP_LOG_ERROR("NULL argument received\n");
 		return EINVAL;
 	}
 #endif /* PFE_CFG_NULL_ARG_CHECK */
 
-	if (pe_idx >= class->pe_num)
+	if (pe_idx >= (int32_t)class->pe_num)
 	{
 		return EINVAL;
 	}
@@ -797,7 +803,7 @@ errno_t pfe_class_read_dmem(void *class_p, int32_t pe_idx, void *dst, void *src,
 		NXP_LOG_DEBUG("mutex lock failed\n");
 	}
 
-	pfe_pe_memcpy_from_dmem_to_host_32(class->pe[pe_idx], dst, (addr_t)src, len);
+	pfe_pe_memcpy_from_dmem_to_host_32(class->pe[pe_idx], dst_ptr, src_addr, len);
 
 	if (EOK != oal_mutex_unlock(&class->mutex))
 	{
@@ -810,17 +816,17 @@ errno_t pfe_class_read_dmem(void *class_p, int32_t pe_idx, void *dst, void *src,
 /**
  * @brief		Read data from DMEM from all PEs atomically to host memory
  * @param[in]	class The classifier instance (All PEs from given class are read)
- * @param[in]	dst Destination address within host memory (virtual) available memory has to be pe_count * len
- * @param[in]	src Source address within DMEM (physical)
+ * @param[in]	dst_ptr Destination address within host memory (virtual) available memory has to be pe_count * len
+ * @param[in]	src_addr Source address within DMEM (physical)
  * @param[in]	buffer_len Destination buffer size
  * @param[in]	read_len Number of bytes to be read (From one PE)
  * @return		EOK or error code in case of failure
  */
-errno_t pfe_class_gather_read_dmem(pfe_class_t *class, void *dst, void *src, uint32_t buffer_len, uint32_t read_len)
+errno_t pfe_class_gather_read_dmem(pfe_class_t *class, void *dst_ptr, addr_t src_addr, uint32_t buffer_len, uint32_t read_len)
 {
 	errno_t ret = EOK;
 #if defined(PFE_CFG_NULL_ARG_CHECK)
-	if (unlikely((NULL == class) || (NULL == dst)))
+	if (unlikely((NULL == class) || (NULL == dst_ptr)))
 	{
 		NXP_LOG_ERROR("NULL argument received\n");
 		return EINVAL;
@@ -832,7 +838,7 @@ errno_t pfe_class_gather_read_dmem(pfe_class_t *class, void *dst, void *src, uin
 		NXP_LOG_DEBUG("mutex lock failed\n");
 	}
 
-	ret = pfe_pe_gather_memcpy_from_dmem_to_host_32(class->pe, (int32_t)class->pe_num, dst, (addr_t)src, buffer_len, read_len);
+	ret = pfe_pe_gather_memcpy_from_dmem_to_host_32(class->pe, (int32_t)class->pe_num, dst_ptr, (addr_t)src_addr, buffer_len, read_len);
 
 	if (EOK != oal_mutex_unlock(&class->mutex))
 	{
@@ -846,15 +852,15 @@ errno_t pfe_class_gather_read_dmem(pfe_class_t *class, void *dst, void *src, uin
  * @brief		Read data from PMEM to host memory
  * @param[in]	class The classifier instance
  * @param[in]	pe_idx PE index
- * @param[in]	dst Destination address within host memory (virtual)
- * @param[in]	src Source address within PMEM (physical)
+ * @param[in]	dst_ptr Destination address within host memory (virtual)
+ * @param[in]	src_addr Source address within PMEM (physical)
  * @param[in]	len Number of bytes to be read
  * @return		EOK or error code in case of failure
  */
-errno_t pfe_class_read_pmem(pfe_class_t *class, uint32_t pe_idx, void *dst, void *src, uint32_t len)
+errno_t pfe_class_read_pmem(pfe_class_t *class, uint32_t pe_idx, void *dst_ptr, addr_t src_addr, uint32_t len)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
-	if (unlikely((NULL == class) || (NULL == dst)))
+	if (unlikely((NULL == class) || (NULL == dst_ptr)))
 	{
 		NXP_LOG_ERROR("NULL argument received\n");
 		return EINVAL;
@@ -871,7 +877,7 @@ errno_t pfe_class_read_pmem(pfe_class_t *class, uint32_t pe_idx, void *dst, void
 		NXP_LOG_DEBUG("mutex lock failed\n");
 	}
 
-	pfe_pe_memcpy_from_imem_to_host_32(class->pe[pe_idx], dst, (addr_t)src, len);
+	pfe_pe_memcpy_from_imem_to_host_32(class->pe[pe_idx], dst_ptr, src_addr, len);
 
 	if (EOK != oal_mutex_unlock(&class->mutex))
 	{
@@ -921,7 +927,11 @@ void pfe_class_destroy(pfe_class_t *class)
 			class->heap_context = NULL;
 		}
 
-		(void)oal_mutex_destroy(&class->mutex);
+		if (EOK != oal_mutex_destroy(&class->mutex))
+		{
+			NXP_LOG_WARNING("Could not properly destroy mutex\n");
+		}
+
 		oal_mm_free(class);
 	}
 }
@@ -935,8 +945,9 @@ void pfe_class_destroy(pfe_class_t *class)
  * @return		EOK if success, error code otherwise
  * @note		Must be called before the classifier is enabled.
  */
-errno_t pfe_class_set_rtable(pfe_class_t *class, void *rtable_pa, uint32_t rtable_len, uint32_t entry_size)
+errno_t pfe_class_set_rtable(pfe_class_t *class, addr_t rtable_pa, uint32_t rtable_len, uint32_t entry_size)
 {
+	errno_t ret = EOK;
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely((NULL == class) || (NULL == rtable_pa)))
 	{
@@ -956,7 +967,7 @@ errno_t pfe_class_set_rtable(pfe_class_t *class, void *rtable_pa, uint32_t rtabl
 			NXP_LOG_ERROR("mutex lock failed\n");
 		}
 
-		pfe_class_cfg_set_rtable(class->cbus_base_va, rtable_pa, rtable_len, entry_size);
+		ret = pfe_class_cfg_set_rtable(class->cbus_base_va, rtable_pa, rtable_len, entry_size);
 
 		if (EOK != oal_mutex_unlock(&class->mutex))
 		{
@@ -964,7 +975,7 @@ errno_t pfe_class_set_rtable(pfe_class_t *class, void *rtable_pa, uint32_t rtabl
 		}
 	}
 
-	return EOK;
+	return ret;
 }
 
 /**
@@ -975,7 +986,7 @@ errno_t pfe_class_set_rtable(pfe_class_t *class, void *rtable_pa, uint32_t rtabl
  * @param[in]	vlan The default VLAN ID (12bit)
  * @return		EOK if success, error code otherwise
  */
-errno_t pfe_class_set_default_vlan(pfe_class_t *class, uint16_t vlan)
+errno_t pfe_class_set_default_vlan(const pfe_class_t *class, uint16_t vlan)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == class))
@@ -995,7 +1006,7 @@ errno_t pfe_class_set_default_vlan(pfe_class_t *class, uint16_t vlan)
  * @return		Number of available PEs
  */
 
-uint32_t pfe_class_get_num_of_pes(pfe_class_t *class)
+uint32_t pfe_class_get_num_of_pes(const pfe_class_t *class)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == class))
@@ -1015,7 +1026,7 @@ uint32_t pfe_class_get_num_of_pes(pfe_class_t *class)
  * @param[in] name Name of the feature to be found
  * @return EOK when given entry is found, ENOENT when it is not found, error code otherwise
  */
-errno_t pfe_class_get_feature(pfe_class_t *class, pfe_fw_feature_t **feature, const char *name)
+errno_t pfe_class_get_feature(const pfe_class_t *class, pfe_fw_feature_t **feature, const char *name)
 {
     uint32_t i;
     const char *fname;
@@ -1116,6 +1127,32 @@ static void pfe_class_alg_stats_endian(pfe_ct_class_algo_stats_t *stat)
 	stat->discarded = oal_ntohl(stat->discarded);
 }
 
+void pfe_class_flexi_parser_stats_endian(pfe_ct_class_flexi_parser_stats_t *stats)
+{
+#if defined(PFE_CFG_NULL_ARG_CHECK)
+	if (unlikely(NULL == stat))
+	{
+		NXP_LOG_ERROR("NULL argument received\n");
+		return;
+	}
+#endif
+	stats->accepted = oal_ntohl(stats->accepted);
+	stats->rejected = oal_ntohl(stats->rejected);
+}
+
+void pfe_class_sum_flexi_parser_stats(pfe_ct_class_flexi_parser_stats_t *sum, const pfe_ct_class_flexi_parser_stats_t *val)
+{
+#if defined(PFE_CFG_NULL_ARG_CHECK)
+	if (unlikely((NULL == sum) || (NULL == val)))
+	{
+		NXP_LOG_ERROR("NULL argument received\n");
+		return;
+	}
+#endif
+	sum->accepted += val->accepted;
+	sum->rejected += val->rejected;
+}
+
 /**
 * @brief Converts endiannes of the whole structure containing statistics
 * @param[in,out] stat Statistics which endiannes shall be converted
@@ -1144,7 +1181,7 @@ static void pfe_class_pe_stats_endian(pfe_ct_pe_stats_t *stat)
 * @param[in] sum Sum to add the value (results are in HOST endian)
 * @param[in] val Value to be added to the sum (it is in HOST endian)
 */
-static void pfe_class_sum_pe_algo_stats(pfe_ct_class_algo_stats_t *sum, pfe_ct_class_algo_stats_t *val)
+static void pfe_class_sum_pe_algo_stats(pfe_ct_class_algo_stats_t *sum, const pfe_ct_class_algo_stats_t *val)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely((NULL == sum) || (NULL == val)))
@@ -1167,7 +1204,7 @@ static void pfe_class_sum_pe_algo_stats(pfe_ct_class_algo_stats_t *sum, pfe_ct_c
  * @param[in]	verb_level	Verbosity level
  * @return		Number of bytes written into the output buffer
  */
-uint32_t pfe_class_stat_to_str(pfe_ct_class_algo_stats_t *stat, char *buf, uint32_t buf_len, uint8_t verb_level)
+static uint32_t pfe_class_stat_to_str(const pfe_ct_class_algo_stats_t *stat, char *buf, uint32_t buf_len, uint8_t verb_level)
 {
 	uint32_t len = 0U;
 
@@ -1186,13 +1223,38 @@ uint32_t pfe_class_stat_to_str(pfe_ct_class_algo_stats_t *stat, char *buf, uint3
 	return len;
 }
 
+/**
+ * @brief               Converts statistics of a logical interface or classification algorithm into a text form
+ * @param[in]   stat            Statistics to convert - expected in HOST endian
+ * @param[out]  buf                     Buffer where to write the text
+ * @param[in]   buf_len         Buffer length
+ * @param[in]   verb_level      Verbosity level
+ * @return              Number of bytes written into the output buffer
+ */
+uint32_t pfe_class_fp_stat_to_str(const pfe_ct_class_flexi_parser_stats_t *stat, char *buf, uint32_t buf_len, uint8_t verb_level)
+{
+        uint32_t len = 0U;
+
+        (void)verb_level;
+#if defined(PFE_CFG_NULL_ARG_CHECK)
+        if (unlikely((NULL == stat) || (NULL == buf)))
+        {
+                NXP_LOG_ERROR("NULL argument received\n");
+                return 0U;
+        }
+#endif
+        len += oal_util_snprintf(buf + len, buf_len - len, "Frames accepted:  %u\n", stat->accepted);
+        len += oal_util_snprintf(buf + len, buf_len - len, "Frames rejected:  %u\n", stat->rejected);
+        return len;
+}
+
 /**
  * @brief		Send data buffer
  * @param[in]	class The CLASS instance
  * @param[in]	buf Buffer to be sent
  * @return		EOK success, error code otherwise
  */
-uint32_t pfe_class_put_data(pfe_class_t *class, pfe_ct_buffer_t *buf)
+uint32_t pfe_class_put_data(const pfe_class_t *class, pfe_ct_buffer_t *buf)
 {
 	uint32_t ii, tries;
 	errno_t ret;
@@ -1212,7 +1274,7 @@ uint32_t pfe_class_put_data(pfe_class_t *class, pfe_ct_buffer_t *buf)
 
 		if (EOK != ret)
 		{
-			NXP_LOG_ERROR("Unable to update pe %d\n", ii);
+			NXP_LOG_ERROR("Unable to update pe %u\n", (uint_t)ii);
 			return EBUSY;
 		}
 	}
@@ -1300,7 +1362,7 @@ uint32_t pfe_class_get_text_statistics(pfe_class_t *class, char_t *buf, uint32_t
 		ret = pfe_pe_mem_lock(class->pe[ii]);
 		if(EOK != ret)
 		{
-			NXP_LOG_ERROR("PE %u could not be locked\n", ii);
+			NXP_LOG_ERROR("PE %u could not be locked\n", (uint_t)ii);
 			len += oal_util_snprintf(buf + len, buf_len - len, "PE %u could not be locked - statistics are not coherent\n", ii);
 		}
 	}
@@ -1317,7 +1379,7 @@ uint32_t pfe_class_get_text_statistics(pfe_class_t *class, char_t *buf, uint32_t
 		ret = pfe_pe_mem_unlock(class->pe[ii]);
 		if(EOK != ret)
 		{
-			NXP_LOG_ERROR("PE %u could not be unlocked\n", ii);
+			NXP_LOG_ERROR("PE %u could not be unlocked\n", (uint_t)ii);
 		}
 	}
 
@@ -1335,6 +1397,7 @@ uint32_t pfe_class_get_text_statistics(pfe_class_t *class, char_t *buf, uint32_t
 		pfe_class_alg_stats_endian(&c_alg_stats[ii + 1U].vlan_bridge);
 		pfe_class_alg_stats_endian(&c_alg_stats[ii + 1U].log_if);
 		pfe_class_alg_stats_endian(&c_alg_stats[ii + 1U].hif_to_hif);
+		pfe_class_flexi_parser_stats_endian(&c_alg_stats[ii + 1U].flexible_filter);
 		pfe_class_pe_stats_endian(&pe_stats[ii + 1U]);
 		/* Calculate sums */
 		pe_stats[0].processed += pe_stats[ii + 1U].processed;
@@ -1350,6 +1413,7 @@ uint32_t pfe_class_get_text_statistics(pfe_class_t *class, char_t *buf, uint32_t
 		pfe_class_sum_pe_algo_stats(&c_alg_stats[0U].vlan_bridge, &c_alg_stats[ii + 1U].vlan_bridge);
 		pfe_class_sum_pe_algo_stats(&c_alg_stats[0U].log_if, &c_alg_stats[ii + 1U].log_if);
 		pfe_class_sum_pe_algo_stats(&c_alg_stats[0U].hif_to_hif, &c_alg_stats[ii + 1U].hif_to_hif);
+		pfe_class_sum_flexi_parser_stats(&c_alg_stats[0U].flexible_filter, &c_alg_stats[ii + 1U].flexible_filter);
 	}
 
 	/* Print results */
@@ -1380,6 +1444,8 @@ uint32_t pfe_class_get_text_statistics(pfe_class_t *class, char_t *buf, uint32_t
 	len += pfe_class_stat_to_str(&c_alg_stats[0U].log_if, buf + len, buf_len - len, verb_level);
 	len += oal_util_snprintf(buf + len, buf_len - len, "- InterHIF -\n");
 	len += pfe_class_stat_to_str(&c_alg_stats[0U].hif_to_hif, buf + len, buf_len - len, verb_level);
+	len += oal_util_snprintf(buf + len, buf_len - len, "- Global Flexible filter -\n");
+	len += pfe_class_fp_stat_to_str(&c_alg_stats[0U].flexible_filter, buf + len, buf_len - len, verb_level);
 
 	len += oal_util_snprintf(buf + len, buf_len - len, "\nDMEM heap\n---------\n");
 	len += blalloc_get_text_statistics(class->heap_context, buf + len, buf_len - len, verb_level);
@@ -1399,7 +1465,7 @@ uint32_t pfe_class_get_text_statistics(pfe_class_t *class, char_t *buf, uint32_t
  * @param[in]	class The classifier instance
  * @return		ver Parsed firmware metadata
  */
-errno_t pfe_class_get_fw_version(pfe_class_t *class, pfe_ct_version_t *ver)
+errno_t pfe_class_get_fw_version(const pfe_class_t *class, pfe_ct_version_t *ver)
 {
 	pfe_ct_pe_mmap_t pfe_pe_mmap;
 
diff --git a/sw/pfe_platform/src/pfe_emac.c b/sw/pfe_platform/src/pfe_emac.c
index bacdc0c..3390f96 100644
--- a/sw/pfe_platform/src/pfe_emac.c
+++ b/sw/pfe_platform/src/pfe_emac.c
@@ -19,9 +19,9 @@
 
 struct pfe_emac_tag
 {
-	void *cbus_base_va;			/*	CBUS base virtual address */
-	void *emac_base_offset;		/*	MAC base offset within CBUS space */
-	void *emac_base_va;			/*	MAC base address (virtual) */
+	addr_t cbus_base_va;			/*	CBUS base virtual address */
+	addr_t emac_base_offset;		/*	MAC base offset within CBUS space */
+	addr_t emac_base_va;			/*	MAC base address (virtual) */
 	LLIST_t mac_addr_list;		/*	List of all registered MAC addresses within the EMAC */
 	uint8_t mac_addr_slots;		/*	Bitmask representing local address slots where '1' means 'slot is used' */
 	pfe_emac_mii_mode_t mode;	/*	Current MII mode */
@@ -37,7 +37,7 @@ struct pfe_emac_tag
 	bool_t adj_sign;			/*	IEEE1588 frequency adjustment sign (TRUE - positive, FALSE - negative) */
 };
 
-typedef struct pfe_mac_addr_entry_tag
+typedef struct
 {
 	pfe_mac_addr_t addr;		/*	The MAC address */
 	uint32_t hash;				/*	Associated hash value (valid if in_hash_grp is TRUE) */
@@ -45,16 +45,72 @@ typedef struct pfe_mac_addr_entry_tag
 	uint8_t addr_slot_idx;		/*	If 'in_hash_grp' is FALSE then this value specifies index of
 									individual address slot the address is stored in */
 	LLIST_t iterator;			/*	List chain entry */
-	pfe_ct_phy_if_id_t owner;	/*	Identification of the driver that owns this entry */
+	pfe_drv_id_t owner;	/*	Identification of the driver that owns this entry */
 } pfe_mac_addr_db_entry_t;
 
+static bool_t pfe_emac_flush_criterion_eval(const pfe_mac_addr_db_entry_t *entry, pfe_emac_crit_t crit, pfe_mac_type_t type, pfe_drv_id_t owner);
 static void pfe_emac_addr_db_init(pfe_emac_t *emac);
-static errno_t pfe_emac_addr_db_add(pfe_emac_t *emac, pfe_mac_addr_t addr, bool_t in_hash_grp, uint32_t data, pfe_ct_phy_if_id_t owner);
-static pfe_mac_addr_db_entry_t *pfe_emac_addr_db_find_by_hash(pfe_emac_t *emac, uint32_t hash);
-static pfe_mac_addr_db_entry_t *pfe_emac_addr_db_find_by_addr(pfe_emac_t *emac, pfe_mac_addr_t addr);
-static errno_t pfe_emac_addr_db_del_entry(pfe_emac_t *emac, pfe_mac_addr_db_entry_t *entry);
-static void pfe_emac_addr_db_drop_all(pfe_emac_t *emac);
-static errno_t pfe_emac_del_addr_nolock(pfe_emac_t *emac, pfe_mac_addr_t addr);
+static errno_t pfe_emac_addr_db_add(pfe_emac_t *emac, const pfe_mac_addr_t addr, bool_t in_hash_grp, uint32_t data, pfe_drv_id_t owner);
+static pfe_mac_addr_db_entry_t *pfe_emac_addr_db_find_by_hash(const pfe_emac_t *emac, uint32_t hash);
+static pfe_mac_addr_db_entry_t *pfe_emac_addr_db_find_by_addr(const pfe_emac_t *emac, const pfe_mac_addr_t addr);
+static errno_t pfe_emac_addr_db_del_entry(const pfe_emac_t *emac, pfe_mac_addr_db_entry_t *entry);
+static void pfe_emac_addr_db_drop_all(const pfe_emac_t *emac);
+static errno_t pfe_emac_del_addr_nolock(pfe_emac_t *emac, const pfe_mac_addr_t addr);
+
+/**
+ * @brief		Evaluate given DB entry against specified criterion
+ * @param[in]	entry DB entry to evaluate
+ * @param[in]	crit All, Owner, Type or Owner&Type criterion
+ * @param[in]	type Required type of MAC address (Broadcast, Multicast, Unicast, ANY) criterion
+ * @param[in]	owner Required owner of MAC address
+ * @return		TRUE if entry does match with criterion, FALSE otherwise
+ */
+static bool_t pfe_emac_flush_criterion_eval(const pfe_mac_addr_db_entry_t *entry, pfe_emac_crit_t crit, pfe_mac_type_t type, pfe_drv_id_t owner)
+{
+	bool_t ret = FALSE;
+
+#if defined(PFE_CFG_NULL_ARG_CHECK)
+	if (unlikely(NULL == entry))
+	{
+		NXP_LOG_ERROR("NULL argument received\n");
+		return FALSE;
+	}
+#endif /* PFE_CFG_NULL_ARG_CHECK */
+
+	if (crit == EMAC_CRIT_BY_OWNER)
+	{
+		/* Return the first address where owner match */
+		if (entry->owner == owner)
+		{
+			/* Break if entry match with the rule */
+			ret = TRUE;
+		}
+	}
+	else if (crit == EMAC_CRIT_BY_TYPE)
+	{
+		/* Break if entry match with the rule */
+		ret = pfe_emac_check_crit_by_type(entry->addr, type);
+	}
+	else if (crit == EMAC_CRIT_BY_OWNER_AND_TYPE)
+	{
+		if (entry->owner == owner)
+		{
+			/* Break if entry match with the rule */
+			ret = pfe_emac_check_crit_by_type(entry->addr, type);
+		}
+	}
+	else if (crit == EMAC_CRIT_ALL)
+	{
+		/* Break if entry match with the rule */
+		ret = TRUE;
+	}
+	else
+	{
+		NXP_LOG_WARNING("Unknown criterion\n");
+	}
+
+	return ret;
+}
 
 /**
  * @brief		Initialize the internal MAC address DB
@@ -82,7 +138,7 @@ static void pfe_emac_addr_db_init(pfe_emac_t *emac)
  * @param[in]	data Address slot index associated with the new entry. Only valid when in_hash_grp==FALSE.
  * 					 When in_hash_grp==TRUE this is the hash value.
  */
-static errno_t pfe_emac_addr_db_add(pfe_emac_t *emac, pfe_mac_addr_t addr, bool_t in_hash_grp, uint32_t data, pfe_ct_phy_if_id_t owner)
+static errno_t pfe_emac_addr_db_add(pfe_emac_t *emac, const pfe_mac_addr_t addr, bool_t in_hash_grp, uint32_t data, pfe_drv_id_t owner)
 {
 	pfe_mac_addr_db_entry_t *entry;
 
@@ -117,7 +173,7 @@ static errno_t pfe_emac_addr_db_add(pfe_emac_t *emac, pfe_mac_addr_t addr, bool_
 
 	/*	Add entry to the list */
 	(void)memcpy(entry->addr, addr, sizeof(pfe_mac_addr_t));
-	
+
 	LLIST_AddAtEnd(&entry->iterator, &emac->mac_addr_list);
 
 	return EOK;
@@ -131,7 +187,7 @@ static errno_t pfe_emac_addr_db_add(pfe_emac_t *emac, pfe_mac_addr_t addr, bool_
  * @retval		EOK Success
  * @retval		EINVAL Entry is NULL
  */
-static errno_t pfe_emac_addr_db_del_entry(pfe_emac_t *emac, pfe_mac_addr_db_entry_t *entry)
+static errno_t pfe_emac_addr_db_del_entry(const pfe_emac_t *emac, pfe_mac_addr_db_entry_t *entry)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely((NULL == emac) || (NULL == entry)))
@@ -152,7 +208,7 @@ static errno_t pfe_emac_addr_db_del_entry(pfe_emac_t *emac, pfe_mac_addr_db_entr
  * @details		Access to the shared resources => needs to be called within the critical section!
  * @param[in]	emac The EMAC instance
  */
-static void pfe_emac_addr_db_drop_all(pfe_emac_t *emac)
+static void pfe_emac_addr_db_drop_all(const pfe_emac_t *emac)
 {
 	pfe_mac_addr_db_entry_t *entry;
 	LLIST_t *curItem, *tmp_item;
@@ -181,7 +237,7 @@ static void pfe_emac_addr_db_drop_all(pfe_emac_t *emac)
  * @param[in]	addr The MAC address to search
  * @return		The DB entry if found or NULL if address is not present
  */
-static pfe_mac_addr_db_entry_t *pfe_emac_addr_db_find_by_addr(pfe_emac_t *emac, pfe_mac_addr_t addr)
+static pfe_mac_addr_db_entry_t *pfe_emac_addr_db_find_by_addr(const pfe_emac_t *emac, const pfe_mac_addr_t addr)
 {
 	pfe_mac_addr_db_entry_t *entry = NULL;
 	LLIST_t *curItem;
@@ -212,7 +268,7 @@ static pfe_mac_addr_db_entry_t *pfe_emac_addr_db_find_by_addr(pfe_emac_t *emac,
  * @param[in]	emac The EMAC instance
  * @return		The DB entry if found or NULL if address is not present
  */
-static pfe_mac_addr_db_entry_t *pfe_emac_addr_db_get_first(pfe_emac_t *emac)
+static pfe_mac_addr_db_entry_t *pfe_emac_addr_db_get_first(const pfe_emac_t *emac)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == emac))
@@ -239,7 +295,7 @@ static pfe_mac_addr_db_entry_t *pfe_emac_addr_db_get_first(pfe_emac_t *emac)
  * @param[in]	hash The hash to search
  * @return		The DB entry if found or NULL if address is not present
  */
-static pfe_mac_addr_db_entry_t *pfe_emac_addr_db_find_by_hash(pfe_emac_t *emac, uint32_t hash)
+static pfe_mac_addr_db_entry_t *pfe_emac_addr_db_find_by_hash(const pfe_emac_t *emac, uint32_t hash)
 {
 	pfe_mac_addr_db_entry_t *entry = NULL;
 	LLIST_t *curItem;
@@ -267,11 +323,11 @@ static pfe_mac_addr_db_entry_t *pfe_emac_addr_db_find_by_hash(pfe_emac_t *emac,
 /**
  * @brief		Search a MAC address within internal DB of registered addresses based on slot index
  * @details		Access to the shared resources => needs to be called within the critical section!
- * @param[in]	emac The EMAC instance
+* @param[in]	emac The EMAC instance
  * @param[in]	slot The slot index to search
  * @return		The DB entry if found or NULL if address is not present
  */
-static pfe_mac_addr_db_entry_t *pfe_emac_addr_db_find_by_slot(pfe_emac_t *emac, uint8_t slot)
+static pfe_mac_addr_db_entry_t *pfe_emac_addr_db_find_by_slot(const pfe_emac_t *emac, uint8_t slot)
 {
 	pfe_mac_addr_db_entry_t *entry = NULL;
 	LLIST_t *curItem;
@@ -306,12 +362,12 @@ static pfe_mac_addr_db_entry_t *pfe_emac_addr_db_find_by_slot(pfe_emac_t *emac,
  * @param[in]	duplex The duplex type @see pfe_emac_duplex_t
  * @return		The EMAC instance or NULL if failed
  */
-pfe_emac_t *pfe_emac_create(void *cbus_base_va, void *emac_base, pfe_emac_mii_mode_t mode, pfe_emac_speed_t speed, pfe_emac_duplex_t duplex)
+pfe_emac_t *pfe_emac_create(addr_t cbus_base_va, addr_t emac_base, pfe_emac_mii_mode_t mode, pfe_emac_speed_t speed, pfe_emac_duplex_t duplex)
 {
 	pfe_emac_t *emac;
 
 #if defined(PFE_CFG_NULL_ARG_CHECK)
-	if (unlikely(NULL == cbus_base_va))
+	if (unlikely(NULL_ADDR == cbus_base_va))
 	{
 		NXP_LOG_ERROR("NULL argument received\n");
 		return NULL;
@@ -329,7 +385,7 @@ pfe_emac_t *pfe_emac_create(void *cbus_base_va, void *emac_base, pfe_emac_mii_mo
 		(void)memset(emac, 0, sizeof(pfe_emac_t));
 		emac->cbus_base_va = cbus_base_va;
 		emac->emac_base_offset = emac_base;
-		emac->emac_base_va = (void *)((addr_t)emac->cbus_base_va + (addr_t)emac->emac_base_offset);
+		emac->emac_base_va = (emac->cbus_base_va + emac->emac_base_offset);
 		emac->mode = EMAC_MODE_INVALID;
 		emac->speed = EMAC_SPEED_INVALID;
 		emac->duplex = EMAC_DUPLEX_INVALID;
@@ -409,7 +465,7 @@ pfe_emac_t *pfe_emac_create(void *cbus_base_va, void *emac_base, pfe_emac_mii_mo
  * @details		Data transmission/reception is possible after this call
  * @param[in]	emac The EMAC instance
  */
-void pfe_emac_enable(pfe_emac_t *emac)
+void pfe_emac_enable(const pfe_emac_t *emac)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == emac))
@@ -427,7 +483,7 @@ void pfe_emac_enable(pfe_emac_t *emac)
  * @details		No data transmission/reception is possible after this call
  * @param[in]	emac The EMAC instance
  */
-void pfe_emac_disable(pfe_emac_t *emac)
+void pfe_emac_disable(const pfe_emac_t *emac)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == emac))
@@ -639,7 +695,7 @@ errno_t pfe_emac_set_ts_time(pfe_emac_t *emac, uint32_t sec, uint32_t nsec)
  * @details		This function controls the EMAC internal loop-back mode
  * @param[in]	emac The EMAC instance
  */
-void pfe_emac_enable_loopback(pfe_emac_t *emac)
+void pfe_emac_enable_loopback(const pfe_emac_t *emac)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == emac))
@@ -656,7 +712,7 @@ void pfe_emac_enable_loopback(pfe_emac_t *emac)
  * @brief		Disable loop-back mode
  * @param[in]	emac The EMAC instance
  */
-void pfe_emac_disable_loopback(pfe_emac_t *emac)
+void pfe_emac_disable_loopback(const pfe_emac_t *emac)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == emac))
@@ -673,7 +729,7 @@ void pfe_emac_disable_loopback(pfe_emac_t *emac)
  * @brief		Enable promiscuous mode
  * @param[in]	emac The EMAC instance
  */
-void pfe_emac_enable_promisc_mode(pfe_emac_t *emac)
+void pfe_emac_enable_promisc_mode(const pfe_emac_t *emac)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == emac))
@@ -690,7 +746,7 @@ void pfe_emac_enable_promisc_mode(pfe_emac_t *emac)
  * @brief		Disable promiscuous mode
  * @param[in]	emac The EMAC instance
  */
-void pfe_emac_disable_promisc_mode(pfe_emac_t *emac)
+void pfe_emac_disable_promisc_mode(const pfe_emac_t *emac)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == emac))
@@ -707,7 +763,7 @@ void pfe_emac_disable_promisc_mode(pfe_emac_t *emac)
  * @brief		Enable ALLMULTI mode
  * @param[in]	emac The EMAC instance
  */
-void pfe_emac_enable_allmulti_mode(pfe_emac_t *emac)
+void pfe_emac_enable_allmulti_mode(const pfe_emac_t *emac)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == emac))
@@ -724,7 +780,7 @@ void pfe_emac_enable_allmulti_mode(pfe_emac_t *emac)
  * @brief		Disable ALLMULTI mode
  * @param[in]	emac The EMAC instance
  */
-void pfe_emac_disable_allmulti_mode(pfe_emac_t *emac)
+void pfe_emac_disable_allmulti_mode(const pfe_emac_t *emac)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == emac))
@@ -741,7 +797,7 @@ void pfe_emac_disable_allmulti_mode(pfe_emac_t *emac)
  * @brief		Enable broadcast reception
  * @param[in]	emac The EMAC instance
  */
-void pfe_emac_enable_broadcast(pfe_emac_t *emac)
+void pfe_emac_enable_broadcast(const pfe_emac_t *emac)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == emac))
@@ -758,7 +814,7 @@ void pfe_emac_enable_broadcast(pfe_emac_t *emac)
  * @brief		Disable broadcast reception
  * @param[in]	emac The EMAC instance
  */
-void pfe_emac_disable_broadcast(pfe_emac_t *emac)
+void pfe_emac_disable_broadcast(const pfe_emac_t *emac)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == emac))
@@ -771,12 +827,26 @@ void pfe_emac_disable_broadcast(pfe_emac_t *emac)
 	pfe_emac_cfg_set_broadcast(emac->emac_base_va, FALSE);
 }
 
+void pfe_emac_get_flow_control(const pfe_emac_t *emac, bool_t *tx_enable, bool_t *rx_enable)
+{
+#if defined(PFE_CFG_NULL_ARG_CHECK)
+	if (unlikely(NULL == emac) || unlikely(NULL == tx_enable) ||
+		unlikely(NULL == rx_enable))
+	{
+		NXP_LOG_ERROR("NULL argument received\n");
+		return;
+	}
+#endif /* PFE_CFG_NULL_ARG_CHECK */
+	pfe_emac_cfg_get_tx_flow_control(emac->emac_base_va,tx_enable);
+	pfe_emac_cfg_get_rx_flow_control(emac->emac_base_va,rx_enable);
+}
+
 /**
- * @brief		Enable flow control
+ * @brief		Enable tx flow control
  * @details		Enables PAUSE frames processing
  * @param		emac The EMAC instance
  */
-void pfe_emac_enable_flow_control(pfe_emac_t *emac)
+void pfe_emac_enable_tx_flow_control(const pfe_emac_t *emac)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == emac))
@@ -786,15 +856,15 @@ void pfe_emac_enable_flow_control(pfe_emac_t *emac)
 	}
 #endif /* PFE_CFG_NULL_ARG_CHECK */
 
-	pfe_emac_cfg_set_flow_control(emac->emac_base_va, TRUE);
+	pfe_emac_cfg_set_tx_flow_control(emac->emac_base_va, TRUE);
 }
 
 /**
- * @brief		Disable flow control
+ * @brief		Disable tx flow control
  * @details		Disables PAUSE frames processing
  * @param		emac The EMAC instance
  */
-void pfe_emac_disable_flow_control(pfe_emac_t *emac)
+void pfe_emac_disable_tx_flow_control(const pfe_emac_t *emac)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == emac))
@@ -804,16 +874,53 @@ void pfe_emac_disable_flow_control(pfe_emac_t *emac)
 	}
 #endif /* PFE_CFG_NULL_ARG_CHECK */
 
-	pfe_emac_cfg_set_flow_control(emac->emac_base_va, FALSE);
+	pfe_emac_cfg_set_tx_flow_control(emac->emac_base_va, FALSE);
+}
+
+/**
+ * @brief               Enable rx flow control
+ * @details             Enables PAUSE frames processing
+ * @param               emac The EMAC instance
+ */
+void pfe_emac_enable_rx_flow_control(const pfe_emac_t *emac)
+{
+#if defined(PFE_CFG_NULL_ARG_CHECK)
+        if (unlikely(NULL == emac))
+        {
+                NXP_LOG_ERROR("NULL argument received\n");
+                return;
+        }
+#endif /* PFE_CFG_NULL_ARG_CHECK */
+
+        pfe_emac_cfg_set_rx_flow_control(emac->emac_base_va, TRUE);
+}
+
+/**
+ * @brief               Disable rx flow control
+ * @details             Disables PAUSE frames processing
+ * @param               emac The EMAC instance
+ */
+void pfe_emac_disable_rx_flow_control(const pfe_emac_t *emac)
+{
+#if defined(PFE_CFG_NULL_ARG_CHECK)
+        if (unlikely(NULL == emac))
+        {
+                NXP_LOG_ERROR("NULL argument received\n");
+                return;
+        }
+#endif /* PFE_CFG_NULL_ARG_CHECK */
+
+        pfe_emac_cfg_set_rx_flow_control(emac->emac_base_va, FALSE);
 }
 
+
 /**
  * @brief		Set maximum frame length
  * @param		emac The EMAC instance
  * @param		len New frame length
  * @return		EOK if success errno otherwise
  */
-errno_t pfe_emac_set_max_frame_length(pfe_emac_t *emac, uint32_t len)
+errno_t pfe_emac_set_max_frame_length(const pfe_emac_t *emac, uint32_t len)
 {
 	errno_t ret;
 
@@ -839,7 +946,7 @@ errno_t pfe_emac_set_max_frame_length(pfe_emac_t *emac, uint32_t len)
  * @param[in]	emac The EMAC instance
  * @return		Currently configured MII mode @see pfe_emac_mii_mode_t
  */
-pfe_emac_mii_mode_t pfe_emac_get_mii_mode(pfe_emac_t *emac)
+pfe_emac_mii_mode_t pfe_emac_get_mii_mode(const pfe_emac_t *emac)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == emac))
@@ -859,7 +966,7 @@ pfe_emac_mii_mode_t pfe_emac_get_mii_mode(pfe_emac_t *emac)
  * @param[out]	duplex The EMAC duplex configuration @see pfe_emac_duplex_t
  * @return		EOK if success
  */
-errno_t pfe_emac_get_link_config(pfe_emac_t *emac, pfe_emac_speed_t *speed, pfe_emac_duplex_t *duplex)
+errno_t pfe_emac_get_link_config(const pfe_emac_t *emac, pfe_emac_speed_t *speed, pfe_emac_duplex_t *duplex)
 {
 	errno_t ret;
 
@@ -884,7 +991,7 @@ errno_t pfe_emac_get_link_config(pfe_emac_t *emac, pfe_emac_speed_t *speed, pfe_
  * @param[out]	link The EMAC link status
  * @return		EOK if success
  */
-errno_t pfe_emac_get_link_status(pfe_emac_t *emac, pfe_emac_link_speed_t *link_speed, pfe_emac_duplex_t *duplex, bool_t *link)
+errno_t pfe_emac_get_link_status(const pfe_emac_t *emac, pfe_emac_link_speed_t *link_speed, pfe_emac_duplex_t *duplex, bool_t *link)
 {
 	errno_t ret;
 
@@ -901,18 +1008,67 @@ errno_t pfe_emac_get_link_status(pfe_emac_t *emac, pfe_emac_link_speed_t *link_s
 	return ret;
 }
 
+/**
+ * @brief		Set the EMAC link speed
+ * @param[in]	emac The EMAC instance
+ * @param[in]	link_speed The EMAC link speed @see pfe_emac_link_speed_t
+ * @return		EOK if success
+ * @details		This function can be used for runtime changes of speed (eg. after auto-negotiation).
+ */
+errno_t pfe_emac_set_link_speed(const pfe_emac_t *emac, pfe_emac_speed_t link_speed)
+{
+	errno_t ret;
+
+#if defined(PFE_CFG_NULL_ARG_CHECK)
+	if (unlikely(NULL == emac))
+	{
+		NXP_LOG_ERROR("NULL argument received\n");
+		return EINVAL;
+	}
+#endif /* PFE_CFG_NULL_ARG_CHECK */
+
+	ret = pfe_emac_cfg_set_speed(emac->emac_base_va, link_speed);
+
+	return ret;
+}
+
+/**
+ * @brief		Set the EMAC link duplex
+ * @param[in]	emac The EMAC instance
+ * @param[in]	duplex The EMAC duplex @see pfe_emac_duplex_t
+ * @return		EOK if success
+ * @details		This function can be used for runtime changes of duplex (eg. after auto-negotiation).
+ */
+errno_t pfe_emac_set_link_duplex(const pfe_emac_t *emac, pfe_emac_duplex_t duplex)
+{
+	errno_t ret;
+
+#if defined(PFE_CFG_NULL_ARG_CHECK)
+	if (unlikely(NULL == emac))
+	{
+		NXP_LOG_ERROR("NULL argument received\n");
+		return EINVAL;
+	}
+#endif /* PFE_CFG_NULL_ARG_CHECK */
+
+	ret = pfe_emac_cfg_set_duplex(emac->emac_base_va, duplex);
+
+	return ret;
+}
+
 /**
  * @brief		Delete MAC addresses added by owner with defined type
  * @param[in]	emac The EMAC instance
- * @param[in]	mode The flush mode (flush all or just certain type of MAC addresses)
+ * @param[in]	crit All, Owner, Type or Owner&Type criterion
+ * @param[in]	type Required type of MAC address (Broadcast, Multicast, Unicast, ANY) criterion
  * @param[in]	owner The identification of driver instance
  * @return		EOK if success
  * @return		EINVAL Requested address is broadcast
  * @note		Must not be preempted by: pfe_emac_del_addr(), pfe_emac_add_addr(), pfe_emac_destroy()
  */
-errno_t pfe_emac_flush_mac_addrs(pfe_emac_t *emac, pfe_flush_mode_t mode, pfe_ct_phy_if_id_t owner)
+errno_t pfe_emac_flush_mac_addrs(pfe_emac_t *emac, pfe_emac_crit_t crit, pfe_mac_type_t type, pfe_drv_id_t owner)
 {
-	pfe_mac_addr_db_entry_t *entry = NULL;
+	const pfe_mac_addr_db_entry_t *entry = NULL;
 	LLIST_t *item, *tmp_item;
 	errno_t ret;
 	pfe_mac_addr_t addr;
@@ -935,10 +1091,7 @@ errno_t pfe_emac_flush_mac_addrs(pfe_emac_t *emac, pfe_flush_mode_t mode, pfe_ct
 		if ((NULL != entry) && (entry->owner == owner))
 		{
 			(void)memcpy(addr, entry->addr, sizeof(pfe_mac_addr_t));
-			
-			if ((mode == PFE_FLUSH_MODE_ALL) ||
-				((mode == PFE_FLUSH_MODE_MULTI) && (TRUE  == pfe_emac_is_multi(entry->addr))) ||
-				((mode == PFE_FLUSH_MODE_UNI)   && (FALSE == pfe_emac_is_multi(entry->addr))))
+			if (TRUE == pfe_emac_flush_criterion_eval(entry, crit, type, owner))
 			{
 				ret = pfe_emac_del_addr_nolock(emac, entry->addr);
 				if (EOK != ret)
@@ -952,13 +1105,9 @@ errno_t pfe_emac_flush_mac_addrs(pfe_emac_t *emac, pfe_flush_mode_t mode, pfe_ct
 				}
 				else
 				{
-					NXP_LOG_INFO("Address %02x:%02x:%02x:%02x:%02x:%02x removed from owner ID %d\n", addr[0], addr[1], addr[2], addr[3], addr[4], addr[5], owner);
+					NXP_LOG_DEBUG("Address %02x:%02x:%02x:%02x:%02x:%02x removed from owner ID %d\n", addr[0], addr[1], addr[2], addr[3], addr[4], addr[5], owner);
 				}
 			}
-			else
-			{
-				;
-			}
 		}
 		else
 		{
@@ -983,7 +1132,7 @@ errno_t pfe_emac_flush_mac_addrs(pfe_emac_t *emac, pfe_flush_mode_t mode, pfe_ct
  * @retval		ENOENT Address not found
  * @note		Must not be preempted by: pfe_emac_add_addr(), pfe_emac_destroy()
  */
-errno_t pfe_emac_del_addr(pfe_emac_t *emac, pfe_mac_addr_t addr)
+errno_t pfe_emac_del_addr(pfe_emac_t *emac, const pfe_mac_addr_t addr)
 {
 	errno_t ret;
 	
@@ -1018,7 +1167,7 @@ errno_t pfe_emac_del_addr(pfe_emac_t *emac, pfe_mac_addr_t addr)
  * @retval		ENOENT Address not found
  * @note		Must not be preempted by: pfe_emac_add_addr(), pfe_emac_destroy()
  */
-static errno_t pfe_emac_del_addr_nolock(pfe_emac_t *emac, pfe_mac_addr_t addr)
+static errno_t pfe_emac_del_addr_nolock(pfe_emac_t *emac, const pfe_mac_addr_t addr)
 {
 	pfe_mac_addr_db_entry_t *entry, local_entry;
 	errno_t ret;
@@ -1085,7 +1234,7 @@ static errno_t pfe_emac_del_addr_nolock(pfe_emac_t *emac, pfe_mac_addr_t addr)
 
 		/*	Prepare zero-filled address */
 		(void)memset(zero_addr, 0, sizeof(pfe_mac_addr_t));
-		
+
 		/*	Clear the specific slot */
 		pfe_emac_cfg_write_addr_slot(emac->emac_base_va, zero_addr, local_entry.addr_slot_idx);
 
@@ -1106,11 +1255,11 @@ static errno_t pfe_emac_del_addr_nolock(pfe_emac_t *emac, pfe_mac_addr_t addr)
  * @retval		EEXIST Address already added
  * @note		Must not be preempted by: pfe_emac_del_addr(), pfe_emac_destroy()
  */
-errno_t pfe_emac_add_addr(pfe_emac_t *emac, pfe_mac_addr_t addr, pfe_ct_phy_if_id_t owner)
+errno_t pfe_emac_add_addr(pfe_emac_t *emac, const pfe_mac_addr_t addr, pfe_drv_id_t owner)
 {
 	uint32_t slot;
 	errno_t ret;
-	pfe_mac_addr_db_entry_t *entry;
+	const pfe_mac_addr_db_entry_t *entry;
 	int32_t hash;
 
 #if defined(PFE_CFG_NULL_ARG_CHECK)
@@ -1166,8 +1315,16 @@ errno_t pfe_emac_add_addr(pfe_emac_t *emac, pfe_mac_addr_t addr, pfe_ct_phy_if_i
 		hash = pfe_emac_cfg_get_hash(emac->emac_base_va, addr);
 		
 		/*	Store address into EMAC's internal DB together with 'in_hash_grp' flag and hash */
-		pfe_emac_addr_db_add(emac, addr, TRUE, hash, owner);
-		
+		ret = pfe_emac_addr_db_add(emac, addr, TRUE, hash, owner);
+		if (EOK != ret)
+		{
+			if (EOK != oal_mutex_unlock(&emac->mutex))
+			{
+				NXP_LOG_DEBUG("Mutex unlock failed\n");
+			}
+			return ret;
+		}
+
 		/*	Configure the HW */
 		if (pfe_emac_is_multi(addr))
 		{
@@ -1218,7 +1375,7 @@ errno_t pfe_emac_add_addr(pfe_emac_t *emac, pfe_mac_addr_t addr, pfe_ct_phy_if_i
  */
 errno_t pfe_emac_get_addr(pfe_emac_t *emac, pfe_mac_addr_t addr)
 {
-	pfe_mac_addr_db_entry_t *entry;
+	const pfe_mac_addr_db_entry_t *entry;
 
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == emac))
@@ -1266,11 +1423,11 @@ void pfe_emac_destroy(pfe_emac_t *emac)
 {
 	pfe_mac_addr_t zero_addr;
 	LLIST_t *curItem, *tmp_item;
-	pfe_mac_addr_db_entry_t *entry;
+	const pfe_mac_addr_db_entry_t *entry;
 
 	/*	Prepare zero-filled address */
 	(void)memset(zero_addr, 0, sizeof(pfe_mac_addr_t));
-	
+
 	if (NULL != emac)
 	{
 		if (EOK != oal_mutex_lock(&emac->mutex))
@@ -1305,7 +1462,7 @@ void pfe_emac_destroy(pfe_emac_t *emac)
 		/*	Destroy mutex */
 		(void)oal_mutex_destroy(&emac->mutex);
 		(void)oal_mutex_destroy(&emac->ts_mutex);
-		
+
 		/*	Release the EMAC instance */
 		oal_mm_free(emac);
 	}
@@ -1618,6 +1775,42 @@ errno_t pfe_emac_mdio_write45(pfe_emac_t *emac, uint8_t pa, uint8_t dev, uint16_
 	return ret;
 }
 
+/**
+ * @brief		Get number of received packets
+ * @param[in]	emac The EMAC instance
+ * @return		Number of received packets
+ */
+uint32_t pfe_emac_get_rx_cnt(const pfe_emac_t *emac)
+{
+#if defined(PFE_CFG_NULL_ARG_CHECK)
+	if (unlikely(NULL == emac))
+	{
+		NXP_LOG_ERROR("NULL argument received\n");
+		return 0xffffffffU;
+	}
+#endif /* PFE_CFG_NULL_ARG_CHECK */
+
+	return pfe_emac_cfg_get_rx_cnt(emac->emac_base_va);
+}
+
+/**
+ * @brief		Get number of transmitted packets
+ * @param[in]	emac The EMAC instance
+ * @return		Number of transmitted packets
+ */
+uint32_t pfe_emac_get_tx_cnt(const pfe_emac_t *emac)
+{
+#if defined(PFE_CFG_NULL_ARG_CHECK)
+	if (unlikely(NULL == emac))
+	{
+		NXP_LOG_ERROR("NULL argument received\n");
+		return 0xffffffffU;
+	}
+#endif /* PFE_CFG_NULL_ARG_CHECK */
+
+	return pfe_emac_cfg_get_tx_cnt(emac->emac_base_va);
+}
+
 /**
  * @brief		Return EMAC runtime statistics in text form
  * @details		Function writes formatted text into given buffer.
@@ -1627,7 +1820,7 @@ errno_t pfe_emac_mdio_write45(pfe_emac_t *emac, uint8_t pa, uint8_t dev, uint16_
  * @param[in]	verb_level 	Verbosity level
  * @return		Number of bytes written to the buffer
  */
-uint32_t pfe_emac_get_text_statistics(pfe_emac_t *emac, char_t *buf, uint32_t buf_len, uint8_t verb_level)
+uint32_t pfe_emac_get_text_statistics(const pfe_emac_t *emac, char_t *buf, uint32_t buf_len, uint8_t verb_level)
 {
 	uint32_t len = 0U;
 
diff --git a/sw/pfe_platform/src/pfe_flexible_filter.c b/sw/pfe_platform/src/pfe_flexible_filter.c
index 43b5572..2774499 100644
--- a/sw/pfe_platform/src/pfe_flexible_filter.c
+++ b/sw/pfe_platform/src/pfe_flexible_filter.c
@@ -1,7 +1,7 @@
 /* =========================================================================
  *  
  *  Copyright (c) 2019 Imagination Technologies Limited
- *  Copyright 2018-2020 NXP
+ *  Copyright 2018-2021 NXP
  *
  *  SPDX-License-Identifier: GPL-2.0
  *
@@ -50,7 +50,7 @@ errno_t pfe_flexible_filter_set(pfe_class_t *class, const uint32_t dmem_addr)
         /* Get the flexible filter address */
         ff_addr = oal_ntohl(mmap.flexible_filter);
         /* Write new address of flexible filter */
-        ret = pfe_class_write_dmem(class, -1, (void *)(addr_t)ff_addr, &ff, sizeof(pfe_ct_flexible_filter_t));
+        ret = pfe_class_write_dmem(class, -1, (addr_t)ff_addr, (void *)&ff, sizeof(pfe_ct_flexible_filter_t));
     }
     return ret;
 }
diff --git a/sw/pfe_platform/src/pfe_fp.c b/sw/pfe_platform/src/pfe_fp.c
index f5c0ad9..fabb127 100644
--- a/sw/pfe_platform/src/pfe_fp.c
+++ b/sw/pfe_platform/src/pfe_fp.c
@@ -1,7 +1,7 @@
 /* =========================================================================
  *  
  *  Copyright (c) 2019 Imagination Technologies Limited
- *  Copyright 2019-2020 NXP
+ *  Copyright 2019-2021 NXP
  *
  *  SPDX-License-Identifier: GPL-2.0
  *
@@ -49,7 +49,8 @@ uint32_t pfe_fp_create_table(pfe_class_t *class, uint8_t rules_count)
     /* Write the table header */
     temp.count = rules_count;
     temp.rules = oal_htonl(addr + sizeof(pfe_ct_fp_table_t));
-    res = pfe_class_write_dmem(class, -1, (void *)addr, &temp, sizeof(pfe_ct_fp_table_t));
+    memset(&temp.fp_stats, 0, sizeof(pfe_ct_class_flexi_parser_stats_t));
+    res = pfe_class_write_dmem(class, -1, addr, (void *)&temp, sizeof(pfe_ct_fp_table_t));
     if(EOK != res)
     {
         NXP_LOG_ERROR("Cannot write to DMEM\n");
@@ -84,7 +85,7 @@ uint32_t pfe_fp_table_write_rule(pfe_class_t *class, uint32_t table_address, pfe
     /* Calculate position in the DMEM */
     addr = table_address + sizeof(pfe_ct_fp_table_t) + (position * sizeof(pfe_ct_fp_rule_t));
     /* Write into the DMEM */
-    res = pfe_class_write_dmem(class, -1, (void *)addr, &temp, sizeof(pfe_ct_fp_rule_t));
+    res = pfe_class_write_dmem(class, -1, addr, (void *)&temp, sizeof(pfe_ct_fp_rule_t));
     if(EOK != res)
     {
         NXP_LOG_ERROR("Cannot write to DMEM\n");
@@ -103,3 +104,21 @@ void pfe_fp_destroy_table(pfe_class_t *class, uint32_t table_address)
     /* Just free the memory */
     pfe_class_dmem_heap_free(class, table_address);
 }
+
+errno_t pfe_fp_table_get_statistics(pfe_class_t *class, uint32_t pe_idx, uint32_t table_address, pfe_ct_class_flexi_parser_stats_t *stats)
+{
+    pfe_ct_fp_table_t temp;
+    errno_t res;
+    addr_t addr;
+
+    addr = table_address;
+    res = pfe_class_read_dmem(class, pe_idx, (void *)&temp, addr, sizeof(pfe_ct_fp_table_t));
+    if(EOK != res)
+    {
+        NXP_LOG_ERROR("Cannot read from DMEM\n");
+	return res;
+    }
+
+    memcpy(stats, &temp.fp_stats, sizeof(pfe_ct_class_flexi_parser_stats_t));
+    return res;
+}
diff --git a/sw/pfe_platform/src/pfe_fw_feature.c b/sw/pfe_platform/src/pfe_fw_feature.c
index 0067d42..339e414 100644
--- a/sw/pfe_platform/src/pfe_fw_feature.c
+++ b/sw/pfe_platform/src/pfe_fw_feature.c
@@ -17,8 +17,8 @@ struct pfe_fw_feature_tag
 {
     pfe_ct_feature_desc_t *ll_data;
     const char *string_base;
-    dmem_rw_func_t dmem_read_func;
-    dmem_rw_func_t dmem_write_func;
+    dmem_read_func_t dmem_read_func;
+    dmem_write_func_t dmem_write_func;
     void *dmem_rw_func_data;  
 };
 
@@ -32,11 +32,11 @@ pfe_fw_feature_t *pfe_fw_feature_create(void)
     feature = oal_mm_malloc(sizeof(pfe_fw_feature_t));
     if(NULL != feature)
     {
-        memset(feature, 0U, sizeof(pfe_fw_feature_t));
+        (void)memset(feature, 0U, sizeof(pfe_fw_feature_t));
     }
     else
     {
-        NXP_LOG_ERROR("Cannot allocate %u bytes of memory for feature\n", (uint32_t)sizeof(pfe_fw_feature_t));
+        NXP_LOG_ERROR("Cannot allocate %u bytes of memory for feature\n", (uint_t)sizeof(pfe_fw_feature_t));
     }
     return feature;
 }
@@ -45,7 +45,7 @@ pfe_fw_feature_t *pfe_fw_feature_create(void)
  * @brief Destroys a feature instance previously created by pfe_fw_feature_create()
  * @param[in] feature Previously created feature
  */
-void pfe_fw_feature_destroy(pfe_fw_feature_t *feature)
+void pfe_fw_feature_destroy(const pfe_fw_feature_t *feature)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == feature))
@@ -106,7 +106,7 @@ errno_t pfe_fw_feature_set_string_base(pfe_fw_feature_t *feature, const char *st
  * @param[in] data Class/Util reference used by read_func/write_func.
  * @return EOK or an error code.
  */
-errno_t pfe_fw_feature_set_dmem_funcs(pfe_fw_feature_t *feature, dmem_rw_func_t read_func, dmem_rw_func_t write_func, void *data)
+errno_t pfe_fw_feature_set_dmem_funcs(pfe_fw_feature_t *feature, dmem_read_func_t read_func, dmem_write_func_t write_func, void *data)
 {    
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely((NULL == feature)||
@@ -130,7 +130,7 @@ errno_t pfe_fw_feature_set_dmem_funcs(pfe_fw_feature_t *feature, dmem_rw_func_t
  * @param[out] name The feature name to be read.
  * @return EOK or an error code. 
  */
-errno_t pfe_fw_feature_get_name(pfe_fw_feature_t *feature, const char **name)
+errno_t pfe_fw_feature_get_name(const pfe_fw_feature_t *feature, const char **name)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely((NULL == feature)||(NULL == name)))
@@ -150,7 +150,7 @@ errno_t pfe_fw_feature_get_name(pfe_fw_feature_t *feature, const char **name)
  * @param[out] desc Descripton of the feature
  * @return EOK or an error code. 
  */
-errno_t pfe_fw_feature_get_desc(pfe_fw_feature_t *feature, const char **desc)
+errno_t pfe_fw_feature_get_desc(const pfe_fw_feature_t *feature, const char **desc)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely((NULL == feature)||(NULL ==desc)))
@@ -171,7 +171,7 @@ errno_t pfe_fw_feature_get_desc(pfe_fw_feature_t *feature, const char **desc)
  * @return EOK or an error code. 
  * @details The variants are always disabled (0), always enabled (1), configured by driver (2).
  */
-errno_t pfe_fw_feature_get_variant(pfe_fw_feature_t *feature, uint8_t *variant)
+errno_t pfe_fw_feature_get_variant(const pfe_fw_feature_t *feature, uint8_t *variant)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely((NULL == feature)||(NULL==variant)))
@@ -191,7 +191,7 @@ errno_t pfe_fw_feature_get_variant(pfe_fw_feature_t *feature, uint8_t *variant)
  * @param[out] def_val The read default value.
  * @return EOK or an error code.
  */
-errno_t pfe_fw_feature_get_def_val(pfe_fw_feature_t *feature, uint8_t *def_val)
+errno_t pfe_fw_feature_get_def_val(const pfe_fw_feature_t *feature, uint8_t *def_val)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely((NULL == feature)||(NULL == def_val)))
@@ -211,7 +211,7 @@ errno_t pfe_fw_feature_get_def_val(pfe_fw_feature_t *feature, uint8_t *def_val)
  * @param[out] val Value read from the DMEM
  * @return EOK or an error code. 
  */
-errno_t pfe_fw_feature_get_val(pfe_fw_feature_t *feature, uint8_t *val)
+errno_t pfe_fw_feature_get_val(const pfe_fw_feature_t *feature, uint8_t *val)
 {
 	 errno_t ret;
 #if defined(PFE_CFG_NULL_ARG_CHECK)
@@ -221,7 +221,7 @@ errno_t pfe_fw_feature_get_val(pfe_fw_feature_t *feature, uint8_t *val)
 		return EINVAL;
 	}
 #endif /* PFE_CFG_NULL_ARG_CHECK */  
-    ret = feature->dmem_read_func(feature->dmem_rw_func_data, 0U, val, (void *)(addr_t)oal_ntohl(feature->ll_data->position), sizeof(uint8_t));
+    ret = feature->dmem_read_func(feature->dmem_rw_func_data, 0U, val, (addr_t)oal_ntohl(feature->ll_data->position), sizeof(uint8_t));
     return ret;
     
 }
@@ -232,10 +232,10 @@ errno_t pfe_fw_feature_get_val(pfe_fw_feature_t *feature, uint8_t *val)
  * @retval TRUE Feature is enabled (the enable variable value is not 0)
  * @retval FALSE Feature is disable (or its state could not be read)
  */
-bool_t pfe_fw_feature_enabled(pfe_fw_feature_t *feature)
+bool_t pfe_fw_feature_enabled(const pfe_fw_feature_t *feature)
 {
-    uint8_t val;
-    errno_t ret;
+	uint8_t val;
+	errno_t ret;
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == feature))
 	{
@@ -244,10 +244,16 @@ bool_t pfe_fw_feature_enabled(pfe_fw_feature_t *feature)
 	}
 #endif /* PFE_CFG_NULL_ARG_CHECK */  
 
-    ret = pfe_fw_feature_get_val(feature, &val);
-    if(EOK != ret) return FALSE;
-    if(0 != val) return TRUE;
-    return FALSE;
+	ret = pfe_fw_feature_get_val(feature, &val);
+	if(EOK != ret) 
+	{
+		return FALSE;
+	}
+	if(0U != val)
+	{
+		return TRUE;
+	}
+	return FALSE;
 }
 
 /**
@@ -256,9 +262,10 @@ bool_t pfe_fw_feature_enabled(pfe_fw_feature_t *feature)
  * @param[in] val Value to be set
  * @return EOK or an error code.
  */
-errno_t pfe_fw_feature_set_val(pfe_fw_feature_t *feature, uint8_t val)
+errno_t pfe_fw_feature_set_val(const pfe_fw_feature_t *feature, uint8_t val)
 {
 	 errno_t ret;
+
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == feature))
 	{
@@ -266,8 +273,6 @@ errno_t pfe_fw_feature_set_val(pfe_fw_feature_t *feature, uint8_t val)
 		return EINVAL;
 	}
 #endif /* PFE_CFG_NULL_ARG_CHECK */  
-    ret = feature->dmem_write_func(feature->dmem_rw_func_data, -1, (void *)(addr_t)oal_ntohl(feature->ll_data->position), &val, sizeof(uint8_t));
-    return ret;
-    
+	ret = feature->dmem_write_func(feature->dmem_rw_func_data, -1, (addr_t)oal_ntohl(feature->ll_data->position), (void *)&val, sizeof(uint8_t));
+	return ret;
 }
-
diff --git a/sw/pfe_platform/src/pfe_gpi.c b/sw/pfe_platform/src/pfe_gpi.c
index bbe08f8..aeab6fa 100644
--- a/sw/pfe_platform/src/pfe_gpi.c
+++ b/sw/pfe_platform/src/pfe_gpi.c
@@ -1,7 +1,7 @@
 /* =========================================================================
  *  
  *  Copyright (c) 2019 Imagination Technologies Limited
- *  Copyright 2018-2020 NXP
+ *  Copyright 2018-2021 NXP
  *
  *  SPDX-License-Identifier: GPL-2.0
  *
@@ -17,12 +17,12 @@
 
 struct pfe_gpi_tag
 {
-	void *cbus_base_va;		/*	CBUS base virtual address */
-	void *gpi_base_offset;	/*	GPI base offset within CBUS space */
-	void *gpi_base_va;		/*	GPI base address (virtual) */
+	addr_t cbus_base_va;		/*	CBUS base virtual address */
+	addr_t gpi_base_offset;	/*	GPI base offset within CBUS space */
+	addr_t gpi_base_va;		/*	GPI base address (virtual) */
 };
 
-static void pfe_gpi_set_config(pfe_gpi_t *gpi, pfe_gpi_cfg_t *cfg)
+static void pfe_gpi_set_config(const pfe_gpi_t *gpi, const pfe_gpi_cfg_t *cfg)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely((NULL == gpi) || (NULL == cfg)))
@@ -47,12 +47,12 @@ static void pfe_gpi_set_config(pfe_gpi_t *gpi, pfe_gpi_cfg_t *cfg)
  * @param[in]	cfg The BMU block configuration
  * @return		The BMU instance or NULL if failed
  */
-pfe_gpi_t *pfe_gpi_create(void *cbus_base_va, void *gpi_base, pfe_gpi_cfg_t *cfg)
+pfe_gpi_t *pfe_gpi_create(addr_t cbus_base_va, addr_t gpi_base, const pfe_gpi_cfg_t *cfg)
 {
 	pfe_gpi_t *gpi;
-	
+
 #if defined(PFE_CFG_NULL_ARG_CHECK)
-	if (unlikely((NULL == cbus_base_va) || (NULL == cfg)))
+	if (unlikely((NULL_ADDR == cbus_base_va) || (NULL == cfg)))
 	{
 		NXP_LOG_ERROR("NULL argument received\n");
 		return NULL;
@@ -60,7 +60,7 @@ pfe_gpi_t *pfe_gpi_create(void *cbus_base_va, void *gpi_base, pfe_gpi_cfg_t *cfg
 #endif /* PFE_CFG_NULL_ARG_CHECK */
 
 	gpi = oal_mm_malloc(sizeof(pfe_gpi_t));
-		
+
 	if (NULL == gpi)
 	{
 		return NULL;
@@ -70,15 +70,15 @@ pfe_gpi_t *pfe_gpi_create(void *cbus_base_va, void *gpi_base, pfe_gpi_cfg_t *cfg
 		(void)memset(gpi, 0, sizeof(pfe_gpi_t));
 		gpi->cbus_base_va = cbus_base_va;
 		gpi->gpi_base_offset = gpi_base;
-		gpi->gpi_base_va = (void *)((addr_t)gpi->cbus_base_va + (addr_t)gpi->gpi_base_offset);
+		gpi->gpi_base_va = (gpi->cbus_base_va + gpi->gpi_base_offset);
 	}
-	
+
 	pfe_gpi_reset(gpi);
-	
+
 	pfe_gpi_disable(gpi);
 
 	pfe_gpi_set_config(gpi, cfg);
-	
+
 	return gpi;
 }
 
@@ -86,7 +86,7 @@ pfe_gpi_t *pfe_gpi_create(void *cbus_base_va, void *gpi_base, pfe_gpi_cfg_t *cfg
  * @brief		Reset the GPI block
  * @param[in]	gpi The GPI instance
  */
-void pfe_gpi_reset(pfe_gpi_t *gpi)
+void pfe_gpi_reset(const pfe_gpi_t *gpi)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == gpi))
@@ -106,7 +106,7 @@ void pfe_gpi_reset(pfe_gpi_t *gpi)
  * @brief		Enable the GPI block
  * @param[in]	gpi The GPI instance
  */
-void pfe_gpi_enable(pfe_gpi_t *gpi)
+void pfe_gpi_enable(const pfe_gpi_t *gpi)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == gpi))
@@ -123,7 +123,7 @@ void pfe_gpi_enable(pfe_gpi_t *gpi)
  * @brief		Disable the GPI block
  * @param[in]	gpi The GPI instance
  */
-void pfe_gpi_disable(pfe_gpi_t *gpi)
+void pfe_gpi_disable(const pfe_gpi_t *gpi)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == gpi))
@@ -140,14 +140,14 @@ void pfe_gpi_disable(pfe_gpi_t *gpi)
  * @brief		Destroy GPI instance
  * @param[in]	gpi The GPI instance
  */
-void pfe_gpi_destroy(pfe_gpi_t *gpi)
+void pfe_gpi_destroy(const pfe_gpi_t *gpi)
 {
 	if (NULL != gpi)
 	{
 		pfe_gpi_disable(gpi);
-		
+
 		pfe_gpi_reset(gpi);
-		
+
 		oal_mm_free(gpi);
 	}
 }
@@ -161,10 +161,10 @@ void pfe_gpi_destroy(pfe_gpi_t *gpi)
  * @param[in]	verb_level 	Verbosity level
  * @return		Number of bytes written to the buffer
  */
-uint32_t pfe_gpi_get_text_statistics(pfe_gpi_t *gpi, char_t *buf, uint32_t buf_len, uint8_t verb_level)
+uint32_t pfe_gpi_get_text_statistics(const pfe_gpi_t *gpi, char_t *buf, uint32_t buf_len, uint8_t verb_level)
 {
 	uint32_t len = 0U;
-	
+
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == gpi))
 	{
@@ -172,9 +172,9 @@ uint32_t pfe_gpi_get_text_statistics(pfe_gpi_t *gpi, char_t *buf, uint32_t buf_l
 		return 0U;
 	}
 #endif /* PFE_CFG_NULL_ARG_CHECK */
-	
+
 	len += pfe_gpi_cfg_get_text_stat(gpi->gpi_base_va, buf, buf_len, verb_level);
-	
-	
+
+
 	return len;
 }
diff --git a/sw/pfe_platform/src/pfe_hif.c b/sw/pfe_platform/src/pfe_hif.c
index db775b7..b41575b 100644
--- a/sw/pfe_platform/src/pfe_hif.c
+++ b/sw/pfe_platform/src/pfe_hif.c
@@ -1,7 +1,7 @@
 /* =========================================================================
  *  
  *  Copyright (c) 2019 Imagination Technologies Limited
- *  Copyright 2018-2020 NXP
+ *  Copyright 2018-2021 NXP
  *
  *  SPDX-License-Identifier: GPL-2.0
  *
@@ -17,7 +17,7 @@
 
 struct pfe_hif_tag
 {
-	void *cbus_base_va;			/*	CBUS base virtual address */
+	addr_t cbus_base_va;			/*	CBUS base virtual address */
 	pfe_hif_chnl_t **channels;
 #ifdef PFE_CFG_PARANOID_IRQ
 	oal_mutex_t lock;			/*	Mutex to lock access to HW resources */
@@ -30,7 +30,7 @@ struct pfe_hif_tag
  * @param[in]	hif The HIF instance
  * @return		EOK if interrupt has been processed
  */
-errno_t pfe_hif_isr(pfe_hif_t *hif)
+errno_t pfe_hif_isr(const pfe_hif_t *hif)
 {
 	errno_t ret;
 
@@ -67,7 +67,7 @@ errno_t pfe_hif_isr(pfe_hif_t *hif)
  * @details		Only affects HIF IRQs, not channel IRQs.
  * @param[in]	hif The HIF instance
  */
-void pfe_hif_irq_mask(pfe_hif_t *hif)
+void pfe_hif_irq_mask(const pfe_hif_t *hif)
 {
 #ifdef PFE_CFG_PARANOID_IRQ
 	if (EOK != oal_mutex_lock(&hif->lock))
@@ -91,7 +91,7 @@ void pfe_hif_irq_mask(pfe_hif_t *hif)
  * @details		Only affects HIF IRQs, not channel IRQs.
  * @param[in]	hif The HIF instance
  */
-void pfe_hif_irq_unmask(pfe_hif_t *hif)
+void pfe_hif_irq_unmask(const pfe_hif_t *hif)
 {
 #ifdef PFE_CFG_PARANOID_IRQ
 	if (EOK != oal_mutex_lock(&hif->lock))
@@ -118,7 +118,7 @@ void pfe_hif_irq_unmask(pfe_hif_t *hif)
  * @param[in]	channels Bitmask specifying channels to be managed by the instance
  * @return		The HIF instance or NULL if failed
  */
-pfe_hif_t *pfe_hif_create(void *cbus_base_va, pfe_hif_chnl_id_t channels)
+pfe_hif_t *pfe_hif_create(addr_t cbus_base_va, pfe_hif_chnl_id_t channels)
 {
 	pfe_hif_t *hif;
 	int32_t ii;
@@ -128,7 +128,7 @@ pfe_hif_t *pfe_hif_create(void *cbus_base_va, pfe_hif_chnl_id_t channels)
 #endif /* PFE_CFG_PFE_MASTER */
 
 #if defined(PFE_CFG_NULL_ARG_CHECK)
-	if (unlikely(NULL == cbus_base_va))
+	if (unlikely(NULL_ADDR == cbus_base_va))
 	{
 		NXP_LOG_ERROR("NULL argument received\n");
 		return NULL;
@@ -236,7 +236,7 @@ pfe_hif_t *pfe_hif_create(void *cbus_base_va, pfe_hif_chnl_id_t channels)
  * @param[in]	channel_id The channel ID
  * @return		The HIF channel instance or NULL if failed
  */
-pfe_hif_chnl_t *pfe_hif_get_channel(pfe_hif_t *hif, pfe_hif_chnl_id_t channel_id)
+pfe_hif_chnl_t *pfe_hif_get_channel(const pfe_hif_t *hif, pfe_hif_chnl_id_t channel_id)
 {
 	uint32_t ii;
 
@@ -330,7 +330,7 @@ void pfe_hif_destroy(pfe_hif_t *hif)
  * @return		Number of bytes written to the buffer
  *
  */
-uint32_t pfe_hif_get_text_statistics(pfe_hif_t *hif, char_t *buf, uint32_t buf_len, uint8_t verb_level)
+uint32_t pfe_hif_get_text_statistics(const pfe_hif_t *hif, char_t *buf, uint32_t buf_len, uint8_t verb_level)
 {
 	uint32_t len = 0U;
 	
diff --git a/sw/pfe_platform/src/pfe_hif_chnl.c b/sw/pfe_platform/src/pfe_hif_chnl.c
index 609f86b..310b3db 100644
--- a/sw/pfe_platform/src/pfe_hif_chnl.c
+++ b/sw/pfe_platform/src/pfe_hif_chnl.c
@@ -115,7 +115,7 @@ typedef struct
  */
 struct __attribute__((aligned(HAL_CACHE_LINE_SIZE))) __pfe_hif_chnl_tag
 {
-	void *cbus_base_va;				/*	CBUS base virtual address */
+	addr_t cbus_base_va;				/*	CBUS base virtual address */
 	uint32_t id;					/*	Channel ID within HIF (0, 1, 2, ...) */
 	pfe_hif_ring_t *rx_ring;		/*	The RX ring instance */
 	pfe_hif_ring_t *tx_ring;		/*	The TX ring instance */
@@ -142,7 +142,7 @@ static errno_t pfe_hif_chnl_init(pfe_hif_chnl_t *chnl) __attribute__((cold));
 static errno_t pfe_hif_chnl_flush_rx_bd_fifo(pfe_hif_chnl_t *chnl) __attribute__((cold));
 
 #if (TRUE == PFE_HIF_CHNL_CFG_RX_BUFFERS_ENABLED)
-static void pfe_hif_chnl_refill_rx_buffers(pfe_hif_chnl_t *chnl) __attribute__((hot));
+static void pfe_hif_chnl_refill_rx_buffers(const pfe_hif_chnl_t *chnl) __attribute__((hot));
 #endif /* PFE_HIF_CHNL_CFG_RX_BUFFERS_ENABLED */
 
 #ifdef PFE_CFG_HIF_TX_FIFO_FIX
@@ -294,7 +294,7 @@ void pfe_hif_chnl_irq_unmask(pfe_hif_chnl_t *chnl)
  * @brief	Supply fresh RX buffers to the channel
  * @details	Function populates channel's RX resource with buffer from internal pool
  */
-__attribute__((hot)) static void pfe_hif_chnl_refill_rx_buffers(pfe_hif_chnl_t *chnl)
+__attribute__((hot)) static void pfe_hif_chnl_refill_rx_buffers(const pfe_hif_chnl_t *chnl)
 {
 	void *new_buffer_va;
 	void *new_buffer_pa;
@@ -355,13 +355,13 @@ __attribute__((hot)) static void pfe_hif_chnl_refill_rx_buffers(pfe_hif_chnl_t *
  * 					for HIF NOCPY channel abstraction.
  * @return		The channel instance or NULL if failed
  */
-__attribute__((cold)) pfe_hif_chnl_t *pfe_hif_chnl_create(void *cbus_base_va, uint32_t id, pfe_bmu_t *bmu)
+__attribute__((cold)) pfe_hif_chnl_t *pfe_hif_chnl_create(addr_t cbus_base_va, uint32_t id, const pfe_bmu_t *bmu)
 {
 	pfe_hif_chnl_t *chnl;
 	errno_t ret;
 
 #if defined(PFE_CFG_NULL_ARG_CHECK)
-	if (unlikely(NULL == cbus_base_va))
+	if (unlikely(NULL_ADDR == cbus_base_va))
 	{
 		NXP_LOG_ERROR("NULL argument received\n");
 		return NULL;
@@ -499,7 +499,7 @@ free_and_fail:
  * @param[in]	chnl The channel instance
  * @return		The identifier of the channel
  */
-__attribute__((pure, cold)) uint32_t pfe_hif_chnl_get_id(pfe_hif_chnl_t *chnl)
+__attribute__((pure, cold)) uint32_t pfe_hif_chnl_get_id(const pfe_hif_chnl_t *chnl)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == chnl))
@@ -707,7 +707,7 @@ __attribute__((cold)) void pfe_hif_chnl_rx_disable(pfe_hif_chnl_t *chnl)
  * 				pfe_hif_chnl_supply_rx_buf() call(s).
  * @param[in]	chnl The channel instance
  */
-__attribute__((hot)) void pfe_hif_chnl_rx_dma_start(pfe_hif_chnl_t *chnl)
+__attribute__((hot)) void pfe_hif_chnl_rx_dma_start(const pfe_hif_chnl_t *chnl)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == chnl))
@@ -739,7 +739,7 @@ __attribute__((hot)) void pfe_hif_chnl_rx_dma_start(pfe_hif_chnl_t *chnl)
  * 				after TX ring is modified after the pfe_hif_chnl_tx() call(s).
  * @param[in]	chnl The channel instance
  */
-__attribute__((hot)) void pfe_hif_chnl_tx_dma_start(pfe_hif_chnl_t *chnl)
+__attribute__((hot)) void pfe_hif_chnl_tx_dma_start(const pfe_hif_chnl_t *chnl)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == chnl))
@@ -976,6 +976,49 @@ __attribute__((hot)) void pfe_hif_chnl_tx_irq_unmask(pfe_hif_chnl_t *chnl)
 	}
 }
 
+/**
+ * @brief		Get HIF channel RX coalesce
+ * @details		Get HIF channel coalesce setting
+ * @param[in]	chnl The channel instance
+ * @param[out]	frames The channel coalesce setting by frames
+ * @param[out]	cycles The channel coalesce setting by cycles
+ * @retval		EOK On success
+ */
+errno_t pfe_hif_chnl_get_rx_irq_coalesce(pfe_hif_chnl_t *chnl, uint32_t *frames, uint32_t *cycles)
+{
+#if defined(PFE_CFG_NULL_ARG_CHECK)
+	if (unlikely((NULL == chnl) || (NULL == frames) || (NULL == cycles)))
+	{
+		NXP_LOG_ERROR("NULL argument received\n");
+		return EINVAL;
+	}
+#endif /* PFE_CFG_NULL_ARG_CHECK */
+
+	return pfe_hif_chnl_cfg_get_rx_irq_coalesce(chnl->cbus_base_va, chnl->id, frames, cycles);
+}
+
+/**
+ * @brief		Set HIF channel RX coalesce
+ * @details		Set HIF channel coalesce setting.
+ * 				For frames=0 and cycles=0, the coalescing will be disabled.
+ * @param[in]	chnl The channel instance
+ * @param[in]	frames The channel coalesce setting by frames
+ * @param[in]	cycles The channel coalesce setting by cycles
+ * @retval		EOK On success
+ */
+errno_t pfe_hif_chnl_set_rx_irq_coalesce(pfe_hif_chnl_t *chnl, uint32_t frames, uint32_t cycles)
+{
+#if defined(PFE_CFG_NULL_ARG_CHECK)
+	if (unlikely(NULL == chnl))
+	{
+		NXP_LOG_ERROR("NULL argument received\n");
+		return EINVAL;
+	}
+#endif /* PFE_CFG_NULL_ARG_CHECK */
+
+	return pfe_hif_chnl_cfg_set_rx_irq_coalesce(chnl->cbus_base_va, chnl->id, frames, cycles);
+}
+
 /**
  * @brief		Get TX confirmation status
  * @details		After pfe_hif_chnl_tx() call the HIF channel will transmit the
@@ -986,7 +1029,7 @@ __attribute__((hot)) void pfe_hif_chnl_tx_irq_unmask(pfe_hif_chnl_t *chnl)
  * @param[in]	chnl The channel instance
  * @return		TRUE if channel got new TX confirmation, FALSE otherwise
  */
-__attribute__((pure, hot)) bool_t pfe_hif_chnl_has_tx_conf(pfe_hif_chnl_t *chnl)
+__attribute__((pure, hot)) bool_t pfe_hif_chnl_has_tx_conf(const pfe_hif_chnl_t *chnl)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == chnl))
@@ -1004,7 +1047,7 @@ __attribute__((pure, hot)) bool_t pfe_hif_chnl_has_tx_conf(pfe_hif_chnl_t *chnl)
  * @param		chnl The channel instance
  * @return		TRUE if RX resource can accept new buffer
  */
-__attribute__((pure, hot)) bool_t pfe_hif_chnl_can_accept_rx_buf(pfe_hif_chnl_t *chnl)
+__attribute__((pure, hot)) bool_t pfe_hif_chnl_can_accept_rx_buf(const pfe_hif_chnl_t *chnl)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == chnl))
@@ -1026,7 +1069,7 @@ __attribute__((pure, hot)) bool_t pfe_hif_chnl_can_accept_rx_buf(pfe_hif_chnl_t
  * @retval		TRUE Channel can accept 'num' TX requests (buffers)
  * @retval		FALSE Not enough space in TX FIFO
  */
-__attribute__((pure, hot)) bool_t pfe_hif_chnl_can_accept_tx_num(pfe_hif_chnl_t *chnl, uint16_t num)
+__attribute__((pure, hot)) bool_t pfe_hif_chnl_can_accept_tx_num(const pfe_hif_chnl_t *chnl, uint16_t num)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == chnl))
@@ -1099,7 +1142,7 @@ __attribute__((hot)) bool_t pfe_hif_chnl_can_accept_tx_data(pfe_hif_chnl_t *chnl
  * @retval		TRUE TX FIFO is empty
  * @retval		FALSE TX FIFO contains entries waiting for transmission
  */
-__attribute__((pure, hot)) bool_t pfe_hif_chnl_tx_fifo_empty(pfe_hif_chnl_t *chnl)
+__attribute__((pure, hot)) bool_t pfe_hif_chnl_tx_fifo_empty(const pfe_hif_chnl_t *chnl)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == chnl))
@@ -1117,7 +1160,7 @@ __attribute__((pure, hot)) bool_t pfe_hif_chnl_tx_fifo_empty(pfe_hif_chnl_t *chn
  * @param[in]	chnl The channel instance
  * @return		Size of the RX FIFO in number of entries
  */
-__attribute__((pure, cold)) uint32_t pfe_hif_chnl_get_rx_fifo_depth(pfe_hif_chnl_t *chnl)
+__attribute__((pure, cold)) uint32_t pfe_hif_chnl_get_rx_fifo_depth(const pfe_hif_chnl_t *chnl)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == chnl))
@@ -1135,7 +1178,7 @@ __attribute__((pure, cold)) uint32_t pfe_hif_chnl_get_rx_fifo_depth(pfe_hif_chnl
  * @param[in]	chnl The channel instance
  * @return		Size of the TX FIFO in number of entries
  */
-__attribute__((pure, cold)) uint32_t pfe_hif_chnl_get_tx_fifo_depth(pfe_hif_chnl_t *chnl)
+__attribute__((pure, cold)) uint32_t pfe_hif_chnl_get_tx_fifo_depth(const pfe_hif_chnl_t *chnl)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == chnl))
@@ -1164,7 +1207,7 @@ __attribute__((pure, cold)) uint32_t pfe_hif_chnl_get_tx_fifo_depth(pfe_hif_chnl
  * @retval		ENOSPC TX queue is full
  * @retval		EIO Internal error
  */
-__attribute__((hot)) errno_t pfe_hif_chnl_tx(pfe_hif_chnl_t *chnl, void *buf_pa, void *buf_va, uint32_t len, bool_t lifm)
+__attribute__((hot)) errno_t pfe_hif_chnl_tx(const pfe_hif_chnl_t *chnl, const void *buf_pa, const void *buf_va, uint32_t len, bool_t lifm)
 {
 	errno_t err = EOK;
 #if defined(PFE_CFG_HIF_NOCPY_SUPPORT)
@@ -1326,7 +1369,7 @@ __attribute__((hot)) errno_t pfe_hif_chnl_tx(pfe_hif_chnl_t *chnl, void *buf_pa,
  * @retval		EOK Next frame has been transmitted
  * @retval		EAGAIN No pending confirmations
  */
-__attribute__((hot)) errno_t pfe_hif_chnl_get_tx_conf(pfe_hif_chnl_t *chnl)
+__attribute__((hot)) errno_t pfe_hif_chnl_get_tx_conf(const pfe_hif_chnl_t *chnl)
 {
 	bool_t lifm;
 #ifdef PFE_CFG_HIF_TX_FIFO_FIX
@@ -1448,7 +1491,7 @@ __attribute__((hot)) errno_t pfe_hif_chnl_rx(pfe_hif_chnl_t *chnl, void **buf_pa
  * @retval		EAGAIN No more data to receive right now
  * @retval		ENOMEM Out of memory
  */
-__attribute__((hot)) errno_t pfe_hif_chnl_rx_va(pfe_hif_chnl_t *chnl, void **buf_va, uint32_t *len, bool_t *lifm, void **meta)
+__attribute__((hot)) errno_t pfe_hif_chnl_rx_va(const pfe_hif_chnl_t *chnl, void **buf_va, uint32_t *len, bool_t *lifm, void **meta)
 {
 	errno_t err;
 	void *buf_pa;
@@ -1541,7 +1584,7 @@ __attribute__((hot)) errno_t pfe_hif_chnl_rx_va(pfe_hif_chnl_t *chnl, void **buf
  * @return		Size of the metadata storage pointed by the 'meta' arugument of
  * 				the pfe_hif_chnl_rx_va().
  */
-__attribute__((cold)) uint32_t pfe_hif_chnl_get_meta_size(pfe_hif_chnl_t *chnl)
+__attribute__((cold)) uint32_t pfe_hif_chnl_get_meta_size(const pfe_hif_chnl_t *chnl)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == chnl))
@@ -1652,7 +1695,7 @@ __attribute__((hot)) errno_t pfe_hif_chnl_release_buf(pfe_hif_chnl_t *chnl, void
  * @return		EOK Success
  * @note		Must not be preempted by pfe_hif_chnl_rx_disable()
  */
-__attribute__((hot)) errno_t pfe_hif_chnl_supply_rx_buf(pfe_hif_chnl_t *chnl, void *buf_pa, uint32_t size)
+__attribute__((hot)) errno_t pfe_hif_chnl_supply_rx_buf(const pfe_hif_chnl_t *chnl, const void *buf_pa, uint32_t size)
 {
 	errno_t err = EOK;
 
@@ -1959,7 +2002,7 @@ free_and_fail:
  * @param[in]	chnl The channel instance
  * @return		TRUE if the BDP is active, FALSE otherwise
  */
-__attribute__((hot)) bool_t pfe_hif_chnl_is_rx_dma_active(pfe_hif_chnl_t *chnl)
+__attribute__((hot)) bool_t pfe_hif_chnl_is_rx_dma_active(const pfe_hif_chnl_t *chnl)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == chnl))
@@ -1990,7 +2033,7 @@ __attribute__((hot)) bool_t pfe_hif_chnl_is_rx_dma_active(pfe_hif_chnl_t *chnl)
  * @param[in]	chnl The channel instance
  * @return		TRUE if the BDP is active, FALSE otherwise
  */
-__attribute__((hot)) bool_t pfe_hif_chnl_is_tx_dma_active(pfe_hif_chnl_t *chnl)
+__attribute__((hot)) bool_t pfe_hif_chnl_is_tx_dma_active(const pfe_hif_chnl_t *chnl)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == chnl))
@@ -2094,10 +2137,13 @@ static __attribute__((cold)) errno_t pfe_hif_chnl_flush_rx_bd_fifo(pfe_hif_chnl_
 		channel until the BDP RX FIFO is empty. */
 	while (FALSE == pfe_hif_chnl_cfg_is_rx_bdp_fifo_empty(chnl->cbus_base_va, chnl->id))
 	{
-		/*	Provide single RX buffer */
-		if (EOK != pfe_hif_chnl_supply_rx_buf(chnl, rx_buf_pa, DUMMY_RX_BUF_LEN))
+		if (0U == pfe_hif_ring_get_fill_level(chnl->rx_ring))
 		{
-			NXP_LOG_ERROR("Can't provide dummy RX buffer\n");
+			/*	Provide single RX buffer */
+			if (EOK != pfe_hif_chnl_supply_rx_buf(chnl, rx_buf_pa, DUMMY_RX_BUF_LEN))
+			{
+				NXP_LOG_ERROR("Can't provide dummy RX buffer\n");
+			}
 		}
 
 		/*	Send dummy packet to self HIF channel */
@@ -2381,7 +2427,7 @@ __attribute__((cold)) void pfe_hif_chnl_destroy(pfe_hif_chnl_t *chnl)
  * @param[in]	size 		Buffer length
  * @param[in]	verb_level 	Verbosity level, number of data written to the buffer
  */
-__attribute__((cold)) uint32_t pfe_hif_chnl_dump_ring(pfe_hif_chnl_t *chnl, bool_t dump_rx, bool_t dump_tx, char_t *buf, uint32_t size, uint8_t verb_level)
+__attribute__((cold)) uint32_t pfe_hif_chnl_dump_ring(const pfe_hif_chnl_t *chnl, bool_t dump_rx, bool_t dump_tx, char_t *buf, uint32_t size, uint8_t verb_level)
 {
 	uint32_t len = 0;
 
@@ -2406,6 +2452,62 @@ __attribute__((cold)) uint32_t pfe_hif_chnl_dump_ring(pfe_hif_chnl_t *chnl, bool
 	return len;
 }
 
+/**
+ * @brief		Get number of transmitted packets (from PFE to HOST)
+ * @param[in]	emac The channel instance
+ * @return		Number of transmitted packets
+ */
+uint32_t pfe_hif_chnl_get_tx_cnt(const pfe_hif_chnl_t *chnl)
+{
+#if defined(PFE_CFG_NULL_ARG_CHECK)
+	if (unlikely(NULL == chnl))
+	{
+		NXP_LOG_ERROR("NULL argument received\n");
+		return 0xffffffffU;
+	}
+#endif /* PFE_CFG_NULL_ARG_CHECK */
+
+#if defined(PFE_CFG_HIF_NOCPY_SUPPORT)
+	if (chnl->id >= PFE_HIF_CHNL_NOCPY_ID)
+	{
+		/*	HIF_NOCPY */
+		return pfe_hif_chnl_cfg_get_tx_cnt(chnl->cbus_base_va);
+	}
+	else
+#endif /* PFE_CFG_HIF_NOCPY_SUPPORT */
+	{
+		return pfe_hif_chnl_cfg_get_tx_cnt(chnl->cbus_base_va, chnl->id);
+	}
+}
+
+/**
+ * @brief		Get number of received packets (from HOST to PFE)
+ * @param[in]	emac The channel instance
+ * @return		Number of received packets
+ */
+uint32_t pfe_hif_chnl_get_rx_cnt(const pfe_hif_chnl_t *chnl)
+{
+#if defined(PFE_CFG_NULL_ARG_CHECK)
+	if (unlikely(NULL == chnl))
+	{
+		NXP_LOG_ERROR("NULL argument received\n");
+		return 0xffffffffU;
+	}
+#endif /* PFE_CFG_NULL_ARG_CHECK */
+
+#if defined(PFE_CFG_HIF_NOCPY_SUPPORT)
+	if (chnl->id >= PFE_HIF_CHNL_NOCPY_ID)
+	{
+		/*	HIF_NOCPY */
+		return pfe_hif_nocpy_chnl_cfg_get_rx_cnt(chnl->cbus_base_va);
+	}
+	else
+#endif /* PFE_CFG_HIF_NOCPY_SUPPORT */
+	{
+		return pfe_hif_chnl_cfg_get_rx_cnt(chnl->cbus_base_va, chnl->id);
+	}
+}
+
 /**
  * @brief		Return HIF channel runtime statistics in text form
  * @details		Function writes formatted text into given buffer.
@@ -2415,7 +2517,7 @@ __attribute__((cold)) uint32_t pfe_hif_chnl_dump_ring(pfe_hif_chnl_t *chnl, bool
  * @param[in]	verb_level 	Verbosity level, number of data written to the buffer
  * @return		Number of bytes written to the buffe
  */
-__attribute__((cold)) uint32_t pfe_hif_chnl_get_text_statistics(pfe_hif_chnl_t *chnl, char_t *buf, uint32_t buf_len, uint8_t verb_level)
+__attribute__((cold)) uint32_t pfe_hif_chnl_get_text_statistics(const pfe_hif_chnl_t *chnl, char_t *buf, uint32_t buf_len, uint8_t verb_level)
 {
 	uint32_t len = 0U;
 
@@ -2439,7 +2541,8 @@ __attribute__((cold)) uint32_t pfe_hif_chnl_get_text_statistics(pfe_hif_chnl_t *
 		/*	HIF */
 		len += pfe_hif_chnl_cfg_get_text_stat(chnl->cbus_base_va, chnl->id, buf, buf_len, verb_level);
 
-		len += pfe_hif_chnl_dump_ring(chnl, TRUE, TRUE, buf, buf_len, verb_level);
+		if (verb_level >= 9)
+			len += pfe_hif_chnl_dump_ring(chnl, TRUE, TRUE, buf + len, buf_len - len, verb_level);
 	}
 
 	return len;
diff --git a/sw/pfe_platform/src/pfe_hif_nocpy.c b/sw/pfe_platform/src/pfe_hif_nocpy.c
index 4b25ce5..b5a7e67 100644
--- a/sw/pfe_platform/src/pfe_hif_nocpy.c
+++ b/sw/pfe_platform/src/pfe_hif_nocpy.c
@@ -1,7 +1,7 @@
 /* =========================================================================
  *  
  *  Copyright (c) 2019 Imagination Technologies Limited
- *  Copyright 2018-2020 NXP
+ *  Copyright 2018-2021 NXP
  *
  *  SPDX-License-Identifier: GPL-2.0
  *
@@ -16,7 +16,7 @@
 
 struct pfe_hif_nocpy_tag
 {
-	void *base_va;						/*	CBUS base virtual address */
+	addr_t base_va;						/*	CBUS base virtual address */
 	pfe_hif_chnl_t *channel;			/*	Associated channel instance */
 };
 
@@ -27,13 +27,13 @@ struct pfe_hif_nocpy_tag
  * @param[in]	bmu BMU providing buffers for HIF NOCPY operation
  * @return		The HIF_NOCPY instance or NULL if failed
  */
-pfe_hif_nocpy_t *pfe_hif_nocpy_create(void *base_va, pfe_bmu_t *bmu)
+pfe_hif_nocpy_t *pfe_hif_nocpy_create(addr_t base_va, const pfe_bmu_t *bmu)
 {
 	pfe_hif_nocpy_t *hif;
 	errno_t ret;
 
 #if defined(PFE_CFG_NULL_ARG_CHECK)
-	if (unlikely((NULL == base_va) || (NULL == bmu)))
+	if (unlikely((NULL_ADDR == base_va) || (NULL == bmu)))
 	{
 		NXP_LOG_ERROR("NULL argument received\n");
 		return NULL;
@@ -77,7 +77,7 @@ pfe_hif_nocpy_t *pfe_hif_nocpy_create(void *base_va, pfe_bmu_t *bmu)
  * @param[in]	channel_id The channel ID. Currently only PFE_HIF_CHNL_NOCPY_ID is supported.
  * @return		The HIF channel instance or NULL if failed
  */
-pfe_hif_chnl_t *pfe_hif_nocpy_get_channel(pfe_hif_nocpy_t *hif, uint32_t channel_id)
+pfe_hif_chnl_t *pfe_hif_nocpy_get_channel(const pfe_hif_nocpy_t *hif, uint32_t channel_id)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == hif))
@@ -99,7 +99,7 @@ pfe_hif_chnl_t *pfe_hif_nocpy_get_channel(pfe_hif_nocpy_t *hif, uint32_t channel
  * @brief		Destroy HIF_NOCPY instance
  * @param[in]	hif The HIF_NOCPY instance
  */
-void pfe_hif_nocpy_destroy(pfe_hif_nocpy_t *hif)
+void pfe_hif_nocpy_destroy(const pfe_hif_nocpy_t *hif)
 {
 	if (NULL != hif)
 	{
@@ -117,7 +117,7 @@ void pfe_hif_nocpy_destroy(pfe_hif_nocpy_t *hif)
  * @param[in]	verb_level 	Verbosity level, number of data written to the buffer
  * @return		Number of bytes written to the buffer
  */
-uint32_t pfe_hif_nocpy_get_text_statistics(pfe_hif_nocpy_t *hif, char_t *buf, uint32_t buf_len, uint8_t verb_level)
+uint32_t pfe_hif_nocpy_get_text_statistics(const pfe_hif_nocpy_t *hif, char_t *buf, uint32_t buf_len, uint8_t verb_level)
 {
 	uint32_t len = 0U;
 
diff --git a/sw/pfe_platform/src/pfe_hif_ring.c b/sw/pfe_platform/src/pfe_hif_ring.c
index fc955fe..8d94f52 100644
--- a/sw/pfe_platform/src/pfe_hif_ring.c
+++ b/sw/pfe_platform/src/pfe_hif_ring.c
@@ -1,7 +1,7 @@
 /* =========================================================================
  *  
  *  Copyright (c) 2019 Imagination Technologies Limited
- *  Copyright 2018-2020 NXP
+ *  Copyright 2018-2021 NXP
  *
  *  SPDX-License-Identifier: GPL-2.0
  *
@@ -279,14 +279,14 @@ __attribute__((hot)) static inline void inc_write_index_std(pfe_hif_ring_t *ring
 __attribute__((hot)) static inline void dec_write_index_std(pfe_hif_ring_t *ring);
 __attribute__((hot)) static inline void inc_read_index_std(pfe_hif_ring_t *ring);
 __attribute__((cold)) static pfe_hif_ring_t *pfe_hif_ring_create_std(uint16_t seqnum, bool_t rx);
-static inline errno_t pfe_hif_ring_enqueue_buf_std(pfe_hif_ring_t *ring, void *buf_pa, uint32_t length, bool_t lifm);
+static inline errno_t pfe_hif_ring_enqueue_buf_std(pfe_hif_ring_t *ring, const void *buf_pa, uint32_t length, bool_t lifm);
 static inline errno_t pfe_hif_ring_dequeue_buf_std(pfe_hif_ring_t *ring, void **buf_pa, uint32_t *length, bool_t *lifm);
 #ifdef PFE_CFG_HIF_TX_FIFO_FIX
 static inline errno_t pfe_hif_ring_dequeue_plain_std(pfe_hif_ring_t *ring, bool_t *lifm, uint32_t *len);
 #else
 static inline errno_t pfe_hif_ring_dequeue_plain_std(pfe_hif_ring_t *ring, bool_t *lifm);
 #endif /* PFE_CFG_HIF_TX_FIFO_FIX */
-__attribute__((cold)) static void pfe_hif_ring_invalidate_std(pfe_hif_ring_t *ring);
+__attribute__((cold)) static void pfe_hif_ring_invalidate_std(const pfe_hif_ring_t *ring);
 #if defined(PFE_CFG_HIF_NOCPY_SUPPORT)
 __attribute__((hot)) static inline void inc_write_index_nocpy(pfe_hif_ring_t *ring);
 __attribute__((hot)) static inline void inc_read_index_nocpy(pfe_hif_ring_t *ring);
@@ -346,7 +346,7 @@ __attribute__((hot)) static inline void inc_read_index_nocpy(pfe_hif_ring_t *rin
  * 				of free entries
  * @note		Must not be preempted by: pfe_hif_ring_destroy()
  */
-__attribute__((pure, hot)) bool_t pfe_hif_ring_is_below_wm(pfe_hif_ring_t *ring)
+__attribute__((pure, hot)) bool_t pfe_hif_ring_is_below_wm(const pfe_hif_ring_t *ring)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == ring))
@@ -373,7 +373,7 @@ __attribute__((pure, hot)) bool_t pfe_hif_ring_is_below_wm(pfe_hif_ring_t *ring)
  * @return		Number of occupied entries within the ring
  * @note		Must not be preempted by: pfe_hif_ring_destroy()
  */
-__attribute__((pure, hot)) uint32_t pfe_hif_ring_get_fill_level(pfe_hif_ring_t *ring)
+__attribute__((pure, hot)) uint32_t pfe_hif_ring_get_fill_level(const pfe_hif_ring_t *ring)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == ring))
@@ -405,7 +405,7 @@ __attribute__((pure, hot)) uint32_t pfe_hif_ring_get_fill_level(pfe_hif_ring_t *
  * @return		Pointer to the beginning address of the ring
  * @note		Must not be preempted by: pfe_hif_ring_destroy()
  */
-__attribute__((pure, cold)) void *pfe_hif_ring_get_base_pa(pfe_hif_ring_t *ring)
+__attribute__((pure, cold)) void *pfe_hif_ring_get_base_pa(const pfe_hif_ring_t *ring)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == ring))
@@ -424,7 +424,7 @@ __attribute__((pure, cold)) void *pfe_hif_ring_get_base_pa(pfe_hif_ring_t *ring)
  * @return		Pointer to the table
  * @note		Must not be preempted by: pfe_hif_ring_destroy()
  */
-__attribute__((pure, cold)) void *pfe_hif_ring_get_wb_tbl_pa(pfe_hif_ring_t *ring)
+__attribute__((pure, cold)) void *pfe_hif_ring_get_wb_tbl_pa(const pfe_hif_ring_t *ring)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == ring))
@@ -452,7 +452,7 @@ __attribute__((pure, cold)) void *pfe_hif_ring_get_wb_tbl_pa(pfe_hif_ring_t *rin
  *				pfe_hif_ring_get_wb_tbl_pa() is not NULL.
  * @note		Must not be preempted by: pfe_hif_ring_destroy()
  */
-__attribute__((pure, cold)) uint32_t pfe_hif_ring_get_wb_tbl_len(pfe_hif_ring_t *ring)
+__attribute__((pure, cold)) uint32_t pfe_hif_ring_get_wb_tbl_len(const pfe_hif_ring_t *ring)
 {
 #if defined(PFE_CFG_HIF_NOCPY_SUPPORT)
 #if defined(PFE_CFG_NULL_ARG_CHECK)
@@ -481,7 +481,7 @@ __attribute__((pure, cold)) uint32_t pfe_hif_ring_get_wb_tbl_len(pfe_hif_ring_t
  * @return		Ring length in number of entries
  * @note		Must not be preempted by: pfe_hif_ring_destroy()
  */
-__attribute__((pure, hot)) uint32_t pfe_hif_ring_get_len(pfe_hif_ring_t *ring)
+__attribute__((pure, hot)) uint32_t pfe_hif_ring_get_len(const pfe_hif_ring_t *ring)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == ring))
@@ -510,7 +510,7 @@ __attribute__((pure, hot)) uint32_t pfe_hif_ring_get_len(pfe_hif_ring_t *ring)
  * @retval		EPERM Ring is locked and does not accept enqueue requests
  * @note		Must not be preempted by: pfe_hif_ring_destroy()
  */
-__attribute__((hot)) errno_t pfe_hif_ring_enqueue_buf(pfe_hif_ring_t *ring, void *buf_pa, uint32_t length, bool_t lifm)
+__attribute__((hot)) errno_t pfe_hif_ring_enqueue_buf(pfe_hif_ring_t *ring, const void *buf_pa, uint32_t length, bool_t lifm)
 {
 #if defined(PFE_CFG_HIF_NOCPY_SUPPORT)
 #if defined(PFE_CFG_NULL_ARG_CHECK)
@@ -634,7 +634,7 @@ static inline errno_t pfe_hif_ring_enqueue_buf_nocpy(pfe_hif_ring_t *ring, void
 /**
  * @brief		The "standard" HIF variant
  */
-static inline errno_t pfe_hif_ring_enqueue_buf_std(pfe_hif_ring_t *ring, void *buf_pa, uint32_t length, bool_t lifm)
+static inline errno_t pfe_hif_ring_enqueue_buf_std(pfe_hif_ring_t *ring, const void *buf_pa, uint32_t length, bool_t lifm)
 {
 	uint32_t tmp_ctrl_seq_w0;
 
@@ -1115,7 +1115,7 @@ __attribute__((cold)) errno_t pfe_hif_ring_drain_buf(pfe_hif_ring_t *ring, void
  * @param[in]	ring The ring instance
  * @note		Must not be preempted by: pfe_hif_ring_enqueue_buf(), pfe_hif_ring_destroy()
  */
-__attribute__((cold)) void pfe_hif_ring_invalidate(pfe_hif_ring_t *ring)
+__attribute__((cold)) void pfe_hif_ring_invalidate(const pfe_hif_ring_t *ring)
 {
 #if defined(PFE_CFG_HIF_NOCPY_SUPPORT)
 #if defined(PFE_CFG_NULL_ARG_CHECK)
@@ -1169,7 +1169,7 @@ __attribute__((cold)) static void pfe_hif_ring_invalidate_nocpy(pfe_hif_ring_t *
 /**
  * @brief		The "standard" HIF variant
  */
-__attribute__((cold)) static void pfe_hif_ring_invalidate_std(pfe_hif_ring_t *ring)
+__attribute__((cold)) static void pfe_hif_ring_invalidate_std(const pfe_hif_ring_t *ring)
 {
 	uint32_t ii;
 
diff --git a/sw/pfe_platform/src/pfe_idex.c b/sw/pfe_platform/src/pfe_idex.c
index 594558f..868d7a0 100644
--- a/sw/pfe_platform/src/pfe_idex.c
+++ b/sw/pfe_platform/src/pfe_idex.c
@@ -6,9 +6,9 @@
  * ========================================================================= */
 
 #include "pfe_cfg.h"
-#ifdef PFE_CFG_MULTI_INSTANCE_SUPPORT
-
 #include "oal.h"
+
+#ifdef PFE_CFG_MULTI_INSTANCE_SUPPORT
 #include "linked_list.h"
 #include "pfe_hif_drv.h"
 #include "pfe_idex.h"
@@ -168,15 +168,15 @@ typedef struct __attribute__((packed)) pfe_idex_request_tag
 	pfe_idex_request_state_t state;
 	/*	Internal linked list hook */
 	union { /* Avoids changing struct size between 32/64bit architectures */
-        struct __attribute__((packed)) {
-        	LLIST_t list_entry;
+		struct __attribute__((packed)) {
+			LLIST_t list_entry;
 			/*	Internal timeout value */
 			uint32_t timeout;
 			void *resp_buf;
 			uint16_t resp_buf_len;
-        };
-        uint8_t padding[30U];
-    };
+		} config;
+		uint8_t padding[30U];
+	} linked;
 } pfe_idex_request_t;
 
 ct_assert(sizeof(pfe_idex_request_t) == 37);
@@ -269,9 +269,8 @@ static errno_t pfe_idex_ihc_handler(pfe_hif_drv_client_t *client, void *arg, uin
 
 		default:
 		{
-			NXP_LOG_ERROR("Unexpected IHC event: 0x%x\n", event);
+			NXP_LOG_ERROR("Unexpected IHC event: 0x%x\n", (uint_t)event);
 			return EINVAL;
-			break;
 		}
 	}
 
@@ -397,7 +396,7 @@ static void pfe_idex_do_rx(pfe_hif_drv_client_t *client, pfe_idex_t *idex)
 						ret = pfe_idex_request_finalize(idex_resp->seqnum, IDEX_REQ_RES_OK, resp_payload, oal_ntohs(idex_resp->plen));
 						if (EOK != ret)
 						{
-							NXP_LOG_ERROR("Can't finalize IDEX request %d: %d\n", oal_ntohl(idex_resp->seqnum), ret);
+							NXP_LOG_ERROR("Can't finalize IDEX request %u: %d\n", (uint_t)oal_ntohl(idex_resp->seqnum), ret);
 						}
 
 						break;
@@ -434,7 +433,7 @@ static void pfe_idex_do_tx(pfe_hif_drv_client_t *client, pfe_idex_t *idex)
 	void *ref_ptr;
 	pfe_idex_frame_header_t *idex_header;
 
-    (void)idex;
+	(void)idex;
 
 	while (TRUE)
 	{
@@ -516,7 +515,7 @@ static pfe_idex_request_t *pfe_idex_request_get_by_id(pfe_idex_seqnum_t seqnum)
 
 	LLIST_ForEach(item, &idex->req_list)
 	{
-		req = LLIST_Data(item, pfe_idex_request_t, list_entry);
+		req = LLIST_Data(item, pfe_idex_request_t, linked.config.list_entry);
 		if (seqnum == req->seqnum)
 		{
 			return req;
@@ -543,6 +542,7 @@ static errno_t pfe_idex_request_finalize(pfe_idex_seqnum_t seqnum, pfe_idex_requ
 	pfe_idex_request_t *req = NULL;
 	errno_t ret = EOK;
 
+    (void)res;
 	/*	Lock request storage access */
 	if (EOK != oal_mutex_lock(&idex->req_list_lock))
 	{
@@ -558,12 +558,12 @@ static errno_t pfe_idex_request_finalize(pfe_idex_seqnum_t seqnum, pfe_idex_requ
 	else
 	{
 		/*	2.) Copy response data to buffer associated with request */
-		if ((NULL != resp_buf) && (NULL != req->resp_buf))
+		if ((NULL != resp_buf) && (NULL != req->linked.config.resp_buf))
 		{
-			if (resp_len <= req->resp_buf_len)
+			if (resp_len <= req->linked.config.resp_buf_len)
 			{
-				(void)memcpy(req->resp_buf, resp_buf, resp_len);
-				req->resp_buf_len = resp_len;
+				(void)memcpy(req->linked.config.resp_buf, resp_buf, resp_len);
+				req->linked.config.resp_buf_len = resp_len;
 			}
 			else
 			{
@@ -664,14 +664,9 @@ static errno_t pfe_idex_send_response(pfe_ct_phy_if_id_t dst_phy, pfe_idex_respo
 	if (EOK != ret)
 	{
 		NXP_LOG_ERROR("IDEX response TX failed\n");
-		/*	Release the response instance */
-		oal_mm_free_contig(resp);
-	}
-	else
-	{
-		/*	Response transmitted. Will be released once it is processed */
-		;
 	}
+	/*	Release the response instance */
+	oal_mm_free_contig(resp);
 
 	return ret;
 }
@@ -721,10 +716,10 @@ static errno_t pfe_idex_request_send(pfe_ct_phy_if_id_t dst_phy, pfe_idex_reques
 	req->seqnum = seqnum;
 	req->type = type;
 	req->dst_phy_id = dst_phy;
-	req->timeout = IDEX_CFG_REQ_TIMEOUT_SEC;
+	req->linked.config.timeout = IDEX_CFG_REQ_TIMEOUT_SEC;
 	req->state = IDEX_REQ_STATE_NEW;
-	req->resp_buf = resp;
-	req->resp_buf_len = resp_len;
+	req->linked.config.resp_buf = resp;
+	req->linked.config.resp_buf_len = resp_len;
 
 	/*	Add payload */
 	payload = (void *)((addr_t)req + sizeof(pfe_idex_request_t));
@@ -736,7 +731,7 @@ static errno_t pfe_idex_request_send(pfe_ct_phy_if_id_t dst_phy, pfe_idex_reques
 		NXP_LOG_DEBUG("Mutex lock failed\n");
 	}
 
-	LLIST_AddAtEnd(&req->list_entry, &idex->req_list);
+	LLIST_AddAtEnd(&req->linked.config.list_entry, &idex->req_list);
 
 	if (EOK != oal_mutex_unlock(&idex->req_list_lock))
 	{
@@ -825,7 +820,7 @@ static errno_t pfe_idex_request_send(pfe_ct_phy_if_id_t dst_phy, pfe_idex_reques
 			NXP_LOG_DEBUG("Mutex lock failed\n");
 		}
 
-		LLIST_Remove(&req->list_entry);
+		LLIST_Remove(&req->linked.config.list_entry);
 		oal_mm_free_contig(req);
 
 		if (EOK != oal_mutex_unlock(&idex->req_list_lock))
@@ -890,8 +885,8 @@ static errno_t pfe_idex_send_frame(pfe_ct_phy_if_id_t dst_phy, pfe_idex_frame_ty
 #ifndef PFE_CFG_TARGET_OS_LINUX
 	ret = pfe_hif_drv_client_xmit_sg_pkt(pfe_idex.ihc_client, 0U, &sg_list, (void *)idex_hdr);
 #else
-	ret = pfe_hif_drv_client_xmit_ihc_sg_pkt(pfe_idex.ihc_client, dst_phy, 0U, &sg_list, (void *)idex_hdr);
-#endif
+	ret = pfe_hif_drv_client_xmit_ihc_pkt(pfe_idex.ihc_client, dst_phy, 0U, (void *)idex_hdr, sg_list.items[0].len);
+#endif /* PFE_CFG_TARGET_OS_LINUX */
 	if (EOK != ret)
 	{
 		NXP_LOG_ERROR("IDEX frame TX failed. Err %u\n", ret);
@@ -964,15 +959,6 @@ errno_t pfe_idex_init(pfe_hif_drv_t *hif_drv, pfe_ct_phy_if_id_t master)
 		return EFAULT;
 	}
 
-	/*	Activate the driver. From now IHC is available. */
-	ret = pfe_hif_drv_start(hif_drv);
-	if (EOK != ret)
-	{
-		NXP_LOG_ERROR("Unable to start HIF driver\n");
-		pfe_idex_fini();
-		return ret;
-	}
-
 	return EOK;
 }
 
@@ -999,7 +985,7 @@ void pfe_idex_fini(void)
 		{
 			LLIST_ForEachRemovable(item, aux, &idex->req_list)
 			{
-				req = (pfe_idex_request_t *)LLIST_Data(item, pfe_idex_request_t, list_entry);
+				req = (pfe_idex_request_t *)LLIST_Data(item, pfe_idex_request_t, linked.config.list_entry);
 				if (unlikely(NULL != req))
 				{
 					LLIST_Remove(item);
@@ -1116,20 +1102,18 @@ errno_t pfe_idex_rpc(pfe_ct_phy_if_id_t dst_phy, uint32_t id, void *buf, uint16_
 			msg_plen = oal_ntohs(msg->plen);
 
 			/*	Copy RPC response data to caller's buffer */
-			if ((msg_plen > 0U) && (NULL == local_resp_buf))
+			if (0U == msg_plen)
 			{
-				NXP_LOG_WARNING("RPC response data received but there is no buffer supplied\n");
+#ifdef IDEX_CFG_VERBOSE
+				NXP_LOG_DEBUG("RPC response without payload received\n");
+#endif /* IDEX_CFG_VERBOSE */
 			}
-			else if (msg_plen > resp_len)
+			else if (msg_plen > resp_len) /* if the response is too big */
 			{
 				NXP_LOG_ERROR("Caller's buffer is too small\n");
 				ret = ENOMEM;
 			}
-			else if (0U == msg_plen)
-			{
-				/* NXP_LOG_DEBUG("RPC response without payload received\n"); */
-			}
-			else
+			else /* there is response, it is not too big and we have buffer */
 			{
 				payload = (void *)((addr_t)msg + sizeof(pfe_idex_msg_rpc_t));
 				(void)memcpy(resp, payload, msg_plen);
diff --git a/sw/pfe_platform/src/pfe_if_db.c b/sw/pfe_platform/src/pfe_if_db.c
index d3e3f5f..f326030 100644
--- a/sw/pfe_platform/src/pfe_if_db.c
+++ b/sw/pfe_platform/src/pfe_if_db.c
@@ -46,13 +46,13 @@ struct pfe_if_db_entry_tag
 		pfe_log_if_t *log_if;
 		pfe_phy_if_t *phy_if;
 		void *iface;
-	};
+	} info;
 
 	/*	DB/Chaining */
 	LLIST_t list_member;
 };
 
-typedef struct if_db_context_tag
+typedef struct
 {
 	uint32_t session_id;
 	uint32_t seed;
@@ -72,8 +72,8 @@ typedef struct if_db_context_tag
 static if_db_context_t if_db_context;
 
 
-static bool_t pfe_if_db_match_criterion(pfe_if_db_t *db, pfe_if_db_get_criterion_t crit, crit_arg_t *arg, pfe_if_db_entry_t *entry);
-static errno_t pfe_if_db_check_precondition(if_db_context_t *pr_if_db_context, uint32_t session_id);
+static bool_t pfe_if_db_match_criterion(const pfe_if_db_t *db, pfe_if_db_get_criterion_t crit, const crit_arg_t *arg, const pfe_if_db_entry_t *entry);
+static errno_t pfe_if_db_check_precondition(const if_db_context_t *pr_if_db_context, uint32_t session_id);
 #if defined(PFE_CFG_IF_DB_WORKER)
 static void * pfe_if_db_worker(void *arg);
 #endif /* PFE_CFG_IF_DB_WORKER */
@@ -159,7 +159,7 @@ static void * pfe_if_db_worker(void *arg)
  * @retval		PERM Preconditions are not fulfilled
  * @warning		context should be locked before call
  */
-static errno_t pfe_if_db_check_precondition(if_db_context_t *pr_if_db_context, uint32_t session_id)
+static errno_t pfe_if_db_check_precondition(const if_db_context_t *pr_if_db_context, uint32_t session_id)
 {
 	errno_t ret = EOK;
 
@@ -190,7 +190,7 @@ static errno_t pfe_if_db_check_precondition(if_db_context_t *pr_if_db_context, u
  * @retval		TRUE Entry matches the criterion
  * @retval		FALSE Entry does not match the criterion
  */
-static bool_t pfe_if_db_match_criterion(pfe_if_db_t *db, pfe_if_db_get_criterion_t crit, crit_arg_t *arg, pfe_if_db_entry_t *entry)
+static bool_t pfe_if_db_match_criterion(const pfe_if_db_t *db, pfe_if_db_get_criterion_t crit, const crit_arg_t *arg, const pfe_if_db_entry_t *entry)
 {
 	bool_t match = FALSE;
 
@@ -214,11 +214,11 @@ static bool_t pfe_if_db_match_criterion(pfe_if_db_t *db, pfe_if_db_get_criterion
 		{
 			if (PFE_IF_DB_LOG == db->type)
 			{
-				match = (arg->if_id == (uint8_t)pfe_log_if_get_id(entry->log_if));
+				match = (arg->if_id == (uint8_t)pfe_log_if_get_id(entry->info.log_if));
 			}
 			else
 			{
-				match = (arg->if_id == (uint8_t)pfe_phy_if_get_id(entry->phy_if));
+				match = (arg->if_id == (uint8_t)pfe_phy_if_get_id(entry->info.phy_if));
 			}
 
 			break;
@@ -226,7 +226,7 @@ static bool_t pfe_if_db_match_criterion(pfe_if_db_t *db, pfe_if_db_get_criterion
 
 		case IF_DB_CRIT_BY_INSTANCE:
 		{
-			match = (arg->iface == entry->iface);
+			match = (arg->iface == entry->info.iface);
 			break;
 		}
 
@@ -234,11 +234,11 @@ static bool_t pfe_if_db_match_criterion(pfe_if_db_t *db, pfe_if_db_get_criterion
 		{
 			if (PFE_IF_DB_LOG == db->type)
 			{
-				match = (0 == strcmp(arg->name, pfe_log_if_get_name(entry->log_if)));
+				match = (0 == strcmp(arg->name, pfe_log_if_get_name(entry->info.log_if)));
 			}
 			else
 			{
-				match = (0 == strcmp(arg->name, pfe_phy_if_get_name(entry->phy_if)));
+				match = (0 == strcmp(arg->name, pfe_phy_if_get_name(entry->info.phy_if)));
 			}
 
 			break;
@@ -384,7 +384,7 @@ pfe_if_db_t * pfe_if_db_create(pfe_if_db_type_t type)
  * @brief		Destroy DB
  * @param[in]	db The DB instance
  */
-void pfe_if_db_destroy(pfe_if_db_t *db)
+void pfe_if_db_destroy(const pfe_if_db_t *db)
 {
 	if (NULL != db)
 	{
@@ -457,11 +457,11 @@ void pfe_if_db_destroy(pfe_if_db_t *db)
  * @param[in]	entry The entry
  * @return		Physical interface instance
  */
-__attribute__((pure)) pfe_phy_if_t *pfe_if_db_entry_get_phy_if(pfe_if_db_entry_t *entry)
+__attribute__((pure)) pfe_phy_if_t *pfe_if_db_entry_get_phy_if(const pfe_if_db_entry_t *entry)
 {
 	if (NULL != entry)
 	{
-		return entry->phy_if;
+		return entry->info.phy_if;
 	}
 	else
 	{
@@ -474,11 +474,11 @@ __attribute__((pure)) pfe_phy_if_t *pfe_if_db_entry_get_phy_if(pfe_if_db_entry_t
  * @param[in]	entry The entry
  * @return		Logical interface instance
  */
-__attribute__((pure)) pfe_log_if_t *pfe_if_db_entry_get_log_if(pfe_if_db_entry_t *entry)
+__attribute__((pure)) pfe_log_if_t *pfe_if_db_entry_get_log_if(const pfe_if_db_entry_t *entry)
 {
 	if (NULL != entry)
 	{
-		return entry->log_if;
+		return entry->info.log_if;
 	}
 	else
 	{
@@ -548,7 +548,7 @@ errno_t pfe_if_db_add(pfe_if_db_t *db, uint32_t session_id, void *iface, pfe_ct_
 	if (NULL != new_entry)
 	{
 		/*	Store values */
-		new_entry->iface = iface;
+		new_entry->info.iface = iface;
 		new_entry->owner = owner;
 
 		/*	Put to DB */
@@ -774,7 +774,7 @@ errno_t pfe_if_db_get_first(pfe_if_db_t *db, uint32_t session_id, pfe_if_db_get_
  * @warning		The returned entry must not be accessed after pfe_if_db_remove(entry)
  *				or pfe_if_db_drop_all() has been called.
  */
-errno_t pfe_if_db_get_single(pfe_if_db_t *db, uint32_t session_id, pfe_if_db_get_criterion_t crit, void *arg, pfe_if_db_entry_t **db_entry)
+errno_t pfe_if_db_get_single(const pfe_if_db_t *db, uint32_t session_id, pfe_if_db_get_criterion_t crit, void *arg, pfe_if_db_entry_t **db_entry)
 {
 	LLIST_t *curItem;
 	bool_t match = FALSE;
@@ -988,10 +988,10 @@ errno_t pfe_if_db_get_next(pfe_if_db_t *db, uint32_t session_id, pfe_if_db_entry
  * @param[in]	session_id ID of active session
  * @return		EOK if success, error code otherwise
  */
-errno_t pfe_log_if_db_drop_all(pfe_if_db_t *db, uint32_t session_id)
+errno_t pfe_log_if_db_drop_all(const pfe_if_db_t *db, uint32_t session_id)
 {
 	LLIST_t *curItem, *aux;
-	pfe_if_db_entry_t *entry;
+	const pfe_if_db_entry_t *entry;
 
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == db))
diff --git a/sw/pfe_platform/src/pfe_l2br.c b/sw/pfe_platform/src/pfe_l2br.c
index 5883d26..d694e90 100644
--- a/sw/pfe_platform/src/pfe_l2br.c
+++ b/sw/pfe_platform/src/pfe_l2br.c
@@ -142,12 +142,22 @@ typedef struct __pfe_l2br_list_entry_tag
  * @details	Driver is sending signals to the worker thread to request specific
  * 			operations.
  */
-enum pfe_rtable_worker_signals
+enum pfe_l2br_worker_signals
 {
 	SIG_WORKER_STOP,	/*!< Stop the thread */
 	SIG_TIMER_TICK		/*!< Pulse from timer */
 };
 
+/**
+ * @brief	MAC table flush types
+ */
+typedef enum
+{
+	PFE_L2BR_FLUSH_ALL,
+	PFE_L2BR_FLUSH_STATIC,
+	PFE_L2BR_FLUSH_LEARNED
+} pfe_l2br_flush_types;
+
 static errno_t pfe_bd_write_to_class(pfe_l2br_t *bridge, uint32_t base, pfe_ct_bd_entry_t *class_entry);
 static errno_t pfe_l2br_update_hw_entry(pfe_l2br_domain_t *domain);
 static pfe_l2br_domain_t *pfe_l2br_create_default_domain(pfe_l2br_t *bridge, uint16_t vlan);
@@ -176,10 +186,9 @@ static errno_t pfe_bd_write_to_class(pfe_l2br_t *bridge, uint32_t base, pfe_ct_b
 	}
 #endif /* PFE_CFG_NULL_ARG_CHECK */
 
-	return pfe_class_write_dmem(bridge->class, -1, (void *)(addr_t)base, class_entry, sizeof(pfe_ct_bd_entry_t));
+	return pfe_class_write_dmem(bridge->class, -1, (addr_t)base, (void *)class_entry, sizeof(pfe_ct_bd_entry_t));
 }
 
-
 static void pfe_l2br_update_hw_ll_entry(pfe_l2br_domain_t *domain, uint32_t base)
 {
 	pfe_ct_bd_entry_t sw_bd;
@@ -225,10 +234,8 @@ static void pfe_l2br_update_hw_ll_entry(pfe_l2br_domain_t *domain, uint32_t base
 	{
 		NXP_LOG_DEBUG("Class memory write failed\n");
 	}
-
 }
 
-
 /**
  * @brief		Update HW entry according to domain setup
  * @details		Function is intended to propagate domain configuration from host SW instance
@@ -369,12 +376,12 @@ errno_t pfe_l2br_domain_create(pfe_l2br_t *bridge, uint16_t vlan)
 				goto free_and_fail;
 			}
 
-			domain->action_data.forward_list = 0U;
-			domain->action_data.untag_list = 0U;
-			domain->action_data.ucast_hit_action = L2BR_ACT_DISCARD;
-			domain->action_data.ucast_miss_action = L2BR_ACT_DISCARD;
-			domain->action_data.mcast_hit_action = L2BR_ACT_DISCARD;
-			domain->action_data.mcast_miss_action = L2BR_ACT_DISCARD;
+			domain->action_data.item.forward_list = 0U;
+			domain->action_data.item.untag_list = 0U;
+			domain->action_data.item.ucast_hit_action = L2BR_ACT_DISCARD;
+			domain->action_data.item.ucast_miss_action = L2BR_ACT_DISCARD;
+			domain->action_data.item.mcast_hit_action = L2BR_ACT_DISCARD;
+			domain->action_data.item.mcast_miss_action = L2BR_ACT_DISCARD;
 
 			/*	Set action data */
 			ret = pfe_l2br_table_entry_set_action_data(domain->vlan_entry, domain->action_data_u64val);
@@ -617,12 +624,12 @@ static pfe_l2br_domain_t *pfe_l2br_create_fallback_domain(pfe_l2br_t *bridge)
 		NXP_LOG_INFO("Fall-back bridge domain @ 0x%x (class)\n", bridge->dmem_fb_bd_base);
 		NXP_LOG_INFO("Default bridge domain @ 0x%x (class)\n", bridge->dmem_def_bd_base);
 
-		domain->action_data.forward_list = 0U;
-		domain->action_data.untag_list = 0U;
-		domain->action_data.ucast_hit_action = L2BR_ACT_DISCARD;
-		domain->action_data.ucast_miss_action = L2BR_ACT_DISCARD;
-		domain->action_data.mcast_hit_action = L2BR_ACT_DISCARD;
-		domain->action_data.mcast_miss_action = L2BR_ACT_DISCARD;
+		domain->action_data.item.forward_list = 0U;
+		domain->action_data.item.untag_list = 0U;
+		domain->action_data.item.ucast_hit_action = L2BR_ACT_DISCARD;
+		domain->action_data.item.ucast_miss_action = L2BR_ACT_DISCARD;
+		domain->action_data.item.mcast_hit_action = L2BR_ACT_DISCARD;
+		domain->action_data.item.mcast_miss_action = L2BR_ACT_DISCARD;
 
 		if (EOK != pfe_l2br_update_hw_entry(domain))
 		{
@@ -666,8 +673,8 @@ errno_t pfe_l2br_domain_set_ucast_action(pfe_l2br_domain_t *domain, pfe_ct_l2br_
 	}
 #endif /* PFE_CFG_NULL_ARG_CHECK */
 
-	domain->action_data.ucast_hit_action = hit;
-	domain->action_data.ucast_miss_action = miss;
+	domain->action_data.item.ucast_hit_action = hit;
+	domain->action_data.item.ucast_miss_action = miss;
 
 	return pfe_l2br_update_hw_entry(domain);
 }
@@ -689,8 +696,8 @@ errno_t pfe_l2br_domain_get_ucast_action(pfe_l2br_domain_t *domain, pfe_ct_l2br_
 	}
 #endif /* PFE_CFG_NULL_ARG_CHECK */
 
-	*hit = domain->action_data.ucast_hit_action;
-	*miss = domain->action_data.ucast_miss_action;
+	*hit = domain->action_data.item.ucast_hit_action;
+	*miss = domain->action_data.item.ucast_miss_action;
 
 	return EOK;
 }
@@ -714,8 +721,8 @@ errno_t pfe_l2br_domain_set_mcast_action(pfe_l2br_domain_t *domain, pfe_ct_l2br_
 	}
 #endif /* PFE_CFG_NULL_ARG_CHECK */
 
-	domain->action_data.mcast_hit_action = hit;
-	domain->action_data.mcast_miss_action = miss;
+	domain->action_data.item.mcast_hit_action = hit;
+	domain->action_data.item.mcast_miss_action = miss;
 
 	return pfe_l2br_update_hw_entry(domain);
 }
@@ -737,8 +744,8 @@ errno_t pfe_l2br_domain_get_mcast_action(pfe_l2br_domain_t *domain, pfe_ct_l2br_
 	}
 #endif /* PFE_CFG_NULL_ARG_CHECK */
 
-	*hit = domain->action_data.mcast_hit_action;
-	*miss = domain->action_data.mcast_miss_action;
+	*hit = domain->action_data.item.mcast_hit_action;
+	*miss = domain->action_data.item.mcast_miss_action;
 
 	return EOK;
 }
@@ -791,11 +798,11 @@ errno_t pfe_l2br_domain_add_if(pfe_l2br_domain_t *domain, pfe_phy_if_t *iface, b
 	}
 
 	/*	Add it to this domain = update VLAN table entry */
-	domain->action_data.forward_list |= (1U << (uint32_t)id);
+	domain->action_data.item.forward_list |= (1U << (uint32_t)id);
 
 	if (FALSE == tagged)
 	{
-		domain->action_data.untag_list |= (1U << (uint32_t)id);
+		domain->action_data.item.untag_list |= (1U << (uint32_t)id);
 	}
 
 	ret = pfe_l2br_update_hw_entry(domain);
@@ -862,8 +869,8 @@ errno_t pfe_l2br_domain_del_if(pfe_l2br_domain_t *domain, pfe_phy_if_t *iface)
 			id = pfe_phy_if_get_id((pfe_phy_if_t *)entry->ptr);
 
 			/*	Update HW */
-			domain->action_data.forward_list &= ~(1U << (uint32_t)id);
-			domain->action_data.untag_list &= ~(1U << (uint32_t)id);
+			domain->action_data.item.forward_list &= ~(1U << (uint32_t)id);
+			domain->action_data.item.untag_list &= ~(1U << (uint32_t)id);
 
 			ret = pfe_l2br_update_hw_entry(domain);
 			if (EOK != ret)
@@ -919,7 +926,7 @@ __attribute__((pure)) uint32_t pfe_l2br_domain_get_if_list(pfe_l2br_domain_t *do
 	}
 #endif /* PFE_CFG_NULL_ARG_CHECK */
 
-	return domain->action_data.forward_list;
+	return domain->action_data.item.forward_list;
 }
 
 /**
@@ -939,7 +946,7 @@ __attribute__((pure)) uint32_t pfe_l2br_domain_get_untag_if_list(pfe_l2br_domain
 	}
 #endif /* PFE_CFG_NULL_ARG_CHECK */
 
-	return domain->action_data.untag_list;
+	return domain->action_data.item.untag_list;
 }
 
 /**
@@ -1285,10 +1292,10 @@ errno_t pfe_l2br_static_entry_create(pfe_l2br_t *bridge, uint16_t vlan, pfe_mac_
 
 		/* Configure action data */
 		static_entry->action_data.val = 0;
-		static_entry->action_data.static_flag = 1;
-		static_entry->action_data.fresh_flag = 1;
-        static_entry->action_data.local_l3 = 0U;
-		static_entry->action_data.forward_list = static_entry->fw_list;
+		static_entry->action_data.item.static_flag = 1;
+		static_entry->action_data.item.fresh_flag = 1;
+        static_entry->action_data.item.local_l3 = 0U;
+		static_entry->action_data.item.forward_list = static_entry->fw_list;
 
 		if (EOK != pfe_l2br_table_entry_set_vlan(static_entry->entry, vlan))
 		{
@@ -1334,6 +1341,31 @@ table_err:
 	return EINVAL;
 }
 
+static errno_t pfe_l2br_static_entry_destroy_nolock(pfe_l2br_t *bridge, pfe_l2br_static_entry_t* static_ent)
+{
+	errno_t ret;
+
+#if defined(PFE_CFG_NULL_ARG_CHECK)
+	if (unlikely((NULL == bridge) || (NULL == static_ent)))
+	{
+		NXP_LOG_ERROR("NULL argument received\n");
+		return EINVAL;
+	}
+#endif /* PFE_CFG_NULL_ARG_CHECK */
+
+	LLIST_Remove(&static_ent->list_entry);
+
+	ret = pfe_l2br_table_del_entry(bridge->mac_table, static_ent->entry);
+	if (EOK != ret)
+	{
+		NXP_LOG_ERROR("Static entry couldn't be deleted from HW table (errno %d)\n", ret);
+	}
+
+	oal_mm_free(static_ent);
+
+	return ret;
+}
+
 /**
  * @brief		Destroy L2 bridge static entry
  * @param[in]	bridge Bridge instance
@@ -1359,22 +1391,13 @@ errno_t pfe_l2br_static_entry_destroy(pfe_l2br_t *bridge, pfe_l2br_static_entry_
 		NXP_LOG_DEBUG("Mutex lock failed\n");
 	}
 
-	LLIST_Remove(&static_ent->list_entry);
+	ret = pfe_l2br_static_entry_destroy_nolock(bridge, static_ent);
 
 	if (EOK != oal_mutex_unlock(bridge->mutex))
 	{
 		NXP_LOG_DEBUG("Mutex unlock failed\n");
 	}
 
-	ret = pfe_l2br_table_del_entry(bridge->mac_table, static_ent->entry);
-
-	if (EOK != ret)
-	{
-		NXP_LOG_ERROR("Static entry couldn't be deleted from HW table (errno %d)\n", ret);
-	}
-
-	oal_mm_free(static_ent);
-
 	return ret;
 }
 
@@ -1415,15 +1438,94 @@ errno_t pfe_l2br_static_entry_replace_fw_list(pfe_l2br_t *bridge, pfe_l2br_stati
 
 /**
  * @brief Sets the local L3 flag (marks/unmarks the MAC address as local one)
- * @param[in]	bridge Bridge instance
- * @param[in]	static_ent Static entry to change forward list
- * @param[in]	local Value to be set
+ * @param[in]		bridge Bridge instance
+ * @param[in]		static_ent Static entry to change forward list
+ * @param[in]		local Value to be set
  * @retval EOK		Success
  * @retval EINVAL	Invalid or missing argument
  * @retval			ENOENT Entry couldn't be updated
  */
 errno_t pfe_l2br_static_entry_set_local_flag(pfe_l2br_t *bridge, pfe_l2br_static_entry_t* static_ent, bool_t local)
 {
+	uint8_t tmp;
+#if defined(PFE_CFG_NULL_ARG_CHECK)
+	if (unlikely((NULL == bridge) || (NULL == static_ent)))
+	{
+		NXP_LOG_ERROR("NULL argument received\n");
+		return EINVAL;
+	}
+#endif /* PFE_CFG_NULL_ARG_CHECK */
+	/* Make changes */
+	tmp = static_ent->action_data.item.local_l3;
+	static_ent->action_data.item.local_l3 = ((FALSE != local)? 1U : 0U);
+	/* Propagate changes to l2br table */
+	if (EOK != pfe_l2br_table_entry_set_action_data(static_ent->entry, static_ent->action_data_u64val))
+	{
+		static_ent->action_data.item.local_l3 = tmp;
+		NXP_LOG_ERROR("Couldn't set action data\n");
+		return EINVAL;
+	}
+	/* Write to the HW */
+	if (EOK != pfe_l2br_table_update_entry(bridge->mac_table, static_ent->entry))
+	{
+		static_ent->action_data.item.local_l3 = tmp;
+		NXP_LOG_ERROR("Couldn't update entry\n");
+		return ENOENT;
+	}
+	return EOK;
+}
+
+/**
+ * @brief Sets the src_discard flag (enables/disables discard of frames with given SRC MAC address)
+ * @param[in]		bridge Bridge instance
+ * @param[in]		static_ent Static entry to change forward list
+ * @param[in]		src_discard Value to be set
+ * @retval EOK		Success
+ * @retval EINVAL	Invalid or missing argument
+ * @retval			ENOENT Entry couldn't be updated
+ */
+errno_t pfe_l2br_static_entry_set_src_discard_flag(pfe_l2br_t *bridge, pfe_l2br_static_entry_t* static_ent, bool_t src_discard)
+{
+	uint8_t tmp;
+#if defined(PFE_CFG_NULL_ARG_CHECK)
+	if (unlikely((NULL == bridge) || (NULL == static_ent)))
+	{
+		NXP_LOG_ERROR("NULL argument received\n");
+		return EINVAL;
+	}
+#endif /* PFE_CFG_NULL_ARG_CHECK */
+	/* Make changes */
+	tmp = static_ent->action_data.item.src_discard;
+	static_ent->action_data.item.src_discard = ((FALSE != src_discard)? 1U : 0U);
+	/* Propagate changes to l2br table */
+	if (EOK != pfe_l2br_table_entry_set_action_data(static_ent->entry, static_ent->action_data_u64val))
+	{
+		static_ent->action_data.item.src_discard = tmp;
+		NXP_LOG_ERROR("Couldn't set action data\n");
+		return EINVAL;
+	}
+	/* Write to the HW */
+	if (EOK != pfe_l2br_table_update_entry(bridge->mac_table, static_ent->entry))
+	{
+		static_ent->action_data.item.src_discard = tmp;
+		NXP_LOG_ERROR("Couldn't update entry\n");
+		return ENOENT;
+	}
+	return EOK;
+}
+
+/**
+ * @brief Sets the dst_discard flag (enables/disables discard of frames with given SRC MAC address)
+ * @param[in]		bridge Bridge instance
+ * @param[in]		static_ent Static entry to change forward list
+ * @param[in]		dst_discard Value to be set
+ * @retval EOK		Success
+ * @retval EINVAL	Invalid or missing argument
+ * @retval			ENOENT Entry couldn't be updated
+ */
+errno_t pfe_l2br_static_entry_set_dst_discard_flag(pfe_l2br_t *bridge, pfe_l2br_static_entry_t* static_ent, bool_t dst_discard)
+{
+	uint8_t tmp;
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely((NULL == bridge) || (NULL == static_ent)))
 	{
@@ -1432,16 +1534,19 @@ errno_t pfe_l2br_static_entry_set_local_flag(pfe_l2br_t *bridge, pfe_l2br_static
 	}
 #endif /* PFE_CFG_NULL_ARG_CHECK */
 	/* Make changes */
-	static_ent->action_data.local_l3 = ((FALSE != local)? 1U : 0U);
+	tmp = static_ent->action_data.item.dst_discard;
+	static_ent->action_data.item.dst_discard = ((FALSE != dst_discard)? 1U : 0U);
 	/* Propagate changes to l2br table */
 	if (EOK != pfe_l2br_table_entry_set_action_data(static_ent->entry, static_ent->action_data_u64val))
 	{
+		static_ent->action_data.item.dst_discard = tmp;
 		NXP_LOG_ERROR("Couldn't set action data\n");
 		return EINVAL;
 	}
 	/* Write to the HW */
 	if (EOK != pfe_l2br_table_update_entry(bridge->mac_table, static_ent->entry))
 	{
+		static_ent->action_data.item.dst_discard = tmp;
 		NXP_LOG_ERROR("Couldn't update entry\n");
 		return ENOENT;
 	}
@@ -1458,14 +1563,56 @@ errno_t pfe_l2br_static_entry_set_local_flag(pfe_l2br_t *bridge, pfe_l2br_static
  */
 errno_t pfe_l2br_static_entry_get_local_flag(pfe_l2br_t *bridge, pfe_l2br_static_entry_t* static_ent, bool_t *local)
 {
-	#if defined(PFE_CFG_NULL_ARG_CHECK)
-	if (unlikely((NULL == bridge) || (NULL == static_ent)))
+#if defined(PFE_CFG_NULL_ARG_CHECK)
+	if (unlikely((NULL == bridge) || (NULL == static_ent) || (NULL == local)))
+	{
+		NXP_LOG_ERROR("NULL argument received\n");
+		return EINVAL;
+	}
+#endif /* PFE_CFG_NULL_ARG_CHECK */
+	*local = ((0U != static_ent->action_data.item.local_l3)? TRUE : FALSE);
+	return EOK;
+}
+
+/**
+ * @brief Reads the state of src_discard flag
+ * @param[in]	bridge Bridge instance
+ * @param[in]	static_ent Static entry to change forward list
+ * @param[out]	src_discard State of the src_discard flag
+ * @retval EOK		Success
+ * @retval EINVAL	Invalid or missing argument
+ */
+errno_t pfe_l2br_static_entry_get_src_discard_flag(pfe_l2br_t *bridge, pfe_l2br_static_entry_t* static_ent, bool_t *src_discard)
+{
+#if defined(PFE_CFG_NULL_ARG_CHECK)
+	if (unlikely((NULL == bridge) || (NULL == static_ent) || (NULL == src_discard)))
+	{
+		NXP_LOG_ERROR("NULL argument received\n");
+		return EINVAL;
+	}
+#endif /* PFE_CFG_NULL_ARG_CHECK */
+	*src_discard = ((0U != static_ent->action_data.item.src_discard)? TRUE : FALSE);
+	return EOK;
+}
+
+/**
+ * @brief Reads the state of dst_discard flag
+ * @param[in]	bridge Bridge instance
+ * @param[in]	static_ent Static entry to change forward list
+ * @param[out]	dst_discard State of the dst_discard flag
+ * @retval EOK		Success
+ * @retval EINVAL	Invalid or missing argument
+ */
+errno_t pfe_l2br_static_entry_get_dst_discard_flag(pfe_l2br_t *bridge, pfe_l2br_static_entry_t* static_ent, bool_t *dst_discard)
+{
+#if defined(PFE_CFG_NULL_ARG_CHECK)
+	if (unlikely((NULL == bridge) || (NULL == static_ent) || (NULL == dst_discard)))
 	{
 		NXP_LOG_ERROR("NULL argument received\n");
 		return EINVAL;
 	}
-	#endif /* PFE_CFG_NULL_ARG_CHECK */
-	*local = ((0U != static_ent->action_data.local_l3)? TRUE : FALSE);
+#endif /* PFE_CFG_NULL_ARG_CHECK */
+	*dst_discard = ((0U != static_ent->action_data.item.dst_discard)? TRUE : FALSE);
 	return EOK;
 }
 
@@ -1789,6 +1936,12 @@ static void pfe_l2br_do_timeouts(pfe_l2br_t *bridge)
 	entry = pfe_l2br_table_entry_create(bridge->mac_table);
 
 	l2t_iter = pfe_l2br_iterator_create();
+
+	if (EOK != oal_mutex_lock(bridge->mutex))
+	{
+		NXP_LOG_DEBUG("Mutex lock failed\n");
+	}
+
 	/*	Go through all entries */
 	ret = pfe_l2br_table_get_first(bridge->mac_table, l2t_iter, L2BR_TABLE_CRIT_VALID, entry);
 	while (EOK == ret)
@@ -1807,6 +1960,8 @@ static void pfe_l2br_do_timeouts(pfe_l2br_t *bridge)
 					pfe_l2br_table_entry_to_str(entry, text_buf, 256);
 					NXP_LOG_DEBUG("Aging:\n%s\n", text_buf);
 				}
+			/* If we delete an entry that has links in collision domain then the entry from collision domain will be moved to hash on the same address from witch we delete the entry */
+				pfe_l2br_iterator_halt(l2t_iter);
 			}
 			else
 			{
@@ -1829,10 +1984,240 @@ static void pfe_l2br_do_timeouts(pfe_l2br_t *bridge)
 		ret = pfe_l2br_table_get_next(bridge->mac_table, l2t_iter, entry);
 	}
 
+	if (EOK != oal_mutex_unlock(bridge->mutex))
+	{
+		NXP_LOG_DEBUG("Mutex unlock failed\n");
+	}
+
+	/*	Release entry storage */
+	(void)pfe_l2br_table_entry_destroy(entry);
+	/*  Release iterator */
+	pfe_l2br_iterator_destroy(l2t_iter);
+}
+
+/*
+ * @brief		Flush MAC table entries
+ * @param[in]	bridge The bridge instance
+ * @param[in]	type Type of the flush
+ * @return		EOK if success, error code otherwise
+ */
+static errno_t pfe_l2br_flush(pfe_l2br_t *bridge, pfe_l2br_flush_types type)
+{
+	errno_t ret = EOK, query_ret;
+	pfe_l2br_table_entry_t *entry;
+	pfe_l2br_static_entry_t *sentry;
+	pfe_l2br_table_iterator_t *l2t_iter;
+	LLIST_t *item, *aux;
+
+#if defined(PFE_CFG_NULL_ARG_CHECK)
+	if (unlikely(NULL == bridge))
+	{
+		NXP_LOG_ERROR("NULL argument received\n");
+		return EINVAL;
+	}
+#endif /* PFE_CFG_NULL_ARG_CHECK */
+
+	/*	Create entry storage */
+	entry = pfe_l2br_table_entry_create(bridge->mac_table);
+
+	/*	 Create iterator */
+	l2t_iter = pfe_l2br_iterator_create();
+
+	if (EOK != oal_mutex_lock(bridge->mutex))
+	{
+		NXP_LOG_DEBUG("Mutex lock failed\n");
+	}
+
+	switch (type)
+	{
+		case PFE_L2BR_FLUSH_STATIC:
+		{
+			/*	Remove all static entries from local DB */
+			if (FALSE == LLIST_IsEmpty(&bridge->static_entries))
+			{
+				/*	Get first matching entry */
+				LLIST_ForEachRemovable(item, aux, &bridge->static_entries)
+				{
+					/*	Get data */
+					sentry = LLIST_Data(item, pfe_l2br_static_entry_t, list_entry);
+
+					/*	Destroy entry. LLIST_Remove() is inside... */
+					ret = pfe_l2br_static_entry_destroy_nolock(bridge, sentry);
+					if (EOK != ret)
+					{
+						NXP_LOG_DEBUG("Unable to remove static entry: %d\n", ret);
+					}
+				}
+			}
+
+			break;
+		}
+
+		case PFE_L2BR_FLUSH_ALL:
+		{
+			/*	Remove all static entries from local DB. This must be done before
+				the pfe_l2br_table_flush() because otherwise would report "entry
+				not found" messages. */
+			if (FALSE == LLIST_IsEmpty(&bridge->static_entries))
+			{
+				/*	Get first matching entry */
+				LLIST_ForEachRemovable(item, aux, &bridge->static_entries)
+				{
+					/*	Get data */
+					sentry = LLIST_Data(item, pfe_l2br_static_entry_t, list_entry);
+
+					/*	Destroy entry. LLIST_Remove() is inside... */
+					ret = pfe_l2br_static_entry_destroy_nolock(bridge, sentry);
+					if (EOK != ret)
+					{
+						NXP_LOG_DEBUG("Unable to remove static entry: %d\n", ret);
+					}
+				}
+			}
+
+			/*	Flush MAC table */
+
+#if 0 /* AAVB-3136: THIS DOES NOT WORK. PFE GETS STUCK. */
+			ret = pfe_l2br_table_flush(bridge->mac_table);
+#else
+			ret = pfe_l2br_table_init(bridge->mac_table);
+#endif /* AAVB-3136 */
+			if (EOK != ret)
+			{
+				NXP_LOG_ERROR("MAC table flush failed: %d\n", ret);
+			}
+			else
+			{
+				NXP_LOG_INFO("MAC table flushed\n");
+			}
+
+			break;
+		}
+
+		case PFE_L2BR_FLUSH_LEARNED:
+		{
+			/*	Go through all entries */
+			query_ret = pfe_l2br_table_get_first(bridge->mac_table, l2t_iter, L2BR_TABLE_CRIT_VALID, entry);
+			while (EOK == query_ret)
+			{
+				if (FALSE == pfe_l2br_table_entry_is_static(entry))
+				{
+					/*	Remove non-static entry from table */
+					ret = pfe_l2br_table_del_entry(bridge->mac_table, entry);
+					if (EOK != ret)
+					{
+						NXP_LOG_ERROR("Could not delete MAC table entry: %d\n", ret);
+					}
+				}
+
+				query_ret = pfe_l2br_table_get_next(bridge->mac_table, l2t_iter, entry);
+			}
+
+			break;
+		}
+
+		default:
+		{
+			NXP_LOG_DEBUG("Invalid flush type");
+			ret = EINVAL;
+			break;
+		}
+	}
+
+	if (EOK != oal_mutex_unlock(bridge->mutex))
+	{
+		NXP_LOG_DEBUG("Mutex unlock failed\n");
+	}
+
 	/*	Release entry storage */
 	(void)pfe_l2br_table_entry_destroy(entry);
+
 	/*  Release iterator */
 	pfe_l2br_iterator_destroy(l2t_iter);
+
+	return ret;
+}
+
+/**
+ * @brief		Flush all learned MAC table entries
+ * @param[in]	bridge The bridge instance
+ * @return		EOK if success, error code otherwise
+ */
+errno_t pfe_l2br_flush_learned(pfe_l2br_t *bridge)
+{
+#if defined(PFE_CFG_NULL_ARG_CHECK)
+	if (unlikely(NULL == bridge))
+	{
+		NXP_LOG_ERROR("NULL argument received\n");
+		return EINVAL;
+	}
+#endif /* PFE_CFG_NULL_ARG_CHECK */
+
+	return pfe_l2br_flush(bridge, PFE_L2BR_FLUSH_LEARNED);
+}
+
+/**
+ * @brief		Flush all static MAC table entries
+ * @param[in]	bridge The bridge instance
+ * @return		EOK if success, error code otherwise
+ */
+errno_t pfe_l2br_flush_static(pfe_l2br_t *bridge)
+{
+#if defined(PFE_CFG_NULL_ARG_CHECK)
+	if (unlikely(NULL == bridge))
+	{
+		NXP_LOG_ERROR("NULL argument received\n");
+		return EINVAL;
+	}
+#endif /* PFE_CFG_NULL_ARG_CHECK */
+
+	return pfe_l2br_flush(bridge, PFE_L2BR_FLUSH_STATIC);
+}
+
+/**
+ * @brief		Flush all MAC table entries
+ * @param[in]	bridge The bridge instance
+ * @return		EOK if success, error code otherwise
+ */
+errno_t pfe_l2br_flush_all(pfe_l2br_t *bridge)
+{
+#if defined(PFE_CFG_NULL_ARG_CHECK)
+	if (unlikely(NULL == bridge))
+	{
+		NXP_LOG_ERROR("NULL argument received\n");
+		return EINVAL;
+	}
+#endif /* PFE_CFG_NULL_ARG_CHECK */
+
+	return pfe_l2br_flush(bridge, PFE_L2BR_FLUSH_ALL);
+}
+
+/**
+ * @brief		Checks whether the firmware feature with given name is enabled
+ * @param[in]	class Class instance to checks
+ * @param[in]	name Name of the feature to check
+ * @retval		TRUE Feature is enable
+ * @retval		FALSE Feature is not enable
+ */
+
+static bool_t pfe_platform_class_feature_enabled(const pfe_class_t *class, const char *name)
+{
+	pfe_fw_feature_t *fw_feature;
+	errno_t ret;
+	uint8_t variant = 0;
+	/* Does the feature exist? */
+	ret = pfe_class_get_feature(class, &fw_feature, name);
+
+	if(EOK == ret)
+	{       /* Feature exists */
+		/* Get variant */
+		pfe_fw_feature_get_variant(fw_feature, &variant);
+	}
+
+	if (variant == 1)
+		return TRUE;
+
+	return FALSE;
 }
 
 /**
@@ -1912,21 +2297,25 @@ pfe_l2br_t *pfe_l2br_create(pfe_class_t *class, uint16_t def_vlan, pfe_l2br_tabl
 			NXP_LOG_ERROR("MBox creation failed\n");
 			goto free_and_fail;
 		}
-
-		/*	Create worker thread */
-		bridge->worker = oal_thread_create(&pfe_l2br_worker_func, bridge, "l2br worker", 0);
-		if (NULL == bridge->worker)
+		/*	Do the aging on host only when FW aging is off */
+		if (pfe_platform_class_feature_enabled(bridge->class, "l2_bridge_aging")==FALSE)
 		{
-			NXP_LOG_ERROR("Couldn't start worker thread\n");
-			goto free_and_fail;
-		}
-		else
-		{
-			if (EOK != oal_mbox_attach_timer(bridge->mbox, PFE_L2BR_CFG_TICK_PERIOD_SEC * 1000, SIG_TIMER_TICK))
+
+			/*	Create worker thread */
+			bridge->worker = oal_thread_create(&pfe_l2br_worker_func, bridge, "l2br worker", 0);
+			if (NULL == bridge->worker)
 			{
-				NXP_LOG_ERROR("Unable to attach timer\n");
+				NXP_LOG_ERROR("Couldn't start worker thread\n");
 				goto free_and_fail;
 			}
+			else
+			{
+				if (EOK != oal_mbox_attach_timer(bridge->mbox, PFE_L2BR_CFG_TICK_PERIOD_SEC * 1000, SIG_TIMER_TICK))
+				{
+					NXP_LOG_ERROR("Unable to attach timer\n");
+					goto free_and_fail;
+				}
+			}
 		}
 	}
 
@@ -2270,7 +2659,7 @@ pfe_l2br_domain_t *pfe_l2br_get_next_domain(pfe_l2br_t *bridge)
  */
 uint32_t pfe_l2br_get_text_statistics(pfe_l2br_t *bridge, char_t *buf, uint32_t buf_len, uint8_t verb_level)
 {
-	uint32_t len = 0U;
+    uint32_t len = 0U;
     pfe_l2br_table_entry_t *entry;
     pfe_l2br_table_iterator_t* l2t_iter;
     errno_t ret;
diff --git a/sw/pfe_platform/src/pfe_l2br_table.c b/sw/pfe_platform/src/pfe_l2br_table.c
index 3ccab28..10daa62 100644
--- a/sw/pfe_platform/src/pfe_l2br_table.c
+++ b/sw/pfe_platform/src/pfe_l2br_table.c
@@ -24,18 +24,18 @@ ct_assert(sizeof(pfe_mac_addr_t) * 8 == 48);
  */
 typedef struct __pfe_mac_table_regs_tag
 {
-	void *cmd_reg;				/* REQ1_CMD_REG */
-	void *mac1_addr_reg;		/* REQ1_MAC1_ADDR_REG */
-	void *mac2_addr_reg;		/* REQ1_MAC2_ADDR_REG */
-	void *mac3_addr_reg;		/* REQ1_MAC3_ADDR_REG */
-	void *mac4_addr_reg;		/* REQ1_MAC4_ADDR_REG */
-	void *mac5_addr_reg;		/* REQ1_MAC5_ADDR_REG */
-	void *entry_reg;			/* REQ1_ENTRY_REG */
-	void *status_reg;			/* REQ1_STATUS_REG */
-	void *direct_reg;			/* REQ1_DIRECT_REG */
-	void *free_entries_reg;		/* FREE LIST ENTRIES */
-	void *free_head_ptr_reg;	/* FREE LIST HEAD PTR */
-	void *free_tail_ptr_reg;	/* FREE LIST TAIL PTR */
+	addr_t cmd_reg;				/* REQ1_CMD_REG */
+	addr_t mac1_addr_reg;		/* REQ1_MAC1_ADDR_REG */
+	addr_t mac2_addr_reg;		/* REQ1_MAC2_ADDR_REG */
+	addr_t mac3_addr_reg;		/* REQ1_MAC3_ADDR_REG */
+	addr_t mac4_addr_reg;		/* REQ1_MAC4_ADDR_REG */
+	addr_t mac5_addr_reg;		/* REQ1_MAC5_ADDR_REG */
+	addr_t entry_reg;			/* REQ1_ENTRY_REG */
+	addr_t status_reg;			/* REQ1_STATUS_REG */
+	addr_t direct_reg;			/* REQ1_DIRECT_REG */
+	addr_t free_entries_reg;	/* FREE LIST ENTRIES */
+	addr_t free_head_ptr_reg;	/* FREE LIST HEAD PTR */
+	addr_t free_tail_ptr_reg;	/* FREE LIST TAIL PTR */
 } pfe_mac_table_regs_t;
 
 /**
@@ -43,7 +43,7 @@ typedef struct __pfe_mac_table_regs_tag
  */
 struct __pfe_l2br_table_tag
 {
-	void *cbus_base_va;							/*!< CBUS base virtual address					*/
+	addr_t cbus_base_va;						/*!< CBUS base virtual address					*/
 	pfe_l2br_table_type_t type;					/*!< Table type									*/
 	oal_mutex_t reg_lock;						/*!< Lock to protect registers					*/
 	pfe_mac_table_regs_t regs;					/*!< Registers (VA)								*/
@@ -56,6 +56,7 @@ struct __pfe_l2br_table_iterator_tag
 	pfe_l2br_table_get_criterion_t cur_crit;	/*!< Current criterion							*/
 	uint32_t cur_hash_addr;						/*!< Current address within hash space			*/
 	uint32_t cur_coll_addr;						/*!< Current address within collision space		*/
+	uint32_t next_coll_addr;					/*!< Next entry address within collision space		*/
 };
 
 /**
@@ -762,6 +763,7 @@ pfe_l2br_table_iterator_t *pfe_l2br_iterator_create(void)
 
 	loop_inst->cur_hash_addr = 0;
 	loop_inst->cur_coll_addr = 0;
+	loop_inst->next_coll_addr = 0;
 	loop_inst->cur_crit = 0;
 
 	return loop_inst;
@@ -778,6 +780,27 @@ errno_t pfe_l2br_iterator_destroy(pfe_l2br_table_iterator_t *inst)
 	return EOK;
 }
 
+/**
+ * @brief	Halt table iterator to the current position 
+ *		in hash and collison table.
+ *		This is needed if we delete an entry that has
+ *		links in collision domain. The next entry will be
+ *		automatically moved by hw to the removed position.
+ * @param[in]	inst Iterator instance
+ * @retval	EOK on success
+ */
+
+errno_t pfe_l2br_iterator_halt(pfe_l2br_table_iterator_t *inst)
+{
+
+	if ((inst->cur_hash_addr > 0) && (inst->next_coll_addr != 0))
+		inst->cur_hash_addr--;
+
+        inst->next_coll_addr = inst->cur_coll_addr;
+
+        return EOK;
+}
+
 /**
  * @brief			Get first entry from table
  * @param[in]		l2br The L2 Bridge Table instance
@@ -817,7 +840,8 @@ errno_t pfe_l2br_table_get_first(pfe_l2br_table_t *l2br, pfe_l2br_table_iterator
 			if (TRUE == pfe_l2br_table_entry_match_criterion(l2br, l2t_iter, entry))
 			{
 				/*	Remember entry to be processed next */
-				l2t_iter->cur_coll_addr = pfe_l2br_table_get_col_ptr(entry);
+				l2t_iter->next_coll_addr = pfe_l2br_table_get_col_ptr(entry);
+				l2t_iter->cur_hash_addr++;
 				return EOK;
 			}
 		}
@@ -849,16 +873,18 @@ errno_t pfe_l2br_table_get_next(pfe_l2br_table_t *l2br, pfe_l2br_table_iterator_
 #endif /* PFE_CFG_NULL_ARG_CHECK */
 
 	/*	Get entries from last address */
-	while (l2t_iter->cur_hash_addr < l2br->hash_space_depth)
+	while ((l2t_iter->cur_hash_addr < l2br->hash_space_depth) || (0U != l2t_iter->next_coll_addr) )
 	{
-		if (0U == l2t_iter->cur_coll_addr)
+		if (0U == l2t_iter->next_coll_addr)
 		{
-			l2t_iter->cur_hash_addr++;
 			ret = pfe_l2br_table_read_cmd(l2br, l2t_iter->cur_hash_addr, entry);
+			l2t_iter->cur_coll_addr = 0;
+			l2t_iter->cur_hash_addr++;
 		}
 		else
 		{
-			ret = pfe_l2br_table_read_cmd(l2br, l2t_iter->cur_coll_addr, entry);
+			ret = pfe_l2br_table_read_cmd(l2br, l2t_iter->next_coll_addr, entry);
+			l2t_iter->cur_coll_addr = l2t_iter->next_coll_addr;
 		}
 
 		if (EOK != ret)
@@ -870,7 +896,7 @@ errno_t pfe_l2br_table_get_next(pfe_l2br_table_t *l2br, pfe_l2br_table_iterator_
 		{
 			if (TRUE == pfe_l2br_table_entry_match_criterion(l2br, l2t_iter, entry))
 			{
-				l2t_iter->cur_coll_addr = pfe_l2br_table_get_col_ptr(entry);
+				l2t_iter->next_coll_addr = pfe_l2br_table_get_col_ptr(entry);
 				return EOK;
 			}
 		}
@@ -1140,19 +1166,59 @@ static errno_t pfe_l2br_table_init_cmd(pfe_l2br_table_t *l2br)
 	return EOK;
 }
 
+/**
+ * @brief		Issue the FLUSH command
+ * @details		It is possible to exted with option to flush only entries of certain VLAN
+ * @param[in]	l2br The L2 bridge table instance
+ * @retval		EOK Success
+ * @retval		EINVAL Invalid/missing argument
+ * @retval		ENOEXEC Command failed
+ * @retval		ETIMEDOUT Command timed-out
+ */
+static errno_t pfe_l2br_table_flush_cmd(pfe_l2br_table_t *l2br)
+{
+	uint32_t cmd;
+
+	/*	Prepare command arguments */
+	if (PFE_L2BR_TABLE_MAC2F == l2br->type)
+	{
+		cmd = L2BR_CMD_FLUSH | (1U << 14);
+	}
+	else if (PFE_L2BR_TABLE_VLAN == l2br->type)
+	{
+		cmd = L2BR_CMD_FLUSH | (1U << 14);
+	}
+	else
+	{
+		NXP_LOG_ERROR("Invalid table type\n");
+		return EINVAL;
+	}
+
+	hal_write32(0U, l2br->regs.mac1_addr_reg);
+	hal_write32(0U, l2br->regs.mac2_addr_reg);
+	hal_write32(0U, l2br->regs.mac3_addr_reg);
+	hal_write32(0U, l2br->regs.mac4_addr_reg);
+	hal_write32(0U, l2br->regs.mac5_addr_reg);
+
+	/*	Issue the FLUSH command */
+	hal_write32(cmd, l2br->regs.cmd_reg);
+
+	return pfe_l2br_wait_for_cmd_done(l2br, NULL);
+}
+
 /**
  * @brief		Create L2 bridge table instance
  * @param[in]	cbus_base_va CBUS base virtual address
  * @param[in]	type Type of the table. See pfe_l2br_table_type_t.
  * @return		The L2 Bridge table instance or NULL if failed
  */
-pfe_l2br_table_t *pfe_l2br_table_create(void *cbus_base_va, pfe_l2br_table_type_t type)
+pfe_l2br_table_t *pfe_l2br_table_create(addr_t cbus_base_va, pfe_l2br_table_type_t type)
 {
 	pfe_l2br_table_t *l2br;
 	errno_t ret;
 
 #if defined(PFE_CFG_NULL_ARG_CHECK)
-	if (unlikely(NULL == cbus_base_va))
+	if (unlikely(NULL_ADDR == cbus_base_va))
 	{
 		NXP_LOG_ERROR("NULL argument received\n");
 		return NULL;
@@ -1240,6 +1306,44 @@ pfe_l2br_table_t *pfe_l2br_table_create(void *cbus_base_va, pfe_l2br_table_type_
 	return l2br;
 }
 
+/**
+ * @brief		Initialize table
+ * @details		Remove all table entries and prepare the table for usage
+ * @param[in]	l2br The L2 bridge table instance
+ * @retval		EOK if success, error code otherwise
+ */
+errno_t pfe_l2br_table_init(pfe_l2br_table_t *l2br)
+{
+#if defined(PFE_CFG_NULL_ARG_CHECK)
+	if (unlikely(NULL == l2br))
+	{
+		NXP_LOG_ERROR("NULL argument received\n");
+		return EINVAL;
+	}
+#endif /* PFE_CFG_NULL_ARG_CHECK */
+
+	return pfe_l2br_table_init_cmd(l2br);
+}
+
+/**
+ * @brief		Flush table
+ * @details		Remove all table entries
+ * @param[in]	l2br The L2 bridge table instance
+ * @retval		EOK if success, error code otherwise
+ */
+errno_t pfe_l2br_table_flush(pfe_l2br_table_t *l2br)
+{
+#if defined(PFE_CFG_NULL_ARG_CHECK)
+	if (unlikely(NULL == l2br))
+	{
+		NXP_LOG_ERROR("NULL argument received\n");
+		return EINVAL;
+	}
+#endif /* PFE_CFG_NULL_ARG_CHECK */
+
+	return pfe_l2br_table_flush_cmd(l2br);
+}
+
 /**
  * @brief		Destroy L2 bridge table instance
  * @param[in]	l2br The L2 bridge table instance
@@ -1465,7 +1569,7 @@ errno_t pfe_l2br_table_entry_set_fresh(pfe_l2br_table_t *l2br, pfe_l2br_table_en
 
 	/*	Update the action entry */
 	action_data = entry->mac2f_entry.action_data;
-	mac_entry->fresh_flag = (TRUE == is_fresh) ? 1U : 0U;
+	mac_entry->item.fresh_flag = (TRUE == is_fresh) ? 1U : 0U;
 	entry->mac2f_entry.action_data = action_data;
 
 	return EOK;
@@ -1497,7 +1601,7 @@ __attribute__((pure)) bool_t pfe_l2br_table_entry_is_fresh(pfe_l2br_table_entry_
 
 	if (PFE_L2BR_TABLE_MAC2F == entry->type)
 	{
-		return (0U != mac_entry->fresh_flag);
+		return (0U != mac_entry->item.fresh_flag);
 	}
 	else
 	{
@@ -1539,7 +1643,7 @@ errno_t pfe_l2br_table_entry_set_static(pfe_l2br_table_t *l2br, pfe_l2br_table_e
 
 	/*	Update the action entry */
 	action_data = entry->mac2f_entry.action_data;
-	mac_entry->static_flag = (TRUE == is_static) ? 1U : 0U;
+	mac_entry->item.static_flag = (TRUE == is_static) ? 1U : 0U;
 	entry->mac2f_entry.action_data = action_data;
 
 	return EOK;
@@ -1566,7 +1670,7 @@ __attribute__((pure)) bool_t pfe_l2br_table_entry_is_static(pfe_l2br_table_entry
 
 	if (PFE_L2BR_TABLE_MAC2F == entry->type)
 	{
-		return (0U != mac_entry->static_flag);
+		return (0U != mac_entry->item.static_flag);
 	}
 	else
 	{
@@ -1595,39 +1699,39 @@ uint32_t pfe_l2br_table_entry_to_str(pfe_l2br_table_entry_t *entry, char_t *buf,
 
 	if (PFE_L2BR_TABLE_MAC2F == entry->type)
 	{
-		len += snprintf(buf + len, buf_len - len, "[MAC+VLAN Table Entry]\n");
-		len += snprintf(buf + len, buf_len - len, "MAC Address: %02x:%02x:%02x:%02x:%02x:%02x\n",
+		len += (uint32_t)snprintf(buf + len, buf_len - len, "[MAC+VLAN Table Entry]\n");
+		len += (uint32_t)snprintf(buf + len, buf_len - len, "MAC Address: %02x:%02x:%02x:%02x:%02x:%02x\n",
 				entry->mac2f_entry.mac[0],
 				entry->mac2f_entry.mac[1],
 				entry->mac2f_entry.mac[2],
 				entry->mac2f_entry.mac[3],
 				entry->mac2f_entry.mac[4],
 				entry->mac2f_entry.mac[5]);
-		len += snprintf(buf + len, buf_len - len, "VLAN       : 0x%x\n", entry->mac2f_entry.vlan);
-		len += snprintf(buf + len, buf_len - len, "Action Data: 0x%x\n", entry->mac2f_entry.action_data);
+		len += (uint32_t)snprintf(buf + len, buf_len - len, "VLAN       : 0x%x\n", entry->mac2f_entry.vlan);
+		len += (uint32_t)snprintf(buf + len, buf_len - len, "Action Data: 0x%x\n", entry->mac2f_entry.action_data);
 #if 0
 		/* Currently not used - action data stores the port information, FW does not have access to port field */
-		len += snprintf(buf + len, buf_len - len, "Port       : 0x%x\n", entry->mac2f_entry.port);
+		len += (uint32_t)snprintf(buf + len, buf_len - len, "Port       : 0x%x\n", entry->mac2f_entry.port);
 #endif
-		len += snprintf(buf + len, buf_len - len, "Col Ptr    : 0x%x\n", entry->mac2f_entry.col_ptr);
-		len += snprintf(buf + len, buf_len - len, "Flags      : 0x%x\n", entry->mac2f_entry.flags);
+		len += (uint32_t)snprintf(buf + len, buf_len - len, "Col Ptr    : 0x%x\n", entry->mac2f_entry.col_ptr);
+		len += (uint32_t)snprintf(buf + len, buf_len - len, "Flags      : 0x%x\n", entry->mac2f_entry.flags);
 	}
 	else if (PFE_L2BR_TABLE_VLAN == entry->type)
 	{
-		len += snprintf(buf + len, buf_len - len, "[VLAN Table Entry]\n");
-		len += snprintf(buf + len, buf_len - len, "VLAN       : 0x%x\n", entry->vlan_entry.vlan);
+		len += (uint32_t)snprintf(buf + len, buf_len - len, "[VLAN Table Entry]\n");
+		len += (uint32_t)snprintf(buf + len, buf_len - len, "VLAN       : 0x%x\n", entry->vlan_entry.vlan);
 		/*	Native type used to fix compiler warning */
-		len += snprintf(buf + len, buf_len - len, "Action Data: 0x%llx\n", (unsigned long long)entry->vlan_entry.action_data);
+		len += (uint32_t)snprintf(buf + len, buf_len - len, "Action Data: 0x%llx\n", (unsigned long long)entry->vlan_entry.action_data);
 #if 0
 		/* Currently not used - action data stores the port information, FW does not have access to port field */
-		len += snprintf(buf + len, buf_len - len, "Port       : 0x%x\n", entry->vlan_entry.port);
+		len += (uint32_t)snprintf(buf + len, buf_len - len, "Port       : 0x%x\n", entry->vlan_entry.port);
 #endif
-		len += snprintf(buf + len, buf_len - len, "Col Ptr    : 0x%x\n", entry->vlan_entry.col_ptr);
-		len += snprintf(buf + len, buf_len - len, "Flags      : 0x%x\n", entry->vlan_entry.flags);
+		len += (uint32_t)snprintf(buf + len, buf_len - len, "Col Ptr    : 0x%x\n", entry->vlan_entry.col_ptr);
+		len += (uint32_t)snprintf(buf + len, buf_len - len, "Flags      : 0x%x\n", entry->vlan_entry.flags);
 	}
 	else
 	{
-		len += snprintf(buf + len, buf_len - len, "Invalid entry type\n");
+		len += (uint32_t)snprintf(buf + len, buf_len - len, "Invalid entry type\n");
 	}
 	return len;
 }
diff --git a/sw/pfe_platform/src/pfe_log_if.c b/sw/pfe_platform/src/pfe_log_if.c
index a300d8b..203ed57 100644
--- a/sw/pfe_platform/src/pfe_log_if.c
+++ b/sw/pfe_platform/src/pfe_log_if.c
@@ -8,9 +8,9 @@
  * ========================================================================= */
 
 #include "pfe_cfg.h"
-#ifndef PFE_CFG_PFE_SLAVE
-
 #include "oal.h"
+
+#ifndef PFE_CFG_PFE_SLAVE
 #include "hal.h"
 #include "linked_list.h"
 
@@ -29,27 +29,19 @@ struct pfe_log_if_tag
 	addr_t dmem_base;				/*!< Place in CLASS/DMEM where HW logical interface structure is stored */
 	char_t *name;					/*!< Interface name */
 	pfe_ct_log_if_t log_if_class;	/*!< Cached copy of the DMEM structure */
-	LLIST_t mac_addr_list;			/*!< List of all MAC addresses associated with logical interface */
+	pfe_mac_db_t *mac_db;			/* MAC database */
 	oal_mutex_t lock;
 };
 
-typedef struct __pfe_log_if_mac_addr_list_entry_tag
-{
-	pfe_mac_addr_t addr;		/*	The MAC address */
-	LLIST_t iterator;			/*	List chain entry */
-	pfe_ct_phy_if_id_t owner;	/*	Identification of the driver that owns this entry */
-} pfe_log_if_mac_addr_list_entry_t;
 
 /**
  * @brief	Pool of logical interface IDs. Module-local singleton.
  */
 static blalloc_t *pfe_log_if_id_pool = NULL;
 
-static errno_t pfe_log_if_read_from_class(pfe_log_if_t *iface, pfe_ct_log_if_t *class_if, uint32_t pe_idx);
-static errno_t pfe_log_if_write_to_class_nostats(pfe_log_if_t *iface, pfe_ct_log_if_t *class_if);
-static errno_t pfe_log_if_write_to_class(pfe_log_if_t *iface, pfe_ct_log_if_t *class_if);
-static errno_t pfe_log_if_clear_mac_addr_nolock(pfe_log_if_t *iface);
-static pfe_log_if_mac_addr_list_entry_t *pfe_log_if_mac_addr_db_find_by_addr(pfe_log_if_t *iface, pfe_mac_addr_t addr);
+static errno_t pfe_log_if_read_from_class(const pfe_log_if_t *iface, pfe_ct_log_if_t *class_if, uint32_t pe_idx);
+static errno_t pfe_log_if_write_to_class_nostats(const pfe_log_if_t *iface, pfe_ct_log_if_t *class_if);
+static errno_t pfe_log_if_write_to_class(const pfe_log_if_t *iface, pfe_ct_log_if_t *class_if);
 
 /**
  * @brief		Read interface structure from classifier memory
@@ -59,7 +51,7 @@ static pfe_log_if_mac_addr_list_entry_t *pfe_log_if_mac_addr_db_find_by_addr(pfe
  * @retval		EOK Success
  * @retval		EINVAL Invalid or missing argument
  */
-static errno_t pfe_log_if_read_from_class(pfe_log_if_t *iface, pfe_ct_log_if_t *class_if, uint32_t pe_idx)
+static errno_t pfe_log_if_read_from_class(const pfe_log_if_t *iface, pfe_ct_log_if_t *class_if, uint32_t pe_idx)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely((NULL == class_if) || (NULL == iface) || (0U == iface->dmem_base)))
@@ -73,7 +65,7 @@ static errno_t pfe_log_if_read_from_class(pfe_log_if_t *iface, pfe_ct_log_if_t *
 		Read current interface configuration from classifier. Returned data will be in
 		__NETWORK__ endian format.
 	*/
-	return pfe_class_read_dmem(iface->class, pe_idx, class_if, (void *)iface->dmem_base, sizeof(pfe_ct_log_if_t));
+	return pfe_class_read_dmem(iface->class, pe_idx, class_if, iface->dmem_base, sizeof(pfe_ct_log_if_t));
 }
 
 /**
@@ -83,7 +75,7 @@ static errno_t pfe_log_if_read_from_class(pfe_log_if_t *iface, pfe_ct_log_if_t *
  * @retval		EOK Success
  * @retval		EINVAL Invalid or missing argument
  */
-static errno_t pfe_log_if_write_to_class_nostats(pfe_log_if_t *iface, pfe_ct_log_if_t *class_if)
+static errno_t pfe_log_if_write_to_class_nostats(const pfe_log_if_t *iface, pfe_ct_log_if_t *class_if)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely((NULL == class_if) || (NULL == iface) || (0U == iface->dmem_base)))
@@ -96,7 +88,7 @@ static errno_t pfe_log_if_write_to_class_nostats(pfe_log_if_t *iface, pfe_ct_log
 	/* Be sure that class_stats are at correct place */
 	ct_assert((sizeof(pfe_ct_log_if_t) - sizeof(pfe_ct_class_algo_stats_t)) == offsetof(pfe_ct_log_if_t, class_stats));
 
-	return pfe_class_write_dmem(iface->class, -1, (void *)iface->dmem_base, class_if,
+	return pfe_class_write_dmem(iface->class, -1, iface->dmem_base, (void *)class_if,
 							    sizeof(pfe_ct_log_if_t) - sizeof(pfe_ct_class_algo_stats_t));
 }
 
@@ -107,7 +99,7 @@ static errno_t pfe_log_if_write_to_class_nostats(pfe_log_if_t *iface, pfe_ct_log
  * @retval		EOK Success
  * @retval		EINVAL Invalid or missing argument
  */
-static errno_t pfe_log_if_write_to_class(pfe_log_if_t *iface, pfe_ct_log_if_t *class_if)
+static errno_t pfe_log_if_write_to_class(const pfe_log_if_t *iface, pfe_ct_log_if_t *class_if)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely((NULL == class_if) || (NULL == iface) || (0U == iface->dmem_base)))
@@ -117,7 +109,7 @@ static errno_t pfe_log_if_write_to_class(pfe_log_if_t *iface, pfe_ct_log_if_t *c
 	}
 #endif /* PFE_CFG_NULL_ARG_CHECK */
 
-	return pfe_class_write_dmem(iface->class, -1, (void *)iface->dmem_base, class_if, sizeof(pfe_ct_log_if_t));
+	return pfe_class_write_dmem(iface->class, -1, iface->dmem_base, (void *)class_if, sizeof(pfe_ct_log_if_t));
 }
 
 /**
@@ -126,7 +118,7 @@ static errno_t pfe_log_if_write_to_class(pfe_log_if_t *iface, pfe_ct_log_if_t *c
  * @param[in]	name Name of the interface
  * @return		The interface instance or NULL if failed
  */
-pfe_log_if_t *pfe_log_if_create(pfe_phy_if_t *parent, char_t *name)
+pfe_log_if_t *pfe_log_if_create(pfe_phy_if_t *parent, const char_t *name)
 {
 	pfe_log_if_t *iface;
 	addr_t id;
@@ -169,13 +161,20 @@ pfe_log_if_t *pfe_log_if_create(pfe_phy_if_t *parent, char_t *name)
 	else
 	{
 		(void)memset(iface, 0, sizeof(pfe_log_if_t));
-		LLIST_Init(&iface->mac_addr_list);
 		iface->parent = parent;
 		iface->class = pfe_phy_if_get_class(parent);
+		iface->mac_db = pfe_mac_db_create();
+		if (NULL == iface->mac_db)
+		{
+			NXP_LOG_ERROR("Could not create MAC db\n");
+			oal_mm_free(iface);
+			return NULL;
+		}
 
 		if (EOK != oal_mutex_init(&iface->lock))
 		{
 			NXP_LOG_ERROR("Could not initialize mutex\n");
+			(void)pfe_mac_db_destroy(iface->mac_db);
 			oal_mm_free(iface);
 			return NULL;
 		}
@@ -184,6 +183,7 @@ pfe_log_if_t *pfe_log_if_create(pfe_phy_if_t *parent, char_t *name)
 		if (NULL == iface->name)
 		{
 			NXP_LOG_ERROR("Malloc failed\n");
+			(void)pfe_mac_db_destroy(iface->mac_db);
 			(void)oal_mutex_destroy(&iface->lock);
 			oal_mm_free(iface);
 			return NULL;
@@ -198,6 +198,7 @@ pfe_log_if_t *pfe_log_if_create(pfe_phy_if_t *parent, char_t *name)
 		if(0U == iface->dmem_base)
 		{
 			NXP_LOG_ERROR("No DMEM\n");
+			(void)pfe_mac_db_destroy(iface->mac_db);
 			oal_mm_free(iface->name);
 			(void)oal_mutex_destroy(&iface->lock);
 			oal_mm_free(iface);
@@ -226,6 +227,7 @@ pfe_log_if_t *pfe_log_if_create(pfe_phy_if_t *parent, char_t *name)
 				NXP_LOG_DEBUG("Could not delete %s from %s\n", iface->name, pfe_phy_if_get_name(parent));
 			}
 			pfe_class_dmem_heap_free(iface->class, iface->dmem_base);
+			(void)pfe_mac_db_destroy(iface->mac_db);
 			oal_mm_free(iface->name);
 			(void)oal_mutex_destroy(&iface->lock);
 			oal_mm_free(iface);
@@ -237,6 +239,7 @@ pfe_log_if_t *pfe_log_if_create(pfe_phy_if_t *parent, char_t *name)
 		{
 			NXP_LOG_ERROR("Can't bind %s to %s\n", iface->name, pfe_phy_if_get_name(parent));
 			pfe_class_dmem_heap_free(iface->class, iface->dmem_base);
+			(void)pfe_mac_db_destroy(iface->mac_db);
 			oal_mm_free(iface->name);
 			(void)oal_mutex_destroy(&iface->lock);
 			oal_mm_free(iface);
@@ -252,7 +255,7 @@ pfe_log_if_t *pfe_log_if_create(pfe_phy_if_t *parent, char_t *name)
  * @param[in]	iface The interface instance
  * @return		The interface ID
  */
-__attribute__((pure)) uint8_t pfe_log_if_get_id(pfe_log_if_t *iface)
+__attribute__((pure)) uint8_t pfe_log_if_get_id(const pfe_log_if_t *iface)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == iface))
@@ -270,7 +273,7 @@ __attribute__((pure)) uint8_t pfe_log_if_get_id(pfe_log_if_t *iface)
  * @param[in]	iface The interface instance
  * @return		Physical interface instance or NULL if failed
  */
-__attribute__((pure)) pfe_phy_if_t *pfe_log_if_get_parent(pfe_log_if_t *iface)
+__attribute__((pure)) pfe_phy_if_t *pfe_log_if_get_parent(const pfe_log_if_t *iface)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == iface))
@@ -369,7 +372,7 @@ errno_t pfe_log_if_get_next_dmem_ptr(pfe_log_if_t *iface, addr_t *next_dmem_ptr)
  * @retval		EOK Success
  * @retval		EINVAL Invalid or missing argument
  */
-errno_t pfe_log_if_get_dmem_base(pfe_log_if_t *iface, addr_t *dmem_base)
+errno_t pfe_log_if_get_dmem_base(const pfe_log_if_t *iface, addr_t *dmem_base)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely((NULL == iface) || (NULL == dmem_base)))
@@ -393,18 +396,16 @@ void pfe_log_if_destroy(pfe_log_if_t *iface)
 
 	if (NULL != iface)
 	{
-		if (EOK != pfe_log_if_clear_mac_addr(iface))
+		ret = pfe_mac_db_destroy(iface->mac_db);
+		if (EOK != ret)
 		{
-			NXP_LOG_ERROR("Could not remove MAC address (%s)\n", iface->name);
+			NXP_LOG_WARNING("unable to destroy MAC database: %d\n", ret);
 		}
 
-		if (NULL != iface->parent)
+		ret = pfe_phy_if_del_log_if(iface->parent, iface);
+		if (EOK != ret)
 		{
-			ret = pfe_phy_if_del_log_if(iface->parent, iface);
-			if (EOK != ret)
-			{
-				NXP_LOG_ERROR("Could not remove %s from parent instance: %d\n", iface->name, ret);
-			}
+			NXP_LOG_ERROR("Could not remove %s from parent instance: %d\n", iface->name, ret);
 		}
 
 		if (NULL != iface->name)
@@ -422,14 +423,14 @@ void pfe_log_if_destroy(pfe_log_if_t *iface)
 			NXP_LOG_ERROR("Iface invalidation failed\n");
 		}
 
-		if (EOK != oal_mutex_destroy(&iface->lock))
+		if (NULL_ADDR != iface->dmem_base)
 		{
-			NXP_LOG_DEBUG("Could not destroy mutex\n");
+			pfe_class_dmem_heap_free(iface->class, iface->dmem_base);
 		}
 
-		if (0U != iface->dmem_base)
+		if (EOK != oal_mutex_destroy(&iface->lock))
 		{
-			pfe_class_dmem_heap_free(iface->class, iface->dmem_base);
+			NXP_LOG_DEBUG("Could not destroy mutex\n");
 		}
 
 		oal_mm_free(iface);
@@ -461,7 +462,8 @@ bool_t pfe_log_if_is_match_or(pfe_log_if_t *iface)
 		NXP_LOG_DEBUG("mutex lock failed\n");
 	}
 
-	ret = ((uint8_t)IF_FL_MATCH_OR == ((uint8_t)(iface->log_if_class.flags) & (uint8_t)IF_FL_MATCH_OR));
+	ret = ((uint32_t)IF_FL_MATCH_OR ==
+			((uint32_t)(oal_ntohl(iface->log_if_class.flags)) & (uint32_t)IF_FL_MATCH_OR));
 
 	if (EOK != oal_mutex_unlock(&iface->lock))
 	{
@@ -497,7 +499,7 @@ errno_t pfe_log_if_set_match_or(pfe_log_if_t *iface)
 	}
 
 	tmp = iface->log_if_class.flags;
-	iface->log_if_class.flags |= IF_FL_MATCH_OR;
+	iface->log_if_class.flags |= oal_htonl(IF_FL_MATCH_OR);
 
 	ret = pfe_log_if_write_to_class_nostats(iface, &iface->log_if_class);
 	if (EOK != ret)
@@ -540,7 +542,7 @@ errno_t pfe_log_if_set_match_and(pfe_log_if_t *iface)
 	}
 
 	tmp = iface->log_if_class.flags;
-	iface->log_if_class.flags &= (pfe_ct_if_flags_t)(~IF_FL_MATCH_OR);
+	iface->log_if_class.flags &= (pfe_ct_if_flags_t)(oal_htonl(~IF_FL_MATCH_OR));
 
 	ret = pfe_log_if_write_to_class_nostats(iface, &iface->log_if_class);
 	if (EOK != ret)
@@ -567,7 +569,7 @@ errno_t pfe_log_if_set_match_and(pfe_log_if_t *iface)
  * @retval		EOK Success
  * @retval		EINVAL Invalid or missing argument
  */
-errno_t pfe_log_if_set_match_rules(pfe_log_if_t *iface, pfe_ct_if_m_rules_t rules, pfe_ct_if_m_args_t *args)
+errno_t pfe_log_if_set_match_rules(pfe_log_if_t *iface, pfe_ct_if_m_rules_t rules, const pfe_ct_if_m_args_t *args)
 {
 	errno_t ret = EOK;
 	pfe_ct_if_m_rules_t tmp;
@@ -624,7 +626,7 @@ errno_t pfe_log_if_set_match_rules(pfe_log_if_t *iface, pfe_ct_if_m_rules_t rule
  * @retval		EOK Success
  * @retval		EINVAL Invalid or missing argument
  */
-errno_t pfe_log_if_add_match_rule(pfe_log_if_t *iface, pfe_ct_if_m_rules_t rule, void *arg, uint32_t arg_len)
+errno_t pfe_log_if_add_match_rule(pfe_log_if_t *iface, pfe_ct_if_m_rules_t rule, const void *arg, uint32_t arg_len)
 {
 	errno_t ret = EINVAL;
 	pfe_ct_if_m_rules_t tmp;
@@ -703,9 +705,9 @@ errno_t pfe_log_if_add_match_rule(pfe_log_if_t *iface, pfe_ct_if_m_rules_t rule,
 
 		case IF_MATCH_SIP6:
 		{
-			if (arg_len == sizeof(m_args.v6.sip))
+			if (arg_len == sizeof(m_args.ipv.v6.sip))
 			{
-				(void)memcpy((void*)(iface->log_if_class.m_args.v6.sip), (const void*)arg, sizeof(m_args.v6.sip));
+				(void)memcpy((void*)(iface->log_if_class.m_args.ipv.v6.sip), (const void*)arg, sizeof(m_args.ipv.v6.sip));
 				ret = EOK;
 			}
 
@@ -714,9 +716,9 @@ errno_t pfe_log_if_add_match_rule(pfe_log_if_t *iface, pfe_ct_if_m_rules_t rule,
 
 		case IF_MATCH_DIP6:
 		{
-			if (arg_len == sizeof(m_args.v6.dip))
+			if (arg_len == sizeof(m_args.ipv.v6.dip))
 			{
-				(void)memcpy((void*)(iface->log_if_class.m_args.v6.dip), (const void*)arg, sizeof(m_args.v6.dip));
+				(void)memcpy((void*)(iface->log_if_class.m_args.ipv.v6.dip), (const void*)arg, sizeof(m_args.ipv.v6.dip));
 				ret = EOK;
 			}
 
@@ -725,9 +727,9 @@ errno_t pfe_log_if_add_match_rule(pfe_log_if_t *iface, pfe_ct_if_m_rules_t rule,
 
 		case IF_MATCH_SIP:
 		{
-			if (arg_len == sizeof(m_args.v4.sip))
+			if (arg_len == sizeof(m_args.ipv.v4.sip))
 			{
-				(void)memcpy((void*)(&iface->log_if_class.m_args.v4.sip), (const void*)arg, sizeof(m_args.v4.sip));
+				(void)memcpy((void*)(&iface->log_if_class.m_args.ipv.v4.sip), (const void*)arg, sizeof(m_args.ipv.v4.sip));
 				ret = EOK;
 			}
 
@@ -736,9 +738,9 @@ errno_t pfe_log_if_add_match_rule(pfe_log_if_t *iface, pfe_ct_if_m_rules_t rule,
 
 		case IF_MATCH_DIP:
 		{
-			if (arg_len == sizeof(m_args.v4.dip))
+			if (arg_len == sizeof(m_args.ipv.v4.dip))
 			{
-				(void)memcpy((void*)(&iface->log_if_class.m_args.v4.dip), (const void*)arg, sizeof(m_args.v4.dip));
+				(void)memcpy((void*)(&iface->log_if_class.m_args.ipv.v4.dip), (const void*)arg, sizeof(m_args.ipv.v4.dip));
 				ret = EOK;
 			}
 
@@ -799,6 +801,17 @@ errno_t pfe_log_if_add_match_rule(pfe_log_if_t *iface, pfe_ct_if_m_rules_t rule,
 			break;
 		}
 
+		case IF_MATCH_HIF_COOKIE:
+		{
+			if (arg_len == sizeof(m_args.hif_cookie))
+			{
+				iface->log_if_class.m_args.hif_cookie = *((uint32_t *)arg);
+				ret = EOK;
+			}
+
+			break;
+		}
+
 		default:
 		{
 			if (arg_len != 0U)
@@ -926,10 +939,9 @@ errno_t pfe_log_if_get_match_rules(pfe_log_if_t *iface, pfe_ct_if_m_rules_t *rul
  * @retval		EINVAL Invalid or missing argument
  * @retval		ENOEXEC Command failed
  */
-errno_t pfe_log_if_add_mac_addr(pfe_log_if_t *iface, pfe_mac_addr_t addr, pfe_ct_phy_if_id_t owner)
+errno_t pfe_log_if_add_mac_addr(pfe_log_if_t *iface, const pfe_mac_addr_t addr, pfe_drv_id_t owner)
 {
 	errno_t ret = EOK;
-	pfe_log_if_mac_addr_list_entry_t *entry;
 
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely((NULL == iface) || (NULL == addr)))
@@ -944,13 +956,8 @@ errno_t pfe_log_if_add_mac_addr(pfe_log_if_t *iface, pfe_mac_addr_t addr, pfe_ct
 		NXP_LOG_DEBUG("mutex lock failed\n");
 	}
 
-	/* Check for MAC address duplicates */
-	entry = pfe_log_if_mac_addr_db_find_by_addr(iface, addr);
-	if (NULL != entry)
-	{
-		NXP_LOG_WARNING("MAC address duplicate, not added(%s, parent: %s)\n", iface->name, pfe_phy_if_get_name(iface->parent));
-	}
-	else
+	ret = pfe_mac_db_add_addr(iface->mac_db, addr, owner);
+	if(EOK == ret)
 	{
 		/*	Configure underlying physical interface */
 		if (EOK != pfe_phy_if_add_mac_addr(iface->parent, addr, owner))
@@ -958,26 +965,53 @@ errno_t pfe_log_if_add_mac_addr(pfe_log_if_t *iface, pfe_mac_addr_t addr, pfe_ct
 			NXP_LOG_ERROR("Could not add MAC address (%s, parent: %s)\n", iface->name, pfe_phy_if_get_name(iface->parent));
 			ret = ENOEXEC;
 		}
-		else
+	}
+
+	if (EOK != oal_mutex_unlock(&iface->lock))
+	{
+		NXP_LOG_DEBUG("mutex unlock failed\n");
+	}
+
+	return ret;
+}
+
+/**
+ * @brief		Delete MAC address
+ * @param[in]	iface The interface instance
+ * @param[in]	addr The MAC address to delete
+ * @retval		EOK Success
+ * @retval		EINVAL Invalid or missing argument
+ * @retval		ENOENT MAC address not found in local database
+ * @retval		ENOEXEC Command failed
+ */
+errno_t pfe_log_if_del_mac_addr(pfe_log_if_t *iface, const pfe_mac_addr_t addr)
+{
+	errno_t ret = EOK;
+
+#if defined(PFE_CFG_NULL_ARG_CHECK)
+	if (unlikely((NULL == iface) || (NULL == addr)))
+	{
+		NXP_LOG_ERROR("NULL argument received\n");
+		return EINVAL;
+	}
+#endif /* PFE_CFG_NULL_ARG_CHECK */
+
+	if (EOK != oal_mutex_lock(&iface->lock))
+	{
+		NXP_LOG_DEBUG("mutex lock failed\n");
+	}
+
+	ret = pfe_mac_db_del_addr(iface->mac_db, addr);
+	if(EOK != ret)
+	{
+		NXP_LOG_WARNING("Unable to remove MAC address from log_if MAC database: %d\n", ret);
+	}
+	else
+	{
+		ret = pfe_phy_if_del_mac_addr(iface->parent, addr);
+		if (EOK != ret)
 		{
-			/*	Add address to local list */
-			entry = oal_mm_malloc(sizeof(pfe_log_if_mac_addr_list_entry_t));
-			if (NULL == entry)
-			{
-				NXP_LOG_ERROR("Memory allocation failed\n");
-				/*	Delete MAC address from underlying physical interface */
-				if (EOK != pfe_phy_if_del_mac_addr(iface->parent, addr))
-				{
-					NXP_LOG_ERROR("Could not delete MAC address (%s, parent: %s)\n", iface->name, pfe_phy_if_get_name(iface->parent));
-				}
-				ret = ENOMEM;
-			}
-			else
-			{
-				(void)memcpy(entry->addr, addr, sizeof(pfe_mac_addr_t));
-				entry->owner = owner;
-				LLIST_AddAtEnd(&entry->iterator, &iface->mac_addr_list);
-			}
+			NXP_LOG_ERROR("Unable to del MAC address: %d\n", ret);
 		}
 	}
 
@@ -989,6 +1023,24 @@ errno_t pfe_log_if_add_mac_addr(pfe_log_if_t *iface, pfe_mac_addr_t addr, pfe_ct
 	return ret;
 }
 
+/**
+ * @brief		Get handle of internal MAC database
+ * @param[in]	iface The interface instance
+ * @retval		Database handle.
+ */
+pfe_mac_db_t *pfe_log_if_get_mac_db(const pfe_log_if_t *iface)
+{
+#if defined(PFE_CFG_NULL_ARG_CHECK)
+	if (unlikely(NULL == iface))
+	{
+		NXP_LOG_ERROR("NULL argument received\n");
+		return NULL;
+	}
+#endif /* PFE_CFG_NULL_ARG_CHECK */
+
+	return iface->mac_db;
+}
+
 /**
  * @brief		Get associated MAC address (first in the list of MAC addresses)
  * @param[in]	iface The interface instance
@@ -1000,7 +1052,6 @@ errno_t pfe_log_if_add_mac_addr(pfe_log_if_t *iface, pfe_mac_addr_t addr, pfe_ct
 errno_t pfe_log_if_get_mac_addr(pfe_log_if_t *iface, pfe_mac_addr_t addr)
 {
 	errno_t ret = EOK;
-	pfe_log_if_mac_addr_list_entry_t *entry = NULL;
 
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely((NULL == iface) || (NULL == addr)))
@@ -1015,18 +1066,10 @@ errno_t pfe_log_if_get_mac_addr(pfe_log_if_t *iface, pfe_mac_addr_t addr)
 		NXP_LOG_DEBUG("mutex lock failed\n");
 	}
 
-	if (TRUE == LLIST_IsEmpty(&iface->mac_addr_list))
-	{
-		ret = ENOENT;
-	}
-	else
+	ret = pfe_mac_db_get_first_addr(iface->mac_db, MAC_DB_CRIT_ALL, PFE_TYPE_ANY, PFE_CFG_LOCAL_IF, addr);
+	if(EOK != ret)
 	{
-		/* Get first item from the list */
-		entry = LLIST_Data(iface->mac_addr_list.prNext, pfe_log_if_mac_addr_list_entry_t, iterator);
-		if (entry != NULL)
-		{
-			(void)memcpy(addr, entry->addr, sizeof(pfe_mac_addr_t));
-		}
+		NXP_LOG_WARNING("unable to get MAC address: %d\n", ret);
 	}
 
 	if (EOK != oal_mutex_unlock(&iface->lock))
@@ -1040,20 +1083,19 @@ errno_t pfe_log_if_get_mac_addr(pfe_log_if_t *iface, pfe_mac_addr_t addr)
 /**
  * @brief		Delete MAC addresses added by owner with defined type
  * @param[in]	iface The interface instance
- * @param[in]	mode The flush mode (flush all or just certain type of MAC addresses)
- * @param[in]	owner The identification of driver instance
+ * @param[in]	crit All, Owner, Type or Owner&Type criterion
+ * @param[in]	type Required type of MAC address (Broadcast, Multicast, Unicast, ANY) criterion
+ * @param[in]	owner Required owner of MAC address
  * @retval		EOK Success
  * @retval		EINVAL Invalid or missing argument
  * @retval		ENOEXEC Command failed
  */
-errno_t pfe_log_if_flush_mac_addrs(pfe_log_if_t *iface, pfe_flush_mode_t mode, pfe_ct_phy_if_id_t owner)
+errno_t pfe_log_if_flush_mac_addrs(pfe_log_if_t *iface, pfe_mac_db_crit_t crit, pfe_mac_type_t type, pfe_drv_id_t owner)
 {
 	errno_t ret = EOK;
-	pfe_log_if_mac_addr_list_entry_t *entry;
-	LLIST_t *item, *tmp_item;
 
 #if defined(PFE_CFG_NULL_ARG_CHECK)
-	if (unlikely((NULL == iface) || (NULL == addr)))
+	if (unlikely(NULL == iface))
 	{
 		NXP_LOG_ERROR("NULL argument received\n");
 		return EINVAL;
@@ -1066,7 +1108,7 @@ errno_t pfe_log_if_flush_mac_addrs(pfe_log_if_t *iface, pfe_flush_mode_t mode, p
 	}
 
 	/*	Send command to underlying physical interface */
-	if (EOK != pfe_phy_if_flush_mac_addrs(iface->parent, mode, owner))
+	if (EOK != pfe_phy_if_flush_mac_addrs(iface->parent, crit, type, owner))
 	{
 		NXP_LOG_ERROR("Could not flush MAC addresses (%s, parent: %s, owner ID: %d)\n", iface->name, pfe_phy_if_get_name(iface->parent), owner);
 		ret = ENOEXEC;
@@ -1074,20 +1116,10 @@ errno_t pfe_log_if_flush_mac_addrs(pfe_log_if_t *iface, pfe_flush_mode_t mode, p
 	else
 	{
 		/*	Remove associated MAC addresses due to flush mode */
-		LLIST_ForEachRemovable(item, tmp_item, &iface->mac_addr_list)
+		ret = pfe_mac_db_flush(iface->mac_db, crit, type, owner);
+		if(EOK != ret)
 		{
-			entry = LLIST_Data(item, pfe_log_if_mac_addr_list_entry_t, iterator);
-			if ((NULL != entry) && (entry->owner == owner))
-			{
-				if ((mode == PFE_FLUSH_MODE_ALL) ||
-					((mode == PFE_FLUSH_MODE_MULTI) && (TRUE  == pfe_emac_is_multi(entry->addr))) ||
-					((mode == PFE_FLUSH_MODE_UNI)   && (FALSE == pfe_emac_is_multi(entry->addr))))
-				{
-					LLIST_Remove(&entry->iterator);
-					oal_mm_free(entry);
-					entry = NULL;
-				}
-			}
+			NXP_LOG_ERROR("Unable to flush MAC address from phy_if MAC database: %d\n", ret);
 		}
 	}
 
@@ -1190,7 +1222,7 @@ errno_t pfe_log_if_set_egress_ifs(pfe_log_if_t *iface, uint32_t egress)
  * @retval		EINVAL Invalid or missing argument
  * @retval		ENOEXEC Command failed
  */
-errno_t pfe_log_if_add_egress_if(pfe_log_if_t *iface, pfe_phy_if_t *phy_if)
+errno_t pfe_log_if_add_egress_if(pfe_log_if_t *iface, const pfe_phy_if_t *phy_if)
 {
 	errno_t ret = EOK;
 	uint32_t tmp;
@@ -1243,7 +1275,7 @@ errno_t pfe_log_if_add_egress_if(pfe_log_if_t *iface, pfe_phy_if_t *phy_if)
  * @retval		EINVAL Invalid or missing argument
  * @retval		ENOEXEC Command failed
  */
-errno_t pfe_log_if_del_egress_if(pfe_log_if_t *iface, pfe_phy_if_t *phy_if)
+errno_t pfe_log_if_del_egress_if(pfe_log_if_t *iface, const pfe_phy_if_t *phy_if)
 {
 	errno_t ret = EOK;
 	uint32_t tmp;
@@ -1288,42 +1320,89 @@ errno_t pfe_log_if_del_egress_if(pfe_log_if_t *iface, pfe_phy_if_t *phy_if)
 }
 
 /**
- * @brief		Search a MAC address within internal DB of registered addresses
- * @details		Access to the shared resources => needs to be called within the critical section!
+ * @brief		Enable the interface
+ * @details		Only enabled logical interfaces will be used by firmware
+ * 				to match ingress frames.
  * @param[in]	iface The interface instance
- * @param[in]	addr The MAC address to search
- * @return		The DB entry if found or NULL if address is not present
+ * @retval		EOK Success
+ * @retval		EINVAL Invalid or missing argument
  */
-static pfe_log_if_mac_addr_list_entry_t *pfe_log_if_mac_addr_db_find_by_addr(pfe_log_if_t *iface, pfe_mac_addr_t addr)
+errno_t pfe_log_if_enable(pfe_log_if_t *iface)
 {
-	pfe_log_if_mac_addr_list_entry_t *entry = NULL;
-	LLIST_t *item;
-	
+	errno_t ret;
+	pfe_ct_if_flags_t tmp;
+
 #if defined(PFE_CFG_NULL_ARG_CHECK)
-	if (unlikely(NULL == emac))
+	if (unlikely(NULL == iface))
 	{
 		NXP_LOG_ERROR("NULL argument received\n");
-		return NULL;
+		return EINVAL;
 	}
 #endif /* PFE_CFG_NULL_ARG_CHECK */
 
-	LLIST_ForEach(item, &iface->mac_addr_list)
+	if (EOK != oal_mutex_lock(&iface->lock))
+	{
+		NXP_LOG_DEBUG("mutex lock failed\n");
+	}
+
+	NXP_LOG_DEBUG("Enabling %s\n", iface->name);
+
+	tmp = iface->log_if_class.flags;
+	iface->log_if_class.flags |= oal_htonl(IF_FL_ENABLED);
+
+	ret = pfe_log_if_write_to_class_nostats(iface, &iface->log_if_class);
+	if (EOK != ret)
+	{
+		/*	Revert */
+		iface->log_if_class.flags = tmp;
+	}
+
+	if (EOK != oal_mutex_unlock(&iface->lock))
+	{
+		NXP_LOG_DEBUG("mutex unlock failed\n");
+	}
+
+	if (EOK == ret)
 	{
-		entry = LLIST_Data(item, pfe_log_if_mac_addr_list_entry_t, iterator);
-		if (0 == memcmp(addr, entry->addr, sizeof(pfe_mac_addr_t)))
+		/*	Enable the underlying physical interface */
+		ret = pfe_phy_if_enable(iface->parent);
+		if (EOK != ret)
 		{
-			return entry;
+			/*	Revert */
+			if (EOK != oal_mutex_lock(&iface->lock))
+			{
+				NXP_LOG_DEBUG("mutex lock failed\n");
+			}
+
+			iface->log_if_class.flags = tmp;
+			ret = pfe_log_if_write_to_class_nostats(iface, &iface->log_if_class);
+			if (EOK != ret)
+			{
+				NXP_LOG_ERROR("Could not revert DMEM change\n");
+			}
+
+			if (EOK != oal_mutex_unlock(&iface->lock))
+			{
+				NXP_LOG_DEBUG("mutex unlock failed\n");
+			}
 		}
 	}
-	
-	return NULL;
+
+	return ret;
 }
 
-static errno_t pfe_log_if_clear_mac_addr_nolock(pfe_log_if_t *iface)
+/**
+ * @brief		Disable the interface
+ * @details		Only enabled logical interfaces will be used by firmware
+ * 				to match ingress frames.
+ * @param[in]	iface The interface instance
+ * @retval		EOK Success
+ * @retval		EINVAL Invalid or missing argument
+ */
+errno_t pfe_log_if_disable(pfe_log_if_t *iface)
 {
-	errno_t ret = EOK;
-	pfe_log_if_mac_addr_list_entry_t *entry;
-	LLIST_t *item, *tmp_item;
+	errno_t ret;
+	pfe_ct_if_flags_t tmp;
 
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == iface))
@@ -1333,22 +1412,50 @@ static errno_t pfe_log_if_clear_mac_addr_nolock(pfe_log_if_t *iface)
 	}
 #endif /* PFE_CFG_NULL_ARG_CHECK */
 
-	/*	Remove all associated MAC addresses */
-	LLIST_ForEachRemovable(item, tmp_item, &iface->mac_addr_list)
+	if (EOK != oal_mutex_lock(&iface->lock))
+	{
+		NXP_LOG_DEBUG("mutex lock failed\n");
+	}
+
+	NXP_LOG_DEBUG("Disabling %s\n", iface->name);
+
+	tmp = iface->log_if_class.flags;
+	iface->log_if_class.flags &= (pfe_ct_if_flags_t)(oal_htonl(~IF_FL_ENABLED));
+
+	ret = pfe_log_if_write_to_class_nostats(iface, &iface->log_if_class);
+	if (EOK != ret)
+	{
+		/*	Revert */
+		iface->log_if_class.flags = tmp;
+	}
+
+	if (EOK != oal_mutex_unlock(&iface->lock))
+	{
+		NXP_LOG_DEBUG("mutex unlock failed\n");
+	}
+
+	if (EOK == ret)
 	{
-		entry = LLIST_Data(item, pfe_log_if_mac_addr_list_entry_t, iterator);
-		if (NULL != entry)
+		/*	Disable the underlying physical interface */
+		ret = pfe_phy_if_disable(iface->parent);
+		if (EOK != ret)
 		{
-			ret = pfe_phy_if_del_mac_addr(iface->parent, entry->addr);
+			/*	Revert */
+			if (EOK != oal_mutex_lock(&iface->lock))
+			{
+				NXP_LOG_DEBUG("mutex lock failed\n");
+			}
+
+			iface->log_if_class.flags = tmp;
+			ret = pfe_log_if_write_to_class_nostats(iface, &iface->log_if_class);
 			if (EOK != ret)
 			{
-				NXP_LOG_WARNING("%s rejected MAC address removal request: %d\n", pfe_phy_if_get_name(iface->parent), ret);
+				NXP_LOG_ERROR("Could not revert DMEM change\n");
 			}
-			else
+
+			if (EOK != oal_mutex_unlock(&iface->lock))
 			{
-				LLIST_Remove(&entry->iterator);
-				oal_mm_free(entry);
-				entry = NULL;
+				NXP_LOG_DEBUG("mutex unlock failed\n");
 			}
 		}
 	}
@@ -1357,22 +1464,28 @@ static errno_t pfe_log_if_clear_mac_addr_nolock(pfe_log_if_t *iface)
 }
 
 /**
- * @brief		Clear associated MAC address
+ * @brief		Check if interface is enabled
  * @param[in]	iface The interface instance
- * @retval		EOK Success
- * @retval		EINVAL Invalid or missing argument
- * @retval		ENOEXEC Command failed
+ * @return		TRUE if enabled, FALSE otherwise
  */
-errno_t pfe_log_if_clear_mac_addr(pfe_log_if_t *iface)
+__attribute__((pure)) bool_t pfe_log_if_is_enabled(pfe_log_if_t *iface)
 {
-	errno_t ret;
+	bool_t ret;
+
+#if defined(PFE_CFG_NULL_ARG_CHECK)
+	if (unlikely(NULL == iface))
+	{
+		NXP_LOG_ERROR("NULL argument received\n");
+		return FALSE;
+	}
+#endif /* PFE_CFG_NULL_ARG_CHECK */
 
 	if (EOK != oal_mutex_lock(&iface->lock))
 	{
 		NXP_LOG_DEBUG("mutex lock failed\n");
 	}
 
-	ret = pfe_log_if_clear_mac_addr_nolock(iface);
+	ret = (0U != ((uint32_t)(oal_ntohl(iface->log_if_class.flags)) & (uint32_t)IF_FL_ENABLED));
 
 	if (EOK != oal_mutex_unlock(&iface->lock))
 	{
@@ -1383,16 +1496,17 @@ errno_t pfe_log_if_clear_mac_addr(pfe_log_if_t *iface)
 }
 
 /**
- * @brief		Enable the interface
- * @details		Only enabled logical interfaces will be used by firmware
- * 				to match ingress frames.
- * @param[in]	iface The interface instance
- * @retval		EOK Success
- * @retval		EINVAL Invalid or missing argument
+ * @brief               Enable loopback mode
+ * @details             Function sets logical interface to loopback mode and
+ *                              also enables loopback mode on underlying physical
+ *                              interface.
+ * @param[in]   iface The interface instance
+ * @retval              EOK Success
+ * @retval              EINVAL Invalid or missing argument
  */
-errno_t pfe_log_if_enable(pfe_log_if_t *iface)
+errno_t pfe_log_if_loopback_enable(pfe_log_if_t *iface)
 {
-	errno_t ret;
+	errno_t ret = EOK;
 	pfe_ct_if_flags_t tmp;
 
 #if defined(PFE_CFG_NULL_ARG_CHECK)
@@ -1408,15 +1522,13 @@ errno_t pfe_log_if_enable(pfe_log_if_t *iface)
 		NXP_LOG_DEBUG("mutex lock failed\n");
 	}
 
-	NXP_LOG_DEBUG("Enabling %s\n", iface->name);
-
 	tmp = iface->log_if_class.flags;
-	iface->log_if_class.flags |= IF_FL_ENABLED;
+	iface->log_if_class.flags |= IF_FL_LOOPBACK;
 
 	ret = pfe_log_if_write_to_class_nostats(iface, &iface->log_if_class);
 	if (EOK != ret)
 	{
-		/*	Revert */
+		/*      Revert */
 		iface->log_if_class.flags = tmp;
 	}
 
@@ -1427,17 +1539,17 @@ errno_t pfe_log_if_enable(pfe_log_if_t *iface)
 
 	if (EOK == ret)
 	{
-		/*	Enable the underlying physical interface */
-		ret = pfe_phy_if_enable(iface->parent);
+		/*      Enable the underlying physical interface */
+		ret = pfe_phy_if_loopback_enable(iface->parent);
 		if (EOK != ret)
 		{
-			/*	Revert */
+			/*      Revert */
 			if (EOK != oal_mutex_lock(&iface->lock))
 			{
 				NXP_LOG_DEBUG("mutex lock failed\n");
 			}
 
-			iface->log_if_class.flags = tmp;
+			iface->log_if_class.flags &= ~IF_FL_LOOPBACK;
 			ret = pfe_log_if_write_to_class_nostats(iface, &iface->log_if_class);
 			if (EOK != ret)
 			{
@@ -1455,16 +1567,17 @@ errno_t pfe_log_if_enable(pfe_log_if_t *iface)
 }
 
 /**
- * @brief		Disable the interface
- * @details		Only enabled logical interfaces will be used by firmware
- * 				to match ingress frames.
- * @param[in]	iface The interface instance
- * @retval		EOK Success
- * @retval		EINVAL Invalid or missing argument
+ * @brief               Disable loopback mode
+ * @details             Function sets logical interface to loopback mode and
+ *                              also disable loopback mode on underlying physical
+ *                              interface.
+ * @param[in]   iface The interface instance
+ * @retval              EOK Success
+ * @retval              EINVAL Invalid or missing argument
  */
-errno_t pfe_log_if_disable(pfe_log_if_t *iface)
+errno_t pfe_log_if_loopback_disable(pfe_log_if_t *iface)
 {
-	errno_t ret;
+	errno_t ret = EOK;
 	pfe_ct_if_flags_t tmp;
 
 #if defined(PFE_CFG_NULL_ARG_CHECK)
@@ -1480,15 +1593,12 @@ errno_t pfe_log_if_disable(pfe_log_if_t *iface)
 		NXP_LOG_DEBUG("mutex lock failed\n");
 	}
 
-	NXP_LOG_DEBUG("Disabling %s\n", iface->name);
-
 	tmp = iface->log_if_class.flags;
-	iface->log_if_class.flags &= (pfe_ct_if_flags_t)(~IF_FL_ENABLED);
-
+	iface->log_if_class.flags &= ~IF_FL_LOOPBACK;
 	ret = pfe_log_if_write_to_class_nostats(iface, &iface->log_if_class);
 	if (EOK != ret)
 	{
-		/*	Revert */
+		/*      Revert */
 		iface->log_if_class.flags = tmp;
 	}
 
@@ -1499,17 +1609,16 @@ errno_t pfe_log_if_disable(pfe_log_if_t *iface)
 
 	if (EOK == ret)
 	{
-		/*	Disable the underlying physical interface */
-		ret = pfe_phy_if_disable(iface->parent);
+		/*      Disable the underlying physical interface */
+		ret = pfe_phy_if_loopback_disable(iface->parent);
 		if (EOK != ret)
 		{
-			/*	Revert */
+			/*      Revert */
 			if (EOK != oal_mutex_lock(&iface->lock))
 			{
 				NXP_LOG_DEBUG("mutex lock failed\n");
 			}
-
-			iface->log_if_class.flags = tmp;
+			iface->log_if_class.flags |= IF_FL_LOOPBACK;
 			ret = pfe_log_if_write_to_class_nostats(iface, &iface->log_if_class);
 			if (EOK != ret)
 			{
@@ -1527,11 +1636,11 @@ errno_t pfe_log_if_disable(pfe_log_if_t *iface)
 }
 
 /**
- * @brief		Check if interface is enabled
- * @param[in]	iface The interface instance
- * @return		TRUE if enabled, FALSE otherwise
+ * @brief               Check if interface is in loopback mode
+ * @param[in]   iface The interface instance
+ * @return              TRUE if loopback mode is enabled, FALSE otherwise
  */
-__attribute__((pure)) bool_t pfe_log_if_is_enabled(pfe_log_if_t *iface)
+__attribute__((pure)) bool_t pfe_log_if_is_loopback(pfe_log_if_t *iface)
 {
 	bool_t ret;
 
@@ -1548,7 +1657,7 @@ __attribute__((pure)) bool_t pfe_log_if_is_enabled(pfe_log_if_t *iface)
 		NXP_LOG_DEBUG("mutex lock failed\n");
 	}
 
-	ret = (0U != ((uint8_t)(iface->log_if_class.flags) & (uint8_t)IF_FL_ENABLED));
+	ret = (0 != (iface->log_if_class.flags & IF_FL_LOOPBACK));
 
 	if (EOK != oal_mutex_unlock(&iface->lock))
 	{
@@ -1586,7 +1695,7 @@ errno_t pfe_log_if_promisc_enable(pfe_log_if_t *iface)
 	}
 
 	tmp = iface->log_if_class.flags;
-	iface->log_if_class.flags |= IF_FL_PROMISC;
+	iface->log_if_class.flags |= oal_htonl(IF_FL_PROMISC);
 
 	ret = pfe_log_if_write_to_class_nostats(iface, &iface->log_if_class);
 	if (EOK != ret)
@@ -1654,7 +1763,7 @@ errno_t pfe_log_if_promisc_disable(pfe_log_if_t *iface)
 	}
 
 	tmp = iface->log_if_class.flags;
-	iface->log_if_class.flags &= (pfe_ct_if_flags_t)(~IF_FL_PROMISC);
+	iface->log_if_class.flags &= (pfe_ct_if_flags_t)(oal_htonl(~IF_FL_PROMISC));
 
 	ret = pfe_log_if_write_to_class_nostats(iface, &iface->log_if_class);
 	if (EOK != ret)
@@ -1719,7 +1828,7 @@ __attribute__((pure)) bool_t pfe_log_if_is_promisc(pfe_log_if_t *iface)
 		NXP_LOG_DEBUG("mutex lock failed\n");
 	}
 
-	ret = (0U != ((uint8_t)(iface->log_if_class.flags) & (uint8_t)IF_FL_PROMISC));
+	ret = (0U != ((uint32_t)(oal_ntohl(iface->log_if_class.flags)) & (uint32_t)IF_FL_PROMISC));
 
 	if (EOK != oal_mutex_unlock(&iface->lock))
 	{
@@ -1738,7 +1847,7 @@ __attribute__((pure)) bool_t pfe_log_if_is_promisc(pfe_log_if_t *iface)
  * @retval		EOK Success
  * @retval		EINVAL Invalid or missing argument
  */
-errno_t pfe_log_if_allmulti_enable(pfe_log_if_t *iface)
+errno_t pfe_log_if_allmulti_enable(const pfe_log_if_t *iface)
 {
 	errno_t ret;
 
@@ -1766,7 +1875,7 @@ errno_t pfe_log_if_allmulti_enable(pfe_log_if_t *iface)
  * @retval		EOK Success
  * @retval		EINVAL Invalid or missing argument
  */
-errno_t pfe_log_if_allmulti_disable(pfe_log_if_t *iface)
+errno_t pfe_log_if_allmulti_disable(const pfe_log_if_t *iface)
 {
 	errno_t ret;
 
@@ -1815,7 +1924,7 @@ errno_t pfe_log_if_discard_enable(pfe_log_if_t *iface)
 	}
 
 	tmp = iface->log_if_class.flags;
-	iface->log_if_class.flags |= IF_FL_DISCARD;
+	iface->log_if_class.flags |= oal_htonl(IF_FL_DISCARD);
 
 	ret = pfe_log_if_write_to_class_nostats(iface, &iface->log_if_class);
 	if (EOK != ret)
@@ -1859,7 +1968,7 @@ errno_t pfe_log_if_discard_disable(pfe_log_if_t *iface)
 	}
 
 	tmp = iface->log_if_class.flags;
-	iface->log_if_class.flags &= (pfe_ct_if_flags_t)(~IF_FL_DISCARD);
+	iface->log_if_class.flags &= (pfe_ct_if_flags_t)(oal_htonl(~IF_FL_DISCARD));
 
 	ret = pfe_log_if_write_to_class_nostats(iface, &iface->log_if_class);
 	if (EOK != ret)
@@ -1898,7 +2007,7 @@ __attribute__((pure)) bool_t pfe_log_if_is_discard(pfe_log_if_t *iface)
 		NXP_LOG_DEBUG("mutex lock failed\n");
 	}
 
-	ret = (0U != ((uint8_t)(iface->log_if_class.flags) & (uint8_t)IF_FL_DISCARD));
+	ret = (0U != ((uint32_t)(oal_ntohl(iface->log_if_class.flags)) & (uint32_t)IF_FL_DISCARD));
 
 	if (EOK != oal_mutex_unlock(&iface->lock))
 	{
@@ -1913,7 +2022,7 @@ __attribute__((pure)) bool_t pfe_log_if_is_discard(pfe_log_if_t *iface)
  * @param[in]	iface The interface instance
  * @return		Pointer to name string or NULL if failed/not found.
  */
-__attribute__((pure)) const char_t *pfe_log_if_get_name(pfe_log_if_t *iface)
+__attribute__((pure)) const char_t *pfe_log_if_get_name(const pfe_log_if_t *iface)
 {
 	static const char_t *unknown = "(unknown)";
 
@@ -1942,7 +2051,7 @@ __attribute__((pure)) const char_t *pfe_log_if_get_name(pfe_log_if_t *iface)
  * @retval		EOK Success
  * @retval		NOMEM Not possible to allocate memory for read
  */
-errno_t pfe_log_if_get_stats(pfe_log_if_t *iface, pfe_ct_class_algo_stats_t *stat)
+errno_t pfe_log_if_get_stats(const pfe_log_if_t *iface, pfe_ct_class_algo_stats_t *stat)
 {
 	uint32_t i = 0;
 	errno_t ret = EOK;
@@ -1971,7 +2080,7 @@ errno_t pfe_log_if_get_stats(pfe_log_if_t *iface, pfe_ct_class_algo_stats_t *sta
 		return ENOMEM;
 	}
 	/* Gather memory from all PEs*/
-	ret = pfe_class_gather_read_dmem(iface->class, stats, (void *)iface->dmem_base + offset, buff_len, sizeof(pfe_ct_class_algo_stats_t));
+	ret = pfe_class_gather_read_dmem(iface->class, stats, (iface->dmem_base + offset), buff_len, sizeof(pfe_ct_class_algo_stats_t));
 
 	/* Calculate total statistics */
 	for(i = 0U; i < pfe_class_get_num_of_pes(iface->class); i++)
@@ -2002,7 +2111,7 @@ errno_t pfe_log_if_get_stats(pfe_log_if_t *iface, pfe_ct_class_algo_stats_t *sta
  * @param[in]	verb_level 	Verbosity level
  * @return		Number of bytes written to the buffer
  */
-uint32_t pfe_log_if_get_text_statistics(pfe_log_if_t *iface, char_t *buf, uint32_t buf_len, uint8_t verb_level)
+uint32_t pfe_log_if_get_text_statistics(const pfe_log_if_t *iface, char_t *buf, uint32_t buf_len, uint8_t verb_level)
 {
 	uint32_t len = 0U;
 	pfe_ct_log_if_t log_if_class = {0U};
@@ -2031,7 +2140,7 @@ uint32_t pfe_log_if_get_text_statistics(pfe_log_if_t *iface, char_t *buf, uint32
 				len += oal_util_snprintf(buf + len, buf_len - len, "[LogIF '%s' @ p0x%p]\n", pfe_log_if_get_name(iface), (void *)iface->dmem_base);
 				len += oal_util_snprintf(buf + len, buf_len - len, "Match Rules: 0x%x\n", oal_ntohl(log_if_class.m_rules));
 				len += oal_util_snprintf(buf + len, buf_len - len, "Mode       : 0x%x\n", log_if_class.mode);
-				len += oal_util_snprintf(buf + len, buf_len - len, "Flags      : 0x%x\n", log_if_class.flags);
+				len += oal_util_snprintf(buf + len, buf_len - len, "Flags      : 0x%x\n", oal_ntohl(log_if_class.flags));
 				printed_rules = TRUE; /* Avoid printing it multiple times*/
 			}
 			len += oal_util_snprintf(buf + len, buf_len - len, "- Statistics from PE %u -\n", i);
diff --git a/sw/pfe_platform/src/pfe_log_if_slave.c b/sw/pfe_platform/src/pfe_log_if_slave.c
index 0469e68..b00032e 100644
--- a/sw/pfe_platform/src/pfe_log_if_slave.c
+++ b/sw/pfe_platform/src/pfe_log_if_slave.c
@@ -19,11 +19,11 @@
  */
 
 #include "pfe_cfg.h"
-#ifdef PFE_CFG_PFE_SLAVE
-
 #include "oal.h"
-#include "hal.h"
 
+#ifdef PFE_CFG_PFE_SLAVE
+#include "hal.h"
+#include "pfe_platform_cfg.h"
 #include "pfe_ct.h"
 #include "linked_list.h"
 #include "pfe_log_if.h"
@@ -35,16 +35,10 @@ struct pfe_log_if_tag
 	pfe_phy_if_t *parent;			/*!< Parent physical interface */
 	char_t *name;					/*!< Interface name */
 	uint8_t id;						/*!< Interface ID */
-	LLIST_t mac_addr_list;			/*!< Useful for the future function "get_all_mac_addrs" */
+	pfe_mac_db_t *mac_db;			/*!< MAC database */
 	oal_mutex_t lock;
 };
 
-typedef struct __pfe_mac_addr_entry_tag
-{
-	pfe_mac_addr_t addr;	/*	The MAC address */
-	LLIST_t iterator;		/*	List chain entry */
-} pfe_mac_addr_list_entry_t;
-
 static errno_t pfe_log_if_db_lock(void)
 {
 	errno_t ret;
@@ -77,7 +71,7 @@ static errno_t pfe_log_if_db_unlock(void)
  * @param[in]	name Name of the interface
  * @return		The interface instance or NULL if failed
  */
-pfe_log_if_t *pfe_log_if_create(pfe_phy_if_t *parent, char_t *name)
+pfe_log_if_t *pfe_log_if_create(pfe_phy_if_t *parent, const char_t *name)
 {
 	pfe_platform_rpc_pfe_log_if_create_arg_t arg = {0U};
 	pfe_platform_rpc_pfe_log_if_create_ret_t rpc_ret = {0U};
@@ -116,13 +110,21 @@ pfe_log_if_t *pfe_log_if_create(pfe_phy_if_t *parent, char_t *name)
 	else
 	{
 		memset(iface, 0, sizeof(pfe_log_if_t));
-		LLIST_Init(&iface->mac_addr_list);
 		iface->parent = parent;
 		iface->id = rpc_ret.log_if_id;
 
+		iface->mac_db = pfe_mac_db_create();
+		if (NULL == iface->mac_db)
+		{
+			NXP_LOG_ERROR("Could not create MAC database\n");
+			oal_mm_free(iface);
+			return NULL;
+		}
+
 		if (EOK != oal_mutex_init(&iface->lock))
 		{
 			NXP_LOG_ERROR("Could not initialize mutex\n");
+			(void)pfe_mac_db_destroy(iface->mac_db);
 			oal_mm_free(iface);
 			return NULL;
 		}
@@ -131,6 +133,7 @@ pfe_log_if_t *pfe_log_if_create(pfe_phy_if_t *parent, char_t *name)
 		if (NULL == iface->name)
 		{
 			NXP_LOG_ERROR("Malloc failed\n");
+			(void)pfe_mac_db_destroy(iface->mac_db);
 			oal_mutex_destroy(&iface->lock);
 			oal_mm_free(iface);
 			return NULL;
@@ -149,7 +152,7 @@ pfe_log_if_t *pfe_log_if_create(pfe_phy_if_t *parent, char_t *name)
  * @param[in]	iface The interface instance
  * @return		The interface ID
  */
-__attribute__((pure)) uint8_t pfe_log_if_get_id(pfe_log_if_t *iface)
+__attribute__((pure)) uint8_t pfe_log_if_get_id(const pfe_log_if_t *iface)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == iface))
@@ -167,7 +170,7 @@ __attribute__((pure)) uint8_t pfe_log_if_get_id(pfe_log_if_t *iface)
  * @param[in]	iface The interface instance
  * @return		Physical interface instance or NULL if failed
  */
-__attribute__((pure)) pfe_phy_if_t *pfe_log_if_get_parent(pfe_log_if_t *iface)
+__attribute__((pure)) pfe_phy_if_t *pfe_log_if_get_parent(const pfe_log_if_t *iface)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == iface))
@@ -188,8 +191,6 @@ void pfe_log_if_destroy(pfe_log_if_t *iface)
 {
 	pfe_platform_rpc_pfe_log_if_destroy_arg_t req = {0U};
 	errno_t ret;
-	LLIST_t *item, *tmp_item;
-	pfe_mac_addr_list_entry_t *entry;
 
 	if (NULL != iface)
 	{
@@ -210,17 +211,12 @@ void pfe_log_if_destroy(pfe_log_if_t *iface)
 				NXP_LOG_DEBUG("mutex lock failed\n");
 			}
 #endif /* PFE_CFG_TARGET_OS_AUTOSAR */
-			/*	Remove MAC addresses also from local list */
-			LLIST_ForEachRemovable(item, tmp_item, &iface->mac_addr_list)
+			/*	Destroy local MAC database */
+			ret = pfe_mac_db_destroy(iface->mac_db);
+			if (EOK != ret)
 			{
-				entry = LLIST_Data(item, pfe_mac_addr_list_entry_t, iterator);
-				if (NULL != entry)
-				{
-					LLIST_Remove(&entry->iterator);
-					oal_mm_free(entry);
-					entry = NULL;
-				}
-			}	
+				NXP_LOG_WARNING("unable to destroy MAC database: %d\n", ret);
+			}
 #ifndef PFE_CFG_TARGET_OS_AUTOSAR
 			if (EOK != oal_mutex_unlock(&iface->lock))
 			{
@@ -371,7 +367,7 @@ bool_t pfe_log_if_is_match_or(pfe_log_if_t *iface)
  * @retval		EOK Success
  * @retval		EINVAL Invalid or missing argument
  */
-errno_t pfe_log_if_set_match_rules(pfe_log_if_t *iface, pfe_ct_if_m_rules_t rules, pfe_ct_if_m_args_t *args)
+errno_t pfe_log_if_set_match_rules(pfe_log_if_t *iface, pfe_ct_if_m_rules_t rules, const pfe_ct_if_m_args_t *args)
 {
 	pfe_platform_rpc_pfe_log_if_set_match_rules_arg_t req = {0};
 	errno_t ret = EOK;
@@ -419,7 +415,7 @@ errno_t pfe_log_if_set_match_rules(pfe_log_if_t *iface, pfe_ct_if_m_rules_t rule
  * @retval		EOK Success
  * @retval		EINVAL Invalid or missing argument
  */
-errno_t pfe_log_if_add_match_rule(pfe_log_if_t *iface, pfe_ct_if_m_rules_t rule, void *arg, uint32_t arg_len)
+errno_t pfe_log_if_add_match_rule(pfe_log_if_t *iface, pfe_ct_if_m_rules_t rule, const void *arg, uint32_t arg_len)
 {
 	pfe_platform_rpc_pfe_log_if_add_match_rule_arg_t req = {0};
 	errno_t ret = EINVAL;
@@ -564,12 +560,12 @@ errno_t pfe_log_if_get_match_rules(pfe_log_if_t *iface, pfe_ct_if_m_rules_t *rul
  * @retval		EINVAL Invalid or missing argument
  * @retval		ENOEXEC Command failed
  */
-errno_t pfe_log_if_add_mac_addr(pfe_log_if_t *iface, pfe_mac_addr_t addr, pfe_ct_phy_if_id_t owner)
+errno_t pfe_log_if_add_mac_addr(pfe_log_if_t *iface, const pfe_mac_addr_t addr, pfe_drv_id_t owner)
 {
 	pfe_platform_rpc_pfe_log_if_add_mac_addr_arg_t req = {0};
 	errno_t ret = EOK;
-	pfe_mac_addr_list_entry_t *entry;
-	(void)owner; /* Owner will be added directly to the RPC */
+
+	ct_assert(sizeof(req.addr) == sizeof(pfe_mac_addr_t));
 
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely((NULL == iface) || (NULL == addr)))
@@ -588,31 +584,24 @@ errno_t pfe_log_if_add_mac_addr(pfe_log_if_t *iface, pfe_mac_addr_t addr, pfe_ct
 
 	(void)pfe_log_if_db_lock();
 
-	/*	Add address to local list */
-	entry = oal_mm_malloc(sizeof(pfe_mac_addr_list_entry_t));
-	if (NULL == entry)
-	{
-		NXP_LOG_ERROR("Memory allocation failed\n");
-		ret = ENOMEM;
-	}
-	else
+	/*	Add address to local database */
+	ret = pfe_mac_db_add_addr(iface->mac_db, addr, owner);
+	if(EOK == ret)
 	{
-		memcpy(entry->addr, addr, sizeof(pfe_mac_addr_t));
-		LLIST_AddAtEnd(&entry->iterator, &iface->mac_addr_list);
-
 		/*	Ask the master driver to add the MAC address */
 		req.log_if_id = iface->id;
-		ct_assert(sizeof(req.addr) == sizeof(pfe_mac_addr_t));
 		memcpy(req.addr, addr, sizeof(pfe_mac_addr_t));
 		ret = pfe_idex_master_rpc(PFE_PLATFORM_RPC_PFE_LOG_IF_ADD_MAC_ADDR, &req, sizeof(req), NULL, 0U);
 		if (EOK != ret)
 		{
 			NXP_LOG_DEBUG("Can't set MAC address: %d\n", ret);
 
-			/*	Remove the address from local list */
-			LLIST_Remove(&entry->iterator);
-			oal_mm_free(entry);
-			entry = NULL;
+			/*	Remove the address from local database */
+			ret = pfe_mac_db_del_addr(iface->mac_db, addr);
+			if(EOK != ret)
+			{
+				NXP_LOG_WARNING("Unable to remove MAC address from phy_if MAC database: %d\n", ret);
+			}
 		}
 	}
 
@@ -627,17 +616,19 @@ errno_t pfe_log_if_add_mac_addr(pfe_log_if_t *iface, pfe_mac_addr_t addr, pfe_ct
 }
 
 /**
- * @brief		Get associated MAC address
+ * @brief		Delete MAC address
  * @param[in]	iface The interface instance
- * @param[out]	addr Where to copy to address
+ * @param[in]	addr The MAC address to delete
  * @retval		EOK Success
  * @retval		EINVAL Invalid or missing argument
- * @retval		ENOENT No address assigned
+ * @retval		ENOEXEC Command failed
  */
-errno_t pfe_log_if_get_mac_addr(pfe_log_if_t *iface, pfe_mac_addr_t addr)
+errno_t pfe_log_if_del_mac_addr(pfe_log_if_t *iface, const pfe_mac_addr_t addr)
 {
+	pfe_platform_rpc_pfe_log_if_del_mac_addr_arg_t req = {0};
 	errno_t ret = EOK;
-	pfe_mac_addr_list_entry_t *entry;
+
+	ct_assert(sizeof(req.addr) == sizeof(pfe_mac_addr_t));
 
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely((NULL == iface) || (NULL == addr)))
@@ -654,19 +645,83 @@ errno_t pfe_log_if_get_mac_addr(pfe_log_if_t *iface, pfe_mac_addr_t addr)
 	}
 #endif /* PFE_CFG_TARGET_OS_AUTOSAR */
 
-	if (FALSE == LLIST_IsEmpty(&iface->mac_addr_list))
-	{
-		/*	Get first address from the list */
-		entry = (pfe_mac_addr_list_entry_t *)LLIST_Data(iface->mac_addr_list.prNext, pfe_mac_addr_list_entry_t, iterator);
+	(void)pfe_log_if_db_lock();
 
-		/*	Provide the MAC address */
-		memcpy(addr, entry->addr, sizeof(pfe_mac_addr_t));
-		ret = EOK;
+	ret = pfe_mac_db_del_addr(iface->mac_db, addr);
+	if(EOK != ret)
+	{
+		NXP_LOG_WARNING("Unable to remove MAC address from log_if MAC database: %d\n", ret);
 	}
 	else
 	{
-		/*	No address assigned */
-		ret = ENOENT;
+		/*	Ask the master driver to del the MAC address */
+		req.log_if_id = iface->id;
+		memcpy(req.addr, addr, sizeof(pfe_mac_addr_t));
+		ret = pfe_idex_master_rpc(PFE_PLATFORM_RPC_PFE_LOG_IF_DEL_MAC_ADDR, &req, sizeof(req), NULL, 0U);
+		if (EOK != ret)
+		{
+			NXP_LOG_DEBUG("Can't del MAC address: %d\n", ret);
+		}
+	}
+
+	(void)pfe_log_if_db_unlock();
+#ifndef PFE_CFG_TARGET_OS_AUTOSAR
+	if (EOK != oal_mutex_unlock(&iface->lock))
+	{
+		NXP_LOG_DEBUG("mutex unlock failed\n");
+	}
+#endif /* PFE_CFG_TARGET_OS_AUTOSAR */
+	return ret;
+}
+
+/**
+ * @brief		Get handle of internal MAC database
+ * @param[in]	iface The interface instance
+ * @retval		Database handle.
+ */
+pfe_mac_db_t *pfe_log_if_get_mac_db(const pfe_log_if_t *iface)
+{
+#if defined(PFE_CFG_NULL_ARG_CHECK)
+	if (unlikely(NULL == iface))
+	{
+		NXP_LOG_ERROR("NULL argument received\n");
+		return NULL;
+	}
+#endif /* PFE_CFG_NULL_ARG_CHECK */
+
+	return iface->mac_db;
+}
+
+/**
+ * @brief		Get associated MAC address
+ * @param[in]	iface The interface instance
+ * @param[out]	addr Where to copy to address
+ * @retval		EOK Success
+ * @retval		EINVAL Invalid or missing argument
+ * @retval		ENOENT No address assigned
+ */
+errno_t pfe_log_if_get_mac_addr(pfe_log_if_t *iface, pfe_mac_addr_t addr)
+{
+	errno_t ret = EOK;
+#if defined(PFE_CFG_NULL_ARG_CHECK)
+	if (unlikely((NULL == iface) || (NULL == addr)))
+	{
+		NXP_LOG_ERROR("NULL argument received\n");
+		return EINVAL;
+	}
+#endif /* PFE_CFG_NULL_ARG_CHECK */
+
+#ifndef PFE_CFG_TARGET_OS_AUTOSAR
+	if (EOK != oal_mutex_lock(&iface->lock))
+	{
+		NXP_LOG_DEBUG("mutex lock failed\n");
+	}
+#endif /* PFE_CFG_TARGET_OS_AUTOSAR */
+
+	ret = pfe_mac_db_get_first_addr(iface->mac_db, MAC_DB_CRIT_ALL, PFE_TYPE_ANY, PFE_CFG_LOCAL_IF, addr);
+	if(EOK != ret)
+	{
+		NXP_LOG_WARNING("unable to get MAC address: %d\n", ret);
 	}
 
 #ifndef PFE_CFG_TARGET_OS_AUTOSAR
@@ -682,22 +737,21 @@ errno_t pfe_log_if_get_mac_addr(pfe_log_if_t *iface, pfe_mac_addr_t addr)
 /**
 * @brief		Delete MAC addresses added by owner with defined type
  * @param[in]	iface The interface instance
- * @param[in]	mode The flush mode (flush all or just certain type of MAC addresses)
- * @param[in]	owner The identification of driver instance
+ * @param[in]	crit All, Owner, Type or Owner&Type criterion
+ * @param[in]	type Required type of MAC address (Broadcast, Multicast, Unicast, ANY) criterion
+ * @param[in]	owner Required owner of MAC address
  * @retval		EOK Success
  * @retval		EINVAL Invalid or missing argument
  * @retval		ENOEXEC Command failed
  */
-errno_t pfe_log_if_flush_mac_addrs(pfe_log_if_t *iface, pfe_flush_mode_t mode, pfe_ct_phy_if_id_t owner)
+errno_t pfe_log_if_flush_mac_addrs(pfe_log_if_t *iface, pfe_mac_db_crit_t crit, pfe_mac_type_t type, pfe_drv_id_t owner)
 {
 	pfe_platform_rpc_pfe_log_if_flush_mac_addrs_arg_t req = {0};
 	errno_t ret = EOK;
-	pfe_mac_addr_list_entry_t *entry;
-	LLIST_t *item, *tmp_item;
 	(void)owner; /* Owner will be added directly to the RPC */
 
 #if defined(PFE_CFG_NULL_ARG_CHECK)
-	if (unlikely((NULL == iface) || (NULL == addr)))
+	if (unlikely(NULL == iface))
 	{
 		NXP_LOG_ERROR("NULL argument received\n");
 		return EINVAL;
@@ -713,7 +767,8 @@ errno_t pfe_log_if_flush_mac_addrs(pfe_log_if_t *iface, pfe_flush_mode_t mode, p
 
 	/*	Pass parameters */
 	req.log_if_id = iface->id;
-	req.mode = mode;
+	req.crit = crit;
+	req.type = type;
 
 	(void)pfe_log_if_db_lock();
 
@@ -725,21 +780,11 @@ errno_t pfe_log_if_flush_mac_addrs(pfe_log_if_t *iface, pfe_flush_mode_t mode, p
 	}
 	else
 	{
-		/*	Remove MAC addresses also from local list */
-		LLIST_ForEachRemovable(item, tmp_item, &iface->mac_addr_list)
+		/*	Remove MAC addresses also from local database */
+		ret = pfe_mac_db_flush(iface->mac_db, crit, type, owner);
+		if(EOK != ret)
 		{
-			entry = LLIST_Data(item, pfe_mac_addr_list_entry_t, iterator);
-			if (NULL != entry)
-			{
-				if ((mode == PFE_FLUSH_MODE_ALL) ||
-					((mode == PFE_FLUSH_MODE_MULTI) && (TRUE  == pfe_emac_is_multi(entry->addr))) ||
-					((mode == PFE_FLUSH_MODE_UNI)   && (FALSE == pfe_emac_is_multi(entry->addr))))
-				{
-					LLIST_Remove(&entry->iterator);
-					oal_mm_free(entry);
-					entry = NULL;
-				}
-			}
+			NXP_LOG_DEBUG("Unable to flush MAC address from phy_if MAC database: %d\n", ret);
 		}	
 	}
 
@@ -809,7 +854,7 @@ errno_t pfe_log_if_get_egress_ifs(pfe_log_if_t *iface, uint32_t *egress)
  * @retval		EINVAL Invalid or missing argument
  * @retval		ENOEXEC Command failed
  */
-errno_t pfe_log_if_add_egress_if(pfe_log_if_t *iface, pfe_phy_if_t *phy_if)
+errno_t pfe_log_if_add_egress_if(pfe_log_if_t *iface, const pfe_phy_if_t *phy_if)
 {
 	pfe_platform_rpc_pfe_log_if_add_egress_if_arg_t req = {0};
 	errno_t ret = EOK;
@@ -848,7 +893,7 @@ errno_t pfe_log_if_add_egress_if(pfe_log_if_t *iface, pfe_phy_if_t *phy_if)
  * @retval		EINVAL Invalid or missing argument
  * @retval		ENOEXEC Command failed
  */
-errno_t pfe_log_if_del_egress_if(pfe_log_if_t *iface, pfe_phy_if_t *phy_if)
+errno_t pfe_log_if_del_egress_if(pfe_log_if_t *iface, const pfe_phy_if_t *phy_if)
 {
 	pfe_platform_rpc_pfe_log_if_del_egress_if_arg_t req = {0};
 	errno_t ret = EOK;
@@ -878,65 +923,6 @@ errno_t pfe_log_if_del_egress_if(pfe_log_if_t *iface, pfe_phy_if_t *phy_if)
 	return ret;
 }
 
-/**
- * @brief		Clear associated MAC address
- * @param[in]	iface The interface instance
- * @retval		EOK Success
- * @retval		EINVAL Invalid or missing argument
- * @retval		ENOEXEC Command failed
- */
-errno_t pfe_log_if_clear_mac_addr(pfe_log_if_t *iface)
-{
-	pfe_platform_rpc_pfe_log_if_clear_mac_addr_arg_t req = {0};
-	errno_t ret;
-	LLIST_t *item, *tmp_item;
-	pfe_mac_addr_list_entry_t *entry;
-
-	req.log_if_id = iface->id;
-
-#ifndef PFE_CFG_TARGET_OS_AUTOSAR
-	if (EOK != oal_mutex_lock(&iface->lock))
-	{
-		NXP_LOG_DEBUG("mutex lock failed\n");
-	}
-#endif /* PFE_CFG_TARGET_OS_AUTOSAR */
-
-	(void)pfe_log_if_db_lock();
-
-	/*	Ask the master driver to clear MAC address */
-	ret = pfe_idex_master_rpc(PFE_PLATFORM_RPC_PFE_LOG_IF_CLEAR_MAC_ADDR, &req, sizeof(req), NULL, 0U);
-	if (EOK != ret)
-	{
-		NXP_LOG_DEBUG("Can't clear MAC address: %d\n", ret);
-	}
-	else
-	{
-		
-		/*	Remove MAC addresses also from local list */
-		LLIST_ForEachRemovable(item, tmp_item, &iface->mac_addr_list)
-		{
-			entry = LLIST_Data(item, pfe_mac_addr_list_entry_t, iterator);
-			if (NULL != entry)
-			{
-				LLIST_Remove(&entry->iterator);
-				oal_mm_free(entry);
-				entry = NULL;
-			}
-		}	
-	}
-
-	(void)pfe_log_if_db_unlock();
-
-#ifndef PFE_CFG_TARGET_OS_AUTOSAR
-	if (EOK != oal_mutex_unlock(&iface->lock))
-	{
-		NXP_LOG_DEBUG("mutex unlock failed\n");
-	}
-#endif /* PFE_CFG_TARGET_OS_AUTOSAR */
-
-	return ret;
-}
-
 /**
  * @brief		Enable the interface
  * @details		Only enabled logical interfaces will be used by firmware
@@ -1162,6 +1148,76 @@ __attribute__((pure)) bool_t pfe_log_if_is_promisc(pfe_log_if_t *iface)
 	}
 }
 
+/**
+ * @brief		Enable loopback mode
+ * @param[in]	iface The interface instance
+ * @retval		EOK Success
+ * @retval		EINVAL Invalid or missing argument
+ */
+errno_t pfe_log_if_loopback_enable(pfe_log_if_t *iface)
+{
+	errno_t ret = EOK;
+	pfe_platform_rpc_pfe_log_if_loopback_enable_arg_t req = {0};
+
+#if defined(PFE_CFG_NULL_ARG_CHECK)
+	if (unlikely(NULL == iface))
+	{
+		NXP_LOG_ERROR("NULL argument received\n");
+		return EINVAL;
+	}
+#endif /* PFE_CFG_NULL_ARG_CHECK */
+
+	req.log_if_id = iface->id;
+
+	(void)pfe_log_if_db_lock();
+
+	/* Enable loopback mode */
+	ret = pfe_idex_master_rpc(PFE_PLATFORM_RPC_PFE_LOG_IF_LOOPBACK_ENABLE, &req, sizeof(req), NULL, 0U);
+	if (EOK != ret)
+	{
+		NXP_LOG_DEBUG("Can't enable loopback mode: %d\n", ret);
+	}
+
+	(void)pfe_log_if_db_unlock();
+
+	return ret;
+}
+
+/**
+ * @brief		Disable loopback mode
+ * @param[in]	iface The interface instance
+ * @retval		EOK Success
+ * @retval		EINVAL Invalid or missing argument
+ */
+errno_t pfe_log_if_loopback_disable(pfe_log_if_t *iface)
+{
+	errno_t ret = EOK;
+	pfe_platform_rpc_pfe_log_if_loopback_disable_arg_t req = {0};
+
+#if defined(PFE_CFG_NULL_ARG_CHECK)
+	if (unlikely(NULL == iface))
+	{
+		NXP_LOG_ERROR("NULL argument received\n");
+		return EINVAL;
+	}
+#endif /* PFE_CFG_NULL_ARG_CHECK */
+
+	req.log_if_id = iface->id;
+
+	(void)pfe_log_if_db_lock();
+
+	/*  Disable loopback mode */
+	ret = pfe_idex_master_rpc(PFE_PLATFORM_RPC_PFE_LOG_IF_LOOPBACK_DISABLE, &req, sizeof(req), NULL, 0U);
+	if (EOK != ret)
+	{
+		NXP_LOG_DEBUG("Can't disable loopback mode: %d\n", ret);
+	}
+
+	(void)pfe_log_if_db_unlock();
+
+	return ret;
+}
+
 /**
  * @brief		Enable ALLMULTI mode
  * @details		Function sets logical interface to ALLMULTI mode and
@@ -1171,7 +1227,7 @@ __attribute__((pure)) bool_t pfe_log_if_is_promisc(pfe_log_if_t *iface)
  * @retval		EOK Success
  * @retval		EINVAL Invalid or missing argument
  */
-errno_t pfe_log_if_allmulti_enable(pfe_log_if_t *iface)
+errno_t pfe_log_if_allmulti_enable(const pfe_log_if_t *iface)
 {
 	pfe_platform_rpc_pfe_log_if_allmulti_enable_arg_t req = {0};
 	errno_t ret;
@@ -1206,7 +1262,7 @@ errno_t pfe_log_if_allmulti_enable(pfe_log_if_t *iface)
  * @retval		EOK Success
  * @retval		EINVAL Invalid or missing argument
  */
-errno_t pfe_log_if_allmulti_disable(pfe_log_if_t *iface)
+errno_t pfe_log_if_allmulti_disable(const pfe_log_if_t *iface)
 {
 	pfe_platform_rpc_pfe_log_if_allmulti_disable_arg_t req = {0};
 	errno_t ret;
@@ -1240,7 +1296,7 @@ errno_t pfe_log_if_allmulti_disable(pfe_log_if_t *iface)
  * @param[in]	iface The interface instance
  * @return		Pointer to name string or NULL if failed/not found.
  */
-__attribute__((pure)) const char_t *pfe_log_if_get_name(pfe_log_if_t *iface)
+__attribute__((pure)) const char_t *pfe_log_if_get_name(const pfe_log_if_t *iface)
 {
 	static const char_t *unknown = "(unknown)";
 
@@ -1269,7 +1325,7 @@ __attribute__((pure)) const char_t *pfe_log_if_get_name(pfe_log_if_t *iface)
  * @retval		EOK Success
  * @retval		NOMEM Not possible to allocate memory for read
  */
-errno_t pfe_log_if_get_stats(pfe_log_if_t *iface, pfe_ct_class_algo_stats_t *stat)
+errno_t pfe_log_if_get_stats(const pfe_log_if_t *iface, pfe_ct_class_algo_stats_t *stat)
 {
 	errno_t ret = EOK;
 	pfe_platform_rpc_pfe_log_if_stats_arg_t arg = {0};
@@ -1309,7 +1365,7 @@ errno_t pfe_log_if_get_stats(pfe_log_if_t *iface, pfe_ct_class_algo_stats_t *sta
  * @param[in]	verb_level 	Verbosity level
  * @return		Number of bytes written to the buffer
  */
-uint32_t pfe_log_if_get_text_statistics(pfe_log_if_t *iface, char_t *buf, uint32_t buf_len, uint8_t verb_level)
+uint32_t pfe_log_if_get_text_statistics(const pfe_log_if_t *iface, char_t *buf, uint32_t buf_len, uint8_t verb_level)
 {
 	uint32_t len = 0U;
 
diff --git a/sw/pfe_platform/src/pfe_mac_db.c b/sw/pfe_platform/src/pfe_mac_db.c
new file mode 100644
index 0000000..00a973a
--- /dev/null
+++ b/sw/pfe_platform/src/pfe_mac_db.c
@@ -0,0 +1,451 @@
+/* =========================================================================
+ *  
+ *  Copyright (c) 2019 Imagination Technologies Limited
+ *  Copyright 2021 NXP
+ *
+ *  SPDX-License-Identifier: GPL-2.0
+ *
+ * ========================================================================= */
+#include "pfe_cfg.h"
+#include "oal.h"
+#include "hal.h"
+#include "pfe_mac_db.h"
+
+struct pfe_mac_db_tag
+{
+	LLIST_t mac_list;
+	LLIST_t *iterator;
+	oal_mutex_t lock;
+	struct {
+		pfe_mac_db_crit_t crit;
+		pfe_drv_id_t owner;
+		pfe_mac_type_t type;
+	} crit;
+};
+
+static bool_t pfe_mac_db_criterion_eval(const pfe_mac_db_list_entry_t *entry, pfe_mac_db_crit_t crit, pfe_mac_type_t type, pfe_drv_id_t owner);
+static pfe_mac_db_list_entry_t *pfe_mac_db_find_by_addr(const pfe_mac_db_t *db, const pfe_mac_addr_t addr);
+
+/**
+ * @brief		Evaluate given DB entry against specified criterion
+ * @param[in]	entry DB entry to evaluate
+ * @param[in]	crit All, Owner, Type or Owner&Type criterion
+ * @param[in]	type Required type of MAC address (Broadcast, Multicast, Unicast, ANY) criterion
+ * @param[in]	owner Required owner of MAC address
+ * @return		TRUE if entry does match with criterion, FALSE otherwise
+ */
+static bool_t pfe_mac_db_criterion_eval(const pfe_mac_db_list_entry_t *entry, pfe_mac_db_crit_t crit, pfe_mac_type_t type, pfe_drv_id_t owner)
+{
+	bool_t ret = FALSE;
+
+#if defined(PFE_CFG_NULL_ARG_CHECK)
+	if (unlikely(NULL == entry))
+	{
+		NXP_LOG_ERROR("NULL argument received\n");
+		return FALSE;
+	}
+#endif /* PFE_CFG_NULL_ARG_CHECK */
+
+	if (crit == MAC_DB_CRIT_BY_OWNER)
+	{
+		/* Return the first address where owner match */
+		if (entry->owner == owner)
+		{
+			/* Break if entry match with the rule */
+			ret = TRUE;
+		}
+	}
+	else if (crit == MAC_DB_CRIT_BY_TYPE)
+	{
+		/* Break if entry match with the rule */
+		ret = pfe_emac_check_crit_by_type(entry->addr, type);
+	}
+	else if (crit == MAC_DB_CRIT_BY_OWNER_AND_TYPE)
+	{
+		if (entry->owner == owner)
+		{
+			/* Break if entry match with the rule */
+			ret = pfe_emac_check_crit_by_type(entry->addr, type);
+		}
+	}
+	else if (crit == MAC_DB_CRIT_ALL)
+	{
+		/* Break if entry match with the rule */
+		ret = TRUE;
+	}
+	else
+	{
+		NXP_LOG_WARNING("Unknown criterion\n");
+	}
+
+	return ret;
+}
+
+/**
+ * @brief		Create instance of MAC database
+ * @return		Pointer to database instance
+ */
+pfe_mac_db_t *pfe_mac_db_create(void)
+{
+	pfe_mac_db_t *db;
+
+	db = oal_mm_malloc(sizeof(pfe_mac_db_t));
+	if (NULL == db)
+	{
+		return NULL;
+	}
+	else
+	{
+		(void)memset(db, 0, sizeof(pfe_mac_db_t));
+		LLIST_Init(&db->mac_list);
+		db->iterator = &db->mac_list;
+		db->crit.crit = MAC_DB_CRIT_INVALID;
+
+		if (EOK != oal_mutex_init(&db->lock))
+		{
+			NXP_LOG_ERROR("Could not initialize mutex\n");
+			oal_mm_free(db);
+			db = NULL;
+		}
+	}
+	return db;
+}
+
+/**
+ * @brief		Destroy instance of MAC database
+ * @param[in]	db Pointer to MAC database instance
+ * @return		Execution status, EOK if success, error code otherwise
+ */
+errno_t pfe_mac_db_destroy(pfe_mac_db_t *db)
+{
+	errno_t ret  = EOK;
+	LLIST_t *item, *aux;
+	pfe_mac_db_list_entry_t *entry;
+
+	if (NULL != db)
+	{
+		if (EOK != oal_mutex_lock(&db->lock))
+		{
+			NXP_LOG_DEBUG("mutex lock failed\n");
+		}
+
+		LLIST_ForEachRemovable(item, aux, &db->mac_list)
+		{
+			entry = LLIST_Data(item, pfe_mac_db_list_entry_t, iterator);
+			if (NULL != entry)
+			{
+				LLIST_Remove(&entry->iterator);
+				oal_mm_free(entry);
+				entry = NULL;
+			}
+		}
+
+		if (EOK != oal_mutex_unlock(&db->lock))
+		{
+			NXP_LOG_DEBUG("mutex unlock failed\n");
+		}
+
+		if (EOK != oal_mutex_destroy(&db->lock))
+		{
+			NXP_LOG_DEBUG("Could not destroy mutex\n");
+		}
+
+		oal_mm_free(db);
+	}
+
+	return ret;
+}
+
+/**
+ * @brief		Search for specific MAC address in the database and return pointer on related entry
+ * @param[in]	db Pointer to MAC database instance
+ * @param[in]	addr MAC address to search for
+ * @return		Pointer to related entry, NULL if address not found
+ */
+static pfe_mac_db_list_entry_t *pfe_mac_db_find_by_addr(const pfe_mac_db_t *db, const pfe_mac_addr_t addr)
+{
+	pfe_mac_db_list_entry_t *entry = NULL;
+	LLIST_t *item;
+	bool_t found = FALSE;
+
+	LLIST_ForEach(item, &db->mac_list)
+	{
+		entry = LLIST_Data(item, pfe_mac_db_list_entry_t, iterator);
+		if (0 == memcmp(addr, entry->addr, sizeof(pfe_mac_addr_t)))
+		{
+			found = TRUE;
+			break;
+		}
+	}
+
+	if(found == FALSE)
+	{
+		entry = NULL;
+	}
+
+	return entry;
+}
+
+/**
+ * @brief			Add new MAC address into database
+ * @param[in]		db Pointer to MAC database instance
+ * @param[in]		addr The MAC address to add
+ * @param[in]		owner The identification of driver instance
+ * @return			Execution status, EOK if success, error code otherwise
+ */
+errno_t pfe_mac_db_add_addr(pfe_mac_db_t *db, const pfe_mac_addr_t addr, pfe_drv_id_t owner)
+{
+	errno_t ret = EOK;
+	pfe_mac_db_list_entry_t *entry;
+
+	if (EOK != oal_mutex_lock(&db->lock))
+	{
+		NXP_LOG_DEBUG("mutex lock failed\n");
+	}
+
+	/* Add only if the same address does not already exist in DB */
+	entry = pfe_mac_db_find_by_addr(db, addr);
+	if (NULL == entry)
+	{
+		/*	Add address to local list */
+		entry = oal_mm_malloc(sizeof(pfe_mac_db_list_entry_t));
+		if (NULL == entry)
+		{
+			NXP_LOG_WARNING("Memory allocation failed\n");
+			ret = ENOMEM;
+		}
+		else
+		{
+			(void)memcpy(entry->addr, addr, sizeof(pfe_mac_addr_t));
+			entry->owner = owner;
+			LLIST_AddAtEnd(&entry->iterator, &db->mac_list);
+
+			/*
+			 * Move database iterator pointer to new item to handle situation when new entry
+			 * was added at the end of the list, while pfe_mac_get_next_addr() reached end of the list
+			 * and db->iterator is pointing at the start of the list again and loop would end in normal
+			 * circumstances.
+			 */
+			if (db->iterator == &db->mac_list)
+			{
+				db->iterator = db->mac_list.prPrev;
+			}
+			ret = EOK;
+		}
+	}
+	else
+	{
+		ret = ENOEXEC;
+	}
+
+	if (EOK != oal_mutex_unlock(&db->lock))
+	{
+		NXP_LOG_DEBUG("mutex unlock failed\n");
+	}
+
+	return ret;
+}
+
+/**
+ * @brief			Delete new address from database
+ * @param[in]		db Pointer to MAC database instance
+ * @param[in]		addr The MAC address to delete from database
+ * @return			Execution status, EOK if success, error code otherwise
+ */
+errno_t pfe_mac_db_del_addr(pfe_mac_db_t *db, const pfe_mac_addr_t addr)
+{
+	errno_t ret = EOK;
+	pfe_mac_db_list_entry_t *entry;
+
+	if (EOK != oal_mutex_lock(&db->lock))
+	{
+		NXP_LOG_DEBUG("mutex lock failed\n");
+	}
+
+	entry = pfe_mac_db_find_by_addr(db, addr);
+	if (NULL == entry)
+	{
+		NXP_LOG_DEBUG("MAC address was not found\n");
+		ret = ENOENT;
+	}
+	else
+	{
+		/*
+		 * Move database iterator pointer to next item to handle situation when item proposed to delete
+		 * is matching with item pointed by db->iterator. This could happen for example if there is request
+		 * to delete more than one entry between pfe_mac_get_first_addr() and pfe_mac_get_next_addr() or
+		 * between two consecutive calls of pfe_mac_get_next_addr().
+		 */
+		if(&entry->iterator == db->iterator)
+		{
+			db->iterator = db->iterator->prNext;
+		}
+
+		LLIST_Remove(&entry->iterator);
+		oal_mm_free(entry);
+		entry = NULL;
+	}
+
+	if (EOK != oal_mutex_unlock(&db->lock))
+	{
+		NXP_LOG_DEBUG("mutex unlock failed\n");
+	}
+
+	return ret;
+}
+
+/**
+ * @brief		Flush all addresses matching with input rule
+ * @param[in]	db Pointer to MAC database instance
+ * @param[in]	crit All, Owner, Type or Owner&Type criterion
+ * @param[in]	type Required type of MAC address (Broadcast, Multicast, Unicast, ANY) criterion
+ * @param[in]	owner Required owner of MAC address
+ * @return		EOK success, error code otherwise
+ */
+errno_t pfe_mac_db_flush(pfe_mac_db_t *db, pfe_mac_db_crit_t crit, pfe_mac_type_t type, pfe_drv_id_t owner)
+{
+	errno_t ret = EOK;
+	LLIST_t *item, *aux;
+	pfe_mac_db_list_entry_t *entry;
+
+	if (EOK != oal_mutex_lock(&db->lock))
+	{
+		NXP_LOG_DEBUG("mutex lock failed\n");
+
+	}
+	/*	Remove associated MAC addresses due to flush mode */
+	LLIST_ForEachRemovable(item, aux, &db->mac_list)
+	{
+		entry = LLIST_Data(item, pfe_mac_db_list_entry_t, iterator);
+		if (NULL != entry)
+		{
+			if (TRUE == pfe_mac_db_criterion_eval(entry, crit, type, owner))
+			{
+				LLIST_Remove(&entry->iterator);
+				oal_mm_free(entry);
+				entry = NULL;
+			}
+		}
+	}
+
+	if (EOK != oal_mutex_unlock(&db->lock))
+	{
+		NXP_LOG_DEBUG("mutex unlock failed\n");
+	}
+
+	return ret;
+}
+
+/**
+ * @brief		Get first MAC address from database matching by input rule. Function stores database context
+ * 				for following call of pfe_mac_get_next_addr(). Function should not be called internally
+ * 				inside this module
+ * @param[in]	db Pointer to MAC database instance
+ * @param[in]	crit All, Owner, Type or Owner&Type criterion
+ * @param[in]	type Required type of MAC address (Broadcast, Multicast, Unicast, ANY) criterion
+ * @param[in]	owner Required owner of MAC address
+ * @param[out]	addr Returned MAC address
+ * @return		Execution status, EOK success, error code otherwise
+ */
+errno_t pfe_mac_db_get_first_addr(pfe_mac_db_t *db, pfe_mac_db_crit_t crit, pfe_mac_type_t type, pfe_drv_id_t owner, pfe_mac_addr_t addr)
+{
+	errno_t ret = EOK;
+	const pfe_mac_db_list_entry_t *entry = NULL;
+	LLIST_t *item;
+
+	if (EOK != oal_mutex_lock(&db->lock))
+	{
+		NXP_LOG_DEBUG("mutex lock failed\n");
+	}
+
+	if (TRUE == LLIST_IsEmpty(&db->mac_list))
+	{
+		ret = ENOENT;
+	}
+	else
+	{
+		LLIST_ForEach(item, &db->mac_list)
+		{
+			entry = LLIST_Data(item, pfe_mac_db_list_entry_t, iterator);
+			if ((NULL != entry))
+			{
+				if (TRUE == pfe_mac_db_criterion_eval(entry, crit, type, owner))
+				{
+					break;
+				}
+			}
+		}
+	}
+
+	if (NULL != entry) {
+		(void) memcpy(addr, entry->addr, sizeof(pfe_mac_addr_t));
+		db->iterator = item->prNext;
+		db->crit.crit = crit;
+		db->crit.owner = owner;
+		db->crit.type = type;
+	}
+	else
+	{
+		ret = ENOENT;
+	}
+
+	if (EOK != oal_mutex_unlock(&db->lock))
+	{
+		NXP_LOG_DEBUG("mutex unlock failed\n");
+	}
+
+	return ret;
+}
+
+/**
+ * @brief		Get next MAC address from database. Function expect that pfe_mac_get_first_addr() was
+ * 				executed before and stores database context. Function should not be called internally
+ * 				inside this module
+ * @param[in]	db Pointer to MAC database instance
+ * @param[out]	addr Returned MAC address
+ * @return		Execution status, EOK success, error code otherwise
+ */
+errno_t pfe_mac_db_get_next_addr(pfe_mac_db_t *db, pfe_mac_addr_t addr)
+{
+	errno_t ret = EOK;
+	const pfe_mac_db_list_entry_t *entry = NULL;
+	LLIST_t *item;
+
+	if (EOK != oal_mutex_lock(&db->lock))
+	{
+		NXP_LOG_DEBUG("mutex lock failed\n");
+	}
+
+	item = db->iterator;
+
+	while(db->iterator != &db->mac_list)
+	{
+		entry = LLIST_Data(item, pfe_mac_db_list_entry_t, iterator);
+		if ((NULL != entry))
+		{
+			if (TRUE == pfe_mac_db_criterion_eval(entry, db->crit.crit, db->crit.type, db->crit.owner))
+			{
+				break;
+			}
+		}
+		db->iterator = db->iterator->prNext;
+	}
+
+	if (NULL != entry) {
+		(void) memcpy(addr, entry->addr, sizeof(pfe_mac_addr_t));
+		db->iterator = item->prNext;
+	}
+	else
+	{
+		ret = ENOENT;
+		db->iterator = &db->mac_list;
+	}
+
+	if (EOK != oal_mutex_unlock(&db->lock))
+	{
+		NXP_LOG_DEBUG("mutex unlock failed\n");
+	}
+
+	return ret;
+}
+
diff --git a/sw/pfe_platform/src/pfe_pe.c b/sw/pfe_platform/src/pfe_pe.c
index 7152cac..e67d138 100644
--- a/sw/pfe_platform/src/pfe_pe.c
+++ b/sw/pfe_platform/src/pfe_pe.c
@@ -18,18 +18,17 @@
 #include "pfe_pe.h"
 
 #define BYTES_TO_4B_ALIGNMENT(x)	(4U - ((x) & 0x3U))
-#define INVALID_FEATURES_BASE 0xFFFFFFFF
+#define INVALID_FEATURES_BASE 		0xFFFFFFFFU
 /**
  * @brief	Mutex protecting access to common mem_access_* registers
  */
 static oal_mutex_t mem_access_lock;
-static bool_t mem_access_lock_init = FALSE;
 
 /*	Processing Engine representation */
 struct pfe_pe_tag
 {
 	pfe_ct_pe_type_t type;				/* PE type */
-	void *cbus_base_va;					/* CBUS base (virtual) */
+	addr_t cbus_base_va;					/* CBUS base (virtual) */
 	uint8_t id;							/* PE HW ID (0..N) */
 
 	/*	DMEM */
@@ -45,14 +44,14 @@ struct pfe_pe_tag
 	addr_t lmem_size;					/* PE's LMEM size */
 
 	/*	DDR */
-	void *ddr_base_addr_pa;				/* PE's DDR base address (physical, as seen by host) */
-	void *ddr_base_addr_va;				/* PE's DDR base address (virtual) */
+	addr_t ddr_base_addr_pa;				/* PE's DDR base address (physical, as seen by host) */
+	addr_t ddr_base_addr_va;				/* PE's DDR base address (virtual) */
 	addr_t ddr_size;					/* PE's DDR size */
 
 	/*	Indirect Access */
-	void *mem_access_wdata;				/* PE's _MEM_ACCESS_WDATA register address (virtual) */
-	void *mem_access_addr;				/* PE's _MEM_ACCESS_ADDR register address (virtual) */
-	void *mem_access_rdata;				/* PE's _MEM_ACCESS_RDATA register address (virtual) */
+	addr_t mem_access_wdata;				/* PE's _MEM_ACCESS_WDATA register address (virtual) */
+	addr_t mem_access_addr;				/* PE's _MEM_ACCESS_ADDR register address (virtual) */
+	addr_t mem_access_rdata;				/* PE's _MEM_ACCESS_RDATA register address (virtual) */
 
 	/* FW Errors*/
 	uint32_t error_record_addr;			/* Error record storage address in DMEM */
@@ -77,9 +76,9 @@ typedef enum
 	PFE_PE_IMEM
 } pfe_pe_mem_t;
 
-static void pfe_pe_memcpy_from_host_to_imem_32_nolock(pfe_pe_t *pe, addr_t dst, const void *src, uint32_t len);
+static void pfe_pe_memcpy_from_host_to_imem_32_nolock(pfe_pe_t *pe, addr_t dst_addr, const void *src_ptr, uint32_t len);
 static bool_t pfe_pe_is_active(pfe_pe_t *pe);
-static void pfe_pe_memcpy_from_imem_to_host_32_nolock(pfe_pe_t *pe, void *dst, addr_t src, uint32_t len);
+static void pfe_pe_memcpy_from_imem_to_host_32_nolock(pfe_pe_t *pe, void *dst_ptr, addr_t src_addr, uint32_t len);
 static void pfe_pe_mem_memset_nolock(pfe_pe_t *pe, pfe_pe_mem_t mem, uint8_t val, addr_t addr, uint32_t len);
 static errno_t pfe_pe_set_number(pfe_pe_t *pe);
 
@@ -543,17 +542,17 @@ void pfe_pe_imem_memset(pfe_pe_t *pe, uint8_t val, addr_t addr, uint32_t len)
  * @brief		Write 'len' bytes to DMEM
  * @note		Function expects the source data to be in host endian format.
  * @param[in]	pe The PE instance
- * @param[in]	src Buffer source address (virtual)
- * @param[in]	dst DMEM destination address (must be 32-bit aligned)
+ * @param[in]	src_ptr Buffer source address (virtual)
+ * @param[in]	dst_addr DMEM destination address (must be 32-bit aligned)
  * @param[in]	len Number of bytes to read
  */
-void pfe_pe_memcpy_from_host_to_dmem_32_nolock(pfe_pe_t *pe, addr_t dst, const void *src, uint32_t len)
+void pfe_pe_memcpy_from_host_to_dmem_32_nolock(pfe_pe_t *pe, addr_t dst_addr, const void *src_ptr, uint32_t len)
 {
 	uint32_t val;
 	uint32_t offset;
 	/* Avoid void pointer arithmetics */
-	const uint8_t *src_byteptr = src;
-	addr_t dst_temp = dst;
+	const uint8_t *src_byteptr = src_ptr;
+	addr_t dst_temp = dst_addr;
 	uint32_t len_temp = len;
 
 #if defined(PFE_CFG_NULL_ARG_CHECK)
@@ -572,7 +571,7 @@ void pfe_pe_memcpy_from_host_to_dmem_32_nolock(pfe_pe_t *pe, addr_t dst, const v
 		val = *(uint32_t *)src_byteptr;
 		pfe_pe_mem_write(pe, PFE_PE_DMEM, val, dst_temp, (uint8_t)offset);
 		src_byteptr += offset;
-		dst_temp = dst + offset;
+		dst_temp = dst_addr + offset;
 		len_temp = (len >= offset) ? (len - offset) : 0U;
 	}
 
@@ -598,11 +597,11 @@ void pfe_pe_memcpy_from_host_to_dmem_32_nolock(pfe_pe_t *pe, addr_t dst, const v
  * @brief		Write 'len' bytes to DMEM
  * @note		Function expects the source data to be in host endian format.
  * @param[in]	pe The PE instance
- * @param[in]	src Buffer source address (virtual)
- * @param[in]	dst DMEM destination address (must be 32-bit aligned)
+ * @param[in]	src_ptr Buffer source address (virtual)
+ * @param[in]	dst_addr DMEM destination address (must be 32-bit aligned)
  * @param[in]	len Number of bytes to read
  */
-void pfe_pe_memcpy_from_host_to_dmem_32(pfe_pe_t *pe, addr_t dst, const void *src, uint32_t len)
+void pfe_pe_memcpy_from_host_to_dmem_32(pfe_pe_t *pe, addr_t dst_addr, const void *src_ptr, uint32_t len)
 {
 	if (EOK != pfe_pe_mem_lock(pe))
 	{
@@ -610,7 +609,7 @@ void pfe_pe_memcpy_from_host_to_dmem_32(pfe_pe_t *pe, addr_t dst, const void *sr
 		return;
 	}
 
-	pfe_pe_memcpy_from_host_to_dmem_32_nolock(pe, dst, src, len);
+	pfe_pe_memcpy_from_host_to_dmem_32_nolock(pe, dst_addr, src_ptr, len);
 
 	if (EOK != pfe_pe_mem_unlock(pe))
 	{
@@ -621,18 +620,18 @@ void pfe_pe_memcpy_from_host_to_dmem_32(pfe_pe_t *pe, addr_t dst, const void *sr
 /**
  * @brief		Read 'len' bytes from DMEM
  * @param[in]	pe The PE instance
- * @param[in]	src DMEM source address (must be 32-bit aligned)
- * @param[in]	dst Destination address (virtual)
+ * @param[in]	src_addr DMEM source address (must be 32-bit aligned)
+ * @param[in]	dst_ptr Destination address (virtual)
  * @param[in]	len Number of bytes to read
  *
  */
-void pfe_pe_memcpy_from_dmem_to_host_32_nolock(pfe_pe_t *pe, void *dst, addr_t src, uint32_t len)
+void pfe_pe_memcpy_from_dmem_to_host_32_nolock(pfe_pe_t *pe, void *dst_ptr, addr_t src_addr, uint32_t len)
 {
 	uint32_t val;
 	uint32_t offset;
 	/* Avoid void pointer arithmetics */
-	uint8_t *dst_byteptr = dst;
-	addr_t src_temp = src;
+	uint8_t *dst_byteptr = dst_ptr;
+	addr_t src_temp = src_addr;
 	uint32_t len_temp = len;
 
 #if defined(PFE_CFG_NULL_ARG_CHECK)
@@ -651,7 +650,7 @@ void pfe_pe_memcpy_from_dmem_to_host_32_nolock(pfe_pe_t *pe, void *dst, addr_t s
 		val = pfe_pe_mem_read(pe, PFE_PE_DMEM, (uint32_t)src_temp, (uint8_t)offset);
 		(void)memcpy((void*)dst_byteptr, (const void*)&val, offset);
 		dst_byteptr += offset;
-		src_temp = src + offset;
+		src_temp = src_addr + offset;
 		len_temp = (len >= offset) ? (len - offset) : 0U;
 	}
 
@@ -676,12 +675,12 @@ void pfe_pe_memcpy_from_dmem_to_host_32_nolock(pfe_pe_t *pe, void *dst, addr_t s
 /**
  * @brief		Read 'len' bytes from DMEM
  * @param[in]	pe The PE instance
- * @param[in]	src DMEM source address (must be 32-bit aligned)
- * @param[in]	dst Destination address (virtual)
+ * @param[in]	src_addr DMEM source address (must be 32-bit aligned)
+ * @param[in]	dst_ptr Destination address (virtual)
  * @param[in]	len Number of bytes to read
  *
  */
-void pfe_pe_memcpy_from_dmem_to_host_32(pfe_pe_t *pe, void *dst, addr_t src, uint32_t len)
+void pfe_pe_memcpy_from_dmem_to_host_32(pfe_pe_t *pe, void *dst_ptr, addr_t src_addr, uint32_t len)
 {
 	if (EOK != pfe_pe_mem_lock(pe))
 	{
@@ -689,7 +688,7 @@ void pfe_pe_memcpy_from_dmem_to_host_32(pfe_pe_t *pe, void *dst, addr_t src, uin
 		return;
 	}
 
-	pfe_pe_memcpy_from_dmem_to_host_32_nolock(pe, dst, src, len);
+	pfe_pe_memcpy_from_dmem_to_host_32_nolock(pe, dst_ptr, src_addr, len);
 
 	if (EOK != pfe_pe_mem_unlock(pe))
 	{
@@ -703,13 +702,13 @@ void pfe_pe_memcpy_from_dmem_to_host_32(pfe_pe_t *pe, void *dst, addr_t src, uin
  *				access registers. The result from each PE are stored consecutively in memory
  *				pointed by dst.
  * @param[in]	pe Array of the PE instances
- * @param[in]	src DMEM source address (physical within PE, must be 32bit aligned)
- * @param[in]	dst Destination address (virtual) the size required to store the data is pe_count*len
+ * @param[in]	src_addr DMEM source address (physical within PE, must be 32bit aligned)
+ * @param[in]	dst_ptr Destination address (virtual) the size required to store the data is pe_count*len
  * @param[in]	buffer_len Destination buffer length
  * @param[in]	read_len Number of bytes to read (from one PE)
  *
  */
-errno_t pfe_pe_gather_memcpy_from_dmem_to_host_32(pfe_pe_t **pe, int32_t pe_count, void *dst, addr_t src, uint32_t buffer_len, uint32_t read_len)
+errno_t pfe_pe_gather_memcpy_from_dmem_to_host_32(pfe_pe_t **pe, int32_t pe_count, void *dst_ptr, addr_t src_addr, uint32_t buffer_len, uint32_t read_len)
 {
 	int32_t ii = 0U;
 	errno_t ret = EOK;
@@ -737,7 +736,7 @@ errno_t pfe_pe_gather_memcpy_from_dmem_to_host_32(pfe_pe_t **pe, int32_t pe_coun
 		/* Check if there is still memory  */
 		if(buffer_len >= ((read_len * (uint32_t)ii) + read_len))
 		{
-			pfe_pe_memcpy_from_dmem_to_host_32_nolock(pe[ii], (void *)((uint8_t*)dst + (read_len * (uint32_t)ii)), src, read_len);
+			pfe_pe_memcpy_from_dmem_to_host_32_nolock(pe[ii], (void *)((uint8_t*)dst_ptr + (read_len * (uint32_t)ii)), src_addr, read_len);
 		}
 		else
 		{
@@ -769,17 +768,17 @@ errno_t pfe_pe_gather_memcpy_from_dmem_to_host_32(pfe_pe_t **pe, int32_t pe_coun
  * @brief		Write 'len'bytes to IMEM
  * @note		Function expects the source data to be in host endian format.
  * @param[in]	pe The PE instance
- * @param[in]	src Buffer source address (host, virtual)
- * @param[in]	dst IMEM destination address (must be 32-bit aligned)
+ * @param[in]	src_ptr Buffer source address (host, virtual)
+ * @param[in]	dst_addr IMEM destination address (must be 32-bit aligned)
  * @param[in]	len Number of bytes to copy
  */
-static void pfe_pe_memcpy_from_host_to_imem_32_nolock(pfe_pe_t *pe, addr_t dst, const void *src, uint32_t len)
+static void pfe_pe_memcpy_from_host_to_imem_32_nolock(pfe_pe_t *pe, addr_t dst_addr, const void *src_ptr, uint32_t len)
 {
 	uint32_t val;
 	uint32_t offset;
-	addr_t dst_temp = dst;
+	addr_t dst_temp = dst_addr;
 	/* Avoid void pointer arithmetics */
-	const uint8_t *src_byteptr = src;
+	const uint8_t *src_byteptr = src_ptr;
 	uint32_t len_temp = len;
 
 #if defined(PFE_CFG_NULL_ARG_CHECK)
@@ -798,7 +797,7 @@ static void pfe_pe_memcpy_from_host_to_imem_32_nolock(pfe_pe_t *pe, addr_t dst,
 		val = *(uint32_t *)src_byteptr;
 		pfe_pe_mem_write(pe, PFE_PE_IMEM, val, dst_temp, (uint8_t)offset);
 		src_byteptr += offset;
-		dst_temp = dst + offset;
+		dst_temp = dst_addr + offset;
 		len_temp = (len >= offset) ? (len - offset) : 0U;
 	}
 
@@ -824,11 +823,11 @@ static void pfe_pe_memcpy_from_host_to_imem_32_nolock(pfe_pe_t *pe, addr_t dst,
  * @brief		Write 'len'bytes to IMEM
  * @note		Function expects the source data to be in host endian format.
  * @param[in]	pe The PE instance
- * @param[in]	src Buffer source address (host, virtual)
- * @param[in]	dst IMEM destination address (must be 32-bit aligned)
+ * @param[in]	src_ptr Buffer source address (host, virtual)
+ * @param[in]	dst_addr IMEM destination address (must be 32-bit aligned)
  * @param[in]	len Number of bytes to copy
  */
-void pfe_pe_memcpy_from_host_to_imem_32(pfe_pe_t *pe, addr_t dst, const void *src, uint32_t len)
+void pfe_pe_memcpy_from_host_to_imem_32(pfe_pe_t *pe, addr_t dst_addr, const void *src_ptr, uint32_t len)
 {
 	if (EOK != pfe_pe_mem_lock(pe))
 	{
@@ -836,7 +835,7 @@ void pfe_pe_memcpy_from_host_to_imem_32(pfe_pe_t *pe, addr_t dst, const void *sr
 		return;
 	}
 
-	pfe_pe_memcpy_from_host_to_imem_32_nolock(pe, dst, src, len);
+	pfe_pe_memcpy_from_host_to_imem_32_nolock(pe, dst_addr, src_ptr, len);
 
 	if (EOK != pfe_pe_mem_unlock(pe))
 	{
@@ -847,18 +846,18 @@ void pfe_pe_memcpy_from_host_to_imem_32(pfe_pe_t *pe, addr_t dst, const void *sr
 /**
  * @brief		Read 'len' bytes from IMEM
  * @param[in]	pe The PE instance
- * @param[in]	src IMEM source address (physical within PE, must be 32-bit aligned)
- * @param[in]	dst Destination address (host, virtual)
+ * @param[in]	src_addr IMEM source address (physical within PE, must be 32-bit aligned)
+ * @param[in]	dst_ptr Destination address (host, virtual)
  * @param[in]	len Number of bytes to read
  *
  */
-static void pfe_pe_memcpy_from_imem_to_host_32_nolock(pfe_pe_t *pe, void *dst, addr_t src, uint32_t len)
+static void pfe_pe_memcpy_from_imem_to_host_32_nolock(pfe_pe_t *pe, void *dst_ptr, addr_t src_addr, uint32_t len)
 {
 	uint32_t val;
 	uint32_t offset;
 	/* Avoid void pointer arithmetics */
-	uint8_t *dst_byteptr = dst;
-	addr_t src_temp = src;
+	uint8_t *dst_byteptr = dst_ptr;
+	addr_t src_temp = src_addr;
 	uint32_t len_temp = len;
 
 #if defined(PFE_CFG_NULL_ARG_CHECK)
@@ -877,7 +876,7 @@ static void pfe_pe_memcpy_from_imem_to_host_32_nolock(pfe_pe_t *pe, void *dst, a
 		val = pfe_pe_mem_read(pe, PFE_PE_IMEM, (uint32_t)src_temp, (uint8_t)offset);
 		(void)memcpy((void*)dst_byteptr, (const void*)&val, offset);
 		dst_byteptr += offset;
-		src_temp = src + offset;
+		src_temp = src_addr + offset;
 		len_temp = (len >= offset) ? (len - offset) : 0U;
 	}
 
@@ -902,12 +901,12 @@ static void pfe_pe_memcpy_from_imem_to_host_32_nolock(pfe_pe_t *pe, void *dst, a
 /**
  * @brief		Read 'len' bytes from IMEM
  * @param[in]	pe The PE instance
- * @param[in]	src IMEM source address (physical within PE, must be 32-bit aligned)
- * @param[in]	dst Destination address (host, virtual)
+ * @param[in]	src_addr IMEM source address (physical within PE, must be 32-bit aligned)
+ * @param[in]	dst_ptr Destination address (host, virtual)
  * @param[in]	len Number of bytes to read
  *
  */
-void pfe_pe_memcpy_from_imem_to_host_32(pfe_pe_t *pe, void *dst, addr_t src, uint32_t len)
+void pfe_pe_memcpy_from_imem_to_host_32(pfe_pe_t *pe, void *dst_ptr, addr_t src_addr, uint32_t len)
 {
 	if (EOK != pfe_pe_mem_lock(pe))
 	{
@@ -915,7 +914,7 @@ void pfe_pe_memcpy_from_imem_to_host_32(pfe_pe_t *pe, void *dst, addr_t src, uin
 		return;
 	}
 
-	pfe_pe_memcpy_from_imem_to_host_32_nolock(pe, dst, src, len);
+	pfe_pe_memcpy_from_imem_to_host_32_nolock(pe, dst_ptr, src_addr, len);
 
 	if (EOK != pfe_pe_mem_unlock(pe))
 	{
@@ -934,7 +933,7 @@ void pfe_pe_memcpy_from_imem_to_host_32(pfe_pe_t *pe, void *dst, addr_t src, uin
  * @retval		EOK Success
  * @retval		EINVAL Unsupported section type or wrong input address alignment
  */
-static errno_t pfe_pe_load_dmem_section(pfe_pe_t *pe, void *sdata, addr_t addr, addr_t size, uint32_t type)
+static errno_t pfe_pe_load_dmem_section(pfe_pe_t *pe, const void *sdata, addr_t addr, addr_t size, uint32_t type)
 {
 	errno_t ret = EOK;
 
@@ -996,7 +995,7 @@ static errno_t pfe_pe_load_dmem_section(pfe_pe_t *pe, void *sdata, addr_t addr,
 
 		default:
 		{
-			NXP_LOG_ERROR("Unsupported section type: 0x%x\n", type);
+			NXP_LOG_ERROR("Unsupported section type: 0x%x\n", (uint_t)type);
 			ret = EINVAL;
 			break;
 		}
@@ -1081,7 +1080,7 @@ static errno_t pfe_pe_load_imem_section(pfe_pe_t *pe, const void *data, addr_t a
 
 		default:
 		{
-			NXP_LOG_ERROR("Unsupported section type: 0x%x\n", type);
+			NXP_LOG_ERROR("Unsupported section type: 0x%x\n", (uint_t)type);
 			ret = EINVAL;
 			break;
 		}
@@ -1097,7 +1096,7 @@ static errno_t pfe_pe_load_imem_section(pfe_pe_t *pe, const void *data, addr_t a
  * @param[in]	size Length of the region to be checked
  * @return		TRUE if given range belongs to DMEM
  */
-static bool_t pfe_pe_is_dmem(pfe_pe_t *pe, addr_t addr, uint32_t size)
+static bool_t pfe_pe_is_dmem(const pfe_pe_t *pe, addr_t addr, uint32_t size)
 {
 	addr_t reg_end;
 
@@ -1128,7 +1127,7 @@ static bool_t pfe_pe_is_dmem(pfe_pe_t *pe, addr_t addr, uint32_t size)
  * @param[in]	size Length of the region to be checked
  * @return		TRUE if given range belongs to IMEM
  */
-static bool_t pfe_pe_is_imem(pfe_pe_t *pe, addr_t addr, uint32_t size)
+static bool_t pfe_pe_is_imem(const pfe_pe_t *pe, addr_t addr, uint32_t size)
 {
 	addr_t reg_end;
 
@@ -1159,7 +1158,7 @@ static bool_t pfe_pe_is_imem(pfe_pe_t *pe, addr_t addr, uint32_t size)
  * @param[in]	size Length of the region to be checked
  * @return		TRUE if given range belongs to LMEM
  */
-static bool_t pfe_pe_is_lmem(pfe_pe_t *pe, addr_t addr, uint32_t size)
+static bool_t pfe_pe_is_lmem(const pfe_pe_t *pe, addr_t addr, uint32_t size)
 {
 	addr_t reg_end;
 
@@ -1192,7 +1191,7 @@ static bool_t pfe_pe_is_lmem(pfe_pe_t *pe, addr_t addr, uint32_t size)
  * @param[in]	size Size of the section to load
  * @param[in]	type Type of the section to load
  */
-static errno_t pfe_pe_load_elf_section(pfe_pe_t *pe, void *sdata, addr_t load_addr, addr_t size, uint32_t type)
+static errno_t pfe_pe_load_elf_section(pfe_pe_t *pe, const void *sdata, addr_t load_addr, addr_t size, uint32_t type)
 {
 	errno_t ret_val;
 #if defined(PFE_CFG_NULL_ARG_CHECK)
@@ -1239,12 +1238,12 @@ static errno_t pfe_pe_load_elf_section(pfe_pe_t *pe, void *sdata, addr_t load_ad
  *          load address are equal.
  * @return Load address of the given section or 0 on failure.
  */
-static addr_t pfe_pe_get_elf_sect_load_addr(ELF_File_t *elf_file, Elf32_Shdr *shdr)
+static addr_t pfe_pe_get_elf_sect_load_addr(const ELF_File_t *elf_file, const Elf32_Shdr *shdr)
 {
 	addr_t virt_addr = shdr->sh_addr;
 	addr_t load_addr;
 	addr_t offset;
-	Elf32_Phdr *phdr;
+	const Elf32_Phdr *phdr;
 	uint_t ii;
 
 	/* Go through all program headers to find one containing the section */
@@ -1274,12 +1273,13 @@ static addr_t pfe_pe_get_elf_sect_load_addr(ELF_File_t *elf_file, Elf32_Shdr *sh
  * @param[in]	id PE ID
  * @return		The PE instance or NULL if failed
  */
-pfe_pe_t * pfe_pe_create(void *cbus_base_va, pfe_ct_pe_type_t type, uint8_t id)
+pfe_pe_t * pfe_pe_create(addr_t cbus_base_va, pfe_ct_pe_type_t type, uint8_t id)
 {
+	static bool_t mem_access_lock_init = FALSE;
 	pfe_pe_t *pe = NULL;
 
 #if defined(PFE_CFG_NULL_ARG_CHECK)
-	if (unlikely(NULL == cbus_base_va))
+	if (unlikely(NULL_ADDR == cbus_base_va))
 	{
 		NXP_LOG_ERROR("NULL argument received\n");
 		return NULL;
@@ -1399,7 +1399,7 @@ void pfe_pe_set_lmem(pfe_pe_t *pe, addr_t elf_base, addr_t len)
  * @param[in]	base_va DDR base virtual address
  * @param[in]	len DDR region length
  */
-void pfe_pe_set_ddr(pfe_pe_t *pe, void *base_pa, void *base_va, addr_t len)
+void pfe_pe_set_ddr(pfe_pe_t *pe, addr_t base_pa, addr_t base_va, addr_t len)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == pe))
@@ -1431,9 +1431,9 @@ void pfe_pe_set_iaccess(pfe_pe_t *pe, uint32_t wdata_reg, uint32_t rdata_reg, ui
 	}
 #endif /* PFE_CFG_NULL_ARG_CHECK */
 
-	pe->mem_access_addr = (void *)((addr_t)pe->cbus_base_va + addr_reg);
-	pe->mem_access_rdata = (void *)((addr_t)pe->cbus_base_va + rdata_reg);
-	pe->mem_access_wdata = (void *)((addr_t)pe->cbus_base_va + wdata_reg);
+	pe->mem_access_addr = (pe->cbus_base_va + addr_reg);
+	pe->mem_access_rdata = (pe->cbus_base_va + rdata_reg);
+	pe->mem_access_wdata = (pe->cbus_base_va + wdata_reg);
 }
 
 /**
@@ -1441,7 +1441,7 @@ void pfe_pe_set_iaccess(pfe_pe_t *pe, uint32_t wdata_reg, uint32_t rdata_reg, ui
  * @param[in] pe The PE which ID shall be set in the FW
  * @return EOK if success, error code otherwise
  */
-errno_t pfe_pe_set_number(pfe_pe_t *pe)
+static errno_t pfe_pe_set_number(pfe_pe_t *pe)
 {
 	if(NULL == pe->mmap_data)
 	{
@@ -1454,7 +1454,7 @@ errno_t pfe_pe_set_number(pfe_pe_t *pe)
 	return EOK;
 }
 
-static void print_fw_issue(pfe_ct_pe_mmap_t *fw_mmap)
+static void print_fw_issue(const pfe_ct_pe_mmap_t *fw_mmap)
 {
 #ifdef NXP_LOG_ENABLED 
 	NXP_LOG_ERROR("Unsupported firmware detected: Found revision %d.%d.%d (fwAPI:%s), required fwAPI %s\n",
@@ -1478,8 +1478,9 @@ errno_t pfe_pe_load_firmware(pfe_pe_t *pe, const void *elf)
 	void *buf;
 	errno_t ret;
 	uint32_t section_idx;
-	ELF_File_t *elf_file = (ELF_File_t *)elf;
-	Elf32_Shdr *shdr = NULL;
+	uint32_t mask_sectIdx;
+	const ELF_File_t *elf_file = (ELF_File_t *)elf;
+	const Elf32_Shdr *shdr = NULL;
 	static pfe_ct_pe_mmap_t *tmp_mmap = NULL;
     uint32_t mmap_size;
 
@@ -1494,10 +1495,13 @@ errno_t pfe_pe_load_firmware(pfe_pe_t *pe, const void *elf)
 	/*	Attempt to get section containing firmware memory map data */
 	if (TRUE == ELF_SectFindName(elf_file, ".pfe_pe_mmap", &section_idx, NULL, NULL))
 	{
+		/* Mask out the flag to get section id */
+		mask_sectIdx = (~(ELF_NAMED_SECT_IDX_FLAG) & section_idx);
+
 		/*	Load section to RAM */
-		shdr = &elf_file->arSectHead32[section_idx];
+		shdr = &elf_file->arSectHead32[mask_sectIdx];
         /* Get the mmap size */
-        (void)memcpy((void*)&mmap_size, (const void*)(elf_file->pvData + shdr->sh_offset), sizeof(uint32_t));
+        (void)memcpy((void*)&mmap_size, (const void*)((addr_t)elf_file->pvData + shdr->sh_offset), sizeof(uint32_t));
         /* Convert mmap size endian ! */
         mmap_size = oal_ntohl(mmap_size);
         tmp_mmap = (pfe_ct_pe_mmap_t *)oal_mm_malloc(mmap_size);
@@ -1510,7 +1514,7 @@ errno_t pfe_pe_load_firmware(pfe_pe_t *pe, const void *elf)
 		{
 			/*  Firmware version check */
 			static const char_t mmap_version_str[] = TOSTRING(PFE_CFG_PFE_CT_H_MD5);
-			(void)memcpy((void*)tmp_mmap, (const void*)(elf_file->pvData + shdr->sh_offset), mmap_size);
+			(void)memcpy((void*)tmp_mmap, (const void*)((addr_t)elf_file->pvData + shdr->sh_offset), mmap_size);
 			if(0 != strcmp(mmap_version_str, tmp_mmap->common.version.cthdr))
 			{
 				ret = EINVAL;
@@ -1530,8 +1534,11 @@ errno_t pfe_pe_load_firmware(pfe_pe_t *pe, const void *elf)
 	/*	Attempt to get section containing firmware diagnostic data */
 	if (TRUE == ELF_SectFindName(elf_file, ".errors", &section_idx, NULL, NULL))
 	{
+		/* Mask out the flag to get section id */
+		mask_sectIdx = (~(ELF_NAMED_SECT_IDX_FLAG) & section_idx);
+
 		/*	Load section to RAM */
-		shdr = &elf_file->arSectHead32[section_idx];
+		shdr = &elf_file->arSectHead32[mask_sectIdx];
 		buf = oal_mm_malloc(shdr->sh_size);
 		if (NULL == buf)
 		{
@@ -1540,7 +1547,7 @@ errno_t pfe_pe_load_firmware(pfe_pe_t *pe, const void *elf)
 		}
 		else
 		{
-			(void)memcpy(buf, elf_file->pvData + shdr->sh_offset, shdr->sh_size);
+			(void)memcpy(buf, (const void *)((uint8_t *)elf_file->pvData + shdr->sh_offset), shdr->sh_size);
 			pe->fw_err_section_size = shdr->sh_size;
 			/*	Indicate that fw_err_section is available */
 			pe->fw_err_section = buf;
@@ -1555,8 +1562,11 @@ errno_t pfe_pe_load_firmware(pfe_pe_t *pe, const void *elf)
 	/*	Attempt to get section containing firmware supported features */
 	if (TRUE == ELF_SectFindName(elf_file, ".features", &section_idx, NULL, NULL))
 	{
+		/* Mask out the flag to get section id */
+		mask_sectIdx = (~(ELF_NAMED_SECT_IDX_FLAG) & section_idx);
+
 		/*	Load section to RAM */
-		shdr = &elf_file->arSectHead32[section_idx];
+		shdr = &elf_file->arSectHead32[mask_sectIdx];
 		buf = oal_mm_malloc(shdr->sh_size);
 		if (NULL == buf)
 		{
@@ -1565,7 +1575,7 @@ errno_t pfe_pe_load_firmware(pfe_pe_t *pe, const void *elf)
 		}
 		else
 		{
-			memcpy(buf, elf_file->pvData + shdr->sh_offset, shdr->sh_size);
+			(void)memcpy(buf, (const void *)((addr_t)elf_file->pvData + shdr->sh_offset), shdr->sh_size);
 			pe->fw_feature_section_size = shdr->sh_size;
 			/*	Indicate that fw_feature_section is available */
 			pe->fw_feature_section = buf;
@@ -1594,7 +1604,7 @@ errno_t pfe_pe_load_firmware(pfe_pe_t *pe, const void *elf)
 			continue;
 		}
 
-		buf = elf_file->pvData + elf_file->arSectHead32[ii].sh_offset;
+		buf = (void*)((addr_t)elf_file->pvData + elf_file->arSectHead32[ii].sh_offset);
 		/* Translate elf virtual address to load address */
 		load_addr = pfe_pe_get_elf_sect_load_addr(elf_file, &elf_file->arSectHead32[ii]);
 		if(0U == load_addr)
@@ -1607,10 +1617,10 @@ errno_t pfe_pe_load_firmware(pfe_pe_t *pe, const void *elf)
 		ret = pfe_pe_load_elf_section(pe, buf, load_addr, elf_file->arSectHead32[ii].sh_size, elf_file->arSectHead32[ii].sh_type);
 		if (EOK != ret)
 		{
-			NXP_LOG_ERROR("Couldn't upload firmware section %s, %d bytes @ 0x%08x. Reason: %d\n",
+			NXP_LOG_ERROR("Couldn't upload firmware section %s, %u bytes @ 0x%08x. Reason: %d\n",
 							elf_file->acSectNames+elf_file->arSectHead32[ii].sh_name,
-							elf_file->arSectHead32[ii].sh_size,
-							elf_file->arSectHead32[ii].sh_addr, ret);
+							(uint_t)elf_file->arSectHead32[ii].sh_size,
+							(uint_t)elf_file->arSectHead32[ii].sh_addr, ret);
 			goto free_and_fail;
 		}
 	}
@@ -1655,7 +1665,7 @@ free_and_fail:
  * @retval		EINVAL Invalid or missing argument
  * @retval		ENOENT Requested data not available
  */
-errno_t pfe_pe_get_mmap(pfe_pe_t *pe, pfe_ct_pe_mmap_t *mmap)
+errno_t pfe_pe_get_mmap(const pfe_pe_t *pe, pfe_ct_pe_mmap_t *mmap)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely((NULL == pe) || (NULL == mmap)))
@@ -1667,7 +1677,7 @@ errno_t pfe_pe_get_mmap(pfe_pe_t *pe, pfe_ct_pe_mmap_t *mmap)
 
 	if (NULL != pe->mmap_data)
 	{
-		(void)memcpy(mmap, pe->mmap_data, sizeof(pfe_ct_pe_mmap_t));
+		(void)memcpy(mmap, (const void *)pe->mmap_data, sizeof(pfe_ct_pe_mmap_t));
 		return EOK;
 	}
 	else
@@ -1714,7 +1724,7 @@ void pfe_pe_destroy(pfe_pe_t *pe)
 * @param[in] pe PE to be used
 * @return Either the string base or NULL.
 */
-char *pfe_pe_get_fw_feature_str_base(pfe_pe_t *pe)
+char *pfe_pe_get_fw_feature_str_base(const pfe_pe_t *pe)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == pe))
@@ -1770,7 +1780,7 @@ errno_t pfe_pe_get_fw_feature_entry(pfe_pe_t *pe, uint32_t id, pfe_ct_feature_de
 		pe->fw_features_base = oal_ntohl(pfe_pe_mmap.common.version.features);
 		if(pe->fw_features_base > pe->fw_feature_section_size)
 		{
-			NXP_LOG_ERROR("Invalid address of features record 0x%x\n", pe->fw_features_base);
+			NXP_LOG_ERROR("Invalid address of features record 0x%x\n", (uint_t)pe->fw_features_base);
 			pe->fw_features_base = INVALID_FEATURES_BASE;
 			return EIO;
 		}
@@ -1794,6 +1804,7 @@ errno_t pfe_pe_get_fw_feature_entry(pfe_pe_t *pe, uint32_t id, pfe_ct_feature_de
  */
 errno_t pfe_pe_get_fw_errors(pfe_pe_t *pe)
 {
+#ifdef NXP_LOG_ENABLED
 	pfe_ct_error_record_t error_record; /* Copy of the PE error record */
 	uint32_t read_start;                /* Starting position in error record to read */
 	uint32_t i;
@@ -1829,7 +1840,7 @@ errno_t pfe_pe_get_fw_errors(pfe_pe_t *pe)
 	{   /* New errors reported - go through them */
 		if(errors_count > FP_ERROR_RECORD_SIZE)
 		{
-			NXP_LOG_WARNING("FW error log overflow by %u\n", errors_count - FP_ERROR_RECORD_SIZE + 1U);
+			NXP_LOG_WARNING("FW error log overflow by %u\n", (uint_t)errors_count - FP_ERROR_RECORD_SIZE + 1U);
 			/* Overflow has occurred - the write_index contains oldest record */
 			read_start = oal_ntohl(error_record.write_index);
 			errors_count = FP_ERROR_RECORD_SIZE;
@@ -1839,37 +1850,39 @@ errno_t pfe_pe_get_fw_errors(pfe_pe_t *pe)
 		{
 			uint32_t error_addr;
 			uint32_t error_line;
-			pfe_ct_error_t *error_ptr;
-			char_t *error_str;
-			char_t *error_file;
+			const pfe_ct_error_t *error_ptr;
+			const char_t *error_str;
+			const char_t *error_file;
 			 uint32_t error_val;
 
 			error_addr = oal_ntohl(error_record.errors[(read_start + i) & (FP_ERROR_RECORD_SIZE - 1U)]);
 			error_val = oal_ntohl(error_record.values[(read_start + i) & (FP_ERROR_RECORD_SIZE - 1U)]);
 			if(error_addr > pe->fw_err_section_size)
 			{
-				NXP_LOG_ERROR("Invalid error address from FW 0x%x\n", error_addr);
+				NXP_LOG_ERROR("Invalid error address from FW 0x%x\n", (uint_t)error_addr);
 				break;
 			}
 			/* Get to the error message through the .errors section */
-			error_ptr = pe->fw_err_section + error_addr;
+			error_ptr = (pfe_ct_error_t *)((addr_t)pe->fw_err_section + error_addr);
 			if(oal_ntohl(error_ptr->message) > pe->fw_err_section_size)
 			{
-				NXP_LOG_ERROR("Invalid error message from FW 0x%x", oal_ntohl(error_ptr->message));
+				NXP_LOG_ERROR("Invalid error message from FW 0x%x", (uint_t)oal_ntohl(error_ptr->message));
 				break;
 			}
-			error_str = pe->fw_err_section + oal_ntohl(error_ptr->message);
+			error_str = (char_t *)((addr_t)pe->fw_err_section + oal_ntohl(error_ptr->message));
 			if(oal_ntohl(error_ptr->file) > pe->fw_err_section_size)
 			{
-				NXP_LOG_ERROR("Invalid file name from FW 0x%x", oal_ntohl(error_ptr->file));
+				NXP_LOG_ERROR("Invalid file name from FW 0x%x", (uint_t)oal_ntohl(error_ptr->file));
 				break;
 			}
-			error_file =  pe->fw_err_section + oal_ntohl(error_ptr->file);
+			error_file =  (char_t *)((addr_t)pe->fw_err_section + oal_ntohl(error_ptr->file));
 			error_line = oal_ntohl(error_ptr->line);
-			NXP_LOG_ERROR("PE%d: %s line %u: %s (0x%x)\n", pe->id, error_file, error_line, error_str, error_val);
+			NXP_LOG_ERROR("PE%d: %s line %u: %s (0x%x)\n", pe->id, error_file, (uint_t)error_line, error_str, (uint_t)error_val);
 		}
 	}
-
+#else
+    (void)pe;
+#endif /* NXP_LOG_ENABLED */
 	return EOK;
 }
 
@@ -1877,7 +1890,7 @@ errno_t pfe_pe_get_fw_errors(pfe_pe_t *pe)
  * @brief Reads and validates PE mmap
  * @param[in] pe The PE instance
  */
-errno_t pfe_pe_check_mmap(pfe_pe_t *pe)
+errno_t pfe_pe_check_mmap(const pfe_pe_t *pe)
 {
 	pfe_ct_pe_mmap_t pfe_pe_mmap;
 
@@ -1895,7 +1908,7 @@ errno_t pfe_pe_check_mmap(pfe_pe_t *pe)
 			(char_t *)pfe_pe_mmap.common.version.build_date,
 			(char_t *)pfe_pe_mmap.common.version.build_time,
 			(char_t *)pfe_pe_mmap.common.version.vctrl,
-			pfe_pe_mmap.common.version.id);
+			(uint_t)pfe_pe_mmap.common.version.id);
 
 	return EOK;
 }
@@ -1986,7 +1999,7 @@ errno_t pfe_pe_get_class_algo_stats(pfe_pe_t *pe, uint32_t addr, pfe_ct_class_al
  * @param[in]	verb_level	Verbosity level
  * @return		Number of bytes written into the output buffer
  */
-uint32_t pfe_pe_stat_to_str(pfe_ct_class_algo_stats_t *stat, char *buf, uint32_t buf_len, uint8_t verb_level)
+uint32_t pfe_pe_stat_to_str(const pfe_ct_class_algo_stats_t *stat, char *buf, uint32_t buf_len, uint8_t verb_level)
 {
 	uint32_t len = 0U;
 
diff --git a/sw/pfe_platform/src/pfe_phy_if.c b/sw/pfe_platform/src/pfe_phy_if.c
index c146d8f..cec2235 100644
--- a/sw/pfe_platform/src/pfe_phy_if.c
+++ b/sw/pfe_platform/src/pfe_phy_if.c
@@ -8,9 +8,9 @@
  * ========================================================================= */
 
 #include "pfe_cfg.h"
-#ifndef PFE_CFG_PFE_SLAVE
-
 #include "oal.h"
+
+#ifndef PFE_CFG_PFE_SLAVE
 #include "hal.h"
 
 #include "pfe_platform_cfg.h"
@@ -39,7 +39,7 @@ struct pfe_phy_if_tag
 	oal_mutex_t lock;
 	bool_t is_enabled;
     pfe_ct_block_state_t block_state; /* Copy of value in phy_if_class for faster access */
-	LLIST_t mac_addr_list; /* List of all MAC addresses associated with physical interface */
+    pfe_mac_db_t *mac_db; /* MAC database */
 	union
 	{
 		pfe_emac_t *emac;
@@ -48,27 +48,23 @@ struct pfe_phy_if_tag
 	} port;
 };
 
-typedef struct pfe_phy_if_list_entry_tag
+typedef struct
 {
 	pfe_log_if_t *log_if;
 	LLIST_t iterator;
 } pfe_phy_if_list_entry_t;
 
-typedef struct __pfe_phy_if_mac_addr_list_entry_tag
-{
-	pfe_mac_addr_t addr;		/*	The MAC address */
-	LLIST_t iterator;			/*	List chain entry */
-	pfe_ct_phy_if_id_t owner;	/*	Identification of the driver that owns this entry */
-} pfe_phy_if_mac_addr_list_entry_t;
-
-static errno_t pfe_phy_if_write_to_class_nostats(pfe_phy_if_t *iface, pfe_ct_phy_if_t *class_if);
-static errno_t pfe_phy_if_write_to_class(pfe_phy_if_t *iface, pfe_ct_phy_if_t *class_if);
-static bool_t pfe_phy_if_has_log_if_nolock(pfe_phy_if_t *iface, pfe_log_if_t *log_if);
-static bool_t pfe_phy_if_has_enabled_log_if_nolock(pfe_phy_if_t *iface);
-static bool_t pfe_phy_if_has_promisc_log_if_nolock(pfe_phy_if_t *iface);
+static errno_t pfe_phy_if_write_to_class_nostats(const pfe_phy_if_t *iface, pfe_ct_phy_if_t *class_if);
+static errno_t pfe_phy_if_write_to_class(const pfe_phy_if_t *iface, pfe_ct_phy_if_t *class_if);
+static bool_t pfe_phy_if_has_log_if_nolock(const pfe_phy_if_t *iface, const pfe_log_if_t *log_if);
+static bool_t pfe_phy_if_has_enabled_log_if_nolock(const pfe_phy_if_t *iface);
+static bool_t pfe_phy_if_has_promisc_log_if_nolock(const pfe_phy_if_t *iface);
+static bool_t pfe_phy_if_has_loopback_log_if_nolock(const pfe_phy_if_t *iface);
 static errno_t pfe_phy_if_disable_nolock(pfe_phy_if_t *iface);
-static uint32_t pfe_phy_if_stat_to_str(pfe_ct_phy_if_stats_t *stat, char *buf, uint32_t buf_len, uint8_t verb_level);
-static pfe_phy_if_mac_addr_list_entry_t *pfe_phy_if_mac_addr_db_find_by_addr(pfe_phy_if_t *iface, pfe_mac_addr_t addr);
+static errno_t pfe_phy_if_set_flag_nolock(pfe_phy_if_t *iface, pfe_ct_if_flags_t flag);
+static errno_t pfe_phy_if_clear_flag_nolock(pfe_phy_if_t *iface, pfe_ct_if_flags_t flag);
+static pfe_ct_if_flags_t pfe_phy_if_get_flag_nolock(const pfe_phy_if_t *iface, pfe_ct_if_flags_t flag);
+static uint32_t pfe_phy_if_stat_to_str(const pfe_ct_phy_if_stats_t *stat, char *buf, uint32_t buf_len, uint8_t verb_level);
 
 /**
  * @brief		Write interface structure to classifier memory skipping interface statistics
@@ -77,7 +73,7 @@ static pfe_phy_if_mac_addr_list_entry_t *pfe_phy_if_mac_addr_db_find_by_addr(pfe
  * @retval		EOK Success
  * @retval		EINVAL Invalid or missing argument
  */
-static errno_t pfe_phy_if_write_to_class_nostats(pfe_phy_if_t *iface, pfe_ct_phy_if_t *class_if)
+static errno_t pfe_phy_if_write_to_class_nostats(const pfe_phy_if_t *iface, pfe_ct_phy_if_t *class_if)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely((NULL == class_if) || (NULL == iface) || (0U == iface->dmem_base)))
@@ -90,7 +86,7 @@ static errno_t pfe_phy_if_write_to_class_nostats(pfe_phy_if_t *iface, pfe_ct_phy
 	/* Be sure that phy_stats are at correct place */
 	ct_assert((sizeof(pfe_ct_phy_if_t) - sizeof(pfe_ct_phy_if_stats_t)) == offsetof(pfe_ct_phy_if_t, phy_stats));
 
-	return pfe_class_write_dmem(iface->class, -1, (void *)iface->dmem_base, class_if,
+	return pfe_class_write_dmem(iface->class, -1, iface->dmem_base, (void *)class_if,
 								sizeof(pfe_ct_phy_if_t) - sizeof(pfe_ct_phy_if_stats_t));
 }
 
@@ -101,7 +97,7 @@ static errno_t pfe_phy_if_write_to_class_nostats(pfe_phy_if_t *iface, pfe_ct_phy
  * @retval		EOK Success
  * @retval		EINVAL Invalid or missing argument
  */
-static errno_t pfe_phy_if_write_to_class(pfe_phy_if_t *iface, pfe_ct_phy_if_t *class_if)
+static errno_t pfe_phy_if_write_to_class(const pfe_phy_if_t *iface, pfe_ct_phy_if_t *class_if)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely((NULL == class_if) || (NULL == iface) || (0U == iface->dmem_base)))
@@ -111,7 +107,7 @@ static errno_t pfe_phy_if_write_to_class(pfe_phy_if_t *iface, pfe_ct_phy_if_t *c
 	}
 #endif /* PFE_CFG_NULL_ARG_CHECK */
 
-	return pfe_class_write_dmem(iface->class, -1, (void *)iface->dmem_base, class_if, sizeof(pfe_ct_phy_if_t));
+	return pfe_class_write_dmem(iface->class, -1, iface->dmem_base, (void *)class_if, sizeof(pfe_ct_phy_if_t));
 }
 
 /**
@@ -122,7 +118,7 @@ static errno_t pfe_phy_if_write_to_class(pfe_phy_if_t *iface, pfe_ct_phy_if_t *c
  * @param[in]	verb_level	Verbosity level
  * @return		Number of bytes written into the output buffer
  */
-static uint32_t pfe_phy_if_stat_to_str(pfe_ct_phy_if_stats_t *stat, char *buf, uint32_t buf_len, uint8_t verb_level)
+static uint32_t pfe_phy_if_stat_to_str(const pfe_ct_phy_if_stats_t *stat, char *buf, uint32_t buf_len, uint8_t verb_level)
 {
 	uint32_t len = 0U;
 
@@ -141,38 +137,6 @@ static uint32_t pfe_phy_if_stat_to_str(pfe_ct_phy_if_stats_t *stat, char *buf, u
 	return len;
 }
 
-/**
- * @brief		Search a MAC address within internal DB of registered addresses
- * @details		Access to the shared resources => needs to be called within the critical section!
- * @param[in]	iface The interface instance
- * @param[in]	addr The MAC address to search
- * @return		The DB entry if found or NULL if address is not present
- */
-static pfe_phy_if_mac_addr_list_entry_t *pfe_phy_if_mac_addr_db_find_by_addr(pfe_phy_if_t *iface, pfe_mac_addr_t addr)
-{
-	pfe_phy_if_mac_addr_list_entry_t *entry = NULL;
-	LLIST_t *item;
-	
-#if defined(PFE_CFG_NULL_ARG_CHECK)
-	if (unlikely(NULL == emac))
-	{
-		NXP_LOG_ERROR("NULL argument received\n");
-		return NULL;
-	}
-#endif /* PFE_CFG_NULL_ARG_CHECK */
-
-	LLIST_ForEach(item, &iface->mac_addr_list)
-	{
-		entry = LLIST_Data(item, pfe_phy_if_mac_addr_list_entry_t, iterator);
-		if (0 == memcmp(addr, entry->addr, sizeof(pfe_mac_addr_t)))
-		{
-			return entry;
-		}
-	}
-	
-	return NULL;
-}
-
 /**
  * @brief		Create new physical interface instance
  * @param[in]	class The classifier instance
@@ -182,7 +146,7 @@ static pfe_phy_if_mac_addr_list_entry_t *pfe_phy_if_mac_addr_db_find_by_addr(pfe
  * @param[in]	name Name of the interface
  * @return		The interface instance or NULL if failed
  */
-pfe_phy_if_t *pfe_phy_if_create(pfe_class_t *class, pfe_ct_phy_if_id_t id, char_t *name)
+pfe_phy_if_t *pfe_phy_if_create(pfe_class_t *class, pfe_ct_phy_if_id_t id, const char_t *name)
 {
 	pfe_phy_if_t *iface;
 	pfe_ct_class_mmap_t pfe_pe_mmap = {0U};
@@ -209,7 +173,13 @@ pfe_phy_if_t *pfe_phy_if_create(pfe_class_t *class, pfe_ct_phy_if_id_t id, char_
 		iface->class = class;
 		iface->is_enabled = FALSE;
 		LLIST_Init(&iface->log_ifs);
-		LLIST_Init(&iface->mac_addr_list);
+
+		iface->mac_db = pfe_mac_db_create();
+		if (NULL == iface->mac_db)
+		{
+			NXP_LOG_ERROR("Could not create MAC db\n");
+			goto free_and_fail;
+		}
 
 		if (EOK != pfe_class_get_mmap(class, 0, &pfe_pe_mmap))
 		{
@@ -248,6 +218,7 @@ pfe_phy_if_t *pfe_phy_if_create(pfe_class_t *class, pfe_ct_phy_if_id_t id, char_
 		iface->phy_if_class.id = id;
 		iface->phy_if_class.block_state = IF_BS_FORWARDING;
 		iface->phy_if_class.mirror = PFE_PHY_IF_ID_INVALID;
+		iface->phy_if_class.flags = (pfe_ct_if_flags_t)oal_htonl(IF_FL_ALLOW_Q_IN_Q|IF_FL_FF_ALL_TCP);
 
 		/* Be sure that statistics are zeroed (endianness doesn't mater for this) */
 		iface->phy_if_class.phy_stats.ingress	= 0;
@@ -267,16 +238,15 @@ pfe_phy_if_t *pfe_phy_if_create(pfe_class_t *class, pfe_ct_phy_if_id_t id, char_
 	return iface;
 
 free_and_fail:
-	(void)pfe_phy_if_destroy(iface);
+	pfe_phy_if_destroy(iface);
 	return NULL;
 }
 
 /**
  * @brief		Destroy interface instance
  * @param[in]	iface The interface instance
- * @return		EOK success, error code otherwise
  */
-errno_t pfe_phy_if_destroy(pfe_phy_if_t *iface)
+void pfe_phy_if_destroy(pfe_phy_if_t *iface)
 {
 	errno_t ret = EOK;
 
@@ -290,17 +260,33 @@ errno_t pfe_phy_if_destroy(pfe_phy_if_t *iface)
 		if (FALSE == LLIST_IsEmpty(&iface->log_ifs))
 		{
 			/*	Do not allow orphaned logical interfaces */
-			NXP_LOG_WARNING("%s still contains logical interfaces. Destroy them first.\n", iface->name);
-			ret = EPERM;
-		}
+			NXP_LOG_ERROR("%s still contains logical interfaces. Destroy them first.\n", iface->name);
 
-		if (EOK != oal_mutex_unlock(&iface->lock))
-		{
-			NXP_LOG_DEBUG("mutex unlock failed\n");
+			if (EOK != oal_mutex_unlock(&iface->lock))
+			{
+				NXP_LOG_DEBUG("mutex unlock failed\n");
+			}
 		}
-
-		if (EOK == ret)
+		else
 		{
+			if (iface->mac_db != NULL)
+			{
+				ret = pfe_mac_db_destroy(iface->mac_db);
+				if (ret != EOK)
+				{
+					NXP_LOG_WARNING("unable to destroy MAC database: %d\n", ret);
+				}
+			}
+			else
+			{
+				NXP_LOG_DEBUG("%s mac_db is NULL.\n", iface->name);
+			}
+
+			if (EOK != oal_mutex_unlock(&iface->lock))
+			{
+				NXP_LOG_DEBUG("mutex unlock failed\n");
+			}
+
 			if (NULL != iface->name)
 			{
 				oal_mm_free(iface->name);
@@ -316,7 +302,7 @@ errno_t pfe_phy_if_destroy(pfe_phy_if_t *iface)
 		}
 	}
 
-	return ret;
+	return;
 }
 
 /**
@@ -324,7 +310,7 @@ errno_t pfe_phy_if_destroy(pfe_phy_if_t *iface)
  * @param[in]	iface The interface instance
  * @return		The classifier instance
  */
-__attribute__((pure)) pfe_class_t *pfe_phy_if_get_class(pfe_phy_if_t *iface)
+__attribute__((pure)) pfe_class_t *pfe_phy_if_get_class(const pfe_phy_if_t *iface)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == iface))
@@ -351,7 +337,8 @@ __attribute__((pure)) pfe_class_t *pfe_phy_if_get_class(pfe_phy_if_t *iface)
  */
 errno_t pfe_phy_if_add_log_if(pfe_phy_if_t *iface, pfe_log_if_t *log_if)
 {
-	pfe_phy_if_list_entry_t *entry, *tmp_entry;
+	pfe_phy_if_list_entry_t *entry;
+	const pfe_phy_if_list_entry_t *tmp_entry;
 	addr_t log_if_dmem_base = 0U;
 
 #if defined(PFE_CFG_NULL_ARG_CHECK)
@@ -496,10 +483,10 @@ unlock_and_fail:
 	return ENOEXEC;
 }
 
-static bool_t pfe_phy_if_has_log_if_nolock(pfe_phy_if_t *iface, pfe_log_if_t *log_if)
+static bool_t pfe_phy_if_has_log_if_nolock(const pfe_phy_if_t *iface, const pfe_log_if_t *log_if)
 {
 	LLIST_t *curItem;
-	pfe_phy_if_list_entry_t *entry;
+	const pfe_phy_if_list_entry_t *entry;
 
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely((NULL == iface) || (NULL == log_if)))
@@ -521,10 +508,10 @@ static bool_t pfe_phy_if_has_log_if_nolock(pfe_phy_if_t *iface, pfe_log_if_t *lo
 	return FALSE;
 }
 
-static bool_t pfe_phy_if_has_enabled_log_if_nolock(pfe_phy_if_t *iface)
+static bool_t pfe_phy_if_has_enabled_log_if_nolock(const pfe_phy_if_t *iface)
 {
 	LLIST_t *curItem;
-	pfe_phy_if_list_entry_t *entry;
+	const pfe_phy_if_list_entry_t *entry;
 
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == iface))
@@ -546,10 +533,10 @@ static bool_t pfe_phy_if_has_enabled_log_if_nolock(pfe_phy_if_t *iface)
 	return FALSE;
 }
 
-static bool_t pfe_phy_if_has_promisc_log_if_nolock(pfe_phy_if_t *iface)
+static bool_t pfe_phy_if_has_promisc_log_if_nolock(const pfe_phy_if_t *iface)
 {
 	LLIST_t *curItem;
-	pfe_phy_if_list_entry_t *entry;
+	const pfe_phy_if_list_entry_t *entry;
 
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == iface))
@@ -572,6 +559,32 @@ static bool_t pfe_phy_if_has_promisc_log_if_nolock(pfe_phy_if_t *iface)
 	return FALSE;
 }
 
+static bool_t pfe_phy_if_has_loopback_log_if_nolock(const pfe_phy_if_t *iface)
+{
+	LLIST_t *curItem;
+	const pfe_phy_if_list_entry_t *entry;
+
+#if defined(PFE_CFG_NULL_ARG_CHECK)
+	if (unlikely(NULL == iface))
+	{
+		NXP_LOG_ERROR("NULL argument received\n");
+		return FALSE;
+	}
+#endif /* PFE_CFG_NULL_ARG_CHECK */
+
+	LLIST_ForEach(curItem, &iface->log_ifs)
+	{
+		entry = LLIST_Data(curItem, pfe_phy_if_list_entry_t, iterator);
+		if ((TRUE == pfe_log_if_is_enabled(entry->log_if))
+					&& (TRUE == pfe_log_if_is_loopback(entry->log_if)))
+		{
+			return TRUE;
+		}
+	}
+
+	return FALSE;
+}
+
 /**
  * @brief		Check if physical interface contains given logical interface
  * @param[in]	iface The physical interface instance
@@ -579,7 +592,7 @@ static bool_t pfe_phy_if_has_promisc_log_if_nolock(pfe_phy_if_t *iface)
  * @return		TRUE if logical interface is bound to the physical one. False
  * 				otherwise.
  */
-bool_t pfe_phy_if_has_log_if(pfe_phy_if_t *iface, pfe_log_if_t *log_if)
+bool_t pfe_phy_if_has_log_if(pfe_phy_if_t *iface, const pfe_log_if_t *log_if)
 {
 	bool_t match = FALSE;
 
@@ -616,9 +629,10 @@ bool_t pfe_phy_if_has_log_if(pfe_phy_if_t *iface, pfe_log_if_t *log_if)
  * @retval		ENOENT Entry not found
  * @note		API to be used only by pfe_log_if module
  */
-errno_t pfe_phy_if_del_log_if(pfe_phy_if_t *iface, pfe_log_if_t *log_if)
+errno_t pfe_phy_if_del_log_if(pfe_phy_if_t *iface, const pfe_log_if_t *log_if)
 {
-	pfe_phy_if_list_entry_t *entry = NULL, *prev_entry = NULL;
+	pfe_phy_if_list_entry_t *entry = NULL;
+	const pfe_phy_if_list_entry_t *prev_entry = NULL;
 	LLIST_t *curItem;
 	bool_t found = FALSE;
 	addr_t log_if_dmem_base = 0U, next_dmem_ptr = 0U;
@@ -778,7 +792,7 @@ unlock_and_fail:
  */
 errno_t pfe_phy_if_set_block_state(pfe_phy_if_t *iface, pfe_ct_block_state_t block_state)
 {
-	errno_t ret = EOK;  
+	errno_t ret = EOK;
 	pfe_ct_block_state_t tmp;
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == iface))
@@ -786,7 +800,7 @@ errno_t pfe_phy_if_set_block_state(pfe_phy_if_t *iface, pfe_ct_block_state_t blo
 		NXP_LOG_ERROR("NULL argument received\n");
 		return EINVAL;
 	}
-#endif /* PFE_CFG_NULL_ARG_CHECK */   
+#endif /* PFE_CFG_NULL_ARG_CHECK */
 	if (EOK != oal_mutex_lock(&iface->lock))
 	{
 		NXP_LOG_DEBUG("mutex lock failed\n");
@@ -811,7 +825,7 @@ errno_t pfe_phy_if_set_block_state(pfe_phy_if_t *iface, pfe_ct_block_state_t blo
 	if (EOK != oal_mutex_unlock(&iface->lock))
 	{
 		NXP_LOG_ERROR("mutex unlock failed\n");
-	} 
+	}
 	return ret;
 }
 
@@ -974,10 +988,10 @@ errno_t pfe_phy_if_set_mirroring(pfe_phy_if_t *iface, pfe_ct_phy_if_id_t mirror)
 /**
  * @brief Get mirroring configuration on the given interface
  * @param[in] iface The interface which traffic shall be mirrored
- * @return The ID of the interface where is the traffic mirrored 
+ * @return The ID of the interface where is the traffic mirrored
  *         (PFE_PHY_IF_ID_INVALID if is disabled).
  */
-pfe_ct_phy_if_id_t pfe_phy_if_get_mirroring(pfe_phy_if_t *iface)
+pfe_ct_phy_if_id_t pfe_phy_if_get_mirroring(const pfe_phy_if_t *iface)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == iface))
@@ -1059,7 +1073,7 @@ errno_t pfe_phy_if_bind_emac(pfe_phy_if_t *iface, pfe_emac_t *emac)
  * @param[in]	iface The interface instance
  * @return		Associated EMAC instance or NULL if failed
  */
-pfe_emac_t *pfe_phy_if_get_emac(pfe_phy_if_t *iface)
+pfe_emac_t *pfe_phy_if_get_emac(const pfe_phy_if_t *iface)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == iface))
@@ -1129,7 +1143,7 @@ errno_t pfe_phy_if_bind_hif(pfe_phy_if_t *iface, pfe_hif_chnl_t *hif)
  * @param[in]	iface The interface instance
  * @return		Associated HIF channel instance or NULL if failed
  */
-pfe_hif_chnl_t *pfe_phy_if_get_hif(pfe_phy_if_t *iface)
+pfe_hif_chnl_t *pfe_phy_if_get_hif(const pfe_phy_if_t *iface)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == iface))
@@ -1255,7 +1269,7 @@ errno_t pfe_phy_if_enable(pfe_phy_if_t *iface)
 
 	/*	Enable interface instance. Backup flags and write the changes. */
 	tmp = iface->phy_if_class.flags;
-	iface->phy_if_class.flags |= IF_FL_ENABLED;
+	iface->phy_if_class.flags |= oal_htonl(IF_FL_ENABLED);
 	ret = pfe_phy_if_write_to_class_nostats(iface, &iface->phy_if_class);
 	if (EOK != ret)
 	{
@@ -1307,7 +1321,7 @@ errno_t pfe_phy_if_enable(pfe_phy_if_t *iface)
 		{
 			/*	HW configuration failure. Backup flags and disable the instance. */
 			tmp = iface->phy_if_class.flags;
-			iface->phy_if_class.flags &= (pfe_ct_if_flags_t)(~IF_FL_ENABLED);
+			iface->phy_if_class.flags &= (pfe_ct_if_flags_t)oal_htonl(~IF_FL_ENABLED);
 			ret = pfe_phy_if_write_to_class_nostats(iface, &iface->phy_if_class);
 			if (EOK != ret)
 			{
@@ -1357,7 +1371,7 @@ static errno_t pfe_phy_if_disable_nolock(pfe_phy_if_t *iface)
 
 	/*	Disable interface instance. Backup flags and write the changes. */
 	tmp = iface->phy_if_class.flags;
-	iface->phy_if_class.flags &= (pfe_ct_if_flags_t)(~IF_FL_ENABLED);
+	iface->phy_if_class.flags &= (pfe_ct_if_flags_t)oal_htonl(~IF_FL_ENABLED);
 	ret = pfe_phy_if_write_to_class_nostats(iface, &iface->phy_if_class);
 	if (EOK != ret)
 	{
@@ -1431,6 +1445,188 @@ errno_t pfe_phy_if_disable(pfe_phy_if_t *iface)
 	return ret;
 }
 
+/**
+ * @brief		Set physical interface flag (nolock variant)
+ * @param[in]	iface The interface instance
+ * @param[in]	flag The flag to set
+ * @return		EOK if success, error code otherwise
+ */
+static errno_t pfe_phy_if_set_flag_nolock(pfe_phy_if_t *iface, pfe_ct_if_flags_t flag)
+{
+	errno_t ret;
+	pfe_ct_if_flags_t tmp;
+
+#if defined(PFE_CFG_NULL_ARG_CHECK)
+	if (unlikely(NULL == iface))
+	{
+		NXP_LOG_ERROR("NULL argument received\n");
+		return EINVAL;
+	}
+#endif /* PFE_CFG_NULL_ARG_CHECK */
+
+	tmp = iface->phy_if_class.flags;
+	iface->phy_if_class.flags |= oal_htonl(flag);
+	ret = pfe_phy_if_write_to_class_nostats(iface, &iface->phy_if_class);
+	if (EOK != ret)
+	{
+		/*	Failed. Revert flags. */
+		NXP_LOG_ERROR("Could not write interface flag (set)\n");
+		iface->phy_if_class.flags = tmp;
+	}
+
+	return ret;
+}
+
+/**
+ * @brief		Clear physical interface flag (nolock variant)
+ * @param[in]	iface The interface instance
+ * @param[in]	flag The flag to clear
+ * @return		EOK if success, error code otherwise
+ */
+static errno_t pfe_phy_if_clear_flag_nolock(pfe_phy_if_t *iface, pfe_ct_if_flags_t flag)
+{
+	errno_t ret;
+	pfe_ct_if_flags_t tmp;
+
+#if defined(PFE_CFG_NULL_ARG_CHECK)
+	if (unlikely(NULL == iface))
+	{
+		NXP_LOG_ERROR("NULL argument received\n");
+		return EINVAL;
+	}
+#endif /* PFE_CFG_NULL_ARG_CHECK */
+
+	tmp = iface->phy_if_class.flags;
+	iface->phy_if_class.flags &= oal_htonl(~flag);
+	ret = pfe_phy_if_write_to_class_nostats(iface, &iface->phy_if_class);
+	if (EOK != ret)
+	{
+		/*	Failed. Revert flags. */
+		NXP_LOG_ERROR("Could not write interface flag (clear)\n");
+		iface->phy_if_class.flags = tmp;
+	}
+
+	return ret;
+}
+
+/**
+ * @brief		Get physical interface flag (nolock variant)
+ * @param[in]	iface The interface instance
+ * @param[in]	flag The flag to check
+ * @return		Flag if 'flag' is set, zero (IF_FL_NONE) otherwise
+ */
+static pfe_ct_if_flags_t pfe_phy_if_get_flag_nolock(const pfe_phy_if_t *iface, pfe_ct_if_flags_t flag)
+{
+#if defined(PFE_CFG_NULL_ARG_CHECK)
+	if (unlikely(NULL == iface))
+	{
+		NXP_LOG_ERROR("NULL argument received\n");
+		return IF_FL_NONE;
+	}
+#endif /* PFE_CFG_NULL_ARG_CHECK */
+
+	return (pfe_ct_if_flags_t)(oal_ntohl(iface->phy_if_class.flags) & flag);
+}
+
+/**
+ * @brief		Set physical interface flag
+ * @param[in]	iface The interface instance
+ * @param[in]	flag The flag to set
+ * @return		EOK if success, error code otherwise
+ */
+errno_t pfe_phy_if_set_flag(pfe_phy_if_t *iface, pfe_ct_if_flags_t flag)
+{
+	errno_t ret;
+
+#if defined(PFE_CFG_NULL_ARG_CHECK)
+	if (unlikely(NULL == iface))
+	{
+		NXP_LOG_ERROR("NULL argument received\n");
+		return EINVAL;
+	}
+#endif /* PFE_CFG_NULL_ARG_CHECK */
+
+	if (EOK != oal_mutex_lock(&iface->lock))
+	{
+		NXP_LOG_DEBUG("Mutex lock failed\n");
+	}
+
+	ret = pfe_phy_if_set_flag_nolock(iface, flag);
+
+	if (EOK != oal_mutex_unlock(&iface->lock))
+	{
+		NXP_LOG_DEBUG("Mutex unlock failed\n");
+	}
+
+	return ret;
+}
+
+/**
+ * @brief		Clear physical interface flag
+ * @param[in]	iface The interface instance
+ * @param[in]	flag The flag to clear
+ * @return		EOK if success, error code otherwise
+ */
+errno_t pfe_phy_if_clear_flag(pfe_phy_if_t *iface, pfe_ct_if_flags_t flag)
+{
+	errno_t ret;
+
+#if defined(PFE_CFG_NULL_ARG_CHECK)
+	if (unlikely(NULL == iface))
+	{
+		NXP_LOG_ERROR("NULL argument received\n");
+		return EINVAL;
+	}
+#endif /* PFE_CFG_NULL_ARG_CHECK */
+
+	if (EOK != oal_mutex_lock(&iface->lock))
+	{
+		NXP_LOG_DEBUG("Mutex lock failed\n");
+	}
+
+	ret = pfe_phy_if_clear_flag_nolock(iface, flag);
+
+	if (EOK != oal_mutex_unlock(&iface->lock))
+	{
+		NXP_LOG_DEBUG("Mutex unlock failed\n");
+	}
+
+	return ret;
+}
+
+/**
+ * @brief		Get physical interface flag
+ * @param[in]	iface The interface instance
+ * @param[in]	flag The flag to check
+ * @return		Flag if 'flag' is set, zero (IF_FL_NONE) otherwise
+ */
+pfe_ct_if_flags_t pfe_phy_if_get_flag(pfe_phy_if_t *iface, pfe_ct_if_flags_t flag)
+{
+	pfe_ct_if_flags_t ret;
+
+#if defined(PFE_CFG_NULL_ARG_CHECK)
+	if (unlikely(NULL == iface))
+	{
+		NXP_LOG_ERROR("NULL argument received\n");
+		return IF_FL_NONE;
+	}
+#endif /* PFE_CFG_NULL_ARG_CHECK */
+
+	if (EOK != oal_mutex_lock(&iface->lock))
+	{
+		NXP_LOG_DEBUG("Mutex lock failed\n");
+	}
+
+	ret = pfe_phy_if_get_flag_nolock(iface, flag);
+
+	if (EOK != oal_mutex_unlock(&iface->lock))
+	{
+		NXP_LOG_DEBUG("Mutex unlock failed\n");
+	}
+
+	return ret;
+}
+
 /**
  * @brief		Check if phy_if in promiscuous mode
  * @param[in]	iface The interface instance
@@ -1454,7 +1650,7 @@ bool_t pfe_phy_if_is_promisc(pfe_phy_if_t *iface)
 		NXP_LOG_DEBUG("mutex lock failed\n");
 	}
 
-	ret = (0 != (iface->phy_if_class.flags & IF_FL_PROMISC));
+	ret = (0U != (oal_ntohl(iface->phy_if_class.flags) & IF_FL_PROMISC));
 
 	if (EOK != oal_mutex_unlock(&iface->lock))
 	{
@@ -1464,12 +1660,12 @@ bool_t pfe_phy_if_is_promisc(pfe_phy_if_t *iface)
 }
 
 /**
- * @brief		Enable promiscuous mode
- * @param[in]	iface The interface instance
- * @retval		EOK Success
- * @retval		EINVAL Invalid or missing argument
+ * @brief               Enable loopback mode
+ * @param[in]   iface The interface instance
+ * @retval              EOK Success
+ * @retval              EINVAL Invalid or missing argument
  */
-errno_t pfe_phy_if_promisc_enable(pfe_phy_if_t *iface)
+errno_t pfe_phy_if_loopback_enable(pfe_phy_if_t *iface)
 {
 	errno_t ret = EOK;
 	pfe_ct_if_flags_t tmp;
@@ -1487,33 +1683,33 @@ errno_t pfe_phy_if_promisc_enable(pfe_phy_if_t *iface)
 		NXP_LOG_DEBUG("mutex lock failed\n");
 	}
 
-	/*	Enable instance promiscuous mode. Backup flags and write the changes. */
+	/*      Enable instance loopback mode. Backup flags and write the changes. */
 	tmp = iface->phy_if_class.flags;
-	iface->phy_if_class.flags |= IF_FL_PROMISC;
+	iface->phy_if_class.flags |= IF_FL_LOOPBACK;
 	ret = pfe_phy_if_write_to_class_nostats(iface, &iface->phy_if_class);
 	if (EOK != ret)
 	{
-		/*	Failed. Revert flags. */
+		/*      Failed. Revert flags. */
 		NXP_LOG_ERROR("Phy IF configuration failed\n");
 		iface->phy_if_class.flags = tmp;
 	}
 	else
 	{
-		/*	Set up also associated HW block */
+		/*      Set up also associated HW block */
 		if (NULL == iface->port.instance)
 		{
-			/*	No HW block associated */
+			/*      No HW block associated */
 			;
 		}
 		else
 		{
 			if (PFE_PHY_IF_EMAC == iface->type)
 			{
-				pfe_emac_enable_promisc_mode(iface->port.emac);
+				pfe_emac_enable_loopback(iface->port.emac);
 			}
 			else if (PFE_PHY_IF_HIF == iface->type)
 			{
-				/*	HIF/UTIL does not offer filtering ability */
+				/*      HIF/UTIL does not offer filtering ability */
 				;
 			}
 			else
@@ -1533,12 +1729,12 @@ errno_t pfe_phy_if_promisc_enable(pfe_phy_if_t *iface)
 }
 
 /**
- * @brief		Disable promiscuous mode
- * @param[in]	iface The interface instance
- * @retval		EOK Success
- * @retval		EINVAL Invalid or missing argument
+ * @brief               Disable loopback mode
+ * @param[in]   iface The interface instance
+ * @retval              EOK Success
+ * @retval              EINVAL Invalid or missing argument
  */
-errno_t pfe_phy_if_promisc_disable(pfe_phy_if_t *iface)
+errno_t pfe_phy_if_loopback_disable(pfe_phy_if_t *iface)
 {
 	errno_t ret = EOK;
 	pfe_ct_if_flags_t tmp;
@@ -1558,13 +1754,13 @@ errno_t pfe_phy_if_promisc_disable(pfe_phy_if_t *iface)
 
 	/*
 		Go through all associated logical interfaces and search
-		for promiscuous ones. If there is some enabled promiscuous
-		logical interface, don't disable promiscuous mode on the
+		for loopback ones. If there is some enabled loopback
+		logical interface, don't disable loopback mode on the
 		physical one.
 	*/
-	if (TRUE == pfe_phy_if_has_promisc_log_if_nolock(iface))
+	if (TRUE == pfe_phy_if_has_loopback_log_if_nolock(iface))
 	{
-		NXP_LOG_INFO("%s primiscuous mode not disabled since contains promiscuous logical interface(s)\n", iface->name);
+		NXP_LOG_INFO("%s loopback mode not disabled since contains loopback logical interface(s)\n", iface->name);
 
 		if (EOK != oal_mutex_unlock(&iface->lock))
 		{
@@ -1574,33 +1770,33 @@ errno_t pfe_phy_if_promisc_disable(pfe_phy_if_t *iface)
 		return EOK;
 	}
 
-	/*	Disable instance promiscuous mode. Backup flags and write the changes. */
+	/*      Disable instance loopback mode. Backup flags and write the changes. */
 	tmp = iface->phy_if_class.flags;
-	iface->phy_if_class.flags &= (pfe_ct_if_flags_t)(~IF_FL_PROMISC);
+	iface->phy_if_class.flags &= ~IF_FL_LOOPBACK;
 	ret = pfe_phy_if_write_to_class_nostats(iface, &iface->phy_if_class);
 	if (EOK != ret)
 	{
-		/*	Failed. Revert flags. */
+		/*      Failed. Revert flags. */
 		NXP_LOG_ERROR("Phy IF configuration failed\n");
 		iface->phy_if_class.flags = tmp;
 	}
 	else
 	{
-		/*	Set up also associated HW block */
+		/*      Set up also associated HW block */
 		if (NULL == iface->port.instance)
 		{
-			/*	No HW block associated */
+			/*      No HW block associated */
 			;
 		}
 		else
 		{
 			if (PFE_PHY_IF_EMAC == iface->type)
 			{
-				pfe_emac_disable_promisc_mode(iface->port.emac);
+				pfe_emac_disable_loopback(iface->port.emac);
 			}
 			else if (PFE_PHY_IF_HIF == iface->type)
 			{
-				/*	HIF does not offer filtering ability */
+				/*      HIF does not offer filtering ability */
 				;
 			}
 			else
@@ -1620,14 +1816,15 @@ errno_t pfe_phy_if_promisc_disable(pfe_phy_if_t *iface)
 }
 
 /**
- * @brief		Enable ALLMULTI mode
+ * @brief		Enable promiscuous mode
  * @param[in]	iface The interface instance
  * @retval		EOK Success
  * @retval		EINVAL Invalid or missing argument
  */
-errno_t pfe_phy_if_allmulti_enable(pfe_phy_if_t *iface)
+errno_t pfe_phy_if_promisc_enable(pfe_phy_if_t *iface)
 {
 	errno_t ret = EOK;
+	pfe_ct_if_flags_t tmp;
 
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == iface))
@@ -1642,9 +1839,264 @@ errno_t pfe_phy_if_allmulti_enable(pfe_phy_if_t *iface)
 		NXP_LOG_DEBUG("mutex lock failed\n");
 	}
 
-	/*	Set up also associated HW block */
-	if (NULL == iface->port.instance)
-	{
+	/*	Enable instance promiscuous mode. Backup flags and write the changes. */
+	tmp = iface->phy_if_class.flags;
+	iface->phy_if_class.flags |= oal_htonl(IF_FL_PROMISC);
+	ret = pfe_phy_if_write_to_class_nostats(iface, &iface->phy_if_class);
+	if (EOK != ret)
+	{
+		/*	Failed. Revert flags. */
+		NXP_LOG_ERROR("Phy IF configuration failed\n");
+		iface->phy_if_class.flags = tmp;
+	}
+	else
+	{
+		/*	Set up also associated HW block */
+		if (NULL == iface->port.instance)
+		{
+			/*	No HW block associated */
+			;
+		}
+		else
+		{
+			if (PFE_PHY_IF_EMAC == iface->type)
+			{
+				pfe_emac_enable_promisc_mode(iface->port.emac);
+			}
+			else if (PFE_PHY_IF_HIF == iface->type)
+			{
+				/*	HIF/UTIL does not offer filtering ability */
+				;
+			}
+			else
+			{
+				NXP_LOG_ERROR("Invalid interface type\n");
+				ret = EINVAL;
+			}
+		}
+	}
+
+	if (EOK != oal_mutex_unlock(&iface->lock))
+	{
+		NXP_LOG_DEBUG("mutex unlock failed\n");
+	}
+
+	return ret;
+}
+
+/**
+ * @brief		Disable promiscuous mode
+ * @param[in]	iface The interface instance
+ * @retval		EOK Success
+ * @retval		EINVAL Invalid or missing argument
+ */
+errno_t pfe_phy_if_promisc_disable(pfe_phy_if_t *iface)
+{
+	errno_t ret = EOK;
+	pfe_ct_if_flags_t tmp;
+
+#if defined(PFE_CFG_NULL_ARG_CHECK)
+	if (unlikely(NULL == iface))
+	{
+		NXP_LOG_ERROR("NULL argument received\n");
+		return EINVAL;
+	}
+#endif /* PFE_CFG_NULL_ARG_CHECK */
+
+	if (EOK != oal_mutex_lock(&iface->lock))
+	{
+		NXP_LOG_DEBUG("mutex lock failed\n");
+	}
+
+	/*
+		Go through all associated logical interfaces and search
+		for promiscuous ones. If there is some enabled promiscuous
+		logical interface, don't disable promiscuous mode on the
+		physical one.
+	*/
+	if (TRUE == pfe_phy_if_has_promisc_log_if_nolock(iface))
+	{
+		NXP_LOG_INFO("%s primiscuous mode not disabled since contains promiscuous logical interface(s)\n", iface->name);
+
+		if (EOK != oal_mutex_unlock(&iface->lock))
+		{
+			NXP_LOG_DEBUG("mutex unlock failed\n");
+		}
+
+		return EOK;
+	}
+
+	/*	Disable instance promiscuous mode. Backup flags and write the changes. */
+	tmp = iface->phy_if_class.flags;
+	iface->phy_if_class.flags &= (pfe_ct_if_flags_t)oal_htonl(~IF_FL_PROMISC);
+	ret = pfe_phy_if_write_to_class_nostats(iface, &iface->phy_if_class);
+	if (EOK != ret)
+	{
+		/*	Failed. Revert flags. */
+		NXP_LOG_ERROR("Phy IF configuration failed\n");
+		iface->phy_if_class.flags = tmp;
+	}
+	else
+	{
+		/*	Set up also associated HW block */
+		if (NULL == iface->port.instance)
+		{
+			/*	No HW block associated */
+			;
+		}
+		else
+		{
+			if (PFE_PHY_IF_EMAC == iface->type)
+			{
+				pfe_emac_disable_promisc_mode(iface->port.emac);
+			}
+			else if (PFE_PHY_IF_HIF == iface->type)
+			{
+				/*	HIF does not offer filtering ability */
+				;
+			}
+			else
+			{
+				NXP_LOG_ERROR("Invalid interface type\n");
+				ret = EINVAL;
+			}
+		}
+	}
+
+	if (EOK != oal_mutex_unlock(&iface->lock))
+	{
+		NXP_LOG_DEBUG("mutex unlock failed\n");
+	}
+
+	return ret;
+}
+
+/**
+ * @brief		Enable loadbalance mode
+ * @param[in]	iface The interface instance
+ * @retval		EOK Success
+ * @retval		EINVAL Invalid or missing argument
+ */
+errno_t pfe_phy_if_loadbalance_enable(pfe_phy_if_t *iface)
+{
+	errno_t ret = EOK;
+	pfe_ct_if_flags_t tmp;
+
+#if defined(PFE_CFG_NULL_ARG_CHECK)
+	if (unlikely(NULL == iface))
+	{
+		NXP_LOG_ERROR("NULL argument received\n");
+		return EINVAL;
+	}
+#endif /* PFE_CFG_NULL_ARG_CHECK */
+
+	if (PFE_PHY_IF_HIF != iface->type)
+	{
+		/* Only HIF offers loadbalancing */
+		NXP_LOG_ERROR("Invalid interface type\n");
+		return EINVAL;
+	}
+
+	if (EOK != oal_mutex_lock(&iface->lock))
+	{
+		NXP_LOG_DEBUG("mutex lock failed\n");
+	}
+
+	/*	Enable instance loadbalance mode. Backup flags and write the changes. */
+	tmp = iface->phy_if_class.flags;
+	iface->phy_if_class.flags |= IF_FL_LOAD_BALANCE;
+	ret = pfe_phy_if_write_to_class_nostats(iface, &iface->phy_if_class);
+	if (EOK != ret)
+	{
+		/*	Failed. Revert flags. */
+		NXP_LOG_ERROR("Phy IF configuration for IF_FL_LOAD_BALANCE failed\n");
+		iface->phy_if_class.flags = tmp;
+	}
+
+	if (EOK != oal_mutex_unlock(&iface->lock))
+	{
+		NXP_LOG_DEBUG("mutex unlock failed\n");
+	}
+
+	return ret;
+}
+
+/**
+ * @brief		Disable loadbalance mode
+ * @param[in]	iface The interface instance
+ * @retval		EOK Success
+ * @retval		EINVAL Invalid or missing argument
+ */
+errno_t pfe_phy_if_loadbalance_disable(pfe_phy_if_t *iface)
+{
+	errno_t ret = EOK;
+	pfe_ct_if_flags_t tmp;
+
+#if defined(PFE_CFG_NULL_ARG_CHECK)
+	if (unlikely(NULL == iface))
+	{
+		NXP_LOG_ERROR("NULL argument received\n");
+		return EINVAL;
+	}
+#endif /* PFE_CFG_NULL_ARG_CHECK */
+
+	if (PFE_PHY_IF_HIF != iface->type)
+	{
+		/* Only HIF offers loadbalancing */
+		NXP_LOG_ERROR("Invalid interface type\n");
+		return EINVAL;
+	}
+
+	if (EOK != oal_mutex_lock(&iface->lock))
+	{
+		NXP_LOG_DEBUG("mutex lock failed\n");
+	}
+
+	/*	Disable instance loadbalance mode. Backup flags and write the changes. */
+	tmp = iface->phy_if_class.flags;
+	iface->phy_if_class.flags &= ~IF_FL_LOAD_BALANCE;
+	ret = pfe_phy_if_write_to_class_nostats(iface, &iface->phy_if_class);
+	if (EOK != ret)
+	{
+		/*	Failed. Revert flags. */
+		NXP_LOG_ERROR("Phy IF configuration for IF_FL_LOAD_BALANCE failed\n");
+		iface->phy_if_class.flags = tmp;
+	}
+
+	if (EOK != oal_mutex_unlock(&iface->lock))
+	{
+		NXP_LOG_DEBUG("mutex unlock failed\n");
+	}
+
+	return ret;
+}
+
+/**
+ * @brief		Enable ALLMULTI mode
+ * @param[in]	iface The interface instance
+ * @retval		EOK Success
+ * @retval		EINVAL Invalid or missing argument
+ */
+errno_t pfe_phy_if_allmulti_enable(pfe_phy_if_t * iface)
+{
+	errno_t ret = EOK;
+
+#if defined(PFE_CFG_NULL_ARG_CHECK)
+	if (unlikely(NULL == iface))
+	{
+		NXP_LOG_ERROR("NULL argument received\n");
+		return EINVAL;
+	}
+#endif /* PFE_CFG_NULL_ARG_CHECK */
+
+	if (EOK != oal_mutex_lock(&iface->lock))
+	{
+		NXP_LOG_DEBUG("mutex lock failed\n");
+	}
+
+	/*	Set up also associated HW block */
+	if (NULL == iface->port.instance)
+	{
 		/*	No HW block associated */
 		;
 	}
@@ -1729,19 +2181,171 @@ errno_t pfe_phy_if_allmulti_disable(pfe_phy_if_t *iface)
 	return ret;
 }
 
+/**
+ * @brief	Get rx/tx flow control config
+ * @param[in]	iface The interface instance
+ * @param[out]	tx_ena tx flow control status
+ * @param[out]	rx_ena rx flow control status
+ * @return      EOK on success
+ */
+errno_t pfe_phy_if_get_flow_control(pfe_phy_if_t *iface, bool_t* tx_ena, bool_t* rx_ena)
+{
+	errno_t ret = EOK;
+#if defined(PFE_CFG_NULL_ARG_CHECK)
+	if (unlikely(NULL == iface))
+	{
+		NXP_LOG_ERROR("NULL argument received\n");
+		return EINVAL;
+	}
+#endif /* PFE_CFG_NULL_ARG_CHECK */
+
+	if (EOK != oal_mutex_lock(&iface->lock))
+	{
+		NXP_LOG_DEBUG("Mutex lock failed\n");
+	}
+	if (NULL == iface->port.instance)
+	{
+		/*      No HW block associated */
+		;
+	}
+	else
+	{
+		if (PFE_PHY_IF_EMAC == iface->type)
+		{
+			pfe_emac_get_flow_control(iface->port.emac, tx_ena, rx_ena);
+		}
+		else
+		{
+			;
+		}
+	}
+
+	if (EOK != oal_mutex_unlock(&iface->lock))
+	{
+		NXP_LOG_DEBUG("Mutex unlock failed\n");
+	}
+
+	return ret;
+}
+
+/**
+ * @brief       Set tx flow control
+ * @param[in]   iface The interface instance
+ * @param[in]   tx_ena TRUE: enable flow control, FALSE: disable flow control
+ * @return      EOK on success
+ */
+errno_t pfe_phy_if_set_tx_flow_control(pfe_phy_if_t *iface, bool_t tx_ena)
+{
+	errno_t ret = EOK;
+#if defined(PFE_CFG_NULL_ARG_CHECK)
+	if (unlikely(NULL == iface))
+	{
+		NXP_LOG_ERROR("NULL argument received\n");
+		return EINVAL;
+	}
+#endif /* PFE_CFG_NULL_ARG_CHECK */
+
+	if (EOK != oal_mutex_lock(&iface->lock))
+	{
+		NXP_LOG_DEBUG("Mutex lock failed\n");
+	}
+	if (NULL == iface->port.instance)
+	{
+		/*      No HW block associated */
+		;
+	}
+	else
+	{
+		if (PFE_PHY_IF_EMAC == iface->type)
+		{
+			if (TRUE == tx_ena)
+			{
+				pfe_emac_enable_tx_flow_control(iface->port.emac);
+			}
+			else
+			{
+				pfe_emac_disable_tx_flow_control(iface->port.emac);
+			}
+		}
+		else
+		{
+			;
+		}
+	}
+
+	if (EOK != oal_mutex_unlock(&iface->lock))
+	{
+		NXP_LOG_DEBUG("Mutex unlock failed\n");
+	}
+
+	return ret;
+}
+
+/**
+ * @brief       Set rx flow control
+ * @param[in]   iface The interface instance
+ * @param[in]   rx_ena TRUE: enable flow control, FALSE: disable flow control
+ * @return      EOK on success
+ */
+errno_t pfe_phy_if_set_rx_flow_control(pfe_phy_if_t *iface, bool_t rx_ena)
+{
+	errno_t ret = EOK;
+#if defined(PFE_CFG_NULL_ARG_CHECK)
+	if (unlikely(NULL == iface))
+	{
+		NXP_LOG_ERROR("NULL argument received\n");
+		return EINVAL;
+	}
+#endif /* PFE_CFG_NULL_ARG_CHECK */
+
+	if (EOK != oal_mutex_lock(&iface->lock))
+	{
+		NXP_LOG_DEBUG("Mutex lock failed\n");
+	}
+	if (NULL == iface->port.instance)
+	{
+		/*      No HW block associated */
+		;
+	}
+	else
+	{
+		if (PFE_PHY_IF_EMAC == iface->type)
+		{
+			if (TRUE == rx_ena)
+			{
+				pfe_emac_enable_rx_flow_control(iface->port.emac);
+			}
+			else
+			{
+				pfe_emac_disable_rx_flow_control(iface->port.emac);
+			}
+		}
+		else
+		{
+			;
+		}
+	}
+
+	if (EOK != oal_mutex_unlock(&iface->lock))
+	{
+		NXP_LOG_DEBUG("Mutex unlock failed\n");
+	}
+
+	return ret;
+}
+
 /**
  * @brief		Add MAC address
  * @param[in]	iface The interface instance
- * @param[in]	owner The identification of driver instance
  * @param[in]	addr The MAC address to add
+ * @param[in]	owner The identification of driver instance
  * @retval		EOK Success
  * @retval		EINVAL Invalid or missing argument
  * @retval		ENOEXEC Command failed
  */
-errno_t pfe_phy_if_add_mac_addr(pfe_phy_if_t *iface, pfe_mac_addr_t addr, pfe_ct_phy_if_id_t owner)
+errno_t pfe_phy_if_add_mac_addr(pfe_phy_if_t *iface, const pfe_mac_addr_t addr, pfe_drv_id_t owner)
 {
 	errno_t ret = EOK;
-	pfe_phy_if_mac_addr_list_entry_t *entry;
 
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == iface))
@@ -1766,35 +2370,15 @@ errno_t pfe_phy_if_add_mac_addr(pfe_phy_if_t *iface, pfe_mac_addr_t addr, pfe_ct
 	{
 		if (PFE_PHY_IF_EMAC == iface->type)
 		{
-			entry = pfe_phy_if_mac_addr_db_find_by_addr(iface, addr);
-			if (NULL != entry)
+			ret = pfe_mac_db_add_addr(iface->mac_db, addr, owner);
+			if(EOK == ret)
 			{
-				NXP_LOG_ERROR("MAC address duplicate, not added(%s)\n", iface->name);
-				ret = ENOEXEC;
-			}
-			else
-			{
-				if (EOK != pfe_emac_add_addr(iface->port.emac, addr, owner))
+				ret = pfe_emac_add_addr(iface->port.emac, addr, owner);
+				if (EOK != ret)
 				{
 					NXP_LOG_ERROR("Unable to add MAC address: %d\n", ret);
 					ret = ENOEXEC;
 				}
-				else
-				{
-					/*	Add address to local list */
-					entry = oal_mm_malloc(sizeof(pfe_phy_if_mac_addr_list_entry_t));
-					if (NULL == entry)
-					{
-						NXP_LOG_ERROR("Memory allocation failed\n");
-						ret = ENOMEM;
-					}
-					else
-					{
-						(void)memcpy(entry->addr, addr, sizeof(pfe_mac_addr_t));
-						entry->owner = owner;
-						LLIST_AddAtEnd(&entry->iterator, &iface->mac_addr_list);
-					}
-				}
 			}
 		}
 		else if (PFE_PHY_IF_HIF == iface->type)
@@ -1810,7 +2394,7 @@ errno_t pfe_phy_if_add_mac_addr(pfe_phy_if_t *iface, pfe_mac_addr_t addr, pfe_ct
 
 		if (EOK == ret)
 		{
-			NXP_LOG_INFO("Address %02x:%02x:%02x:%02x:%02x:%02x added to %s\n", addr[0], addr[1], addr[2], addr[3], addr[4], addr[5], iface->name);
+			NXP_LOG_DEBUG("Address %02x:%02x:%02x:%02x:%02x:%02x added to %s\n", addr[0], addr[1], addr[2], addr[3], addr[4], addr[5], iface->name);
 		}
 	}
 
@@ -1830,10 +2414,9 @@ errno_t pfe_phy_if_add_mac_addr(pfe_phy_if_t *iface, pfe_mac_addr_t addr, pfe_ct
  * @retval		EINVAL Invalid or missing argument
  * @retval		ENOENT Address not found
  */
-errno_t pfe_phy_if_del_mac_addr(pfe_phy_if_t *iface, pfe_mac_addr_t addr)
+errno_t pfe_phy_if_del_mac_addr(pfe_phy_if_t *iface, const pfe_mac_addr_t addr)
 {
 	errno_t ret = EOK;
-	pfe_phy_if_mac_addr_list_entry_t *entry;
 
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == iface))
@@ -1858,26 +2441,19 @@ errno_t pfe_phy_if_del_mac_addr(pfe_phy_if_t *iface, pfe_mac_addr_t addr)
 	{
 		if (PFE_PHY_IF_EMAC == iface->type)
 		{
-			entry = pfe_phy_if_mac_addr_db_find_by_addr(iface, addr);
-			if (NULL == entry)
+			ret = pfe_mac_db_del_addr(iface->mac_db, addr);
+			if(EOK != ret)
 			{
-				NXP_LOG_ERROR("MAC address was not found (%s)\n", iface->name);
-				ret = ENOENT;
+				NXP_LOG_WARNING("Unable to remove MAC address from phy_if MAC database: %d\n", ret);
 			}
 			else
 			{
-				if (EOK != pfe_emac_del_addr(iface->port.emac, addr))
+				ret = pfe_emac_del_addr(iface->port.emac, addr);
+				if (EOK != ret)
 				{
+					NXP_LOG_ERROR("Unable to del MAC address: %d\n", ret);
 					ret = ENOENT;
 				}
-				else
-				{
-					/* Remove address from local list */
-					LLIST_Remove(&entry->iterator);
-					oal_mm_free(entry);
-					entry = NULL;
-				}
-				
 			}
 		}
 		else if (PFE_PHY_IF_HIF == iface->type)
@@ -1905,6 +2481,24 @@ errno_t pfe_phy_if_del_mac_addr(pfe_phy_if_t *iface, pfe_mac_addr_t addr)
 	return ret;
 }
 
+/**
+ * @brief		Get handle of internal MAC database
+ * @param[in]	iface The interface instance
+ * @retval		Database handle.
+ */
+pfe_mac_db_t *pfe_phy_if_get_mac_db(const pfe_phy_if_t *iface)
+{
+#if defined(PFE_CFG_NULL_ARG_CHECK)
+	if (unlikely(NULL == iface))
+	{
+		NXP_LOG_ERROR("NULL argument received\n");
+		return NULL;
+	}
+#endif /* PFE_CFG_NULL_ARG_CHECK */
+
+	return iface->mac_db;
+}
+
 /**
  * @brief		Get MAC address
  * @param[in]	iface The interface instance
@@ -1916,7 +2510,6 @@ errno_t pfe_phy_if_del_mac_addr(pfe_phy_if_t *iface, pfe_mac_addr_t addr)
 errno_t pfe_phy_if_get_mac_addr(pfe_phy_if_t *iface, pfe_mac_addr_t addr)
 {
 	errno_t ret = EOK;
-	pfe_phy_if_mac_addr_list_entry_t *entry = NULL;
 
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == iface))
@@ -1941,23 +2534,10 @@ errno_t pfe_phy_if_get_mac_addr(pfe_phy_if_t *iface, pfe_mac_addr_t addr)
 	{
 		if (PFE_PHY_IF_EMAC == iface->type)
 		{
-			if (TRUE == LLIST_IsEmpty(&iface->mac_addr_list))
+			ret = pfe_mac_db_get_first_addr(iface->mac_db, MAC_DB_CRIT_ALL, PFE_TYPE_ANY, PFE_CFG_LOCAL_IF, addr);
+			if(EOK != ret)
 			{
-				ret = ENOENT;
-			}
-			else
-			{
-				/* Get first item from the list */
-				entry = LLIST_Data(iface->mac_addr_list.prNext, pfe_phy_if_mac_addr_list_entry_t, iterator);
-				if (entry != NULL)
-				{
-					(void)memcpy(addr, entry->addr, sizeof(pfe_mac_addr_t));
-				}
-				else
-				{
-					;
-				}
-				
+				NXP_LOG_WARNING("unable to get MAC address: %d\n", ret);
 			}
 		}
 		else if (PFE_PHY_IF_HIF == iface->type)
@@ -1983,17 +2563,16 @@ errno_t pfe_phy_if_get_mac_addr(pfe_phy_if_t *iface, pfe_mac_addr_t addr)
 /**
  * @brief		Delete MAC addresses added by owner with defined type
  * @param[in]	iface The interface instance
- * @param[in]	mode The flush mode (flush all or just certain type of MAC addresses)
+ * @param[in]	crit All, Owner, Type or Owner&Type criterion
+ * @param[in]	type Required type of MAC address (Broadcast, Multicast, Unicast, ANY) criterion
  * @param[in]	owner The identification of driver instance
  * @retval		EOK Success
  * @retval		EINVAL Invalid or missing argument
  * @retval		ENOEXEC Command failed
  */
-errno_t pfe_phy_if_flush_mac_addrs(pfe_phy_if_t *iface, pfe_flush_mode_t mode, pfe_ct_phy_if_id_t owner)
+errno_t pfe_phy_if_flush_mac_addrs(pfe_phy_if_t *iface, pfe_mac_db_crit_t crit, pfe_mac_type_t type, pfe_drv_id_t owner)
 {
 	errno_t ret = EOK;
-	pfe_phy_if_mac_addr_list_entry_t *entry;
-	LLIST_t *item, *tmp_item;
 
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == iface))
@@ -2018,7 +2597,11 @@ errno_t pfe_phy_if_flush_mac_addrs(pfe_phy_if_t *iface, pfe_flush_mode_t mode, p
 	{
 		if (PFE_PHY_IF_EMAC == iface->type)
 		{
-			ret = pfe_emac_flush_mac_addrs(iface->port.emac, mode, owner);
+			/* TODO: revisit flush modes on EMAC layer, following remap table is only temporary solution */
+			static const pfe_emac_crit_t crit_remap_table[4] = {EMAC_CRIT_BY_TYPE, EMAC_CRIT_BY_OWNER, EMAC_CRIT_BY_OWNER_AND_TYPE, EMAC_CRIT_ALL};
+			ct_assert(EMAC_CRIT_INVALID == sizeof(crit_remap_table));
+
+			ret = pfe_emac_flush_mac_addrs(iface->port.emac, crit_remap_table[crit], type, owner);
 			if (EOK != ret)
 			{
 				NXP_LOG_ERROR("Unable to flush multicast MAC addresses (owner ID %d): %d\n", owner, ret);
@@ -2026,29 +2609,10 @@ errno_t pfe_phy_if_flush_mac_addrs(pfe_phy_if_t *iface, pfe_flush_mode_t mode, p
 			}
 			else
 			{
-				/*	Remove associated MAC addresses due to flush mode */
-				LLIST_ForEachRemovable(item, tmp_item, &iface->mac_addr_list)
+				ret = pfe_mac_db_flush(iface->mac_db, crit, type, owner);
+				if(EOK != ret)
 				{
-					entry = LLIST_Data(item, pfe_phy_if_mac_addr_list_entry_t, iterator);
-					if ((NULL != entry) && (entry->owner == owner))
-					{
-						if ((mode == PFE_FLUSH_MODE_ALL) ||
-							((mode == PFE_FLUSH_MODE_MULTI) && (TRUE  == pfe_emac_is_multi(entry->addr))) ||
-							((mode == PFE_FLUSH_MODE_UNI)   && (FALSE == pfe_emac_is_multi(entry->addr))))
-						{
-							LLIST_Remove(&entry->iterator);
-							oal_mm_free(entry);
-							entry = NULL;
-						}
-						else
-						{
-							;
-						}
-					}
-					else
-					{
-						;
-					}
+					NXP_LOG_ERROR("Unable to flush MAC address from phy_if MAC database: %d\n", ret);
 				}
 			}
 		}
@@ -2065,7 +2629,7 @@ errno_t pfe_phy_if_flush_mac_addrs(pfe_phy_if_t *iface, pfe_flush_mode_t mode, p
 
 		if (EOK == ret)
 		{
-			NXP_LOG_INFO("All multicast addresses owned by driver instance ID %d were flushed from %s\n", owner, iface->name);
+			NXP_LOG_DEBUG("All multicast addresses owned by driver instance ID %d were flushed from %s\n", owner, iface->name);
 		}
 	}
 
@@ -2087,7 +2651,7 @@ errno_t pfe_phy_if_set_spd(pfe_phy_if_t *iface, uint32_t spd_addr)
 {
 	errno_t ret;
     /* Update configuration */
-    iface->phy_if_class.ipsec_spd = oal_htonl(spd_addr);        
+    iface->phy_if_class.ipsec_spd = oal_htonl(spd_addr);
     /* Propagate the change into the classifier */
     ret = pfe_phy_if_write_to_class_nostats(iface, &iface->phy_if_class);
     return ret;
@@ -2099,7 +2663,7 @@ errno_t pfe_phy_if_set_spd(pfe_phy_if_t *iface, uint32_t spd_addr)
  * @return Address of the SPD being used by the given physical interface. Value 0 means that no
  * *       SPD is in use thus the IPsec feature is disabled for the given interface.
  */
-uint32_t pfe_phy_if_get_spd(pfe_phy_if_t *iface)
+uint32_t pfe_phy_if_get_spd(const pfe_phy_if_t *iface)
 {
     return oal_ntohl(iface->phy_if_class.ipsec_spd);
 }
@@ -2234,7 +2798,7 @@ errno_t pfe_phy_if_get_stats(pfe_phy_if_t *iface, pfe_ct_phy_if_stats_t *stat)
 		return ENOMEM;
 	}
 	/* Gather memory from all PEs*/
-	ret = pfe_class_gather_read_dmem(iface->class, stats, (void *)iface->dmem_base + offset, buffer_len, sizeof(pfe_ct_phy_if_stats_t));
+	ret = pfe_class_gather_read_dmem(iface->class, stats, (iface->dmem_base + offset), buffer_len, sizeof(pfe_ct_phy_if_stats_t));
 
 	/* Calculate total statistics */
 	for(i = 0U; i < pfe_class_get_num_of_pes(iface->class); i++)
@@ -2261,7 +2825,7 @@ errno_t pfe_phy_if_get_stats(pfe_phy_if_t *iface, pfe_ct_phy_if_stats_t *stat)
  * @param[in]	iface The interface instance
  * @return		Interface ID
  */
-__attribute__((pure)) pfe_ct_phy_if_id_t pfe_phy_if_get_id(pfe_phy_if_t *iface)
+__attribute__((pure)) pfe_ct_phy_if_id_t pfe_phy_if_get_id(const pfe_phy_if_t *iface)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == iface))
@@ -2279,7 +2843,7 @@ __attribute__((pure)) pfe_ct_phy_if_id_t pfe_phy_if_get_id(pfe_phy_if_t *iface)
  * @param[in]	iface The interface instance
  * @return		Pointer to interface name string or NULL if not found/failed
  */
-__attribute__((pure)) char_t *pfe_phy_if_get_name(pfe_phy_if_t *iface)
+__attribute__((pure)) char_t *pfe_phy_if_get_name(const pfe_phy_if_t *iface)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == iface))
@@ -2301,7 +2865,7 @@ __attribute__((pure)) char_t *pfe_phy_if_get_name(pfe_phy_if_t *iface)
  * @param[in]	verb_level 	Verbosity level
  * @return		Number of bytes written to the buffer
  */
-uint32_t pfe_phy_if_get_text_statistics(pfe_phy_if_t *iface, char_t *buf, uint32_t buf_len, uint8_t verb_level)
+uint32_t pfe_phy_if_get_text_statistics(const pfe_phy_if_t *iface, char_t *buf, uint32_t buf_len, uint8_t verb_level)
 {
 	uint32_t len = 0U;
 	pfe_ct_phy_if_t phy_if_class = {0U};
@@ -2323,7 +2887,7 @@ uint32_t pfe_phy_if_get_text_statistics(pfe_phy_if_t *iface, char_t *buf, uint32
 			same code, also the data are the same (except statistics counters...).
 			Returned data will be in __NETWORK__ endian format.
 		*/
-		if (EOK != pfe_class_read_dmem(iface->class, i, &phy_if_class, (void *)iface->dmem_base, sizeof(pfe_ct_phy_if_t)))
+		if (EOK != pfe_class_read_dmem(iface->class, i, &phy_if_class, iface->dmem_base, sizeof(pfe_ct_phy_if_t)))
 		{
 			len += oal_util_snprintf(buf + len, buf_len - len, "[PhyIF 0x%x]: Unable to read DMEM\n", iface->id);
 		}
diff --git a/sw/pfe_platform/src/pfe_phy_if_slave.c b/sw/pfe_platform/src/pfe_phy_if_slave.c
index 9db65b3..b6eadce 100644
--- a/sw/pfe_platform/src/pfe_phy_if_slave.c
+++ b/sw/pfe_platform/src/pfe_phy_if_slave.c
@@ -18,11 +18,11 @@
  */
 
 #include "pfe_cfg.h"
-#ifdef PFE_CFG_PFE_SLAVE
-
 #include "oal.h"
-#include "hal.h"
 
+#ifdef PFE_CFG_PFE_SLAVE
+#include "hal.h"
+#include "pfe_platform_cfg.h"
 #include "pfe_ct.h"
 #include "linked_list.h"
 #include "pfe_phy_if.h"
@@ -33,18 +33,12 @@ struct pfe_phy_if_tag
 {
 	pfe_ct_phy_if_id_t id;
 	char_t *name;
-	LLIST_t mac_addr_list; /* Useful for the future function "get_all_mac_addrs" */
+	pfe_mac_db_t *mac_db; /* MAC database */
 	oal_mutex_t lock;
 	bool_t is_enabled;
 };
 
-typedef struct pfe_mac_addr_entry_tag
-{
-	pfe_mac_addr_t addr;	/*	The MAC address */
-	LLIST_t iterator;		/*	List chain entry */
-} pfe_mac_addr_list_entry_t;
-
-static bool_t pfe_phy_if_has_log_if_nolock(pfe_phy_if_t *iface, pfe_log_if_t *log_if);
+static bool_t pfe_phy_if_has_log_if_nolock(const pfe_phy_if_t *iface, const pfe_log_if_t *log_if);
 
 static errno_t pfe_phy_if_db_lock(void)
 {
@@ -81,7 +75,7 @@ static errno_t pfe_phy_if_db_unlock(void)
  * @param[in]	name Name of the interface
  * @return		The interface instance or NULL if failed
  */
-pfe_phy_if_t *pfe_phy_if_create(pfe_class_t *class, pfe_ct_phy_if_id_t id, char_t *name)
+pfe_phy_if_t *pfe_phy_if_create(pfe_class_t *class, pfe_ct_phy_if_id_t id, const char_t *name)
 {
 	pfe_platform_rpc_pfe_phy_if_create_arg_t req = {0U};
 	pfe_phy_if_t *iface;
@@ -104,10 +98,17 @@ pfe_phy_if_t *pfe_phy_if_create(pfe_class_t *class, pfe_ct_phy_if_id_t id, char_
 	else
 	{
 		memset(iface, 0, sizeof(pfe_phy_if_t));
-		LLIST_Init(&iface->mac_addr_list);
 		iface->id = id;
 	}
 
+	iface->mac_db = pfe_mac_db_create();
+	if (NULL == iface->mac_db)
+	{
+		NXP_LOG_ERROR("Could not create MAC database\n");
+		oal_mm_free(iface);
+		return NULL;
+	}
+
 	if (NULL == name)
 	{
 		iface->name = NULL;
@@ -139,12 +140,9 @@ pfe_phy_if_t *pfe_phy_if_create(pfe_class_t *class, pfe_ct_phy_if_id_t id, char_
 /**
  * @brief		Destroy interface instance
  * @param[in]	iface The interface instance
- * @return		EOK success, error code otherwise
  */
-errno_t pfe_phy_if_destroy(pfe_phy_if_t *iface)
+void pfe_phy_if_destroy(pfe_phy_if_t *iface)
 {
-	LLIST_t *item, *tmp_item;
-	pfe_mac_addr_list_entry_t *entry;
 	pfe_platform_rpc_pfe_phy_if_flush_mac_addrs_arg_t arg = {0};
 	errno_t ret = EOK;
 
@@ -157,25 +155,19 @@ errno_t pfe_phy_if_destroy(pfe_phy_if_t *iface)
 
 		/*	Ask the master driver to remove all associated MAC addresses */
 		arg.phy_if_id = iface->id;
-		arg.mode = PFE_FLUSH_MODE_ALL;
+		arg.crit = MAC_DB_CRIT_ALL;
+		arg.type = PFE_TYPE_ANY;
 		ret = pfe_idex_master_rpc(PFE_PLATFORM_RPC_PFE_PHY_IF_FLUSH_MAC_ADDRS, &arg, sizeof(arg), NULL, 0U);
 		if (EOK != ret)
 		{
-			NXP_LOG_DEBUG("PFE_PLATFORM_RPC_PFE_PHY_IF_FLUSH_MAC_ADDRS failed: %d\n", ret);
+			NXP_LOG_ERROR("PFE_PLATFORM_RPC_PFE_PHY_IF_FLUSH_MAC_ADDRS failed: %d\n", ret);
 		}
-		else
+
+		/* Destroy local MAC database */
+		ret = pfe_mac_db_destroy(iface->mac_db);
+		if (EOK != ret)
 		{
-			/*	Remove MAC addresses also from local list */
-			LLIST_ForEachRemovable(item, tmp_item, &iface->mac_addr_list)
-			{
-				entry = LLIST_Data(item, pfe_mac_addr_list_entry_t, iterator);
-				if (NULL != entry)
-				{
-					LLIST_Remove(&entry->iterator);
-					oal_mm_free(entry);
-					entry = NULL;
-				}
-			}	
+			NXP_LOG_WARNING("Unable to destroy MAC database: %d\n", ret);
 		}
 
 		if (EOK != oal_mutex_unlock(&iface->lock))
@@ -197,7 +189,7 @@ errno_t pfe_phy_if_destroy(pfe_phy_if_t *iface)
 		oal_mm_free(iface);
 	}
 	
-	return ret;
+	return;
 }
 
 /**
@@ -205,7 +197,7 @@ errno_t pfe_phy_if_destroy(pfe_phy_if_t *iface)
  * @param[in]	iface The interface instance
  * @return		The classifier instance
  */
-__attribute__((pure)) pfe_class_t *pfe_phy_if_get_class(pfe_phy_if_t *iface)
+__attribute__((pure)) pfe_class_t *pfe_phy_if_get_class(const pfe_phy_if_t *iface)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == iface))
@@ -247,12 +239,14 @@ errno_t pfe_phy_if_add_log_if(pfe_phy_if_t *iface, pfe_log_if_t *log_if)
 	return ret;
 }
 
-static bool_t pfe_phy_if_has_log_if_nolock(pfe_phy_if_t *iface, pfe_log_if_t *log_if)
+static bool_t pfe_phy_if_has_log_if_nolock(const pfe_phy_if_t *iface, const pfe_log_if_t *log_if)
 {
 	pfe_platform_rpc_pfe_phy_if_has_log_if_arg_t arg = {0};
 	errno_t ret;
 	bool_t val = TRUE;
 
+	ct_assert(sizeof(arg.log_if_id) == sizeof(uint8_t));
+
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely((NULL == iface) || (NULL == log_if)))
 	{
@@ -264,7 +258,6 @@ static bool_t pfe_phy_if_has_log_if_nolock(pfe_phy_if_t *iface, pfe_log_if_t *lo
 	/*	Ask master driver if such logical interface is associated with the physical one */
 	arg.phy_if_id = iface->id;
 
-	ct_assert(sizeof(arg.log_if_id) == sizeof(uint8_t));
 	arg.log_if_id = pfe_log_if_get_id(log_if);
 
 	(void)pfe_phy_if_db_lock();
@@ -296,7 +289,7 @@ static bool_t pfe_phy_if_has_log_if_nolock(pfe_phy_if_t *iface, pfe_log_if_t *lo
  * @return		TRUE if logical interface is bound to the physical one. False
  * 				otherwise.
  */
-bool_t pfe_phy_if_has_log_if(pfe_phy_if_t *iface, pfe_log_if_t *log_if)
+bool_t pfe_phy_if_has_log_if(pfe_phy_if_t *iface, const pfe_log_if_t *log_if)
 {
 	bool_t match = FALSE;
 
@@ -332,7 +325,7 @@ bool_t pfe_phy_if_has_log_if(pfe_phy_if_t *iface, pfe_log_if_t *log_if)
  * @retval		ENOEXEC Command failed
  * @retval		ENOENT Entry not found
  */
-errno_t pfe_phy_if_del_log_if(pfe_phy_if_t *iface, pfe_log_if_t *log_if)
+errno_t pfe_phy_if_del_log_if(pfe_phy_if_t *iface, const pfe_log_if_t *log_if)
 {
 	errno_t ret = EOK;
 
@@ -686,6 +679,78 @@ errno_t pfe_phy_if_disable(pfe_phy_if_t *iface)
 	return ret;
 }
 
+/**
+ * @brief		Set physical interface flag
+ * @param[in]	iface The interface instance
+ * @param[in]	flag The flag to set
+ * @return		EOK if success, error code otherwise
+ */
+errno_t pfe_phy_if_set_flag(pfe_phy_if_t *iface, pfe_ct_if_flags_t flag)
+{
+	errno_t ret;
+
+#if defined(PFE_CFG_NULL_ARG_CHECK)
+	if (unlikely(NULL == iface))
+	{
+		NXP_LOG_ERROR("NULL argument received\n");
+		return EINVAL;
+	}
+#endif /* PFE_CFG_NULL_ARG_CHECK */
+
+	/*	We're not going to allow slave driver to do this */
+	NXP_LOG_ERROR("%s: Not supported\n", __func__);
+	ret = ENOTSUP;
+
+	return ret;
+}
+
+/**
+ * @brief		Clear physical interface flag
+ * @param[in]	iface The interface instance
+ * @param[in]	flag The flag to clear
+ * @return		EOK if success, error code otherwise
+ */
+errno_t pfe_phy_if_clear_flag(pfe_phy_if_t *iface, pfe_ct_if_flags_t flag)
+{
+	errno_t ret;
+
+#if defined(PFE_CFG_NULL_ARG_CHECK)
+	if (unlikely(NULL == iface))
+	{
+		NXP_LOG_ERROR("NULL argument received\n");
+		return EINVAL;
+	}
+#endif /* PFE_CFG_NULL_ARG_CHECK */
+
+	/*	We're not going to allow slave driver to do this */
+	NXP_LOG_ERROR("%s: Not supported\n", __func__);
+	ret = ENOTSUP;
+
+	return ret;
+}
+
+/**
+ * @brief		Get physical interface flag
+ * @param[in]	iface The interface instance
+ * @param[in]	flag The flag to check
+ * @return		Flag if 'flag' is set, zero (IF_FL_NONE) otherwise
+ */
+pfe_ct_if_flags_t pfe_phy_if_get_flag(pfe_phy_if_t *iface, pfe_ct_if_flags_t flag)
+{
+#if defined(PFE_CFG_NULL_ARG_CHECK)
+	if (unlikely(NULL == iface))
+	{
+		NXP_LOG_ERROR("NULL argument received\n");
+		return IF_FL_NONE;
+	}
+#endif /* PFE_CFG_NULL_ARG_CHECK */
+
+	/*	We're not going to allow slave driver to do this */
+	NXP_LOG_ERROR("%s: Not supported\n", __func__);
+
+	return IF_FL_NONE;
+}
+
 /**
  * @brief		Check if phy_if in promiscuous mode
  * @param[in]	iface The interface instance
@@ -716,7 +781,7 @@ bool_t pfe_phy_if_is_promisc(pfe_phy_if_t *iface)
 
 	/*	Ask the master driver to enable the interface */
 	arg.phy_if_id = iface->id;
-	ret = pfe_idex_master_rpc(PFE_PLATFORM_RPC_PFE_PHY_IF_IS_ENABLED, &arg, sizeof(arg), &rpc_ret, sizeof(rpc_ret));
+	ret = pfe_idex_master_rpc(PFE_PLATFORM_RPC_PFE_PHY_IF_IS_PROMISC, &arg, sizeof(arg), &rpc_ret, sizeof(rpc_ret));
 	if (EOK != ret)
 	{
 		NXP_LOG_DEBUG("PFE_PLATFORM_RPC_PFE_PHY_IF_IS_ENABLED failed: %d\n", ret);
@@ -824,6 +889,94 @@ errno_t pfe_phy_if_promisc_disable(pfe_phy_if_t *iface)
 	return ret;
 }
 
+/**
+ * @brief		Enable loopback mode
+ * @param[in]	iface The interface instance
+ * @retval		EOK Success
+ * @retval		EINVAL Invalid or missing argument
+ */
+errno_t pfe_phy_if_loopback_enable(pfe_phy_if_t *iface)
+{
+	errno_t ret = EOK;
+	pfe_platform_rpc_pfe_phy_if_loopback_enable_arg_t arg = {0};
+
+#if defined(PFE_CFG_NULL_ARG_CHECK)
+	if (unlikely(NULL == iface))
+	{
+		NXP_LOG_ERROR("NULL argument received\n");
+		return EINVAL;
+	}
+#endif /* PFE_CFG_NULL_ARG_CHECK */
+
+	if (EOK != oal_mutex_lock(&iface->lock))
+	{
+		NXP_LOG_DEBUG("mutex lock failed\n");
+	}
+
+	(void)pfe_phy_if_db_lock();
+
+	/* Ask the master driver to enable the loopback mode */
+	arg.phy_if_id = iface->id;
+	ret = pfe_idex_master_rpc(PFE_PLATFORM_RPC_PFE_PHY_IF_LOOPBACK_ENABLE, &arg, sizeof(arg), NULL, 0U);
+	if (EOK != ret)
+	{
+		NXP_LOG_DEBUG("PFE_PLATFORM_RPC_PFE_PHY_IF_LOOPBACK_ENABLE failed: %d\n", ret);
+	}
+
+	(void)pfe_phy_if_db_unlock();
+
+	if (EOK != oal_mutex_unlock(&iface->lock))
+	{
+		NXP_LOG_DEBUG("mutex unlock failed\n");
+	}
+
+	return ret;
+}
+
+/**
+ * @brief		Disable loopback mode
+ * @param[in]	iface The interface instance
+ * @retval		EOK Success
+ * @retval		EINVAL Invalid or missing argument
+ */
+errno_t pfe_phy_if_loopback_disable(pfe_phy_if_t *iface)
+{
+	errno_t ret = EOK;
+	pfe_platform_rpc_pfe_phy_if_loopback_disable_arg_t arg = {0};
+
+#if defined(PFE_CFG_NULL_ARG_CHECK)
+	if (unlikely(NULL == iface))
+	{
+		NXP_LOG_ERROR("NULL argument received\n");
+		return EINVAL;
+	}
+#endif /* PFE_CFG_NULL_ARG_CHECK */
+
+	if (EOK != oal_mutex_lock(&iface->lock))
+	{
+		NXP_LOG_DEBUG("mutex lock failed\n");
+	}
+
+	(void)pfe_phy_if_db_lock();
+
+	/* Ask the master driver to disable the loopback mode */
+	arg.phy_if_id = iface->id;
+	ret = pfe_idex_master_rpc(PFE_PLATFORM_RPC_PFE_PHY_IF_LOOPBACK_DISABLE, &arg, sizeof(arg), NULL, 0U);
+	if (EOK != ret)
+	{
+		NXP_LOG_DEBUG("PFE_PLATFORM_RPC_PFE_PHY_IF_PROMICS_DISABLE failed: %d\n", ret);
+	}
+
+	(void)pfe_phy_if_db_unlock();
+
+	if (EOK != oal_mutex_unlock(&iface->lock))
+	{
+		NXP_LOG_DEBUG("mutex unlock failed\n");
+	}
+
+	return ret;
+}
+
 /**
  * @brief		Enable ALLMULTI mode
  * @param[in]	iface The interface instance
@@ -892,6 +1045,64 @@ errno_t pfe_phy_if_allmulti_disable(pfe_phy_if_t *iface)
 	return ret;
 }
 
+/**
+ * @brief       Get rx/tx flow control config
+ * @param[in]   iface The interface instance
+ * @param[out]  tx_ena tx flow control status
+ * @param[out]  rx_ena rx flow control status
+ * @return      EOK on success
+ */
+errno_t pfe_phy_if_get_flow_control(pfe_phy_if_t *iface, bool_t* tx_ena, bool_t* rx_ena)
+{
+#if defined(PFE_CFG_NULL_ARG_CHECK)
+	if (unlikely(NULL == iface))
+	{
+		NXP_LOG_ERROR("NULL argument received\n");
+		return EINVAL;
+        }
+#endif /* PFE_CFG_NULL_ARG_CHECK */
+
+	return ENOTSUP;
+}
+
+/**
+ * @brief       Set tx flow control
+ * @param[in]   iface The interface instance
+ * @param[in]   tx_ena TRUE: enable flow control, FALSE: disable flow control
+ * @return      EOK on success
+ */
+errno_t pfe_phy_if_set_tx_flow_control(pfe_phy_if_t *iface, bool_t tx_ena)
+{
+#if defined(PFE_CFG_NULL_ARG_CHECK)
+	if (unlikely(NULL == iface))
+	{
+		NXP_LOG_ERROR("NULL argument received\n");
+		return EINVAL;
+	}
+#endif /* PFE_CFG_NULL_ARG_CHECK */
+
+	return ENOTSUP;
+}
+
+/**
+ * @brief       Set rx flow control
+ * @param[in]   iface The interface instance
+ * @param[in]   rx_ena TRUE: enable flow control, FALSE: disable flow control
+ * @return      EOK on success
+ */
+errno_t pfe_phy_if_set_rx_flow_control(pfe_phy_if_t *iface, bool_t rx_ena)
+{
+#if defined(PFE_CFG_NULL_ARG_CHECK)
+	if (unlikely(NULL == iface))
+	{
+		NXP_LOG_ERROR("NULL argument received\n");
+		return EINVAL;
+	}
+#endif /* PFE_CFG_NULL_ARG_CHECK */
+
+	return ENOTSUP;
+}
+
 /**
  * @brief		Add new MAC address
  * @param[in]	iface The interface instance
@@ -901,11 +1112,13 @@ errno_t pfe_phy_if_allmulti_disable(pfe_phy_if_t *iface)
  * @retval		EINVAL Invalid or missing argument
  * @retval		ENOEXEC Command failed
  */
-errno_t pfe_phy_if_add_mac_addr(pfe_phy_if_t *iface, pfe_mac_addr_t addr, pfe_ct_phy_if_id_t owner)
+errno_t pfe_phy_if_add_mac_addr(pfe_phy_if_t *iface, const pfe_mac_addr_t addr, pfe_ct_phy_if_id_t owner)
 {
 	errno_t ret = EOK;
 	pfe_platform_rpc_pfe_phy_if_add_mac_addr_arg_t arg = {0};
-	pfe_mac_addr_list_entry_t *entry;
+
+	ct_assert(sizeof(pfe_mac_addr_t) == sizeof(arg.mac_addr));
+
 	(void)owner; /* Owner will be added directly to the RPC */
 
 #if defined(PFE_CFG_NULL_ARG_CHECK)
@@ -923,20 +1136,10 @@ errno_t pfe_phy_if_add_mac_addr(pfe_phy_if_t *iface, pfe_mac_addr_t addr, pfe_ct
 
 	(void)pfe_phy_if_db_lock();
 
-	/*	Add address to local list */
-	entry = oal_mm_malloc(sizeof(pfe_mac_addr_list_entry_t));
-	if (NULL == entry)
+	/*	Add address to local database */
+	ret = pfe_mac_db_add_addr(iface->mac_db, addr, owner);
+	if(EOK == ret)
 	{
-		NXP_LOG_ERROR("Memory allocation failed\n");
-		ret = ENOMEM;
-	}
-	else
-	{
-		memcpy(entry->addr, addr, sizeof(pfe_mac_addr_t));
-		LLIST_AddAtEnd(&entry->iterator, &iface->mac_addr_list);
-
-		ct_assert(sizeof(pfe_mac_addr_t) == sizeof(arg.mac_addr));
-
 		/*	Ask the master driver to add the MAC address */
 		memcpy(&arg.mac_addr[0], addr, sizeof(arg.mac_addr));
 		arg.phy_if_id = iface->id;
@@ -944,11 +1147,11 @@ errno_t pfe_phy_if_add_mac_addr(pfe_phy_if_t *iface, pfe_mac_addr_t addr, pfe_ct
 		if (EOK != ret)
 		{
 			NXP_LOG_DEBUG("PFE_PLATFORM_RPC_PFE_PHY_IF_ADD_MAC_ADDR failed: %d\n", ret);
-
-			/*	Remove the address from local list */
-			LLIST_Remove(&entry->iterator);
-			oal_mm_free(entry);
-			entry = NULL;
+			ret = pfe_mac_db_del_addr(iface->mac_db, addr);
+			if(EOK != ret)
+			{
+				NXP_LOG_WARNING("Unable to remove MAC address from phy_if MAC database: %d\n", ret);
+			}
 		}
 	}
 
@@ -970,13 +1173,12 @@ errno_t pfe_phy_if_add_mac_addr(pfe_phy_if_t *iface, pfe_mac_addr_t addr, pfe_ct
  * @retval		EINVAL Invalid or missing argument
  * @retval		ENOENT Address not found
  */
-errno_t pfe_phy_if_del_mac_addr(pfe_phy_if_t *iface, pfe_mac_addr_t addr)
+errno_t pfe_phy_if_del_mac_addr(pfe_phy_if_t *iface, const pfe_mac_addr_t addr)
 {
 	errno_t ret = EOK;
 	pfe_platform_rpc_pfe_phy_if_del_mac_addr_arg_t arg = {0};
-	pfe_mac_addr_list_entry_t *entry;
-	LLIST_t *item;
-	bool_t found = FALSE;
+
+	ct_assert(sizeof(pfe_mac_addr_t) == sizeof(arg.mac_addr));
 
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == iface))
@@ -993,8 +1195,6 @@ errno_t pfe_phy_if_del_mac_addr(pfe_phy_if_t *iface, pfe_mac_addr_t addr)
 
 	(void)pfe_phy_if_db_lock();
 
-	ct_assert(sizeof(pfe_mac_addr_t) == sizeof(arg.mac_addr));
-
 	/*	Ask the master driver to delete the MAC address */
 	memcpy(&arg.mac_addr[0], addr, sizeof(arg.mac_addr));
 	arg.phy_if_id = iface->id;
@@ -1005,27 +1205,10 @@ errno_t pfe_phy_if_del_mac_addr(pfe_phy_if_t *iface, pfe_mac_addr_t addr)
 	}
 	else
 	{
-		/*	Get the local list entry */
-		LLIST_ForEach(item, &iface->mac_addr_list)
-		{
-			entry = LLIST_Data(item, pfe_mac_addr_list_entry_t, iterator);
-			if (0 == memcmp(addr, entry->addr, sizeof(pfe_mac_addr_t)))
-			{
-				found = TRUE;
-				break;
-			}
-		}
-
-		if (FALSE == found)
-		{
-			NXP_LOG_DEBUG("FATAL: MAC address not found\n");
-		}
-		else
+		ret = pfe_mac_db_del_addr(iface->mac_db, addr);
+		if(EOK != ret)
 		{
-			/*	Remove the address from local list */
-			LLIST_Remove(&entry->iterator);
-			oal_mm_free(entry);
-			entry = NULL;
+			NXP_LOG_WARNING("Unable to remove MAC address from phy_if MAC database: %d\n", ret);
 		}
 	}
 
@@ -1039,6 +1222,24 @@ errno_t pfe_phy_if_del_mac_addr(pfe_phy_if_t *iface, pfe_mac_addr_t addr)
 	return ret;
 }
 
+/**
+ * @brief		Get handle of internal MAC database
+ * @param[in]	iface The interface instance
+ * @retval		Database handle.
+ */
+pfe_mac_db_t *pfe_phy_if_get_mac_db(const pfe_phy_if_t *iface)
+{
+#if defined(PFE_CFG_NULL_ARG_CHECK)
+	if (unlikely(NULL == iface))
+	{
+		NXP_LOG_ERROR("NULL argument received\n");
+		return NULL;
+	}
+#endif /* PFE_CFG_NULL_ARG_CHECK */
+
+	return iface->mac_db;
+}
+
 /**
  * @brief		Get MAC address
  * @param[in]	iface The interface instance
@@ -1050,7 +1251,6 @@ errno_t pfe_phy_if_del_mac_addr(pfe_phy_if_t *iface, pfe_mac_addr_t addr)
 errno_t pfe_phy_if_get_mac_addr(pfe_phy_if_t *iface, pfe_mac_addr_t addr)
 {
 	errno_t ret = EOK;
-	pfe_mac_addr_list_entry_t *entry;
 
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == iface))
@@ -1065,19 +1265,10 @@ errno_t pfe_phy_if_get_mac_addr(pfe_phy_if_t *iface, pfe_mac_addr_t addr)
 		NXP_LOG_DEBUG("mutex lock failed\n");
 	}
 
-	if (FALSE == LLIST_IsEmpty(&iface->mac_addr_list))
+	ret = pfe_mac_db_get_first_addr(iface->mac_db, MAC_DB_CRIT_ALL, PFE_TYPE_ANY, PFE_CFG_LOCAL_IF, addr);
+	if(EOK != ret)
 	{
-		/*	Get first address from the list */
-		entry = (pfe_mac_addr_list_entry_t *)LLIST_Data(iface->mac_addr_list.prNext, pfe_mac_addr_list_entry_t, iterator);
-
-		/*	Provide the MAC address */
-		memcpy(addr, entry->addr, sizeof(pfe_mac_addr_t));
-		ret = EOK;
-	}
-	else
-	{
-		/*	No address assigned */
-		ret = ENOENT;
+		NXP_LOG_WARNING("unable to get MAC address: %d\n", ret);
 	}
 
 	if (EOK != oal_mutex_unlock(&iface->lock))
@@ -1091,18 +1282,17 @@ errno_t pfe_phy_if_get_mac_addr(pfe_phy_if_t *iface, pfe_mac_addr_t addr)
 /**
  * @brief		Delete MAC addresses added by owner with defined type
  * @param[in]	iface The interface instance
- * @param[in]	mode The flush mode (flush all or just certain type of MAC addresses)
- * @param[in]	owner The identification of driver instance
+ * @param[in]	crit All, Owner, Type or Owner&Type criterion
+ * @param[in]	type Required type of MAC address (Broadcast, Multicast, Unicast, ANY) criterion
+ * @param[in]	owner Required owner of MAC address
  * @retval		EOK Success
  * @retval		EINVAL Invalid or missing argument
  * @retval		ENOEXEC Command failed
  */
-errno_t pfe_phy_if_flush_mac_addrs(pfe_phy_if_t *iface, pfe_flush_mode_t mode, pfe_ct_phy_if_id_t owner)
+errno_t pfe_phy_if_flush_mac_addrs(pfe_phy_if_t *iface, pfe_mac_db_crit_t crit, pfe_mac_type_t type, pfe_ct_phy_if_id_t owner)
 {
 	errno_t ret = EOK;
 	pfe_platform_rpc_pfe_phy_if_flush_mac_addrs_arg_t arg = {0};
-	pfe_mac_addr_list_entry_t *entry;
-	LLIST_t *item, *tmp_item;
 	(void)owner; /* Owner will be added directly to the RPC */
 
 #if defined(PFE_CFG_NULL_ARG_CHECK)
@@ -1122,7 +1312,8 @@ errno_t pfe_phy_if_flush_mac_addrs(pfe_phy_if_t *iface, pfe_flush_mode_t mode, p
 
 	/*	Ask the master driver to flush owner's MAC addresses due to flush mode */
 	arg.phy_if_id = iface->id;
-	arg.mode = mode;
+	arg.crit = crit;
+	arg.type = type;
 	ret = pfe_idex_master_rpc(PFE_PLATFORM_RPC_PFE_PHY_IF_FLUSH_MAC_ADDRS, &arg, sizeof(arg), NULL, 0U);
 	if (EOK != ret)
 	{
@@ -1130,21 +1321,11 @@ errno_t pfe_phy_if_flush_mac_addrs(pfe_phy_if_t *iface, pfe_flush_mode_t mode, p
 	}
 	else
 	{
-		/*	Remove MAC addresses also from local list */
-		LLIST_ForEachRemovable(item, tmp_item, &iface->mac_addr_list)
+		/*	Remove MAC addresses also from local database */
+		ret = pfe_mac_db_flush(iface->mac_db, crit, type, owner);
+		if(EOK != ret)
 		{
-			entry = LLIST_Data(item, pfe_mac_addr_list_entry_t, iterator);
-			if (NULL != entry)
-			{
-				if ((mode == PFE_FLUSH_MODE_ALL) ||
-					((mode == PFE_FLUSH_MODE_MULTI) && (TRUE  == pfe_emac_is_multi(entry->addr))) ||
-					((mode == PFE_FLUSH_MODE_UNI)   && (FALSE == pfe_emac_is_multi(entry->addr))))
-				{
-					LLIST_Remove(&entry->iterator);
-					oal_mm_free(entry);
-					entry = NULL;
-				}
-			}
+			NXP_LOG_DEBUG("Unable to flush MAC address from phy_if MAC database: %d\n", ret);
 		}	
 	}
 
@@ -1163,7 +1344,7 @@ errno_t pfe_phy_if_flush_mac_addrs(pfe_phy_if_t *iface, pfe_flush_mode_t mode, p
  * @param[in]	iface The interface instance
  * @return		Interface ID
  */
-__attribute__((pure)) pfe_ct_phy_if_id_t pfe_phy_if_get_id(pfe_phy_if_t *iface)
+__attribute__((pure)) pfe_ct_phy_if_id_t pfe_phy_if_get_id(const pfe_phy_if_t *iface)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == iface))
@@ -1181,7 +1362,7 @@ __attribute__((pure)) pfe_ct_phy_if_id_t pfe_phy_if_get_id(pfe_phy_if_t *iface)
  * @param[in]	iface The interface instance
  * @return		Pointer to interface name string or NULL if not found/failed
  */
-__attribute__((pure)) char_t *pfe_phy_if_get_name(pfe_phy_if_t *iface)
+__attribute__((pure)) char_t *pfe_phy_if_get_name(const pfe_phy_if_t *iface)
 {
 	static char_t *unknown = "(unknown)";
 
@@ -1259,7 +1440,7 @@ errno_t pfe_phy_if_get_stats(pfe_phy_if_t *iface, pfe_ct_phy_if_stats_t *stat)
  * @param[in]	verb_level 	Verbosity level
  * @return		Number of bytes written to the buffer
  */
-uint32_t pfe_phy_if_get_text_statistics(pfe_phy_if_t *iface, char_t *buf, uint32_t buf_len, uint8_t verb_level)
+uint32_t pfe_phy_if_get_text_statistics(const pfe_phy_if_t *iface, char_t *buf, uint32_t buf_len, uint8_t verb_level)
 {
 	uint32_t len = 0U;
 
diff --git a/sw/pfe_platform/src/pfe_rtable.c b/sw/pfe_platform/src/pfe_rtable.c
index 101e37e..99abc88 100644
--- a/sw/pfe_platform/src/pfe_rtable.c
+++ b/sw/pfe_platform/src/pfe_rtable.c
@@ -61,17 +61,17 @@ typedef union
  */
 struct pfe_rtable_tag
 {
-	void *htable_base_pa;					/*	Hash table: Base physical address */
-	void *htable_base_va;					/*	Hash table: Base virtual address */
-	void *htable_end_pa;					/*	Hash table: End of hash table, physical */
-	void *htable_end_va;					/*	Hash table: End of hash table, virtual */
+	addr_t htable_base_pa;					/*	Hash table: Base physical address */
+	addr_t htable_base_va;					/*	Hash table: Base virtual address */
+	addr_t htable_end_pa;					/*	Hash table: End of hash table, physical */
+	addr_t htable_end_va;					/*	Hash table: End of hash table, virtual */
 	addr_t htable_va_pa_offset;				/*	Offset = VA - PA */
 	uint32_t htable_size;					/*	Hash table: Number of entries */
 
-	void *pool_base_pa;						/*	Pool: Base physical address */
-	void *pool_base_va;						/*	Pool: Base virtual address */
-	void *pool_end_pa;						/*	Pool: End of pool, physical */
-	void *pool_end_va;						/*	Pool: End of pool, virtual */
+	addr_t pool_base_pa;						/*	Pool: Base physical address */
+	addr_t pool_base_va;						/*	Pool: Base virtual address */
+	addr_t pool_end_pa;						/*	Pool: End of pool, physical */
+	addr_t pool_end_va;						/*	Pool: End of pool, virtual */
 	addr_t pool_va_pa_offset;				/*	Offset = VA - PA */
 	uint32_t pool_size;						/*	Pool: Number of entries */
 	fifo_t *pool_va;						/*	Pool of entries (virtual addresses) */
@@ -433,13 +433,13 @@ static bool_t pfe_rtable_phys_entry_is_htable(pfe_rtable_t *rtable, pfe_ct_rtabl
 	}
 #endif /* PFE_CFG_NULL_ARG_CHECK */
 
-	if (((void *)phys_entry >= rtable->htable_base_va) && ((void *)phys_entry < rtable->htable_end_va))
+	if (((addr_t)phys_entry >= rtable->htable_base_va) && ((addr_t)phys_entry < rtable->htable_end_va))
 	{
 		return TRUE;
 	}
 	else
 	{
-		if (((void *)phys_entry >= rtable->htable_base_pa) && ((void *)phys_entry < rtable->htable_end_pa))
+		if (((addr_t)phys_entry >= rtable->htable_base_pa) && ((addr_t)phys_entry < rtable->htable_end_pa))
 		{
 			return TRUE;
 		}
@@ -467,13 +467,13 @@ static bool_t pfe_rtable_phys_entry_is_pool(pfe_rtable_t *rtable, pfe_ct_rtable_
 	}
 #endif /* PFE_CFG_NULL_ARG_CHECK */
 
-	if (((void *)phys_entry >= rtable->pool_base_va) && ((void *)phys_entry < rtable->pool_end_va))
+	if (((addr_t)phys_entry >= rtable->pool_base_va) && ((addr_t)phys_entry < rtable->pool_end_va))
 	{
 		return TRUE;
 	}
 	else
 	{
-		if (((void *)phys_entry >= rtable->pool_base_pa) && ((void *)phys_entry < rtable->pool_end_pa))
+		if (((addr_t)phys_entry >= rtable->pool_base_pa) && ((addr_t)phys_entry < rtable->pool_end_pa))
 		{
 			return TRUE;
 		}
@@ -977,12 +977,12 @@ errno_t pfe_rtable_entry_set_out_sip(pfe_rtable_entry_t *entry, pfe_ip_addr_t *o
 
 	if ((IPV_INVALID != entry->phys_entry->flag_ipv6) && (output_sip->is_ipv4))
 	{
-		memcpy(&entry->phys_entry->args.v4.sip, &output_sip->v4, 4);
+		memcpy(&entry->phys_entry->args.ipv.v4.sip, &output_sip->v4, 4);
 		entry->phys_entry->flag_ipv6 = IPV4;
 	}
 	else if ((IPV_INVALID != entry->phys_entry->flag_ipv6) && (!output_sip->is_ipv4))
 	{
-		memcpy(&entry->phys_entry->args.v6.sip[0], &output_sip->v6, 16);
+		memcpy(&entry->phys_entry->args.ipv.v6.sip[0], &output_sip->v6, 16);
 		entry->phys_entry->flag_ipv6 = IPV6;
 	}
 	else
@@ -1017,12 +1017,12 @@ errno_t pfe_rtable_entry_set_out_dip(pfe_rtable_entry_t *entry, pfe_ip_addr_t *o
 
 	if ((IPV_INVALID != entry->phys_entry->flag_ipv6) && (output_dip->is_ipv4))
 	{
-		memcpy(&entry->phys_entry->args.v4.dip, &output_dip->v4, 4);
+		memcpy(&entry->phys_entry->args.ipv.v4.dip, &output_dip->v4, 4);
 		entry->phys_entry->flag_ipv6 = IPV4;
 	}
 	else if ((IPV_INVALID != entry->phys_entry->flag_ipv6) && (!output_dip->is_ipv4))
 	{
-		memcpy(&entry->phys_entry->args.v6.dip[0], &output_dip->v6, 16);
+		memcpy(&entry->phys_entry->args.ipv.v6.dip[0], &output_dip->v6, 16);
 		entry->phys_entry->flag_ipv6 = IPV6;
 	}
 	else
@@ -1082,6 +1082,46 @@ void pfe_rtable_entry_set_out_dport(pfe_rtable_entry_t *entry, uint16_t output_d
 	entry->phys_entry->actions |= oal_htonl(RT_ACT_CHANGE_DPORT);
 }
 
+/**
+ * @brief		Set TTL decrement
+ * @details		Set TTL to be decremented
+ *			if the RT_ACT_DEC_TTL action is set.
+ * @param[in]	entry The routing table entry instance
+ */
+
+void pfe_rtable_entry_set_ttl_decrement(pfe_rtable_entry_t *entry)
+{
+#if defined(PFE_CFG_NULL_ARG_CHECK)
+	if (unlikely(NULL == entry))
+	{
+		NXP_LOG_ERROR("NULL argument received\n");
+		return;
+	}
+#endif /* PFE_CFG_NULL_ARG_CHECK */
+
+	entry->phys_entry->actions |= oal_htonl(RT_ACT_DEC_TTL);
+}
+
+/**
+ * @brief		Remove TTL decrement
+ * @details		Remove TTL to be decremented
+ *			if the RT_ACT_DEC_TTL action is set.
+ * @param[in]	entry The routing table entry instance
+ */
+
+void pfe_rtable_entry_remove_ttl_decrement(pfe_rtable_entry_t *entry)
+{
+#if defined(PFE_CFG_NULL_ARG_CHECK)
+	if (unlikely(NULL == entry))
+	{
+		NXP_LOG_ERROR("NULL argument received\n");
+		return;
+	}
+#endif /* PFE_CFG_NULL_ARG_CHECK */
+
+	entry->phys_entry->actions &= ~(oal_htonl(RT_ACT_DEC_TTL));
+}
+
 /**
  * @brief		Set output source and destination MAC address
  * @details		MAC address set using this call will be used to add/replace the original MAC
@@ -2048,14 +2088,14 @@ static void *rtable_worker_func(void *arg)
  * @param[in]	pool_size Number of entries within the pool
  * @return		The routing table instance or NULL if failed
  */
-pfe_rtable_t *pfe_rtable_create(pfe_class_t *class, void *htable_base_va, uint32_t htable_size, void *pool_base_va, uint32_t pool_size)
+pfe_rtable_t *pfe_rtable_create(pfe_class_t *class, addr_t htable_base_va, uint32_t htable_size, addr_t pool_base_va, uint32_t pool_size)
 {
 	pfe_rtable_t *rtable;
 	pfe_ct_rtable_entry_t *table_va;
 	uint32_t ii;
 
 #if defined(PFE_CFG_NULL_ARG_CHECK)
-	if (unlikely((NULL == htable_base_va) || (NULL == pool_base_va) || (NULL == class)))
+	if (unlikely((NULL_ADDR == htable_base_va) || (NULL_ADDR == pool_base_va) || (NULL == class)))
 	{
 		NXP_LOG_ERROR("NULL argument received\n");
 		return NULL;
@@ -2088,7 +2128,7 @@ pfe_rtable_t *pfe_rtable_create(pfe_class_t *class, void *htable_base_va, uint32
 
 		/*	Store properties */
 		rtable->htable_base_va = htable_base_va;
-		rtable->htable_base_pa = oal_mm_virt_to_phys_contig(htable_base_va);
+		rtable->htable_base_pa = (addr_t)oal_mm_virt_to_phys_contig((void *)htable_base_va);
 		rtable->htable_size = htable_size;
 		rtable->htable_end_va = rtable->htable_base_va + (rtable->htable_size * sizeof(pfe_ct_rtable_entry_t)) - 1;
 		rtable->htable_end_pa = rtable->htable_base_pa + (rtable->htable_size * sizeof(pfe_ct_rtable_entry_t)) - 1;
@@ -2099,7 +2139,7 @@ pfe_rtable_t *pfe_rtable_create(pfe_class_t *class, void *htable_base_va, uint32
 		rtable->pool_end_va = rtable->pool_base_va + (rtable->pool_size * sizeof(pfe_ct_rtable_entry_t)) - 1;
 		rtable->pool_end_pa = rtable->pool_base_pa + (rtable->pool_size * sizeof(pfe_ct_rtable_entry_t)) - 1;
 
-		if ((NULL == rtable->htable_base_va) || (NULL == rtable->pool_base_va))
+		if ((NULL_ADDR == rtable->htable_base_va) || (NULL_ADDR == rtable->pool_base_va))
 		{
 			NXP_LOG_ERROR("Can't map the table memory\n");
 			goto free_and_fail;
@@ -2107,8 +2147,8 @@ pfe_rtable_t *pfe_rtable_create(pfe_class_t *class, void *htable_base_va, uint32
 		else
 		{
 			/*	Pre-compute conversion offsets */
-			rtable->htable_va_pa_offset = (addr_t)rtable->htable_base_va - (addr_t)rtable->htable_base_pa;
-			rtable->pool_va_pa_offset = (addr_t)rtable->pool_base_va - (addr_t)rtable->pool_base_pa;
+			rtable->htable_va_pa_offset = rtable->htable_base_va - rtable->htable_base_pa;
+			rtable->pool_va_pa_offset = rtable->pool_base_va - rtable->pool_base_pa;
 		}
 
 		/*	Configure the classifier */
@@ -2239,16 +2279,16 @@ void pfe_rtable_destroy(pfe_rtable_t *rtable)
 			rtable->mbox = NULL;
 		}
 
-		if (NULL != rtable->htable_base_va)
+		if (NULL_ADDR != rtable->htable_base_va)
 		{
 			/*	Just forget the address */
-			rtable->htable_base_va = NULL;
+			rtable->htable_base_va = NULL_ADDR;
 		}
 
-		if (NULL != rtable->pool_base_va)
+		if (NULL_ADDR != rtable->pool_base_va)
 		{
 			/*	Just forget the address */
-			rtable->pool_base_va = NULL;
+			rtable->pool_base_va = NULL_ADDR;
 		}
 
 		if (NULL != rtable->pool_va)
@@ -2349,16 +2389,16 @@ errno_t pfe_rtable_entry_to_5t_out(pfe_rtable_entry_t *entry, pfe_5_tuple_t *tup
 	if (IPV6 == entry->phys_entry->flag_ipv6)
 	{
 		/*	SRC + DST IP */
-		memcpy(&tuple->src_ip.v6, &entry->phys_entry->args.v6.sip[0], 16);
-		memcpy(&tuple->dst_ip.v6, &entry->phys_entry->args.v6.dip[0], 16);
+		memcpy(&tuple->src_ip.v6, &entry->phys_entry->args.ipv.v6.sip[0], 16);
+		memcpy(&tuple->dst_ip.v6, &entry->phys_entry->args.ipv.v6.dip[0], 16);
 		tuple->src_ip.is_ipv4 = FALSE;
 		tuple->dst_ip.is_ipv4 = FALSE;
 	}
 	else
 	{
 		/*	SRC + DST IP */
-		memcpy(&tuple->src_ip.v4, &entry->phys_entry->args.v4.sip, 4);
-		memcpy(&tuple->dst_ip.v4, &entry->phys_entry->args.v4.dip, 4);
+		memcpy(&tuple->src_ip.v4, &entry->phys_entry->args.ipv.v4.sip, 4);
+		memcpy(&tuple->dst_ip.v4, &entry->phys_entry->args.ipv.v4.dip, 4);
 		tuple->src_ip.is_ipv4 = TRUE;
 		tuple->dst_ip.is_ipv4 = TRUE;
 	}
diff --git a/sw/pfe_platform/src/pfe_safety.c b/sw/pfe_platform/src/pfe_safety.c
index 436f682..e365aba 100644
--- a/sw/pfe_platform/src/pfe_safety.c
+++ b/sw/pfe_platform/src/pfe_safety.c
@@ -1,7 +1,7 @@
 /* =========================================================================
  *  
  *  Copyright (c) 2019 Imagination Technologies Limited
- *  Copyright 2019-2020 NXP
+ *  Copyright 2019-2021 NXP
  *
  *  SPDX-License-Identifier: GPL-2.0
  *
@@ -18,9 +18,9 @@
 
 struct pfe_safety_tag
 {
-	void *cbus_base_va;
-	void *safety_base_offset;
-	void *safety_base_va;
+	addr_t cbus_base_va;
+	addr_t safety_base_offset;
+	addr_t safety_base_va;
 	oal_mutex_t *lock;
 };
 
@@ -32,12 +32,12 @@ struct pfe_safety_tag
  * @return		EOK if interrupt has been handled, error code otherwise
  * @note		Interrupt which were triggered are masked here, it is periodically unmasked again in safety thread
  */
-pfe_safety_t *pfe_safety_create(void *cbus_base_va, void *safety_base)
+pfe_safety_t *pfe_safety_create(addr_t cbus_base_va, addr_t safety_base)
 {
 	pfe_safety_t *safety;
 
 #if defined(PFE_CFG_NULL_ARG_CHECK)
-	if (unlikely(NULL == cbus_base_va))
+	if (unlikely(NULL_ADDR == cbus_base_va))
 	{
 		NXP_LOG_ERROR("NULL argument received\n");
 		return NULL;
@@ -55,7 +55,7 @@ pfe_safety_t *pfe_safety_create(void *cbus_base_va, void *safety_base)
 		(void)memset(safety, 0, sizeof(pfe_safety_t));
 		safety->cbus_base_va = cbus_base_va;
 		safety->safety_base_offset = safety_base;
-		safety->safety_base_va = (void *)((addr_t)safety->cbus_base_va + (addr_t)safety->safety_base_offset);
+		safety->safety_base_va = (safety->cbus_base_va + safety->safety_base_offset);
 
 		/*	Create mutex */
 		safety->lock = (oal_mutex_t *)oal_mm_malloc(sizeof(oal_mutex_t));
@@ -115,7 +115,7 @@ void pfe_safety_destroy(pfe_safety_t *safety)
  * @param[in]	safety The SAFETY instance
  * @return		EOK if interrupt has been handled
  */
-errno_t pfe_safety_isr(pfe_safety_t *safety)
+errno_t pfe_safety_isr(const pfe_safety_t *safety)
 {
 	errno_t ret = ENOENT;
 
@@ -139,7 +139,7 @@ errno_t pfe_safety_isr(pfe_safety_t *safety)
  * @brief		Mask SAFETY interrupts
  * @param[in]	safety The SAFETY instance
  */
-void pfe_safety_irq_mask(pfe_safety_t *safety)
+void pfe_safety_irq_mask(const pfe_safety_t *safety)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == safety))
@@ -158,7 +158,7 @@ void pfe_safety_irq_mask(pfe_safety_t *safety)
  * @brief		Unmask SAFETY interrupts
  * @param[in]	safety The SAFETY instance
  */
-void pfe_safety_irq_unmask(pfe_safety_t *safety)
+void pfe_safety_irq_unmask(const pfe_safety_t *safety)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == safety))
diff --git a/sw/pfe_platform/src/pfe_spd.c b/sw/pfe_platform/src/pfe_spd.c
index b6a80b8..c13f7c5 100644
--- a/sw/pfe_platform/src/pfe_spd.c
+++ b/sw/pfe_platform/src/pfe_spd.c
@@ -1,7 +1,7 @@
 /* =========================================================================
  *  
  *  Copyright (c) 2019 Imagination Technologies Limited
- *  Copyright 2020 NXP
+ *  Copyright 2020-2021 NXP
  *
  *  SPDX-License-Identifier: GPL-2.0
  *
@@ -50,7 +50,7 @@ static errno_t pfe_spd_update_phyif(pfe_phy_if_t *phy_if, pfe_ct_ipsec_spd_t *sp
         /* Set correct DMEM pointer */
         spd->entries = oal_htonl(dmem_addr + sizeof(pfe_ct_ipsec_spd_t));
         /* Copy the new SPD into allocated memory */
-        pfe_class_write_dmem(class_ptr, -1, (void *)dmem_addr, spd, size);
+        pfe_class_write_dmem(class_ptr, -1, dmem_addr, (void *)spd, size);
         /* Get the address of the old memory before it is lost */
         old_addr = pfe_phy_if_get_spd(phy_if);
         /* Replace the old SPD pointer by the new one */
@@ -133,7 +133,7 @@ errno_t pfe_spd_add_rule(pfe_phy_if_t *phy_if, uint16_t position, pfe_ct_spd_ent
             if(0 != dmem_addr)
             {
                 spd->entries = oal_htonl(dmem_addr + sizeof(pfe_ct_ipsec_spd_t));
-                pfe_class_write_dmem(class_ptr, -1, (void *)dmem_addr, spd, sizeof(pfe_ct_ipsec_spd_t) + sizeof(pfe_ct_spd_entry_t));
+                pfe_class_write_dmem(class_ptr, -1, dmem_addr, (void *)spd, sizeof(pfe_ct_ipsec_spd_t) + sizeof(pfe_ct_spd_entry_t));
                 pfe_phy_if_set_spd(phy_if, dmem_addr);
                 ret = EOK;
             }
diff --git a/sw/pfe_platform/src/pfe_tmu.c b/sw/pfe_platform/src/pfe_tmu.c
index 3d9999e..7a35a3e 100644
--- a/sw/pfe_platform/src/pfe_tmu.c
+++ b/sw/pfe_platform/src/pfe_tmu.c
@@ -1,7 +1,7 @@
 /* =========================================================================
  *  
  *  Copyright (c) 2019 Imagination Technologies Limited
- *  Copyright 2018-2020 NXP
+ *  Copyright 2018-2021 NXP
  *
  *  SPDX-License-Identifier: GPL-2.0
  *
@@ -18,21 +18,7 @@
 
 struct pfe_tmu_tag
 {
-	void *cbus_base_va;
-};
-
-/*	Scheduler instance */
-struct pfe_tmu_sch_tag
-{
-	void *cbus_base_va;			/*	CBUS base virtual address */
-	void *sch_base_va;			/*	Scheduler base address */
-};
-
-/*	Shaper instance */
-struct pfe_tmu_shp_tag
-{
-	void *cbus_base_va;			/*	CBUS base virtual address */
-	void *shp_base_va;			/*	Shaper base address */
+	addr_t cbus_base_va;
 };
 
 /**
@@ -40,7 +26,7 @@ struct pfe_tmu_shp_tag
  * @param[in]	tmu The TMU instance
  * @param[in]	cfg Pointer to the configuration structure
  */
-static void pfe_tmu_init(pfe_tmu_t *tmu, pfe_tmu_cfg_t *cfg)
+static void pfe_tmu_init(const pfe_tmu_t *tmu, const pfe_tmu_cfg_t *cfg)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely((NULL == tmu) || (NULL == cfg)))
@@ -52,7 +38,7 @@ static void pfe_tmu_init(pfe_tmu_t *tmu, pfe_tmu_cfg_t *cfg)
 
 	pfe_tmu_disable(tmu);
 	oal_time_mdelay(10);
-	
+
 	if (EOK != pfe_tmu_cfg_init(tmu->cbus_base_va, cfg))
 	{
 		NXP_LOG_ERROR("Couldn't initialize the TMU\n");
@@ -69,13 +55,13 @@ static void pfe_tmu_init(pfe_tmu_t *tmu, pfe_tmu_cfg_t *cfg)
  * @param[in]	cfg The TMU block configuration
  * @return		The TMU instance or NULL if failed
  */
-pfe_tmu_t *pfe_tmu_create(void *cbus_base_va, uint32_t pe_num, pfe_tmu_cfg_t *cfg)
+pfe_tmu_t *pfe_tmu_create(addr_t cbus_base_va, uint32_t pe_num, const pfe_tmu_cfg_t *cfg)
 {
 	pfe_tmu_t *tmu;
 	(void)pe_num;
-	
+
 #if defined(PFE_CFG_NULL_ARG_CHECK)
-	if (unlikely((NULL == cbus_base_va) || (NULL == cfg)))
+	if (unlikely((NULL_ADDR == cbus_base_va) || (NULL == cfg)))
 	{
 		NXP_LOG_ERROR("NULL argument received\n");
 		return NULL;
@@ -83,7 +69,7 @@ pfe_tmu_t *pfe_tmu_create(void *cbus_base_va, uint32_t pe_num, pfe_tmu_cfg_t *cf
 #endif /* PFE_CFG_NULL_ARG_CHECK */
 
 	tmu = oal_mm_malloc(sizeof(pfe_tmu_t));
-	
+
 	if (NULL == tmu)
 	{
 		return NULL;
@@ -93,16 +79,16 @@ pfe_tmu_t *pfe_tmu_create(void *cbus_base_va, uint32_t pe_num, pfe_tmu_cfg_t *cf
 		(void)memset(tmu, 0, sizeof(pfe_tmu_t));
 		tmu->cbus_base_va = cbus_base_va;
 	}
-	
+
 	/*	Issue block reset */
 	pfe_tmu_reset(tmu);
-	
+
 	/*	Disable the TMU */
 	pfe_tmu_disable(tmu);
-	
+
 	/*	Set new configuration */
 	pfe_tmu_init(tmu, cfg);
-	
+
 	return tmu;
 }
 
@@ -110,7 +96,7 @@ pfe_tmu_t *pfe_tmu_create(void *cbus_base_va, uint32_t pe_num, pfe_tmu_cfg_t *cf
  * @brief		Reset the TMU block
  * @param[in]	tmu The TMU instance
  */
-void pfe_tmu_reset(pfe_tmu_t *tmu)
+void pfe_tmu_reset(const pfe_tmu_t *tmu)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == tmu))
@@ -128,7 +114,7 @@ void pfe_tmu_reset(pfe_tmu_t *tmu)
  * @details		Enable all TMU PEs
  * @param[in]	tmu The TMU instance
  */
-void pfe_tmu_enable(pfe_tmu_t *tmu)
+void pfe_tmu_enable(const pfe_tmu_t *tmu)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == tmu))
@@ -146,7 +132,7 @@ void pfe_tmu_enable(pfe_tmu_t *tmu)
  * @details		Disable all TMU PEs
  * @param[in]	tmu The TMU instance
  */
-void pfe_tmu_disable(pfe_tmu_t *tmu)
+void pfe_tmu_disable(const pfe_tmu_t *tmu)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == tmu))
@@ -167,7 +153,7 @@ void pfe_tmu_disable(pfe_tmu_t *tmu)
  * @param[in]	buf_pa Buffer physical address
  * @param[in]	len Number of bytes to send
  */
-void pfe_tmu_send(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t queue, void *buf_pa, uint16_t len)
+void pfe_tmu_send(const pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t queue, const void *buf_pa, uint16_t len)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely((NULL == tmu) || (NULL == buf_pa)))
@@ -184,7 +170,7 @@ void pfe_tmu_send(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t queue, void *b
  * @brief		Destroy TMU instance
  * @param[in]	tmu The TMU instance
  */
-void pfe_tmu_destroy(pfe_tmu_t *tmu)
+void pfe_tmu_destroy(const pfe_tmu_t *tmu)
 {
 	if (NULL != tmu)
 	{
@@ -200,7 +186,7 @@ void pfe_tmu_destroy(pfe_tmu_t *tmu)
  * @param[in]	queue Queue ID
  * @return		EOK if the arguments are valid
  */
-static errno_t pfe_tmu_check_queue(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t queue)
+static errno_t pfe_tmu_check_queue(const pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t queue)
 {
 	const pfe_tmu_phy_cfg_t *pcfg;
 
@@ -232,7 +218,7 @@ static errno_t pfe_tmu_check_queue(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8
  * @param[in]	sch Scheduler ID
  * @return		EOK if the arguments are valid
  */
-static errno_t pfe_tmu_check_scheduler(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t sch)
+static errno_t pfe_tmu_check_scheduler(const pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t sch)
 {
 	const pfe_tmu_phy_cfg_t *pcfg;
 
@@ -241,7 +227,7 @@ static errno_t pfe_tmu_check_scheduler(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, u
 	pcfg = pfe_tmu_cfg_get_phy_config(phy);
 	if (NULL == pcfg)
 	{
-		NXP_LOG_ERROR("Invalid phy: %d\n", (uint32_t)phy);
+		NXP_LOG_ERROR("Invalid phy: %d\n", (int_t)phy);
 		return EINVAL;
 	}
 	else
@@ -264,7 +250,7 @@ static errno_t pfe_tmu_check_scheduler(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, u
  * @param[in]	shp Shaper ID
  * @return		EOK if the arguments are valid
  */
-static errno_t pfe_tmu_check_shaper(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t shp)
+static errno_t pfe_tmu_check_shaper(const pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t shp)
 {
 	const pfe_tmu_phy_cfg_t *pcfg;
 
@@ -273,7 +259,7 @@ static errno_t pfe_tmu_check_shaper(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint
 	pcfg = pfe_tmu_cfg_get_phy_config(phy);
 	if (NULL == pcfg)
 	{
-		NXP_LOG_ERROR("Invalid phy: %d\n", (uint32_t)phy);
+		NXP_LOG_ERROR("Invalid phy: %d\n", (int_t)phy);
 		return EINVAL;
 	}
 	else
@@ -297,7 +283,7 @@ static errno_t pfe_tmu_check_shaper(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint
  * @param[out]	level Pointer to memory where the fill level value shall be written
  * @return		EOK if success, error code otherwise
  */
-errno_t pfe_tmu_queue_get_fill_level(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t queue, uint32_t *level)
+errno_t pfe_tmu_queue_get_fill_level(const pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t queue, uint32_t *level)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely((NULL == tmu) || (NULL == level)))
@@ -325,7 +311,7 @@ errno_t pfe_tmu_queue_get_fill_level(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uin
  * @param[out]	level Pointer to memory where the count shall be written
  * @return		EOK if success, error code otherwise
  */
-errno_t pfe_tmu_queue_get_drop_count(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t queue, uint32_t *cnt)
+errno_t pfe_tmu_queue_get_drop_count(const pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t queue, uint32_t *cnt)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely((NULL == tmu) || (NULL == cnt)))
@@ -353,7 +339,7 @@ errno_t pfe_tmu_queue_get_drop_count(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uin
  * @param[out]	level Pointer to memory where the count shall be written
  * @return		EOK if success, error code otherwise
  */
-errno_t pfe_tmu_queue_get_tx_count(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t queue, uint32_t *cnt)
+errno_t pfe_tmu_queue_get_tx_count(const pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t queue, uint32_t *cnt)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely((NULL == tmu) || (NULL == cnt)))
@@ -383,7 +369,7 @@ errno_t pfe_tmu_queue_get_tx_count(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8
  * @param[in]	max Max threshold (number of packets)
  * @return		EOK if success, error code otherwise
  */
-errno_t pfe_tmu_queue_set_mode(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t queue,
+errno_t pfe_tmu_queue_set_mode(const pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t queue,
 		pfe_tmu_queue_mode_t mode, uint32_t min, uint32_t max)
 {
     errno_t ret_val;
@@ -444,7 +430,7 @@ errno_t pfe_tmu_queue_set_mode(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t q
  * @param[in]	max Pointer to memory where 'max' value shall be written
  * @return		EOK if success, error code otherwise
  */
-pfe_tmu_queue_mode_t pfe_tmu_queue_get_mode(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy,
+pfe_tmu_queue_mode_t pfe_tmu_queue_get_mode(const pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy,
 		uint8_t queue, uint32_t *min, uint32_t *max)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
@@ -474,7 +460,7 @@ pfe_tmu_queue_mode_t pfe_tmu_queue_get_mode(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t p
  * @param[in]	prob Drop probability in [%]
  * @return		EOK if success, error code otherwise
  */
-errno_t pfe_tmu_queue_set_wred_prob(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t queue, uint8_t zone, uint8_t prob)
+errno_t pfe_tmu_queue_set_wred_prob(const pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t queue, uint8_t zone, uint8_t prob)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == tmu))
@@ -515,7 +501,7 @@ errno_t pfe_tmu_queue_set_wred_prob(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint
  * @param[in]	prob Poiter to memory where drop probability in [%] shall be written
  * @return		EOK if success, error code otherwise
  */
-errno_t pfe_tmu_queue_get_wred_prob(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t queue, uint8_t zone, uint8_t *prob)
+errno_t pfe_tmu_queue_get_wred_prob(const pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t queue, uint8_t zone, uint8_t *prob)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == tmu))
@@ -548,7 +534,7 @@ errno_t pfe_tmu_queue_get_wred_prob(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint
  * @param[in]	queue The queue ID
  * @return		Number of zones between 'min' and 'max'
  */
-uint8_t pfe_tmu_queue_get_wred_zones(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t queue)
+uint8_t pfe_tmu_queue_get_wred_zones(const pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t queue)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == tmu))
@@ -574,7 +560,7 @@ uint8_t pfe_tmu_queue_get_wred_zones(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uin
  * @param[in]	phy Physical interface ID
  * @return		Number of queues
  */
-uint8_t pfe_tmu_queue_get_cnt(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy)
+uint8_t pfe_tmu_queue_get_cnt(const pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy)
 {
 	const pfe_tmu_phy_cfg_t *pcfg;
 
@@ -602,7 +588,7 @@ uint8_t pfe_tmu_queue_get_cnt(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy)
  * @param[in]	min_credit Minimum credit value
  * @return		EOK if success, error code otherwise
  */
-errno_t pfe_tmu_shp_set_limits(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy,
+errno_t pfe_tmu_shp_set_limits(const pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy,
 		uint8_t shp, int32_t max_credit, int32_t min_credit)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
@@ -633,7 +619,7 @@ errno_t pfe_tmu_shp_set_limits(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy,
  * @param[out]	min_credit Pointer to memory where minimum credit value shall be written
  * @return		EOK if success, error code otherwise
  */
-errno_t pfe_tmu_shp_get_limits(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t shp, int32_t *max_credit, int32_t *min_credit)
+errno_t pfe_tmu_shp_get_limits(const pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t shp, int32_t *max_credit, int32_t *min_credit)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == tmu) || unlikely(NULL == max_credit) || unlikely(NULL == min_credit))
@@ -662,7 +648,7 @@ errno_t pfe_tmu_shp_get_limits(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t s
  *					the shaper unused.
  * @return		EOK if success, error code otherwise
  */
-errno_t pfe_tmu_shp_set_position(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t shp, uint8_t pos)
+errno_t pfe_tmu_shp_set_position(const pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t shp, uint8_t pos)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == tmu))
@@ -691,7 +677,7 @@ errno_t pfe_tmu_shp_set_position(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t
  *					the shaper unused.
  * @return		EOK if success, error code otherwise
  */
-uint8_t pfe_tmu_shp_get_position(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t shp)
+uint8_t pfe_tmu_shp_get_position(const pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t shp)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == tmu))
@@ -717,7 +703,7 @@ uint8_t pfe_tmu_shp_get_position(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t
  * @parma[in]	phy Physical interface ID
  * @param[in]	shp The shaper ID
  */
-errno_t pfe_tmu_shp_enable(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t shp)
+errno_t pfe_tmu_shp_enable(const pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t shp)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == tmu))
@@ -745,7 +731,7 @@ errno_t pfe_tmu_shp_enable(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t shp)
  * @param[in]	mode Shaper mode
  * @return		EOK if success, error code otherwise
  */
-errno_t pfe_tmu_shp_set_rate_mode(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t shp, pfe_tmu_rate_mode_t mode)
+errno_t pfe_tmu_shp_set_rate_mode(const pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t shp, pfe_tmu_rate_mode_t mode)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == tmu))
@@ -772,7 +758,7 @@ errno_t pfe_tmu_shp_set_rate_mode(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_
  * @param[in]	shp The shaper ID
  * @return		Shaper rate mode
  */
-pfe_tmu_rate_mode_t pfe_tmu_shp_get_rate_mode(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t shp)
+pfe_tmu_rate_mode_t pfe_tmu_shp_get_rate_mode(const pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t shp)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == tmu))
@@ -800,7 +786,7 @@ pfe_tmu_rate_mode_t pfe_tmu_shp_get_rate_mode(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t
  * @param[in]	isl Idle slope in units per second as given by chosen mode
  *					(bits-per-second, packets-per-second)
  */
-errno_t pfe_tmu_shp_set_idle_slope(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t shp, uint32_t isl)
+errno_t pfe_tmu_shp_set_idle_slope(const pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t shp, uint32_t isl)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == tmu))
@@ -827,7 +813,7 @@ errno_t pfe_tmu_shp_set_idle_slope(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8
  * @param[in]	shp The shaper ID
  * @return		Current idle slope value
  */
-uint32_t pfe_tmu_shp_get_idle_slope(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t shp)
+uint32_t pfe_tmu_shp_get_idle_slope(const pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t shp)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == tmu))
@@ -853,7 +839,7 @@ uint32_t pfe_tmu_shp_get_idle_slope(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint
  * @parma[in]	phy Physical interface ID
  * @param[in]	shp The shaper ID
  */
-errno_t pfe_tmu_shp_disable(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t shp)
+errno_t pfe_tmu_shp_disable(const pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t shp)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == tmu))
@@ -882,7 +868,7 @@ errno_t pfe_tmu_shp_disable(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t shp)
  * @param[in]	mode The rate mode to be used by scheduler
  * @return		EOK if success, error code otherwise
  */
-errno_t pfe_tmu_sch_set_rate_mode(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy,
+errno_t pfe_tmu_sch_set_rate_mode(const pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy,
 		uint8_t sch, pfe_tmu_rate_mode_t mode)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
@@ -910,7 +896,7 @@ errno_t pfe_tmu_sch_set_rate_mode(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy,
  * @param[in]	sch The scheduler ID
  * @return		Current rate mode or RATE_MODE_INVALID in case of error
  */
-pfe_tmu_rate_mode_t pfe_tmu_sch_get_rate_mode(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t sch)
+pfe_tmu_rate_mode_t pfe_tmu_sch_get_rate_mode(const pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t sch)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == tmu))
@@ -938,7 +924,7 @@ pfe_tmu_rate_mode_t pfe_tmu_sch_get_rate_mode(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t
  * @param[in]	algo The algorithm to be used
  * @return		EOK if success, error code otherwise
  */
-errno_t pfe_tmu_sch_set_algo(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy,
+errno_t pfe_tmu_sch_set_algo(const pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy,
 		uint8_t sch, pfe_tmu_sched_algo_t algo)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
@@ -966,7 +952,7 @@ errno_t pfe_tmu_sch_set_algo(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy,
  * @param[in]	sch The scheduler ID
  * @return		Current rate mode or SCHED_ALGO_INVALID in case of error
  */
-pfe_tmu_sched_algo_t pfe_tmu_sch_get_algo(pfe_tmu_t *tmu,
+pfe_tmu_sched_algo_t pfe_tmu_sch_get_algo(const pfe_tmu_t *tmu,
 		pfe_ct_phy_if_id_t phy, uint8_t sch)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
@@ -994,7 +980,7 @@ pfe_tmu_sched_algo_t pfe_tmu_sch_get_algo(pfe_tmu_t *tmu,
  * @param[in]	sch The scheduler ID
  * @return		Number of scheduler inputs
  */
-uint8_t pfe_tmu_sch_get_input_cnt(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t sch)
+uint8_t pfe_tmu_sch_get_input_cnt(const pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t sch)
 {
 	if (EOK == pfe_tmu_check_scheduler(tmu, phy, sch))
 	{
@@ -1016,7 +1002,7 @@ uint8_t pfe_tmu_sch_get_input_cnt(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_
  * @param[in]	weight The weight value to be used by chosen scheduling algorithm
  * @return		EOK if success, error code otherwise
  */
-errno_t pfe_tmu_sch_set_input_weight(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy,
+errno_t pfe_tmu_sch_set_input_weight(const pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy,
 		uint8_t sch, uint8_t input, uint32_t weight)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
@@ -1046,7 +1032,7 @@ errno_t pfe_tmu_sch_set_input_weight(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy,
  * @param[in]	input Scheduler input
  * @return		Input weight
  */
-uint32_t pfe_tmu_sch_get_input_weight(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t sch, uint8_t input)
+uint32_t pfe_tmu_sch_get_input_weight(const pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t sch, uint8_t input)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == tmu))
@@ -1076,7 +1062,7 @@ uint32_t pfe_tmu_sch_get_input_weight(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, ui
  * @param[in]	input Input of 'dst_sch' where output of 'src_sch' shall be connected
  * @return		EOK if success, error code otherwise
  */
-errno_t pfe_tmu_sch_bind_sch_output(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t src_sch, uint8_t dst_sch, uint8_t input)
+errno_t pfe_tmu_sch_bind_sch_output(const pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t src_sch, uint8_t dst_sch, uint8_t input)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == tmu))
@@ -1105,7 +1091,7 @@ errno_t pfe_tmu_sch_bind_sch_output(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint
  * @param[in]	input Scheduler input
  * @return		ID of the connected scheduler or PFE_TMU_INVALID_SCHEDULER
  */
-uint8_t pfe_tmu_sch_get_bound_sch_output(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t sch, uint8_t input)
+uint8_t pfe_tmu_sch_get_bound_sch_output(const pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t sch, uint8_t input)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == tmu))
@@ -1134,7 +1120,7 @@ uint8_t pfe_tmu_sch_get_bound_sch_output(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy,
  * @param[in]	queue Queue to be connected to the scheduler input
  * @return		EOK if success, error code otherwise
  */
-errno_t pfe_tmu_sch_bind_queue(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy,
+errno_t pfe_tmu_sch_bind_queue(const pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy,
 		uint8_t sch, uint8_t input, uint8_t queue)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
@@ -1164,7 +1150,7 @@ errno_t pfe_tmu_sch_bind_queue(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy,
  * @param[in]	input Scheduler input to be queried
  * @return		Queue ID connected to the input or PFE_TMU_INVALID_QUEUE if not present
  */
-uint8_t pfe_tmu_sch_get_bound_queue(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t sch, uint8_t input)
+uint8_t pfe_tmu_sch_get_bound_queue(const pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint8_t sch, uint8_t input)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == tmu))
@@ -1193,7 +1179,7 @@ uint8_t pfe_tmu_sch_get_bound_queue(pfe_tmu_t *tmu, pfe_ct_phy_if_id_t phy, uint
  * @param[in]	verb_level 	Verbosity level
  * @return		Number of bytes written to the buffer
  */
-uint32_t pfe_tmu_get_text_statistics(pfe_tmu_t *tmu, char_t *buf, uint32_t buf_len, uint8_t verb_level)
+uint32_t pfe_tmu_get_text_statistics(const pfe_tmu_t *tmu, char_t *buf, uint32_t buf_len, uint8_t verb_level)
 {
 	uint32_t len = 0U;
 
@@ -1204,7 +1190,7 @@ uint32_t pfe_tmu_get_text_statistics(pfe_tmu_t *tmu, char_t *buf, uint32_t buf_l
 		return 0U;
 	}
 #endif /* PFE_CFG_NULL_ARG_CHECK */
-	
+
 	len += pfe_tmu_cfg_get_text_stat(tmu->cbus_base_va, buf, buf_len, verb_level);
 
 	return len;
diff --git a/sw/pfe_platform/src/pfe_util.c b/sw/pfe_platform/src/pfe_util.c
index e39b38e..4942682 100644
--- a/sw/pfe_platform/src/pfe_util.c
+++ b/sw/pfe_platform/src/pfe_util.c
@@ -1,7 +1,7 @@
 /* =========================================================================
  *  
  *  Copyright (c) 2019 Imagination Technologies Limited
- *  Copyright 2018-2020 NXP
+ *  Copyright 2018-2021 NXP
  *
  *  SPDX-License-Identifier: GPL-2.0
  *
@@ -24,7 +24,7 @@
 struct pfe_util_tag
 {
 	bool_t is_fw_loaded;	/*	Flag indicating that firmware has been loaded */
-	void *cbus_base_va;		/*	CBUS base virtual address */
+	addr_t cbus_base_va;		/*	CBUS base virtual address */
 	uint32_t pe_num;		/*	Number of PEs */
 	pfe_pe_t **pe;			/*	List of particular PEs */
 };
@@ -34,7 +34,7 @@ struct pfe_util_tag
  * @param[in]	util The UTIL instance
  * @param[in]	cfg Pointer to the configuration structure
  */
-static void pfe_util_set_config(pfe_util_t *util, pfe_util_cfg_t *cfg)
+static void pfe_util_set_config(const pfe_util_t *util, const pfe_util_cfg_t *cfg)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely((NULL == util) || (NULL == cfg)))
@@ -56,14 +56,14 @@ static void pfe_util_set_config(pfe_util_t *util, pfe_util_cfg_t *cfg)
  * @param[in]	cfg The UTIL block configuration
  * @return		The UTIL instance or NULL if failed
  */
-pfe_util_t *pfe_util_create(void *cbus_base_va, uint32_t pe_num, pfe_util_cfg_t *cfg)
+pfe_util_t *pfe_util_create(addr_t cbus_base_va, uint32_t pe_num, const pfe_util_cfg_t *cfg)
 {
 	pfe_util_t *util;
 	pfe_pe_t *pe;
 	uint32_t ii;
-	
+
 #if defined(PFE_CFG_NULL_ARG_CHECK)
-	if (unlikely((NULL == cbus_base_va) || (NULL == cfg)))
+	if (unlikely((NULL_ADDR == cbus_base_va) || (NULL == cfg)))
 	{
 		NXP_LOG_ERROR("NULL argument received\n");
 		return NULL;
@@ -71,7 +71,7 @@ pfe_util_t *pfe_util_create(void *cbus_base_va, uint32_t pe_num, pfe_util_cfg_t
 #endif /* PFE_CFG_NULL_ARG_CHECK */
 
 	util = oal_mm_malloc(sizeof(pfe_util_t));
-	
+
 	if (NULL == util)
 	{
 		return NULL;
@@ -81,22 +81,22 @@ pfe_util_t *pfe_util_create(void *cbus_base_va, uint32_t pe_num, pfe_util_cfg_t
 		(void)memset(util, 0, sizeof(pfe_util_t));
 		util->cbus_base_va = cbus_base_va;
 	}
-	
+
 	if (pe_num > 0U)
 	{
 		util->pe = oal_mm_malloc(pe_num * sizeof(pfe_pe_t *));
-		
+
 		if (NULL == util->pe)
 		{
 			oal_mm_free(util);
 			return NULL;
 		}
-		
+
 		/*	Create PEs */
 		for (ii=0U; ii<pe_num; ii++)
 		{
 			pe = pfe_pe_create(cbus_base_va, PE_TYPE_UTIL, (uint8_t)ii);
-			
+
 			if (NULL == pe)
 			{
 				goto free_and_fail;
@@ -106,28 +106,28 @@ pfe_util_t *pfe_util_create(void *cbus_base_va, uint32_t pe_num, pfe_util_cfg_t
 				pfe_pe_set_iaccess(pe, UTIL_MEM_ACCESS_WDATA, UTIL_MEM_ACCESS_RDATA, UTIL_MEM_ACCESS_ADDR);
 				pfe_pe_set_dmem(pe, PFE_CFG_UTIL_ELF_DMEM_BASE, PFE_CFG_UTIL_DMEM_SIZE);
 				pfe_pe_set_imem(pe, PFE_CFG_UTIL_ELF_IMEM_BASE, PFE_CFG_UTIL_IMEM_SIZE);
-				
+
 				util->pe[ii] = pe;
 				util->pe_num++;
 			}
 		}
-		
+
 		/*	Issue block reset */
 		pfe_util_reset(util);
-		
+
 		/*	Disable the UTIL block */
 		pfe_util_disable(util);
-		
+
 		/*	Set new configuration */
 		pfe_util_set_config(util, cfg);
 	}
-	
+
 	return util;
-	
+
 free_and_fail:
 	pfe_util_destroy(util);
 	util = NULL;
-	
+
 	return NULL;
 }
 
@@ -135,7 +135,7 @@ free_and_fail:
  * @brief		Reset the UTIL block
  * @param[in]	util The UTIL instance
  */
-void pfe_util_reset(pfe_util_t *util)
+void pfe_util_reset(const pfe_util_t *util)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == util))
@@ -153,7 +153,7 @@ void pfe_util_reset(pfe_util_t *util)
  * @details		Enable all UTIL PEs
  * @param[in]	util The UTIL instance
  */
-void pfe_util_enable(pfe_util_t *util)
+void pfe_util_enable(const pfe_util_t *util)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == util))
@@ -167,7 +167,7 @@ void pfe_util_enable(pfe_util_t *util)
 	{
 		NXP_LOG_WARNING("Attempt to enable UTIL PE(s) without previous firmware upload\n");
 	}
-	
+
 	hal_write32(PFE_CORE_ENABLE, util->cbus_base_va + UTIL_TX_CTRL);
 }
 
@@ -175,7 +175,7 @@ void pfe_util_enable(pfe_util_t *util)
  * @brief		Disable the UTIL block
  * @param[in]	util The UTIL instance
  */
-void pfe_util_disable(pfe_util_t *util)
+void pfe_util_disable(const pfe_util_t *util)
 {
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == util))
@@ -198,7 +198,7 @@ errno_t pfe_util_load_firmware(pfe_util_t *util, const void *elf)
 {
 	uint32_t ii;
 	errno_t ret;
-	
+
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely((NULL == util) || (NULL == elf)))
 	{
@@ -210,16 +210,16 @@ errno_t pfe_util_load_firmware(pfe_util_t *util, const void *elf)
 	for (ii=0U; ii<util->pe_num; ii++)
 	{
 		ret = pfe_pe_load_firmware(util->pe[ii], elf);
-		
+
 		if (EOK != ret)
 		{
 			NXP_LOG_ERROR("UTIL firmware loading failed: %d\n", ret);
 			return ret;
 		}
 	}
-	
+
 	util->is_fw_loaded = TRUE;
-	
+
 	return EOK;
 }
 
@@ -230,7 +230,7 @@ errno_t pfe_util_load_firmware(pfe_util_t *util, const void *elf)
 void pfe_util_destroy(pfe_util_t *util)
 {
 	uint32_t ii;
-	
+
 	if (NULL != util)
 	{
 		for (ii=0U; ii<util->pe_num; ii++)
@@ -238,11 +238,11 @@ void pfe_util_destroy(pfe_util_t *util)
 			pfe_pe_destroy(util->pe[ii]);
 			util->pe[ii] = NULL;
 		}
-		
+
 		pfe_util_disable(util);
-		
+
 		util->pe_num = 0U;
-		
+
 		oal_mm_free(util);
 	}
 }
@@ -252,7 +252,7 @@ void pfe_util_destroy(pfe_util_t *util)
  * @details Checks PE whether it reports a firmware error
  * @param[in] util The UTIL instance
  */
-errno_t pfe_util_isr(pfe_util_t *util)
+errno_t pfe_util_isr(const pfe_util_t *util)
 {
 	uint32_t i;
 
@@ -276,7 +276,7 @@ errno_t pfe_util_isr(pfe_util_t *util)
  * @brief		Mask UTIL interrupts
  * @param[in]	util The UTIL instance
  */
-void pfe_util_irq_mask(pfe_util_t *util)
+void pfe_util_irq_mask(const pfe_util_t *util)
 {
 #if ((PFE_CFG_IP_VERSION == PFE_CFG_IP_VERSION_FPGA_5_0_4) \
 	|| (PFE_CFG_IP_VERSION == PFE_CFG_IP_VERSION_NPU_7_14) \
@@ -292,7 +292,7 @@ void pfe_util_irq_mask(pfe_util_t *util)
  * @brief		Unmask UTIL interrupts
  * @param[in]	util The UTIL instance
  */
-void pfe_util_irq_unmask(pfe_util_t *util)
+void pfe_util_irq_unmask(const pfe_util_t *util)
 {
 #if ((PFE_CFG_IP_VERSION == PFE_CFG_IP_VERSION_FPGA_5_0_4) \
 	|| (PFE_CFG_IP_VERSION == PFE_CFG_IP_VERSION_NPU_7_14) \
@@ -313,11 +313,11 @@ void pfe_util_irq_unmask(pfe_util_t *util)
  * @param[in]	verb_level 	Verbosity level
  * @return		Number of bytes written to the buffer
  */
-uint32_t pfe_util_get_text_statistics(pfe_util_t *util, char_t *buf, uint32_t buf_len, uint8_t verb_level)
+uint32_t pfe_util_get_text_statistics(const pfe_util_t *util, char_t *buf, uint32_t buf_len, uint8_t verb_level)
 {
 	uint32_t len = 0U, ii;
 	pfe_ct_version_t fw_ver;
-	
+
 #if defined(PFE_CFG_NULL_ARG_CHECK)
 	if (unlikely(NULL == util))
 	{
@@ -336,7 +336,7 @@ uint32_t pfe_util_get_text_statistics(pfe_util_t *util, char_t *buf, uint32_t bu
 	{
 		len += oal_util_snprintf(buf + len, buf_len - len, "FIRMWARE VERSION <unknown>\n");
 	}
-	
+
 	len += pfe_util_cfg_get_text_stat(util->cbus_base_va, buf + len, buf_len - len, verb_level);
 
 	/*	Get PE info per PE */
@@ -344,7 +344,7 @@ uint32_t pfe_util_get_text_statistics(pfe_util_t *util, char_t *buf, uint32_t bu
 	{
 		len += pfe_pe_get_text_statistics(util->pe[ii], buf + len, buf_len - len, verb_level);
 	}
-	
+
 	return len;
 }
 
@@ -353,7 +353,7 @@ uint32_t pfe_util_get_text_statistics(pfe_util_t *util, char_t *buf, uint32_t bu
  * @param[in]	util The UTIL instance
  * @return		ver Parsed firmware metadata
  */
-errno_t pfe_util_get_fw_version(pfe_util_t *util, pfe_ct_version_t *ver)
+errno_t pfe_util_get_fw_version(const pfe_util_t *util, pfe_ct_version_t *ver)
 {
 	pfe_ct_pe_mmap_t pfe_pe_mmap;
 
diff --git a/sw/pfe_platform/src/pfe_wdt.c b/sw/pfe_platform/src/pfe_wdt.c
index aa2cce5..760cbee 100644
--- a/sw/pfe_platform/src/pfe_wdt.c
+++ b/sw/pfe_platform/src/pfe_wdt.c
@@ -17,18 +17,18 @@
 
 struct pfe_wdt_tag
 {
-	void *cbus_base_va;
-	void *wdt_base_offset;
-	void *wdt_base_va;
+	addr_t cbus_base_va;
+	addr_t wdt_base_offset;
+	addr_t wdt_base_va;
 	oal_mutex_t lock;
 };
 
-pfe_wdt_t *pfe_wdt_create(void *cbus_base_va, void *wdt_base)
+pfe_wdt_t *pfe_wdt_create(addr_t cbus_base_va, addr_t wdt_base)
 {
 	pfe_wdt_t *wdt;
 
 #if defined(GLOBAL_CFG_NULL_ARG_CHECK)
-	if (unlikely(NULL == cbus_base_va))
+	if (unlikely(NULL_ADDR == cbus_base_va))
 	{
 		NXP_LOG_ERROR("NULL argument received\n");
 		return NULL;
@@ -46,7 +46,7 @@ pfe_wdt_t *pfe_wdt_create(void *cbus_base_va, void *wdt_base)
 		(void)memset(wdt, 0, sizeof(pfe_wdt_t));
 		wdt->cbus_base_va = cbus_base_va;
 		wdt->wdt_base_offset = wdt_base;
-		wdt->wdt_base_va = (void *)((addr_t)wdt->cbus_base_va + (addr_t)wdt->wdt_base_offset);
+		wdt->wdt_base_va = (wdt->cbus_base_va + wdt->wdt_base_offset);
 
 		/*	Resource protection */
 		if (EOK != oal_mutex_init(&wdt->lock))
@@ -189,7 +189,7 @@ void pfe_wdt_irq_unmask(pfe_wdt_t * wdt)
  * @param[in]	verb_level 	Verbosity level
  * @return		Number of bytes written to the buffer
  */
-uint32_t pfe_wdt_get_text_statistics(pfe_wdt_t *wdt, char_t *buf, uint32_t buf_len, uint8_t verb_level)
+uint32_t pfe_wdt_get_text_statistics(const pfe_wdt_t *wdt, char_t *buf, uint32_t buf_len, uint8_t verb_level)
 {
 	uint32_t len = 0U;
 
diff --git a/sw/xfci/libfci/Makefile b/sw/xfci/libfci/Makefile
index 456f540..cd3ed27 100644
--- a/sw/xfci/libfci/Makefile
+++ b/sw/xfci/libfci/Makefile
@@ -1,5 +1,5 @@
 # =========================================================================
-#  Copyright 2018-2020 NXP
+#  Copyright 2018-2021 NXP
 #
 #  SPDX-License-Identifier: GPL-2.0
 #
@@ -58,7 +58,7 @@ CCFLAGS_profile += -g -O0 -finstrument-functions
 LIBS_profile += -lprofilingS
 
 #Generic compiler flags (which include build type flags)
-CCFLAGS_all += -Wall -fmessage-length=0
+CCFLAGS_all += -Wall -fmessage-length=0 -fvisibility=hidden
 CCFLAGS_all += $(CCFLAGS_$(BUILD_PROFILE))
 CCFLAGS_all += $(CCFLAGS_pfe)
 CCFLAGS_all += -D$(PFE_CFG_TARGET_ARCH_DEF) -D$(PFE_CFG_TARGET_OS_DEF) -D$(PFE_CFG_BUILD_PROFILE_DEF)
diff --git a/sw/xfci/libfci/public/fpp.h b/sw/xfci/libfci/public/fpp.h
index 1ef0de1..791d61c 100644
--- a/sw/xfci/libfci/public/fpp.h
+++ b/sw/xfci/libfci/public/fpp.h
@@ -100,7 +100,7 @@
 #define FPP_ERR_MSP_NOT_READY				1215
 #define FPP_ERR_WRONG_SOCK_MODE				1216
 
-typedef struct fpp_socket4_open_cmd {
+typedef struct {
 	uint16_t id;
 	uint8_t type;
 	uint8_t mode;
@@ -122,7 +122,7 @@ typedef struct fpp_socket4_open_cmd {
 #endif
 } __attribute__((__packed__)) fpp_socket4_open_cmd_t;
 
-typedef struct fpp_socket4_update_cmd {
+typedef struct {
 	uint16_t id;
 	uint16_t rsvd1;
 	uint32_t saddr;
@@ -142,12 +142,12 @@ typedef struct fpp_socket4_update_cmd {
 #endif
 } __attribute__((__packed__)) fpp_socket4_update_cmd_t;
 
-typedef struct fpp_socket4_close_cmd {
+typedef struct {
 	uint16_t id;
 	uint16_t pad1;
 } __attribute__((__packed__)) fpp_socket4_close_cmd_t;
 
-typedef struct fpp_socket6_open_cmd {
+typedef struct {
 	uint16_t id;
 	uint8_t type;
 	uint8_t mode;
@@ -169,7 +169,7 @@ typedef struct fpp_socket6_open_cmd {
 #endif
 } __attribute__((__packed__)) fpp_socket6_open_cmd_t;
 
-typedef struct fpp_socket6_update_cmd {
+typedef struct {
 	uint16_t id;
 	uint16_t rsvd1;
 	uint32_t saddr[4];
@@ -189,7 +189,7 @@ typedef struct fpp_socket6_update_cmd {
 #endif
 } __attribute__((__packed__)) fpp_socket6_update_cmd_t;
 
-typedef struct fpp_socket6_close_cmd {
+typedef struct {
 	uint16_t id;
 	uint16_t pad1;
 } __attribute__((__packed__)) fpp_socket6_close_cmd_t;
@@ -198,7 +198,7 @@ typedef struct fpp_socket6_close_cmd {
 #define FPP_ERR_TNL_ENTRY_NOT_FOUND                     1001
 
 /*------------------------------------- Protocols ----------------------------*/
-typedef enum fpp_proto {
+typedef enum {
         FPP_PROTO_IPV4 = 0,
         FPP_PROTO_IPV6,
         FPP_PROTO_PPPOE,
@@ -218,6 +218,7 @@ typedef enum fpp_proto {
  * @details This command can be used with various values of `.action`:
  *          - @c FPP_ACTION_REGISTER: Defines a connection and binds it to previously created route(s).
  *          - @c FPP_ACTION_DEREGISTER: Deletes previously defined connection.
+ *          - @c FPP_ACTION_UPDATE: Updates properties of previously defined connection.
  *          - @c FPP_ACTION_QUERY: Gets parameters of existing connection. It creates a snapshot of all active
  *            conntrack entries and replies with first of them.
  *          - @c FPP_ACTION_QUERY_CONT: Shall be called periodically after @c FPP_ACTION_QUERY was called. On each
@@ -310,6 +311,22 @@ typedef enum fpp_proto {
  *   };
  * @endcode
  *
+ * Action FPP_ACTION_UPDATE
+ * ----------------------------
+ * Items to be set in command argument structure:
+ * @code{.c}
+ *   fpp_ct_cmd_t cmd_data =
+ *   {
+ *     .action = FPP_ACTION_UPDATE,    // Update previously created conntrack
+ *     .saddr = ...,                    // Source IPv4 address (network endian)
+ *     .daddr = ...,                    // Destination IPv4 address (network endian)
+ *     .sport = ...,                    // Source port (network endian)
+ *     .dport = ...,                    // Destination port (network endian)
+ *     .protocol = ...,                 // IP protocol ID
+ *     .flags = CTCMD_FLAGS_TTL_DECREMENT, // Only TTL decrement can be updated
+ *   };
+ * @endcode
+ *
  * Action FPP_ACTION_QUERY and FPP_ACTION_QUERY_CONT
  * -------------------------------------------------
  * Items to be set in command argument structure:
@@ -344,6 +361,7 @@ typedef enum fpp_proto {
  * @details This command can be used with various values of `.action`:
  *          - @c FPP_ACTION_REGISTER: Defines a connection and binds it to previously created route(s).
  *          - @c FPP_ACTION_DEREGISTER: Deletes previously defined connection.
+ *          - @c FPP_ACTION_UPDATE: Updates properties of previously defined connection.
  *          - @c FPP_ACTION_QUERY: Gets parameters of existing connection. It creates a snapshot of all active
  *            conntrack entries and replies with first of them.
  *          - @c FPP_ACTION_QUERY_CONT: Shall be called periodically after @c FPP_ACTION_QUERY was called. On each
@@ -437,6 +455,22 @@ typedef enum fpp_proto {
  *   };
  * @endcode
  *
+ * Action FPP_ACTION_UPDATE
+ * ----------------------------
+ * Items to be set in command argument structure:
+ * @code{.c}
+ *   fpp_ct_cmd_t cmd_data =
+ *   {
+ *     .action = FPP_ACTION_UPDATE,     // Update previously created conntrack
+ *     .saddr[0..3] = ...,              // Source IPv6 address, (network endian)
+ *     .daddr[0..3] = ...,              // Destination IPv6 address, (network endian)
+ *     .sport = ...,                    // Source port (network endian)
+ *     .dport = ...,                    // Destination port (network endian)
+ *     .protocol = ...,                 // IP protocol ID
+ *     .flags = CTCMD_FLAGS_TTL_DECREMENT, // Only TTL decrement can be updated
+ *   };
+ * @endcode
+ *
  * Action FPP_ACTION_QUERY and FPP_ACTION_QUERY_CONT
  * -------------------------------------------------
  * Items to be set in command argument structure:
@@ -688,7 +722,7 @@ typedef struct CAL_PACKED {
 #define FPP_IP_ROUTE_4o6	(1<<1)
 
 /* Structure representing the command sent to enable/disable Ipsec pre-fragmentation */
-typedef struct fpp_ipsec_cmd {
+typedef struct {
 	uint16_t pre_frag_en;
 	uint16_t rsvd;
 } __attribute__((__packed__)) fpp_ipsec_cmd_t;
@@ -716,19 +750,19 @@ typedef struct fpp_ipsec_cmd {
 
 #define FPP_MAX_SPTX_STRING_SIZE	160
 
-typedef struct fpp_rtp_open_cmd {
+typedef struct {
 	uint16_t	call_id;
 	uint16_t	socket_a;
 	uint16_t	socket_b;
 	uint16_t	rsvd;
 } __attribute__((__packed__)) fpp_rtp_open_cmd_t;
 
-typedef struct fpp_rtp_close_cmd {
+typedef struct {
 	uint16_t	call_id;
 	uint16_t	rsvd;
 } __attribute__((__packed__)) fpp_rtp_close_cmd_t;
 
-typedef struct fpp_rtp_takeover_cmd {
+typedef struct {
 	uint16_t	call_id;
 	uint16_t	socket;
 	uint16_t	mode;
@@ -738,7 +772,7 @@ typedef struct fpp_rtp_takeover_cmd {
 	uint32_t	ts_incr;
 } __attribute__((__packed__)) fpp_rtp_takeover_cmd_t;
 
-typedef struct fpp_rtp_ctrl_cmd {
+typedef struct {
 	uint16_t	call_id;
 	uint16_t	control_dir;
 } __attribute__((__packed__)) fpp_rtp_ctrl_cmd_t;
@@ -747,24 +781,24 @@ typedef struct fpp_rtp_ctrl_cmd {
 #define FPP_RTP_SPEC_TX_RESPONSE    1
 #define FPP_RTP_SPEC_TX_STOP        2
 
-typedef struct fpp_rtp_spec_tx_ctrl_cmd {
+typedef struct {
         uint16_t	call_id;
         uint16_t	type;
 } __attribute__((__packed__)) fpp_rtp_spec_tx_ctrl_cmd_t;
 
-typedef struct fpp_rtp_spec_tx_payload_cmd {
+typedef struct {
         uint16_t	call_id;
         uint16_t	payload_id;
         uint16_t	payload_length;
         uint16_t	payload[80];
 } __attribute__((__packed__)) fpp_rtp_spec_tx_payload_cmd_t;
 
-typedef struct fpp_rtcp_query_cmd {
+typedef struct {
 	uint16_t	socket_id;
 	uint16_t       flags;
 } __attribute__((__packed__)) fpp_rtcp_query_cmd_t;
 
-typedef struct fpp_rtcp_query_res {
+typedef struct {
 	uint32_t	prev_reception_period;
 	uint32_t	last_reception_period;
 	uint32_t	num_tx_pkts;
@@ -804,7 +838,7 @@ typedef struct fpp_rtcp_query_res {
 #define FPP_RTPSTATS_TYPE_RLY		4
 #define FPP_RTPSTATS_TYPE_RLY6		5
 
-typedef struct fpp_rtp_stat_enable_cmd {
+typedef struct {
 	uint16_t stream_id;
 	uint16_t stream_type;
 	uint32_t saddr[4];
@@ -815,11 +849,11 @@ typedef struct fpp_rtp_stat_enable_cmd {
 	uint16_t mode;
 } __attribute__((__packed__)) fpp_rtp_stat_enable_cmd_t;
 
-typedef struct fpp_rtp_stat_disable_cmd {
+typedef struct {
 	uint16_t stream_id;
 } __attribute__((__packed__)) fpp_rtp_stat_disable_cmd_t;
 
-typedef struct  fpp_rtp_stat_dtmf_pt_cmd {
+typedef struct  {
 	uint16_t pt; /* 2 payload types coded on 8bits */
 } __attribute__((__packed__)) fpp_rtp_stat_dtmf_pt_cmd_t;
 
@@ -833,7 +867,7 @@ typedef struct  fpp_rtp_stat_dtmf_pt_cmd {
 
 #define FPP_VOICE_BUFFER_SCATTER_MAX	48
 
-typedef struct fpp_voice_buffer_load_cmd {
+typedef struct {
 	uint16_t buffer_id;
 	uint16_t payload_type;
 	uint16_t frame_size;
@@ -843,11 +877,11 @@ typedef struct fpp_voice_buffer_load_cmd {
 	uint32_t addr[FPP_VOICE_BUFFER_SCATTER_MAX];
 } __attribute__((__packed__)) fpp_voice_buffer_load_cmd_t;
 
-typedef struct fpp_voice_buffer_unload_cmd {
+typedef struct {
 	uint16_t buffer_id;
 } __attribute__((__packed__)) fpp_voice_buffer_unload_cmd_t;
 
-typedef struct fpp_voice_buffer_start_cmd {
+typedef struct {
 	uint16_t socket_id;
 	uint16_t buffer_id;
 	uint16_t seq_number_base;
@@ -856,7 +890,7 @@ typedef struct fpp_voice_buffer_start_cmd {
 	uint32_t timestamp_base;
 } __attribute__((__packed__)) fpp_voice_buffer_start_cmd_t;
 
-typedef struct fpp_voice_buffer_stop_cmd {
+typedef struct {
         uint16_t socket_id;
 } __attribute__((__packed__)) fpp_voice_buffer_stop_cmd_t;
 /*-------------------------------- Exceptions -------------------------------*/
@@ -872,14 +906,14 @@ typedef struct fpp_voice_buffer_stop_cmd {
 
 #define FPP_EXPT_MAX_DSCP   63
 
-typedef struct fpp_expt_queue_dscp_cmd {
+typedef struct {
 	uint16_t	queue;
 	uint16_t	num_dscp;
 	uint8_t	dscp[FPP_EXPT_MAX_DSCP];
 	uint8_t	pad;
 } __attribute__((__packed__)) fpp_expt_queue_dscp_cmd_t;
 
-typedef struct fpp_expt_queue_control_cmd {
+typedef struct {
 	uint16_t	queue;
 	uint16_t	pad;
 } __attribute__((__packed__)) fpp_expt_queue_control_cmd_t;
@@ -931,7 +965,7 @@ typedef struct fpp_expt_queue_control_cmd {
 #define FPP_EXPT_TYPE_ARP   0x2
 #define FPP_EXPT_TYPE_PCAP  0x3
 
-typedef struct fpp_qm_qos_enable_cmd {
+typedef struct {
 #ifndef LS1043
 	uint16_t	interface;
 #else
@@ -940,7 +974,7 @@ typedef struct fpp_qm_qos_enable_cmd {
 	uint16_t	enable;
 } __attribute__((__packed__)) fpp_qm_qos_enable_cmd_t;              
 
-typedef struct fpp_qm_queue_qos_enable_cmd {
+typedef struct {
 #ifndef LS1043
 	uint16_t	interface;
 #else
@@ -951,7 +985,7 @@ typedef struct fpp_qm_queue_qos_enable_cmd {
 } __attribute__((__packed__)) fpp_qm_queue_qos_enable_cmd_t;
 
 
-typedef struct fpp_qm_qos_alg_cmd {
+typedef struct {
 #ifndef LS1043
 	uint16_t	interface;
 #else
@@ -960,7 +994,7 @@ typedef struct fpp_qm_qos_alg_cmd {
         uint16_t	scheduler;
 } __attribute__((__packed__)) fpp_qm_qos_alg_cmd_t;
                 
-typedef struct fpp_qm_nhigh_cmd {
+typedef struct {
 #ifndef LS1043
 	uint16_t	interface;
 #else
@@ -969,7 +1003,7 @@ typedef struct fpp_qm_nhigh_cmd {
         uint16_t	number_high_queues;
 } __attribute__((__packed__)) fpp_qm_nhigh_cmd_t;
 
-typedef struct fpp_qm_max_txdepth_cmd_t {
+typedef struct {
 #ifndef LS1043
 	uint16_t	interface;
 #else
@@ -978,7 +1012,7 @@ typedef struct fpp_qm_max_txdepth_cmd_t {
         uint16_t	max_bytes;
 } __attribute__((__packed__)) fpp_qm_max_txdepth_cmd_t;
 
-typedef struct fpp_qm_max_qdepth_cmd {
+typedef struct {
 #ifndef LS1043
 	uint16_t	interface;
 #else
@@ -987,7 +1021,7 @@ typedef struct fpp_qm_max_qdepth_cmd {
         uint16_t	qtxdepth[FPP_NUM_QUEUES];
 } __attribute__((__packed__)) fpp_qm_max_qdepth_cmd_t;
 
-typedef struct fpp_qm_max_weight_cmd {
+typedef struct {
 #ifndef LS1043
 	uint16_t	interface;
 #else
@@ -996,7 +1030,7 @@ typedef struct fpp_qm_max_weight_cmd {
         uint16_t	qxweight[FPP_NUM_QUEUES];
 } __attribute__((__packed__)) fpp_qm_max_weight_cmd_t;
 
-typedef struct fpp_qm_rate_limit_cmd {
+typedef struct {
 #ifndef LS1043
 	uint16_t	interface;
 #else
@@ -1008,12 +1042,12 @@ typedef struct fpp_qm_rate_limit_cmd {
         uint32_t	bucket_size;
 } __attribute__((__packed__)) fpp_qm_rate_limit_cmd_t;
 
-typedef struct fpp_qm_expt_rate_cmd {
+typedef struct {
         uint16_t	if_type;
         uint16_t	pkts_per_msec;
 } __attribute__((__packed__)) fpp_qm_expt_rate_cmd_t;
 
-typedef struct fpp_qm_query_rl
+typedef struct
 {
         uint16_t	action;
         uint16_t	mask;
@@ -1022,7 +1056,7 @@ typedef struct fpp_qm_query_rl
 } __attribute__((__packed__)) fpp_qm_query_rl_t;
 
 #ifndef COMCERTO_2000
-typedef struct fpp_qm_query_cmd
+typedef struct
 {
 	uint16_t action;
 	uint16_t port;
@@ -1100,7 +1134,7 @@ typedef struct fpp_qm_query_sched_cmd
 } __attribute__((__packed__)) fpp_qm_query_sched_cmd_t;
 #endif
 
-typedef struct fpp_qm_reset_cmd {
+typedef struct {
 #ifndef LS1043
 	uint16_t	interface;
 #else
@@ -1109,7 +1143,7 @@ typedef struct fpp_qm_reset_cmd {
 	uint16_t	pad;
 } __attribute__((__packed__)) fpp_qm_reset_cmd_t;
 
-typedef struct fpp_qm_shaper_cfg {
+typedef struct {
 #ifndef LS1043
 	uint16_t	interface;
 #else
@@ -1124,7 +1158,7 @@ typedef struct fpp_qm_shaper_cfg {
         uint32_t	queues;
 } __attribute__((__packed__)) fpp_qm_shaper_cfg_t;
 
-typedef struct fpp_qm_scheduler_cfg {
+typedef struct {
 #ifndef LS1043
 	uint16_t	interface;
 #else
@@ -1137,7 +1171,7 @@ typedef struct fpp_qm_scheduler_cfg {
         uint32_t	queues;
 } __attribute__((__packed__)) fpp_qm_scheduler_cfg_t;
 
-typedef struct fpp_qm_dscp_queue_mod {
+typedef struct {
         uint16_t	queue;
         uint16_t	num_dscp;
         uint8_t	dscp[FPP_NUM_DSCP];
@@ -1181,7 +1215,7 @@ typedef struct fpp_qm_dscp_queue_mod {
 #define FPP_L2_BRIDGE_MODE_LEARNING    2
 #define FPP_L2_BRIDGE_MODE_NO_LEARNING 3
 
-typedef struct fpp_rx_icc_enable_cmd {
+typedef struct {
 	uint16_t	interface;
 	uint16_t	acc_value;
 	uint16_t	on_thr;
@@ -1191,11 +1225,11 @@ typedef struct fpp_rx_icc_enable_cmd {
 	uint32_t	val2;
 } __attribute__((__packed__)) fpp_rx_icc_enable_cmd_t;
 
-typedef struct fpp_rx_icc_disable_cmd {
+typedef struct {
 	uint16_t	interface;
 } __attribute__((__packed__)) fpp_rx_icc_disable_cmd_t;
 
-typedef struct fpp_rx_icc_show_return_cmd {
+typedef struct {
 	uint16_t	padding_in_rc_out;
 	uint16_t	state;
 	uint16_t	acc_value;
@@ -1204,7 +1238,7 @@ typedef struct fpp_rx_icc_show_return_cmd {
 } __attribute__((__packed__)) fpp_rx_icc_show_return_cmd_t;
 
 /* L2 Bridging Enable command */
-typedef struct fpp_l2_bridge_enable_cmd {
+typedef struct {
 	uint16_t	interface;
 	uint16_t	enable_flag;
 	char  		input_name[IFNAMSIZ];
@@ -1212,7 +1246,7 @@ typedef struct fpp_l2_bridge_enable_cmd {
 
 
 /* L2 Bridging Add Entry command */
-typedef struct fpp_l2_bridge_add_entry_cmd {
+typedef struct {
 	uint16_t	input_interface;
 	uint16_t	input_svlan;
 	uint16_t	input_cvlan;
@@ -1233,7 +1267,7 @@ typedef struct fpp_l2_bridge_add_entry_cmd {
 
 
 /* L2 Bridging Remove Entry command */
-typedef struct fpp_l2_bridge_remove_entry_cmd {
+typedef struct {
 	uint16_t	input_interface;
 	uint16_t	input_svlan;
 	uint16_t	input_cvlan;
@@ -1247,7 +1281,7 @@ typedef struct fpp_l2_bridge_remove_entry_cmd {
 
 
 /* L2 Bridging Query Status response */
-typedef struct fpp_l2_bridge_query_status_response {
+typedef struct {
 	uint16_t ackstatus;
 	uint16_t status;
 	uint8_t ifname[IFNAMSIZ];
@@ -1256,7 +1290,7 @@ typedef struct fpp_l2_bridge_query_status_response {
 
 
 /* L2 Bridging Query Entry response */
-typedef struct fpp_l2_bridge_query_entry_response {
+typedef struct {
 	uint16_t	ackstatus;
 	uint16_t	eof;
 	uint16_t	input_interface;
@@ -1278,7 +1312,7 @@ typedef struct fpp_l2_bridge_query_entry_response {
 } __attribute__((__packed__)) fpp_l2_bridge_query_entry_response_t;
 
 /* L2 Bridging  Flow entry command */
-typedef struct fpp_l2_bridge_flow_entry_cmd {
+typedef struct {
 	uint16_t action;				/*Action to perform*/
 	uint16_t	ethertype;			/* If VLAN Tag !=0, ethertype of next header */
 	uint8_t	destaddr[6];			/* Dst MAC addr */
@@ -1301,7 +1335,7 @@ typedef struct fpp_l2_bridge_flow_entry_cmd {
 } __attribute__((__packed__)) fpp_l2_bridge_flow_entry_cmd_t;
 
 /* L2 Bridging Control command */
-typedef struct fpp_l2_bridge_control_cmd {
+typedef struct {
 	uint16_t mode_timeout;		/* Either set bridge mode or set timeout for flow entries */
 } __attribute__((__packed__)) fpp_l2_bridge_control_cmd_t;
 
@@ -1356,56 +1390,56 @@ typedef struct fpp_l2_bridge_control_cmd {
 #define FPP_ERR_FLOW_ENTRY_NOT_FOUND	1600
 #define FPP_ERR_INVALID_IP_FAMILY	1601
 
-typedef struct fpp_stat_enable_cmd {
+typedef struct {
 	uint16_t	action; /* 1 - Enable, 0 - Disable */
 	uint16_t	pad;
 	uint32_t	bitmask; /* Specifies the feature to be enabled or disabled */
 } __attribute__((__packed__)) fpp_stat_enable_cmd_t;
 
-typedef struct fpp_stat_queue_cmd {
+typedef struct {
 	uint16_t	action; /* Reset, Query, Query & Reset */
 	uint16_t	interface;
 	uint16_t	queue;
 	uint16_t	pad;
 } __attribute__((__packed__)) fpp_stat_queue_cmd_t;
 
-typedef struct fpp_stat_interface_cmd {
+typedef struct {
 	uint16_t	action; /* Reset, Query, Query & Reset */
 	uint16_t	interface;
 } __attribute__((__packed__)) fpp_stat_interface_cmd_t;
 
-typedef struct fpp_stat_connection_cmd {
+typedef struct {
 	uint16_t	action; /* Reset, Query, Query & Reset */
 	uint16_t	pad;
 } __attribute__((__packed__)) fpp_stat_connection_cmd_t;
 
-typedef struct fpp_stat_pppoe_status_cmd {
+typedef struct {
 	uint16_t	action; /* Reset, Query, Query & Reset */
 	uint16_t	pad;
 } __attribute__((__packed__)) fpp_stat_pppoe_status_cmd_t;
 
-typedef struct fpp_stat_bridge_status_cmd {
+typedef struct {
 	uint16_t	action; /* Reset, Query, Query & Reset */
 	uint16_t	pad;
 } __attribute__((__packed__)) fpp_stat_bridge_status_cmd_t;
 
-typedef struct fpp_stat_ipsec_status_cmd {
+typedef struct {
 	uint16_t	action; /* Reset, Query, Query & Reset */
 	uint16_t	pad;
 } __attribute__((__packed__)) fpp_stat_ipsec_status_cmd_t;
 
-typedef struct fpp_stat_vlan_status_cmd {
+typedef struct {
 	uint16_t	action; /* Reset, Query, Query & Reset */
 	uint16_t	pad;
 } __attribute__((__packed__)) fpp_stat_vlan_status_cmd_t;
 
-typedef struct fpp_stat_tunnel_status_cmd {
+typedef struct {
 	uint16_t	action; /* Reset, Query, Query & Reset */
 	uint16_t	pad;
         char            if_name[IFNAMSIZ];
 } __attribute__((__packed__)) fpp_stat_tunnel_status_cmd_t;
 
-typedef struct fpp_stat_flow_status_cmd {
+typedef struct {
 	uint8_t	action;
 	uint8_t	pad;
 	uint8_t	ip_family;
@@ -1416,15 +1450,15 @@ typedef struct fpp_stat_flow_status_cmd {
 		struct {
 			uint32_t	Saddr;		/*Source IPv4 address*/
 			uint32_t	Daddr;		/*Destination IPv4 address*/
-		};
+		} v4;
 		struct {
 			uint32_t	Saddr_v6[4];		/*Source IPv6 address*/
 			uint32_t	Daddr_v6[4];		/*Destination IPv6 address*/
-		};
-	};
+		} v6;
+	} ipv;
 } __attribute__((__packed__)) fpp_stat_flow_status_cmd_t;
 
-typedef struct fpp_stat_queue_response {
+typedef struct {
 	uint16_t	ackstatus;
 	uint16_t	rsvd1;
 	uint32_t	peak_queue_occ;
@@ -1432,7 +1466,7 @@ typedef struct fpp_stat_queue_response {
 	uint32_t	dropped_pkts;
 } __attribute__((__packed__)) fpp_stat_queue_response_t;
 
-typedef struct fpp_stat_interface_pkt_response {
+typedef struct {
 	uint16_t	ackstatus;
 	uint16_t	rsvd1;
 	uint32_t	total_pkts_transmitted;
@@ -1441,18 +1475,18 @@ typedef struct fpp_stat_interface_pkt_response {
 	uint32_t	total_bytes_received[2]; /* 64 bit counter stored as 2*32 bit counters */
 } __attribute__((__packed__)) fpp_stat_interface_pkt_response_t;
 
-typedef struct fpp_stat_conn_response {
+typedef struct {
 	uint16_t	ackstatus;
 	uint16_t	rsvd1;
 	uint32_t	max_active_connections;
 	uint32_t	num_active_connections;
 } __attribute__((__packed__)) fpp_stat_conn_response_t;
 
-typedef struct fpp_stat_pppoe_status_response {
+typedef struct {
 	uint16_t ackstatus;
 } __attribute__((__packed__)) fpp_stat_pppoe_status_response_t;
 
-typedef struct fpp_stat_pppoe_entry_response {
+typedef struct {
 	uint16_t 	ackstatus;
 	uint16_t 	eof;
 	uint16_t	sessionid;
@@ -1461,11 +1495,11 @@ typedef struct fpp_stat_pppoe_entry_response {
 	uint32_t	total_packets_transmitted;
 } __attribute__((__packed__)) fpp_stat_pppoe_entry_response_t;
 
-typedef struct fpp_stat_bridge_status_response {
+typedef struct {
 	uint16_t	ackstatus;
 } __attribute__((__packed__)) fpp_stat_bridge_status_response_t;
 
-typedef struct fpp_stat_bridge_entry_response {
+typedef struct {
 	uint16_t	ackstatus;
 	uint16_t	eof;
 	uint16_t	input_interface;
@@ -1483,7 +1517,7 @@ typedef struct fpp_stat_bridge_entry_response {
 	char        output_name[IFNAMSIZ];
 } __attribute__((__packed__)) fpp_stat_bridge_entry_response_t;
 
-typedef struct fpp_stat_ipsec_entry_response {
+typedef struct {
 	uint16_t	ackstatus;
 	uint16_t	eof;
 	uint16_t	family;
@@ -1497,7 +1531,7 @@ typedef struct fpp_stat_ipsec_entry_response {
 } __attribute__((__packed__)) fpp_stat_ipsec_entry_response_t;
 
 
-typedef struct fpp_stat_vlan_entry_response {
+typedef struct {
 	uint16_t ackstatus;
 	uint16_t eof;
 	uint16_t vlanID;
@@ -1511,7 +1545,7 @@ typedef struct fpp_stat_vlan_entry_response {
 } __attribute__((__packed__)) fpp_stat_vlan_entry_response_t;
 
 
-typedef struct fpp_stat_tunnel_entry_response {
+typedef struct {
 	uint16_t ackstatus;
 	uint16_t eof;
 	uint32_t rsvd;
@@ -1522,7 +1556,7 @@ typedef struct fpp_stat_tunnel_entry_response {
 	unsigned char if_name[IFNAMSIZ];
 } __attribute__((__packed__)) fpp_stat_tunnel_entry_response_t;
 
-typedef struct fpp_stat_flow_entry_response {
+typedef struct {
 	uint16_t	ackstatus;
 	uint8_t	ip_family;
 	uint8_t	Protocol;
@@ -1532,12 +1566,12 @@ typedef struct fpp_stat_flow_entry_response {
 		struct {
 			uint32_t	Saddr;		/*Source IPv4 address*/
 			uint32_t	Daddr;		/*Destination IPv4 address*/
-		};
+		} v4;
 		struct {
 			uint32_t	Saddr_v6[4];		/*Source IPv6 address*/
 			uint32_t	Daddr_v6[4];		/*Destination IPv6 address*/
-		};
-	};
+		} v6;
+	} ipv;
 	uint64_t	TotalPackets;
 	uint64_t	TotalBytes;
 } __attribute__((__packed__)) fpp_stat_flow_entry_response_t;
@@ -1571,7 +1605,7 @@ typedef struct fpp_stat_flow_entry_response {
 #define FPP_ALTCONF_IPSECRL_ON		1
 #define FPP_ALTCONF_IPSECRL_NUM_PARAMS	3  /* maximu number of u32 allowed for this option */
 
-typedef struct fpp_alt_set_cmd {
+typedef struct {
 	uint16_t	option_id;
 	uint16_t	num_params;
 	uint32_t	params[FPP_ALTCONF_OPTION_MAX_PARAMS];
@@ -1586,26 +1620,26 @@ typedef struct fpp_alt_set_cmd {
 #define FPP_NATPT_CONTROL_4to6		0x02
 #define FPP_NATPT_CONTROL_TCPFIN	0x0100
 
-typedef struct fpp_natpt_open_cmd {
+typedef struct {
 	uint16_t		socket_a;
 	uint16_t		socket_b;
 	uint16_t		control;
 	uint16_t		rsvd1;
 } __attribute__((__packed__)) fpp_natpt_open_cmd_t;
 
-typedef struct fpp_natpt_close_cmd {
+typedef struct {
 	uint16_t		socket_a;
 	uint16_t		socket_b;
 } __attribute__((__packed__)) fpp_natpt_close_cmd;
 
-typedef struct fpp_natpt_query_cmd {
+typedef struct {
 	uint16_t		reserved1;
 	uint16_t		socket_a;
 	uint16_t		socket_b;
 	uint16_t		reserved2;
 } __attribute__((__packed__)) fpp_natpt_query_cmd_t;
 
-typedef struct fpp_natpt_query_response {
+typedef struct {
 	uint16_t		retcode;
 	uint16_t		socket_a;
 	uint16_t		socket_b;
@@ -1624,7 +1658,7 @@ typedef struct fpp_natpt_query_response {
 #define FPP_CMD_IPV4_FF_CONTROL		0x0321
 
 /* Structure representing the command sent to enable/disable fast-forward */
-typedef struct fpp_ff_ctrl_cmd {
+typedef struct {
         uint16_t enable;
         uint16_t reserved;
 } __attribute__((__packed__)) fpp_ff_ctrl_cmd_t;
@@ -1637,7 +1671,7 @@ typedef struct fpp_ff_ctrl_cmd {
 #define FPP_CMD_VLAN_RESET		0x0902
 
 /* VLAN command as understood by FPP */
-typedef struct fpp_vlan_cmd {
+typedef struct {
         uint16_t       action;
         uint16_t       vlan_id; /* Carries skip count for ACTION_QUERY */
         char 		vlan_ifname[IFNAMSIZ];
@@ -1653,7 +1687,7 @@ typedef struct fpp_vlan_cmd {
 
 
 /* MacVlan command as understood by FPP */
-typedef struct fpp_macvlan_cmd {
+typedef struct {
         uint16_t       action;
         unsigned char   macaddr[6]; 
         char 		macvlan_ifname[IFNAMSIZ];
@@ -1692,7 +1726,7 @@ typedef struct fpp_macvlan_cmd {
 #define FPP_CMD_NETKEY_FLOW_REMOVE		FPP_CMD_IPSEC_FLOW_REMOVE
 #define FPP_CMD_NETKEY_FLOW_NOTIFY		FPPCMD_IPSEC_FLOW_NOTIFY
 
-typedef struct fpp_sa_query_cmd {
+typedef struct {
         uint16_t	action;
         uint16_t	handle; /* handle */
         /* SPI information */
@@ -1758,7 +1792,7 @@ typedef struct fpp_sa_query_cmd {
 #define FPP_ERR_PPPOE_ENTRY_NOT_FOUND		801
 
 /* Structure representing the command sent to add or remove a pppoe session */
-typedef struct fpp_pppoe_cmd {
+typedef struct {
 	uint16_t action;		 	/*Action to perform*/
 	uint16_t sessionid;
 	uint8_t  macaddr[6];
@@ -1767,13 +1801,13 @@ typedef struct fpp_pppoe_cmd {
 	uint16_t mode;
 } __attribute__((__packed__)) fpp_pppoe_cmd_t;
 
-typedef struct fpp_pppoe_idle {
+typedef struct {
 	char		ppp_if[IFNAMSIZ];
 	uint32_t	xmit_idle;
 	uint32_t	recv_idle;
 } __attribute__((__packed__)) fpp_pppoe_idle_t;
 
-typedef struct fpp_relay_info {
+typedef struct {
         uint8_t        peermac1[6];
         uint8_t        peermac2[6];
         char            ipifname[IFNAMSIZ];
@@ -1783,7 +1817,7 @@ typedef struct fpp_relay_info {
 } __attribute__((__packed__)) fpp_relay_info_t;
 
 /* Structure representing the command sent to add or remove a pppoe session */
-typedef struct fpp_pppoe_relay_cmd {
+typedef struct {
         uint16_t       action;      /*Action to perform */
         uint8_t        peermac1[6];
         uint8_t        peermac2[6];
@@ -1840,7 +1874,7 @@ typedef struct fpp_wifi_cmd
 #define FPP_CMD_TUNNEL_4rd_ID_CONV_psid     0x0B08
 
 /* CMM / FPP API Command */
-typedef struct fpp_tunnel_create_cmd {
+typedef struct {
 	char            name[IFNAMSIZ];
 	uint32_t       local[4];
 	uint32_t       remote[4];
@@ -1857,11 +1891,11 @@ typedef struct fpp_tunnel_create_cmd {
 	uint16_t	pad;
 } __attribute__((__packed__)) fpp_tunnel_create_cmd_t;
 
-typedef struct fpp_tunnel_del_cmd {
+typedef struct {
         char            name[IFNAMSIZ];
 } __attribute__((__packed__)) fpp_tunnel_del_cmd_t;
 
-typedef struct fpp_tunnel_sec_cmd {
+typedef struct {
         char            name[IFNAMSIZ];
         uint16_t       sa_nr;
         uint16_t       sa_reply_nr;
@@ -1870,7 +1904,7 @@ typedef struct fpp_tunnel_sec_cmd {
 } __attribute__((__packed__)) fpp_tunnel_sec_cmd_t;
 
 /* CMM / FPP API Command */
-typedef struct fpp_tunnel_query_cmd {
+typedef struct {
 	unsigned short	result;
 	unsigned short 	unused;
         char            name[IFNAMSIZ];
@@ -1898,7 +1932,7 @@ typedef struct {
 }sam_port_info_t;
 typedef sam_port_info_t rt_mw_ipstack_sam_port_t;
 
-typedef struct fpp_tunnel_id_conv_cmd {
+typedef struct {
        uint8_t        name[IFNAMSIZ];
        sam_port_info_t sam_port_info;
         uint32_t       IdConvStatus:1,
@@ -1907,7 +1941,7 @@ typedef struct fpp_tunnel_id_conv_cmd {
 
 #else
 
-typedef struct fpp_tunnel_id_conv_cmd {
+typedef struct {
 	uint16_t IdConvStatus;
         uint16_t       Pad;
 } __attribute__((__packed__)) fpp_tunnel_id_conv_cmd_t;
@@ -1964,7 +1998,7 @@ typedef struct CAL_PACKED {
 	uint32_t	timeout_value2;
 } fpp_timeout_cmd_t;
 
-typedef struct fpp_frag_timeout_cmd {
+typedef struct {
 	uint16_t	timeout;
 	uint16_t	mode;
 } __attribute__((__packed__)) fpp_frag_timeout_cmd_t;
@@ -1979,20 +2013,20 @@ typedef struct fpp_frag_timeout_cmd {
 #define FPP_PKTCAP_SLICE				0x2
 #define MAX_FLF_INSTRUCTIONS                            30
 
-typedef struct fpp_pktcap_status_cmd{
+typedef struct {
 	uint16_t	action;
 	uint8_t 	ifindex;
 	uint8_t	status;
 }__attribute__((__packed__)) fpp_pktcap_status_cmd_t;
 
-typedef struct fpp_pktcap_slice_cmd{
+typedef struct {
 	uint16_t	action;
 	uint8_t 	ifindex;
 	uint8_t	rsvd;
 	uint16_t	slice;
 }__attribute__((__packed__)) fpp_pktcap_slice_cmd_t;
 
-typedef struct fpp_pktcap_query_cmd{
+typedef struct {
 	uint16_t	slice;
 	uint16_t	status;
 }__attribute__((__packed__)) fpp_pktcap_query_cmd_t;
@@ -2002,7 +2036,7 @@ typedef struct fpp_pktcap_query_cmd{
 /* Port Update command - begin */
 
 #define FPP_CMD_PORT_UPDATE 0x0505
-typedef struct fpp_port_update_cmd {
+typedef struct {
 	uint16_t port_id;
 	char ifname[IFNAMSIZ];
 }__attribute__((__packed__)) fpp_port_update_cmd_t;
@@ -2021,17 +2055,17 @@ typedef struct fpp_port_update_cmd {
 #define FPP_ERR_ICC_THRESHOLD_OUT_OF_RANGE	1503
 #define FPP_ERR_ICC_INVALID_MASKLEN		1504
 
-typedef struct fpp_icc_reset_cmd {
+typedef struct {
 	uint16_t	reserved1;
 	uint16_t	reserved2;
 } __attribute__((__packed__)) fpp_icc_reset_cmd_t;
 
-typedef struct fpp_icc_threshold_cmd {
+typedef struct {
 	uint16_t	bmu1_threshold;
 	uint16_t	bmu2_threshold;
 } __attribute__((__packed__)) fpp_icc_threshold_cmd_t;
 
-typedef struct fpp_icc_add_delete_cmd {
+typedef struct {
 	uint16_t	action;
 	uint8_t	interface;
 	uint8_t	table_type;
@@ -2065,16 +2099,16 @@ typedef struct fpp_icc_add_delete_cmd {
 			uint16_t prio_from;
 			uint16_t prio_to;
 		} vlan;
-	};
+	} icc;
 } __attribute__((__packed__)) fpp_icc_add_delete_cmd_t;
 
-typedef struct fpp_icc_query_cmd {
+typedef struct {
 	uint16_t	action;
 	uint8_t	interface;
 	uint8_t	reserved;
 } __attribute__((__packed__)) fpp_icc_query_cmd_t;
 
-typedef struct fpp_icc_query_reply {
+typedef struct {
 	uint16_t	rtncode;
 	uint16_t	query_result;
 	uint8_t	interface;
@@ -2109,14 +2143,14 @@ typedef struct fpp_icc_query_reply {
 			uint16_t prio_from;
 			uint16_t prio_to;
 		} vlan;
-	};
+	} icc;
 } __attribute__((__packed__)) fpp_icc_query_reply_t;
 
 /*----------------------------------------L2TP-------------------------------*/
 #define FPP_CMD_L2TP_ITF_ADD		0x1600
 #define FPP_CMD_L2TP_ITF_DEL		0x1601
 
-typedef struct fpp_l2tp_itf_add_cmd {
+typedef struct {
 	char ifname[IFNAMSIZ];
 	uint16_t	sock_id;
 	uint16_t	local_tun_id;
@@ -2126,7 +2160,7 @@ typedef struct fpp_l2tp_itf_add_cmd {
 	uint16_t	options;
 }__attribute__((__packed__)) fpp_l2tp_itf_add_cmd_t;
 
-typedef struct fpp_l2tp_itf_del_cmd {
+typedef struct {
 	char ifname[IFNAMSIZ];
 }__attribute__((__packed__)) fpp_l2tp_itf_del_cmd_t;
 #endif /* FPP_H_ */
diff --git a/sw/xfci/libfci/public/fpp_ext.h b/sw/xfci/libfci/public/fpp_ext.h
index 3298c9c..a5b5692 100644
--- a/sw/xfci/libfci/public/fpp_ext.h
+++ b/sw/xfci/libfci/public/fpp_ext.h
@@ -30,7 +30,7 @@
 #define CAL_PACKED_ALIGNED(n)	__attribute__((packed, aligned(n)))
 #endif /* CAL_PACKED_ALIGNED */
 
-#define FPP_ERR_ENTRY_NOT_FOUND                 0xf104
+#define FPP_ERR_ENTRY_NOT_FOUND					0xf104
 #define FPP_ERR_INTERNAL_FAILURE				0xffff
 
 /**
@@ -246,11 +246,18 @@
  */
 typedef enum CAL_PACKED
 {
-	FPP_IF_ENABLED = (1 << 0),		/*!< If set, interface is enabled */
-	FPP_IF_PROMISC = (1 << 1),		/*!< If set, interface is promiscuous */
-	FPP_IF_MATCH_OR = (1 << 3),		/*!< Result of match is logical OR of rules, else AND */
-	FPP_IF_DISCARD = (1 << 4),		/*!< Discard matching frames */
-	FPP_IF_MIRROR = (1 << 5)		/*!< If set mirroring is enabled */
+	FPP_IF_ENABLED = (1 << 0),			/*!< If set, interface is enabled */
+	FPP_IF_PROMISC = (1 << 1),			/*!< If set, interface is promiscuous */
+	FPP_IF_MATCH_OR = (1 << 3),			/*!< Result of match is logical OR of rules, else AND */
+	FPP_IF_DISCARD = (1 << 4),			/*!< Discard matching frames */
+	FPP_IF_MIRROR = (1 << 5),			/*!< If set mirroring is enabled */
+	FPP_IF_LOADBALANCE = (1 << 6),		/*!< If set interface is part of loadbalance bucket */
+	FPP_IF_VLAN_CONF_CHECK = (1 << 7),	/*!< Enable/Disable VLAN conformance check */
+	FPP_IF_PTP_CONF_CHECK = (1 << 8),	/*!< Enable/Disable PTP conformance check */
+	FPP_IF_PTP_PROMISC = (1 << 9),		/*!< Enable/Disable PTP promiscuous mode */
+	FPP_IF_LOOPBACK = (1 << 10),		/*!< If set, loopback mode is enabled */
+	FPP_IF_ALLOW_Q_IN_Q = (1 << 11),	/*!< If set, QinQ traffic is accepted */
+	FPP_IF_MAX = (int)(1U << 31U)
 } fpp_if_flags_t;
 
 /**
@@ -302,9 +309,9 @@ typedef enum CAL_PACKED
 	FPP_IF_MATCH_FP1 = (1 << 28),			/**< Match Packets Accepted by Flexible Parser 1 */
 	FPP_IF_MATCH_SMAC = (1 << 29),			/**< Match Source MAC Address */
 	FPP_IF_MATCH_DMAC = (1 << 30),			/**< Match Destination MAC Address */
-	FPP_IF_MATCH_HIF_COOKIE = (1 << 31),	/**< Match HIF header cookie value */
+	FPP_IF_MATCH_HIF_COOKIE = (int)(1U << 31U),	/**< Match HIF header cookie value */
 	/* Ensure proper size */
-	FPP_IF_MATCH_MAX = (1 << 31)
+	FPP_IF_MATCH_MAX = (int)(1U << 31U)
 } fpp_if_m_rules_t;
 
 /**
@@ -337,7 +344,7 @@ typedef struct CAL_PACKED_ALIGNED(4)
 			uint32_t sip[4];
 			uint32_t dip[4];
 		} v6;
-	};
+	} ipv;
 	/** IP protocol (@ref FPP_IF_MATCH_PROTO) */
 	uint8_t proto;
 	/** Source MAC Address (@ref FPP_IF_MATCH_SMAC) */
@@ -397,7 +404,7 @@ typedef enum CAL_PACKED
  * 				- As reply buffer in functions @ref fci_query or @ref fci_cmd,
  * 				  with @ref FPP_CMD_PHY_IF command.
  */
-typedef struct CAL_PACKED
+typedef struct CAL_PACKED_ALIGNED(4)
 {
 	uint16_t action;			/**< Action */
 	char name[IFNAMSIZ];		/**< Interface name */
@@ -405,13 +412,13 @@ typedef struct CAL_PACKED
 	fpp_if_flags_t flags;		/**< Interface flags (network endian) */
 	fpp_phy_if_op_mode_t mode;	/**< Phy if mode (network endian) */
 	fpp_phy_if_block_state_t block_state;	/**< Phy if block state */
+	fpp_phy_if_stats_t	stats;	/**< Physical interface statistics */
 	uint8_t mac_addr[6];		/**< Phy if MAC (network endian) */
 	char mirror[IFNAMSIZ];		/**< Name of interface to mirror the traffic to */
 	/**	Table to be used to filter ingress traffic. See @ref FPP_CMD_FP_TABLE. If
 	 	here is non-empty string then the filter is enabled. Empty string disables
 	 	the filter. */
 	char ftable[16];
-	fpp_phy_if_stats_t	stats;	/**< Physical interface statistics */
 } fpp_phy_if_cmd_t;
 
 /**
@@ -422,9 +429,10 @@ typedef struct CAL_PACKED
  * 				- As reply buffer in functions @ref fci_query or @ref fci_cmd,
  * 				  with @ref FPP_CMD_LOG_IF command.
  */
-typedef struct CAL_PACKED
+typedef struct CAL_PACKED_ALIGNED(4)
 {
 	uint16_t action;			/**< Action */
+	uint8_t res[2];				/* Additional 2B to ensure correct alignment */
 	char name[IFNAMSIZ];		/**< Interface name */
 	uint32_t id;				/**< Interface ID (network endian) */
 	char parent_name[IFNAMSIZ];	/**< Parent physical interface name */
@@ -433,8 +441,8 @@ typedef struct CAL_PACKED
 								   must be stored in network order (network endian) */
 	fpp_if_flags_t flags;		/**< Interface flags from query or flags to be set (network endian) */
 	fpp_if_m_rules_t match;		/**< Match rules from query or match rules to be set (network endian) */
-	fpp_if_m_args_t arguments;	/**< Arguments for match rules (network endian) */
-	fpp_algo_stats_t stats;		/**< Logical interface statistics */
+	fpp_if_m_args_t CAL_PACKED_ALIGNED(4) arguments;	/**< Arguments for match rules (network endian) */
+	fpp_algo_stats_t CAL_PACKED_ALIGNED(4) stats;		/**< Logical interface statistics */
 } fpp_log_if_cmd_t;
 
 /**
@@ -479,7 +487,7 @@ typedef struct CAL_PACKED
  * Possible command return values are:
  *     - @c FPP_ERR_OK: Domain added.
  *     - @c FPP_ERR_WRONG_COMMAND_PARAM: Unexpected argument.
- *     - @c FPP_ERR_L2BRIDGE_DOMAIN_ALREADY_REGISTERED: Given domain already registered.
+ *     - @c FPP_ERR_L2_BD_ALREADY_REGISTERED: Given domain already registered.
  *     - @c FPP_ERR_INTERNAL_FAILURE: Internal FCI failure.
  *
  *
@@ -499,7 +507,7 @@ typedef struct CAL_PACKED
  * Possible command return values are:
  *     - @c FPP_ERR_OK: Domain removed.
  *     - @c FPP_ERR_WRONG_COMMAND_PARAM: Unexpected argument.
- *     - @c FPP_ERR_L2BRIDGE_DOMAIN_NOT_FOUND: Given domain not found.
+ *     - @c FPP_ERR_L2_BD_NOT_FOUND: Given domain not found.
  *     - @c FPP_ERR_INTERNAL_FAILURE: Internal FCI failure.
  *
  * Action FPP_ACTION_UPDATE
@@ -542,7 +550,7 @@ typedef struct CAL_PACKED
  * Possible command return values are:
  *     - @c FPP_ERR_OK: Domain updated.
  *     - @c FPP_ERR_WRONG_COMMAND_PARAM: Unexpected argument.
- *     - @c FPP_ERR_L2BRIDGE_DOMAIN_NOT_FOUND: Given domain not found.
+ *     - @c FPP_ERR_L2_BD_NOT_FOUND: Given domain not found.
  *     - @c FPP_ERR_INTERNAL_FAILURE: Internal FCI failure.
  *
  * Action FPP_ACTION_QUERY and FPP_ACTION_QUERY_CONT
@@ -584,23 +592,23 @@ typedef struct CAL_PACKED
  *
  * Possible command return values are:
  *     - @c FPP_ERR_OK: Response buffer written.
- *     - @c FPP_ERR_L2BRIDGE_DOMAIN_NOT_FOUND: No more entries.
+ *     - @c FPP_ERR_L2_BD_NOT_FOUND: No more entries.
  *     - @c FPP_ERR_INTERNAL_FAILURE: Internal FCI failure.
  *
  * @hideinitializer
  */
 #define FPP_CMD_L2_BD						0xf200
 
-#define FPP_ERR_L2BRIDGE_DOMAIN_ALREADY_REGISTERED	0xf201
-#define FPP_ERR_L2BRIDGE_DOMAIN_NOT_FOUND			0xf202
+#define FPP_ERR_L2_BD_ALREADY_REGISTERED	0xf201
+#define FPP_ERR_L2_BD_NOT_FOUND				0xf202
 
 /**
  * @brief	L2 bridge domain flags
  */
 typedef enum CAL_PACKED
 {
-	FPP_L2BR_DOMAIN_DEFAULT = (1 << 0),	/*!< Domain type is default */
-	FPP_L2BR_DOMAIN_FALLBACK = (1 << 1)	/*!< Domain type is fallback */
+	FPP_L2_BD_DEFAULT = (1 << 0),	/*!< Domain type is default */
+	FPP_L2_BD_FALLBACK = (1 << 1)	/*!< Domain type is fallback */
 } fpp_l2_bd_flags_t;
 
 /**
@@ -609,7 +617,7 @@ typedef enum CAL_PACKED
  *          - for command buffer in functions @ref fci_write or @ref fci_cmd,
  *            with commands: @ref FPP_CMD_L2_BD.
  */
-typedef struct CAL_PACKED fpp_l2_bridge_domain_control_cmd
+typedef struct CAL_PACKED
 {
 	/**	Action to be executed (register, unregister, query, ...) */
 	uint16_t action;
@@ -678,6 +686,10 @@ typedef struct CAL_PACKED fpp_l2_bridge_domain_control_cmd
  *     .forward_list = ..,
  *     // Configure the static entry as Local MAC address for L2L3 Bridge mode
  *     .local = 1
+ *     // Do not discard frames sent from the MAC address
+ *     .src_discard = 0
+ *     // Do not discard frames sent to the MAC address
+ *     .dst_discard = 0
  *   };
  * @endcode
  *
@@ -759,7 +771,7 @@ typedef struct CAL_PACKED fpp_l2_bridge_domain_control_cmd
  *     .mac = {...} ;
  *     //Forward list (network endian).
  *     .forward_list = ..;
-  *     // Is the static entry used as Local MAC address for L2L3 Bridge mode
+ *     // Is the static entry used as Local MAC address for L2L3 Bridge mode
  *     .local = ... ; //1 = yes, 0 = no
 
  * @endcode
@@ -776,7 +788,7 @@ typedef struct CAL_PACKED fpp_l2_bridge_domain_control_cmd
 #define FPP_ERR_L2_STATIC_ENT_ALREADY_REGISTERED	0xf341
 #define FPP_ERR_L2_STATIC_EN_NOT_FOUND				0xf342
 
-typedef struct CAL_PACKED fpp_l2_bridge_static_entry_cmd
+typedef struct CAL_PACKED
 {
 	/**	Action to be executed (register, unregister, query, ...) */
 	uint16_t action;
@@ -797,8 +809,53 @@ typedef struct CAL_PACKED fpp_l2_bridge_static_entry_cmd
         MAC address are passed to the IP router algorithm when the value is 1 and the ingress physical interface is configured
         into the L2L3 bridge mode. Other traffic is handle by L2 bridge algorithm. */
 	uint8_t local;
+	/** Frames with this destination MAC address (and VLAN tag) shall be discarded (1 = enable, 0 = disable). */
+	uint8_t dst_discard;
+	/** Frames with this source MAC address (and VLAN tag) shall be discarded (1 = enable, 0 = disable). */
+	uint8_t src_discard;
 } fpp_l2_static_ent_cmd_t;
 
+/**
+ * @def FPP_CMD_L2_FLUSH_LEARNED
+ * @brief FCI command to flush learned MAC table entries
+ * @details	Command will remove all adresses from the L2 bridge MAC table
+ *          which were added within the learning process.
+ *
+ * Possible command return values are:
+ *     -  FPP_ERR_OK: Flush successful.
+ *     -  FPP_ERR_INTERNAL_FAILURE: Internal FCI failure.
+ *
+ * @hideinitializer
+ */
+#define FPP_CMD_L2_FLUSH_LEARNED					0xf380
+
+/**
+ * @def FPP_CMD_L2_FLUSH_STATIC
+ * @brief FCI command to flush static MAC table entries
+ * @details	Command will remove all addresses from the L2 bridge MAC table
+ *          which were added as static entries via @ref FPP_CMD_L2_STATIC_ENT.
+ *
+ * Possible command return values are:
+ *     -  FPP_ERR_OK: Flush successful.
+ *     -  FPP_ERR_INTERNAL_FAILURE: Internal FCI failure.
+ *
+ * @hideinitializer
+ */
+#define FPP_CMD_L2_FLUSH_STATIC						0xf390
+
+/**
+ * @def FPP_CMD_L2_FLUSH_ALL
+ * @brief FCI command to flush all MAC table entries
+ * @details	Command will remove all addresses from the L2 bridge MAC table.
+ *
+ * Possible command return values are:
+ *     -  FPP_ERR_OK: Flush successful.
+ *     -  FPP_ERR_INTERNAL_FAILURE: Internal FCI failure.
+ *
+ * @hideinitializer
+ */
+#define FPP_CMD_L2_FLUSH_ALL						0xf3a0
+
 /**
  * @def FPP_CMD_FP_TABLE
  * @brief Administers the Flexible Parser tables
@@ -910,7 +967,7 @@ typedef struct CAL_PACKED fpp_l2_bridge_static_entry_cmd
  *
  * @hideinitializer
  */
-#define FPP_CMD_FP_TABLE                    0xf220
+#define FPP_CMD_FP_TABLE						0xf220
 
 /**
  * @def FPP_CMD_FP_RULE
@@ -1006,7 +1063,7 @@ typedef struct CAL_PACKED fpp_l2_bridge_static_entry_cmd
  *
  * @hideinitializer
  */
-#define FPP_CMD_FP_RULE                     0xf221
+#define FPP_CMD_FP_RULE						0xf221
 
 #define FPP_ERR_FP_RULE_NOT_FOUND			0xf222
 
@@ -1060,7 +1117,7 @@ typedef enum CAL_PACKED
  * - Flexible Parser to stop and return REJECT
  * - Flexible Parser to set the next rule to rule specified in next_rule_name
  */
-typedef struct CAL_PACKED fpp_fp_rule_props_tag
+typedef struct CAL_PACKED
 {
 	/*	Unique identifier of the rule. It is a string up to 15 characters + '\0' */
     uint8_t rule_name[16];
@@ -1085,7 +1142,7 @@ typedef struct CAL_PACKED fpp_fp_rule_props_tag
 /**
  * @brief Arguments for the FPP_CMD_FP_RULE command
  */
-typedef struct CAL_PACKED fpp_fp_rule_cmd_tag
+typedef struct CAL_PACKED
 {
     uint16_t action;        /**< Action to be done */
     fpp_fp_rule_props_t r;  /**< Parameters of the rule */
@@ -1094,7 +1151,7 @@ typedef struct CAL_PACKED fpp_fp_rule_cmd_tag
 /**
  * @brief Arguments for the FPP_CMD_FP_TABLE command
  */
-typedef struct CAL_PACKED fpp_flexible_parser_table_cmd
+typedef struct CAL_PACKED
 {
     uint16_t action;                  /**< Action to be done */
     union
@@ -1106,7 +1163,7 @@ typedef struct CAL_PACKED fpp_flexible_parser_table_cmd
             uint16_t position;        /**< Position where to add rule (network endian) */
         } t;
         fpp_fp_rule_props_t r; /**< Properties of the rule - used as query result */
-    };
+    } table_info;
 } fpp_fp_table_cmd_t;
 
 
@@ -1154,7 +1211,7 @@ typedef struct CAL_PACKED fpp_flexible_parser_table_cmd
 /*
 * @brief Arguments for the FPP_CMD_FP_FLEXIBLE_FILTER command
 */
-typedef struct CAL_PACKED fpp_flexible_filter_cmd
+typedef struct CAL_PACKED
 {
     uint16_t action;         /**< Action to be done on Flexible Filter */
     uint8_t table_name[16];  /**< Name of the Flexible Parser table to be used */
@@ -1211,7 +1268,7 @@ typedef struct CAL_PACKED fpp_flexible_filter_cmd
 /**
  * @brief Argument structure for the FPP_CMD_DATA_BUF_PUT command
  */
-typedef struct CAL_PACKED fpp_buf_cmd_tag
+typedef struct CAL_PACKED
 {
     uint8_t payload[64];	/**< The payload area */
     uint8_t len;			/**< Payload length in number of bytes */
@@ -1400,7 +1457,7 @@ typedef struct CAL_PACKED
 /**
  * @brief Argument of the @ref FPP_CMD_QOS_QUEUE command.
  */
-typedef struct CAL_PACKED fpp_qos_queue_cmd
+typedef struct CAL_PACKED
 {
 	/**	Action */
 	uint16_t action;
@@ -1487,7 +1544,7 @@ typedef struct CAL_PACKED fpp_qos_queue_cmd
 /**
  * @brief Argument of the @ref FPP_CMD_QOS_SCHEDULER command.
  */
-typedef struct CAL_PACKED fpp_qos_scheduler_cmd
+typedef struct CAL_PACKED
 {
 	/**	Action */
 	uint16_t action;
@@ -1570,7 +1627,7 @@ typedef struct CAL_PACKED fpp_qos_scheduler_cmd
 /**
  * @brief Argument of the @ref FPP_CMD_QOS_SHAPER command.
  */
-typedef struct CAL_PACKED fpp_qos_shaper_cmd
+typedef struct CAL_PACKED
 {
 	/**	Action */
 	uint16_t action;
diff --git a/sw/xfci/libfci/public/libfci.h b/sw/xfci/libfci/public/libfci.h
index 1af88ab..8537561 100644
--- a/sw/xfci/libfci/public/libfci.h
+++ b/sw/xfci/libfci/public/libfci.h
@@ -101,6 +101,12 @@
  *                <i>Cancel exclusive access to interfaces.</i>
  *              - @ref FPP_CMD_L2_BD <br>
  *                <i>L2 bridge domains management.</i>
+ *              - @ref FPP_CMD_L2_FLUSH_LEARNED <br>
+ *                <i>Remove all learned MAC table entries.</i>
+ *              - @ref FPP_CMD_L2_FLUSH_STATIC <br>
+ *                <i>Remove all static MAC table entries.</i>
+ *              - @ref FPP_CMD_L2_FLUSH_ALL <br>
+ *                <i>Remove all MAC table entries.</i>
  *              - @ref FPP_CMD_FP_TABLE <br>
  *                <i>Administration of @ref flex_parser tables.</i>
  *              - @ref FPP_CMD_FP_RULE <br>
@@ -287,6 +293,11 @@
  *              an interface is deleted, the interface is put to default operation mode
  *              @ref FPP_IF_OP_DEFAULT.
  *
+ *              The conntracks are created default with TTL decrement option. That option can be 
+ *              changed using update command:
+ *              - @ref FPP_CMD_IPV4_CONNTRACK + @ref FPP_ACTION_UPDATE, and
+ *              - @ref FPP_CMD_IPV6_CONNTRACK + @ref FPP_ACTION_UPDATE.
+ *
  * @subsection l2_bridge L2 Bridge (Switch)
  *              Introduction
  *              ------------
@@ -651,6 +662,8 @@
  * @example fpp_cmd_qos_queue.c
  * @example fpp_cmd_qos_scheduler.c
  * @example fpp_cmd_qos_shaper.c
+ * @example fpp_cmd_l2_bd.c
+ * @example fpp_cmd_fp_table.c
  */
 
 /**
@@ -746,6 +759,15 @@
  */
 #define CTCMD_FLAGS_REP_DISABLED            (1U << 1)
 
+/**
+ * @def         CTCMD_FLAGS_TTL_DECREMENT
+ * @brief       Enable TTL decrement
+ * @details     Used to decrement TTL field when the pkt is routed
+ * @hideinitializer
+ */
+#define CTCMD_FLAGS_TTL_DECREMENT            (1U << 2)
+
+
 /**
  * @struct      FCI_CLIENT
  * @brief       The FCI client representation type
-- 
2.17.1

