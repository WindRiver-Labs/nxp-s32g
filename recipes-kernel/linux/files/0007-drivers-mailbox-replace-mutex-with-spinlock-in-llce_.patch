From 7c565cff9011b085f843768f4bce2bf58315fd35 Mon Sep 17 00:00:00 2001
From: Zhantao Tang <zhantao.tang@windriver.com>
Date: Wed, 7 Apr 2021 19:25:38 +0800
Subject: [PATCH] drivers: mailbox: replace mutex with spinlock in llce_mailbox

This patch is to fix the following debug calltrace:

	 BUG: sleeping function called from invalid context at kernel/locking/mutex.c:1149
	 in_atomic(): 1, irqs_disabled(): 128, non_block: 0, pid: 4974, name: ip
	 INFO: lockdep is turned off.
	 irq event stamp: 0
	 hardirqs last  enabled at (0): [<0000000000000000>] 0x0
	 hardirqs last disabled at (0): [<ffffffc0100b13f4>] copy_process+0x2e4/0x1000
	 softirqs last  enabled at (0): [<ffffffc0100b13f4>] copy_process+0x2e4/0x1000
	 softirqs last disabled at (0): [<0000000000000000>] 0x0
	 Preemption disabled at:
	 [<ffffffc010cad810>] msg_submit+0x2c/0x100
	 CPU: 2 PID: 4974 Comm: ip Tainted: G W         5.4.105-yocto-standard #1
	 Hardware name: Freescale S32G274 (DT)
	 Call trace:
	  dump_backtrace+0x0/0x184
	  show_stack+0x28/0x34
	  dump_stack+0xd0/0x12c
	  ___might_sleep+0x1a4/0x244
	  __might_sleep+0x5c/0x90
	  mutex_lock_io_nested+0x68/0x8bc
	  execute_config_cmd.isra.0+0x40/0xe0 [llce_mailbox]
	  llce_mb_send_data+0xe0/0x234 [llce_mailbox]
	  msg_submit+0xa8/0x100
	  mbox_send_message+0x84/0x120
	  llce_can_init+0x94/0x110 [llce_can]
	  llce_can_open+0x4c/0x1e0 [llce_can]
	  __dev_open+0x108/0x1b0
	  __dev_change_flags+0x1b4/0x220
	  dev_change_flags+0x40/0x80
	  do_setlink+0x1f8/0x930
	  __rtnl_newlink+0x51c/0x7c4
	  rtnl_newlink+0x58/0x80
	  rtnetlink_rcv_msg+0x18c/0x490
	  netlink_rcv_skb+0x60/0x120
	  rtnetlink_rcv+0x2c/0x3c
	  netlink_unicast+0x184/0x224
	  netlink_sendmsg+0x1a0/0x340
	  ____sys_sendmsg+0x1c8/0x214
	  ___sys_sendmsg+0x94/0xec
	  __sys_sendmsg+0x7c/0xd0
	  __arm64_sys_sendmsg+0x30/0x3c
	  el0_svc_common.constprop.0+0x78/0x13c
	  el0_svc_handler+0x80/0xa0
	  el0_svc+0x8/0x208
	 IPv6: ADDRCONF(NETDEV_CHANGE): llcecan0: link becomes ready

The root cause of this issue is that,
in msg_submit()(in drivers/mailbox/mailbox.c) the irq will be disabled by
	spin_lock_irqsave(&chan->lock, flags)

then llce_mb_send_data()(in drivers/mailbox/llce-mailbox.c) will
execute mutex_lock_io(), this mutex may sleep, so the calltrace shows.
So replace the mutex with spinlock to fix it.

Upstream-Status: Pending

Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
Signed-off-by: Bruce Ashfield <bruce.ashfield@gmail.com>
---
 drivers/mailbox/llce-mailbox.c | 14 ++++++++------
 1 file changed, 8 insertions(+), 6 deletions(-)

diff --git a/drivers/mailbox/llce-mailbox.c b/drivers/mailbox/llce-mailbox.c
index f58ce5b55618..a300f3537870 100644
--- a/drivers/mailbox/llce-mailbox.c
+++ b/drivers/mailbox/llce-mailbox.c
@@ -88,7 +88,7 @@ struct llce_mb {
 	struct llce_pair_irq rxin_irqs;
 	struct llce_pair_irq rxout_irqs;
 	struct llce_pair_irq txack_irqs;
-	struct mutex txack_lock;
+	spinlock_t txack_lock;
 	struct llce_can_shared_memory *sh_mem;
 	void __iomem *status;
 	void __iomem *rxout_fifo;
@@ -545,8 +545,9 @@ static int execute_config_cmd(struct mbox_chan *chan,
 	struct llce_can_command *sh_cmd;
 	void __iomem *txack, *push0;
 	int ret = 0;
+	unsigned long flags;
 
-	mutex_lock_io(&mb->txack_lock);
+	spin_lock_irqsave(&mb->txack_lock, flags);
 
 	txack = get_host_txack(mb, LLCE_CAN_HIF0);
 
@@ -566,7 +567,7 @@ static int execute_config_cmd(struct mbox_chan *chan,
 	writel(idx, push0);
 
 release_lock:
-	mutex_unlock(&mb->txack_lock);
+	spin_unlock_irqrestore(&mb->txack_lock, flags);
 	return ret;
 }
 
@@ -942,11 +943,12 @@ static bool llce_mb_last_tx_done(struct mbox_chan *chan)
 	struct llce_mb *mb = priv->mb;
 	struct llce_can_command *cmd;
 	struct llce_can_command *sh_cmd;
+	unsigned long flags;
 
 	if (!is_config_chan(priv->type))
 		return false;
 
-	mutex_lock_io(&mb->txack_lock);
+	spin_lock_irqsave(&mb->txack_lock, flags);
 
 	txack = get_host_txack(mb, LLCE_CAN_HIF0);
 
@@ -958,7 +960,7 @@ static bool llce_mb_last_tx_done(struct mbox_chan *chan)
 
 	memcpy(cmd, sh_cmd, sizeof(*cmd));
 
-	mutex_unlock(&mb->txack_lock);
+	spin_unlock_irqrestore(&mb->txack_lock, flags);
 
 	if (priv->type != S32G_LLCE_HIF_CONF_MB)
 		llce_mbox_chan_received_data(chan, cmd);
@@ -1915,7 +1917,7 @@ static int llce_mb_probe(struct platform_device *pdev)
 	if (!mb)
 		return -ENOMEM;
 
-	mutex_init(&mb->txack_lock);
+	spin_lock_init(&mb->txack_lock);
 
 	ctrl = &mb->controller;
 	ctrl->txdone_irq = false;
-- 
2.25.1

