From b4d5e6328f265cf4ce9cbaf16929f3156975d476 Mon Sep 17 00:00:00 2001
From: Ghennadi Procopciuc <ghennadi.procopciuc@nxp.com>
Date: Thu, 4 Nov 2021 16:37:05 +0200
Subject: [PATCH 10/24] mailbox: llce: Use sema42 to synchronize host and
 firmware

commit b4d5e6328f265cf4ce9cbaf16929f3156975d476 from
https://source.codeaurora.org/external/autobsps32/linux

LLCE SEMA42 will be used to serialize IRQ enablement and
disablement between LLCE firmware and host execution.

Issue: ALB-7935
Upstream-Status: Pending 

Signed-off-by: Ghennadi Procopciuc <ghennadi.procopciuc@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 arch/arm64/boot/dts/freescale/fsl-s32g.dtsi  |  10 +-
 drivers/mailbox/llce-mailbox.c               |  50 ++++++--
 include/linux/mailbox/nxp-llce/llce_sema42.h | 119 +++++++++++++++++++
 3 files changed, 169 insertions(+), 10 deletions(-)
 create mode 100644 include/linux/mailbox/nxp-llce/llce_sema42.h

diff --git a/arch/arm64/boot/dts/freescale/fsl-s32g.dtsi b/arch/arm64/boot/dts/freescale/fsl-s32g.dtsi
index 59638dac113e..514eb5f6adbd 100644
--- a/arch/arm64/boot/dts/freescale/fsl-s32g.dtsi
+++ b/arch/arm64/boot/dts/freescale/fsl-s32g.dtsi
@@ -555,7 +555,9 @@
 			/* BLR-OUT_FIFO */
 			<0x4 0 0x0 0x43B08000 0x0 0x6000>,
 			/* Tx_Ack_FIFO */
-			<0x5 0 0x0 0x43B10000 0x0 0x8000>;
+			<0x5 0 0x0 0x43B10000 0x0 0x8000>,
+			/* LLCE SEMA42*/
+			<0x6 0 0x0 0x43C20000 0x0 0x44>;
 
 		clocks = <&clks S32G_SCMI_CLK_LLCE_SYS>;
 		clock-names = "llce_sys";
@@ -584,13 +586,15 @@
 				<0x2 0x0 0x0 0x1000>,
 				<0x3 0x0 0x0 0x6000>,
 				<0x4 0x0 0x0 0x6000>,
-				<0x5 0x0 0x0 0x8000>;
+				<0x5 0x0 0x0 0x8000>,
+				<0x6 0x0 0x0 0x44>;
 			reg-names = "rxin_fifo",
 				"rxout_fifo",
 				"icsr",
 				"blrin_fifo",
 				"blrout_fifo",
-				"txack_fifo";
+				"txack_fifo",
+				"sema42";
 			clocks = <&clks S32G_SCMI_CLK_LLCE_SYS>;
 			clock-names = "llce_sys";
 			memory-region = <&llce_shmem>, <&llce_boot_status>;
diff --git a/drivers/mailbox/llce-mailbox.c b/drivers/mailbox/llce-mailbox.c
index 6f3845850a12..dfea39d4efc2 100644
--- a/drivers/mailbox/llce-mailbox.c
+++ b/drivers/mailbox/llce-mailbox.c
@@ -13,6 +13,7 @@
 #include <linux/mailbox/nxp-llce/llce_can.h>
 #include <linux/mailbox/nxp-llce/llce_interface_fifo.h>
 #include <linux/mailbox/nxp-llce/llce_mailbox.h>
+#include <linux/mailbox/nxp-llce/llce_sema42.h>
 #include <linux/mailbox_client.h>
 #include <linux/mailbox_controller.h>
 #include <linux/module.h>
@@ -101,6 +102,7 @@ struct llce_mb {
 	void __iomem *blrout_fifo;
 	void __iomem *blrin_fifo;
 	void __iomem *icsr;
+	void __iomem *sema42;
 	struct clk *clk;
 	struct device *dev;
 	DECLARE_BITMAP(chans_map, LLCE_NFIFO_WITH_IRQ);
@@ -137,7 +139,7 @@ static int process_logger_cmd(struct mbox_chan *chan, struct llce_rx_msg *msg);
 static bool config_platform = true;
 module_param(config_platform, bool, 0660);
 
-const char *llce_errors[] = {
+static const char * const llce_errors[] = {
 	LLCE_ERROR_ENTRY(LLCE_ERROR_TXACK_FIFO_FULL),
 	LLCE_ERROR_ENTRY(LLCE_ERROR_RXOUT_FIFO_FULL),
 	LLCE_ERROR_ENTRY(LLCE_ERROR_HW_FIFO_EMPTY),
@@ -236,7 +238,7 @@ const char *llce_errors[] = {
 	LLCE_ERROR_ENTRY(LLCE_NOTIF_BUSOFF_DONE),
 };
 
-const char *llce_modules[] = {
+static const char * const llce_modules[] = {
 	LLCE_MODULE_ENTRY(LLCE_TX),
 	LLCE_MODULE_ENTRY(LLCE_RX),
 	LLCE_MODULE_ENTRY(LLCE_DTE),
@@ -715,33 +717,66 @@ static void disable_fifo_irq(void __iomem *fifo)
 	writel(ier_val, ier);
 }
 
+static enum llce_sema42_gate get_sema42_gate(u8 fifo)
+{
+	/**
+	 * Semaphore used to protect acces to TXACK and RXOUT between LLCE and
+	 * host on interrupt enable/disable.
+	 */
+	static const enum llce_sema42_gate
+	sema4_ier[LLCE_CAN_CONFIG_IER_SEMA4_COUNT][LLCE_CAN_CONFIG_HIF_COUNT] = {
+		{LLCE_SEMA42_GATE20, LLCE_SEMA42_GATE21},
+		{LLCE_SEMA42_GATE22, LLCE_SEMA42_GATE23}
+	};
+
+	return sema4_ier[fifo][LLCE_CAN_HIF0];
+}
+
+static void ctrl_rxout_irq_with_lock(struct llce_mb *mb, void __iomem *rxout,
+				     bool enable)
+{
+	enum llce_sema42_gate gate = get_sema42_gate(LLCE_FIFO_RXOUT_INDEX);
+
+	llce_sema42_lock(mb->sema42, gate, LLCE_HOST_CORE_SEMA42_DOMAIN);
+
+	if (enable)
+		enable_fifo_irq(rxout);
+	else
+		disable_fifo_irq(rxout);
+
+	llce_sema42_unlock(mb->sema42, gate);
+}
+
 static void disable_rx_irq(struct mbox_chan *chan)
 {
+	struct llce_chan_priv *priv = chan->con_priv;
+	struct llce_mb *mb = priv->mb;
 	void __iomem *rxout = get_rxout_fifo(chan);
 
-	disable_fifo_irq(rxout);
+	ctrl_rxout_irq_with_lock(mb, rxout, false);
 }
 
 static void enable_rx_irq(struct mbox_chan *chan)
 {
+	struct llce_chan_priv *priv = chan->con_priv;
+	struct llce_mb *mb = priv->mb;
 	void __iomem *rxout = get_rxout_fifo(chan);
 
-	enable_fifo_irq(rxout);
+	ctrl_rxout_irq_with_lock(mb, rxout, true);
 }
 
 static void enable_logger_irq(struct llce_mb *mb)
 {
 	void __iomem *rxout = get_logger_out(mb);
 
-	/* Enable interrupt routing inside FIFO module. */
-	enable_fifo_irq(rxout);
+	ctrl_rxout_irq_with_lock(mb, rxout, true);
 }
 
 static void disable_logger_irq(struct llce_mb *mb)
 {
 	void __iomem *rxout = get_logger_out(mb);
 
-	disable_fifo_irq(rxout);
+	ctrl_rxout_irq_with_lock(mb, rxout, false);
 }
 
 static int request_llce_irq(struct llce_mb *mb, struct llce_fifoirq *fifo_irq)
@@ -1690,6 +1725,7 @@ static int init_llce_mem_resources(struct platform_device *pdev,
 		{ .res_name = "blrin_fifo", .vaddr = &mb->blrin_fifo, },
 		{ .res_name = "rxin_fifo", .vaddr = &mb->rxin_fifo, },
 		{ .res_name = "icsr", .vaddr = &mb->icsr, },
+		{ .res_name = "sema42", .vaddr = &mb->sema42, },
 	};
 
 	for (i = 0; i < ARRAY_SIZE(resources); i++) {
diff --git a/include/linux/mailbox/nxp-llce/llce_sema42.h b/include/linux/mailbox/nxp-llce/llce_sema42.h
new file mode 100644
index 000000000000..45b8d0b0687c
--- /dev/null
+++ b/include/linux/mailbox/nxp-llce/llce_sema42.h
@@ -0,0 +1,119 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+/* Copyright 2021 NXP */
+#ifndef LLCE_SEMA42_H
+#define LLCE_SEMA42_H
+
+#include <linux/io.h>
+
+#define LLCE_SEMA42_GR_GTFSM_0 0x0U
+#define LLCE_SEMA42_GR_GTFSM_1 0x1U
+#define LLCE_SEMA42_GR_GTFSM_2 0x2U
+#define LLCE_SEMA42_GR_GTFSM_3 0x3U
+#define LLCE_SEMA42_GR_GTFSM_4 0x4U
+#define LLCE_SEMA42_GR_GTFSM_5 0x5U
+#define LLCE_SEMA42_GR_GTFSM_6 0x6U
+#define LLCE_SEMA42_GR_GTFSM_7 0x7U
+#define LLCE_SEMA42_GR_GTFSM_8 0x8U
+#define LLCE_SEMA42_GR_GTFSM_9 0x9U
+#define LLCE_SEMA42_GR_GTFSM_10 0xAU
+#define LLCE_SEMA42_GR_GTFSM_11 0xBU
+#define LLCE_SEMA42_GR_GTFSM_12 0xCU
+#define LLCE_SEMA42_GR_GTFSM_13 0xDU
+#define LLCE_SEMA42_GR_GTFSM_14 0xEU
+#define LLCE_SEMA42_GR_GTFSM_15 0xFU
+
+/**
+ * Gate numbers used by sema42 module to lock and unlock gates.
+ */
+enum llce_sema42_gate {
+	LLCE_SEMA42_GATE0 = 0UL,
+	LLCE_SEMA42_GATE1 = 1UL,
+	LLCE_SEMA42_GATE2 = 2UL,
+	LLCE_SEMA42_GATE3 = 3UL,
+	LLCE_SEMA42_GATE4 = 4UL,
+	LLCE_SEMA42_GATE5 = 5UL,
+	LLCE_SEMA42_GATE6 = 6UL,
+	LLCE_SEMA42_GATE7 = 7UL,
+	LLCE_SEMA42_GATE8 = 8UL,
+	LLCE_SEMA42_GATE9 = 9UL,
+	LLCE_SEMA42_GATE10 = 10UL,
+	LLCE_SEMA42_GATE11 = 11UL,
+	LLCE_SEMA42_GATE12 = 12UL,
+	LLCE_SEMA42_GATE13 = 13UL,
+	LLCE_SEMA42_GATE14 = 14UL,
+	LLCE_SEMA42_GATE15 = 15UL,
+	LLCE_SEMA42_GATE16 = 16UL,
+	LLCE_SEMA42_GATE17 = 17UL,
+	LLCE_SEMA42_GATE18 = 18UL,
+	LLCE_SEMA42_GATE19 = 19UL,
+	LLCE_SEMA42_GATE20 = 20UL,
+	LLCE_SEMA42_GATE21 = 21UL,
+	LLCE_SEMA42_GATE22 = 22UL,
+	LLCE_SEMA42_GATE23 = 23UL,
+	LLCE_SEMA42_GATE24 = 24UL,
+	LLCE_SEMA42_GATE25 = 25UL,
+	LLCE_SEMA42_GATE26 = 26UL,
+	LLCE_SEMA42_GATE27 = 27UL,
+	LLCE_SEMA42_GATE28 = 28UL,
+	LLCE_SEMA42_GATE29 = 29UL,
+	LLCE_SEMA42_GATE30 = 30UL,
+	LLCE_SEMA42_GATE31 = 31UL,
+	LLCE_SEMA42_GATE32 = 32UL,
+	LLCE_SEMA42_GATE33 = 33UL,
+	LLCE_SEMA42_GATE34 = 34UL,
+	LLCE_SEMA42_GATE35 = 35UL,
+	LLCE_SEMA42_GATE36 = 36UL,
+	LLCE_SEMA42_GATE37 = 37UL,
+	LLCE_SEMA42_GATE38 = 38UL,
+	LLCE_SEMA42_GATE39 = 39UL,
+	LLCE_SEMA42_GATE40 = 40UL,
+	LLCE_SEMA42_GATE41 = 41UL,
+	LLCE_SEMA42_GATE42 = 42UL,
+	LLCE_SEMA42_GATE43 = 43UL,
+	LLCE_SEMA42_GATE44 = 44UL,
+	LLCE_SEMA42_GATE45 = 45UL,
+	LLCE_SEMA42_GATE46 = 46UL,
+	LLCE_SEMA42_GATE47 = 47UL,
+	LLCE_SEMA42_GATE48 = 48UL,
+	LLCE_SEMA42_GATE49 = 49UL,
+	LLCE_SEMA42_GATE50 = 50UL,
+	LLCE_SEMA42_GATE51 = 51UL,
+	LLCE_SEMA42_GATE52 = 52UL,
+	LLCE_SEMA42_GATE53 = 53UL,
+	LLCE_SEMA42_GATE54 = 54UL,
+	LLCE_SEMA42_GATE55 = 55UL,
+	LLCE_SEMA42_GATE56 = 56UL,
+	LLCE_SEMA42_GATE57 = 57UL,
+	LLCE_SEMA42_GATE58 = 58UL,
+	LLCE_SEMA42_GATE59 = 59UL,
+	LLCE_SEMA42_GATE60 = 60UL,
+	LLCE_SEMA42_GATE61 = 61UL,
+	LLCE_SEMA42_GATE62 = 62UL,
+	LLCE_SEMA42_GATE63 = 63UL,
+} __packed;
+
+static inline void __iomem *
+llce_sema42_get_gate_addr(void __iomem *base_addr, enum llce_sema42_gate gate)
+{
+	return base_addr + ((u32)(gate) & 0x3FU);
+}
+
+static inline void llce_sema42_lock(void __iomem *base_addr,
+				    enum llce_sema42_gate gate, u8 domain)
+{
+	void __iomem *addr = llce_sema42_get_gate_addr(base_addr, gate);
+
+	do {
+		writeb(domain, addr);
+	} while (domain != readb(addr));
+}
+
+static inline void llce_sema42_unlock(void __iomem *base_addr,
+				      enum llce_sema42_gate gate)
+{
+	void __iomem *addr = llce_sema42_get_gate_addr(base_addr, gate);
+
+	writeb(LLCE_SEMA42_GR_GTFSM_0, addr);
+}
+
+#endif /* LLCE_SEMA42_H */
-- 
2.17.1

