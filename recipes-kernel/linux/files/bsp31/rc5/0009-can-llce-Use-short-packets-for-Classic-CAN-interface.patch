From 6332ae8e72b43910c99502395e1e8381a1fe8725 Mon Sep 17 00:00:00 2001
From: Ghennadi Procopciuc <ghennadi.procopciuc@nxp.com>
Date: Thu, 4 Nov 2021 15:41:52 +0200
Subject: [PATCH 09/24] can/llce: Use short packets for Classic CAN interfaces

commit 6332ae8e72b43910c99502395e1e8381a1fe8725 from
https://source.codeaurora.org/external/autobsps32/linux

Issue: ALB-7935
Upstream-Status: Pending 

Signed-off-by: Ghennadi Procopciuc <ghennadi.procopciuc@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 drivers/mailbox/llce-mailbox.c                | 23 +++++++----
 drivers/net/can/llce/llce_can.c               | 38 +++++++++++++------
 drivers/net/can/llce/llce_can_common.c        | 33 +++++++++++-----
 include/linux/mailbox/nxp-llce/llce_mailbox.h | 13 ++++++-
 4 files changed, 76 insertions(+), 31 deletions(-)

diff --git a/drivers/mailbox/llce-mailbox.c b/drivers/mailbox/llce-mailbox.c
index e0c339968a80..6f3845850a12 100644
--- a/drivers/mailbox/llce-mailbox.c
+++ b/drivers/mailbox/llce-mailbox.c
@@ -650,7 +650,7 @@ static int send_can_msg(struct mbox_chan *chan, struct llce_tx_msg *msg)
 	dlc = can_len2dlc(cf->len);
 
 	mb_config = dlc;
-	if (msg->fd) {
+	if (msg->fd_msg) {
 		/* Configure the tx mb as a CAN FD frame. */
 		mb_config |= LLCE_CAN_MB_FDF;
 
@@ -1310,19 +1310,28 @@ static int process_pop_rxout(struct mbox_chan *chan, struct llce_rx_msg *msg)
 	struct llce_mb *mb = priv->mb;
 	void __iomem *rxout = get_rxout_fifo(chan);
 	void __iomem *pop0 = LLCE_FIFO_POP0(rxout);
-	uint32_t rx_mb;
-
 	struct llce_can_shared_memory *sh_mem = mb->sh_mem;
-	uint32_t frame_id;
 	unsigned int chan_index;
+	u32 rx_mb, frame_id;
+	u16 filter_id;
 
 
 	/* Get RX mailbox */
 	rx_mb = readl(pop0) & LLCE_CAN_CONFIG_FIFO_FIXED_MASK;
 
 	frame_id = sh_mem->can_rx_mb_desc[rx_mb].mb_frame_idx;
+	filter_id = sh_mem->can_rx_mb_desc[rx_mb].filter_id;
+
 	chan_index = get_channel_offset(S32G_LLCE_CAN_RX_MB, priv->index);
-	msg->rx_pop.can_mb = &sh_mem->can_mb[frame_id];
+
+	if (filter_id == USE_LONG_MB) {
+		msg->rx_pop.mb.data.longm = &sh_mem->can_mb[frame_id];
+		msg->rx_pop.mb.is_long = true;
+	} else {
+		msg->rx_pop.mb.data.shortm = &sh_mem->can_short_mb[frame_id];
+		msg->rx_pop.mb.is_long = false;
+	}
+
 	msg->rx_pop.index = rx_mb;
 	msg->rx_pop.skip = false;
 
@@ -1403,7 +1412,7 @@ static int process_pop_logger(struct mbox_chan *chan, struct llce_rx_msg *msg)
 	pop = pop_llce_logger_data(chan, &frame, &mb_index);
 	if (pop) {
 		msg->rx_pop.skip = false;
-		msg->rx_pop.can_mb = frame;
+		msg->rx_pop.mb.data.longm = frame;
 		msg->rx_pop.index = mb_index;
 
 		return 0;
@@ -1419,7 +1428,7 @@ static int process_pop_logger(struct mbox_chan *chan, struct llce_rx_msg *msg)
 	}
 
 	msg->rx_pop.skip = false;
-	msg->rx_pop.can_mb = frame;
+	msg->rx_pop.mb.data.longm = frame;
 	msg->rx_pop.index = mb_index;
 
 	return 0;
diff --git a/drivers/net/can/llce/llce_can.c b/drivers/net/can/llce/llce_can.c
index 207c171079bf..40416888bc17 100644
--- a/drivers/net/can/llce/llce_can.c
+++ b/drivers/net/can/llce/llce_can.c
@@ -154,19 +154,29 @@ static int llce_can_deinit(struct llce_can *llce)
 	return 0;
 }
 
-static void set_rx_filter(struct llce_can_rx_filter *rx_filter, u8 intf)
+static void set_rx_filter(struct llce_can_rx_filter *rx_filter, u8 intf,
+			  bool canfd)
 {
+	enum llce_can_rx_mb_length len;
+
+	if (canfd)
+		len = USE_LONG_MB;
+	else
+		len = USE_SHORT_MB;
+
 	*rx_filter = (struct llce_can_rx_filter) {
 		.id_mask = 0,
 		.message_id = 0,
-		.filter_id = 0,
+		/* Use packet type as filter id */
+		.filter_id = len,
 		.mb_count = LLCE_CAN_MAX_TX_MB,
-		.rx_dest_interface = intf,
 		.entry_type = LLCE_CAN_ENTRY_CFG_MASKED,
+		.filter_mb_length = len,
+		.rx_dest_interface = intf,
 	};
 }
 
-static void set_basic_filter(struct llce_can_command *cmd, u8 intf)
+static void set_basic_filter(struct llce_can_command *cmd, u8 intf, bool canfd)
 {
 	*cmd = (struct llce_can_command) {
 		.cmd_id = LLCE_CAN_CMD_SETFILTER,
@@ -175,10 +185,11 @@ static void set_basic_filter(struct llce_can_command *cmd, u8 intf)
 		},
 	};
 
-	set_rx_filter(&cmd->cmd_list.set_filter.rx_filters[0], intf);
+	set_rx_filter(&cmd->cmd_list.set_filter.rx_filters[0], intf, canfd);
 }
 
-static void set_advanced_filter(struct llce_can_command *cmd, u8 intf)
+static void set_advanced_filter(struct llce_can_command *cmd, u8 intf,
+				bool canfd)
 {
 	struct llce_can_advanced_filter *afilt;
 
@@ -200,10 +211,10 @@ static void set_advanced_filter(struct llce_can_command *cmd, u8 intf)
 
 	};
 
-	set_rx_filter(&afilt->llce_can_Rx_filter, intf);
+	set_rx_filter(&afilt->llce_can_Rx_filter, intf, canfd);
 }
 
-static int can_add_open_filter(struct mbox_chan *conf_chan)
+static int can_add_open_filter(struct mbox_chan *conf_chan, bool canfd)
 {
 	struct device *dev = llce_can_chan_dev(conf_chan);
 	struct llce_chan_priv *priv = conf_chan->con_priv;
@@ -211,9 +222,9 @@ static int can_add_open_filter(struct mbox_chan *conf_chan)
 	int ret;
 
 	if (logging)
-		set_advanced_filter(&cmd, priv->index);
+		set_advanced_filter(&cmd, priv->index, canfd);
 	else
-		set_basic_filter(&cmd, priv->index);
+		set_basic_filter(&cmd, priv->index, canfd);
 
 	ret = send_cmd_msg(conf_chan, &cmd);
 	if (ret) {
@@ -359,7 +370,7 @@ static int llce_can_open(struct net_device *dev)
 	if (ret)
 		goto close_dev;
 
-	ret = can_add_open_filter(llce->config);
+	ret = can_add_open_filter(llce->config, is_canfd_dev(can));
 	if (ret)
 		goto can_deinit;
 
@@ -465,9 +476,12 @@ static netdev_tx_t llce_can_start_xmit(struct sk_buff *skb,
 {
 	int ret;
 	struct llce_can *llce = netdev_priv(dev);
+	struct llce_can_dev *llce_dev = &llce->common;
+	struct can_priv *can = &llce_dev->can;
 	struct canfd_frame *cf = (struct canfd_frame *)skb->data;
 	struct llce_tx_msg msg = {
-		.fd = can_is_canfd_skb(skb),
+		.fd_msg = can_is_canfd_skb(skb),
+		.long_msg = is_canfd_dev(can),
 		.cf = cf,
 	};
 
diff --git a/drivers/net/can/llce/llce_can_common.c b/drivers/net/can/llce/llce_can_common.c
index a7c77019061f..dd0f7dd9be6a 100644
--- a/drivers/net/can/llce/llce_can_common.c
+++ b/drivers/net/can/llce/llce_can_common.c
@@ -78,7 +78,7 @@ static bool is_rx_empty(struct llce_can_dev *llce)
 }
 
 static int pop_rx_fifo(struct llce_can_dev *llce, uint32_t *index, bool *skip,
-		       struct llce_can_mb **can_mb)
+		       struct llce_rx_can_mb **can_mb)
 {
 	int ret;
 	struct llce_rx_msg msg = {
@@ -87,7 +87,7 @@ static int pop_rx_fifo(struct llce_can_dev *llce, uint32_t *index, bool *skip,
 
 	ret = send_rx_msg(llce, &msg);
 
-	*can_mb = msg.rx_pop.can_mb;
+	*can_mb = &msg.rx_pop.mb;
 	*index = msg.rx_pop.index;
 	*skip = msg.rx_pop.skip;
 	return ret;
@@ -115,18 +115,31 @@ static void add_hwtimestamp(struct sk_buff *skb, u32 timestamp)
 	shhwtstamps->hwtstamp = ms_to_ktime((u64)timestamp * 1000ULL);
 }
 
-static void process_rx_msg(struct llce_can_dev *llce, struct llce_can_mb *can_mb)
+static void process_rx_msg(struct llce_can_dev *llce,
+			   struct llce_rx_can_mb *can_mb)
 {
 	struct net_device *dev = llce->can.dev;
 	struct net_device_stats *net_stats = &llce->can.dev->stats;
 	struct sk_buff *skb;
 	struct canfd_frame *cf;
-	u32 std_id, ext_id;
+	u32 std_id, ext_id, word0, word1, timestamp;
 	bool rtr, ide, brs, esi, fdf;
-	u8 len;
+	u8 len, *payload;
 
-	unpack_word0(can_mb->word0, &rtr, &ide, &std_id, &ext_id);
-	unpack_word1(can_mb->word1, &fdf, &len, &brs, &esi);
+	if (can_mb->is_long) {
+		word0 = can_mb->data.longm->word0;
+		word1 = can_mb->data.longm->word1;
+		payload = &can_mb->data.longm->payload[0];
+		timestamp = can_mb->data.longm->timestamp;
+	} else {
+		word0 = can_mb->data.shortm->word0;
+		word1 = can_mb->data.shortm->word1;
+		payload = &can_mb->data.shortm->payload[0];
+		timestamp = can_mb->data.shortm->timestamp;
+	}
+
+	unpack_word0(word0, &rtr, &ide, &std_id, &ext_id);
+	unpack_word1(word1, &fdf, &len, &brs, &esi);
 
 	if (fdf)
 		skb = alloc_canfd_skb(dev, &cf);
@@ -158,12 +171,12 @@ static void process_rx_msg(struct llce_can_dev *llce, struct llce_can_mb *can_mb
 	}
 	cf->len = can_dlc2len(len);
 
-	memcpy(cf->data, can_mb->payload, cf->len);
+	memcpy(cf->data, payload, cf->len);
 
 	net_stats->rx_packets++;
 	net_stats->rx_bytes += cf->len;
 
-	add_hwtimestamp(skb, can_mb->timestamp);
+	add_hwtimestamp(skb, timestamp);
 
 	netif_receive_skb(skb);
 
@@ -176,7 +189,7 @@ static int llce_rx_poll(struct napi_struct *napi, int quota)
 	struct llce_can_dev *llce = container_of(napi, struct llce_can_dev, napi);
 	struct net_device *dev = llce->can.dev;
 	int num_pkts = 0;
-	struct llce_can_mb *can_mb;
+	struct llce_rx_can_mb *can_mb;
 	u32 index;
 	int ret;
 	bool skip = false;
diff --git a/include/linux/mailbox/nxp-llce/llce_mailbox.h b/include/linux/mailbox/nxp-llce/llce_mailbox.h
index 71a2206d650a..7950d13a02c9 100644
--- a/include/linux/mailbox/nxp-llce/llce_mailbox.h
+++ b/include/linux/mailbox/nxp-llce/llce_mailbox.h
@@ -26,7 +26,8 @@ struct llce_chan_priv {
 };
 
 struct llce_tx_msg {
-	bool fd;
+	bool fd_msg;
+	bool long_msg;
 	struct canfd_frame *cf;
 };
 
@@ -45,14 +46,22 @@ enum llce_rx_cmd {
 	LLCE_ERROR,
 };
 
+struct llce_rx_can_mb {
+	union {
+		struct llce_can_short_mb *shortm;
+		struct llce_can_mb *longm;
+	} data;
+	bool is_long;
+};
+
 struct llce_rx_msg {
 	enum llce_rx_cmd cmd;
 	enum llce_fw_return error;
 	union {
 		bool is_rx_empty;
 		struct {
+			struct llce_rx_can_mb mb;
 			uint32_t index;
-			struct llce_can_mb *can_mb;
 			bool skip;
 		} rx_pop;
 		struct {
-- 
2.17.1

