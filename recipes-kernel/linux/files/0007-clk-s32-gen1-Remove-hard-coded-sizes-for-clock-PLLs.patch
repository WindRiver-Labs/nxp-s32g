From c10971b26b2f1f684d1aa804df596a94b17f3ea4 Mon Sep 17 00:00:00 2001
From: Ghennadi Procopciuc <Ghennadi.Procopciuc@nxp.com>
Date: Thu, 10 Dec 2020 13:07:02 +0200
Subject: [PATCH 07/78] clk: s32-gen1: Remove hard-coded sizes for clock PLLs

The local periphpll_pllodiv array is only 7 elements, in order to
valid below error due to the array stack-out-of-bounds:

BUG: KASAN: stack-out-of-bounds in s32gen1_clk_plldig+0x1b0/0x230
Read of size 4 at addr ffffff9011627d9c by task swapper/0/0

CPU: 0 PID: 0 Comm: swapper/0 Not tainted 5.2.37-yocto-standard #1
Hardware name: Freescale S32G275 (DT)
Call trace:
 dump_backtrace+0x0/0x1f0
 show_stack+0x24/0x30
 dump_stack+0xbc/0xf4
 print_address_description+0x6c/0x260
 __kasan_report+0x150/0x198
 kasan_report+0xc/0x18
 __asan_load4+0x84/0xa8
 s32gen1_clk_plldig+0x1b0/0x230
 s32gen1_clocks_init+0x5cc/0xbe8
 s32g275_clocks_init+0x20/0x2c
 of_clk_init+0x2e0/0x40c
 time_init+0x1c/0x64
 start_kernel+0x38c/0x534

Memory state around the buggy address:
 ffffff9011627c80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
 ffffff9011627d00: f1 f1 f1 f1 f1 f1 04 f2 00 f2 f2 f2 00 f2 f2 f2
>ffffff9011627d80: 00 00 00 04 f3 f3 f3 f3 00 00 00 00 00 00 00 00
                            ^
 ffffff9011627e00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f1 f1
 ffffff9011627e80: f1 f1 00 f2 f2 f2 00 00 f3 f3 00 00 00 00 00 00
==================================================================

Issue: ALB-6153
Signed-off-by: Xulin Sun <xulin.sun@windriver.com>
Signed-off-by: Ghennadi Procopciuc <Ghennadi.Procopciuc@nxp.com>
---
 drivers/clk/s32/s32-gen1/clk-plldig.c |  8 ++++----
 drivers/clk/s32/s32-gen1/clk.c        | 10 +++++-----
 drivers/clk/s32/s32-gen1/pll.h        |  7 +------
 3 files changed, 10 insertions(+), 15 deletions(-)

diff --git a/drivers/clk/s32/s32-gen1/clk-plldig.c b/drivers/clk/s32/s32-gen1/clk-plldig.c
index 9c09749abb0f..c9d1004b3172 100644
--- a/drivers/clk/s32/s32-gen1/clk-plldig.c
+++ b/drivers/clk/s32/s32-gen1/clk-plldig.c
@@ -134,13 +134,13 @@ static int get_pllx_phi_nr(enum s32gen1_plldig_type type)
 {
 	switch (type) {
 	case S32GEN1_PLLDIG_ARM:
-		return ARMPLL_PHI_Nr;
+		return ARRAY_SIZE(arm_phis_max_freq);
 	case S32GEN1_PLLDIG_PERIPH:
-		return PERIPHPLL_PHI_Nr;
+		return ARRAY_SIZE(periph_phis_max_freq);
 	case S32GEN1_PLLDIG_ACCEL:
-		return ACCELPLL_PHI_Nr;
+		return ARRAY_SIZE(accel_phis_max_freq);
 	case S32GEN1_PLLDIG_DDR:
-		return DDRPLL_PHI_Nr;
+		return ARRAY_SIZE(ddr_phis_max_freq);
 	default:
 		return -EINVAL;
 	}
diff --git a/drivers/clk/s32/s32-gen1/clk.c b/drivers/clk/s32/s32-gen1/clk.c
index cda8987180a3..8fd620a45cd2 100644
--- a/drivers/clk/s32/s32-gen1/clk.c
+++ b/drivers/clk/s32/s32-gen1/clk.c
@@ -285,7 +285,7 @@ void __init s32gen1_clocks_init(struct device_node *clocking_node)
 		PERIPH_PLLDIG_PLLODIV2, PERIPH_PLLDIG_PLLODIV3,
 
 		PERIPH_PLLDIG_PLLODIV4, PERIPH_PLLDIG_PLLODIV5,
-		PERIPH_PLLDIG_PLLODIV6
+		PERIPH_PLLDIG_PLLODIV6, PERIPH_PLLDIG_PLLODIV7,
 	};
 	u32 ddrpll_pllodiv[] = { DDR_PLLDIG_PLLODIV0 };
 	u32 accelpll_pllodiv[] = {
@@ -396,7 +396,7 @@ void __init s32gen1_clocks_init(struct device_node *clocking_node)
 	c = s32gen1_clk_plldig(S32GEN1_PLLDIG_ARM, "armpll_vco", "armpll_sel",
 			       get_plat_clk(S32GEN1_CLK_ACCELPLL_SRC_SEL),
 			       clk_modules.armpll, armpll_pllodiv,
-			       ARMPLL_PHI_Nr);
+			       ARRAY_SIZE(armpll_pllodiv));
 	set_plat_clk(S32GEN1_CLK_ARMPLL_VCO, c);
 
 	c = s32gen1_clk_plldig_phi(S32GEN1_PLLDIG_ARM, "armpll_phi0",
@@ -457,7 +457,7 @@ void __init s32gen1_clocks_init(struct device_node *clocking_node)
 			       "periphpll_sel",
 			       get_plat_clk(S32GEN1_CLK_PERIPHPLL_SRC_SEL),
 			       clk_modules.periphpll, periphpll_pllodiv,
-			       PERIPHPLL_PHI_Nr);
+			       ARRAY_SIZE(periphpll_pllodiv));
 	set_plat_clk(S32GEN1_CLK_PERIPHPLL_VCO, c);
 
 	c = s32gen1_clk_plldig_phi(S32GEN1_PLLDIG_PERIPH, "periphpll_phi0",
@@ -622,7 +622,7 @@ void __init s32gen1_clocks_init(struct device_node *clocking_node)
 			       "ddr_part_block",
 			       get_plat_clk(S32GEN1_CLK_DDRPLL_SRC_SEL),
 			       clk_modules.ddrpll, ddrpll_pllodiv,
-			       DDRPLL_PHI_Nr);
+			       ARRAY_SIZE(ddrpll_pllodiv));
 	set_plat_clk(S32GEN1_CLK_DDRPLL_VCO, c);
 
 	c = s32gen1_clk_plldig_phi(S32GEN1_PLLDIG_DDR, "ddrpll_phi0",
@@ -634,7 +634,7 @@ void __init s32gen1_clocks_init(struct device_node *clocking_node)
 			       "accelpll_sel",
 			       get_plat_clk(S32GEN1_CLK_ACCELPLL_SRC_SEL),
 			       clk_modules.accelpll, accelpll_pllodiv,
-			       ACCELPLL_PHI_Nr);
+			       ARRAY_SIZE(accelpll_pllodiv));
 	set_plat_clk(S32GEN1_CLK_ACCELPLL_VCO, c);
 
 	c = s32gen1_clk_plldig_phi(S32GEN1_PLLDIG_ACCEL, "accelpll_phi0",
diff --git a/drivers/clk/s32/s32-gen1/pll.h b/drivers/clk/s32/s32-gen1/pll.h
index e5d8ec16a863..c01f98197ebb 100644
--- a/drivers/clk/s32/s32-gen1/pll.h
+++ b/drivers/clk/s32/s32-gen1/pll.h
@@ -73,12 +73,6 @@
 #define DDRPLL_MAX_VCO_RATE		(1600000000)
 #define ACCELPLL_MAX_VCO_RATE		(2400000000)
 
-/* Number of PHIs */
-#define ARMPLL_PHI_Nr			(2)
-#define PERIPHPLL_PHI_Nr		(8)
-#define DDRPLL_PHI_Nr			(1)
-#define ACCELPLL_PHI_Nr			(2)
-
 /* The min,max values for PLL PHIn outputs (Hz) */
 #define ARMPLL_MAX_PHI0_MAX_RATE	(1000000000)
 #define ARMPLL_MAX_PHI1_MAX_RATE	(500000000)
@@ -111,6 +105,7 @@
 #define PERIPH_PLLDIG_PLLODIV4		(0xa)
 #define PERIPH_PLLDIG_PLLODIV5		(0x10)
 #define PERIPH_PLLDIG_PLLODIV6		(0x14)
+#define PERIPH_PLLDIG_PLLODIV7		(0x1)
 #define DDR_PLLDIG_PLLODIV0		(0x2)
 #define ACCEL_PLLDIG_PLLODIV0		(0x3)
 #define ACCEL_PLLDIG_PLLODIV1		(0x3)
-- 
2.25.1

