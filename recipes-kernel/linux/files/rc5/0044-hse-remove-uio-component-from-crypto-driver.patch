From aa02f88247000b21f75a71f8b00d056ae8e7aa47 Mon Sep 17 00:00:00 2001
From: Bogdan Folea <bogdan.folea@nxp.com>
Date: Thu, 5 Aug 2021 16:01:48 +0300
Subject: [PATCH 44/49] hse: remove uio component from crypto driver

commit aa02f88247000b21f75a71f8b00d056ae8e7aa47 from
https://source.codeaurora.org/external/autobsps32/linux

Upstream-Status: Pending

Issue: ALB-7264
Signed-off-by: Bogdan Folea <bogdan.folea@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 Documentation/crypto/fsl/hse.rst |  87 ++++++++++++++++----------
 drivers/crypto/hse/Kconfig       | 104 +++++++++++++++++--------------
 drivers/crypto/hse/Makefile      |   8 ++-
 drivers/crypto/hse/hse-ahash.c   |   2 +-
 drivers/crypto/hse/hse-core.c    |  43 +++----------
 drivers/crypto/hse/hse-core.h    |   3 -
 drivers/crypto/hse/hse-mu.h      |   2 +-
 7 files changed, 125 insertions(+), 124 deletions(-)

diff --git a/Documentation/crypto/fsl/hse.rst b/Documentation/crypto/fsl/hse.rst
index 63fa15e19643..8c627e534649 100644
--- a/Documentation/crypto/fsl/hse.rst
+++ b/Documentation/crypto/fsl/hse.rst
@@ -4,7 +4,7 @@
 HSE crypto offloading engine driver
 ===================================
 
-:Copyright: 2019-2020 NXP
+:Copyright: 2019-2021 NXP
 
 Overview
 ========
@@ -16,7 +16,11 @@ operations to HSE's dedicated coprocessors through the kernel crypto API.
 
 Supported Platforms
 -------------------
-This driver provides crypto offloading support for NXP S32G274A processor.
+This driver provides cryptographic offloading support for the
+following NXP processors:
+
+- S32G274A
+- S32R45
 
 Supported Algorithms
 --------------------
@@ -26,49 +30,66 @@ This driver currently supports the following crypto operations:
 - Symmetric Key Ciphering: AES-CTR, AES-CBC, AES-ECB, AES-CFB
 - Message Authentication Codes: HMAC(MD5), HMAC(SHA1), HMAC(SHA2)
 - Authenticated Encryption with Associated Data: AES-GCM
-- True Random Number Generator: PTG.3 class
+- Hardware Random Number Generation: PTG.3 class
 
 Configuration
 =============
 The following Kconfig options are available:
 
-- Messaging Unit (MU) Instance (CONFIG_CRYPTO_DEV_NXP_HSE_MU_ID):
+- Messaging Unit Instance (CONFIG_CRYPTO_DEV_NXP_HSE_MU_ID):
   There are 4 Messaging Unit instances available for interfacing application
   processor subsystems with HSE and the user can configure which one is used
   by the Linux driver for sending service requests and receiving replies.
-
-- HSE hardware True RNG support (CONFIG_CRYPTO_DEV_NXP_HSE_HWRNG):
-  Enable/disable HSE True RNG support. Default value is yes.
-
-- AES Key Group ID within HSE Key Catalog (CONFIG_CRYPTO_DEV_NXP_HSE_AES_KEY_GID):
-  There can be up to 256 key groups within HSE RAM Key Catalog, each one storing
-  a different key type. This option specifies which key group is used by driver
-  for programming AES 256-bit keys into HSE, depending on how the RAM catalog was
-  initialized by firmware. Default value is 1.
-
-- Number of AES Key Slots in Key Group (CONFIG_CRYPTO_DEV_NXP_HSE_AES_KEY_GSIZE):
-  Each Key Group can store up to 256 keys and this option configures the number
-  of keys that can be stored in the AES 256-bit key group.
-
-- HMAC Key Group ID within HSE Key Catalog (CONFIG_CRYPTO_DEV_NXP_HSE_HMAC_KEY_GID):
-  There can be up to 256 key groups within HSE RAM Key Catalog, each one storing
-  a different key type. This option specifies which key group is used by driver
-  for programming HMAC keys into HSE, depending on how catalog was initialized
-  by firmware. Default value is 2.
-
-- Number of HMAC Key Slots in Key Group (CONFIG_CRYPTO_DEV_NXP_HSE_HMAC_KEY_GSIZE):
-  Each Key Group can store up to 256 keys and this option configures the number
-  of keys that can be stored in the HMAC key group.
+  The MU instance indicated here shall be used in interrupt mode and therefore
+  should be entirely reserved for the Linux crypto driver. Sharing an instance
+  with another driver or application shall result in requests being dropped.
+
+- Message Digest Support (CONFIG_CRYPTO_DEV_NXP_HSE_AHASH):
+  Enables hash and hash-based MAC offloading to HSE.
+
+- Symmetric Key Cipher Support (CONFIG_CRYPTO_DEV_NXP_HSE_SKCIPHER):
+  Enables symmetric key cipher offloading to HSE.
+
+- AuthEnc and AEAD Support (CONFIG_CRYPTO_DEV_NXP_HSE_AEAD):
+  Enables authenticated encryption and AEAD offloading to HSE.
+
+- NXP key wrapping/blobbing support (CRYPTO_DEV_NXP_HSE_KEY_WRAPPING):
+  Enables NXP key wrapping/blobbing with a device-specific hidden key.
+
+- Hardware RNG support (CONFIG_CRYPTO_DEV_NXP_HSE_HWRNG):
+  Enables hardware random number generation via HSE.
+
+- RAM Catalog AES Key Group Configuration:
+	- AES 256-bit Key Group ID within RAM Key Catalog
+	  (CRYPTO_DEV_NXP_HSE_AES_KEY_GROUP_ID):
+	  This option specifies which key group is used by driver for
+	  programming AES 256-bit keys into HSE, depending on how the
+	  RAM catalog was initialized by firmware.
+	- Number of key slots in the AES 256-bit Key Group
+	  (CRYPTO_DEV_NXP_HSE_AES_KEY_GROUP_SIZE):
+	  This option specifies the maximum number of keys that can be
+	  stored in the AES 256-bit key group.
+
+- RAM Catalog HMAC Key Group Configuration:
+	- HMAC 1024-bit Key Group ID within RAM Key Catalog
+	  (CRYPTO_DEV_NXP_HSE_HMAC_KEY_GROUP_ID):
+	  This option specifies which key group is used by driver for
+	  programming HMAC 1024-bit keys into HSE, depending on how the
+	  RAM catalog was initialized by firmware.
+	- Number of key slots in the HMAC 1024-bit Key Group
+	  (CRYPTO_DEV_NXP_HSE_HMAC_KEY_GROUP_SIZE):
+	  This option specifies the maximum number of keys that can be
+	  stored in the HMAC 1024-bit key group.
+
+- Debug information for HSE crypto driver (CRYPTO_DEV_NXP_HSE_DEBUG):
+  Enables printing driver debug messages to the kernel log.
 
 Known Limitations
 =================
 This driver is affected by the following known issues:
 
-- HSE cannot access the last 512M of DDR, therefore any service descriptors
-  or key buffers allocated by the driver in this range are going to cause
-  a system reset when the respective requests are being sent to HSE firmware.
-  The default DDR size used by Linux on S32G274A has been temporarily reduced
-  in order to circumvent this limitation.
-
 - The crypto driver does not currently support the RNG non-blocking mode of
   operation (the wait parameter from hwrng_read is ignored).
+
+- With standard firmware, hmac(sha384) and hmac(sha512) are not supported with
+  keys between 64 and 128 bytes in length due to the firmware-imposed limits.
diff --git a/drivers/crypto/hse/Kconfig b/drivers/crypto/hse/Kconfig
index ceadc4522a0e..db249a9a2468 100644
--- a/drivers/crypto/hse/Kconfig
+++ b/drivers/crypto/hse/Kconfig
@@ -1,99 +1,107 @@
 # SPDX-License-Identifier: BSD-3-Clause
 
 config CRYPTO_DEV_NXP_HSE
-	tristate "NXP HSE crypto driver"
+	tristate "Support for NXP HSE cryptographic engine"
 	depends on SOC_S32GEN1
 	default m
-	select CRYPTO_HASH
-	select CRYPTO_BLKCIPHER
-	select CRYPTO_AEAD
 	help
 	  Enables the driver module for NXP's Hardware Security Engine (HSE).
 
 config CRYPTO_DEV_NXP_HSE_MU_ID
+	int "Messaging Unit Instance"
 	depends on CRYPTO_DEV_NXP_HSE
-	int "Messaging Unit (MU) Instance: [0-3]"
 	range 0 3
 	default "0"
 	help
-	  The Messaging Unit (MU) Instance index used by HSE crypto driver.
+	  Index of the Messaging Unit instance to be used by the crypto driver.
 
-config CRYPTO_DEV_NXP_HSE_UIO
-	depends on CRYPTO_DEV_NXP_HSE
-	bool "NXP HSE user-space driver support"
-	default n
-	select UIO
-	help
-	  Enables NXP HSE user-space driver support. The driver shall not
-	  register any algorithms with crypto API when this is enabled.
 
 config CRYPTO_DEV_NXP_HSE_AHASH
-	bool "Asynchronous Hash and MAC Support"
-	depends on CRYPTO_DEV_NXP_HSE && !CRYPTO_DEV_NXP_HSE_UIO
+	bool "Message Digest Support"
+	depends on CRYPTO_DEV_NXP_HSE
+	select CRYPTO_HASH
 	default n
 	help
 	  Enables hash and hash-based MAC offloading to HSE.
 
 config CRYPTO_DEV_NXP_HSE_SKCIPHER
 	bool "Symmetric Key Cipher Support"
-	depends on CRYPTO_DEV_NXP_HSE && !CRYPTO_DEV_NXP_HSE_UIO
+	depends on CRYPTO_DEV_NXP_HSE
+	select CRYPTO_SKCIPHER
 	default y
 	help
 	  Enables symmetric key cipher offloading to HSE.
 
 config CRYPTO_DEV_NXP_HSE_AEAD
-	bool "Authenticated Encryption and AEAD Support"
-	depends on CRYPTO_DEV_NXP_HSE && !CRYPTO_DEV_NXP_HSE_UIO
+	bool "AuthEnc and AEAD Support"
+	depends on CRYPTO_DEV_NXP_HSE
+	select CRYPTO_AEAD
 	default y
 	help
 	  Enables authenticated encryption and AEAD offloading to HSE.
 
-config CRYPTO_DEV_NXP_HSE_HWRNG
-	bool "NXP HSE hardware RNG support"
-	depends on CRYPTO_DEV_NXP_HSE && !CRYPTO_DEV_NXP_HSE_UIO
-	default y
-	select HW_RANDOM
-	help
-	  Enables hardware RNG support for NXP's HSE.
-
 config CRYPTO_DEV_NXP_HSE_KEY_WRAPPING
 	bool "NXP key wrapping/blobbing support"
-	depends on CRYPTO_DEV_NXP_HSE && !CRYPTO_DEV_NXP_HSE_UIO
+	depends on CRYPTO_DEV_NXP_HSE_AEAD
 	default n
 	help
-	  Enables NXP key wrapping/blobbing support.
+	  Enables NXP key wrapping/blobbing with a device-specific hidden key.
+
+config CRYPTO_DEV_NXP_HSE_HWRNG
+	bool "Hardware RNG support"
+	depends on CRYPTO_DEV_NXP_HSE
+	select HW_RANDOM
+	default y
+	help
+	  Enables hardware random number generation via HSE.
+
+menu "RAM Catalog AES Key Group Configuration"
+depends on CRYPTO_DEV_NXP_HSE
+visible if CRYPTO_DEV_NXP_HSE_SKCIPHER || CRYPTO_DEV_NXP_HSE_AEAD
 
 config CRYPTO_DEV_NXP_HSE_AES_KEY_GROUP_ID
-	depends on CRYPTO_DEV_NXP_HSE && !CRYPTO_DEV_NXP_HSE_UIO
-	int "AES Key Group ID within RAM Key Catalog: [0-256]"
-	range 0 256
-	default "1"
+	int "AES 256-bit Key Group ID within RAM Key Catalog"
+	depends on CRYPTO_DEV_NXP_HSE
+	range 0 255
+	default "1" if CRYPTO_DEV_NXP_HSE_SKCIPHER || CRYPTO_DEV_NXP_HSE_AEAD
+	default "0"
 	help
 	  The AES 256-bit Key Group ID within RAM Key Catalog.
 
 config CRYPTO_DEV_NXP_HSE_AES_KEY_GROUP_SIZE
-	depends on CRYPTO_DEV_NXP_HSE && !CRYPTO_DEV_NXP_HSE_UIO
-	int "Number of AES Key Slots in AES Key Group: [0-256]"
-	range 0 256
-	default "12"
+	int "Number of key slots in the AES 256-bit Key Group"
+	depends on CRYPTO_DEV_NXP_HSE
+	range 0 255
+	default "12" if CRYPTO_DEV_NXP_HSE_SKCIPHER || CRYPTO_DEV_NXP_HSE_AEAD
+	default "0"
 	help
-	  Number of Key Slots available in the 256-bit AES Key Group.
+	  Number of key slots available in the 256-bit AES Key Group.
+
+endmenu
+
+menu "RAM Catalog HMAC Key Group Configuration"
+depends on CRYPTO_DEV_NXP_HSE
+visible if CRYPTO_DEV_NXP_HSE_AHASH
 
 config CRYPTO_DEV_NXP_HSE_HMAC_KEY_GROUP_ID
-	depends on CRYPTO_DEV_NXP_HSE && !CRYPTO_DEV_NXP_HSE_UIO
-	int "HMAC Key Group ID within RAM Key Catalog: [0-256]"
-	range 0 256
-	default "2"
+	int "HMAC 1024-bit Key Group ID within RAM Key Catalog"
+	depends on CRYPTO_DEV_NXP_HSE
+	range 0 255
+	default "2" if CRYPTO_DEV_NXP_HSE_AHASH
+	default "0"
 	help
-	  The HMAC Key Group ID within RAM Key Catalog.
+	  The HMAC 1024-bit Key Group ID within RAM Key Catalog.
 
 config CRYPTO_DEV_NXP_HSE_HMAC_KEY_GROUP_SIZE
-	depends on CRYPTO_DEV_NXP_HSE && !CRYPTO_DEV_NXP_HSE_UIO
-	int "Number of HMAC Key Slots in HMAC Key Group: [0-256]"
-	range 0 256
-	default "6"
+	int "Number of key slots in the HMAC 1024-bit Key Group"
+	depends on CRYPTO_DEV_NXP_HSE
+	range 0 255
+	default "6" if CRYPTO_DEV_NXP_HSE_AHASH
+	default "0"
 	help
-	  Number of Key Slots available in the HMAC Key Group.
+	  Number of key slots available in the HMAC 1024-bit Key Group.
+
+endmenu
 
 config CRYPTO_DEV_NXP_HSE_DEBUG
         bool "Debug information for HSE crypto driver"
diff --git a/drivers/crypto/hse/Makefile b/drivers/crypto/hse/Makefile
index 9df490516388..bfd2997f0b9e 100644
--- a/drivers/crypto/hse/Makefile
+++ b/drivers/crypto/hse/Makefile
@@ -5,7 +5,11 @@
 
 obj-$(CONFIG_CRYPTO_DEV_NXP_HSE) += hse.o
 
-hse-y := hse-core.o hse-mu.o hse-uio.o
-hse-y += hse-ahash.o hse-skcipher.o hse-aead.o hse-rng.o
+hse-y := hse-core.o hse-mu.o
+
+hse-$(CONFIG_CRYPTO_DEV_NXP_HSE_AHASH) += hse-ahash.o
+hse-$(CONFIG_CRYPTO_DEV_NXP_HSE_SKCIPHER) += hse-skcipher.o
+hse-$(CONFIG_CRYPTO_DEV_NXP_HSE_AEAD) += hse-aead.o
+hse-$(CONFIG_CRYPTO_DEV_NXP_HSE_HWRNG) += hse-rng.o
 
 ccflags-$(CONFIG_CRYPTO_DEV_NXP_HSE_DEBUG) += -DDEBUG
diff --git a/drivers/crypto/hse/hse-ahash.c b/drivers/crypto/hse/hse-ahash.c
index 95e41dd4fd7d..c9a0020b29fb 100644
--- a/drivers/crypto/hse/hse-ahash.c
+++ b/drivers/crypto/hse/hse-ahash.c
@@ -1,6 +1,6 @@
 // SPDX-License-Identifier: BSD-3-Clause
 /*
- * NXP HSE Driver - Asynchronous Hash Support
+ * NXP HSE Driver - Asynchronous Message Digest Support
  *
  * This file contains the implementation of the hash algorithms and hash-based
  * message authentication codes supported for hardware offloading via HSE.
diff --git a/drivers/crypto/hse/hse-core.c b/drivers/crypto/hse/hse-core.c
index 59b5e1a6455e..25dc31b24778 100644
--- a/drivers/crypto/hse/hse-core.c
+++ b/drivers/crypto/hse/hse-core.c
@@ -19,18 +19,6 @@
 #include "hse-core.h"
 #include "hse-mu.h"
 
-#if !defined(CONFIG_CRYPTO_DEV_NXP_HSE_UIO)
-#define HSE_KS_RAM_AES_GID       CONFIG_CRYPTO_DEV_NXP_HSE_AES_KEY_GROUP_ID
-#define HSE_KS_RAM_AES_GSIZE     CONFIG_CRYPTO_DEV_NXP_HSE_AES_KEY_GROUP_SIZE
-#define HSE_KS_RAM_HMAC_GID      CONFIG_CRYPTO_DEV_NXP_HSE_HMAC_KEY_GROUP_ID
-#define HSE_KS_RAM_HMAC_GSIZE    CONFIG_CRYPTO_DEV_NXP_HSE_HMAC_KEY_GROUP_SIZE
-#else
-#define HSE_KS_RAM_AES_GID       0u
-#define HSE_KS_RAM_AES_GSIZE     0u
-#define HSE_KS_RAM_HMAC_GID      0u
-#define HSE_KS_RAM_HMAC_GSIZE    0u
-#endif /* CONFIG_CRYPTO_DEV_NXP_HSE_UIO */
-
 /**
  * struct hse_drvdata - HSE driver private data
  * @srv_desc[n].ptr: service descriptor virtual address for channel n
@@ -40,7 +28,6 @@
  * @skcipher_algs: registered symmetric key cipher algorithms
  * @aead_algs: registered authenticated encryption and AEAD algorithms
  * @mu: MU instance handle returned by lower abstraction layer
- * @uio: user-space I/O device handle
  * @channel_busy[n]: internally cached status of MU channel n
  * @refcnt[n]: service channel n acquired reference counter
  * @type[n]: designated type of service channel n
@@ -65,7 +52,6 @@ struct hse_drvdata {
 	struct list_head skcipher_algs;
 	struct list_head aead_algs;
 	void *mu;
-	void *uio;
 	bool channel_busy[HSE_NUM_CHANNELS];
 	atomic_t refcnt[HSE_NUM_CHANNELS];
 	enum hse_ch_type type[HSE_NUM_CHANNELS];
@@ -641,12 +627,6 @@ static void hse_srv_rsp_dispatch(struct device *dev, u8 channel)
 		dev_dbg(dev, "%s: service response 0x%08X on channel %d\n",
 			__func__, srv_rsp, channel);
 
-	/* when UIO support is enabled, let upper layer handle the reply */
-	if (IS_ENABLED(CONFIG_CRYPTO_DEV_NXP_HSE_UIO) && likely(drv->uio)) {
-		hse_uio_notify(drv->uio, channel, srv_rsp);
-		return;
-	}
-
 	if (drv->rx_cbk[channel].fn) {
 		void (*rx_cbk)(int err, void *ctx) = drv->rx_cbk[channel].fn;
 		void *ctx = drv->rx_cbk[channel].ctx;
@@ -819,8 +799,7 @@ static int hse_probe(struct platform_device *pdev)
 		err = -ENODEV;
 		goto err_probe_failed;
 	}
-	if (!IS_ENABLED(CONFIG_CRYPTO_DEV_NXP_HSE_UIO) &&
-	    !likely(status & HSE_STATUS_INSTALL_OK)) {
+	if (!likely(status & HSE_STATUS_INSTALL_OK)) {
 		dev_err(dev, "key catalogs not formatted\n");
 		err = -ENODEV;
 		goto err_probe_failed;
@@ -828,24 +807,16 @@ static int hse_probe(struct platform_device *pdev)
 	if (unlikely(status & HSE_STATUS_PUBLISH_SYS_IMAGE))
 		dev_warn(dev, "volatile configuration, publish SYS_IMAGE\n");
 
-	/* register UIO device */
-	if (IS_ENABLED(CONFIG_CRYPTO_DEV_NXP_HSE_UIO)) {
-		drv->uio = hse_uio_register(dev, drv->mu);
-		if (IS_ERR_OR_NULL(drv->uio)) {
-			dev_err(dev, "failed to register UIO device\n");
-			return PTR_ERR(drv->uio);
-		}
-		return 0;
-	}
-
 	/* initialize key rings */
-	err = hse_key_ring_init(dev, &drv->hmac_key_ring, HSE_KEY_TYPE_HMAC,
-				HSE_KS_RAM_HMAC_GID, HSE_KS_RAM_HMAC_GSIZE);
+	err = hse_key_ring_init(dev, &drv->aes_key_ring, HSE_KEY_TYPE_AES,
+				CONFIG_CRYPTO_DEV_NXP_HSE_AES_KEY_GROUP_ID,
+				CONFIG_CRYPTO_DEV_NXP_HSE_AES_KEY_GROUP_SIZE);
 	if (unlikely(err))
 		goto err_probe_failed;
 
-	err = hse_key_ring_init(dev, &drv->aes_key_ring, HSE_KEY_TYPE_AES,
-				HSE_KS_RAM_AES_GID, HSE_KS_RAM_AES_GSIZE);
+	err = hse_key_ring_init(dev, &drv->hmac_key_ring, HSE_KEY_TYPE_HMAC,
+				CONFIG_CRYPTO_DEV_NXP_HSE_HMAC_KEY_GROUP_ID,
+				CONFIG_CRYPTO_DEV_NXP_HSE_HMAC_KEY_GROUP_SIZE);
 	if (unlikely(err))
 		goto err_probe_failed;
 
diff --git a/drivers/crypto/hse/hse-core.h b/drivers/crypto/hse/hse-core.h
index e7d4827b98fc..1dddca8a1ce2 100644
--- a/drivers/crypto/hse/hse-core.h
+++ b/drivers/crypto/hse/hse-core.h
@@ -75,9 +75,6 @@ void hse_aead_unregister(struct list_head *alg_list);
 void hse_hwrng_register(struct device *dev);
 void hse_hwrng_unregister(struct device *dev);
 
-void *hse_uio_register(struct device *dev, void *mu);
-void hse_uio_notify(void *uio, u8 channel, u32 srv_rsp);
-
 u32 _get_rng_srv_id(struct device *dev);
 
 #endif /* HSE_CORE_H */
diff --git a/drivers/crypto/hse/hse-mu.h b/drivers/crypto/hse/hse-mu.h
index 7641075ad3e7..f77628ebe48f 100644
--- a/drivers/crypto/hse/hse-mu.h
+++ b/drivers/crypto/hse/hse-mu.h
@@ -19,7 +19,7 @@
 #define HSE_CHANNEL_INV    0xFFu /* invalid acquired service channel index */
 #define HSE_CH_MASK_ALL    0x0000FFFFul /* all available channels irq mask */
 
-#define HSE_STATUS_MASK     0xFFFF0000ul /* HSE global status FSR mask */
+#define HSE_STATUS_MASK    0xFFFF0000ul /* HSE global status FSR mask */
 
 #define HSE_EVT_MASK_ERR     0x000000FFul /* fatal error GSR mask */
 #define HSE_EVT_MASK_WARN    0x0000FF00ul /* warning GSR mask */
-- 
2.17.1

