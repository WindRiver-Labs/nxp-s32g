From 7ec0203cbe0f32502ecc6f4bd3d1afe4e1e8e38a Mon Sep 17 00:00:00 2001
From: Ghennadi Procopciuc <ghennadi.procopciuc@nxp.com>
Date: Tue, 20 Jul 2021 08:07:23 +0300
Subject: [PATCH 17/49] llce: share status memory region between core and
 mailbox driver

commit 7ec0203cbe0f32502ecc6f4bd3d1afe4e1e8e38a from
https://source.codeaurora.org/external/autobsps32/linux

This is needed to allow the LLCE mailbox driver to retrieve the id
of the physical interface that captured a logging packet.

Upstream-Status: Pending

Issue: ALB-5830, ALB-7344
Signed-off-by: Ghennadi Procopciuc <ghennadi.procopciuc@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 drivers/mailbox/llce-mailbox.c |  69 +++++++++++++++++++---
 drivers/mfd/llce-core.c        | 103 ++++++++++++++++++++-------------
 2 files changed, 122 insertions(+), 50 deletions(-)

diff --git a/drivers/mailbox/llce-mailbox.c b/drivers/mailbox/llce-mailbox.c
index a8ee74b27639..3edc8edb6147 100644
--- a/drivers/mailbox/llce-mailbox.c
+++ b/drivers/mailbox/llce-mailbox.c
@@ -15,7 +15,9 @@
 #include <linux/mailbox/nxp-llce/llce_mailbox.h>
 #include <linux/mailbox_controller.h>
 #include <linux/module.h>
+#include <linux/of_address.h>
 #include <linux/of_platform.h>
+#include <linux/of_reserved_mem.h>
 #include <linux/platform_device.h>
 #include <linux/processor.h>
 #include <linux/slab.h>
@@ -50,7 +52,9 @@
 
 #define LLCE_LOGGER_ICSR_IRQ		BIT(5)
 
-#define LLCE_CAN_COMPATIBLE "nxp,s32g-llce-can"
+#define LLCE_CAN_COMPATIBLE		"nxp,s32g-llce-can"
+#define LLCE_SHMEM_REG_NAME		"shmem"
+#define LLCE_STATUS_REG_NAME		"status"
 
 #define LLCE_ARR_ENTRY(BASE_INDEX, ENTRY) \
 	[ENTRY - BASE_INDEX] = __stringify_1(ENTRY)
@@ -78,6 +82,7 @@ struct llce_mb {
 	struct llce_fifoirq txack_irqs;
 	struct mutex txack_lock;
 	struct llce_can_shared_memory *sh_mem;
+	void __iomem *status;
 	void __iomem *rxout_fifo;
 	void __iomem *rxin_fifo;
 	void __iomem *txack_fifo;
@@ -894,8 +899,52 @@ static struct sram_pool *devm_sram_pool_alloc(struct device *dev,
 	return spool;
 }
 
-static int alloc_sram_pool(struct platform_device *pdev,
-			   struct llce_mb *mb)
+static struct device_node *get_sram_node(struct device *dev, const char *name)
+{
+	struct device_node *node, *dev_node;
+	int idx;
+
+	dev_node = dev->of_node;
+	idx = of_property_match_string(dev_node, "memory-region-names", name);
+	node = of_parse_phandle(dev_node, "memory-region", idx);
+	if (!node) {
+		dev_err(dev, "Failed to get '%s' memory region\n", name);
+		return ERR_PTR(-EIO);
+	}
+
+	return node;
+}
+
+static int map_llce_status(struct device *dev, struct llce_mb *mb)
+{
+	struct device_node *sram_node;
+	struct resource r;
+	resource_size_t size;
+	int ret;
+
+	sram_node = get_sram_node(dev, LLCE_STATUS_REG_NAME);
+	if (IS_ERR(sram_node))
+		return PTR_ERR(sram_node);
+
+	ret = of_address_to_resource(sram_node, 0, &r);
+	of_node_put(sram_node);
+	if (ret)
+		return ret;
+
+	size = resource_size(&r);
+
+	mb->status = devm_ioremap(dev, r.start, size);
+	if (!mb->status) {
+		dev_err(dev, "Failed to map '%s' memory region\n",
+			LLCE_STATUS_REG_NAME);
+		return -ENOMEM;
+	}
+
+	return 0;
+}
+
+static int alloc_llce_shmem(struct platform_device *pdev,
+			    struct llce_mb *mb)
 {
 	struct device_node *sram_node;
 	struct device *dev = &pdev->dev;
@@ -904,11 +953,9 @@ static int alloc_sram_pool(struct platform_device *pdev,
 	struct sram_pool *spool;
 	struct platform_device *sram_pdev;
 
-	sram_node = of_parse_phandle(pdev->dev.of_node, "memory-region", 0);
-	if (!sram_node) {
-		dev_err(&pdev->dev, "Failed to get 'memory-region'\n");
-		return -EIO;
-	}
+	sram_node = get_sram_node(dev, LLCE_SHMEM_REG_NAME);
+	if (IS_ERR(sram_node))
+		return PTR_ERR(sram_node);
 
 	name = sram_node->name;
 	sram_pdev = of_find_device_by_node(sram_node);
@@ -1651,7 +1698,11 @@ static int llce_mb_probe(struct platform_device *pdev)
 	if (ret)
 		return ret;
 
-	ret = alloc_sram_pool(pdev, mb);
+	ret = alloc_llce_shmem(pdev, mb);
+	if (ret)
+		return ret;
+
+	ret = map_llce_status(dev, mb);
 	if (ret)
 		return ret;
 
diff --git a/drivers/mfd/llce-core.c b/drivers/mfd/llce-core.c
index b1e3c4b8cdc9..f64ef60ee842 100644
--- a/drivers/mfd/llce-core.c
+++ b/drivers/mfd/llce-core.c
@@ -54,6 +54,8 @@ struct llce_core {
 	struct sram_pool **pools;
 	size_t npools;
 
+	void __iomem *status;
+
 	size_t nfrws;
 };
 
@@ -119,19 +121,17 @@ static struct sram_pool *alloc_sram_node(struct device_node *sram_node,
 	return spool;
 }
 
-static struct sram_pool *alloc_sram_node_index(struct platform_device *pdev,
-					       int index)
+static struct device_node *get_sram_node(struct platform_device *pdev, int index)
 {
-	struct device_node *sram_node;
+	struct device_node *sram_node = of_parse_phandle(pdev->dev.of_node, "memory-region", index);
 
-	sram_node = of_parse_phandle(pdev->dev.of_node, "memory-region", index);
 	if (!sram_node) {
 		dev_err(&pdev->dev, "Failed to get the element %d from 'memory-region' list\n",
 			index);
 		return ERR_PTR(-EINVAL);
 	}
 
-	return alloc_sram_node(sram_node, &pdev->dev);
+	return sram_node;
 }
 
 static int llce_fw_load(struct platform_device *pdev, int index,
@@ -161,29 +161,73 @@ static void llce_release_fw(struct sram_pool *spool)
 	release_firmware(spool->fw_entry);
 }
 
-static int llce_alloc_sram(struct platform_device *pdev,
-			   struct llce_core *core)
+static int map_status_sram(struct llce_core *core,
+			   struct device *dev,
+			   struct device_node *sram_node)
 {
-	int i;
-	struct sram_pool *spool;
+	struct resource r;
+	resource_size_t size;
+	int ret;
+
+	ret = of_address_to_resource(sram_node, 0, &r);
+	of_node_put(sram_node);
+	if (ret)
+		return ret;
+
+	size = resource_size(&r);
+
+	core->status = devm_ioremap(dev, r.start, size);
+	if (!core->status) {
+		dev_err(dev, "Failed to map '%s' memory region\n",
+			LLCE_STATUS_POOL);
+		return -ENOMEM;
+	}
 
-	core->npools = of_count_phandle_with_args(pdev->dev.of_node,
-						  "memory-region",
-						  NULL);
-	core->pools = devm_kmalloc(&pdev->dev,
+	return 0;
+}
+
+static int map_and_alloc_sram(struct platform_device *pdev,
+			      struct llce_core *core)
+{
+	int i, j, ret;
+	struct sram_pool *spool;
+	struct device_node *sram_node;
+	size_t dtb_npools;
+
+	dtb_npools = of_count_phandle_with_args(pdev->dev.of_node,
+						"memory-region",
+						NULL);
+	/* Exclude boot status pool as it's only mapped */
+	core->npools = dtb_npools - 1;
+	core->pools = devm_kzalloc(&pdev->dev,
 				   core->npools * sizeof(*core->pools),
 				   GFP_KERNEL);
 	if (!core->pools)
 		return -ENOMEM;
 
-	for (i = 0; i < core->npools; i++) {
-		spool = alloc_sram_node_index(pdev, i);
+	for (i = 0, j = 0; i < dtb_npools; i++) {
+		sram_node = get_sram_node(pdev, i);
+		if (!sram_node)
+			return PTR_ERR(sram_node);
+
+		if (!strcmp(sram_node->name, LLCE_STATUS_POOL)) {
+			ret = map_status_sram(core, &pdev->dev, sram_node);
+			if (ret)
+				return ret;
+			continue;
+		}
+
+		spool = alloc_sram_node(sram_node, &pdev->dev);
 		if (IS_ERR(spool)) {
 			dev_err(&pdev->dev, "Failed to initialize SRAM buffer %d\n",
 				i);
 			return PTR_ERR(spool);
 		}
-		core->pools[i] = spool;
+
+		if (j < core->npools) {
+			core->pools[j] = spool;
+			j++;
+		}
 	}
 
 	return 0;
@@ -294,20 +338,6 @@ static int llce_cores_kickoff(struct device *dev, void __iomem *sysctrl_base,
 	return 0;
 }
 
-static struct sram_pool *get_status_pool(struct llce_core *core)
-{
-	size_t i;
-	struct sram_pool *pool;
-
-	for (i = 0; i < core->npools; i++) {
-		pool = core->pools[i];
-		if (!strcmp(LLCE_STATUS_POOL, pool->name))
-			return pool;
-	}
-
-	return NULL;
-}
-
 static int init_core_clock(struct device *dev, struct llce_core *core)
 {
 	int ret;
@@ -334,22 +364,13 @@ static void deinit_core_clock(struct llce_core *core)
 
 static int start_llce_cores(struct device *dev, struct llce_core *core)
 {
-	struct sram_pool *status_pool;
 	int ret;
 
 	reset_llce_cores(core->sysctrl_base);
 
 	llce_flush_fw(core);
 
-	status_pool = get_status_pool(core);
-	if (!status_pool) {
-		dev_err(dev, "'%s' pool is not attached to LLCE core\n",
-			LLCE_STATUS_POOL);
-		return -EIO;
-	}
-
-	ret = llce_cores_kickoff(dev, core->sysctrl_base,
-				 (void *)status_pool->vaddr);
+	ret = llce_cores_kickoff(dev, core->sysctrl_base, core->status);
 	if (ret) {
 		dev_err(dev, "Failed to start LLCE cores\n");
 		return ret;
@@ -392,7 +413,7 @@ static int llce_core_probe(struct platform_device *pdev)
 	if (ret)
 		return ret;
 
-	ret = llce_alloc_sram(pdev, core);
+	ret = map_and_alloc_sram(pdev, core);
 	if (ret)
 		goto disable_clk;
 
-- 
2.17.1

