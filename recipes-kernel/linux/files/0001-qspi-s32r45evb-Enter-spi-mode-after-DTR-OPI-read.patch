From baa4cece4b33c3feea1860ddd6a9cfa7420ed396 Mon Sep 17 00:00:00 2001
From: Ciprian Marian Costea <ciprianmarian.costea@nxp.com>
Date: Wed, 19 May 2021 13:32:23 +0300
Subject: [PATCH 01/10] qspi: s32r45evb: Enter spi mode after DTR-OPI read

commit e7621acd29b8e33798b4654bac237d1994f78942 from
https://source.codeaurora.org/external/autobsps32/linux

Only on S32R45EVB platform, after we enter DTR-OPI mode
and reset the board, any attempt to probe the QSPI flash
from u-boot will fail. The RX data registers where the
Macronix Flash id should reside are not fetched.

This issue appears only on S32R45EVB platform, where the 'RESET_B'
signal (functional reset) is not wired, but only POR signal
(power on reset), in case of Macronix Flash memory.

The proposed solution is to enter SPI mode after any DTR-OPI
read operation, only for S32R45EVB platform.

Upstream-Status: pending

Issue: ALB-7083
Signed-off-by: Ciprian Marian Costea <ciprianmarian.costea@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 arch/arm64/boot/dts/freescale/fsl-s32r45-evb.dts |  1 +
 drivers/mtd/spi-nor/controllers/fsl-quadspi.c    |  3 +++
 drivers/mtd/spi-nor/controllers/fsl-quadspi.h    |  1 +
 drivers/mtd/spi-nor/controllers/s32gen1_qspi.c   | 15 ++++++++++++++-
 4 files changed, 19 insertions(+), 1 deletion(-)

diff --git a/arch/arm64/boot/dts/freescale/fsl-s32r45-evb.dts b/arch/arm64/boot/dts/freescale/fsl-s32r45-evb.dts
index ea6e086b3a13..4b065315ccc1 100644
--- a/arch/arm64/boot/dts/freescale/fsl-s32r45-evb.dts
+++ b/arch/arm64/boot/dts/freescale/fsl-s32r45-evb.dts
@@ -661,6 +661,7 @@ mx25uw51245g@0 {
 		spi-max-frequency = <133000000>;
 		spi-tx-bus-width = <8>;
 		spi-rx-bus-width = <8>;
+		spi-no-functional-reset;
 		reg = <0>;
 	};
 };
diff --git a/drivers/mtd/spi-nor/controllers/fsl-quadspi.c b/drivers/mtd/spi-nor/controllers/fsl-quadspi.c
index 45f37124fd44..098abbf955a3 100644
--- a/drivers/mtd/spi-nor/controllers/fsl-quadspi.c
+++ b/drivers/mtd/spi-nor/controllers/fsl-quadspi.c
@@ -996,6 +996,9 @@ static int fsl_qspi_probe(struct platform_device *pdev)
 		if (ret < 0)
 			goto mutex_failed;
 
+                q->no_functional_reset = of_property_read_bool(np,
+                                "spi-no-functional-reset");
+
 		/* set the chip address for READID */
 		fsl_qspi_set_base_addr(q, nor);
 		ret = spi_nor_scan(nor, NULL, &hwcaps);
diff --git a/drivers/mtd/spi-nor/controllers/fsl-quadspi.h b/drivers/mtd/spi-nor/controllers/fsl-quadspi.h
index 5cb49c255c10..edf4234427fd 100644
--- a/drivers/mtd/spi-nor/controllers/fsl-quadspi.h
+++ b/drivers/mtd/spi-nor/controllers/fsl-quadspi.h
@@ -382,6 +382,7 @@ struct fsl_qspi {
 	bool big_endian;
 	struct mutex lock;
 	struct pm_qos_request pm_qos_req;
+	bool no_functional_reset;
 #ifdef CONFIG_SOC_S32GEN1
 	const struct spi_mem_op *s32gen1_mem_op;
 	struct lut_config lut_configs[MAX_OPCODE];
diff --git a/drivers/mtd/spi-nor/controllers/s32gen1_qspi.c b/drivers/mtd/spi-nor/controllers/s32gen1_qspi.c
index 3172cce1af95..c516b7ed9455 100644
--- a/drivers/mtd/spi-nor/controllers/s32gen1_qspi.c
+++ b/drivers/mtd/spi-nor/controllers/s32gen1_qspi.c
@@ -1124,6 +1124,7 @@ int s32gen1_exec_op(struct spi_nor *nor, const struct spi_mem_op *op)
 	u8 lut_cfg = LUT_INVALID_INDEX;
 	bool enabled = false;
 	struct fsl_qspi *q = nor->priv;
+	int ret;
 
 	if (!s32gen1_supports_op(nor, op))
 		return -1;
@@ -1148,7 +1149,19 @@ int s32gen1_exec_op(struct spi_nor *nor, const struct spi_mem_op *op)
 			qspi_invalidate_ahb(q);
 
 		q->flags |= QUADSPI_FLAG_PREV_READ_MEM;
-		return qspi_read_mem(q, op, lut_cfg);
+                ret = qspi_read_mem(q, op, lut_cfg);
+                /*
+                 * On S32R45EVB platform, the Macronix Flash memory
+                 * does not have the 'RESET_B' (functional reset) signal wired,
+                 * but only POR (power on reset).
+                 * Therefore, in order to prevent an improper state on the
+                 * Macronix Flash after any functional reset, we enter SPI MODE
+                 * after any DTR-OPI read operation.
+                 */
+                if (q->no_functional_reset)
+                        enable_spi(q, true);
+
+                return ret;
 	}
 
 	q->flags &= ~QUADSPI_FLAG_PREV_READ_MEM;
-- 
2.25.1

