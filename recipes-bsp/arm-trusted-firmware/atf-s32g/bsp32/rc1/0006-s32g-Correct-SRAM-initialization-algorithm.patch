From bbb17161ff8838beb12108051a3f3f72c5645d03 Mon Sep 17 00:00:00 2001
From: Ghennadi Procopciuc <ghennadi.procopciuc@nxp.com>
Date: Wed, 24 Nov 2021 11:06:31 +0200
Subject: [PATCH 06/14] s32g: Correct SRAM initialization algorithm

Issue: ALB-8227
Upstream-Status: Pending 

Signed-off-by: Ghennadi Procopciuc <ghennadi.procopciuc@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 plat/nxp/s32/s32g/include/s32g_sramc.h | 12 ++++--
 plat/nxp/s32/s32g/s32g2/s32g2_sramc.c  | 39 +++++++++--------
 plat/nxp/s32/s32g/s32g3/s32g3_sramc.c  | 58 +++++++++++++-------------
 plat/nxp/s32/s32g/s32g_sramc.c         | 48 ++++++++++-----------
 4 files changed, 84 insertions(+), 73 deletions(-)

diff --git a/plat/nxp/s32/s32g/include/s32g_sramc.h b/plat/nxp/s32/s32g/include/s32g_sramc.h
index 420f1054e..7162c9011 100644
--- a/plat/nxp/s32/s32g/include/s32g_sramc.h
+++ b/plat/nxp/s32/s32g/include/s32g_sramc.h
@@ -20,14 +20,20 @@
 
 struct sram_ctrl {
 	uintptr_t base_addr;
-	uint32_t min_addr;
-	uint32_t max_addr;
+	uint32_t min_sram_addr;
+	uint32_t max_sram_addr;
+	/**
+	 * Translate an A53 SRAM address to SRAM controller offset
+	 * associated to that memory region.
+	 * This algorithm is platform specific.
+	 */
+	uintptr_t (*a53_to_sramc_offset)(uintptr_t addr);
 };
 
 int s32_sram_clear(uintptr_t start, uintptr_t end);
 void s32_ssram_clear(void);
 void s32_get_sramc(struct sram_ctrl **ctrls, size_t *size);
-uintptr_t a53_to_sramc_addr(uintptr_t addr);
+
 #endif
 #endif
 
diff --git a/plat/nxp/s32/s32g/s32g2/s32g2_sramc.c b/plat/nxp/s32/s32g/s32g2/s32g2_sramc.c
index 4c397d2ce..df865d4ba 100644
--- a/plat/nxp/s32/s32g/s32g2/s32g2_sramc.c
+++ b/plat/nxp/s32/s32g/s32g2/s32g2_sramc.c
@@ -6,23 +6,36 @@
 #include <platform_def.h>
 #include <s32g_sramc.h>
 
-#define SRAMC0_MIN_ADDR         (0x0)
-#define SRAMC0_MAX_ADDR         (0x7FFF)
-#define SRAMC1_MIN_ADDR         (SRAMC0_MAX_ADDR + 1)
-#define SRAMC1_MAX_ADDR         (0x10000)
+#define SRAM_BANK_SIZE          (S32G_SRAM_SIZE / 2)
+
+#define SRAM_BANK_MIN(N)        (S32G_SRAM_BASE + (N) * SRAM_BANK_SIZE)
+#define SRAM_BANK_MAX(N)        (S32G_SRAM_BASE + ((N) + 1) * \
+				 SRAM_BANK_SIZE - 1)
+
+static uintptr_t a53_to_sramc_offset(uintptr_t addr)
+{
+	addr -= S32G_SRAM_BASE;
+
+	/* mem_addr[16:0] = {bus_addr[23:9], bus_addr[5:4]} */
+	addr = ((addr >> 9) << 2) | ((addr >> 4) & 0x3);
+
+	return addr;
+}
 
 void s32_get_sramc(struct sram_ctrl **ctrls, size_t *size)
 {
 	static struct sram_ctrl controllers[] = {
 		{
 			.base_addr = SRAMC0_BASE_ADDR,
-			.min_addr = SRAMC0_MIN_ADDR,
-			.max_addr = SRAMC0_MAX_ADDR,
+			.min_sram_addr = SRAM_BANK_MIN(0),
+			.max_sram_addr = SRAM_BANK_MAX(0),
+			.a53_to_sramc_offset = a53_to_sramc_offset,
 		},
 		{
 			.base_addr = SRAMC1_BASE_ADDR,
-			.min_addr = SRAMC1_MIN_ADDR,
-			.max_addr = SRAMC1_MAX_ADDR,
+			.min_sram_addr = SRAM_BANK_MIN(1),
+			.max_sram_addr = SRAM_BANK_MAX(1),
+			.a53_to_sramc_offset = a53_to_sramc_offset,
 		},
 	};
 
@@ -30,13 +43,3 @@ void s32_get_sramc(struct sram_ctrl **ctrls, size_t *size)
 	*size = ARRAY_SIZE(controllers);
 }
 
-uintptr_t a53_to_sramc_addr(uintptr_t addr)
-{
-	addr -= S32G_SRAM_BASE;
-
-	/* mem_addr[16:0] = {bus_addr[23:9], bus_addr[5:4]} */
-	addr = ((addr >> 9) << 2) | ((addr >> 4) & 0x3);
-
-	return addr;
-}
-
diff --git a/plat/nxp/s32/s32g/s32g3/s32g3_sramc.c b/plat/nxp/s32/s32g/s32g3/s32g3_sramc.c
index 23e47f695..3040ca3ef 100644
--- a/plat/nxp/s32/s32g/s32g3/s32g3_sramc.c
+++ b/plat/nxp/s32/s32g/s32g3/s32g3_sramc.c
@@ -9,37 +9,51 @@
 #define SRAMC2_BASE_ADDR        0x4055A000
 #define SRAMC3_BASE_ADDR        0x4055E000
 
-#define SRAMC0_MIN_ADDR         (0x0)
-#define SRAMC0_MAX_ADDR         (0x13fff)
-#define SRAMC1_MIN_ADDR         (SRAMC0_MAX_ADDR + 1)
-#define SRAMC1_MAX_ADDR         (0x27FFF)
-#define SRAMC2_MIN_ADDR         (SRAMC1_MAX_ADDR + 1)
-#define SRAMC2_MAX_ADDR         (0x3BFFF)
-#define SRAMC3_MIN_ADDR         (SRAMC2_MAX_ADDR + 1)
-#define SRAMC3_MAX_ADDR         (0x4FFFF)
+#define SRAM_BANK_SIZE          (S32G_SRAM_SIZE / 4)
+
+#define SRAM_BANK_MIN(N)        (S32G_SRAM_BASE + (N) * SRAM_BANK_SIZE)
+#define SRAM_BANK_MAX(N)        (S32G_SRAM_BASE + ((N) + 1) * \
+				 SRAM_BANK_SIZE - 1)
+
+static uintptr_t a53_to_sramc_offset(uintptr_t addr)
+{
+	/**
+	 * mem_addr[16:0] = { (bus_addr[24:20] modulo 5),
+	 *                    bus_addr[19:8], bus_addr[5:4]};
+	 */
+	addr = ((addr & 0x30) >> 4) |
+	    (((addr & 0xFFF00) >> 8) << 2) |
+	    (((addr & 0x1F00000) >> 20) % 5) << 14;
+
+	return addr;
+}
 
 void s32_get_sramc(struct sram_ctrl **ctrls, size_t *size)
 {
 	static struct sram_ctrl controllers[] = {
 		{
 			.base_addr = SRAMC0_BASE_ADDR,
-			.min_addr = SRAMC0_MIN_ADDR,
-			.max_addr = SRAMC0_MAX_ADDR,
+			.min_sram_addr = SRAM_BANK_MIN(0),
+			.max_sram_addr = SRAM_BANK_MAX(0),
+			.a53_to_sramc_offset = a53_to_sramc_offset,
 		},
 		{
 			.base_addr = SRAMC1_BASE_ADDR,
-			.min_addr = SRAMC1_MIN_ADDR,
-			.max_addr = SRAMC1_MAX_ADDR,
+			.min_sram_addr = SRAM_BANK_MIN(1),
+			.max_sram_addr = SRAM_BANK_MAX(1),
+			.a53_to_sramc_offset = a53_to_sramc_offset,
 		},
 		{
 			.base_addr = SRAMC2_BASE_ADDR,
-			.min_addr = SRAMC2_MIN_ADDR,
-			.max_addr = SRAMC2_MAX_ADDR,
+			.min_sram_addr = SRAM_BANK_MIN(2),
+			.max_sram_addr = SRAM_BANK_MAX(2),
+			.a53_to_sramc_offset = a53_to_sramc_offset,
 		},
 		{
 			.base_addr = SRAMC3_BASE_ADDR,
-			.min_addr = SRAMC3_MIN_ADDR,
-			.max_addr = SRAMC3_MAX_ADDR,
+			.min_sram_addr = SRAM_BANK_MIN(3),
+			.max_sram_addr = SRAM_BANK_MAX(3),
+			.a53_to_sramc_offset = a53_to_sramc_offset,
 		},
 	};
 
@@ -47,16 +61,4 @@ void s32_get_sramc(struct sram_ctrl **ctrls, size_t *size)
 	*size = ARRAY_SIZE(controllers);
 }
 
-uintptr_t a53_to_sramc_addr(uintptr_t addr)
-{
-	/**
-	 * mem_addr[16:0] = { (bus_addr[24:20] modulo 5),
-	 *                    bus_addr[19:8], bus_addr[5:4]};
-	 */
-	addr = ((addr & 0x30) >> 4) |
-	    (((addr & 0xFFF00) >> 8) << 2) |
-	    (((addr & 0x1F00000) >> 20) % 5) << 14;
-
-	return addr;
-}
 
diff --git a/plat/nxp/s32/s32g/s32g_sramc.c b/plat/nxp/s32/s32g/s32g_sramc.c
index fb0896e69..840d81ee8 100644
--- a/plat/nxp/s32/s32g/s32g_sramc.c
+++ b/plat/nxp/s32/s32g/s32g_sramc.c
@@ -55,17 +55,15 @@ static bool in_overlap(uintptr_t s1, uintptr_t e1, uintptr_t s2, uintptr_t e2)
 	return MAX(s1, s2) <= MIN(e1, e2);
 }
 
-static void clear_sramc_range(struct sram_ctrl *c, uintptr_t start,
-			      uintptr_t end)
+static void clear_sramc_range(uintptr_t base, uint32_t start_offset,
+			      uint32_t end_offset)
 {
-	uintptr_t base = c->base_addr;
-
 	/* Disable the controller */
 	mmio_write_32(base + SRAMC_PRAMCR_OFFSET, 0x0);
 
 	/* Max range */
-	mmio_write_32(base + SRAMC_PRAMIAS_OFFSET, start);
-	mmio_write_32(base + SRAMC_PRAMIAE_OFFSET, end);
+	mmio_write_32(base + SRAMC_PRAMIAS_OFFSET, start_offset);
+	mmio_write_32(base + SRAMC_PRAMIAE_OFFSET, end_offset);
 
 	/* Initialization request */
 	mmio_write_32(base + SRAMC_PRAMCR_OFFSET, SRAMC_PRAMCR_INITREQ);
@@ -75,15 +73,24 @@ static void clear_sramc_range(struct sram_ctrl *c, uintptr_t start,
 	mmio_write_32(base + SRAMC_PRAMSR_OFFSET, SRAMC_PRAMSR_IDONE);
 }
 
-void s32_ssram_clear(void)
+static void clear_sram_range(struct sram_ctrl *c, uintptr_t start_addr,
+			      uintptr_t end_addr)
 {
-	static struct sram_ctrl ssramc = {
-		.base_addr = SSRAMC_BASE_ADDR,
-		.min_addr = 0x0,
-		.max_addr = SSRAM_MAX_ADDR,
-	};
+	uintptr_t base = c->base_addr;
+	uint32_t start_offset, end_offset;
+
+	start_addr -= c->min_sram_addr;
+	end_addr -= c->min_sram_addr;
+
+	start_offset = c->a53_to_sramc_offset(start_addr);
+	end_offset = c->a53_to_sramc_offset(end_addr);
 
-	clear_sramc_range(&ssramc, 0x0, SSRAM_MAX_ADDR);
+	clear_sramc_range(base, start_offset, end_offset);
+}
+
+void s32_ssram_clear(void)
+{
+	clear_sramc_range(SSRAMC_BASE_ADDR, 0x0, SSRAM_MAX_ADDR);
 }
 
 int s32_sram_clear(uintptr_t start, uintptr_t end)
@@ -107,26 +114,19 @@ int s32_sram_clear(uintptr_t start, uintptr_t end)
 
 	clear_unaligned_ends(&start, &end);
 
-	/* To bus addresses */
-	start = a53_to_sramc_addr(start);
-	end = a53_to_sramc_addr(end);
-
 	s32_get_sramc(&ctrls, &n_ctrls);
 
 	for (i = 0u; i < n_ctrls; i++) {
 		c = &ctrls[i];
 
-		if (!in_overlap(start, end, c->min_addr, c->max_addr))
+		if (!in_overlap(start, end, c->min_sram_addr, c->max_sram_addr))
 			continue;
 
 		/* Adapt the range to current controller */
-		s = MAX(start, (uintptr_t)c->min_addr);
-		e = MIN(end, (uintptr_t)c->max_addr);
-
-		s -= c->min_addr;
-		e -= c->min_addr;
+		s = MAX(start, (uintptr_t)c->min_sram_addr);
+		e = MIN(end, (uintptr_t)c->max_sram_addr);
 
-		clear_sramc_range(c, s, e);
+		clear_sram_range(c, s, e);
 	}
 
 	return 0;
-- 
2.17.1

