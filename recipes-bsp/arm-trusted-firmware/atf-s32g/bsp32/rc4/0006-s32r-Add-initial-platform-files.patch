From e29e46601ba28f517e5e2f6d8a7196743dabc791 Mon Sep 17 00:00:00 2001
From: Andra-Teodora Ilie <andra.ilie@nxp.com>
Date: Wed, 10 Nov 2021 12:07:38 +0200
Subject: [PATCH 06/50] s32r: Add initial platform files

Minimium callbacks to be implemented.

Issue: ALB-7411
Upstream-Status: Pending 

Signed-off-by: Andra-Teodora Ilie <andra.ilie@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 fdts/fsl-s32r45-evb.dts                  | 14 +++++++++
 plat/nxp/s32/s32r/include/platform_def.h | 36 ++++++++++++++++++++++++
 plat/nxp/s32/s32r/platform.mk            | 25 ++++++++++++++++
 plat/nxp/s32/s32r/s32r_bl2_el3.c         | 30 ++++++++++++++++++++
 plat/nxp/s32/s32r/s32r_bl31.c            | 28 ++++++++++++++++++
 plat/nxp/s32/s32r/s32r_psci.c            | 21 ++++++++++++++
 6 files changed, 154 insertions(+)
 create mode 100644 fdts/fsl-s32r45-evb.dts
 create mode 100644 plat/nxp/s32/s32r/include/platform_def.h
 create mode 100644 plat/nxp/s32/s32r/platform.mk
 create mode 100644 plat/nxp/s32/s32r/s32r_bl2_el3.c
 create mode 100644 plat/nxp/s32/s32r/s32r_bl31.c
 create mode 100644 plat/nxp/s32/s32r/s32r_psci.c

diff --git a/fdts/fsl-s32r45-evb.dts b/fdts/fsl-s32r45-evb.dts
new file mode 100644
index 000000000..41b532596
--- /dev/null
+++ b/fdts/fsl-s32r45-evb.dts
@@ -0,0 +1,14 @@
+/*
+ * Copyright 2021 NXP
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ */
+
+/dts-v1/;
+
+
+/{
+	model = "NXP S32R45";
+	compatible = "fsl,s32r45", "fsl,s32gen1";
+};
+
diff --git a/plat/nxp/s32/s32r/include/platform_def.h b/plat/nxp/s32/s32r/include/platform_def.h
new file mode 100644
index 000000000..7870386de
--- /dev/null
+++ b/plat/nxp/s32/s32r/include/platform_def.h
@@ -0,0 +1,36 @@
+/*
+ * Copyright 2021 NXP
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ */
+#ifndef S32R_PLATFORM_DEF_H
+#define S32R_PLATFORM_DEF_H
+
+#include <s32_platform_def.h>
+
+#define PLATFORM_CORE_COUNT		4
+#define PLAT_GICR_BASE			(S32GEN1_GIC_BASE + 0x80000)
+
+#define S32_MPIDR_CPU_MASK		0x1
+#define S32_MPIDR_CPU_MASK_BITS	0x1
+
+/* FIXME - might be common for G&R */
+#define MAX_MMAP_REGIONS		8
+#define MAX_XLAT_TABLES			4
+
+#define S32_SRAM_SIZE		0x00800000
+
+#if defined IMAGE_BL1
+/* To use in blX_platform_setup() */
+#define FIRMWARE_WELCOME_STR_S32R	"This is S32R BL1\n"
+#pragma warning "BL1 image is being built; you should configure it out."
+#endif
+
+#if defined IMAGE_BL31
+#define FIRMWARE_WELCOME_STR_S32R_BL31	"This is S32R BL31\n"
+#endif
+
+/* Off-Chasis */
+#define SIUL2_1_BASE_ADDR	0x4403C000UL
+
+#endif /* S32_PLATFORM_H */
diff --git a/plat/nxp/s32/s32r/platform.mk b/plat/nxp/s32/s32r/platform.mk
new file mode 100644
index 000000000..46ede8b3d
--- /dev/null
+++ b/plat/nxp/s32/s32r/platform.mk
@@ -0,0 +1,25 @@
+#
+# Copyright 2021 NXP
+#
+# SPDX-License-Identifier: BSD-3-Clause
+#
+
+include plat/nxp/s32/s32_common.mk
+
+PLAT_INCLUDES	+=	-Iplat/nxp/s32/s32r/include \
+					-Iplat/nxp/s32/include \
+
+PLAT_BL_COMMON_SOURCES += plat/nxp/s32/s32gen1_sramc.c \
+
+BL2_SOURCES 	+=  \
+	plat/nxp/s32/s32r/s32r_bl2_el3.c \
+
+BL31_SOURCES += \
+	       plat/nxp/s32/s32r/s32r_bl31.c \
+		   plat/nxp/s32/s32r/s32r_psci.c \
+
+# Which LinFlexD to use as a UART device
+S32_LINFLEX_MODULE := 0
+$(eval $(call add_define_val,S32_LINFLEX_MODULE,$(S32_LINFLEX_MODULE)))
+
+DTB_FILE_NAME		?= fsl-s32r45-evb.dtb
\ No newline at end of file
diff --git a/plat/nxp/s32/s32r/s32r_bl2_el3.c b/plat/nxp/s32/s32r/s32r_bl2_el3.c
new file mode 100644
index 000000000..6f22dc904
--- /dev/null
+++ b/plat/nxp/s32/s32r/s32r_bl2_el3.c
@@ -0,0 +1,30 @@
+/*
+ * Copyright 2021 NXP
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ */
+#include <common/desc_image_load.h>
+#include <lib/libc/errno.h>
+
+static bl_mem_params_node_t s32r_bl2_mem_params_descs[2];
+REGISTER_BL_IMAGE_DESCS(s32r_bl2_mem_params_descs)
+
+
+void bl2_el3_early_platform_setup(u_register_t arg0, u_register_t arg1,
+				  u_register_t arg2, u_register_t arg3)
+{
+	__asm__ volatile("b .");
+}
+
+void bl2_el3_plat_arch_setup(void)
+{
+	__asm__ volatile("b .");
+}
+
+int plat_get_image_source(unsigned int image_id, uintptr_t *dev_handle,
+			  uintptr_t *image_spec)
+{
+	__asm__ volatile("b .");
+	return -EINVAL;
+}
+
diff --git a/plat/nxp/s32/s32r/s32r_bl31.c b/plat/nxp/s32/s32r/s32r_bl31.c
new file mode 100644
index 000000000..8f195487e
--- /dev/null
+++ b/plat/nxp/s32/s32r/s32r_bl31.c
@@ -0,0 +1,28 @@
+/*
+ * Copyright 2021 NXP
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ */
+#include <plat/common/platform.h>
+
+void bl31_early_platform_setup2(u_register_t arg0, u_register_t arg1,
+		u_register_t arg2, u_register_t arg3)
+{
+	__asm__ volatile("b .");
+}
+
+void bl31_plat_arch_setup(void)
+{
+	__asm__ volatile("b .");
+}
+
+void bl31_platform_setup(void)
+{
+	__asm__ volatile("b .");
+}
+
+entry_point_info_t *bl31_plat_get_next_image_ep_info(uint32_t type)
+{
+	__asm__ volatile("b .");
+	return NULL;
+}
diff --git a/plat/nxp/s32/s32r/s32r_psci.c b/plat/nxp/s32/s32r/s32r_psci.c
new file mode 100644
index 000000000..85eb8bfbd
--- /dev/null
+++ b/plat/nxp/s32/s32r/s32r_psci.c
@@ -0,0 +1,21 @@
+/*
+ * Copyright 2021 NXP
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ */
+#include <plat/common/platform.h>
+
+const unsigned char *plat_get_power_domain_tree_desc(void)
+{
+	__asm__ volatile("b .");
+	return NULL;
+}
+
+int plat_setup_psci_ops(uintptr_t sec_entrypoint,
+			const plat_psci_ops_t **psci_ops)
+{
+	__asm__ volatile("b .");
+
+	return 0;
+}
+
-- 
2.17.1

