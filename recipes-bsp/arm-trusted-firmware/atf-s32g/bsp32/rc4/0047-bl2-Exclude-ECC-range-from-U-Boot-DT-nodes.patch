From 1e6d2cc5ba5ced153e3e5aa7ea23d2a812f99233 Mon Sep 17 00:00:00 2001
From: Andrei Cherechesu <andrei.cherechesu@nxp.com>
Date: Thu, 3 Feb 2022 12:26:03 +0200
Subject: [PATCH 47/50] bl2: Exclude ECC range from U-Boot DT nodes

Added a ft_fixup function to read each memory node
from U-Boot's DT, check if the ranges are correct based
on the DRAM controller registers and the ECC feature being
enabled or not, and update the ranges with the correct ones.

U-Boot will parse the DT with the memory nodes as modified by
ATF, and no longer run the ECC exclusion algorithm.

Issue: ALB-8325
Upstream-Status: Pending 

Signed-off-by: Andrei Cherechesu <andrei.cherechesu@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 plat/nxp/s32/s32_bl2_el3.c | 66 ++++++++++++++++++++++++++++++++++++++
 1 file changed, 66 insertions(+)

diff --git a/plat/nxp/s32/s32_bl2_el3.c b/plat/nxp/s32/s32_bl2_el3.c
index 7f57c28da..59ac40459 100644
--- a/plat/nxp/s32/s32_bl2_el3.c
+++ b/plat/nxp/s32/s32_bl2_el3.c
@@ -9,6 +9,8 @@
 #include <common/debug.h>
 #include <common/desc_image_load.h>
 #include <common/fdt_fixup.h>
+#include <common/fdt_wrappers.h>
+#include <ddr/ddr_density.h>
 #include <ddr/ddr_utils.h>
 #include <lib/libc/errno.h>
 #include <lib/libfdt/libfdt.h>
@@ -37,6 +39,8 @@
 #define FCCU_NCFK			(FCCU_BASE_ADDR + 0x90)
 #define FCCU_NCFK_KEY		(0xAB3498FE)
 
+#define MEMORY_STRING		"memory"
+
 void add_fip_img_to_mem_params_descs(bl_mem_params_node_t *params,
 					    size_t *index)
 {
@@ -476,6 +480,63 @@ static int ft_fixup_resmem_node(void *blob)
 	return 0;
 }
 
+static int ft_fixup_exclude_ecc(void *blob)
+{
+	int ret, nodeoff = -1;
+	bool found_first_node = false;
+	unsigned long start = 0, size = 0;
+	const char *node_name;
+
+	/* Get offset of memory node */
+	while ((nodeoff = fdt_node_offset_by_prop_value(blob, nodeoff,
+			"device_type", MEMORY_STRING,
+			sizeof(MEMORY_STRING))) >= 0) {
+		found_first_node = true;
+
+		node_name = fdt_get_name(blob, nodeoff, NULL);
+
+		/* Get value of "reg" property */
+		ret = fdt_get_reg_props_by_index(blob, nodeoff, 0, &start, &size);
+		if (ret) {
+			ERROR("Couldn't get 'reg' property values of %s node\n",
+				node_name);
+			return ret;
+		}
+
+		s32gen1_exclude_ecc(&start, &size);
+
+		/* Delete old "reg" property */
+		ret = fdt_delprop(blob, nodeoff, "reg");
+		if (ret) {
+			ERROR("Failed to remove 'reg' property of '%s' node\n",
+				node_name);
+			return ret;
+		}
+
+		/* Write newly-computed "reg" property values back to DT */
+		ret = fdt_setprop_u64(blob, nodeoff, "reg", start);
+		if (ret < 0) {
+			ERROR("Cannot write 'reg' property of '%s' node\n",
+				node_name);
+			return ret;
+		}
+
+		ret = fdt_appendprop_u64(blob, nodeoff, "reg", size);
+		if (ret < 0) {
+			ERROR("Cannot write 'reg' property of '%s' node\n",
+				node_name);
+			return ret;
+		}
+	}
+
+	if (nodeoff < 0 && !found_first_node) {
+		ERROR("No memory node found\n");
+		return nodeoff;
+	}
+
+	return 0;
+}
+
 static int ft_fixups(void *blob)
 {
 	size_t size = fdt_totalsize(blob);
@@ -496,6 +557,11 @@ static int ft_fixups(void *blob)
 
 	ret = ft_fixup_resmem_node(blob);
 
+	if (ret)
+		goto out;
+
+	ret = ft_fixup_exclude_ecc(blob);
+
 out:
 	flush_dcache_range((uintptr_t)blob, size);
 	return ret;
-- 
2.17.1

