From b34e72f34b64bcf89dfa5c9ce67faec61bcd63c9 Mon Sep 17 00:00:00 2001
From: Ghennadi Procopciuc <ghennadi.procopciuc@nxp.com>
Date: Fri, 22 Oct 2021 16:01:45 +0300
Subject: [PATCH 01/14] s32g: Define an array that can be used as temporary
 stack

This is needed for the cases when C code is called from
section where stack is not initialized / defined yet.

Issue: ALB-8002
Upstream-Status: Pending 

Signed-off-by: Ghennadi Procopciuc <ghennadi.procopciuc@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 plat/nxp/s32/s32g/bl31_ssram/bl31_ssram.mk |  1 +
 plat/nxp/s32/s32g/include/plat_macros.S    | 58 +++++++++++++++++++++-
 plat/nxp/s32/s32g/s32g_linflexuart_crash.S | 57 ++++-----------------
 plat/nxp/s32/s32g/s32g_lowlevel_common.S   | 18 ++++++-
 4 files changed, 84 insertions(+), 50 deletions(-)

diff --git a/plat/nxp/s32/s32g/bl31_ssram/bl31_ssram.mk b/plat/nxp/s32/s32g/bl31_ssram/bl31_ssram.mk
index 636875c27..af60bef3a 100644
--- a/plat/nxp/s32/s32g/bl31_ssram/bl31_ssram.mk
+++ b/plat/nxp/s32/s32g/bl31_ssram/bl31_ssram.mk
@@ -9,6 +9,7 @@ BL31SSRAM_SOURCES =  plat/nxp/s32/s32g/bl31_ssram/bl31ssram_stacks.S \
 		     plat/nxp/s32/s32g/bl31_ssram/bl31ssram_main.c \
 		     plat/nxp/s32/s32g/bl31_ssram/ddr_clk.c \
 		     plat/nxp/s32/s32g/s32g_clocks.c \
+		     plat/nxp/s32/s32g/s32g_lowlevel_common.S \
 		     plat/nxp/s32/s32g/s32g_mc_me.c \
 		     plat/nxp/s32/s32g/s32g_linflexuart.c \
 		     plat/nxp/s32/s32g/s32g_linflexuart_crash.S \
diff --git a/plat/nxp/s32/s32g/include/plat_macros.S b/plat/nxp/s32/s32g/include/plat_macros.S
index a84f5996a..7f696683c 100644
--- a/plat/nxp/s32/s32g/include/plat_macros.S
+++ b/plat/nxp/s32/s32g/include/plat_macros.S
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 NXP
+ * Copyright 2019-2021 NXP
  *
  * SPDX-License-Identifier: BSD-3-Clause
  */
@@ -9,6 +9,15 @@
 
 #include <asm_macros.S>
 
+#ifndef S32G_CRASH_STACK_SIZE
+#define S32G_CRASH_STACK_SIZE	0x400
+#endif
+
+#define S32G_STACK_GUARD	0xDEAD
+
+.extern s32_plat_data_stack
+.extern s32_crash_reg_stash
+
 /* ---------------------------------------------
  * The below required platform porting macro
  * prints out relevant GIC and CCI registers
@@ -20,4 +29,51 @@
 .macro plat_crash_print_regs
 .endm
 
+/**
+ * Save intra-procedure-call scratch, frame pointer and
+ * link registers (x16, x17, x29, x30)
+ *
+ * Clobbers: reg1, reg2
+ */
+.macro	s32_save_regs reg1=x9, reg2=x10
+	mov	\reg1, sp
+	adrp	\reg2, s32_crash_reg_stash
+	add	\reg2, \reg2, :lo12:s32_crash_reg_stash
+	stp	x16, x17, [\reg2]
+	stp	x29, x30, [\reg2, #16]
+.endm
+
+/**
+ * Restore intra-procedure-call scratch, frame pointer
+ * and link registers (x16, x17, x29, x30)
+ *
+ * Clobbers: reg1, reg2
+ */
+.macro	s32_restore_regs reg1=x9, reg2=x10
+	adrp	\reg2, s32_crash_reg_stash
+	add	\reg2, \reg2, :lo12:s32_crash_reg_stash
+	ldp	x16, x17, [\reg2]
+	ldp	x29, x30, [\reg2, #16]
+	mov	sp, \reg1
+.endm
+
+.macro	s32_init_local_stack
+	mov	w10, #S32G_STACK_GUARD
+	adrp	x9, s32_plat_data_stack
+	add	x9, x9, :lo12:s32_plat_data_stack
+	/* Color the end of the stack */
+	str	w10, [x9]
+	add	x9, x9, #S32G_CRASH_STACK_SIZE
+	mov	sp, x9
+.endm
+
+.macro s32_check_stack_guard
+	mov	w10, #S32G_STACK_GUARD
+	adrp	x9, s32_plat_data_stack
+	add	x9, x9, :lo12:s32_plat_data_stack
+	ldrh	w9, [x9]
+	cmp	w9, w10
+	b.ne	plat_panic_handler
+.endm
+
 #endif /* __PLAT_MACROS_S__ */
diff --git a/plat/nxp/s32/s32g/s32g_linflexuart_crash.S b/plat/nxp/s32/s32g/s32g_linflexuart_crash.S
index 213e47f8e..adb53c975 100644
--- a/plat/nxp/s32/s32g/s32g_linflexuart_crash.S
+++ b/plat/nxp/s32/s32g/s32g_linflexuart_crash.S
@@ -5,74 +5,35 @@
  */
 
 #include <asm_macros.S>
+#include <plat_macros.S>
 
 .globl	plat_crash_console_init
 .globl	plat_crash_console_putc
 .globl	plat_crash_console_flush
 
-#ifndef S32G_CRASH_STACK_SIZE
-#define S32G_CRASH_STACK_SIZE	0x400
-#endif
-
-/**
- * Use a local buffer as stack for Linflex crash callbacks
- */
-.section .data.s32g_plat_crash_stack
-	.balign 16
-	s32g_plat_crash_stack: .skip S32G_CRASH_STACK_SIZE
-
-.section .data.crash_console_reg_stash
-	.align 3
-	crash_console_reg_stash: .quad 0, 0, 0, 0, 0, 0
-
-/* Save scratch & link registers and stack pointer */
-.macro	save_regs
-	mov	x2, sp
-	adrp	x1, crash_console_reg_stash
-	add	x1, x1, :lo12:crash_console_reg_stash
-	stp	x14, x15, [x1]
-	stp	x16, x17, [x1, #16]
-	stp	x30, x2, [x1, #32]
-.endm
-
-/* Restore scratch & link registers and stack pointer */
-.macro	restore_regs
-	adrp	x1, crash_console_reg_stash
-	add	x1, x1, :lo12:crash_console_reg_stash
-	ldp	x14, x15, [x1]
-	ldp	x16, x17, [x1, #16]
-	ldp	x30, x2, [x1, #32]
-	mov	sp, x2
-.endm
-
-.macro	init_local_stack
-	adrp	x1, s32g_plat_crash_stack
-	add	x1, x1, :lo12:s32g_plat_crash_stack
-	add	x1, x1, #S32G_CRASH_STACK_SIZE
-	mov	sp, x1
-.endm
-
 func plat_crash_console_init
 	mov	x0, #1
 	ret
 endfunc plat_crash_console_init
 
 func plat_crash_console_putc
-	save_regs
-	init_local_stack
+	s32_save_regs
+	s32_init_local_stack
 
 	bl s32g_plat_crash_console_putc
 
-	restore_regs
+	s32_check_stack_guard
+	s32_restore_regs
 	ret
 endfunc plat_crash_console_putc
 
 func plat_crash_console_flush
-	save_regs
-	init_local_stack
+	s32_save_regs
+	s32_init_local_stack
 
 	bl s32g_plat_crash_console_flush
 
-	restore_regs
+	s32_check_stack_guard
+	s32_restore_regs
 	ret
 endfunc plat_crash_console_flush
diff --git a/plat/nxp/s32/s32g/s32g_lowlevel_common.S b/plat/nxp/s32/s32g/s32g_lowlevel_common.S
index 5bd765441..5024dd142 100644
--- a/plat/nxp/s32/s32g/s32g_lowlevel_common.S
+++ b/plat/nxp/s32/s32g/s32g_lowlevel_common.S
@@ -6,8 +6,9 @@
 
 #include <asm_macros.S>
 #include <console_macros.S>
-#include "platform_def.h"
 #include <lib/utils_def.h>
+#include <plat_macros.S>
+#include <platform_def.h>
 
 .globl plat_is_my_cpu_primary
 .globl plat_my_core_pos
@@ -15,6 +16,20 @@
 .globl plat_panic_handler
 .globl s32g_ncore_isol_cluster0
 .globl reset_registers_for_lockstep
+.globl s32_plat_data_stack
+.globl s32_crash_reg_stash
+
+/**
+ * Use a local buffer as stack for Linflex crash callbacks and SRAM
+ * initialization
+ */
+.section .data.s32_plat_data_stack
+	.balign 16
+	s32_plat_data_stack: .skip S32G_CRASH_STACK_SIZE
+
+.section .data.s32_crash_reg_stash
+	.align 3
+	s32_crash_reg_stash: .quad 0, 0, 0, 0
 
 func plat_panic_handler
 	wfi
@@ -132,3 +147,4 @@ func reset_registers_for_lockstep
 
 	ret
 endfunc reset_registers_for_lockstep
+
-- 
2.17.1

