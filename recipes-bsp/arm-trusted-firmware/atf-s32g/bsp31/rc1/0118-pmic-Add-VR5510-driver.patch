From 63e03926058c8907e4c35b6a3da44be966e8e6d5 Mon Sep 17 00:00:00 2001
From: Ghennadi Procopciuc <Ghennadi.Procopciuc@nxp.com>
Date: Wed, 6 May 2020 15:10:09 +0300
Subject: [PATCH 118/269] pmic: Add VR5510 driver

Issue: ALB-4907
Upstream-Status: Pending 

Signed-off-by: Ghennadi Procopciuc <Ghennadi.Procopciuc@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 drivers/nxp/s32g/pmic/vr5510.c         | 234 +++++++++++++++++++++++++
 include/drivers/nxp/s32g/pmic/vr5510.h | 132 ++++++++++++++
 2 files changed, 366 insertions(+)
 create mode 100644 drivers/nxp/s32g/pmic/vr5510.c
 create mode 100644 include/drivers/nxp/s32g/pmic/vr5510.h

diff --git a/drivers/nxp/s32g/pmic/vr5510.c b/drivers/nxp/s32g/pmic/vr5510.c
new file mode 100644
index 000000000..181d49fc6
--- /dev/null
+++ b/drivers/nxp/s32g/pmic/vr5510.c
@@ -0,0 +1,234 @@
+// SPDX-License-Identifier: GPL-2.0+ OR BSD-3-Clause
+/*
+ * Copyright 2020 NXP
+ */
+#include <common/debug.h>
+#include <endian.h>
+#include <errno.h>
+#include <lib/crc8.h>
+#include <lib/utils_def.h>
+#include <libfdt.h>
+#include <stdint.h>
+#include <stdlib.h>
+
+#include "pmic/vr5510.h"
+#include "s32g_dt.h"
+
+#define VR5510_ADDR_SIZE	2
+#define VR5510_REG_SIZE		2
+#define VR5510_CRC_SIZE		1
+
+#define VR5510_CRC_POLY		0x1Du
+#define VR5510_CRC_SEED		0xFFu
+
+#define DEV_ADDR_MASK		0xFE00U
+#define DEV_ADDR_SHIFT		9
+#define DEV_RW_MASK		0x100U
+#define DEV_RW_SHIFT		8
+
+/* Includes zeros from 8-6 */
+#define REG_ADDR_MASK		0xFF
+#define REG_ADDR_SHIFT		0
+
+#define VR5510_M_LVB1_STBY_DVS_ID	17
+#define VR5510_M_MEMORY0_ID		41
+
+#define VF5510_MU_N_REGS		43
+#define VF5510_FSU_N_REGS		24
+
+#define VR5510_ADDRESS_LENGTH		1
+
+#define MAX_VR5510_INSTANCES 2
+
+struct vr5510_inst {
+	struct dt_node_info dt_info;
+	struct s32g_i2c_bus *bus;
+	const char *name;
+	int fdt_offset;
+	uint8_t chip;
+};
+
+static struct vr5510_inst instances[MAX_VR5510_INSTANCES];
+static size_t fill_level;
+
+struct read_msg {
+	uint16_t address;
+	uint16_t data;
+	uint8_t crc;
+};
+
+static bool is_mu(struct vr5510_inst *dev)
+{
+	if (dev->chip & 1)
+		return false;
+
+	return true;
+}
+
+static bool valid_register(struct vr5510_inst *dev, uint8_t reg)
+{
+	/* There are no gaps in FSU */
+	if (!is_mu(dev))
+		return true;
+
+	if (reg > VR5510_M_LVB1_STBY_DVS_ID && reg < VR5510_M_MEMORY0_ID)
+		return false;
+
+	return true;
+}
+
+static void set_dev_addr(struct read_msg *m, uint8_t addr)
+{
+	m->address &= ~DEV_ADDR_MASK;
+	m->address |= (addr << DEV_ADDR_SHIFT);
+}
+
+static void set_rw(struct read_msg *m, bool read)
+{
+	m->address &= ~DEV_RW_MASK;
+	if (read)
+		m->address |= DEV_RW_MASK;
+}
+
+static void set_reg_addr(struct read_msg *m, uint8_t addr)
+{
+	m->address &= ~REG_ADDR_MASK;
+	m->address |= (addr << REG_ADDR_SHIFT);
+}
+
+static int vr5510_i2c_read(struct vr5510_inst *dev, uint8_t reg,
+			   uint8_t *data, size_t len)
+{
+	return s32g_i2c_read(dev->bus, dev->chip, reg,
+			     VR5510_ADDRESS_LENGTH, data, len);
+}
+
+static int vr5510_i2c_write(struct vr5510_inst *dev, uint8_t reg,
+			    uint8_t *data, size_t len)
+{
+	return s32g_i2c_write(dev->bus, dev->chip, reg,
+			      VR5510_ADDRESS_LENGTH, data, len);
+}
+
+int vr5510_read(struct vr5510_inst *dev, uint8_t reg, uint8_t *buff, int len)
+{
+	unsigned int crc;
+	struct read_msg msg;
+
+	if (!valid_register(dev, reg)) {
+		ERROR("Invalid vr5510 register %d\n", reg);
+		return -EIO;
+	}
+
+	set_dev_addr(&msg, dev->chip);
+	set_rw(&msg, true);
+	set_reg_addr(&msg, reg);
+	msg.address = bswap16(msg.address);
+
+	if (vr5510_i2c_read(dev, reg, (uint8_t *)&msg.data,
+			VR5510_REG_SIZE + VR5510_CRC_SIZE)) {
+		ERROR("read error from device: %p register: %#x!\n", dev, reg);
+		return -EIO;
+	}
+
+	crc = crc8poly(VR5510_CRC_SEED, VR5510_CRC_POLY,
+		       (const unsigned char *)&msg,
+		       VR5510_ADDR_SIZE + VR5510_REG_SIZE);
+
+	if (crc != msg.crc) {
+		ERROR("read error from device: %p register: %#x!\n", dev, reg);
+		return -EIO;
+	}
+
+	*(uint16_t *)buff = bswap16(msg.data);
+
+	return 0;
+}
+
+int vr5510_write(struct vr5510_inst *dev, uint8_t reg,
+		 const uint8_t *buff, int len)
+{
+	struct read_msg msg;
+
+	if (!valid_register(dev, reg)) {
+		ERROR("Invalid vr5510 register %d\n", reg);
+		return -EIO;
+	}
+
+	set_dev_addr(&msg, dev->chip);
+	set_rw(&msg, false);
+	set_reg_addr(&msg, reg);
+	msg.data = bswap16(*(uint16_t *)buff);
+	msg.address = bswap16(msg.address);
+
+	msg.crc = crc8poly(VR5510_CRC_SEED, VR5510_CRC_POLY,
+			   (const unsigned char *)&msg,
+			   VR5510_ADDR_SIZE + VR5510_REG_SIZE);
+
+	if (vr5510_i2c_write(dev, reg, (uint8_t *)&msg.data,
+			 VR5510_REG_SIZE + VR5510_CRC_SIZE)) {
+		ERROR("write error to device: %p register: %#x!\n", dev, reg);
+		return -EIO;
+	}
+
+	return 0;
+}
+
+int vr5510_get_inst(const char *name, vr5510_t *inst)
+{
+	size_t i;
+	size_t len = strlen(name);
+
+	for (i = 0; i < fill_level; i++) {
+		*inst = &instances[i];
+		if (strncmp(name, (*inst)->name, len))
+			continue;
+
+		if ((*inst)->name[len] != '@')
+			continue;
+
+		return 0;
+	}
+
+	*inst = NULL;
+	return -1;
+}
+
+int vr5510_register_instance(void *fdt, int fdt_offset,
+			     struct s32g_i2c_bus *bus)
+{
+	size_t i;
+	struct vr5510_inst *inst;
+	const fdt32_t *reg_ptr;
+
+	for (i = 0; i < fill_level; i++) {
+		if (instances[i].fdt_offset == fdt_offset)
+			return 0;
+	}
+
+	if (fill_level >= ARRAY_SIZE(instances)) {
+		ERROR("Discovered too many instances of VR5510\n");
+		return -ENOMEM;
+	}
+
+	inst = &instances[fill_level];
+
+	/* Register active nodes only */
+	dt_fill_device_info(&inst->dt_info, fdt_offset);
+	if (inst->dt_info.status != DT_ENABLED)
+		return -1;
+
+	reg_ptr = fdt_getprop(fdt, fdt_offset, "reg", NULL);
+	if (!reg_ptr) {
+		ERROR("\"reg\" property is mandatory\n");
+		return -EIO;
+	}
+
+	inst->chip = fdt32_to_cpu(*reg_ptr);
+	inst->name = fdt_get_name(fdt, fdt_offset, NULL);
+	inst->bus = bus;
+	inst->fdt_offset = fdt_offset;
+
+	fill_level++;
+	return 0;
+}
diff --git a/include/drivers/nxp/s32g/pmic/vr5510.h b/include/drivers/nxp/s32g/pmic/vr5510.h
new file mode 100644
index 000000000..ad24e50e5
--- /dev/null
+++ b/include/drivers/nxp/s32g/pmic/vr5510.h
@@ -0,0 +1,132 @@
+// SPDX-License-Identifier: GPL-2.0+ OR BSD-3-Clause
+/*
+ * Copyright 2020 NXP
+ */
+#ifndef VR5510_PMIC_H
+#define VR5510_PMIC_H
+
+#include <lib/utils_def.h>
+#include "i2c/s32g274a_i2c.h"
+
+#define VR5510_MU_NAME		"vr5510"
+#define VR5510_FSU_NAME		"vr5510_fsu"
+
+#define VR5510_M_FLAG		0
+#define VR5510_M_MODE		1
+
+/* Main Unit */
+#define VR5510_M_SM_CTRL1	2
+#define VR5510_CTRL1_STBY_TIMER_EN	BIT(10)
+#define VR5510_CTRL1_TIMER_STBY_WIN(N)	((N) << 12)
+#define VR5510_CTRL1_TIMER_16MS		VR5510_CTRL1_TIMER_STBY_WIN(0)
+#define VR5510_CTRL1_TIMER_32MS		VR5510_CTRL1_TIMER_STBY_WIN(1)
+#define VR5510_CTRL1_TIMER_128MS	VR5510_CTRL1_TIMER_STBY_WIN(2)
+#define VR5510_CTRL1_TIMER_512MS	VR5510_CTRL1_TIMER_STBY_WIN(3)
+#define VR5510_CTRL1_TIMER_1024MS	VR5510_CTRL1_TIMER_STBY_WIN(4)
+#define VR5510_CTRL1_TIMER_4096MS	VR5510_CTRL1_TIMER_STBY_WIN(5)
+
+#define VR5510_M_REG_CTRL1	3
+#define VR5510_M_REG_CTRL2	4
+
+#define VR5510_M_REG_CTRL3	5
+#define VR5510_CTRL3_BUCK1_STBY		BIT(0)
+#define VR5510_CTRL3_BUCK2_STBY		BIT(2)
+#define VR5510_CTRL3_BUCK3_STBY		BIT(4)
+#define VR5510_CTRL3_VPREV_STBY		BIT(6)
+#define VR5510_CTRL3_HVLDO_STBY		BIT(8)
+#define VR5510_CTRL3_LDO1_STBY		BIT(10)
+#define VR5510_CTRL3_LDO2_STBY		BIT(12)
+#define VR5510_CTRL3_LDO3_STBY		BIT(14)
+
+#define VR5510_M_TSD_CFG	6
+#define VR5510_M_AMUX		7
+#define VR5510_M_CLOCK1		8
+
+#define VR5510_M_CLOCK2		9
+#define VR5510_M_CLOCK2_100KHZ	0
+#define VR5510_M_CLOCK2_300KHZ	2
+#define VR5510_M_CLOCK2_600KHZ	3
+
+#define VR5510_M_INT_MASK1	10
+#define VR5510_M_INT_MASK2	11
+
+#define VR5510_M_FLAG1		12
+#define VR5510_FLAG1_ALL_FLAGS	0xBFFF
+
+#define VR5510_M_FLAG2		13
+#define VR5510_FLAG2_ALL_FLAGS	0xFFFF
+
+#define VR5510_M_FLAG3		14
+#define VR5510_FLAG3_I2C_M_REQ		BIT(0)
+#define VR5510_FLAG3_I2C_M_CRC		BIT(1)
+
+#define VR5510_M_VMON_REGX	15
+#define VR5510_M_LVB1_SVS	16
+#define VR5510_M_LVB1_STBY_DVS	17
+#define VR5510_M_MEMORY0	41
+#define VR5510_M_MEMORY1	42
+#define VR5510_M_DEVICEID	43
+
+/* Fail Safe unit */
+
+/* Used for all FS_I_NOT_* registers */
+#define VR5510_FS_I_NOT_VALUE(V)		(~(V) & 0xFFU)
+
+#define VR5510_FS_GRL_FLAGS			0
+#define VR5510_GRL_FLAGS_I2C_FS_REQ		BIT(5)
+#define VR5510_GRL_FLAGS_I2C_FS_CRC		BIT(6)
+
+#define VR5510_FS_I_OVUV_SAFE_REACTION1		1
+#define VR5510_FS_I_NOT_OVUV_SAFE_REACTION1	2
+#define VR5510_FS_I_OVUV_SAFE_REACTION2		3
+#define VR5510_FS_I_NOT_OVUV_SAFE_REACTION2	4
+#define VR5510_FS_I_ABIST2_CTRL			5
+#define VR5510_FS_I_NOT_ABIST2_CTRL		6
+#define VR5510_FS_I_WD_CFG			7
+#define VR5510_FS_I_NOT_WD_CFG			8
+
+#define VR5510_FS_I_SAFE_INPUTS			9
+#define VR5510_SAFE_INPUTS_TW_STBY_60US		0x4
+#define VR5510_SAFE_INPUTS_TW_STBY_80US		0x5
+#define VR5510_SAFE_INPUTS_TW_STBY_100US	0x6
+#define VR5510_SAFE_INPUTS_TW_STBY_200US	0x7
+#define VR5510_SAFE_INPUTS_TW_STBY_300US	0x8
+#define VR5510_SAFE_INPUTS_TW_STBY_500US	0x9
+#define VR5510_SAFE_INPUTS_TW_STBY_1MS		0xA
+#define VR5510_SAFE_INPUTS_TW_STBY_2MS		0xB
+#define VR5510_SAFE_INPUTS_TW_STBY_3MS		0xC
+#define VR5510_SAFE_INPUTS_TW_STBY_5MS		0xD
+#define VR5510_SAFE_INPUTS_TW_STBY_8MS		0xE
+#define VR5510_SAFE_INPUTS_TW_STBY_10MS		0xF
+
+#define VR5510_FS_I_NOT_SAFE_INPUTS		10
+#define VR5510_FS_I_FSSM			11
+#define VR5510_FS_I_NOT_FSSM			12
+#define VR5510_FS_I_SVS				13
+#define VR5510_FS_I_NOT_SVS			14
+#define VR5510_FS_WD_WINDOW			15
+#define VR5510_FS_NOT_WD_WINDOW			16
+#define VR5510_FS_WD_SEED			17
+#define VR5510_FS_WD_ANSWER			18
+#define VR5510_FS_OVUVREG_STATUS		19
+#define VR5510_FS_RELEASE_FS0B			20
+
+#define VR5510_FS_SAFE_IOS			21
+#define VR5510_SAFE_IOS_STBY_REQ		BIT(1)
+
+#define VR5510_FS_DIAG_SAFETY			22
+#define VR5510_FS_INTB_MASK			23
+#define VR5510_FS_STATES			24
+
+struct vr5510_inst;
+typedef struct vr5510_inst *vr5510_t;
+
+int vr5510_register_instance(void *fdt, int fdt_offset,
+			     struct s32g_i2c_bus *bus);
+
+int vr5510_get_inst(const char *name, vr5510_t *inst);
+int vr5510_read(vr5510_t dev, uint8_t reg, uint8_t *buff, int len);
+int vr5510_write(vr5510_t dev, uint8_t reg,
+		 const uint8_t *buff, int len);
+
+#endif
-- 
2.17.1

