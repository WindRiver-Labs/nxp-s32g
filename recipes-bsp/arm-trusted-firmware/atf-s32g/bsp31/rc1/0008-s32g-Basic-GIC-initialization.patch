From 5f0c03b231756529b88d69c988b1025c8edce70a Mon Sep 17 00:00:00 2001
From: Bogdan Hamciuc <bogdan.hamciuc@nxp.com>
Date: Fri, 28 Dec 2018 07:43:56 +0200
Subject: [PATCH 008/269] s32g: Basic GIC initialization

U-Boot in EL2 cannot performe secure GIC initializations, which are
therefore confined to the TF-A. Most notable, the Distributor interface
must be configured here in EL3.

Upstream-Status: Pending 

Signed-off-by: Bogdan Hamciuc <bogdan.hamciuc@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
Issue: ALB-3452
---
 plat/s32g/include/platform_def.h |  6 ++++
 plat/s32g/platform.mk            |  6 ++--
 plat/s32g/s32g275_bl31.c         | 52 +++++++++++++++++++++-----------
 plat/s32g/s32g_helpers.S         |  2 +-
 4 files changed, 45 insertions(+), 21 deletions(-)

diff --git a/plat/s32g/include/platform_def.h b/plat/s32g/include/platform_def.h
index 3253c309a..b834ebf56 100644
--- a/plat/s32g/include/platform_def.h
+++ b/plat/s32g/include/platform_def.h
@@ -48,6 +48,11 @@
 #define PLATFORM_MAX_CPU_PER_CLUSTER	4
 #define COUNTER_FREQUENCY		0x40000000 /* FXOSC */
 
+/* GIC (re)definitions, some from U-Boot's asm/gic.h and the s32gen1 config */
+#define S32G275_GIC_BASE	0x50800000
+#define PLAT_GICD_BASE		S32G275_GIC_BASE
+#define PLAT_GICR_BASE		(S32G275_GIC_BASE + 0x80000)
+
 /*
  * Platform memory map
  */
@@ -153,6 +158,7 @@ int console_s32g_register(uintptr_t baseaddr, uint32_t clock, uint32_t baud,
 int console_s32g_putc(int c, struct console_s32g *console);
 int console_s32g_flush(struct console_s32g *console);
 int xrdc_enable(void *xrdc_addr);
+int plat_core_pos_by_mpidr(u_register_t mpidr);
 void s32g_smp_fixup(void);
 #endif /* __ASSEMBLY__ */
 #endif /* PLATFORM_DEF_H */
diff --git a/plat/s32g/platform.mk b/plat/s32g/platform.mk
index f42229142..24af14c59 100644
--- a/plat/s32g/platform.mk
+++ b/plat/s32g/platform.mk
@@ -21,7 +21,9 @@ BL31_SOURCES		+= plat/s32g/s32g275_bl31.c \
 			   plat/s32g/s32g_psci.c \
 			   plat/common/plat_psci_common.c \
 			   plat/common/plat_gicv3.c \
-			   drivers/arm/gic/v3/gicv3_main.c
+			   drivers/arm/gic/v3/gicv3_main.c \
+			   drivers/arm/gic/v3/gicv3_helpers.c \
+			   drivers/arm/gic/common/gic_common.c
 BL31_SOURCES		+= lib/cpus/aarch64/cortex_a53.S
 
 
@@ -38,7 +40,7 @@ RESET_TO_BL31			:= 1
 COLD_BOOT_SINGLE_CPU		:= 0
 
 ### Devel & Debug options ###
-CFLAGS			+= -O0
+CFLAGS			+= -O2	# -O0 is likely to overflow the SRAM layout
 # Enable dump of processor register state upon exceptions while running BL31
 CRASH_REPORTING		:= 1
 # As verbose as it can be
diff --git a/plat/s32g/s32g275_bl31.c b/plat/s32g/s32g275_bl31.c
index d2143e09a..1b5d5e44f 100644
--- a/plat/s32g/s32g275_bl31.c
+++ b/plat/s32g/s32g275_bl31.c
@@ -8,6 +8,7 @@
 #include <assert.h>
 #include <bl_common.h>
 #include <psci.h>
+#include <drivers/arm/gicv3.h>
 #include "platform_def.h"
 #include "s32g_psci.h"
 
@@ -30,6 +31,10 @@ const unsigned char s32g_power_domain_tree_desc[] = {
 	PLATFORM_CORE_COUNT,
 };
 
+/* Declare it here to avoid including plat/common/platform.h */
+unsigned int plat_my_core_pos(void);
+
+
 static uint32_t s32g_get_spsr_for_bl33_entry(void)
 {
 	uint32_t spsr;
@@ -84,9 +89,37 @@ void bl31_plat_arch_setup(void)
 	s32g_smp_fixup();
 }
 
+static unsigned int plat_s32g275_mpidr_to_core_pos(unsigned long mpidr)
+{
+	return (unsigned int)plat_core_pos_by_mpidr(mpidr);
+}
+
+static uintptr_t rdistif_base_addrs[PLATFORM_CORE_COUNT];
+
+static const interrupt_prop_t interrupt_props[] = {
+	INTR_PROP_DESC(29, GIC_HIGHEST_SEC_PRIORITY,
+		       INTR_GROUP0, GIC_INTR_CFG_EDGE),
+};
+
+const gicv3_driver_data_t s32g275_gic_data = {
+	.gicd_base = PLAT_GICD_BASE,
+	.gicr_base = PLAT_GICR_BASE,
+	.rdistif_num = PLATFORM_CORE_COUNT,
+	.rdistif_base_addrs = rdistif_base_addrs,
+	.interrupt_props = interrupt_props,
+	.interrupt_props_num = ARRAY_SIZE(interrupt_props),
+	.mpidr_to_core_pos = plat_s32g275_mpidr_to_core_pos,
+};
+
 void bl31_platform_setup(void)
 {
-	/* TODO implement this further */
+#if IMAGE_BL31
+	gicv3_driver_init(&s32g275_gic_data);
+#endif
+
+	gicv3_distif_init();
+	gicv3_rdistif_init(plat_my_core_pos());
+	gicv3_cpuif_enable(plat_my_core_pos());
 }
 
 /* Last-minute modifications before exiting BL31:
@@ -106,23 +139,6 @@ void bl31_plat_runtime_setup(void)
 		ERROR("%s(): Error initializing XRDC!\n", __func__);
 }
 
-int plat_core_pos_by_mpidr(u_register_t mpidr)
-{
-	unsigned int cpu_id;
-
-	mpidr &= MPIDR_AFFINITY_MASK;
-
-	if (mpidr & ~(MPIDR_CLUSTER_MASK | MPIDR_CPU_MASK))
-		return -1;
-
-	cpu_id = MPIDR_AFFLVL0_VAL(mpidr);
-
-	if (cpu_id > PLATFORM_MAX_CPU_PER_CLUSTER)
-		return -1;
-
-	return cpu_id;
-}
-
 unsigned int plat_get_syscnt_freq2(void)
 {
 	return COUNTER_FREQUENCY;
diff --git a/plat/s32g/s32g_helpers.S b/plat/s32g/s32g_helpers.S
index 2daaa801b..746fd96a5 100644
--- a/plat/s32g/s32g_helpers.S
+++ b/plat/s32g/s32g_helpers.S
@@ -12,7 +12,7 @@
 .globl plat_secondary_cold_boot_setup
 .globl platform_mem_init
 .globl plat_my_core_pos
-.globl plat_my_core_pos
+.globl plat_core_pos_by_mpidr
 
 .globl console_s32g_register
 .globl console_s32g_putc
-- 
2.17.1

