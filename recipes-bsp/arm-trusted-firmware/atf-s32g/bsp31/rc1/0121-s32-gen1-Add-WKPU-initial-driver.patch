From 35c664b26f2b27f2bcf44d4b924df3a16dc01eab Mon Sep 17 00:00:00 2001
From: Ghennadi Procopciuc <Ghennadi.Procopciuc@nxp.com>
Date: Tue, 19 May 2020 07:05:49 +0300
Subject: [PATCH 121/269] s32-gen1: Add WKPU initial driver

Issue: ALB-4907
Upstream-Status: Pending 

Signed-off-by: Ghennadi Procopciuc <Ghennadi.Procopciuc@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 drivers/nxp/s32g/s32g_wkpu.c             | 148 +++++++++++++++++++++++
 fdts/s32g274aevb.dts                     |  11 ++
 include/drivers/nxp/s32g/s32gen1-wkpu.h  |  10 ++
 include/dt-bindings/reset/s32gen1-wkpu.h |  23 ++++
 plat/s32g/platform.mk                    |   3 +-
 plat/s32g/s32g274a_bl31.c                |  31 +++++
 6 files changed, 225 insertions(+), 1 deletion(-)
 create mode 100644 drivers/nxp/s32g/s32g_wkpu.c
 create mode 100644 include/drivers/nxp/s32g/s32gen1-wkpu.h
 create mode 100644 include/dt-bindings/reset/s32gen1-wkpu.h

diff --git a/drivers/nxp/s32g/s32g_wkpu.c b/drivers/nxp/s32g/s32g_wkpu.c
new file mode 100644
index 000000000..f20f15fb9
--- /dev/null
+++ b/drivers/nxp/s32g/s32g_wkpu.c
@@ -0,0 +1,148 @@
+// SPDX-License-Identifier: GPL-2.0+ OR BSD-3-Clause
+/*
+ * Copyright 2020 NXP
+ */
+#include <common/debug.h>
+#include <dt-bindings/reset/s32gen1-wkpu.h>
+#include <errno.h>
+#include <lib/mmio.h>
+#include <lib/utils_def.h>
+#include <libfdt.h>
+
+#include "s32g_dt.h"
+#include "s32gen1-wkpu.h"
+
+#define WKPU_RTC_IRQ		BIT(31)
+#define WKPU_INPUTS_MASK	(0x7FFFFF)
+
+#define WKUP_PUS_PU_OVERRIDE	BIT(31)
+
+#define WKPU_WBMSR		(0x10)
+#define WKPU_WISR		(0x14)
+#define WKPU_WISR_MASK		(0xFFFFFFFF)
+#define WKPU_IRER		(0x18)
+#define WKPU_WRER		(0x1C)
+#define WKPU_WIREER		(0x28)
+#define WKPU_WIFEER		(0x2C)
+#define WKPU_WIFER		(0x30)
+#define WKPU_WIFER_MASK		(0x7FFFFFFF)
+#define WKPU_WIPDER		(0x34)
+#define WKPU_WIPDER_MASK	(0x7FFFFFFF)
+
+struct s32gen1_wkpu {
+	struct dt_node_info dt_info;
+	uintptr_t gpr; /* WKPU GPR base address */
+	uint32_t irqs; /* Enabled IRQs */
+	uint32_t edges; /* Rising / Falling edges */
+	uint32_t pulls_en; /* Enabled pull resistors */
+	uint32_t pullups; /* Pull-ups / Pull-downs */
+};
+
+static void init_wkpu(struct s32gen1_wkpu *wkpu)
+{
+	uint32_t rising, falling;
+
+	rising = wkpu->edges & wkpu->irqs;
+	falling = ~(wkpu->edges) & wkpu->irqs;
+
+	/* Disable interrupts */
+	mmio_write_32(wkpu->dt_info.base + WKPU_IRER, 0x0);
+	mmio_write_32(wkpu->dt_info.base + WKPU_WRER, 0x0);
+
+	/* Clear all interrupts */
+	mmio_write_32(wkpu->dt_info.base + WKPU_WISR, WKPU_WISR_MASK);
+
+	/* Short boot */
+	mmio_write_32(wkpu->dt_info.base + WKPU_WBMSR, 0x0);
+
+	/* IRQs edges */
+	mmio_write_32(wkpu->dt_info.base + WKPU_WIREER, rising);
+	mmio_write_32(wkpu->dt_info.base + WKPU_WIFEER, falling);
+
+	/* Enable filters for all external inputs */
+	mmio_write_32(wkpu->dt_info.base + WKPU_WIFER, WKPU_WIFER_MASK);
+
+	/* Enable pull-up/pull-down resistors */
+	mmio_write_32(wkpu->gpr, WKUP_PUS_PU_OVERRIDE | wkpu->pullups);
+	mmio_write_32(wkpu->dt_info.base + WKPU_WIPDER,
+		      wkpu->pulls_en & WKPU_WIPDER_MASK);
+
+	/* Enable interrupts */
+	mmio_write_32(wkpu->dt_info.base + WKPU_IRER, wkpu->irqs);
+	mmio_write_32(wkpu->dt_info.base + WKPU_WRER, wkpu->irqs);
+}
+
+static int init_from_dt(void *fdt, int fdt_offset, struct s32gen1_wkpu *wkpu)
+{
+	const fdt32_t *irq_ptr, *reg;
+	uint32_t irq_num;
+	uint32_t pull;
+	int len;
+	int irqs;
+	int i;
+
+	/* Register active nodes only */
+	dt_fill_device_info(&wkpu->dt_info, fdt_offset);
+	if (wkpu->dt_info.status != DT_ENABLED)
+		return -1;
+
+	reg = fdt_getprop(fdt, fdt_offset, "reg", &len);
+	/* WKPU & GPR ranges */
+	if (len < 4 * sizeof(uint32_t)) {
+		ERROR("Missing GPR registers\n");
+		return -EIO;
+	}
+
+	/* GPR Base address */
+	wkpu->gpr = fdt32_to_cpu(reg[2]);
+
+	irq_ptr = fdt_getprop(fdt, fdt_offset, "nxp,irqs", &len);
+	if (!irq_ptr) {
+		ERROR("\"nxp,irqs\" property is mandatory\n");
+		return -EIO;
+	}
+
+	wkpu->irqs = 0;
+	wkpu->edges = 0;
+	wkpu->pulls_en = 0;
+	wkpu->pullups = 0;
+
+	/* Number of tuples : (IRQ, Edge, pull-up) */
+	irqs = len / sizeof(uint32_t) / 3;
+	for (i = 0; i < irqs; i++) {
+		irq_num = fdt32_to_cpu(irq_ptr[i * 3]);
+		wkpu->irqs |= BIT(irq_num);
+
+		if (fdt32_to_cpu(irq_ptr[i * 3 + 1]) == S32GEN1_WKPU_IRQ_RISING)
+			wkpu->edges |= BIT(irq_num);
+
+		pull = fdt32_to_cpu(irq_ptr[i * 3 + 2]);
+		if (pull != S32GEN1_WKPU_PULL_DIS) {
+			wkpu->pulls_en |= BIT(irq_num);
+
+			if (pull == S32GEN1_WKPU_PULL_UP)
+				wkpu->pullups |= BIT(irq_num);
+		}
+	}
+
+	wkpu->irqs &= (WKPU_INPUTS_MASK | WKPU_RTC_IRQ);
+	wkpu->edges &= (WKPU_INPUTS_MASK | WKPU_RTC_IRQ);
+	wkpu->pulls_en &= WKPU_INPUTS_MASK;
+	wkpu->pullups &= WKPU_INPUTS_MASK;
+
+	return 0;
+}
+
+int s32gen1_wkpu_init(void *fdt, int fdt_offset)
+{
+	int ret;
+	struct s32gen1_wkpu wkpu;
+
+	ret = init_from_dt(fdt, fdt_offset, &wkpu);
+	if (ret)
+		return ret;
+
+	init_wkpu(&wkpu);
+
+	return 0;
+}
diff --git a/fdts/s32g274aevb.dts b/fdts/s32g274aevb.dts
index 2fdf083f7..b2b4de125 100644
--- a/fdts/s32g274aevb.dts
+++ b/fdts/s32g274aevb.dts
@@ -22,6 +22,17 @@
 		#size-cells = <0>;
 		reg = <0x402DC000 0x10000>;
 	};
+
+	wkpu: wkpu@40090000 {
+		compatible = "nxp,s32gen1-wkpu";
+		reg = <0x40090000 0x10000>, /* WKPU */
+		      <0x4007cb04 0x4>; /* S32G_STDBY_GPR */
+		nxp,irqs = <S32GEN1_WKPU_RTC_IRQ
+			    S32GEN1_WKPU_IRQ_RISING
+			    S32GEN1_WKPU_PULL_DIS>;
+
+		status = "disabled";
+	};
 };
 
 /* PMIC */
diff --git a/include/drivers/nxp/s32g/s32gen1-wkpu.h b/include/drivers/nxp/s32g/s32gen1-wkpu.h
new file mode 100644
index 000000000..65e219476
--- /dev/null
+++ b/include/drivers/nxp/s32g/s32gen1-wkpu.h
@@ -0,0 +1,10 @@
+// SPDX-License-Identifier: GPL-2.0+ OR BSD-3-Clause
+/*
+ * Copyright 2020 NXP
+ */
+#ifndef S32GEN1_WKPU_H
+#define S32GEN1_WKPU_H
+
+int s32gen1_wkpu_init(void *fdt, int fdt_offset);
+
+#endif
diff --git a/include/dt-bindings/reset/s32gen1-wkpu.h b/include/dt-bindings/reset/s32gen1-wkpu.h
new file mode 100644
index 000000000..13133bbbb
--- /dev/null
+++ b/include/dt-bindings/reset/s32gen1-wkpu.h
@@ -0,0 +1,23 @@
+/* SPDX-License-Identifier: GPL-2.0 or BSD-3-Clause */
+/*
+ * Copyright 2020 NXP
+ */
+
+#ifndef DT_S32GEN1_WKPU_H
+#define DT_S32GEN1_WKPU_H
+
+#include <lib/utils_def.h>
+
+#define S32GEN1_WKPU_IRQ_RISING		1
+#define S32GEN1_WKPU_IRQ_FALLING	0
+
+#define S32GEN1_WKPU_PULL_DIS		0
+#define S32GEN1_WKPU_PULL_UP		1
+#define S32GEN1_WKPU_PULL_DOWN		2
+
+/* Interrupt sources: RTC + 23 external */
+#define S32GEN1_WKPU_RTC_IRQ		31
+#define S32GEN1_WKPU_EXT_IRQ(N)		(N)
+
+#endif
+
diff --git a/plat/s32g/platform.mk b/plat/s32g/platform.mk
index 35c0588d6..6b1864443 100644
--- a/plat/s32g/platform.mk
+++ b/plat/s32g/platform.mk
@@ -65,7 +65,8 @@ BL31_SOURCES		+= plat/s32g/s32g274a_bl31.c \
 			   drivers/arm/gic/v3/gicv3_helpers.c \
 			   drivers/arm/gic/common/gic_common.c \
 			   lib/utils/crc8.c \
-			   drivers/nxp/s32g/pmic/vr5510.c
+			   drivers/nxp/s32g/pmic/vr5510.c \
+			   drivers/nxp/s32g/s32g_wkpu.c
 
 BL31_SOURCES		+= plat/s32g/bl31_lowlevel.S \
 			   plat/s32g/include/plat_macros.S
diff --git a/plat/s32g/s32g274a_bl31.c b/plat/s32g/s32g274a_bl31.c
index ac389f1b0..3f6cd781b 100644
--- a/plat/s32g/s32g274a_bl31.c
+++ b/plat/s32g/s32g274a_bl31.c
@@ -27,6 +27,7 @@
 #include "s32g_ncore.h"
 #include "s32g_pinctrl.h"
 #include "s32g_xrdc.h"
+#include "s32gen1-wkpu.h"
 
 #define S32G_MAX_I2C_MODULES 5
 
@@ -271,6 +272,35 @@ static void dt_init_pmic(void)
 	}
 }
 
+static void dt_init_wkpu(void)
+{
+	void *fdt;
+	int wkpu_node;
+	int ret;
+
+	if (dt_open_and_check() < 0) {
+		INFO("ERROR fdt check\n");
+		return;
+	}
+
+	if (fdt_get_address(&fdt) == 0) {
+		INFO("ERROR fdt\n");
+		return;
+	}
+
+	wkpu_node = fdt_node_offset_by_compatible(fdt, -1,
+			"nxp,s32gen1-wkpu");
+	if (wkpu_node == -1)
+		return;
+
+
+	ret = s32gen1_wkpu_init(fdt, wkpu_node);
+	if (ret) {
+		INFO("Failed to initialize WKPU\n");
+		return;
+	}
+}
+
 void bl31_plat_arch_setup(void)
 {
 	static struct console_s32g console;
@@ -297,6 +327,7 @@ void bl31_platform_setup(void)
 	generic_delay_timer_init();
 
 	dt_init_pmic();
+	dt_init_wkpu();
 }
 
 /* TODO: Last-minute modifications before exiting BL31:
-- 
2.17.1

