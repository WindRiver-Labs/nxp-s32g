From b0d3cd896268a45457095a4232f3c23fbc2eab02 Mon Sep 17 00:00:00 2001
From: Dan Nica <dan.nica@nxp.com>
Date: Tue, 2 Jun 2020 16:19:53 +0300
Subject: [PATCH 144/269] s32g: Add support for reads of length unaligned to
 MMC_BLOCK_SIZE

Issue: ALB-4935
Upstream-Status: Pending 

Signed-off-by: Dan Nica <dan.nica@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 drivers/nxp/s32g/io/io_mmc.c         | 30 +++++++++++++++++++++++++---
 include/drivers/nxp/s32g/io/io_mmc.h |  4 ++++
 plat/s32g/s32g274a_storage.c         |  4 ----
 3 files changed, 31 insertions(+), 7 deletions(-)

diff --git a/drivers/nxp/s32g/io/io_mmc.c b/drivers/nxp/s32g/io/io_mmc.c
index e1c8a626d..eba7d4693 100644
--- a/drivers/nxp/s32g/io/io_mmc.c
+++ b/drivers/nxp/s32g/io/io_mmc.c
@@ -6,7 +6,7 @@
  */
 
 #include <assert.h>
-#include <drivers/io/io_driver.h>
+#include <drivers/nxp/s32g/io/io_mmc.h>
 #include <drivers/mmc.h>
 
 static io_block_spec_t *block_spec;
@@ -60,8 +60,32 @@ static int mmc_block_seek(io_entity_t *entity, int mode, ssize_t offset)
 static int mmc_block_read(io_entity_t *entity, uintptr_t buffer,
 			  size_t length, size_t *length_read)
 {
-	*length_read = mmc_read_blocks(block_spec->offset / MMC_BLOCK_SIZE,
-				       buffer, length);
+	size_t length_bs_multiple;
+	size_t length_bs_not_multiple;
+	uint8_t partial_block_buffer[MMC_BLOCK_SIZE];
+
+	*length_read = 0;
+
+	length_bs_multiple = length & ~(MMC_BLOCK_SIZE - 1);
+	if (length_bs_multiple)
+		*length_read += mmc_read_blocks(block_spec->offset
+							/ MMC_BLOCK_SIZE,
+						buffer, length_bs_multiple);
+
+	length_bs_not_multiple = length - length_bs_multiple;
+	if (length_bs_not_multiple) {
+		if (mmc_read_blocks((block_spec->offset + length_bs_multiple)
+							/ MMC_BLOCK_SIZE,
+				    (uintptr_t)&partial_block_buffer[0],
+				    MMC_BLOCK_SIZE)
+			!= MMC_BLOCK_SIZE)
+		return -EIO;
+
+		memcpy((void*)(buffer + length_bs_multiple),
+		       &partial_block_buffer[0], length_bs_not_multiple);
+		*length_read += length_bs_not_multiple;
+	}
+
 	if (*length_read != length)
 		return -EIO;
 
diff --git a/include/drivers/nxp/s32g/io/io_mmc.h b/include/drivers/nxp/s32g/io/io_mmc.h
index c8db662a6..68d6a8b14 100644
--- a/include/drivers/nxp/s32g/io/io_mmc.h
+++ b/include/drivers/nxp/s32g/io/io_mmc.h
@@ -10,6 +10,10 @@
 
 #include <drivers/io/io_driver.h>
 
+#define ROUND_TO_MMC_BLOCK_SIZE(x) \
+	(((x) & ~(MMC_BLOCK_MASK)) == (x) ? (x) : \
+	 ((x) & ~(MMC_BLOCK_MASK)) + (MMC_BLOCK_SIZE))
+
 int register_io_dev_mmc(const io_dev_connector_t **dev_con);
 
 #endif /* IO_MMC_H */
diff --git a/plat/s32g/s32g274a_storage.c b/plat/s32g/s32g274a_storage.c
index bf8e053ca..e89fd1c28 100644
--- a/plat/s32g/s32g274a_storage.c
+++ b/plat/s32g/s32g274a_storage.c
@@ -13,10 +13,6 @@
 #include <tools_share/firmware_image_package.h>
 #include "s32g_storage.h"
 
-#define ROUND_TO_MMC_BLOCK_SIZE(x) \
-	(((x) & ~(MMC_BLOCK_MASK)) == (x) ? (x) : \
-	 ((x) & ~(MMC_BLOCK_MASK)) + (MMC_BLOCK_SIZE))
-
 static const io_dev_connector_t *s32g_fip_io_dev;
 static uintptr_t s32g_fip_dev_handle;
 
-- 
2.17.1

