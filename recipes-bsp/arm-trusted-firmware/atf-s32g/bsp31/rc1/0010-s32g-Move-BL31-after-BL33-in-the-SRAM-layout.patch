From 47e59fc66f57abda18e80b95b5b16e3b1c710a60 Mon Sep 17 00:00:00 2001
From: Bogdan Hamciuc <bogdan.hamciuc@nxp.com>
Date: Wed, 9 Jan 2019 09:20:53 +0200
Subject: [PATCH 010/269] s32g: Move BL31 after BL33 in the SRAM layout

U-Boot unilaterally assumes the SRAM (at least the start of it) is free
for use and installs the MMU tables there, overwriting our exception
vectors.
Before we properly relocate the BL31 in DDR in order to preserve and
protect the PSCI callbacks, we place BL31 *after* U-Boot in SRAM, where
it will potentially escape overwriting. This has the added advantage of
extra space, allowing us to compile the TF-A with -O0 without
overlapping with adjacent images in SRAM.

Upstream-Status: Pending 

Signed-off-by: Bogdan Hamciuc <bogdan.hamciuc@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
Issue: ALB-3452
---
 plat/s32g/include/platform_def.h | 19 +++++++++++++++++--
 plat/s32g/platform.mk            |  2 +-
 2 files changed, 18 insertions(+), 3 deletions(-)

diff --git a/plat/s32g/include/platform_def.h b/plat/s32g/include/platform_def.h
index b834ebf56..0690d1d35 100644
--- a/plat/s32g/include/platform_def.h
+++ b/plat/s32g/include/platform_def.h
@@ -85,13 +85,28 @@
  * enough to prevent overflowing onto the adjacent SRAM image. Handle with care,
  * wear a helmet and compile with -Os.
  */
-#define S32G_BL31_OFF_IN_SRAM		0x00002000
+
+/* BL31 and BL33 location in SRAM
+ */
+
 /* U-boot address in SRAM */
 #define S32G_BL33_IMAGE_BASE		0x38020000
 
-#define BL31_BASE			(S32G_SRAM_BASE + S32G_BL31_OFF_IN_SRAM)
+#ifdef CONFIG_S32G_BL31_BEFORE_BL32	/* TODO add this to platform.mk */
+#define S32G_BL31_OFF_IN_SRAM		0x00002000
 /* Make sure bl31 does not overlap with u-boot */
 #define BL31_LIMIT			(S32G_BL33_IMAGE_BASE - 1)
+#else
+/* BL31 is located *after* BL32 in SRAM, where there is more space potentially
+ * allowing us to compile the TF-A with -O0 without overlapping with U-Boot;
+ * also, U-Boot will be able to reclaim the beginning of SRAM for its MMU
+ * tables without overwriting our exception vectors
+ */
+#define S32G_BL31_OFF_IN_SRAM		0x00700000
+#define BL31_LIMIT			(S32G_SRAM_BASE + S32G_SRAM_SIZE - 1)
+#endif
+
+#define BL31_BASE			(S32G_SRAM_BASE + S32G_BL31_OFF_IN_SRAM)
 
 /* FIXME value randomly chosen; should probably be revisited */
 #define PLATFORM_STACK_SIZE		0x4000
diff --git a/plat/s32g/platform.mk b/plat/s32g/platform.mk
index 24af14c59..6ba1ab1ee 100644
--- a/plat/s32g/platform.mk
+++ b/plat/s32g/platform.mk
@@ -40,7 +40,7 @@ RESET_TO_BL31			:= 1
 COLD_BOOT_SINGLE_CPU		:= 0
 
 ### Devel & Debug options ###
-CFLAGS			+= -O2	# -O0 is likely to overflow the SRAM layout
+CFLAGS			+= -O0
 # Enable dump of processor register state upon exceptions while running BL31
 CRASH_REPORTING		:= 1
 # As verbose as it can be
-- 
2.17.1

