From 863f1cbd69312d03ca175f39c2f90a72a2ae5d21 Mon Sep 17 00:00:00 2001
From: Ghennadi Procopciuc <Ghennadi.Procopciuc@nxp.com>
Date: Tue, 23 Jun 2020 15:56:58 +0300
Subject: [PATCH 131/269] lib: Replace crc8 implementation to avoid license
 contamination

Issue: ALB-5053
Upstream-Status: Pending 

Signed-off-by: Ghennadi Procopciuc <Ghennadi.Procopciuc@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 include/lib/crc8.h | 31 ++++++++++---------------------
 lib/utils/crc8.c   | 46 ++++++++++++++++------------------------------
 2 files changed, 26 insertions(+), 51 deletions(-)

diff --git a/include/lib/crc8.h b/include/lib/crc8.h
index 68c9c9318..d757f6d88 100644
--- a/include/lib/crc8.h
+++ b/include/lib/crc8.h
@@ -1,35 +1,24 @@
-/* SPDX-License-Identifier: GPL-2.0+ */
+/* SPDX-License-Identifier: BSD-3-Clause */
 /*
- * Copyright (c) 2013 Google, Inc
  * Copyright 2020 NXP
  */
+#ifndef CRC8_H
+#define CRC8_H
 
+#include <stdlib.h>
+#include <stdint.h>
 
-#ifndef __linux_crc8_h
-#define __linux_crc8_h
-
-/**
- * crc8() - Calculate and return CRC-8 of the data
- *
- * This uses an x^8 + x^2 + x + 1 polynomial.  A table-based algorithm would
- * be faster, but for only a few bytes it isn't worth the code size
- *
- * @crc_start: CRC8 start value
- * @vptr: Buffer to checksum
- * @len: Length of buffer in bytes
- * @return CRC8 checksum
- */
-unsigned int crc8(unsigned int crc_start, const unsigned char *vptr, int len);
+/* Default polynomial: x^8 + x^2 + x^1 + 1 */
+#define DEFAULT_POLY 0x7U
 
 /**
  * crc8poly() - Calculate and return CRC-8 of the data
  *
- * @crc: CRC8 start value
+ * @seed: CRC8 start value (seed)
  * @poly: The polynomial to be used
- * @vptr: Buffer to checksum
+ * @buf: Buffer to checksum
  * @len: Length of buffer in bytes
  * @return CRC8 checksum
  */
-unsigned int crc8poly(unsigned int crc, unsigned short poly,
-		      const unsigned char *vptr, int len);
+uint8_t crc8poly(uint8_t seed, uint8_t poly, const uint8_t *buf, size_t len);
 #endif
diff --git a/lib/utils/crc8.c b/lib/utils/crc8.c
index b2842f89f..a119b4524 100644
--- a/lib/utils/crc8.c
+++ b/lib/utils/crc8.c
@@ -1,41 +1,27 @@
-// SPDX-License-Identifier: GPL-2.0+
+// SPDX-License-Identifier: BSD-3-Clause
 /*
- * Copyright (c) 2013 Google, Inc
  * Copyright 2020 NXP
  */
 
 #include "lib/crc8.h"
 
-/* Default polynomial: x^8 + x^2 + x^1 + 1 */
-#define DEFAULT_POLY 0x7
-#define CRC8_POLY(P) ((0x1000U | ((P) << 4)) << 3)
+#define CRC8_POLY(P) ((0x1000U | ((P) << 4U)) << 3U)
 
-static unsigned char _crc8(unsigned short data, unsigned short poly)
+uint8_t crc8poly(uint8_t seed, uint8_t poly, const uint8_t *buf, size_t len)
 {
-	int i;
-
-	for (i = 0; i < 8; i++) {
-		if (data & 0x8000)
-			data = data ^ poly;
-		data = data << 1;
+	size_t i, j;
+	uint16_t crc = seed;
+
+	for (i = 0U; i < len; i++) {
+		crc = (crc ^ buf[i]) << 8U;
+		for (j = 0U; j < 8U; j++) {
+			if (crc & 0x8000U)
+				crc = crc ^ CRC8_POLY(poly);
+			crc <<= 1U;
+		}
+
+		crc >>= 8U;
 	}
 
-	return (unsigned char)(data >> 8);
-}
-
-unsigned int crc8poly(unsigned int crc, unsigned short poly,
-		      const unsigned char *vptr, int len)
-{
-	int i;
-
-	poly = CRC8_POLY(poly);
-	for (i = 0; i < len; i++)
-		crc = _crc8((crc ^ vptr[i]) << 8, poly);
-
-	return crc;
-}
-
-unsigned int crc8(unsigned int crc, const unsigned char *vptr, int len)
-{
-	return crc8poly(crc, DEFAULT_POLY, vptr, len);
+	return (uint8_t)crc;
 }
-- 
2.17.1

