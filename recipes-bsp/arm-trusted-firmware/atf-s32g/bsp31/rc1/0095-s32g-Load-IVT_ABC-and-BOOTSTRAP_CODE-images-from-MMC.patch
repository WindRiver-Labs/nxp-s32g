From 26f857460d6c8e473c165860299a80918fa8d002 Mon Sep 17 00:00:00 2001
From: Dan Nica <dan.nica@nxp.com>
Date: Tue, 14 Apr 2020 11:15:14 +0300
Subject: [PATCH 095/269] s32g: Load IVT_ABC and BOOTSTRAP_CODE images from MMC
 into SRAM

Issue: ALB-4798
Upstream-Status: Pending 

Signed-off-by: Dan Nica <dan.nica@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 plat/s32g/include/platform_def.h | 15 +++++++++++----
 plat/s32g/s32g274a_bl2_el3.c     | 28 ++++++++++++++++++++++++++++
 plat/s32g/s32g274a_storage.c     | 20 ++++++++++++++++++++
 3 files changed, 59 insertions(+), 4 deletions(-)

diff --git a/plat/s32g/include/platform_def.h b/plat/s32g/include/platform_def.h
index 3cda6a490..8e30360b7 100644
--- a/plat/s32g/include/platform_def.h
+++ b/plat/s32g/include/platform_def.h
@@ -103,14 +103,21 @@
 #define S32G_SSRAM_BASE		(0x24000000)
 #define S32G_SSRAM_LIMIT	(0x24008000)
 
+#define BL1_RO_BASE		(S32G_SSRAM_BASE + PAGE_SIZE)
+#define BL1_RO_LIMIT		(S32G_SSRAM_LIMIT)
+#define BL1_RW_BASE		(S32G_SRAM_BASE)
+#define BL1_RW_LIMIT		(BL1_RW_BASE + 0x10000)
+
 #define SSRAM_CSR_BACKUP_SIZE	(1024)
 #define SSRAM_CSR_BACKUP	(S32G_SSRAM_LIMIT - SSRAM_CSR_BACKUP_SIZE)
 
-#define BL1_RO_BASE		(S32G_SSRAM_BASE + PAGE_SIZE)
-#define BL1_RO_LIMIT		(BL1_RO_BASE + 0x6000)
+#define MMC_BL1_IVT_ABC_BASE		(0x113000)
+#define BL1_IVT_ABC_SIZE		(1024)
+#define SRAM_BL1_IVT_ABC_BASE		(S32G_SRAM_BASE)
 
-#define BL1_RW_BASE		S32G_SRAM_BASE
-#define BL1_RW_LIMIT		(BL1_RW_BASE + 0x10000)
+#define MMC_BL1_RO_BASE			(MMC_BL1_IVT_ABC_BASE + 1024)
+#define BL1_BOOTSTRAP_CODE_SIZE		(BL1_RO_LIMIT - BL1_RO_BASE)
+#define SRAM_BL1_RO_BASE		(S32G_SRAM_BASE + 1024)
 
 /* Top of the 4GB of physical memory, accessible through the
  * extended memory map.
diff --git a/plat/s32g/s32g274a_bl2_el3.c b/plat/s32g/s32g274a_bl2_el3.c
index 7680ad3f5..6dbfa7c59 100644
--- a/plat/s32g/s32g274a_bl2_el3.c
+++ b/plat/s32g/s32g274a_bl2_el3.c
@@ -49,6 +49,34 @@ static bl_mem_params_node_t s32g_bl2_mem_params_descs[] = {
 				      image_info_t, IMAGE_ATTRIB_PLAT_SETUP),
 		.image_info.image_max_size = S32G_BL33_IMAGE_SIZE,
 		.image_info.image_base = S32G_BL33_IMAGE_BASE,
+		.next_handoff_image_id = S32G_SRAM_IVT_ABC_ID,
+	},
+
+	{
+		.image_id = S32G_SRAM_IVT_ABC_ID,
+
+		SET_STATIC_PARAM_HEAD(ep_info, PARAM_EP, VERSION_2,
+				      entry_point_info_t,
+				      NON_SECURE | EXECUTABLE),
+
+		SET_STATIC_PARAM_HEAD(image_info, PARAM_EP, VERSION_2,
+				      image_info_t, IMAGE_ATTRIB_PLAT_SETUP),
+		.image_info.image_max_size = BL1_IVT_ABC_SIZE,
+		.image_info.image_base = SRAM_BL1_IVT_ABC_BASE,
+		.next_handoff_image_id = S32G_SRAM_BOOTSTRAP_CODE_ID,
+	},
+
+	{
+		.image_id = S32G_SRAM_BOOTSTRAP_CODE_ID,
+
+		SET_STATIC_PARAM_HEAD(ep_info, PARAM_EP, VERSION_2,
+				      entry_point_info_t,
+				      NON_SECURE | EXECUTABLE),
+
+		SET_STATIC_PARAM_HEAD(image_info, PARAM_EP, VERSION_2,
+				      image_info_t, IMAGE_ATTRIB_PLAT_SETUP),
+		.image_info.image_max_size = BL1_BOOTSTRAP_CODE_SIZE,
+		.image_info.image_base = SRAM_BL1_RO_BASE,
 		.next_handoff_image_id = INVALID_IMAGE_ID,
 	},
 
diff --git a/plat/s32g/s32g274a_storage.c b/plat/s32g/s32g274a_storage.c
index 048025c30..f068e7cfd 100644
--- a/plat/s32g/s32g274a_storage.c
+++ b/plat/s32g/s32g274a_storage.c
@@ -26,6 +26,16 @@ static const io_block_spec_t bl33_mmc_spec = {
 	.length = BL33_MMC_SIZE,
 };
 
+static const io_block_spec_t bl1_ivt_abc_mmc_spec = {
+	.offset = MMC_BL1_IVT_ABC_BASE,
+	.length = BL1_IVT_ABC_SIZE,
+};
+
+static const io_block_spec_t bl1_bootstrap_code_mmc_spec = {
+	.offset = MMC_BL1_RO_BASE,
+	.length = BL1_BOOTSTRAP_CODE_SIZE,
+};
+
 static const struct plat_io_policy s32g_policies[] = {
 	[BL31_IMAGE_ID] = {
 		&s32g_mmc_boot_dev_handle,
@@ -37,6 +47,16 @@ static const struct plat_io_policy s32g_policies[] = {
 		(uintptr_t)&bl33_mmc_spec,
 		s32g_check_mmc_dev
 	},
+	[S32G_SRAM_IVT_ABC_ID] = {
+		&s32g_mmc_boot_dev_handle,
+		(uintptr_t)&bl1_ivt_abc_mmc_spec,
+		s32g_check_mmc_dev
+	},
+	[S32G_SRAM_BOOTSTRAP_CODE_ID] = {
+		&s32g_mmc_boot_dev_handle,
+		(uintptr_t)&bl1_bootstrap_code_mmc_spec,
+		s32g_check_mmc_dev
+	},
 };
 
 static int s32g_check_mmc_dev(const uintptr_t spec)
-- 
2.17.1

