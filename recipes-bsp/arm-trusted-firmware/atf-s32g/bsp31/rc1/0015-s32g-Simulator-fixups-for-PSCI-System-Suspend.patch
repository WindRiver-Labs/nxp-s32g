From 1161f2d479efb222b9e428ead02dc7af5ac3559b Mon Sep 17 00:00:00 2001
From: Bogdan Hamciuc <bogdan.hamciuc@nxp.com>
Date: Tue, 22 Jan 2019 21:14:47 +0200
Subject: [PATCH 015/269] s32g: Simulator fixups for PSCI System Suspend

PSCI System Suspend on functional simulator requires some fixups stemming
from missing support for relevant power management modules. As such, we'll
just 'short' the suspend->resume path by explicitly calling
bl31_warm_entrypoint() and leaving the non-secure world caller to deal with
the fallout. The fallout involves CPU context being lost, more notably the
GP registers.

Also, we need to set up the MMU again, to avoid crashing upon executing
unmapped code pages.

Issue: ALB-3702

Upstream-Status: Pending 

Signed-off-by: Bogdan Hamciuc <bogdan.hamciuc@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 plat/s32g/include/platform_def.h |  8 +++++--
 plat/s32g/s32g275_bl31.c         | 40 ++++++++++++++++++++++++++++++++
 plat/s32g/s32g_psci.c            | 39 +++++++++++++++++++++++++++++--
 3 files changed, 83 insertions(+), 4 deletions(-)

diff --git a/plat/s32g/include/platform_def.h b/plat/s32g/include/platform_def.h
index 339c75940..5a167124d 100644
--- a/plat/s32g/include/platform_def.h
+++ b/plat/s32g/include/platform_def.h
@@ -55,11 +55,13 @@
 #define S32G275_GIC_BASE	0x50800000
 #define PLAT_GICD_BASE		S32G275_GIC_BASE
 #define PLAT_GICR_BASE		(S32G275_GIC_BASE + 0x80000)
+#define S32G275_GIC_SIZE	0x100000
 
 /*
  * Platform memory map
  */
 #define S32G_XRDC_BASE		0x401A4000
+#define S32G_XRDC_SIZE		0x10000
 /* SRAM is actually at 0x3400_0000; we are just mirroring it in the
  * Virtual Code RAM
  */
@@ -136,8 +138,8 @@
 #if defined IMAGE_BL31
 #define FIRMWARE_WELCOME_STR_S32G_BL31	"This is S32G BL31\n"
 /* FIXME revisit these */
-#define MAX_MMAP_REGIONS		8
-#define MAX_XLAT_TABLES			4
+#define MAX_MMAP_REGIONS		6
+#define MAX_XLAT_TABLES			6
 #endif
 #if defined IMAGE_BL33
 #pragma warning "BL33 image is being built; you should configure it out."
@@ -145,7 +147,9 @@
 
 /* Serial console configurations */
 #define S32G_LINFLEX0_BASE	0x401C8000
+#define S32G_LINFLEX0_SIZE	0x4000
 #define S32G_UART_BASE		S32G_LINFLEX0_BASE
+#define S32G_UART_SIZE		S32G_LINFLEX0_SIZE
 #define S32G_UART_BAUDRATE	115200
 /* TODO revisit this; for now we'll hard-code the clock/divider settings instead
  * of deriving them
diff --git a/plat/s32g/s32g275_bl31.c b/plat/s32g/s32g275_bl31.c
index 692144b25..4e87c0ff5 100644
--- a/plat/s32g/s32g275_bl31.c
+++ b/plat/s32g/s32g275_bl31.c
@@ -9,9 +9,27 @@
 #include <common/bl_common.h>
 #include <psci.h>
 #include <drivers/arm/gicv3.h>
+#include <lib/xlat_tables/xlat_tables_v2.h>
+
 #include "platform_def.h"
 #include "s32g_psci.h"
 
+IMPORT_SYM(uintptr_t, __RO_START__, BL31_RO_START);
+IMPORT_SYM(uintptr_t, __RO_END__, BL31_RO_END);
+IMPORT_SYM(uintptr_t, __RW_START__, BL31_RW_START);
+IMPORT_SYM(uintptr_t, __RW_END__, BL31_RW_END);
+
+static const mmap_region_t s32g_mmap[] = {
+	MAP_REGION_FLAT(S32G_UART_BASE, S32G_UART_SIZE,
+			MT_DEVICE | MT_RW | MT_NS),
+	MAP_REGION_FLAT(S32G275_GIC_BASE, S32G275_GIC_SIZE,
+			MT_DEVICE | MT_RW),
+	MAP_REGION_FLAT(S32G_XRDC_BASE, S32G_XRDC_SIZE,
+			MT_DEVICE | MT_RW | MT_SECURE),
+	MAP_REGION_FLAT(S32G_PMEM_START, S32G_PMEM_LEN,
+			MT_MEMORY | MT_RW | MT_SECURE),
+	{0},
+};
 
 static entry_point_info_t bl33_image_ep_info;
 
@@ -68,9 +86,31 @@ void bl31_early_platform_setup2(u_register_t arg0, u_register_t arg1,
 			S32G_UART_BAUDRATE, &console);
 }
 
+static void s32g_el3_mmu_fixup(void)
+{
+	unsigned long rw_start = BL31_RW_START;
+	unsigned long rw_size = BL31_RW_END - BL31_RW_START;
+	unsigned long code_start = BL_CODE_BASE;
+	unsigned long code_size = BL_CODE_END - BL_CODE_BASE;
+
+	/* MMU initialization; while technically not necessary on cold boot,
+	 * it is required for warm boot path processing
+	 */
+	mmap_add_region(code_start, code_start, code_size,
+		MT_CODE | MT_SECURE);
+	mmap_add_region(rw_start, rw_start, rw_size,
+		MT_RW | MT_MEMORY | MT_SECURE);
+	mmap_add(s32g_mmap);
+
+	init_xlat_tables();
+	enable_mmu_el3(0);
+}
+
 void bl31_plat_arch_setup(void)
 {
+
 	s32g_smp_fixup();
+	s32g_el3_mmu_fixup();
 }
 
 static unsigned int plat_s32g275_mpidr_to_core_pos(unsigned long mpidr)
diff --git a/plat/s32g/s32g_psci.c b/plat/s32g/s32g_psci.c
index ab4d5e230..29179b9f6 100644
--- a/plat/s32g/s32g_psci.c
+++ b/plat/s32g/s32g_psci.c
@@ -3,6 +3,8 @@
  *
  * SPDX-License-Identifier: BSD-3-Clause
  */
+#include <arch_helpers.h>
+#include <bl31/bl31.h>		/* for bl31_warm_entrypoint() */
 #include <string.h>
 #include <assert.h>
 #include <common/debug.h>	/* printing macros such as INFO() */
@@ -34,13 +36,38 @@ static void s32g_pwr_domain_on_finish(const psci_power_state_t *target_state)
 	NOTICE("S32G TF-A: %s\n", __func__);
 }
 
+/* Temp fixups to work around the fact that we are not really powering down
+ * the SoC upon suspend (not yet). Place here all necessary fixups, so we can
+ * easily revert them.
+ */
+static void s32g_pwr_down_wfi_fixups(void)
+{
+	disable_mmu_el3();
+}
+
 static void __dead2 s32g_pwr_domain_pwr_down_wfi(
 					const psci_power_state_t *target_state)
 {
 	NOTICE("S32G TF-A: %s\n", __func__);
 
-	/* S32G suspend to RAM is broadly equivalent to a system power off */
-	psci_power_down_wfi();
+	/* S32G suspend to RAM is broadly equivalent to a system power off.
+	 *
+	 * Note: because the functional simulator does not support the wake up
+	 * path via the external PMIC, we'll just simulate the CPU shutdown
+	 * and instead *expect* to return from wfi rather than panicking as
+	 * psci_power_down_wfi() does.
+	 */
+
+	s32g_pwr_down_wfi_fixups();
+
+	/*
+	 * A torn-apart variant of psci_power_down_wfi()
+	 */
+	dsb();
+	wfi();
+	bl31_warm_entrypoint();
+
+	plat_panic_handler();
 }
 
 static void s32g_pwr_domain_suspend_finish(
@@ -66,6 +93,12 @@ static void s32g_get_sys_suspend_power_state(psci_power_state_t *req_state)
 		req_state->pwr_domain_state[i] = PLAT_MAX_OFF_STATE;
 }
 
+static void s32g_pwr_domain_suspend_pwrdown_early(
+		const psci_power_state_t *target_state)
+{
+	NOTICE("S32G TF-A: %s\n", __func__);
+}
+
 const plat_psci_ops_t s32g_psci_pm_ops = {
 	/* cap: PSCI_CPU_OFF */
 	.pwr_domain_off = NULL,
@@ -76,6 +109,8 @@ const plat_psci_ops_t s32g_psci_pm_ops = {
 	.pwr_domain_suspend = s32g_pwr_domain_suspend,
 	/* cap: PSCI_SYSTEM_SUSPEND_AARCH64 */
 	.get_sys_suspend_power_state = s32g_get_sys_suspend_power_state,
+	.pwr_domain_suspend_pwrdown_early =
+					s32g_pwr_domain_suspend_pwrdown_early,
 	.pwr_domain_suspend_finish = s32g_pwr_domain_suspend_finish,
 	.pwr_domain_pwr_down_wfi = s32g_pwr_domain_pwr_down_wfi,
 };
-- 
2.17.1

