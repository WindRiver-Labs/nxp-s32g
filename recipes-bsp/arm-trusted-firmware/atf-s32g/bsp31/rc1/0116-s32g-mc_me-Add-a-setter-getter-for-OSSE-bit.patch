From 50de06f3fde170d4a4afeae41d92b0e6f440b9bb Mon Sep 17 00:00:00 2001
From: Ghennadi Procopciuc <Ghennadi.Procopciuc@nxp.com>
Date: Wed, 27 May 2020 12:10:59 +0300
Subject: [PATCH 116/269] s32g: mc_me: Add a setter/getter for OSSE bit

Issue: ALB-4907
Upstream-Status: Pending 

Signed-off-by: Ghennadi Procopciuc <Ghennadi.Procopciuc@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 plat/s32g/s32g_mc_me.c | 35 +++++++++++++++++++++++------------
 1 file changed, 23 insertions(+), 12 deletions(-)

diff --git a/plat/s32g/s32g_mc_me.c b/plat/s32g/s32g_mc_me.c
index 4c9f5cc6a..0d7d78fc7 100644
--- a/plat/s32g/s32g_mc_me.c
+++ b/plat/s32g/s32g_mc_me.c
@@ -68,12 +68,22 @@ static void mc_me_part_pconf_write_pce(uint32_t pce_bit, uint32_t p)
 	mmio_write_32(S32G_MC_ME_PRTN_N_PCONF(p), pconf);
 }
 
+static void mc_me_part_pconf_write_osse(uint32_t osse_bit, uint32_t p)
+{
+	uint32_t pconf;
+
+	pconf = mmio_read_32(S32G_MC_ME_PRTN_N_PCONF(p)) &
+			~S32G_MC_ME_PRTN_N_PCONF_OSSE_MASK;
+	pconf |= (osse_bit & S32G_MC_ME_PRTN_N_PCONF_OSSE_MASK);
+	mmio_write_32(S32G_MC_ME_PRTN_N_PCONF(p), pconf);
+}
+
 static void mc_me_part_pupd_write_pcud(uint32_t pcud_bit, uint32_t p)
 {
 	uint32_t pupd;
 
-	pupd = mmio_read_32(S32G_MC_ME_PRTN_N_PUPD(p) &
-			~S32G_MC_ME_PRTN_N_PUPD_PCUD_MASK);
+	pupd = mmio_read_32(S32G_MC_ME_PRTN_N_PUPD(p)) &
+			~S32G_MC_ME_PRTN_N_PUPD_PCUD_MASK;
 	pupd |= (pcud_bit & S32G_MC_ME_PRTN_N_PUPD_PCUD_MASK);
 	mmio_write_32(S32G_MC_ME_PRTN_N_PUPD(p), pupd);
 }
@@ -124,7 +134,7 @@ void mc_me_enable_partition(uint32_t part)
 	if (part == 0)
 		return;
 
-	mc_me_part_pconf_write_pce(1, part);
+	mc_me_part_pconf_write_pce(S32G_MC_ME_PRTN_N_PCONF_PCE_MASK, part);
 	mc_me_part_pupd_update_and_wait(S32G_MC_ME_PRTN_N_PUPD_PCUD_MASK, part);
 
 	/* Unlock RDC register write */
@@ -139,10 +149,10 @@ void mc_me_enable_partition(uint32_t part)
 	reg = mmio_read_32(S32G_MC_RGM_PRST(part));
 	reg &= ~MC_RGM_PRST_PERIPH_N_RST(0);
 	mmio_write_32(S32G_MC_RGM_PRST(part), reg);
+
 	/* Clear OSSE bit */
-	reg = mmio_read_32(S32G_MC_ME_PRTN_N_PCONF(part));
-	reg &= ~S32G_MC_ME_PRTN_N_PCONF_OSSE_MASK;
-	mmio_write_32(S32G_MC_ME_PRTN_N_PCONF(part), reg);
+	mc_me_part_pconf_write_osse(0, part);
+
 	mc_me_part_pupd_update_and_wait(S32G_MC_ME_PRTN_N_PUPD_OSSUD_MASK,
 					part);
 	while (mmio_read_32(S32G_MC_RGM_PSTAT(part)) &
@@ -207,12 +217,11 @@ static bool s32g_core_in_reset(uint32_t core)
 	return ((stat & rst) != 0);
 }
 
-static bool s32g_core_clock_running(uint32_t core)
+static bool s32g_core_clock_running(uint32_t part, uint32_t core)
 {
 	uint32_t stat;
-	const uint32_t part = S32G_MC_ME_CA53_PART;
 
-	stat = mmio_read_32(S32G_MC_ME_PRTN_N_CORE_M_STAT(part, core & ~1));
+	stat = mmio_read_32(S32G_MC_ME_PRTN_N_CORE_M_STAT(part, core));
 	return ((stat & S32G_MC_ME_PRTN_N_CORE_M_STAT_CCS_MASK) != 0);
 }
 
@@ -242,7 +251,7 @@ static void s32g_kick_secondary_ca53_core(uint32_t core)
 	mc_me_part_core_pupd_write_ccupd(1, part, core & ~1);
 	mc_me_apply_hw_changes();
 	/* Wait for the core clock to become active */
-	while (!s32g_core_clock_running(core))
+	while (!s32g_core_clock_running(S32G_MC_ME_CA53_PART, core & ~1))
 		;
 
 	/* Release the core reset */
@@ -259,8 +268,10 @@ static void s32g_kick_secondary_ca53_core(uint32_t core)
 void s32g_kick_secondary_ca53_cores(void)
 {
 	/* Enable partition clocks */
-	mc_me_part_pconf_write_pce(1, S32G_MC_ME_CA53_PART);
-	mc_me_part_pupd_write_pcud(1, S32G_MC_ME_CA53_PART);
+	mc_me_part_pconf_write_pce(S32G_MC_ME_PRTN_N_PCONF_PCE_MASK,
+				   S32G_MC_ME_CA53_PART);
+	mc_me_part_pupd_write_pcud(S32G_MC_ME_PRTN_N_PUPD_PCUD_MASK,
+				   S32G_MC_ME_CA53_PART);
 	mc_me_apply_hw_changes();
 
 	s32g_kick_secondary_ca53_core(1);
-- 
2.17.1

