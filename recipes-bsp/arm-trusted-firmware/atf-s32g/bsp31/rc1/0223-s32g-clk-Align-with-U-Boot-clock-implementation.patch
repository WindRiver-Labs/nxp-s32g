From bdc66fcc965e98e312a0e1becaa2c05241489ab2 Mon Sep 17 00:00:00 2001
From: Larisa Grigore <larisa.grigore@nxp.com>
Date: Mon, 5 Apr 2021 11:45:48 +0300
Subject: [PATCH 223/269] s32g: clk: Align with U-Boot clock implementation

S32G274A U-Boot clocking handling was updated when
S32G3 support was added.

Issue: ALB-6496
Upstream-Status: Pending 

Signed-off-by: Larisa Grigore <larisa.grigore@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 drivers/nxp/s32g/clk/enable_clk.c             |   4 +-
 drivers/nxp/s32g/clk/s32g274a_clk.c           | 369 ++++--------------
 drivers/nxp/s32g/clk/s32g_clk.c               | 327 ++++++++++++++++
 drivers/nxp/s32g/clk/s32gen1_clk.c            |  89 +----
 include/drivers/nxp/s32g/clk/s32g_clk_funcs.h |  13 +
 .../drivers/nxp/s32g/clk/s32gen1_clk_funcs.h  |   4 +-
 plat/nxp/s32g/platform.mk                     |   1 +
 7 files changed, 426 insertions(+), 381 deletions(-)
 create mode 100644 drivers/nxp/s32g/clk/s32g_clk.c
 create mode 100644 include/drivers/nxp/s32g/clk/s32g_clk_funcs.h

diff --git a/drivers/nxp/s32g/clk/enable_clk.c b/drivers/nxp/s32g/clk/enable_clk.c
index 6850669ad..b6464e944 100644
--- a/drivers/nxp/s32g/clk/enable_clk.c
+++ b/drivers/nxp/s32g/clk/enable_clk.c
@@ -1,6 +1,6 @@
 // SPDX-License-Identifier: BSD-3-Clause
 /*
- * Copyright 2020 NXP
+ * Copyright 2020-2021 NXP
  */
 #include <clk/mc_cgm_regs.h>
 #include <clk/mc_me_regs.h>
@@ -228,7 +228,7 @@ static int enable_part_block(struct s32gen1_clk_obj *module,
 	return 0;
 }
 
-static uint32_t s32gen1_platclk2mux(uint32_t clk_id)
+uint32_t s32gen1_platclk2mux(uint32_t clk_id)
 {
 	return clk_id - S32GEN1_CLK_ID_BASE;
 }
diff --git a/drivers/nxp/s32g/clk/s32g274a_clk.c b/drivers/nxp/s32g/clk/s32g274a_clk.c
index 5bf5ee5ca..3d83a6134 100644
--- a/drivers/nxp/s32g/clk/s32g274a_clk.c
+++ b/drivers/nxp/s32g/clk/s32g274a_clk.c
@@ -3,307 +3,100 @@
  * Copyright 2020-2021 NXP
  */
 #include <dt-bindings/clock/s32g-clock.h>
+#include <dt-bindings/clock/s32gen1-scmi-clock.h>
 #include <clk/s32gen1_clk_funcs.h>
 #include <clk/s32gen1_clk_modules.h>
-#include <clk/s32gen1_shared_clks.h>
 
-#define ARR_CLK(N)	S32G_CLK_INDEX(N)
-
-/* XBAR_2X */
-static struct s32gen1_part_block llce_block =
-		S32GEN1_PART_BLOCK_NO_STATUS(cgm0_mux0_clk, 3,
-					     s32gen1_part_block0);
-struct s32gen1_clk xbar_2x_clk =
-		S32GEN1_FREQ_MODULE_CLK(llce_block, 48 * MHZ, 800 * MHZ);
-
-/* PER_CLK */
-static struct s32gen1_clk per_clk =
-		S32GEN1_FREQ_MODULE_CLK(per_div, 0, 80 * MHZ);
-
-/* CAN_PE_CLK */
-static struct s32gen1_clk can_pe_clk =
-		S32GEN1_CHILD_CLK(cgm0_mux7_clk, 40 * MHZ, 80 * MHZ);
-
-/* PFE_MAC0_TX_DIV */
-static struct s32gen1_fixed_clock pfe_mac0_ext_tx =
-		S32GEN1_FIXED_CLK_INIT();
-static struct s32gen1_clk pfe_mac0_ext_tx_clk =
-		S32GEN1_MODULE_CLK(pfe_mac0_ext_tx);
-
-static struct s32gen1_fixed_clock pfe_mac0_ext_ref =
-		S32GEN1_FIXED_CLK_INIT();
-static struct s32gen1_clk pfe_mac0_ext_ref_clk =
-		S32GEN1_MODULE_CLK(pfe_mac0_ext_ref);
-
-static struct s32gen1_fixed_clock serdes1_lane0_ext_tx =
-		S32GEN1_FIXED_CLK_INIT();
-static struct s32gen1_clk serdes1_lane0_ext_tx_clk =
-		S32GEN1_MODULE_CLK(serdes1_lane0_ext_tx);
-
-static struct s32gen1_mux cgm2_mux1 =
-		S32GEN1_MUX_INIT(S32GEN1_CGM2, 1, 5,
-				 S32GEN1_CLK_FIRC,
-				 S32GEN1_CLK_PERIPH_PLL_PHI5,
-				 S32G_CLK_PFE_MAC0_EXT_TX,
-				 S32G_CLK_PFE_MAC0_EXT_REF,
-				 S32G_CLK_SERDES1_LANE0_TX);
-static struct s32gen1_clk cgm2_mux1_clk =
-		S32GEN1_MODULE_CLK(cgm2_mux1);
-static struct s32gen1_cgm_div cgm2_mux1_div =
-		S32GEN1_CGM_DIV_INIT(cgm2_mux1_clk, 0);
-static struct s32gen1_part_block pfe0_tx_block =
-		S32GEN1_PART_BLOCK_NO_STATUS(cgm2_mux1_div, 2,
-					     s32gen1_part_block0);
-static struct s32gen1_clk pfe_mac0_tx_div_clk =
-		S32GEN1_FREQ_MODULE_CLK(pfe0_tx_block, 2500000, 312500000);
-
-/* PFE_MAC0_REF_DIV */
-static struct s32gen1_mux cgm2_mux7 =
-		S32GEN1_MUX_INIT(S32GEN1_CGM2, 7, 2,
-				 S32GEN1_CLK_FIRC,
-				 S32G_CLK_PFE_MAC0_EXT_REF);
-static struct s32gen1_clk cgm2_mux7_clk =
-		S32GEN1_MODULE_CLK(cgm2_mux7);
-static struct s32gen1_cgm_div cgm2_mux7_div =
-		S32GEN1_CGM_DIV_INIT(cgm2_mux7_clk, 0);
-static struct s32gen1_part_block pfe0_ref_block =
-		S32GEN1_PART_BLOCK_NO_STATUS(cgm2_mux7_div, 2,
-					     s32gen1_part_block0);
-static struct s32gen1_clk pfe_mac0_ref_div_clk =
-		S32GEN1_FREQ_MODULE_CLK(pfe0_ref_block, 0, 50 * MHZ);
-
-/* PFE_MAC0_RX */
-static struct s32gen1_fixed_clock serdes1_lane0_cdr =
-		S32GEN1_FIXED_CLK_INIT();
-static struct s32gen1_clk serdes1_lane0_cdr_clk =
-		S32GEN1_MODULE_CLK(serdes1_lane0_cdr);
-
-static struct s32gen1_fixed_clock pfe_mac0_ext_rx =
-		S32GEN1_FIXED_CLK_INIT();
-static struct s32gen1_clk pfe_mac0_ext_rx_clk =
-		S32GEN1_MODULE_CLK(pfe_mac0_ext_rx);
-
-static struct s32gen1_mux cgm2_mux4 =
-		S32GEN1_MUX_INIT(S32GEN1_CGM2, 4, 4,
-				 S32GEN1_CLK_FIRC,
-				 S32G_CLK_PFE_MAC0_EXT_RX,
-				 S32G_CLK_SERDES1_LANE0_CDR,
-				 S32G_CLK_PFE_MAC0_REF_DIV);
-static struct s32gen1_clk cgm2_mux4_clk =
-		S32GEN1_MODULE_CLK(cgm2_mux4);
-static struct s32gen1_part_block pfe0_rx_block =
-		S32GEN1_PART_BLOCK_NO_STATUS(cgm2_mux4_clk, 2,
-					     s32gen1_part_block0);
-static struct s32gen1_clk pfe_mac0_rx_clk =
-		S32GEN1_FREQ_MODULE_CLK(pfe0_rx_block, 2500000, 312500000);
-
-/* PFE_MAC1_TX */
-static struct s32gen1_fixed_clock pfe_mac1_ext_tx =
-		S32GEN1_FIXED_CLK_INIT();
-static struct s32gen1_clk pfe_mac1_ext_tx_clk =
-		S32GEN1_MODULE_CLK(pfe_mac1_ext_tx);
-
-static struct s32gen1_fixed_clock pfe_mac1_ext_ref =
-		S32GEN1_FIXED_CLK_INIT();
-static struct s32gen1_clk pfe_mac1_ext_ref_clk =
-		S32GEN1_MODULE_CLK(pfe_mac1_ext_ref);
-
-static struct s32gen1_mux cgm2_mux2 =
-		S32GEN1_MUX_INIT(S32GEN1_CGM2, 2, 5,
-				 S32GEN1_CLK_FIRC,
-				 S32GEN1_CLK_PERIPH_PLL_PHI5,
-				 S32G_CLK_PFE_MAC1_EXT_TX,
-				 S32G_CLK_PFE_MAC1_EXT_REF,
-				 S32G_CLK_SERDES1_LANE1_TX);
-static struct s32gen1_clk cgm2_mux2_clk =
-		S32GEN1_MODULE_CLK(cgm2_mux2);
-static struct s32gen1_cgm_div cgm2_mux2_div =
-		S32GEN1_CGM_DIV_INIT(cgm2_mux2_clk, 0);
-static struct s32gen1_part_block pfe1_tx_block =
-		S32GEN1_PART_BLOCK_NO_STATUS(cgm2_mux2_div, 2,
-					     s32gen1_part_block1);
-static struct s32gen1_clk pfe_mac1_tx_clk =
-		S32GEN1_FREQ_MODULE_CLK(pfe1_tx_block, 2500000, 125 * MHZ);
-
-/* PFE_MAC1_REF_DIV */
-static struct s32gen1_mux cgm2_mux8 =
-		S32GEN1_MUX_INIT(S32GEN1_CGM2, 8, 2,
-				 S32GEN1_CLK_FIRC,
-				 S32G_CLK_PFE_MAC1_EXT_REF);
-static struct s32gen1_clk cgm2_mux8_clk =
-		S32GEN1_MODULE_CLK(cgm2_mux8);
-static struct s32gen1_cgm_div cgm2_mux8_div =
-		S32GEN1_CGM_DIV_INIT(cgm2_mux8_clk, 0);
-static struct s32gen1_part_block pfe1_ref_block =
-		S32GEN1_PART_BLOCK_NO_STATUS(cgm2_mux8_div, 2,
-					     s32gen1_part_block1);
-static struct s32gen1_clk pfe_mac1_ref_div_clk =
-		S32GEN1_FREQ_MODULE_CLK(pfe1_ref_block, 0, 50 * MHZ);
-
-/* PFE_MAC1_RX */
-static struct s32gen1_fixed_clock pfe_mac1_ext_rx =
+/* GMAC_TS_CLK */
+static struct s32gen1_fixed_clock gmac_ext_ts =
 		S32GEN1_FIXED_CLK_INIT();
-static struct s32gen1_clk pfe_mac1_ext_rx_clk =
-		S32GEN1_MODULE_CLK(pfe_mac1_ext_rx);
-
-static struct s32gen1_mux cgm2_mux5 =
-		S32GEN1_MUX_INIT(S32GEN1_CGM2, 5, 4,
+static struct s32gen1_clk gmac_ext_ts_clk =
+		S32GEN1_MODULE_CLK(gmac_ext_ts);
+static struct s32gen1_mux cgm0_mux9 =
+		S32GEN1_MUX_INIT(S32GEN1_CGM0, 9, 3,
 				 S32GEN1_CLK_FIRC,
-				 S32G_CLK_PFE_MAC1_EXT_RX,
-				 S32G_CLK_PFE_MAC1_REF_DIV,
-				 S32G_CLK_SERDES1_LANE1_CDR);
-static struct s32gen1_clk cgm2_mux5_clk =
-		S32GEN1_MODULE_CLK(cgm2_mux5);
-static struct s32gen1_part_block pfe1_rx_block =
-		S32GEN1_PART_BLOCK_NO_STATUS(cgm2_mux5_clk, 2,
-					     s32gen1_part_block1);
-static struct s32gen1_clk pfe_mac1_rx_clk =
-		S32GEN1_FREQ_MODULE_CLK(pfe1_rx_block, 2500000, 125 * MHZ);
-
-/* PFE_MAC2_TX */
-static struct s32gen1_fixed_clock serdes0_lane1_tx =
-		S32GEN1_FIXED_CLK_INIT();
-static struct s32gen1_clk serdes0_lane1_tx_clk =
-		S32GEN1_MODULE_CLK(serdes0_lane1_tx);
-
-static struct s32gen1_fixed_clock pfe_mac2_ext_tx =
+				 S32GEN1_CLK_PERIPH_PLL_PHI4,
+				 S32GEN1_CLK_GMAC0_EXT_TS);
+static struct s32gen1_clk cgm0_mux9_clk =
+		S32GEN1_MODULE_CLK(cgm0_mux9);
+static struct s32gen1_cgm_div gmac_ts_div =
+		S32GEN1_CGM_DIV_INIT(cgm0_mux9_clk, 0);
+static struct s32gen1_clk gmac_ts_clk =
+		S32GEN1_FREQ_MODULE_CLK(gmac_ts_div, 5 * MHZ, 200 * MHZ);
+
+/* GMAC0_TX_CLK */
+static struct s32gen1_fixed_clock gmac0_ext_tx =
 		S32GEN1_FIXED_CLK_INIT();
-static struct s32gen1_clk pfe_mac2_ext_tx_clk =
-		S32GEN1_MODULE_CLK(pfe_mac2_ext_tx);
+static struct s32gen1_clk gmac0_ext_tx_clk =
+		S32GEN1_MODULE_CLK(gmac0_ext_tx);
 
-static struct s32gen1_fixed_clock pfe_mac2_ext_ref =
+static struct s32gen1_fixed_clock gmac0_ext_ref =
 		S32GEN1_FIXED_CLK_INIT();
-static struct s32gen1_clk pfe_mac2_ext_ref_clk =
-		S32GEN1_MODULE_CLK(pfe_mac2_ext_ref);
+static struct s32gen1_clk gmac0_ext_ref_clk =
+		S32GEN1_MODULE_CLK(gmac0_ext_ref);
 
-static struct s32gen1_mux cgm2_mux3 =
-		S32GEN1_MUX_INIT(S32GEN1_CGM2, 3, 5,
+static struct s32gen1_mux cgm0_mux10 =
+		S32GEN1_MUX_INIT(S32GEN1_CGM0, 10, 5,
 				 S32GEN1_CLK_FIRC,
 				 S32GEN1_CLK_PERIPH_PLL_PHI5,
-				 S32G_CLK_PFE_MAC2_EXT_TX,
-				 S32G_CLK_PFE_MAC2_EXT_REF,
-				 S32G_CLK_SERDES0_LANE1_TX);
-static struct s32gen1_clk cgm2_mux3_clk =
-		S32GEN1_MODULE_CLK(cgm2_mux3);
-static struct s32gen1_cgm_div cgm2_mux3_div =
-		S32GEN1_CGM_DIV_INIT(cgm2_mux3_clk, 0);
-static struct s32gen1_part_block pfe2_tx_block =
-		S32GEN1_PART_BLOCK_NO_STATUS(cgm2_mux3_div, 2,
-					     s32gen1_part_block2);
-static struct s32gen1_clk pfe_mac2_tx_clk =
-		S32GEN1_FREQ_MODULE_CLK(pfe2_tx_block, 2500000, 125 * MHZ);
-
-/* PFE_MAC2_REF_DIV */
-static struct s32gen1_mux cgm2_mux9 =
-		S32GEN1_MUX_INIT(S32GEN1_CGM2, 9, 2,
-				 S32GEN1_CLK_FIRC,
-				 S32G_CLK_PFE_MAC2_EXT_REF);
-static struct s32gen1_clk cgm2_mux9_clk =
-		S32GEN1_MODULE_CLK(cgm2_mux9);
-static struct s32gen1_cgm_div cgm2_mux9_div =
-		S32GEN1_CGM_DIV_INIT(cgm2_mux9_clk, 0);
-static struct s32gen1_part_block pfe2_ref_block =
-		S32GEN1_PART_BLOCK_NO_STATUS(cgm2_mux9_div, 2,
-					     s32gen1_part_block2);
-static struct s32gen1_clk pfe_mac2_ref_div_clk =
-		S32GEN1_FREQ_MODULE_CLK(pfe2_ref_block, 0, 50 * MHZ);
-
-/* PFE_MAC2_RX */
-static struct s32gen1_fixed_clock pfe_mac2_ext_rx =
-		S32GEN1_FIXED_CLK_INIT();
-static struct s32gen1_clk pfe_mac2_ext_rx_clk =
-		S32GEN1_MODULE_CLK(pfe_mac2_ext_rx);
-
-static struct s32gen1_fixed_clock serdes0_lane1_cdr =
+				 S32GEN1_CLK_SERDES0_LANE0_TX,
+				 S32GEN1_CLK_GMAC0_EXT_TX,
+				 S32GEN1_CLK_GMAC0_EXT_REF);
+static struct s32gen1_clk cgm0_mux10_clk =
+		S32GEN1_MODULE_CLK(cgm0_mux10);
+static struct s32gen1_cgm_div gmac_tx_div =
+		S32GEN1_CGM_DIV_INIT(cgm0_mux10_clk, 0);
+static struct s32gen1_clk gmac_tx_clk =
+		S32GEN1_FREQ_MODULE_CLK(gmac_tx_div, 2500000, 125 * MHZ);
+
+/* GMAC0_RX_CLK */
+static struct s32gen1_fixed_clock gmac0_ext_rx =
 		S32GEN1_FIXED_CLK_INIT();
-static struct s32gen1_clk serdes0_lane1_cdr_clk =
-		S32GEN1_MODULE_CLK(serdes0_lane1_cdr);
+static struct s32gen1_clk gmac0_ext_rx_clk =
+		S32GEN1_MODULE_CLK(gmac0_ext_rx);
 
-static struct s32gen1_mux cgm2_mux6 =
-		S32GEN1_MUX_INIT(S32GEN1_CGM2, 6, 4,
+static struct s32gen1_mux cgm0_mux11 =
+		S32GEN1_MUX_INIT(S32GEN1_CGM0, 11, 4,
 				 S32GEN1_CLK_FIRC,
-				 S32G_CLK_PFE_MAC2_EXT_RX,
-				 S32G_CLK_PFE_MAC2_REF_DIV,
-				 S32G_CLK_SERDES0_LANE1_CDR);
-static struct s32gen1_clk cgm2_mux6_clk =
-		S32GEN1_MODULE_CLK(cgm2_mux6);
-static struct s32gen1_part_block pfe2_rx_block =
-		S32GEN1_PART_BLOCK_NO_STATUS(cgm2_mux6_clk, 2,
-					     s32gen1_part_block2);
-static struct s32gen1_clk pfe_mac2_rx_clk =
-		S32GEN1_FREQ_MODULE_CLK(pfe2_rx_block, 2500000, 125 * MHZ);
-
-/* PFE_SYS_CLK */
-static struct s32gen1_mux cgm2_mux0 =
-		S32GEN1_MUX_INIT(S32GEN1_CGM2, 0, 2,
-				 S32GEN1_CLK_FIRC,
-				 S32G_CLK_ACCEL_PLL_PHI1);
-static struct s32gen1_clk cgm2_mux0_clk =
-		S32GEN1_MODULE_CLK(cgm2_mux0);
-static struct s32gen1_cgm_div cgm2_mux0_div =
-		S32GEN1_CGM_DIV_INIT(cgm2_mux0_clk, 0);
-static struct s32gen1_part_block pfe_sys_block =
-		S32GEN1_PART_BLOCK_NO_STATUS(cgm2_mux0_div, 2,
-					     s32gen1_part_block3);
-static struct s32gen1_clk pfe_pe_clk =
-		S32GEN1_FREQ_MODULE_CLK(pfe_sys_block, 0, 600 * MHZ);
-static struct s32gen1_fixed_div pfe_sys_div =
-		S32GEN1_FIXED_DIV_INIT(pfe_sys_block, 2);
-static struct s32gen1_clk pfe_sys_clk =
-		S32GEN1_FREQ_MODULE_CLK(pfe_sys_div, 0, 300 * MHZ);
-
-static struct s32gen1_clk *s32g274a_clocks[] = {
-	/* PFE_MAC0 */
-	[ARR_CLK(S32G_CLK_PFE_MAC0_RX)] = &pfe_mac0_rx_clk,
-	[ARR_CLK(S32G_CLK_PFE_MAC0_TX_DIV)] = &pfe_mac0_tx_div_clk,
-	[ARR_CLK(S32G_CLK_MC_CGM2_MUX1)] = &cgm2_mux1_clk,
-	[ARR_CLK(S32G_CLK_MC_CGM2_MUX4)] = &cgm2_mux4_clk,
-	[ARR_CLK(S32G_CLK_MC_CGM2_MUX7)] = &cgm2_mux7_clk,
-	/* PFE_MAC1 */
-	[ARR_CLK(S32G_CLK_PFE_MAC1_RX)] = &pfe_mac1_rx_clk,
-	[ARR_CLK(S32G_CLK_PFE_MAC1_TX)] = &pfe_mac1_tx_clk,
-	[ARR_CLK(S32G_CLK_MC_CGM2_MUX2)] = &cgm2_mux2_clk,
-	[ARR_CLK(S32G_CLK_MC_CGM2_MUX5)] = &cgm2_mux5_clk,
-	[ARR_CLK(S32G_CLK_MC_CGM2_MUX8)] = &cgm2_mux8_clk,
-	/* PFE_MAC2 */
-	[ARR_CLK(S32G_CLK_PFE_MAC2_RX)] = &pfe_mac2_rx_clk,
-	[ARR_CLK(S32G_CLK_PFE_MAC2_TX)] = &pfe_mac2_tx_clk,
-	[ARR_CLK(S32G_CLK_MC_CGM2_MUX3)] = &cgm2_mux3_clk,
-	[ARR_CLK(S32G_CLK_MC_CGM2_MUX6)] = &cgm2_mux6_clk,
-	[ARR_CLK(S32G_CLK_MC_CGM2_MUX9)] = &cgm2_mux9_clk,
-	[ARR_CLK(S32G_CLK_MC_CGM2_MUX0)] = &cgm2_mux0_clk,
-	[ARR_CLK(S32G_CLK_PFE_SYS)] = &pfe_sys_clk,
-	[ARR_CLK(S32G_CLK_PFE_PE)] = &pfe_pe_clk,
-};
+				 S32GEN1_CLK_GMAC0_REF_DIV,
+				 S32GEN1_CLK_GMAC0_EXT_RX,
+				 S32GEN1_CLK_SERDES0_LANE0_CDR);
+static struct s32gen1_clk cgm0_mux11_clk =
+		S32GEN1_MODULE_CLK(cgm0_mux11);
+static struct s32gen1_clk gmac_rx_clk =
+		S32GEN1_CHILD_CLK(cgm0_mux11_clk, 2500000, 125 * MHZ);
+
+/* GMAC0_REF_DIV_CLK */
+static struct s32gen1_mux cgm0_mux15 =
+		S32GEN1_SHARED_MUX_INIT(S32GEN1_CGM0, 15, 2,
+					S32GEN1_CLK_FIRC,
+					S32GEN1_CLK_GMAC0_EXT_REF);
+static struct s32gen1_clk cgm0_mux15_clk =
+		S32GEN1_MODULE_CLK(cgm0_mux15);
+static struct s32gen1_clk gmac0_ref_div_clk =
+		S32GEN1_CHILD_CLK(cgm0_mux15_clk, 0, 50 * MHZ);
+static struct s32gen1_clk gmac0_ref_clk =
+		S32GEN1_CHILD_CLK(cgm0_mux15_clk, 0, 50 * MHZ);
 
 static struct s32gen1_clk *s32g274a_cc_clocks[] = {
-	[CC_ARR_CLK(S32GEN1_CLK_PER)] = &per_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_CAN_PE)] = &can_pe_clk,
-	[CC_ARR_CLK(S32G_CLK_ACCEL_PLL_PHI0)] = &accel_pll_phi0_clk,
-	[CC_ARR_CLK(S32G_CLK_ACCEL_PLL_PHI1)] = &accel_pll_phi1_clk,
-	[CC_ARR_CLK(S32G_CLK_SERDES0_LANE1_CDR)] = &serdes0_lane1_cdr_clk,
-	[CC_ARR_CLK(S32G_CLK_SERDES0_LANE1_TX)] = &serdes0_lane1_tx_clk,
-	[CC_ARR_CLK(S32G_CLK_PFE_MAC0_EXT_TX)] = &pfe_mac0_ext_tx_clk,
-	[CC_ARR_CLK(S32G_CLK_PFE_MAC0_EXT_RX)] = &pfe_mac0_ext_rx_clk,
-	[CC_ARR_CLK(S32G_CLK_PFE_MAC0_EXT_REF)] = &pfe_mac0_ext_ref_clk,
-	[CC_ARR_CLK(S32G_CLK_PFE_MAC1_EXT_TX)] = &pfe_mac1_ext_tx_clk,
-	[CC_ARR_CLK(S32G_CLK_PFE_MAC1_EXT_RX)] = &pfe_mac1_ext_rx_clk,
-	[CC_ARR_CLK(S32G_CLK_PFE_MAC1_EXT_REF)] = &pfe_mac1_ext_ref_clk,
-	[CC_ARR_CLK(S32G_CLK_PFE_MAC2_EXT_TX)] = &pfe_mac2_ext_tx_clk,
-	[CC_ARR_CLK(S32G_CLK_PFE_MAC2_EXT_RX)] = &pfe_mac2_ext_rx_clk,
-	[CC_ARR_CLK(S32G_CLK_PFE_MAC2_EXT_REF)] = &pfe_mac2_ext_ref_clk,
-	[CC_ARR_CLK(S32G_CLK_SERDES1_LANE0_TX)] = &serdes1_lane0_ext_tx_clk,
-	[CC_ARR_CLK(S32G_CLK_SERDES1_LANE0_CDR)] = &serdes1_lane0_cdr_clk,
-	[CC_ARR_CLK(S32G_CLK_PFE_MAC0_REF_DIV)] = &pfe_mac0_ref_div_clk,
-	[CC_ARR_CLK(S32G_CLK_PFE_MAC1_REF_DIV)] = &pfe_mac1_ref_div_clk,
-	[CC_ARR_CLK(S32G_CLK_PFE_MAC2_REF_DIV)] = &pfe_mac2_ref_div_clk,
-	[CC_ARR_CLK(S32G_CLK_SERDES1_LANE1_TX)] = &serdes1_lane1_tx_clk,
-	[CC_ARR_CLK(S32G_CLK_SERDES1_LANE1_CDR)] = &serdes1_lane1_cdr_clk,
+	[CC_ARR_CLK(S32GEN1_CLK_MC_CGM0_MUX10)] = &cgm0_mux10_clk,
+	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_TX)] = &gmac_tx_clk,
+	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_EXT_TS)] = &gmac_ext_ts_clk,
+	[CC_ARR_CLK(S32GEN1_CLK_MC_CGM0_MUX9)] = &cgm0_mux9_clk,
+	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_TS)] = &gmac_ts_clk,
+	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_EXT_TX)] = &gmac0_ext_tx_clk,
+	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_EXT_REF)] = &gmac0_ext_ref_clk,
+	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_EXT_RX)] = &gmac0_ext_rx_clk,
+	[CC_ARR_CLK(S32GEN1_CLK_MC_CGM0_MUX11)] = &cgm0_mux11_clk,
+	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_RX)] = &gmac_rx_clk,
+	[CC_ARR_CLK(S32GEN1_CLK_MC_CGM0_MUX15)] = &cgm0_mux15_clk,
+	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_REF_DIV)] = &gmac0_ref_div_clk,
+	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_REF)] = &gmac0_ref_clk,
 };
 
-struct s32gen1_clk *get_plat_cc_clock(uint32_t id)
+struct s32gen1_clk *s32g_get_plat_cc_clock(uint32_t id)
 {
-	id -= S32GEN1_CLK_ID_BASE;
+	id = s32gen1_platclk2mux(id);
 
 	if (id >= ARRAY_SIZE(s32g274a_cc_clocks))
 		return NULL;
@@ -311,15 +104,7 @@ struct s32gen1_clk *get_plat_cc_clock(uint32_t id)
 	return s32g274a_cc_clocks[id];
 }
 
-struct s32gen1_clk *get_plat_clock(uint32_t id)
+struct s32gen1_clk *s32g_get_plat_clock(uint32_t id)
 {
-	if (id < S32GEN1_PLAT_CLK_ID_BASE)
-		return NULL;
-
-	id -= S32GEN1_PLAT_CLK_ID_BASE;
-
-	if (id >= ARRAY_SIZE(s32g274a_clocks))
-		return NULL;
-
-	return s32g274a_clocks[id];
+	return NULL;
 }
diff --git a/drivers/nxp/s32g/clk/s32g_clk.c b/drivers/nxp/s32g/clk/s32g_clk.c
new file mode 100644
index 000000000..60a99c1b5
--- /dev/null
+++ b/drivers/nxp/s32g/clk/s32g_clk.c
@@ -0,0 +1,327 @@
+// SPDX-License-Identifier: BSD-3-Clause
+/*
+ * Copyright 2020-2021 NXP
+ */
+#include <dt-bindings/clock/s32g-clock.h>
+#include <clk/s32g_clk_funcs.h>
+#include <clk/s32gen1_clk_modules.h>
+#include <clk/s32gen1_shared_clks.h>
+
+#define ARR_CLK(N)	S32G_CLK_INDEX(N)
+
+/* XBAR_2X */
+static struct s32gen1_part_block llce_block =
+		S32GEN1_PART_BLOCK_NO_STATUS(cgm0_mux0_clk, 3,
+					     s32gen1_part_block0);
+struct s32gen1_clk xbar_2x_clk =
+		S32GEN1_FREQ_MODULE_CLK(llce_block, 48 * MHZ, 800 * MHZ);
+
+/* PER_CLK */
+static struct s32gen1_clk per_clk =
+		S32GEN1_FREQ_MODULE_CLK(per_div, 0, 80 * MHZ);
+
+/* CAN_PE_CLK */
+static struct s32gen1_clk can_pe_clk =
+		S32GEN1_CHILD_CLK(cgm0_mux7_clk, 40 * MHZ, 80 * MHZ);
+
+/* PFE_MAC0_TX_DIV */
+static struct s32gen1_fixed_clock pfe_mac0_ext_tx =
+		S32GEN1_FIXED_CLK_INIT();
+static struct s32gen1_clk pfe_mac0_ext_tx_clk =
+		S32GEN1_MODULE_CLK(pfe_mac0_ext_tx);
+
+static struct s32gen1_fixed_clock pfe_mac0_ext_ref =
+		S32GEN1_FIXED_CLK_INIT();
+static struct s32gen1_clk pfe_mac0_ext_ref_clk =
+		S32GEN1_MODULE_CLK(pfe_mac0_ext_ref);
+
+static struct s32gen1_fixed_clock serdes1_lane0_ext_tx =
+		S32GEN1_FIXED_CLK_INIT();
+static struct s32gen1_clk serdes1_lane0_ext_tx_clk =
+		S32GEN1_MODULE_CLK(serdes1_lane0_ext_tx);
+
+static struct s32gen1_mux cgm2_mux1 =
+		S32GEN1_MUX_INIT(S32GEN1_CGM2, 1, 5,
+				 S32GEN1_CLK_FIRC,
+				 S32GEN1_CLK_PERIPH_PLL_PHI5,
+				 S32G_CLK_PFE_MAC0_EXT_TX,
+				 S32G_CLK_PFE_MAC0_EXT_REF,
+				 S32G_CLK_SERDES1_LANE0_TX);
+static struct s32gen1_clk cgm2_mux1_clk =
+		S32GEN1_MODULE_CLK(cgm2_mux1);
+static struct s32gen1_cgm_div cgm2_mux1_div =
+		S32GEN1_CGM_DIV_INIT(cgm2_mux1_clk, 0);
+static struct s32gen1_part_block pfe0_tx_block =
+		S32GEN1_PART_BLOCK_NO_STATUS(cgm2_mux1_div, 2,
+					     s32gen1_part_block0);
+static struct s32gen1_clk pfe_mac0_tx_div_clk =
+		S32GEN1_FREQ_MODULE_CLK(pfe0_tx_block, 2500000, 312500000);
+
+/* PFE_MAC0_REF_DIV */
+static struct s32gen1_mux cgm2_mux7 =
+		S32GEN1_MUX_INIT(S32GEN1_CGM2, 7, 2,
+				 S32GEN1_CLK_FIRC,
+				 S32G_CLK_PFE_MAC0_EXT_REF);
+static struct s32gen1_clk cgm2_mux7_clk =
+		S32GEN1_MODULE_CLK(cgm2_mux7);
+static struct s32gen1_cgm_div cgm2_mux7_div =
+		S32GEN1_CGM_DIV_INIT(cgm2_mux7_clk, 0);
+static struct s32gen1_part_block pfe0_ref_block =
+		S32GEN1_PART_BLOCK_NO_STATUS(cgm2_mux7_div, 2,
+					     s32gen1_part_block0);
+static struct s32gen1_clk pfe_mac0_ref_div_clk =
+		S32GEN1_FREQ_MODULE_CLK(pfe0_ref_block, 0, 50 * MHZ);
+
+/* PFE_MAC0_RX */
+static struct s32gen1_fixed_clock serdes1_lane0_cdr =
+		S32GEN1_FIXED_CLK_INIT();
+static struct s32gen1_clk serdes1_lane0_cdr_clk =
+		S32GEN1_MODULE_CLK(serdes1_lane0_cdr);
+
+static struct s32gen1_fixed_clock pfe_mac0_ext_rx =
+		S32GEN1_FIXED_CLK_INIT();
+static struct s32gen1_clk pfe_mac0_ext_rx_clk =
+		S32GEN1_MODULE_CLK(pfe_mac0_ext_rx);
+
+static struct s32gen1_mux cgm2_mux4 =
+		S32GEN1_MUX_INIT(S32GEN1_CGM2, 4, 4,
+				 S32GEN1_CLK_FIRC,
+				 S32G_CLK_PFE_MAC0_EXT_RX,
+				 S32G_CLK_SERDES1_LANE0_CDR,
+				 S32G_CLK_PFE_MAC0_REF_DIV);
+static struct s32gen1_clk cgm2_mux4_clk =
+		S32GEN1_MODULE_CLK(cgm2_mux4);
+static struct s32gen1_part_block pfe0_rx_block =
+		S32GEN1_PART_BLOCK_NO_STATUS(cgm2_mux4_clk, 2,
+					     s32gen1_part_block0);
+static struct s32gen1_clk pfe_mac0_rx_clk =
+		S32GEN1_FREQ_MODULE_CLK(pfe0_rx_block, 2500000, 312500000);
+
+/* PFE_MAC1_TX */
+static struct s32gen1_fixed_clock pfe_mac1_ext_tx =
+		S32GEN1_FIXED_CLK_INIT();
+static struct s32gen1_clk pfe_mac1_ext_tx_clk =
+		S32GEN1_MODULE_CLK(pfe_mac1_ext_tx);
+
+static struct s32gen1_fixed_clock pfe_mac1_ext_ref =
+		S32GEN1_FIXED_CLK_INIT();
+static struct s32gen1_clk pfe_mac1_ext_ref_clk =
+		S32GEN1_MODULE_CLK(pfe_mac1_ext_ref);
+
+static struct s32gen1_mux cgm2_mux2 =
+		S32GEN1_MUX_INIT(S32GEN1_CGM2, 2, 5,
+				 S32GEN1_CLK_FIRC,
+				 S32GEN1_CLK_PERIPH_PLL_PHI5,
+				 S32G_CLK_PFE_MAC1_EXT_TX,
+				 S32G_CLK_PFE_MAC1_EXT_REF,
+				 S32G_CLK_SERDES1_LANE1_TX);
+static struct s32gen1_clk cgm2_mux2_clk =
+		S32GEN1_MODULE_CLK(cgm2_mux2);
+static struct s32gen1_cgm_div cgm2_mux2_div =
+		S32GEN1_CGM_DIV_INIT(cgm2_mux2_clk, 0);
+static struct s32gen1_part_block pfe1_tx_block =
+		S32GEN1_PART_BLOCK_NO_STATUS(cgm2_mux2_div, 2,
+					     s32gen1_part_block1);
+static struct s32gen1_clk pfe_mac1_tx_clk =
+		S32GEN1_FREQ_MODULE_CLK(pfe1_tx_block, 2500000, 125 * MHZ);
+
+/* PFE_MAC1_REF_DIV */
+static struct s32gen1_mux cgm2_mux8 =
+		S32GEN1_MUX_INIT(S32GEN1_CGM2, 8, 2,
+				 S32GEN1_CLK_FIRC,
+				 S32G_CLK_PFE_MAC1_EXT_REF);
+static struct s32gen1_clk cgm2_mux8_clk =
+		S32GEN1_MODULE_CLK(cgm2_mux8);
+static struct s32gen1_cgm_div cgm2_mux8_div =
+		S32GEN1_CGM_DIV_INIT(cgm2_mux8_clk, 0);
+static struct s32gen1_part_block pfe1_ref_block =
+		S32GEN1_PART_BLOCK_NO_STATUS(cgm2_mux8_div, 2,
+					     s32gen1_part_block1);
+static struct s32gen1_clk pfe_mac1_ref_div_clk =
+		S32GEN1_FREQ_MODULE_CLK(pfe1_ref_block, 0, 50 * MHZ);
+
+/* PFE_MAC1_RX */
+static struct s32gen1_fixed_clock pfe_mac1_ext_rx =
+		S32GEN1_FIXED_CLK_INIT();
+static struct s32gen1_clk pfe_mac1_ext_rx_clk =
+		S32GEN1_MODULE_CLK(pfe_mac1_ext_rx);
+
+static struct s32gen1_mux cgm2_mux5 =
+		S32GEN1_MUX_INIT(S32GEN1_CGM2, 5, 4,
+				 S32GEN1_CLK_FIRC,
+				 S32G_CLK_PFE_MAC1_EXT_RX,
+				 S32G_CLK_PFE_MAC1_REF_DIV,
+				 S32G_CLK_SERDES1_LANE1_CDR);
+static struct s32gen1_clk cgm2_mux5_clk =
+		S32GEN1_MODULE_CLK(cgm2_mux5);
+static struct s32gen1_part_block pfe1_rx_block =
+		S32GEN1_PART_BLOCK_NO_STATUS(cgm2_mux5_clk, 2,
+					     s32gen1_part_block1);
+static struct s32gen1_clk pfe_mac1_rx_clk =
+		S32GEN1_FREQ_MODULE_CLK(pfe1_rx_block, 2500000, 125 * MHZ);
+
+/* PFE_MAC2_TX */
+static struct s32gen1_fixed_clock serdes0_lane1_tx =
+		S32GEN1_FIXED_CLK_INIT();
+static struct s32gen1_clk serdes0_lane1_tx_clk =
+		S32GEN1_MODULE_CLK(serdes0_lane1_tx);
+
+static struct s32gen1_fixed_clock pfe_mac2_ext_tx =
+		S32GEN1_FIXED_CLK_INIT();
+static struct s32gen1_clk pfe_mac2_ext_tx_clk =
+		S32GEN1_MODULE_CLK(pfe_mac2_ext_tx);
+
+static struct s32gen1_fixed_clock pfe_mac2_ext_ref =
+		S32GEN1_FIXED_CLK_INIT();
+static struct s32gen1_clk pfe_mac2_ext_ref_clk =
+		S32GEN1_MODULE_CLK(pfe_mac2_ext_ref);
+
+static struct s32gen1_mux cgm2_mux3 =
+		S32GEN1_MUX_INIT(S32GEN1_CGM2, 3, 5,
+				 S32GEN1_CLK_FIRC,
+				 S32GEN1_CLK_PERIPH_PLL_PHI5,
+				 S32G_CLK_PFE_MAC2_EXT_TX,
+				 S32G_CLK_PFE_MAC2_EXT_REF,
+				 S32G_CLK_SERDES0_LANE1_TX);
+static struct s32gen1_clk cgm2_mux3_clk =
+		S32GEN1_MODULE_CLK(cgm2_mux3);
+static struct s32gen1_cgm_div cgm2_mux3_div =
+		S32GEN1_CGM_DIV_INIT(cgm2_mux3_clk, 0);
+static struct s32gen1_part_block pfe2_tx_block =
+		S32GEN1_PART_BLOCK_NO_STATUS(cgm2_mux3_div, 2,
+					     s32gen1_part_block2);
+static struct s32gen1_clk pfe_mac2_tx_clk =
+		S32GEN1_FREQ_MODULE_CLK(pfe2_tx_block, 2500000, 125 * MHZ);
+
+/* PFE_MAC2_REF_DIV */
+static struct s32gen1_mux cgm2_mux9 =
+		S32GEN1_MUX_INIT(S32GEN1_CGM2, 9, 2,
+				 S32GEN1_CLK_FIRC,
+				 S32G_CLK_PFE_MAC2_EXT_REF);
+static struct s32gen1_clk cgm2_mux9_clk =
+		S32GEN1_MODULE_CLK(cgm2_mux9);
+static struct s32gen1_cgm_div cgm2_mux9_div =
+		S32GEN1_CGM_DIV_INIT(cgm2_mux9_clk, 0);
+static struct s32gen1_part_block pfe2_ref_block =
+		S32GEN1_PART_BLOCK_NO_STATUS(cgm2_mux9_div, 2,
+					     s32gen1_part_block2);
+static struct s32gen1_clk pfe_mac2_ref_div_clk =
+		S32GEN1_FREQ_MODULE_CLK(pfe2_ref_block, 0, 50 * MHZ);
+
+/* PFE_MAC2_RX */
+static struct s32gen1_fixed_clock pfe_mac2_ext_rx =
+		S32GEN1_FIXED_CLK_INIT();
+static struct s32gen1_clk pfe_mac2_ext_rx_clk =
+		S32GEN1_MODULE_CLK(pfe_mac2_ext_rx);
+
+static struct s32gen1_fixed_clock serdes0_lane1_cdr =
+		S32GEN1_FIXED_CLK_INIT();
+static struct s32gen1_clk serdes0_lane1_cdr_clk =
+		S32GEN1_MODULE_CLK(serdes0_lane1_cdr);
+
+static struct s32gen1_mux cgm2_mux6 =
+		S32GEN1_MUX_INIT(S32GEN1_CGM2, 6, 4,
+				 S32GEN1_CLK_FIRC,
+				 S32G_CLK_PFE_MAC2_EXT_RX,
+				 S32G_CLK_PFE_MAC2_REF_DIV,
+				 S32G_CLK_SERDES0_LANE1_CDR);
+static struct s32gen1_clk cgm2_mux6_clk =
+		S32GEN1_MODULE_CLK(cgm2_mux6);
+static struct s32gen1_part_block pfe2_rx_block =
+		S32GEN1_PART_BLOCK_NO_STATUS(cgm2_mux6_clk, 2,
+					     s32gen1_part_block2);
+static struct s32gen1_clk pfe_mac2_rx_clk =
+		S32GEN1_FREQ_MODULE_CLK(pfe2_rx_block, 2500000, 125 * MHZ);
+
+/* PFE_SYS_CLK */
+static struct s32gen1_mux cgm2_mux0 =
+		S32GEN1_MUX_INIT(S32GEN1_CGM2, 0, 2,
+				 S32GEN1_CLK_FIRC,
+				 S32G_CLK_ACCEL_PLL_PHI1);
+static struct s32gen1_clk cgm2_mux0_clk =
+		S32GEN1_MODULE_CLK(cgm2_mux0);
+static struct s32gen1_cgm_div cgm2_mux0_div =
+		S32GEN1_CGM_DIV_INIT(cgm2_mux0_clk, 0);
+static struct s32gen1_part_block pfe_sys_block =
+		S32GEN1_PART_BLOCK_NO_STATUS(cgm2_mux0_div, 2,
+					     s32gen1_part_block3);
+static struct s32gen1_clk pfe_pe_clk =
+		S32GEN1_FREQ_MODULE_CLK(pfe_sys_block, 0, 600 * MHZ);
+static struct s32gen1_fixed_div pfe_sys_div =
+		S32GEN1_FIXED_DIV_INIT(pfe_sys_block, 2);
+static struct s32gen1_clk pfe_sys_clk =
+		S32GEN1_FREQ_MODULE_CLK(pfe_sys_div, 0, 300 * MHZ);
+
+static struct s32gen1_clk *s32g_clocks[] = {
+	/* PFE_MAC0 */
+	[ARR_CLK(S32G_CLK_PFE_MAC0_RX)] = &pfe_mac0_rx_clk,
+	[ARR_CLK(S32G_CLK_PFE_MAC0_TX_DIV)] = &pfe_mac0_tx_div_clk,
+	[ARR_CLK(S32G_CLK_MC_CGM2_MUX1)] = &cgm2_mux1_clk,
+	[ARR_CLK(S32G_CLK_MC_CGM2_MUX4)] = &cgm2_mux4_clk,
+	[ARR_CLK(S32G_CLK_MC_CGM2_MUX7)] = &cgm2_mux7_clk,
+	/* PFE_MAC1 */
+	[ARR_CLK(S32G_CLK_PFE_MAC1_RX)] = &pfe_mac1_rx_clk,
+	[ARR_CLK(S32G_CLK_PFE_MAC1_TX)] = &pfe_mac1_tx_clk,
+	[ARR_CLK(S32G_CLK_MC_CGM2_MUX2)] = &cgm2_mux2_clk,
+	[ARR_CLK(S32G_CLK_MC_CGM2_MUX5)] = &cgm2_mux5_clk,
+	[ARR_CLK(S32G_CLK_MC_CGM2_MUX8)] = &cgm2_mux8_clk,
+	/* PFE_MAC2 */
+	[ARR_CLK(S32G_CLK_PFE_MAC2_RX)] = &pfe_mac2_rx_clk,
+	[ARR_CLK(S32G_CLK_PFE_MAC2_TX)] = &pfe_mac2_tx_clk,
+	[ARR_CLK(S32G_CLK_MC_CGM2_MUX3)] = &cgm2_mux3_clk,
+	[ARR_CLK(S32G_CLK_MC_CGM2_MUX6)] = &cgm2_mux6_clk,
+	[ARR_CLK(S32G_CLK_MC_CGM2_MUX9)] = &cgm2_mux9_clk,
+	[ARR_CLK(S32G_CLK_MC_CGM2_MUX0)] = &cgm2_mux0_clk,
+	[ARR_CLK(S32G_CLK_PFE_SYS)] = &pfe_sys_clk,
+	[ARR_CLK(S32G_CLK_PFE_PE)] = &pfe_pe_clk,
+};
+
+static struct s32gen1_clk *s32g_cc_clocks[] = {
+	[CC_ARR_CLK(S32GEN1_CLK_PER)] = &per_clk,
+	[CC_ARR_CLK(S32GEN1_CLK_CAN_PE)] = &can_pe_clk,
+	[CC_ARR_CLK(S32G_CLK_ACCEL_PLL_PHI0)] = &accel_pll_phi0_clk,
+	[CC_ARR_CLK(S32G_CLK_ACCEL_PLL_PHI1)] = &accel_pll_phi1_clk,
+	[CC_ARR_CLK(S32G_CLK_SERDES0_LANE1_CDR)] = &serdes0_lane1_cdr_clk,
+	[CC_ARR_CLK(S32G_CLK_SERDES0_LANE1_TX)] = &serdes0_lane1_tx_clk,
+	[CC_ARR_CLK(S32G_CLK_PFE_MAC0_EXT_TX)] = &pfe_mac0_ext_tx_clk,
+	[CC_ARR_CLK(S32G_CLK_PFE_MAC0_EXT_RX)] = &pfe_mac0_ext_rx_clk,
+	[CC_ARR_CLK(S32G_CLK_PFE_MAC0_EXT_REF)] = &pfe_mac0_ext_ref_clk,
+	[CC_ARR_CLK(S32G_CLK_PFE_MAC1_EXT_TX)] = &pfe_mac1_ext_tx_clk,
+	[CC_ARR_CLK(S32G_CLK_PFE_MAC1_EXT_RX)] = &pfe_mac1_ext_rx_clk,
+	[CC_ARR_CLK(S32G_CLK_PFE_MAC1_EXT_REF)] = &pfe_mac1_ext_ref_clk,
+	[CC_ARR_CLK(S32G_CLK_PFE_MAC2_EXT_TX)] = &pfe_mac2_ext_tx_clk,
+	[CC_ARR_CLK(S32G_CLK_PFE_MAC2_EXT_RX)] = &pfe_mac2_ext_rx_clk,
+	[CC_ARR_CLK(S32G_CLK_PFE_MAC2_EXT_REF)] = &pfe_mac2_ext_ref_clk,
+	[CC_ARR_CLK(S32G_CLK_SERDES1_LANE0_TX)] = &serdes1_lane0_ext_tx_clk,
+	[CC_ARR_CLK(S32G_CLK_SERDES1_LANE0_CDR)] = &serdes1_lane0_cdr_clk,
+	[CC_ARR_CLK(S32G_CLK_PFE_MAC0_REF_DIV)] = &pfe_mac0_ref_div_clk,
+	[CC_ARR_CLK(S32G_CLK_PFE_MAC1_REF_DIV)] = &pfe_mac1_ref_div_clk,
+	[CC_ARR_CLK(S32G_CLK_PFE_MAC2_REF_DIV)] = &pfe_mac2_ref_div_clk,
+	[CC_ARR_CLK(S32G_CLK_SERDES1_LANE1_TX)] = &serdes1_lane1_tx_clk,
+	[CC_ARR_CLK(S32G_CLK_SERDES1_LANE1_CDR)] = &serdes1_lane1_cdr_clk,
+};
+
+struct s32gen1_clk *get_plat_cc_clock(uint32_t id)
+{
+	uint32_t index = s32gen1_platclk2mux(id);
+
+	if (index >= ARRAY_SIZE(s32g_cc_clocks) || !s32g_cc_clocks[index])
+		return s32g_get_plat_cc_clock(id);
+
+	return s32g_cc_clocks[index];
+}
+
+struct s32gen1_clk *get_plat_clock(uint32_t id)
+{
+	uint32_t index;
+
+	if (id < S32GEN1_PLAT_CLK_ID_BASE)
+		return NULL;
+
+	index = id - S32GEN1_PLAT_CLK_ID_BASE;
+
+	if (index >= ARRAY_SIZE(s32g_clocks) || !s32g_clocks[index])
+		return s32g_get_plat_clock(id);
+
+	return s32g_clocks[index];
+}
diff --git a/drivers/nxp/s32g/clk/s32gen1_clk.c b/drivers/nxp/s32g/clk/s32gen1_clk.c
index 7fad35263..f8f76ebef 100644
--- a/drivers/nxp/s32g/clk/s32gen1_clk.c
+++ b/drivers/nxp/s32g/clk/s32gen1_clk.c
@@ -1,6 +1,6 @@
 // SPDX-License-Identifier: BSD-3-Clause
 /*
- * Copyright 2020 NXP
+ * Copyright 2020-2021 NXP
  */
 #include <dt-bindings/clock/s32gen1-clock.h>
 #include <clk/s32gen1_clk_funcs.h>
@@ -327,87 +327,17 @@ static struct s32gen1_fixed_div linflexd_div =
 static struct s32gen1_clk linflexd_clk =
 		S32GEN1_FREQ_MODULE_CLK(linflexd_div, 0, 66666666);
 
-/* GMAC_TS_CLK */
-static struct s32gen1_fixed_clock gmac_ext_ts =
-		S32GEN1_FIXED_CLK_INIT();
-static struct s32gen1_clk gmac_ext_ts_clk =
-		S32GEN1_MODULE_CLK(gmac_ext_ts);
-static struct s32gen1_mux cgm0_mux9 =
-		S32GEN1_MUX_INIT(S32GEN1_CGM0, 9, 3,
-				 S32GEN1_CLK_FIRC,
-				 S32GEN1_CLK_PERIPH_PLL_PHI4,
-				 S32GEN1_CLK_GMAC0_EXT_TS);
-static struct s32gen1_clk cgm0_mux9_clk =
-		S32GEN1_MODULE_CLK(cgm0_mux9);
-static struct s32gen1_cgm_div gmac_ts_div =
-		S32GEN1_CGM_DIV_INIT(cgm0_mux9_clk, 0);
-static struct s32gen1_clk gmac_ts_clk =
-		S32GEN1_FREQ_MODULE_CLK(gmac_ts_div, 5 * MHZ, 200 * MHZ);
-
-/* GMAC0_TX_CLK */
-static struct s32gen1_fixed_clock gmac0_ext_tx =
-		S32GEN1_FIXED_CLK_INIT();
-static struct s32gen1_clk gmac0_ext_tx_clk =
-		S32GEN1_MODULE_CLK(gmac0_ext_tx);
-
-static struct s32gen1_fixed_clock gmac0_ext_ref =
-		S32GEN1_FIXED_CLK_INIT();
-static struct s32gen1_clk gmac0_ext_ref_clk =
-		S32GEN1_MODULE_CLK(gmac0_ext_ref);
-
+/* S32GEN1_CLK_SERDES0_LANE0_TX */
 static struct s32gen1_fixed_clock serdes0_lane0_tx =
 		S32GEN1_FIXED_CLK_INIT();
 static struct s32gen1_clk serdes0_lane0_tx_clk =
 		S32GEN1_MODULE_CLK(serdes0_lane0_tx);
 
-static struct s32gen1_mux cgm0_mux10 =
-		S32GEN1_MUX_INIT(S32GEN1_CGM0, 10, 5,
-				 S32GEN1_CLK_FIRC,
-				 S32GEN1_CLK_PERIPH_PLL_PHI5,
-				 S32GEN1_CLK_SERDES0_LANE0_TX,
-				 S32GEN1_CLK_GMAC0_EXT_TX,
-				 S32GEN1_CLK_GMAC0_EXT_REF);
-static struct s32gen1_clk cgm0_mux10_clk =
-		S32GEN1_MODULE_CLK(cgm0_mux10);
-static struct s32gen1_cgm_div gmac_tx_div =
-		S32GEN1_CGM_DIV_INIT(cgm0_mux10_clk, 0);
-static struct s32gen1_clk gmac_tx_clk =
-		S32GEN1_FREQ_MODULE_CLK(gmac_tx_div, 2500000, 125 * MHZ);
-
-/* GMAC0_RX_CLK */
 static struct s32gen1_fixed_clock serdes0_lane0_cdr =
 		S32GEN1_FIXED_CLK_INIT();
 static struct s32gen1_clk serdes0_lane0_cdr_clk =
 		S32GEN1_MODULE_CLK(serdes0_lane0_cdr);
 
-static struct s32gen1_fixed_clock gmac0_ext_rx =
-		S32GEN1_FIXED_CLK_INIT();
-static struct s32gen1_clk gmac0_ext_rx_clk =
-		S32GEN1_MODULE_CLK(gmac0_ext_rx);
-
-static struct s32gen1_mux cgm0_mux11 =
-		S32GEN1_MUX_INIT(S32GEN1_CGM0, 11, 4,
-				 S32GEN1_CLK_FIRC,
-				 S32GEN1_CLK_GMAC0_REF_DIV,
-				 S32GEN1_CLK_GMAC0_EXT_RX,
-				 S32GEN1_CLK_SERDES0_LANE0_CDR);
-static struct s32gen1_clk cgm0_mux11_clk =
-		S32GEN1_MODULE_CLK(cgm0_mux11);
-static struct s32gen1_clk gmac_rx_clk =
-		S32GEN1_CHILD_CLK(cgm0_mux11_clk, 2500000, 125 * MHZ);
-
-/* GMAC0_REF_DIV_CLK */
-static struct s32gen1_mux cgm0_mux15 =
-		S32GEN1_SHARED_MUX_INIT(S32GEN1_CGM0, 15, 2,
-					S32GEN1_CLK_FIRC,
-					S32GEN1_CLK_GMAC0_EXT_REF);
-static struct s32gen1_clk cgm0_mux15_clk =
-		S32GEN1_MODULE_CLK(cgm0_mux15);
-static struct s32gen1_clk gmac0_ref_div_clk =
-		S32GEN1_CHILD_CLK(cgm0_mux15_clk, 0, 50 * MHZ);
-static struct s32gen1_clk gmac0_ref_clk =
-		S32GEN1_CHILD_CLK(cgm0_mux15_clk, 0, 50 * MHZ);
-
 /* SPI_CLK */
 static struct s32gen1_mux cgm0_mux16 =
 		S32GEN1_MUX_INIT(S32GEN1_CGM0, 16, 2,
@@ -596,21 +526,8 @@ static struct s32gen1_clk *plat_clocks[] = {
 	[CC_ARR_CLK(S32GEN1_CLK_MC_CGM0_MUX8)] = &cgm0_mux8_clk,
 	[CC_ARR_CLK(S32GEN1_CLK_LIN_BAUD)] = &lin_baud_clk,
 	[CC_ARR_CLK(S32GEN1_CLK_LINFLEXD)] = &linflexd_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_MC_CGM0_MUX10)] = &cgm0_mux10_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_TX)] = &gmac_tx_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_EXT_TS)] = &gmac_ext_ts_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_MC_CGM0_MUX9)] = &cgm0_mux9_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_TS)] = &gmac_ts_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_EXT_TX)] = &gmac0_ext_tx_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_EXT_REF)] = &gmac0_ext_ref_clk,
 	[CC_ARR_CLK(S32GEN1_CLK_SERDES0_LANE0_CDR)] = &serdes0_lane0_cdr_clk,
 	[CC_ARR_CLK(S32GEN1_CLK_SERDES0_LANE0_TX)] = &serdes0_lane0_tx_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_EXT_RX)] = &gmac0_ext_rx_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_MC_CGM0_MUX11)] = &cgm0_mux11_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_RX)] = &gmac_rx_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_MC_CGM0_MUX15)] = &cgm0_mux15_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_REF_DIV)] = &gmac0_ref_div_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_REF)] = &gmac0_ref_clk,
 	[CC_ARR_CLK(S32GEN1_CLK_MC_CGM0_MUX16)] = &cgm0_mux16_clk,
 	[CC_ARR_CLK(S32GEN1_CLK_SPI)] = &spi_clk,
 	[CC_ARR_CLK(S32GEN1_CLK_MC_CGM0_MUX12)] = &cgm0_mux12_clk,
@@ -644,7 +561,7 @@ struct s32gen1_clk *get_clock(uint32_t id)
 	if (id >= S32GEN1_PLAT_CLK_ID_BASE)
 		return get_plat_clock(id);
 
-	index = id - S32GEN1_CLK_ID_BASE;
+	index = s32gen1_platclk2mux(id);
 
 	if (index >= ARRAY_SIZE(plat_clocks) || !plat_clocks[index])
 		return get_plat_cc_clock(id);
diff --git a/include/drivers/nxp/s32g/clk/s32g_clk_funcs.h b/include/drivers/nxp/s32g/clk/s32g_clk_funcs.h
new file mode 100644
index 000000000..6babffa81
--- /dev/null
+++ b/include/drivers/nxp/s32g/clk/s32g_clk_funcs.h
@@ -0,0 +1,13 @@
+/* SPDX-License-Identifier: BSD-3-Clause */
+/*
+ * Copyright 2021 NXP
+ */
+#ifndef S32G_CLK_FUNCS_H
+#define S32G_CLK_FUNCS_H
+#include <clk/s32gen1_clk_funcs.h>
+
+struct s32gen1_clk *s32g_get_plat_cc_clock(uint32_t id);
+struct s32gen1_clk *s32g_get_plat_clock(uint32_t id);
+
+#endif /* S32G_CLK_FUNCS_H */
+
diff --git a/include/drivers/nxp/s32g/clk/s32gen1_clk_funcs.h b/include/drivers/nxp/s32g/clk/s32gen1_clk_funcs.h
index dea49dca2..801748342 100644
--- a/include/drivers/nxp/s32g/clk/s32gen1_clk_funcs.h
+++ b/include/drivers/nxp/s32g/clk/s32gen1_clk_funcs.h
@@ -1,6 +1,6 @@
 /* SPDX-License-Identifier: BSD-3-Clause */
 /*
- * Copyright 2020 NXP
+ * Copyright 2020-2021 NXP
  */
 #ifndef S32GEN1_CLK_FUNCS_H
 #define S32GEN1_CLK_FUNCS_H
@@ -26,6 +26,8 @@ int pllclk2clk(uint32_t pll_clk_id, uint32_t *clk_id);
 int get_pll_mfi_mfn(unsigned long pll_vco, unsigned long ref_freq,
 		    uint32_t *mfi, uint32_t *mfn);
 
+uint32_t s32gen1_platclk2mux(uint32_t clk_id);
+
 static inline struct s32gen1_clk_priv *s32gen1_get_clk_priv(struct clk *c)
 {
 	return get_clk_drv_data(clk2clk_drv(c));
diff --git a/plat/nxp/s32g/platform.mk b/plat/nxp/s32g/platform.mk
index 23fa2471a..a5c8c9921 100644
--- a/plat/nxp/s32g/platform.mk
+++ b/plat/nxp/s32g/platform.mk
@@ -47,6 +47,7 @@ PLAT_BL_COMMON_SOURCES	+= plat/nxp/s32g/s32g_lowlevel_common.S \
 			   drivers/nxp/s32g/clk/enable_clk.c \
 			   drivers/nxp/s32g/clk/get_rate.c \
 			   drivers/nxp/s32g/clk/plat_clk.c \
+			   drivers/nxp/s32g/clk/s32g_clk.c \
 			   drivers/nxp/s32g/clk/s32g274a_clk.c \
 			   drivers/nxp/s32g/clk/s32gen1_clk.c \
 			   drivers/nxp/s32g/rst/s32gen1_rst.c \
-- 
2.17.1

