From 9c5deb01f904b2d52e78dadd947a857c0458eaa5 Mon Sep 17 00:00:00 2001
From: Ghennadi Procopciuc <Ghennadi.Procopciuc@nxp.com>
Date: Mon, 25 Jan 2021 11:59:28 +0200
Subject: [PATCH 199/269] s32g: Adapt DDR retention mode glue code for firmware
 2020-06

Issue: ALB-5722
Upstream-Status: Pending 

Signed-off-by: Ghennadi Procopciuc <Ghennadi.Procopciuc@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 drivers/nxp/s32g/ddr/ddr_init.c               |   5 +
 drivers/nxp/s32g/ddr/ddr_utils_mmio.c         |   2 -
 drivers/nxp/s32g/ddr/ddrss.c                  | 332 ++++++------------
 plat/nxp/s32g/bl31_ssram/bl31_ssram.mk        |   1 +
 .../s32g/bl31_ssram/include/ssram_mailbox.h   |   4 +-
 5 files changed, 114 insertions(+), 230 deletions(-)

diff --git a/drivers/nxp/s32g/ddr/ddr_init.c b/drivers/nxp/s32g/ddr/ddr_init.c
index a652c2747..c7b8b94b5 100644
--- a/drivers/nxp/s32g/ddr/ddr_init.c
+++ b/drivers/nxp/s32g/ddr/ddr_init.c
@@ -30,6 +30,9 @@
 
 #include <ddr/ddr_init.h>
 
+#include <ddr/ddrss.h>
+#include <ssram_mailbox.h>
+
 static uint32_t execute_training(struct ddrss_config *config);
 static void set_optimal_pll(void);
 static uint32_t load_phy_image(uint32_t start_addr, size_t size,
@@ -153,6 +156,8 @@ static uint32_t execute_training(struct ddrss_config *config)
 			return ret;
 	}
 
+	store_csr(BL31SSRAM_CSR_BASE);
+
 	mmio_write_32(MICROCONT_MUX_SEL, UNLOCK_CSR_ACCESS);
 	/*  Load pie image after training has executed */
 	ret = load_register_cfg(config->pie_cfg_size, config->pie_cfg);
diff --git a/drivers/nxp/s32g/ddr/ddr_utils_mmio.c b/drivers/nxp/s32g/ddr/ddr_utils_mmio.c
index a64f18446..3c2cdd58a 100644
--- a/drivers/nxp/s32g/ddr/ddr_utils_mmio.c
+++ b/drivers/nxp/s32g/ddr/ddr_utils_mmio.c
@@ -209,8 +209,6 @@ uint32_t post_train_setup(void)
 		tmp32 = mmio_read_32(DDR_PHYA_MASTER0_CALBUSY);
 	} while ((tmp32 & 0x1) != 0);
 
-	store_csr(BL31SSRAM_CSR_BASE);
-
 	/* Set SWCTL.sw_done to 0 */
 	mmio_write_32(DDRC_BASE_ADDR + OFFSET_DDRC_SWCTL,
 		      DDRC_SWCTL_SWDONE_ENABLE);
diff --git a/drivers/nxp/s32g/ddr/ddrss.c b/drivers/nxp/s32g/ddr/ddrss.c
index 00d55b571..88d8699b3 100644
--- a/drivers/nxp/s32g/ddr/ddrss.c
+++ b/drivers/nxp/s32g/ddr/ddrss.c
@@ -3,77 +3,49 @@
  *
  * SPDX-License-Identifier: BSD-3-Clause
  */
-#include <stdbool.h>
-#include <lib/utils_def.h>
 #include <common/debug.h>
-#include <nxp/s32g/ddr/ddrss.h>
 #include <ddr/ddr_utils.h>
-#include "s32g_mc_rgm.h"
-#include "platform.h"
+#include <ddr/ddr_utils.h>
+#include <lib/utils_def.h>
+#include <nxp/s32g/ddr/ddrss.h>
+#include <platform.h>
+#include <s32g_mc_rgm.h>
+#include <ssram_mailbox.h>
+#include <stdbool.h>
 
-#define OFFSET_DDRC_PSTAT	0x4
+#define OFFSET_DDRC_PSTAT		0x4
 #define SCRUB_EN_MASK			BIT(0)
 #define SCRUB_BUSY_MASK			BIT(0)
-#define OFFSET_DDRC_INIT0	0xd0
-
-#define PORT_EN_MASK			BIT(0)
-
+#define OFFSET_DDRC_INIT0		0xd0
 #define SELFREF_SW_MASK			BIT(5)
-
-#define OPERATING_MODE_NORMAL		(0x1)
 #define SELFREF_TYPE_MASK		(BIT(4) | BIT(5))
 #define OPERATING_MODE_MASK		(BIT(0) | BIT(1) | BIT(2))
-#define CALBUSY_MASK			BIT(0)
-#define CTL_IDLE_EN_MASK		BIT(4)
 #define DFI_INIT_COMPLETE_MASK		BIT(0)
-#define DFI_INIT_COMPLETE_EN_MASK	BIT(0)
 #define DFI_INIT_START_MASK		BIT(5)
-#define DIS_DYN_ADR_TRI_MASK		BIT(6)
-
 #define DDRSS_BASE_ADDR			0x40380000
 #define DDR_SUBSYSTEM			(DDRSS_BASE_ADDR + 0x50000)
-#define REG_GRP0			(DDR_SUBSYSTEM + 0x0)
 #define DWC_DDRPHYA_APBONLY0		(DDRSS_BASE_ADDR + 0x400)
 #define MICROCONTMUXSEL			(DWC_DDRPHYA_APBONLY0 + 0x0)
 #define MICROCONTMUXSEL_MASK		BIT(0)
-#define UCTSHADOWREGS			(DWC_DDRPHYA_APBONLY0 + 0x4)
-#define UCTWRITEPROTSHADOW_MASK		BIT(0)
-#define DCTWRITEPROT			(DWC_DDRPHYA_APBONLY0 + 0xc)
-#define DCTWRITEPROT_MASK		BIT(0)
-#define UCTWRITEONLYSHADOW		(DWC_DDRPHYA_APBONLY0 + 0x10)
-#define MICRORESET			(DWC_DDRPHYA_APBONLY0 + 0x20)
-#define RESETTOMICRO_MASK		BIT(3)
-#define STALLTOMICRO_MASK		BIT(0)
 #define SW_DONE_ACK_MASK		BIT(0)
 #define SW_DONE_MASK			BIT(0)
-#define EN_DFI_DRAM_CLK_DISABLE_MASK	BIT(3)
-#define SELFREF_EN_MASK			BIT(0)
-#define POWERDOWN_EN_MASK		BIT(1)
-#define DIS_AUTO_REFRESH_MASK		BIT(0)
-#define DFI1_ENABLED_MASK		BIT(0)
 #define SKIP_DRAM_INIT_MASK		(BIT(30) | BIT(31))
-
-#define AXI_PARITY_EN_MASK		(0x1ff0)
-#define AXI_PARITY_EN(e)		((e << 4) & AXI_PARITY_EN_MASK)
-#define AXI_PARITY_TYPE_MASK		(0x1ff0000)
-#define AXI_PARITY_TYPE(t)		((t << 16) & AXI_PARITY_TYPE_MASK)
-
 #define DWC_DDRPHYA_DRTUB0		(DDRSS_BASE_ADDR + 0xbd0)
 #define UCCLKHCLKENABLES		(DWC_DDRPHYA_DRTUB0 + 0x1c)
 #define UCCLKEN_MASK			BIT(0)
 #define HCLKEN_MASK			BIT(1)
-
 #define DDR_GPR				(0x4007c600ul)
+#define DDR_CONFIG_0			(DDR_GPR + 0x00)
 #define DDR_RET_CONTROL			(DDR_GPR + 0x1c)
 #define DDR_RET_CONTROL_MASK		BIT(0)
-
-#define DFI_FREQUENCY(f)		(f << 8)
+#define DDR_CONFIG_0_MEM_RET		BIT(14)
+#define DFI_FREQUENCY(f)		((f) << 8)
 #define SELFREF_STATE_SRPD		(0x2 << 8)
 #define SELFREF_STATE_MASK		(BIT(8) | BIT(9))
 #define SELFREF_TYPE_NOT_UNDER_AUTO_SR_CTRL	(0x2 << 4)
 #define OPERATING_MODE_SELF_REFRESH	(0x3)
 
-static const uintptr_t csr_to_store[] = {
+static const uint32_t csr_to_store[] = {
 	0x00001690,	/* DWC_DDRPHYA_MASTER0_VREFINGLOBAL_P0 */
 	0x00001718,	/* DWC_DDRPHYA_MASTER0_PLLCTRL3 */
 	0x0001451c,	/* DWC_DDRPHYA_DBYTE0_DQDQSRCVCNTRL_B0_P0 */
@@ -354,36 +326,91 @@ static const uintptr_t csr_to_store[] = {
 	0x00016430,	/* DWC_DDRPHYA_DBYTE1_TSMBYTE0 */
 	0x00018430,	/* DWC_DDRPHYA_DBYTE2_TSMBYTE0 */
 	0x0001a430,	/* DWC_DDRPHYA_DBYTE3_TSMBYTE0 */
+	/* 2D training */
+	0x00014730,	/* DWC_DDRPHYA_DBYTE0_RXCLKDLYTG0_U0_P0 */
+	0x00016730,	/* DWC_DDRPHYA_DBYTE1_RXCLKDLYTG0_U0_P0 */
+	0x00018730,	/* DWC_DDRPHYA_DBYTE2_RXCLKDLYTG0_U0_P0 */
+	0x0001a730,	/* DWC_DDRPHYA_DBYTE3_RXCLKDLYTG0_U0_P0 */
+	0x00014734,	/* DWC_DDRPHYA_DBYTE0_RXCLKDLYTG0_U1_P0 */
+	0x00016734,	/* DWC_DDRPHYA_DBYTE1_RXCLKDLYTG0_U1_P0 */
+	0x00018734,	/* DWC_DDRPHYA_DBYTE2_RXCLKDLYTG0_U1_P0 */
+	0x0001a734,	/* DWC_DDRPHYA_DBYTE3_RXCLKDLYTG0_U1_P0 */
+	0x00014750,	/* DWC_DDRPHYA_DBYTE0_RXCLKDLYTG1_U0_P0 */
+	0x00016750,	/* DWC_DDRPHYA_DBYTE1_RXCLKDLYTG1_U0_P0 */
+	0x00018750,	/* DWC_DDRPHYA_DBYTE2_RXCLKDLYTG1_U0_P0 */
+	0x0001a750,	/* DWC_DDRPHYA_DBYTE3_RXCLKDLYTG1_U0_P0 */
+	0x00014754,	/* DWC_DDRPHYA_DBYTE0_RXCLKDLYTG1_U1_P0 */
+	0x00016754,	/* DWC_DDRPHYA_DBYTE1_RXCLKDLYTG1_U1_P0 */
+	0x00018754,	/* DWC_DDRPHYA_DBYTE2_RXCLKDLYTG1_U1_P0 */
+	0x0001a754,	/* DWC_DDRPHYA_DBYTE3_RXCLKDLYTG1_U1_P0 */
+	0x000144f8,	/* DWC_DDRPHYA_DBYTE0_VREFDAC0_R8 */
+	0x000164f8,	/* DWC_DDRPHYA_DBYTE1_VREFDAC0_R8 */
+	0x000184f8,	/* DWC_DDRPHYA_DBYTE2_VREFDAC0_R8 */
+	0x0001a4f8,	/* DWC_DDRPHYA_DBYTE3_VREFDAC0_R8 */
+	0x000144f4,	/* DWC_DDRPHYA_DBYTE0_VREFDAC0_R7 */
+	0x000164f4,	/* DWC_DDRPHYA_DBYTE1_VREFDAC0_R7 */
+	0x000184f4,	/* DWC_DDRPHYA_DBYTE2_VREFDAC0_R7 */
+	0x0001a4f4,	/* DWC_DDRPHYA_DBYTE3_VREFDAC0_R7 */
+	0x000144f0,	/* DWC_DDRPHYA_DBYTE0_VREFDAC0_R6 */
+	0x000164f0,	/* DWC_DDRPHYA_DBYTE1_VREFDAC0_R6 */
+	0x000184f0,	/* DWC_DDRPHYA_DBYTE2_VREFDAC0_R6 */
+	0x0001a4f0,	/* DWC_DDRPHYA_DBYTE3_VREFDAC0_R6 */
+	0x000144ec,	/* DWC_DDRPHYA_DBYTE0_VREFDAC0_R5 */
+	0x000164ec,	/* DWC_DDRPHYA_DBYTE1_VREFDAC0_R5 */
+	0x000184ec,	/* DWC_DDRPHYA_DBYTE2_VREFDAC0_R5 */
+	0x0001a4ec,	/* DWC_DDRPHYA_DBYTE3_VREFDAC0_R5 */
+	0x000144e8,	/* DWC_DDRPHYA_DBYTE0_VREFDAC0_R4 */
+	0x000164e8,	/* DWC_DDRPHYA_DBYTE1_VREFDAC0_R4 */
+	0x000184e8,	/* DWC_DDRPHYA_DBYTE2_VREFDAC0_R4 */
+	0x0001a4e8,	/* DWC_DDRPHYA_DBYTE3_VREFDAC0_R4 */
+	0x000144e4,	/* DWC_DDRPHYA_DBYTE0_VREFDAC0_R3 */
+	0x000164e4,	/* DWC_DDRPHYA_DBYTE1_VREFDAC0_R3 */
+	0x000184e4,	/* DWC_DDRPHYA_DBYTE2_VREFDAC0_R3 */
+	0x0001a4e4,	/* DWC_DDRPHYA_DBYTE3_VREFDAC0_R3 */
+	0x000144e0,	/* DWC_DDRPHYA_DBYTE0_VREFDAC0_R2 */
+	0x000164e0,	/* DWC_DDRPHYA_DBYTE1_VREFDAC0_R2 */
+	0x000184e0,	/* DWC_DDRPHYA_DBYTE2_VREFDAC0_R2 */
+	0x0001a4e0,	/* DWC_DDRPHYA_DBYTE3_VREFDAC0_R2 */
+	0x000144dc,	/* DWC_DDRPHYA_DBYTE0_VREFDAC0_R1 */
+	0x000164dc,	/* DWC_DDRPHYA_DBYTE1_VREFDAC0_R1 */
+	0x000184dc,	/* DWC_DDRPHYA_DBYTE2_VREFDAC0_R1 */
+	0x0001a4dc,	/* DWC_DDRPHYA_DBYTE3_VREFDAC0_R1 */
+	0x000144d8,	/* DWC_DDRPHYA_DBYTE0_VREFDAC0_R0 */
+	0x000164d8,	/* DWC_DDRPHYA_DBYTE1_VREFDAC0_R0 */
+	0x000184d8,	/* DWC_DDRPHYA_DBYTE2_VREFDAC0_R0 */
+	0x0001a4d8,	/* DWC_DDRPHYA_DBYTE3_VREFDAC0_R0 */
 };
-size_t csr_to_store_length = ARRAY_SIZE(csr_to_store);
+
+_Static_assert(ARRAY_SIZE(csr_to_store) * sizeof(uint16_t) ==
+	       BL31SSRAM_CSR_SIZE,
+	       "Please sync BL31SSRAM_CSR_SIZE with csr_to_store length");
+
+static void load_csr(uintptr_t load_from)
+{
+	int i;
+	uint16_t csr;
+
+	for (i = 0; i < ARRAY_SIZE(csr_to_store); i++) {
+		csr = mmio_read_16(load_from);
+		load_from += sizeof(uint16_t);
+		mmio_write_16(DDRSS_BASE_ADDR + csr_to_store[i], csr);
+	}
+}
 
 void store_csr(uintptr_t store_at)
 {
-	int i, j;
+	int i;
 	uint16_t csr;
-	uint64_t ssram_data;
 
 	mmio_write_16(MICROCONTMUXSEL, 0);
 	mmio_write_16(UCCLKHCLKENABLES, HCLKEN_MASK | UCCLKEN_MASK);
 
-	for (i = 0; i < csr_to_store_length / 4; i++) {
-		ssram_data = 0;
-		for (j = 0; j < 4; j++) {
-			csr = mmio_read_16(DDRSS_BASE_ADDR
-					   + csr_to_store[i * 4 + j]);
-			ssram_data |= (uint64_t)csr << (j * 16);
-		}
-		mmio_write_64(store_at, ssram_data);
-		store_at += 8;
-	}
 
-	ssram_data = 0;
-	for (j = 0; j < csr_to_store_length % 4; j++) {
-		csr = mmio_read_16(DDRSS_BASE_ADDR
-				   + csr_to_store[i * 4 + j]);
-		ssram_data |= (uint64_t)csr << (j * 16);
+	for (i = 0; i < ARRAY_SIZE(csr_to_store); i++) {
+		csr = mmio_read_16(DDRSS_BASE_ADDR + csr_to_store[i]);
+		mmio_write_16(store_at, csr);
+		store_at += sizeof(uint16_t);
 	}
-	mmio_write_64(store_at, ssram_data);
 
 	mmio_write_16(UCCLKHCLKENABLES, HCLKEN_MASK);
 	mmio_write_16(MICROCONTMUXSEL, MICROCONTMUXSEL_MASK);
@@ -457,47 +484,23 @@ void ddrss_to_io_lp3_retention_mode(void)
 	/* Set PwrOkIn to 0 */
 	mmio_write_32(DDR_RET_CONTROL,
 		      mmio_read_32(DDR_RET_CONTROL) & (~DDR_RET_CONTROL_MASK));
-}
-
-static void load_csr(uintptr_t load_from)
-{
-	int i, j;
-	uint16_t csr;
-	uint64_t ssram_data;
-
-	mmio_write_16(MICROCONTMUXSEL, 0);
-	mmio_write_16(UCCLKHCLKENABLES, HCLKEN_MASK | UCCLKEN_MASK);
-
-	for (i = 0; i < csr_to_store_length / 4; i++) {
-		ssram_data = mmio_read_64(load_from);
-		for (j = 0; j < 4; j++) {
-			csr = (uint16_t)((ssram_data >> (j * 16)) & 0xffff);
-			mmio_write_16(DDRSS_BASE_ADDR
-					+ csr_to_store[i * 4 + j], csr);
-		}
-		load_from += 8;
-	}
-
-	ssram_data = mmio_read_64(load_from);
-	for (j = 0; j < csr_to_store_length % 4; j++) {
-		csr = (uint16_t)((ssram_data >> (j * 16)) & 0xffff);
-		mmio_write_16(DDRSS_BASE_ADDR
-				+ csr_to_store[i * 4 + j], csr);
-	}
-
-	mmio_write_16(UCCLKHCLKENABLES, HCLKEN_MASK);
-	mmio_write_16(MICROCONTMUXSEL, MICROCONTMUXSEL_MASK);
+	mmio_write_32(DDR_CONFIG_0,
+		      mmio_read_32(DDR_CONFIG_0) | DDR_CONFIG_0_MEM_RET);
 }
 
 int ddrss_to_normal_mode(uintptr_t csr_array)
 {
 	int ret;
-	uint32_t pwrctl, dfimisc, swctl, rfshctl3, init0;
+	uint32_t pwrctl, init0;
 
 	ret = load_register_cfg(ddrc_cfg_size, ddrc_cfg);
 	if (ret)
 		return ret;
 
+	ret = load_dq_cfg(dq_swap_cfg_size, dq_swap_cfg);
+	if (ret)
+		return ret;
+
 	init0 = mmio_read_32(DDRC_BASE_ADDR + OFFSET_DDRC_INIT0);
 	mmio_write_32(DDRC_BASE_ADDR + OFFSET_DDRC_INIT0,
 		      init0 | SKIP_DRAM_INIT_MASK);
@@ -505,151 +508,28 @@ int ddrss_to_normal_mode(uintptr_t csr_array)
 	mmio_write_32(DDRC_BASE_ADDR + OFFSET_DDRC_PWRCTL,
 		      pwrctl | SELFREF_SW_MASK);
 
-	/* Enable parity for all AXI interfaces */
-	mmio_write_32(REG_GRP0, mmio_read_32(REG_GRP0) | AXI_PARITY_EN(0x1ff));
-	mmio_write_32(REG_GRP0,
-		      mmio_read_32(REG_GRP0) | AXI_PARITY_TYPE(0x1ff));
-
-	/* Enable DFI1 for LPDDR4 */
-	mmio_write_32(REG_GRP0, mmio_read_32(REG_GRP0) | DFI1_ENABLED_MASK);
-
-	/* De-assert reset to controller and AXI ports */
-	mmio_write_32(S32G_MC_RGM_PRST(0),
-		      mmio_read_32(S32G_MC_RGM_PRST(0)) & (~PERIPH_3_RST));
-	while (mmio_read_32(S32G_MC_RGM_PSTAT(0)) & PERIPH_3_RST)
-		;
-
-	/* Enable HIF, CAM Queueing */
-	mmio_write_32(DDRC_BASE_ADDR + OFFSET_DDRC_DBG1, 0);
-
-	rfshctl3 = mmio_read_32(DDRC_BASE_ADDR + OFFSET_DDRC_RFSHCTL3);
-	mmio_write_32(DDRC_BASE_ADDR + OFFSET_DDRC_RFSHCTL3,
-		      rfshctl3 | DIS_AUTO_REFRESH_MASK);
-	pwrctl = mmio_read_32(DDRC_BASE_ADDR + OFFSET_DDRC_PWRCTL);
-	mmio_write_32(DDRC_BASE_ADDR + OFFSET_DDRC_PWRCTL,
-		      pwrctl & (~POWERDOWN_EN_MASK));
-	pwrctl = mmio_read_32(DDRC_BASE_ADDR + OFFSET_DDRC_PWRCTL);
-	mmio_write_32(DDRC_BASE_ADDR + OFFSET_DDRC_PWRCTL,
-		      pwrctl & (~SELFREF_EN_MASK));
-	pwrctl = mmio_read_32(DDRC_BASE_ADDR + OFFSET_DDRC_PWRCTL);
-	mmio_write_32(DDRC_BASE_ADDR + OFFSET_DDRC_PWRCTL,
-		      pwrctl & (~EN_DFI_DRAM_CLK_DISABLE_MASK));
-
-	swctl = mmio_read_32(DDRC_BASE_ADDR + OFFSET_DDRC_SWCTL);
-	mmio_write_32(DDRC_BASE_ADDR + OFFSET_DDRC_SWCTL,
-		      swctl & (~SW_DONE_MASK));
-	while (mmio_read_32(DDRC_BASE_ADDR + OFFSET_DDRC_SWSTAT) &
-	       SW_DONE_ACK_MASK)
-		;
-
-	dfimisc = mmio_read_32(DDRC_BASE_ADDR + OFFSET_DDRC_DFIMISC);
-	mmio_write_32(DDRC_BASE_ADDR + OFFSET_DDRC_DFIMISC,
-		      dfimisc & (~DFI_INIT_COMPLETE_EN_MASK));
-	swctl = mmio_read_32(DDRC_BASE_ADDR + OFFSET_DDRC_SWCTL);
-	mmio_write_32(DDRC_BASE_ADDR + OFFSET_DDRC_SWCTL,
-		      swctl | SW_DONE_MASK);
-
-	while (!(mmio_read_32(DDRC_BASE_ADDR + OFFSET_DDRC_SWSTAT) &
-		 SW_DONE_ACK_MASK))
-		;
-
-	mmio_write_32(DDRC_BASE_ADDR + OFFSET_DDRC_DFIMISC,
-		      CTL_IDLE_EN_MASK | DIS_DYN_ADR_TRI_MASK);
-	while (mmio_read_32(DDRC_BASE_ADDR + OFFSET_DDRC_DFIMISC) &
-	       DFI_INIT_COMPLETE_EN_MASK)
-		;
+	/* Setup AXI ports parity */
+	ret = set_axi_parity();
+	if (ret != NO_ERR)
+		return ret;
 
-	mmio_write_32(MICROCONTMUXSEL, 0);
+	mmio_write_32(MICROCONT_MUX_SEL, UNLOCK_CSR_ACCESS);
 	ret = load_register_cfg(phy_cfg_size, phy_cfg);
 	if (ret)
 		return ret;
-
-	mmio_write_32(MICROCONTMUXSEL, MICROCONTMUXSEL_MASK);
+	mmio_write_32(MICROCONT_MUX_SEL, LOCK_CSR_ACCESS);
 
 	/* Reload saved CSRs */
+	mmio_write_32(MICROCONT_MUX_SEL, UNLOCK_CSR_ACCESS);
 	load_csr(csr_array);
+	mmio_write_32(MICROCONT_MUX_SEL, LOCK_CSR_ACCESS);
 
+	mmio_write_32(MICROCONT_MUX_SEL, UNLOCK_CSR_ACCESS);
 	ret = load_register_cfg(pie_cfg_size, pie_cfg);
 	if (ret)
 		return ret;
+	mmio_write_32(MICROCONT_MUX_SEL, LOCK_CSR_ACCESS);
 
-	while (mmio_read_16(DDR_PHYA_MASTER0_CALBUSY) & CALBUSY_MASK)
-		;
-
-	/* Init the PHY to mission mode */
-	swctl = mmio_read_32(DDRC_BASE_ADDR + OFFSET_DDRC_SWCTL);
-	mmio_write_32(DDRC_BASE_ADDR + OFFSET_DDRC_SWCTL,
-		      swctl & (~SW_DONE_MASK));
-	while (mmio_read_32(DDRC_BASE_ADDR + OFFSET_DDRC_SWSTAT) &
-	       SW_DONE_ACK_MASK)
-		;
-	dfimisc = mmio_read_32(DDRC_BASE_ADDR + OFFSET_DDRC_DFIMISC);
-	mmio_write_32(DDRC_BASE_ADDR + OFFSET_DDRC_DFIMISC,
-		      dfimisc | DFI_INIT_START_MASK);
-
-	swctl = mmio_read_32(DDRC_BASE_ADDR + OFFSET_DDRC_SWCTL);
-	mmio_write_32(DDRC_BASE_ADDR + OFFSET_DDRC_SWCTL,
-		      swctl | SW_DONE_MASK);
-	while (!(mmio_read_32(DDRC_BASE_ADDR + OFFSET_DDRC_SWSTAT) &
-		 SW_DONE_ACK_MASK))
-		;
-	while (!(mmio_read_32(DDRC_BASE_ADDR + OFFSET_DDRC_DFISTAT) &
-		 DFI_INIT_COMPLETE_MASK))
-		;
-
-	swctl = mmio_read_32(DDRC_BASE_ADDR + OFFSET_DDRC_SWCTL);
-	mmio_write_32(DDRC_BASE_ADDR + OFFSET_DDRC_SWCTL,
-		      swctl & (~SW_DONE_MASK));
-	while (mmio_read_32(DDRC_BASE_ADDR + OFFSET_DDRC_SWSTAT) &
-	       SW_DONE_ACK_MASK)
-		;
-
-	dfimisc = mmio_read_32(DDRC_BASE_ADDR + OFFSET_DDRC_DFIMISC);
-	mmio_write_32(DDRC_BASE_ADDR + OFFSET_DDRC_DFIMISC,
-		      dfimisc & (~DFI_INIT_START_MASK));
-
-	dfimisc = mmio_read_32(DDRC_BASE_ADDR + OFFSET_DDRC_DFIMISC);
-	mmio_write_32(DDRC_BASE_ADDR + OFFSET_DDRC_DFIMISC,
-		      dfimisc | DFI_INIT_COMPLETE_EN_MASK);
-
-	swctl = mmio_read_32(DDRC_BASE_ADDR + OFFSET_DDRC_SWCTL);
-	mmio_write_32(DDRC_BASE_ADDR + OFFSET_DDRC_SWCTL,
-		      swctl | SW_DONE_MASK);
-	while (!(mmio_read_32(DDRC_BASE_ADDR + OFFSET_DDRC_SWSTAT) &
-		 SW_DONE_ACK_MASK))
-		;
-
-	/* Exiting Self-Refresh */
-	pwrctl = mmio_read_32(DDRC_BASE_ADDR + OFFSET_DDRC_PWRCTL);
-	mmio_write_32(DDRC_BASE_ADDR + OFFSET_DDRC_PWRCTL,
-		      pwrctl & (~SELFREF_SW_MASK));
-	while (mmio_read_32(DDRC_BASE_ADDR + OFFSET_DDRC_PSTAT) &
-	       SELFREF_TYPE_MASK)
-		;
-	while ((mmio_read_32(DDRC_BASE_ADDR + OFFSET_DDRC_PSTAT) &
-		OPERATING_MODE_MASK) != OPERATING_MODE_NORMAL)
-		;
-
-	rfshctl3 = mmio_read_32(DDRC_BASE_ADDR + OFFSET_DDRC_RFSHCTL3);
-	mmio_write_32(DDRC_BASE_ADDR + OFFSET_DDRC_RFSHCTL3,
-		      rfshctl3 & (~DIS_AUTO_REFRESH_MASK));
-	pwrctl = mmio_read_32(DDRC_BASE_ADDR + OFFSET_DDRC_PWRCTL);
-	mmio_write_32(DDRC_BASE_ADDR + OFFSET_DDRC_PWRCTL,
-		      pwrctl | POWERDOWN_EN_MASK);
-	pwrctl = mmio_read_32(DDRC_BASE_ADDR + OFFSET_DDRC_PWRCTL);
-	mmio_write_32(DDRC_BASE_ADDR + OFFSET_DDRC_PWRCTL,
-		      pwrctl | SELFREF_EN_MASK);
-	pwrctl = mmio_read_32(DDRC_BASE_ADDR + OFFSET_DDRC_PWRCTL);
-	mmio_write_32(DDRC_BASE_ADDR + OFFSET_DDRC_PWRCTL,
-		      pwrctl | EN_DFI_DRAM_CLK_DISABLE_MASK);
-
-	/* Enable AXI ports */
-	mmio_write_32(DDRC_UMCTL2_MP_BASE_ADDR + OFFSET_DDRC_PCTRL_0,
-		      PORT_EN_MASK);
-	mmio_write_32(DDRC_UMCTL2_MP_BASE_ADDR + OFFSET_DDRC_PCTRL_1,
-		      PORT_EN_MASK);
-	mmio_write_32(DDRC_UMCTL2_MP_BASE_ADDR + OFFSET_DDRC_PCTRL_2,
-		      PORT_EN_MASK);
-
-	return ret;
+	return post_train_setup();
 }
+
diff --git a/plat/nxp/s32g/bl31_ssram/bl31_ssram.mk b/plat/nxp/s32g/bl31_ssram/bl31_ssram.mk
index d24c97a47..5f7386ca3 100644
--- a/plat/nxp/s32g/bl31_ssram/bl31_ssram.mk
+++ b/plat/nxp/s32g/bl31_ssram/bl31_ssram.mk
@@ -14,6 +14,7 @@ BL31SSRAM_SOURCES =  plat/nxp/s32g/bl31_ssram/bl31ssram_stacks.S \
 		     plat/nxp/s32g/s32g_linflexuart_crash.S \
 		     drivers/nxp/uart/linflexuart.c \
 		     ${DDR_DRV}/ddr_init.c \
+		     ${DDR_DRV}/ddr_utils_mmio.c \
 		     ${DDR_DRV}/ddrc_cfg.c \
 		     ${DDR_DRV}/ddrss.c \
 		     ${DDR_DRV}/ddrss_cfg.c \
diff --git a/plat/nxp/s32g/bl31_ssram/include/ssram_mailbox.h b/plat/nxp/s32g/bl31_ssram/include/ssram_mailbox.h
index d35ead099..19762d1d9 100644
--- a/plat/nxp/s32g/bl31_ssram/include/ssram_mailbox.h
+++ b/plat/nxp/s32g/bl31_ssram/include/ssram_mailbox.h
@@ -1,5 +1,5 @@
 /*
- * Copyright 2020 NXP
+ * Copyright 2020-2021 NXP
  *
  * SPDX-License-Identifier: BSD-3-Clause
  */
@@ -10,7 +10,7 @@
 
 #define CSR_SETTING_OFFSET offsetof(struct s32g_ssram_mailbox, csr_settings)
 #define BL31SSRAM_CSR_BASE (BL31SSRAM_MAILBOX + CSR_SETTING_OFFSET)
-#define BL31SSRAM_CSR_SIZE (0x230)
+#define BL31SSRAM_CSR_SIZE (0x298)
 
 typedef void (*s32g_warm_entrypoint_t)(void);
 
-- 
2.17.1

