From 96efea26a3c7e913a78dcd9fb15605d5258d6210 Mon Sep 17 00:00:00 2001
From: Bogdan Hamciuc <bogdan.hamciuc@nxp.com>
Date: Thu, 12 Dec 2019 10:34:27 +0200
Subject: [PATCH 038/269] s32g: Redo SRAM layout

Reposition BL2, BL31 images in SRAM to allow BootROM to load them
together in one sweep. Currently BootROM has a limitation on the total
size of the images it can copy into SRAM, so we need to make sure that
BL2, BL31 *and* BL33 (U-Boot) fit within ~4MB and don't cross BootROM's
reserved memory location in SRAM.

While at it, the size of SRAM is updated to the correct value of 8MB
for the S32G274A.

Upstream-Status: Pending 

Signed-off-by: Bogdan Hamciuc <bogdan.hamciuc@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
Issue: ALB-4277
---
 plat/s32g/include/platform_def.h | 26 +++++++++++++++++---------
 plat/s32g/include/s32g_storage.h |  7 +++++++
 2 files changed, 24 insertions(+), 9 deletions(-)

diff --git a/plat/s32g/include/platform_def.h b/plat/s32g/include/platform_def.h
index 03e597332..1a5788df9 100644
--- a/plat/s32g/include/platform_def.h
+++ b/plat/s32g/include/platform_def.h
@@ -87,7 +87,8 @@
  * Virtual Code RAM
  */
 #define S32G_SRAM_BASE		0x34000000
-#define S32G_SRAM_SIZE		0x00A00000
+#define S32G_SRAM_SIZE		0x00800000
+#define S32G_SRAM_END		(S32G_SRAM_BASE + S32G_SRAM_SIZE)
 #define S32G_DDR0_BASE		0x80000000
 /* FIXME this should be a compile-time option; in addition, on S32G we actually
  * have 2 DDR controllers
@@ -114,27 +115,34 @@
  * enough to prevent overflowing onto the adjacent SRAM image. Handle with care,
  * wear a helmet and compile with -Os.
  */
-
 /* BL2 image in SRAM */
-#define S32G_BL2_OFF_IN_SRAM	0x00700000
+#define S32G_BL2_OFF_IN_SRAM	0x00300000
 #define BL2_BASE		(S32G_SRAM_BASE + S32G_BL2_OFF_IN_SRAM)
-#define BL2_LIMIT		(S32G_SRAM_BASE + S32G_BL31_OFF_IN_SRAM - 1)
 
 /* BL31 and BL33 location in SRAM
  */
 
-/* BL31 is located *after* BL32 in SRAM, where there is more space potentially
+/* BL31 is located *after* BL33 in SRAM, where there is more space potentially
  * allowing us to compile the TF-A with -O0 without overlapping with U-Boot;
  * also, U-Boot will be able to reclaim the beginning of SRAM for its MMU
  * tables without overwriting our exception vectors
  */
-#define S32G_BL31_OFF_IN_SRAM		0x00800000
-#define BL31_LIMIT			(S32G_SRAM_BASE + S32G_SRAM_SIZE - 1)
+#define S32G_BL31_OFF_IN_SRAM		0x00400000
+#define BL31_BASE			(S32G_SRAM_BASE + S32G_BL31_OFF_IN_SRAM)
+
+/* BL2 may reside before or after BL31 in SRAM */
+#if (S32G_BL2_OFF_IN_SRAM < S32G_BL31_OFF_IN_SRAM)
+#define BL2_LIMIT		(BL31_BASE - 1)
+#define BL31_LIMIT		(S32G_SRAM_END)
+#else
+#define BL2_LIMIT		(S32G_SRAM_END)
+#define BL31_LIMIT		(BL2_BASE - 1)
+#endif
+
 /* U-boot address in SRAM */
-#define S32G_BL33_OFF_IN_SRAM		0x20000
+#define S32G_BL33_OFF_IN_SRAM		0x00020000
 #define S32G_BL33_IMAGE_BASE		(S32G_SRAM_BASE + S32G_BL33_OFF_IN_SRAM)
 
-#define BL31_BASE			(S32G_SRAM_BASE + S32G_BL31_OFF_IN_SRAM)
 
 /* FIXME value randomly chosen; should probably be revisited */
 #define PLATFORM_STACK_SIZE		0x4000
diff --git a/plat/s32g/include/s32g_storage.h b/plat/s32g/include/s32g_storage.h
index 5a25e50ad..fd00669f1 100644
--- a/plat/s32g/include/s32g_storage.h
+++ b/plat/s32g/include/s32g_storage.h
@@ -6,7 +6,14 @@
 #ifndef S32G_STORAGE_H
 #define S32G_STORAGE_H
 
+/* Temporary SRAM map:
+ * - 0x3402_0000	U-Boot (runtime image, i.e. S32G_BL33_IMAGE_BASE)
+ * - 0x3420_0000	Temporary BL31 (for development only)
+ * - 0x3430_0000	BL2 (runtime image, i.e. BL2_BASE)
+ * - 0x3440_0000	BL31 (runtime image, i.e. BL31_BASE)
+ */
 #define TEMP_S32G_BL31_READ_ADDR_IN_SRAM	0x34200000ull
+
 enum s32g_boot_source {
 	S32G_SRAM_BOOT,
 	/* TODO add FIP, QSPI, SD/MMC */
-- 
2.17.1

