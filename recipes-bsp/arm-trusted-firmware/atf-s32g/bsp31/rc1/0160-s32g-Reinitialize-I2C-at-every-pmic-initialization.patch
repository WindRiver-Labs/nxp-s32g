From 2e7050160ede33df7ecc0829bc32939eb219503b Mon Sep 17 00:00:00 2001
From: Ghennadi Procopciuc <Ghennadi.Procopciuc@nxp.com>
Date: Wed, 15 Jul 2020 06:43:39 +0300
Subject: [PATCH 160/269] s32g: Reinitialize I2C at every pmic initialization

Issue: ALB-4910
Upstream-Status: Pending 

Signed-off-by: Ghennadi Procopciuc <Ghennadi.Procopciuc@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 plat/nxp/s32g/include/s32g_bl_common.h |  8 ++++
 plat/nxp/s32g/include/s32g_pinctrl.h   |  1 +
 plat/nxp/s32g/s32g_bl31.c              | 50 +----------------------
 plat/nxp/s32g/s32g_bl_common.c         | 56 ++++++++++++++++++++++++++
 plat/nxp/s32g/s32g_pinctrl.c           |  3 +-
 plat/nxp/s32g/s32g_vr5510.c            |  3 ++
 6 files changed, 70 insertions(+), 51 deletions(-)

diff --git a/plat/nxp/s32g/include/s32g_bl_common.h b/plat/nxp/s32g/include/s32g_bl_common.h
index 537372417..fa7bc0c9e 100644
--- a/plat/nxp/s32g/include/s32g_bl_common.h
+++ b/plat/nxp/s32g/include/s32g_bl_common.h
@@ -8,6 +8,12 @@
 
 #include <stdbool.h>
 #include <stdint.h>
+#include "i2c/s32g_i2c.h"
+
+struct s32g_i2c_driver {
+	struct s32g_i2c_bus bus;
+	int fdt_node;
+};
 
 void s32g_gic_setup(void);
 void plat_gic_save(void);
@@ -21,4 +27,6 @@ bool is_last_core(void);
 bool is_cluster0_off(void);
 bool is_cluster1_off(void);
 
+struct s32g_i2c_driver *s32g_add_i2c_module(void *fdt, int fdt_node);
+void s32g_reinit_i2c(void);
 #endif
diff --git a/plat/nxp/s32g/include/s32g_pinctrl.h b/plat/nxp/s32g/include/s32g_pinctrl.h
index 1d8c23a36..5658b18bf 100644
--- a/plat/nxp/s32g/include/s32g_pinctrl.h
+++ b/plat/nxp/s32g/include/s32g_pinctrl.h
@@ -202,5 +202,6 @@
 #define SIUL2_IMCR_S32G_PAD_CTRL_I2C4_SCLK (SIUL2_MSCR_MUX_MODE_ALT3)
 
 void s32g_plat_config_pinctrl(void);
+void i2c_config_pinctrl(void);
 
 #endif
diff --git a/plat/nxp/s32g/s32g_bl31.c b/plat/nxp/s32g/s32g_bl31.c
index 28d40149c..e0b875c2a 100644
--- a/plat/nxp/s32g/s32g_bl31.c
+++ b/plat/nxp/s32g/s32g_bl31.c
@@ -14,7 +14,6 @@
 #include <psci.h>
 
 #include "drivers/generic_delay_timer.h"
-#include "i2c/s32g_i2c.h"
 #include "platform_def.h"
 #include "pmic/vr5510.h"
 #include "s32g_pm.h"
@@ -30,16 +29,9 @@
 #include "s32gen1-wkpu.h"
 #include "s32g_bl_common.h"
 
-#define S32G_MAX_I2C_MODULES 5
-
 #define MMU_ROUND_UP_TO_4K(x)	\
 			(((x) & ~0xfff) == (x) ? (x) : ((x) & ~0xfff) + 0x1000)
 
-struct s32g_i2c_driver {
-	struct s32g_i2c_bus bus;
-	int fdt_node;
-};
-
 IMPORT_SYM(uintptr_t, __RW_START__, BL31_RW_START);
 IMPORT_SYM(uintptr_t, __RW_END__, BL31_RW_END);
 
@@ -244,46 +236,6 @@ void plat_gic_restore(void)
 		gicv3_rdistif_init_restore(i, &rdisif_ctxs[i]);
 }
 
-static struct s32g_i2c_driver *init_i2c_module(void *fdt, int fdt_node)
-{
-	static struct s32g_i2c_driver i2c_drivers[S32G_MAX_I2C_MODULES];
-	static size_t fill_level;
-	struct s32g_i2c_driver *driver;
-	struct dt_node_info i2c_info;
-	size_t i;
-	int ret;
-
-	ret = fdt_node_check_compatible(fdt, fdt_node, "fsl,vf610-i2c");
-	if (ret)
-		return NULL;
-
-	for (i = 0; i < fill_level; i++) {
-		if (i2c_drivers[i].fdt_node == fdt_node)
-			return &i2c_drivers[i];
-	}
-
-	if (fill_level >= ARRAY_SIZE(i2c_drivers)) {
-		INFO("Discovered too many instances of I2C\n");
-		return NULL;
-	}
-
-	driver = &i2c_drivers[fill_level];
-
-	dt_fill_device_info(&i2c_info, fdt_node);
-
-	if (i2c_info.base == 0U) {
-		INFO("ERROR i2c base\n");
-		return NULL;
-	}
-
-	driver->fdt_node = fdt_node;
-	s32g_i2c_get_setup_from_fdt(fdt, fdt_node, &driver->bus);
-	s32g_i2c_init(&driver->bus);
-
-	fill_level++;
-	return driver;
-}
-
 static void dt_init_pmic(void)
 {
 	void *fdt;
@@ -315,7 +267,7 @@ static void dt_init_pmic(void)
 			return;
 		}
 
-		i2c_driver = init_i2c_module(fdt, i2c_node);
+		i2c_driver = s32g_add_i2c_module(fdt, i2c_node);
 		if (i2c_driver == NULL) {
 			INFO("PMIC isn't subnode of an I2C node\n");
 			return;
diff --git a/plat/nxp/s32g/s32g_bl_common.c b/plat/nxp/s32g/s32g_bl_common.c
index 29848e9dc..7b09bfa28 100644
--- a/plat/nxp/s32g/s32g_bl_common.c
+++ b/plat/nxp/s32g/s32g_bl_common.c
@@ -6,12 +6,22 @@
 
 #include <common/debug.h>
 #include <lib/mmio.h>
+#include <libfdt.h>
 #include <drivers/generic_delay_timer.h>
+#include <lib/utils_def.h>
 #include "platform_def.h"
 #include "s32g_pinctrl.h"
 #include "s32g_clocks.h"
 #include "s32g_ncore.h"
 #include "s32g_storage.h"
+#include "s32g_bl_common.h"
+#include "s32g_dt.h"
+#include "s32g_pinctrl.h"
+
+#define S32G_MAX_I2C_MODULES 5
+
+static struct s32g_i2c_driver i2c_drivers[S32G_MAX_I2C_MODULES];
+static size_t i2c_fill_level;
 
 unsigned int plat_get_syscnt_freq2(void)
 {
@@ -48,4 +58,50 @@ void plat_ea_handler(unsigned int ea_reason, uint64_t syndrome, void *cookie,
 	panic();
 }
 
+struct s32g_i2c_driver *s32g_add_i2c_module(void *fdt, int fdt_node)
+{
+	struct s32g_i2c_driver *driver;
+	struct dt_node_info i2c_info;
+	size_t i;
+	int ret;
+
+	ret = fdt_node_check_compatible(fdt, fdt_node, "fsl,vf610-i2c");
+	if (ret)
+		return NULL;
+
+	for (i = 0; i < i2c_fill_level; i++) {
+		if (i2c_drivers[i].fdt_node == fdt_node)
+			return &i2c_drivers[i];
+	}
+
+	if (i2c_fill_level >= ARRAY_SIZE(i2c_drivers)) {
+		INFO("Discovered too many instances of I2C\n");
+		return NULL;
+	}
+
+	driver = &i2c_drivers[i2c_fill_level];
+
+	dt_fill_device_info(&i2c_info, fdt_node);
+
+	if (i2c_info.base == 0U) {
+		INFO("ERROR i2c base\n");
+		return NULL;
+	}
+
+	driver->fdt_node = fdt_node;
+	s32g_i2c_get_setup_from_fdt(fdt, fdt_node, &driver->bus);
+
+	i2c_fill_level++;
+	return driver;
+}
+
+void s32g_reinit_i2c(void)
+{
+	size_t i;
+
+	i2c_config_pinctrl();
+
+	for (i = 0; i < i2c_fill_level; i++)
+		s32g_i2c_init(&i2c_drivers[i].bus);
+}
 
diff --git a/plat/nxp/s32g/s32g_pinctrl.c b/plat/nxp/s32g/s32g_pinctrl.c
index a29f9e7d3..932ea5f55 100644
--- a/plat/nxp/s32g/s32g_pinctrl.c
+++ b/plat/nxp/s32g/s32g_pinctrl.c
@@ -73,7 +73,7 @@ static void sdhc_config_pinctrl(void)
 	mmio_write_32(SIUL2_0_MSCRn(524), 0x2);
 }
 
-static void i2c_config_pinctrl(void)
+void i2c_config_pinctrl(void)
 {
 	/* Plaftorm board - PCI X16 Express (J99) */
 	/* I2C1 Serial Data Input */
@@ -119,5 +119,4 @@ void s32g_plat_config_pinctrl(void)
 {
 	linflex_config_pinctrl(S32G_LINFLEX_MODULE);
 	sdhc_config_pinctrl();
-	i2c_config_pinctrl();
 }
diff --git a/plat/nxp/s32g/s32g_vr5510.c b/plat/nxp/s32g/s32g_vr5510.c
index e0ce9aec2..e40b589c0 100644
--- a/plat/nxp/s32g/s32g_vr5510.c
+++ b/plat/nxp/s32g/s32g_vr5510.c
@@ -4,6 +4,7 @@
  * SPDX-License-Identifier: BSD-3-Clause
  */
 #include "pmic/vr5510.h"
+#include "s32g_bl_common.h"
 
 int pmic_prepare_for_suspend(void)
 {
@@ -13,6 +14,8 @@ int pmic_prepare_for_suspend(void)
 	uint16_t reg;
 	uint8_t *regp = (uint8_t *)&reg;
 
+	s32g_reinit_i2c();
+
 	ret = vr5510_get_inst(VR5510_MU_NAME, &mu);
 	if (ret)
 		return ret;
-- 
2.17.1

