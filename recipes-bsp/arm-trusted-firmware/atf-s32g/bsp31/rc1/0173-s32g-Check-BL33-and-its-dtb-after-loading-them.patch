From 64eb00f69487a87198d4fd656fe5a1963d87ce83 Mon Sep 17 00:00:00 2001
From: Dan Nica <dan.nica@nxp.com>
Date: Wed, 21 Oct 2020 15:55:03 +0300
Subject: [PATCH 173/269] s32g: Check BL33 and its dtb after loading them

After loading BL33 in SRAM, it is expected to find the dtb magic of
'0xedfe0dd0' at BL33_DTB and to find an aarch64 unconditional branch
instruction (b or bl) at BL33_ENTRYPOINT. The second one is not a hard check,
since the U-Boot code might change.

Issue: ALB-5594
Upstream-Status: Pending 

Signed-off-by: Dan Nica <dan.nica@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 plat/nxp/s32g/s32g_bl2_el3.c | 27 +++++++++++++++++++++++++++
 1 file changed, 27 insertions(+)

diff --git a/plat/nxp/s32g/s32g_bl2_el3.c b/plat/nxp/s32g/s32g_bl2_el3.c
index 451e5ef89..b3a0160b5 100644
--- a/plat/nxp/s32g/s32g_bl2_el3.c
+++ b/plat/nxp/s32g/s32g_bl2_el3.c
@@ -99,6 +99,33 @@ void bl2_el3_early_platform_setup(u_register_t arg0, u_register_t arg1,
 	s32g_io_setup();
 }
 
+int bl2_plat_handle_post_image_load(unsigned int image_id)
+{
+	uint32_t magic;
+
+#define AARCH64_UNCOND_BRANCH_MASK	(0x7c000000)
+#define AARCH64_UNCOND_BRANCH_OP	(BIT(26) | BIT(28))
+#define BL33_DTB_MAGIC			(0xedfe0dd0)
+
+	if (image_id == BL33_IMAGE_ID) {
+		magic = mmio_read_32(BL33_ENTRYPOINT);
+		if ((magic & AARCH64_UNCOND_BRANCH_MASK)
+					!= AARCH64_UNCOND_BRANCH_OP)
+			printf("Warning: Instruction at BL33_ENTRYPOINT"
+			       " is 0x%x, which is not a B or BL!\n",
+			       magic);
+		magic = mmio_read_32(BL33_DTB);
+		if (magic != BL33_DTB_MAGIC) {
+			printf("Error: Instruction at BL33_DTB is 0x%x"
+			       ", which is not the expected 0x%x!\n",
+			       magic, BL33_DTB_MAGIC);
+			return -EINVAL;
+		}
+	}
+
+	return 0;
+}
+
 enum reset_cause get_reset_cause(void)
 {
 	uint32_t mc_rgm_des = mmio_read_32(MC_RGM_DES);
-- 
2.17.1

