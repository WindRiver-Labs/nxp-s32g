From 868e116caf9960bcbe3cbb55d88c200600762631 Mon Sep 17 00:00:00 2001
From: Dan Nica <dan.nica@nxp.com>
Date: Tue, 14 Apr 2020 11:15:14 +0300
Subject: [PATCH 096/269] s32g: Load IVT_ABC and BOOTSTRAP_CODE images from
 SRAM into STANDBY_SRAM

Issue: ALB-4798
Upstream-Status: Pending 

Signed-off-by: Dan Nica <dan.nica@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 plat/s32g/include/platform_def.h |  1 +
 plat/s32g/include/s32g_storage.h |  1 +
 plat/s32g/s32g274a_bl2_el3.c     | 28 ++++++++++
 plat/s32g/s32g274a_storage.c     | 87 +++++++++++++++++++++++++-------
 4 files changed, 100 insertions(+), 17 deletions(-)

diff --git a/plat/s32g/include/platform_def.h b/plat/s32g/include/platform_def.h
index 8e30360b7..0d08ebe9d 100644
--- a/plat/s32g/include/platform_def.h
+++ b/plat/s32g/include/platform_def.h
@@ -114,6 +114,7 @@
 #define MMC_BL1_IVT_ABC_BASE		(0x113000)
 #define BL1_IVT_ABC_SIZE		(1024)
 #define SRAM_BL1_IVT_ABC_BASE		(S32G_SRAM_BASE)
+#define SSRAM_BL1_IVT_ABC_BASE		(S32G_SSRAM_BASE)
 
 #define MMC_BL1_RO_BASE			(MMC_BL1_IVT_ABC_BASE + 1024)
 #define BL1_BOOTSTRAP_CODE_SIZE		(BL1_RO_LIMIT - BL1_RO_BASE)
diff --git a/plat/s32g/include/s32g_storage.h b/plat/s32g/include/s32g_storage.h
index 5e84adb1f..372f2b5a0 100644
--- a/plat/s32g/include/s32g_storage.h
+++ b/plat/s32g/include/s32g_storage.h
@@ -8,6 +8,7 @@
 
 enum s32g_boot_source {
 	S32G_MMC_BOOT,
+	S32G_SRAM_BOOT,
 	/* TODO add FIP, QSPI, SD/MMC */
 };
 
diff --git a/plat/s32g/s32g274a_bl2_el3.c b/plat/s32g/s32g274a_bl2_el3.c
index 6dbfa7c59..fb8062486 100644
--- a/plat/s32g/s32g274a_bl2_el3.c
+++ b/plat/s32g/s32g274a_bl2_el3.c
@@ -77,6 +77,34 @@ static bl_mem_params_node_t s32g_bl2_mem_params_descs[] = {
 				      image_info_t, IMAGE_ATTRIB_PLAT_SETUP),
 		.image_info.image_max_size = BL1_BOOTSTRAP_CODE_SIZE,
 		.image_info.image_base = SRAM_BL1_RO_BASE,
+		.next_handoff_image_id = S32G_STANDBY_SRAM_IVT_ABC_ID,
+	},
+
+	{
+		.image_id = S32G_STANDBY_SRAM_IVT_ABC_ID,
+
+		SET_STATIC_PARAM_HEAD(ep_info, PARAM_EP, VERSION_2,
+				      entry_point_info_t,
+				      NON_SECURE | EXECUTABLE),
+
+		SET_STATIC_PARAM_HEAD(image_info, PARAM_EP, VERSION_2,
+				      image_info_t, IMAGE_ATTRIB_PLAT_SETUP),
+		.image_info.image_max_size = BL1_IVT_ABC_SIZE,
+		.image_info.image_base = SSRAM_BL1_IVT_ABC_BASE,
+		.next_handoff_image_id = S32G_STANDBY_SRAM_BOOTSTRAP_CODE_ID,
+	},
+
+	{
+		.image_id = S32G_STANDBY_SRAM_BOOTSTRAP_CODE_ID,
+
+		SET_STATIC_PARAM_HEAD(ep_info, PARAM_EP, VERSION_2,
+				      entry_point_info_t,
+				      NON_SECURE | EXECUTABLE),
+
+		SET_STATIC_PARAM_HEAD(image_info, PARAM_EP, VERSION_2,
+				      image_info_t, IMAGE_ATTRIB_PLAT_SETUP),
+		.image_info.image_max_size = BL1_BOOTSTRAP_CODE_SIZE,
+		.image_info.image_base = BL1_RO_BASE,
 		.next_handoff_image_id = INVALID_IMAGE_ID,
 	},
 
diff --git a/plat/s32g/s32g274a_storage.c b/plat/s32g/s32g274a_storage.c
index f068e7cfd..dd65c7ad8 100644
--- a/plat/s32g/s32g274a_storage.c
+++ b/plat/s32g/s32g274a_storage.c
@@ -6,6 +6,7 @@
 #include <common/bl_common.h>
 #include <drivers/io/io_driver.h>
 #include <drivers/nxp/s32g/io/io_mmc.h>
+#include <drivers/io/io_memmap.h>
 #include <drivers/nxp/s32g/mmc/s32g274a_mmc.h>
 #include <assert.h>
 #include <tools_share/firmware_image_package.h>
@@ -13,8 +14,11 @@
 
 static const io_dev_connector_t *s32g_mmc_io_dev;
 static uintptr_t s32g_mmc_boot_dev_handle;
+static const io_dev_connector_t *s32g_sram_io_dev;
+static uintptr_t s32g_sram_boot_dev_handle;
 
 static int s32g_check_mmc_dev(const uintptr_t spec);
+static int s32g_check_sram_dev(const uintptr_t spec);
 
 static const io_block_spec_t bl31_mmc_spec = {
 	.offset = BL31_MMC_OFFSET,
@@ -36,6 +40,16 @@ static const io_block_spec_t bl1_bootstrap_code_mmc_spec = {
 	.length = BL1_BOOTSTRAP_CODE_SIZE,
 };
 
+static const io_block_spec_t bl1_ivt_abc_sram_spec = {
+	.offset = SRAM_BL1_IVT_ABC_BASE,
+	.length = BL1_IVT_ABC_SIZE,
+};
+
+static const io_block_spec_t bl1_bootstrap_code_sram_spec = {
+	.offset = SRAM_BL1_RO_BASE,
+	.length = BL1_BOOTSTRAP_CODE_SIZE,
+};
+
 static const struct plat_io_policy s32g_policies[] = {
 	[BL31_IMAGE_ID] = {
 		&s32g_mmc_boot_dev_handle,
@@ -57,6 +71,16 @@ static const struct plat_io_policy s32g_policies[] = {
 		(uintptr_t)&bl1_bootstrap_code_mmc_spec,
 		s32g_check_mmc_dev
 	},
+	[S32G_STANDBY_SRAM_IVT_ABC_ID] = {
+		&s32g_sram_boot_dev_handle,
+		(uintptr_t)&bl1_ivt_abc_sram_spec,
+		s32g_check_sram_dev
+	},
+	[S32G_STANDBY_SRAM_BOOTSTRAP_CODE_ID] = {
+		&s32g_sram_boot_dev_handle,
+		(uintptr_t)&bl1_bootstrap_code_sram_spec,
+		s32g_check_sram_dev
+	},
 };
 
 static int s32g_check_mmc_dev(const uintptr_t spec)
@@ -73,6 +97,20 @@ static int s32g_check_mmc_dev(const uintptr_t spec)
 	return 0;
 }
 
+static int s32g_check_sram_dev(const uintptr_t spec)
+{
+	uintptr_t local_handle;
+	int ret;
+
+	ret = io_open(s32g_sram_boot_dev_handle, spec, &local_handle);
+	if (ret)
+		return ret;
+	/* must be closed, as load_image() will do another io_open() */
+	io_close(local_handle);
+
+	return 0;
+}
+
 int plat_get_image_source(unsigned int image_id, uintptr_t *dev_handle,
 			  uintptr_t *image_spec)
 {
@@ -98,26 +136,40 @@ int plat_get_image_source(unsigned int image_id, uintptr_t *dev_handle,
 
 static void plat_s32g_io_setup(enum s32g_boot_source boot_source)
 {
-	int ret;
-
-	ret = s32g274a_mmc_register();
-	if (ret)
-		goto err_register;
-
-	ret = register_io_dev_mmc(&s32g_mmc_io_dev);
-	if (ret)
-		goto err_register;
+	uintptr_t handle;
 
 	switch (boot_source) {
 	case S32G_MMC_BOOT:
-		ret = io_dev_open(s32g_mmc_io_dev,
-				  (uintptr_t)&bl31_mmc_spec,
-				  &s32g_mmc_boot_dev_handle);
-		if (ret)
+		handle = s32g_mmc_boot_dev_handle;
+
+		if (s32g274a_mmc_register())
+			goto err_register;
+
+		if (register_io_dev_mmc(&s32g_mmc_io_dev))
+			goto err_register;
+
+		if (io_dev_open(s32g_mmc_io_dev,
+				(uintptr_t)&bl31_mmc_spec,
+				&s32g_mmc_boot_dev_handle))
 			goto err_io_dev_open;
 
-		ret = io_dev_init(s32g_mmc_boot_dev_handle, 0);
-		if (ret)
+		if (io_dev_init(s32g_mmc_boot_dev_handle, 0))
+			goto err_io_dev_init;
+
+		break;
+
+	case S32G_SRAM_BOOT:
+		handle = s32g_sram_boot_dev_handle;
+
+		if (register_io_dev_memmap(&s32g_sram_io_dev))
+			goto err_register;
+
+		if (io_dev_open(s32g_sram_io_dev,
+				(uintptr_t)&bl1_ivt_abc_sram_spec,
+				&s32g_sram_boot_dev_handle))
+			goto err_io_dev_open;
+
+		if (io_dev_init(s32g_sram_boot_dev_handle, 0))
 			goto err_io_dev_init;
 
 		break;
@@ -128,10 +180,10 @@ static void plat_s32g_io_setup(enum s32g_boot_source boot_source)
 
 	return;
 
-err_boot_source:
 err_io_dev_init:
-	io_dev_close(s32g_mmc_boot_dev_handle);
+	io_dev_close(handle);
 err_io_dev_open:
+err_boot_source:
 err_register:
 	panic();
 }
@@ -139,4 +191,5 @@ err_register:
 void s32g_io_setup(void)
 {
 	plat_s32g_io_setup(S32G_MMC_BOOT);
+	plat_s32g_io_setup(S32G_SRAM_BOOT);
 }
-- 
2.17.1

