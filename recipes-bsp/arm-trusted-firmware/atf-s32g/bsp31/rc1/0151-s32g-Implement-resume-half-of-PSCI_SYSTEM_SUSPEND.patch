From 91148ff0e5fae4762029a3ccb3160bd465473fed Mon Sep 17 00:00:00 2001
From: Ghennadi Procopciuc <Ghennadi.Procopciuc@nxp.com>
Date: Tue, 14 Jul 2020 16:19:49 +0300
Subject: [PATCH 151/269] s32g: Implement resume half of PSCI_SYSTEM_SUSPEND

Issue: ALB-4910
Upstream-Status: Pending 

Signed-off-by: Ghennadi Procopciuc <Ghennadi.Procopciuc@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 plat/nxp/s32g/bl31_ssram/bl31ssram_main.c |  8 ++---
 plat/nxp/s32g/include/s32g_clocks.h       |  3 +-
 plat/nxp/s32g/include/s32g_lowlevel.h     |  6 +++-
 plat/nxp/s32g/include/s32g_resume.h       | 13 ++++++++
 plat/nxp/s32g/platform.mk                 |  6 ++--
 plat/nxp/s32g/s32g_bl2_el3.c              | 22 ++-----------
 plat/nxp/s32g/s32g_bl_common.c            | 39 +++++++++++++++++++++++
 plat/nxp/s32g/s32g_clocks.c               | 18 +++++++----
 plat/nxp/s32g/s32g_psci.c                 |  6 ++--
 plat/nxp/s32g/s32g_resume.c               | 26 +++++++++++++++
 10 files changed, 106 insertions(+), 41 deletions(-)
 create mode 100644 plat/nxp/s32g/include/s32g_resume.h
 create mode 100644 plat/nxp/s32g/s32g_resume.c

diff --git a/plat/nxp/s32g/bl31_ssram/bl31ssram_main.c b/plat/nxp/s32g/bl31_ssram/bl31ssram_main.c
index f2cc16345..66d83553b 100644
--- a/plat/nxp/s32g/bl31_ssram/bl31ssram_main.c
+++ b/plat/nxp/s32g/bl31_ssram/bl31ssram_main.c
@@ -36,18 +36,16 @@ struct s32g_ssram_mailbox s32g_ssram_mailbox __section(".mailbox");
 void bl31ssram_main(void)
 {
 	extern struct ddrss_conf ddrss_conf;
-	s32g_warm_entrypoint_t bl31_warm_entrypoint;
+	s32g_warm_entrypoint_t s32g_resume_entrypoint;
 	uintptr_t csr_addr;
 
-	bl31_warm_entrypoint = s32g_ssram_mailbox.bl31_warm_entrypoint;
+	s32g_resume_entrypoint = s32g_ssram_mailbox.bl31_warm_entrypoint;
 	csr_addr = (uintptr_t)&s32g_ssram_mailbox.csr_settings[0];
 
 	s32g_plat_ddr_clock_init();
 	ddrss_to_normal_mode(&ddrss_conf, csr_addr);
 
-	/* To be debugged */
-	__asm__ volatile("bl .");
-	bl31_warm_entrypoint();
+	s32g_resume_entrypoint();
 
 	/*
 	 * This forces the linker to keep s32g_ssram_ivt
diff --git a/plat/nxp/s32g/include/s32g_clocks.h b/plat/nxp/s32g/include/s32g_clocks.h
index 40fc20dd2..a039047a6 100644
--- a/plat/nxp/s32g/include/s32g_clocks.h
+++ b/plat/nxp/s32g/include/s32g_clocks.h
@@ -7,6 +7,7 @@
 #define _S32G_CLOCKS_H_
 
 #include <stdint.h>
+#include <stdbool.h>
 
 #define S32G_FXOSC_FREQ		(40000000ul)
 #define S32G_FIRC_FREQ		(48000000ul)
@@ -323,7 +324,7 @@ enum s32g_mc_cgm {
 #define MC_CGM_MUXn_CSC_SEL_PERIPH_PLL_PHI7	25
 #define MC_CGM_MUXn_CSC_SEL_PERIPH_DFS_DFS3	28
 
-void s32g_plat_clock_init(void);
+void s32g_plat_clock_init(bool skip_ddr_clk);
 void s32g_plat_ddr_clock_init(void);
 
 #define S32G274A_A53_CORE_CLK_MIN		(48000000ul)
diff --git a/plat/nxp/s32g/include/s32g_lowlevel.h b/plat/nxp/s32g/include/s32g_lowlevel.h
index ce648b797..d234a95d4 100644
--- a/plat/nxp/s32g/include/s32g_lowlevel.h
+++ b/plat/nxp/s32g/include/s32g_lowlevel.h
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 NXP
+ * Copyright 2019-2020 NXP
  *
  * SPDX-License-Identifier: BSD-3-Clause
  */
@@ -7,9 +7,13 @@
 #ifndef S32G_LOWLEVEL_H
 #define S32G_LOWLEVEL_H
 
+#include <stdbool.h>
+#include <stdint.h>
+
 int plat_core_pos_by_mpidr(u_register_t mpidr);
 int plat_is_my_cpu_primary(void);
 void s32g_smp_fixup(void);
 void s32g_gic_setup(void);
+void s32g_early_plat_init(bool skip_ddr_clk);
 
 #endif /* S32G_LOWLEVEL_H */
diff --git a/plat/nxp/s32g/include/s32g_resume.h b/plat/nxp/s32g/include/s32g_resume.h
new file mode 100644
index 000000000..5eb831957
--- /dev/null
+++ b/plat/nxp/s32g/include/s32g_resume.h
@@ -0,0 +1,13 @@
+/*
+ * Copyright 2020 NXP
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ */
+#ifndef S32G_RESUME_H
+#define S32G_RESUME_H
+
+/* Secondary cores entry point */
+void plat_secondary_cold_boot_setup(void);
+void s32g_resume_entrypoint(void);
+
+#endif
diff --git a/plat/nxp/s32g/platform.mk b/plat/nxp/s32g/platform.mk
index be5e53308..e0d2ab1b9 100644
--- a/plat/nxp/s32g/platform.mk
+++ b/plat/nxp/s32g/platform.mk
@@ -33,6 +33,8 @@ PLAT_BL_COMMON_SOURCES	+= plat/nxp/s32g/s32g_lowlevel_common.S \
 			   plat/nxp/s32g/s32g_ncore.c \
 			   plat/nxp/s32g/s32g_bl_common.c \
 			   plat/nxp/s32g/s32g_dt.c \
+			   plat/nxp/s32g/s32g_pinctrl.c \
+			   plat/nxp/s32g/s32g_clocks.c \
 			   drivers/nxp/s32g/i2c/s32g_i2c.c \
 			   drivers/delay_timer/delay_timer.c \
 			   drivers/delay_timer/generic_delay_timer.c \
@@ -42,8 +44,6 @@ PLAT_BL_COMMON_SOURCES	+= plat/nxp/s32g/s32g_lowlevel_common.S \
 
 BL2_SOURCES		+= plat/nxp/s32g/s32g_lowlevel_bl2.S \
 			   plat/nxp/s32g/s32g_bl2_el3.c \
-			   plat/nxp/s32g/s32g_clocks.c \
-			   plat/nxp/s32g/s32g_pinctrl.c \
 			   plat/nxp/s32g/s32g_storage.c \
 			   plat/nxp/s32g/s32g_edma.c \
 			   drivers/io/io_storage.c \
@@ -59,8 +59,8 @@ BL2_SOURCES		+= plat/nxp/s32g/s32g_lowlevel_bl2.S \
 			   ${BL31SSRAM_SRC_DUMP} \
 
 BL31_SOURCES		+= plat/nxp/s32g/s32g_bl31.c \
-			   plat/nxp/s32g/s32g_clocks.c \
 			   plat/nxp/s32g/s32g_psci.c \
+			   plat/nxp/s32g/s32g_resume.c \
 			   plat/nxp/s32g/s32g_pm.c \
 			   plat/common/plat_psci_common.c \
 			   plat/common/plat_gicv3.c \
diff --git a/plat/nxp/s32g/s32g_bl2_el3.c b/plat/nxp/s32g/s32g_bl2_el3.c
index 71c1fa63f..2e6dc0914 100644
--- a/plat/nxp/s32g/s32g_bl2_el3.c
+++ b/plat/nxp/s32g/s32g_bl2_el3.c
@@ -10,14 +10,12 @@
 #include <common/debug.h>
 #include <drivers/console.h>
 #include <lib/mmio.h>
-#include "s32g_ncore.h"
-#include "s32g_pinctrl.h"
-#include "s32g_clocks.h"
 #include "s32g_linflexuart.h"
 #include "s32g_storage.h"
 #include "s32g_mc_rgm.h"
 #include "s32g_mc_me.h"
 #include "bl31_ssram.h"
+#include "s32g_lowlevel.h"
 #include <nxp/s32g/ddr/ddrss.h>
 #include <drivers/generic_delay_timer.h>
 #include <ssram_mailbox.h>
@@ -95,23 +93,7 @@ struct bl_load_info *plat_get_bl_image_load_info(void)
 void bl2_el3_early_platform_setup(u_register_t arg0, u_register_t arg1,
 				  u_register_t arg2, u_register_t arg3)
 {
-	uint32_t caiutc;
-
-	s32g_plat_config_pinctrl();
-	s32g_plat_clock_init();
-
-	/* Restore (clear) the CAIUTC[IsolEn] bit for the primay cluster, which
-	 * we have manually set during early BL2 boot.
-	 */
-	caiutc = mmio_read_32(S32G_NCORE_CAIU0_BASE_ADDR + NCORE_CAIUTC_OFF);
-	caiutc &= ~NCORE_CAIUTC_ISOLEN_MASK;
-	mmio_write_32(S32G_NCORE_CAIU0_BASE_ADDR + NCORE_CAIUTC_OFF, caiutc);
-
-	ncore_init();
-	ncore_caiu_online(A53_CLUSTER0_CAIU);
-
-	generic_delay_timer_init();
-
+	s32g_early_plat_init(false);
 	s32g_io_setup();
 }
 
diff --git a/plat/nxp/s32g/s32g_bl_common.c b/plat/nxp/s32g/s32g_bl_common.c
index 1bb130b3b..29848e9dc 100644
--- a/plat/nxp/s32g/s32g_bl_common.c
+++ b/plat/nxp/s32g/s32g_bl_common.c
@@ -4,9 +4,48 @@
  * SPDX-License-Identifier: BSD-3-Clause
  */
 
+#include <common/debug.h>
+#include <lib/mmio.h>
+#include <drivers/generic_delay_timer.h>
 #include "platform_def.h"
+#include "s32g_pinctrl.h"
+#include "s32g_clocks.h"
+#include "s32g_ncore.h"
+#include "s32g_storage.h"
 
 unsigned int plat_get_syscnt_freq2(void)
 {
 	return COUNTER_FREQUENCY;
 }
+
+void s32g_early_plat_init(bool skip_ddr_clk)
+{
+	uint32_t caiutc;
+
+	s32g_plat_config_pinctrl();
+	s32g_plat_clock_init(skip_ddr_clk);
+
+	/* Restore (clear) the CAIUTC[IsolEn] bit for the primay cluster, which
+	 * we have manually set during early BL2 boot.
+	 */
+	caiutc = mmio_read_32(S32G_NCORE_CAIU0_BASE_ADDR + NCORE_CAIUTC_OFF);
+	caiutc &= ~NCORE_CAIUTC_ISOLEN_MASK;
+	mmio_write_32(S32G_NCORE_CAIU0_BASE_ADDR + NCORE_CAIUTC_OFF, caiutc);
+
+	ncore_init();
+	ncore_caiu_online(A53_CLUSTER0_CAIU);
+
+	generic_delay_timer_init();
+}
+
+void plat_ea_handler(unsigned int ea_reason, uint64_t syndrome, void *cookie,
+		void *handle, uint64_t flags)
+{
+	ERROR("Unhandled External Abort received on 0x%lx at EL3!\n",
+	      read_mpidr_el1());
+	ERROR(" exception reason=%u syndrome=0x%llx\n", ea_reason, syndrome);
+
+	panic();
+}
+
+
diff --git a/plat/nxp/s32g/s32g_clocks.c b/plat/nxp/s32g/s32g_clocks.c
index c897524c4..1dc8f552e 100644
--- a/plat/nxp/s32g/s32g_clocks.c
+++ b/plat/nxp/s32g/s32g_clocks.c
@@ -445,7 +445,7 @@ int s32g_set_a53_core_clk(uint64_t clk)
 	return 0;
 }
 
-void s32g_plat_clock_init(void)
+void s32g_plat_clock_init(bool skip_ddr_clk)
 {
 	assert(ARRAY_SIZE(s32g_core_pll_phi_freq) ==
 	       s32g_pll_phi_nr[S32G_CORE_PLL]);
@@ -466,8 +466,9 @@ void s32g_plat_clock_init(void)
 	mc_me_enable_partition_block(S32G_MC_ME_USDHC_PART,
 				     S32G_MC_ME_USDHC_REQ);
 	/* Enable partition clock for DDR */
-	mc_me_enable_partition_block(S32G_MC_ME_DDR_0_PART,
-				     S32G_MC_ME_DDR_0_REQ);
+	if (!skip_ddr_clk)
+		mc_me_enable_partition_block(S32G_MC_ME_DDR_0_PART,
+					     S32G_MC_ME_DDR_0_REQ);
 
 	/* Configure the CORE_PLL */
 	program_pll(S32G_CORE_PLL, S32G_REFCLK_FXOSC, s32g_core_pll_phi_freq,
@@ -499,10 +500,13 @@ void s32g_plat_clock_init(void)
 		    s32g_pll_mfn[S32G_ACCEL_PLL]);
 
 	/* Configure the DDR_PLL */
-	program_pll(S32G_DDR_PLL, S32G_REFCLK_FXOSC, s32g_ddr_pll_phi_freq,
-		    s32g_pll_rdiv[S32G_DDR_PLL], s32g_pll_mfi[S32G_DDR_PLL],
-		    s32g_pll_mfn[S32G_DDR_PLL]);
-	sw_mux_clk_config(MC_CGM5, 0, MC_CGM_MUXn_CSC_SEL_DDR_PLL_PHI0);
+	if (!skip_ddr_clk) {
+		program_pll(S32G_DDR_PLL, S32G_REFCLK_FXOSC,
+			    s32g_ddr_pll_phi_freq, s32g_pll_rdiv[S32G_DDR_PLL],
+			    s32g_pll_mfi[S32G_DDR_PLL],
+			    s32g_pll_mfn[S32G_DDR_PLL]);
+		sw_mux_clk_config(MC_CGM5, 0, MC_CGM_MUXn_CSC_SEL_DDR_PLL_PHI0);
+	}
 }
 
 void s32g_plat_ddr_clock_init(void)
diff --git a/plat/nxp/s32g/s32g_psci.c b/plat/nxp/s32g/s32g_psci.c
index f2de3c968..88d9e8dd2 100644
--- a/plat/nxp/s32g/s32g_psci.c
+++ b/plat/nxp/s32g/s32g_psci.c
@@ -11,10 +11,10 @@
 #include "s32g_mc_me.h"
 #include "s32g_ncore.h"
 #include "ssram_mailbox.h"
+#include "s32g_resume.h"
 
 #include <arch_helpers.h>
 #include <assert.h>
-#include <bl31/bl31.h>		/* for bl31_warm_entrypoint() */
 #include <bl31/interrupt_mgmt.h>
 #include <common/debug.h>	/* printing macros such as INFO() */
 #include <drivers/arm/gicv3.h>
@@ -23,8 +23,6 @@
 #include <plat/common/platform.h>
 #include <string.h>
 
-void plat_secondary_cold_boot_setup(void);
-
 IMPORT_SYM(unsigned long, __BL31_START__, bl31_start);
 IMPORT_SYM(unsigned long, __BL31_END__, bl31_end);
 
@@ -155,7 +153,7 @@ static void set_warm_entry(void)
 
 	warm_entry = BL31SSRAM_MAILBOX + offsetof(struct s32g_ssram_mailbox,
 						  bl31_warm_entrypoint);
-	mmio_write_64(warm_entry, (uintptr_t)bl31_warm_entrypoint);
+	mmio_write_64(warm_entry, (uintptr_t)s32g_resume_entrypoint);
 }
 
 static int prepare_vr5510(void)
diff --git a/plat/nxp/s32g/s32g_resume.c b/plat/nxp/s32g/s32g_resume.c
new file mode 100644
index 000000000..e0b4fd448
--- /dev/null
+++ b/plat/nxp/s32g/s32g_resume.c
@@ -0,0 +1,26 @@
+/*
+ * Copyright 2020 NXP
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ */
+#include <lib/el3_runtime/cpu_data.h>
+#include <lib/el3_runtime/context_mgmt.h>
+#include <bl31/bl31.h>		/* for bl31_warm_entrypoint() */
+#include "s32g_linflexuart.h"
+#include "s32g_lowlevel.h"
+#include "s32g_resume.h"
+
+void s32g_ncore_isol_cluster0(void);
+
+void s32g_resume_entrypoint(void)
+{
+	static struct console_s32g console;
+
+	/* Prepare resume operation */
+	s32g_ncore_isol_cluster0();
+	s32g_early_plat_init(true);
+
+	console_s32g_register(S32G_UART_BASE, S32G_UART_CLOCK_HZ,
+			      S32G_UART_BAUDRATE, &console);
+	bl31_warm_entrypoint();
+}
-- 
2.17.1

