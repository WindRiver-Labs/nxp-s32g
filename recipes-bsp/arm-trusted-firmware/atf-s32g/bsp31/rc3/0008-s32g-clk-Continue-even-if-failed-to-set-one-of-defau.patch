From 3efdad41f0b5cfd27ed15d7390b09ba020bb58a3 Mon Sep 17 00:00:00 2001
From: Ghennadi Procopciuc <ghennadi.procopciuc@nxp.com>
Date: Wed, 22 Sep 2021 17:37:39 +0300
Subject: [PATCH 08/24] s32g/clk: Continue even if failed to set one of default
 clocks

Change the default behavior of default clock settings. The driver
will continue to set the default clocks even if one of them was
misconfigured or an error occurred during its initialization. This
is helpful to reduce the impact of a misconfiguration to that clock
only/

Issue: ALB-7756
Upstream-Status: Pending 

Signed-off-by: Ghennadi Procopciuc <ghennadi.procopciuc@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 drivers/nxp/s32g/clk/clk.c          | 24 +++++++++++++++---------
 drivers/nxp/s32g/clk/set_par_rate.c | 11 +++++++----
 2 files changed, 22 insertions(+), 13 deletions(-)

diff --git a/drivers/nxp/s32g/clk/clk.c b/drivers/nxp/s32g/clk/clk.c
index ea55038ff..d5bc9a5b5 100644
--- a/drivers/nxp/s32g/clk/clk.c
+++ b/drivers/nxp/s32g/clk/clk.c
@@ -1,5 +1,5 @@
 /*
- * Copyright 2020 NXP
+ * Copyright 2020-2021 NXP
  *
  * SPDX-License-Identifier: BSD-3-Clause
  */
@@ -167,6 +167,7 @@ int dt_clk_apply_defaults(void *fdt, int node)
 	uint32_t clk_drv_id, clk_id, freq;
 	struct clk clk, parent_clk;
 	size_t nparents;
+	int fret = 0;
 
 	clocks = fdt_getprop(fdt, node, "assigned-clocks", &nclocks_size);
 	/* No clock settings to be applied */
@@ -188,19 +189,23 @@ int dt_clk_apply_defaults(void *fdt, int node)
 		clk_id = fdt32_to_cpu(clocks[index + 1]);
 		if (!clk_drv_id) {
 			ERROR("Invalid clock driver id: 0.\n");
-			return -EIO;
+			fret = -EIO;
+			continue;
 		}
 
 		ret = get_clk(clk_drv_id, clk_id, &clk);
-		if (ret)
-			return -EIO;
+		if (ret) {
+			fret = -EIO;
+			continue;
+		}
 
 		ret = process_parents_prop(&parent_index, nparents,
 					   parents, &clk, &parent_clk);
 		if (ret) {
 			ERROR("Failed to process parents field for '%s' node\n",
 			      fdt_get_name(fdt, node, NULL));
-			return -EINVAL;
+			fret = -EINVAL;
+			continue;
 		}
 
 		if (!rates)
@@ -209,8 +214,8 @@ int dt_clk_apply_defaults(void *fdt, int node)
 		if (i >= nrates_size / sizeof(uint32_t)) {
 			ERROR("Failed to process rates field for '%s' node\n",
 			      fdt_get_name(fdt, node, NULL));
-			return -EINVAL;
-
+			fret = -EINVAL;
+			continue;
 		}
 
 		freq = fdt32_to_cpu(rates[i]);
@@ -220,11 +225,12 @@ int dt_clk_apply_defaults(void *fdt, int node)
 			if (!ret) {
 				ERROR("Failed to set rate of %d clk\n",
 						clk.id);
-				return ret;
+				fret = ret;
+				continue;
 			}
 		}
 
 	}
 
-	return 0;
+	return fret;
 }
diff --git a/drivers/nxp/s32g/clk/set_par_rate.c b/drivers/nxp/s32g/clk/set_par_rate.c
index 447e99c42..14339b3c6 100644
--- a/drivers/nxp/s32g/clk/set_par_rate.c
+++ b/drivers/nxp/s32g/clk/set_par_rate.c
@@ -1,6 +1,6 @@
 // SPDX-License-Identifier: BSD-3-Clause
 /*
- * Copyright 2020 NXP
+ * Copyright 2020-2021 NXP
  */
 #include <clk/s32gen1_clk_funcs.h>
 #include <clk/s32gen1_clk_modules.h>
@@ -41,7 +41,8 @@ static unsigned long set_pll_div_freq(struct s32gen1_clk_obj *module,
 	}
 
 	if (div->freq && div->freq != rate) {
-		ERROR("PLL DIV frequency was already set to %lu\n", div->freq);
+		ERROR("PLL DIV frequency was already set to %lu pll: %u index: %u\n",
+		      div->freq, pll->instance, div->index);
 		return 0;
 	}
 
@@ -218,15 +219,17 @@ static unsigned long set_module_rate(struct s32gen1_clk_obj *module,
 unsigned long s32gen1_set_rate(struct clk *c, unsigned long rate)
 {
 	struct s32gen1_clk *clk;
+	unsigned long orig_rate = rate;
 
 	clk = get_clock(c->id);
 	if (!clk)
 		return 0;
 
 	rate = set_module_rate(&clk->desc, rate);
-	if (rate == 0)
+	if (rate == 0) {
 		ERROR("Failed to set frequency (%lu MHz) for clock %u\n",
-		      rate, c->id);
+		      orig_rate, c->id);
+	}
 
 	return rate;
 }
-- 
2.17.1

