From 72ae40c490330b963de9a3aa43927031c9c5ab29 Mon Sep 17 00:00:00 2001
From: Ghennadi Procopciuc <ghennadi.procopciuc@nxp.com>
Date: Thu, 21 Oct 2021 16:28:50 +0300
Subject: [PATCH 03/16] s32g3: Initialize SRAM based on S32G2 SRAMC

Issue: ALB-7712
Upstream-Status: Pending 

Signed-off-by: Ghennadi Procopciuc <ghennadi.procopciuc@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 plat/nxp/s32/s32g/include/s32g_sramc.h        |  80 ++++--
 plat/nxp/s32/s32g/s32g2/include/s32g2_sramc.h |  19 --
 plat/nxp/s32/s32g/s32g2/platform.mk           |   1 -
 plat/nxp/s32/s32g/s32g2/s32g2_sramc.S         | 264 ------------------
 plat/nxp/s32/s32g/s32g3/include/s32g3_sramc.h |  36 ---
 plat/nxp/s32/s32g/s32g3/platform.mk           |   3 +-
 plat/nxp/s32/s32g/s32g_common.mk              |   1 +
 .../{s32g3/s32g3_sramc.S => s32g_sramc_asm.S} |  50 ++--
 8 files changed, 81 insertions(+), 373 deletions(-)
 delete mode 100644 plat/nxp/s32/s32g/s32g2/include/s32g2_sramc.h
 delete mode 100644 plat/nxp/s32/s32g/s32g2/s32g2_sramc.S
 delete mode 100644 plat/nxp/s32/s32g/s32g3/include/s32g3_sramc.h
 rename plat/nxp/s32/s32g/{s32g3/s32g3_sramc.S => s32g_sramc_asm.S} (89%)

diff --git a/plat/nxp/s32/s32g/include/s32g_sramc.h b/plat/nxp/s32/s32g/include/s32g_sramc.h
index 826503c9e..96f1deb23 100644
--- a/plat/nxp/s32/s32g/include/s32g_sramc.h
+++ b/plat/nxp/s32/s32g/include/s32g_sramc.h
@@ -8,28 +8,65 @@
 
 #include <lib/utils_def.h>
 
+#define S32G_SRAM_BASE          0x34000000
+#define S32G_SRAM_SIZE          0x00800000
+#define S32G_SRAM_END           (S32G_SRAM_BASE + S32G_SRAM_SIZE)
+
 /* SRAM controller is able to erase 64 bits at once */
-#define SRAM_BLOCK		512
-#define SRAM_BLOCK_MASK		(SRAM_BLOCK - 1)
-#define SRAM_INV_BLOCK_MASK	(~(SRAM_BLOCK_MASK))
-
-#define SRAMC0_BASE_ADDR	0x4019C000
-#define SRAMC0_BASE_ADDR_H	(SRAMC0_BASE_ADDR >> 16)
-#define SRAMC0_BASE_ADDR_L	((SRAMC0_BASE_ADDR & 0xFFFF))
-#define SRAMC1_BASE_ADDR	0x401A0000
-#define SRAMC1_BASE_ADDR_H	(SRAMC1_BASE_ADDR >> 16)
-#define SRAMC1_BASE_ADDR_L	((SRAMC1_BASE_ADDR & 0xFFFF))
-#define SSRAMC_BASE_ADDR	0x44028000
-#define SRAMC_SIZE		0x3000
-
-#define SRAMC_PRAMCR_OFFSET	0x0
-#define SRAMC_PRAMCR_INITREQ	BIT(0)
-#define SRAMC_PRAMIAS_OFFSET	0x4
-#define SRAMC_PRAMIAE_OFFSET	0x8
-#define SRAMC_PRAMSR_OFFSET	0xC
-#define SRAMC_PRAMSR_IDONE	BIT(0)
-
-#define SSRAM_MAX_ADDR		0x7FF
+#define SRAM_BLOCK              512
+#define SRAM_BLOCK_MASK         (SRAM_BLOCK - 1)
+#define SRAM_INV_BLOCK_MASK     (~(SRAM_BLOCK_MASK))
+
+#define SRAMC0_BASE_ADDR        0x4019C000
+#define SRAMC0_BASE_ADDR_H      (SRAMC0_BASE_ADDR >> 16)
+#define SRAMC0_BASE_ADDR_L      ((SRAMC0_BASE_ADDR & 0xFFFF))
+#define SRAMC1_BASE_ADDR        0x401A0000
+#define SRAMC1_BASE_ADDR_H      (SRAMC1_BASE_ADDR >> 16)
+#define SRAMC1_BASE_ADDR_L      ((SRAMC1_BASE_ADDR & 0xFFFF))
+#if defined(PLAT_s32g3)
+#define SRAMC2_BASE_ADDR        0x4055A000
+#define SRAMC2_BASE_ADDR_H      (SRAMC0_BASE_ADDR >> 16)
+#define SRAMC2_BASE_ADDR_L      ((SRAMC0_BASE_ADDR & 0xFFFF))
+#define SRAMC3_BASE_ADDR        0x4055E000
+#define SRAMC3_BASE_ADDR_H      (SRAMC1_BASE_ADDR >> 16)
+#define SRAMC3_BASE_ADDR_L      ((SRAMC1_BASE_ADDR & 0xFFFF))
+#endif
+#define SSRAMC_BASE_ADDR        0x44028000
+#define SRAMC_SIZE              0x3000
+
+/* Block ranges */
+
+#if defined(PLAT_s32g2)
+#define SRAMC0_MIN_ADDR         (0x0)
+#define SRAMC0_MAX_ADDR         (0x7FFF)
+#define SRAMC1_MIN_ADDR         (SRAMC0_MAX_ADDR + 1)
+#define SRAMC1_MAX_ADDR         (0x10000)
+
+#elif defined(PLAT_s32g3)
+#define SRAMC0_MIN_ADDR         (0x0)
+#define SRAMC0_MAX_ADDR         (0x7FFF)
+#define SRAMC1_MIN_ADDR         (SRAMC0_MAX_ADDR + 1)
+#define SRAMC1_MAX_ADDR         (0xFFFF)
+#define SRAMC2_MIN_ADDR         (SRAMC1_MAX_ADDR + 1)
+#define SRAMC2_MAX_ADDR         (0x17FFF)
+#define SRAMC2_MAX_ADDR_H       (SRAMC2_MAX_ADDR >> 16)
+#define SRAMC2_MAX_ADDR_L       (SRAMC2_MAX_ADDR & 0xFFFF)
+#define SRAMC3_MIN_ADDR         (SRAMC2_MAX_ADDR + 1)
+#define SRAMC3_MIN_ADDR_H       (SRAMC3_MIN_ADDR >> 16)
+#define SRAMC3_MIN_ADDR_L       (SRAMC3_MIN_ADDR & 0xFFFF)
+#define SRAMC3_MAX_ADDR         (0x1FFFF)
+#define SRAMC3_MAX_ADDR_H       (SRAMC3_MAX_ADDR >> 16)
+#define SRAMC3_MAX_ADDR_L       (SRAMC3_MAX_ADDR & 0xFFFF)
+#endif
+
+#define SRAMC_PRAMCR_OFFSET     0x0
+#define SRAMC_PRAMCR_INITREQ    1
+#define SRAMC_PRAMIAS_OFFSET    0x4
+#define SRAMC_PRAMIAE_OFFSET    0x8
+#define SRAMC_PRAMSR_OFFSET     0xC
+#define SRAMC_PRAMSR_IDONE      1
+
+#define SSRAM_MAX_ADDR          0x7FF
 
 #ifndef __ASSEMBLER__
 #include <stdint.h>
@@ -37,6 +74,5 @@
 int s32g_sram_clear(uintptr_t start, uintptr_t end);
 void s32g_ssram_clear(void);
 #endif
-
 #endif
 
diff --git a/plat/nxp/s32/s32g/s32g2/include/s32g2_sramc.h b/plat/nxp/s32/s32g/s32g2/include/s32g2_sramc.h
deleted file mode 100644
index 5c7289480..000000000
--- a/plat/nxp/s32/s32g/s32g2/include/s32g2_sramc.h
+++ /dev/null
@@ -1,19 +0,0 @@
-/*
- * Copyright 2020-2021 NXP
- *
- * SPDX-License-Identifier: BSD-3-Clause
- */
-#ifndef S32G2_SRAMC_H
-#define S32G2_SRAMC_H
-
-#include <lib/utils_def.h>
-#include <s32g_sramc.h>
-
-/* Block ranges */
-#define SRAMC0_MIN_ADDR		(0x0)
-#define SRAMC0_MAX_ADDR		(0x7FFF)
-#define SRAMC1_MIN_ADDR		(SRAMC0_MAX_ADDR + 1)
-#define SRAMC1_MAX_ADDR		(0x10000)
-
-#endif
-
diff --git a/plat/nxp/s32/s32g/s32g2/platform.mk b/plat/nxp/s32/s32g/s32g2/platform.mk
index 9e9a79dd4..12573f9c1 100644
--- a/plat/nxp/s32/s32g/s32g2/platform.mk
+++ b/plat/nxp/s32/s32g/s32g2/platform.mk
@@ -15,7 +15,6 @@ include plat/nxp/s32/s32g/s32g_common.mk
 PLAT_INCLUDES		+= -Iplat/nxp/s32/s32g/s32g2/include \
 
 PLAT_BL_COMMON_SOURCES	+= drivers/nxp/s32g/clk/s32g274a_clk.c \
-			   plat/nxp/s32/s32g/s32g2/s32g2_sramc.S \
 			   plat/nxp/s32/s32g/s32g2/s32g2_mc_me.c \
 			   plat/nxp/s32/s32g/s32g2/s32g2_mc_rgm.c \
 			   lib/cpus/aarch64/s32g2.S \
diff --git a/plat/nxp/s32/s32g/s32g2/s32g2_sramc.S b/plat/nxp/s32/s32g/s32g2/s32g2_sramc.S
deleted file mode 100644
index 9d853a34e..000000000
--- a/plat/nxp/s32/s32g/s32g2/s32g2_sramc.S
+++ /dev/null
@@ -1,264 +0,0 @@
-/*
- * Copyright 2019-2021 NXP
- *
- * SPDX-License-Identifier: BSD-3-Clause
- */
-
-#include <asm_macros.S>
-#include <console_macros.S>
-#include "platform_def.h"
-#include "s32g2_sramc.h"
-#include <lib/utils_def.h>
-
-.globl _s32g_sram_clr
-
-/*
- * Translate a bus address in SRAM controller initialization address based on:
- * mem_addr[16:0] = {bus_addr[23:9], bus_addr[5:4]}
- *
- * addr := ((addr >> 9) << 2) | ((addr >> 4) & 0x3);
- *
- * x0: SRAM bus address
- * ret: x0: Initialization address
- *
- * Clobber list: x0,x4,x5
- */
-func calc_sramc_addr
-	lsr	x4, x0, #9
-	lsl	x4, x4, #2
-	lsr	x5, x0, #4
-	and	x5, x5, #3
-	orr	x0, x4, x5
-	ret
-endfunc calc_sramc_addr
-
-/**
- * Check if two intervals are in overlap
- *
- * x0: start index of the first interval
- * x1: end index of the first interval
- * x2: start index of the second interval
- * x3: end index of the second interval
- *
- * x0: return 0 if the intervals do not overlap and 1 otherwise
- * Clobber list: x0,x1,x2,x3,x4,x5,x6
- */
-func in_overlap
-	/* x4 = max */
-	cmp	x1, x3
-	b.gt	1f
-	mov	x4, x3
-	b	2f
-1:
-	mov	x4, x1
-2:
-	/* x5 = min */
-	cmp	x0, x2
-	b.lt	3f
-	mov	x5, x2
-	b	4f
-3:
-	mov	x5, x0
-4:
-	/* x5 = max - min */
-	sub	x5, x4, x5
-	/* x4 = first interval size */
-	sub	x4, x1, x0
-	/* x6 = second interval size */
-	sub	x6, x3, x2
-	/* x4 = len1 + len2 */
-	add	x4, x4, x6
-	cmp	x4, x5
-	bgt	overlap
-	mov	x0, #0
-	ret
-overlap:
-	mov	x0, #1
-	ret
-endfunc in_overlap
-
-/**
- * Clear SRAM range using SRAM controller
- *
- * x0: SRAM controller address
- * x1: Initialization Start Address
- * x2: Initialization End Address
- *
- * Clobber list: x0,x1,x2,x3
- */
-func clear_sramc_range
-	/* Disable the module */
-	mov	x3, #0
-	str	w3, [x0, #SRAMC_PRAMCR_OFFSET]
-
-	/* Address range */
-	str	w1, [x0, #SRAMC_PRAMIAS_OFFSET]
-	str	w2, [x0, #SRAMC_PRAMIAE_OFFSET]
-
-	/* Request initialization */
-	mov	x3, #SRAMC_PRAMCR_INITREQ
-	str	w3, [x0, #SRAMC_PRAMCR_OFFSET]
-
-wait_init:
-	ldr	w3, [x0, #SRAMC_PRAMSR_OFFSET]
-	and	w3, w3, #SRAMC_PRAMSR_IDONE
-	cbz	w3, wait_init
-
-	/* Clear status */
-	mov	w3, #SRAMC_PRAMSR_IDONE
-	str	w3, [x0, #SRAMC_PRAMSR_OFFSET]
-
-	ret
-endfunc clear_sramc_range
-
-/* x0: start address of memory area to clear
- * x1: end address of memory area to clear
- *
- * Clobber list: x0,x1,x9,x10
- */
-func a53_sram_clr
-	mov	x10, #0x0
-	cmp	x1, x0
-	bgt	pos_step
-	mov	x9, #-8
-	b	clr_loop
-pos_step:
-	mov	x9, #8
-clr_loop:
-	cmp	x1, x0
-	beq	finish
-	str	x10, [x0]
-	add	x0, x0, x9
-	b	clr_loop
-finish:
-	ret
-endfunc a53_sram_clr
-
-func clear_unaligned_ends
-	/* Save x30 */
-	mov	x12, x30
-	/*
-	 * Obtain SRAM addresses
-	 */
-	mov	x9, #S32G_SRAM_BASE
-	add	x11, x1, x9
-	add	x9, x0, x9
-
-	and	x1, x9, #SRAM_INV_BLOCK_MASK
-	cmp	x1, x9
-	beq	clear_end
-	add	x1, x1, SRAM_BLOCK
-	mov	x0, x9
-	bl	a53_sram_clr
-
-clear_end:
-	and	x0, x11, #SRAM_INV_BLOCK_MASK
-	cmp	x0, x11
-	beq	clr_exit
-	mov	x1, x11
-	bl	a53_sram_clr
-clr_exit:
-	mov	x30, x12
-	ret
-endfunc clear_unaligned_ends
-
-/* x0: start address of memory area to clear
- * x1: end address of memory area to clear
- * x0: return 0 on error or size of memory cleared on success
- *
- * Clobber list: x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x11,x12,x13,x14,x15
- */
-func _s32g_sram_clr
-	/* Save x30 */
-	mov	x15, x30
-
-	mov	x13, x0
-	mov	x14, x1
-	bl	clear_unaligned_ends
-	mov	x0, x13
-	mov	x1, x14
-
-	/* Align to SRAM blocks */
-	and	x9, x0, #SRAM_INV_BLOCK_MASK
-	cmp	x0, x9
-	beq	align_high_addr
-	add	x0, x9, SRAM_BLOCK
-
-align_high_addr:
-	and	x1, x1, #SRAM_INV_BLOCK_MASK
-
-	sub	x1, x1, #1
-	/* Low address */
-	bl	calc_sramc_addr
-	mov	x7, x0
-	mov	x0, x1
-
-	/* High address */
-	bl	calc_sramc_addr
-
-	/**
-	 * x7 - Low initialization address
-	 * x8 - High initialization address
-	 */
-	mov	x8, x0
-	mov	x9, #SRAMC1_MAX_ADDR
-	cmp	x8, x9
-	bgt	error
-
-	mov	x0, #SRAMC0_MIN_ADDR
-	mov	x1, #SRAMC0_MAX_ADDR
-	mov	x2, x7
-	mov	x3, x8
-	bl	in_overlap
-	cbnz	x0, init_sramc0
-
-check_sramc1:
-	mov	x0, #SRAMC1_MIN_ADDR
-	mov	x1, #SRAMC1_MAX_ADDR
-	mov	x2, x7
-	mov	x3, x8
-	bl	in_overlap
-	cbnz	x0, init_sramc1
-	b	sram_exit
-
-init_sramc0:
-	mov	x0, #SRAMC0_BASE_ADDR_L
-	movk	x0, #SRAMC0_BASE_ADDR_H, lsl #16
-	mov	x1, x7
-	mov	x2, x8
-	mov	x9, #SRAMC0_MAX_ADDR
-	cmp	x2, x9
-	b.gt	1f
-	b	2f
-1:
-	mov	x2, #SRAMC0_MAX_ADDR
-2:
-	bl	clear_sramc_range
-	b	check_sramc1
-
-init_sramc1:
-	mov	x0, #SRAMC1_BASE_ADDR_L
-	movk	x0, #SRAMC1_BASE_ADDR_H, lsl #16
-	cmp	x7, #SRAMC1_MIN_ADDR
-	b.lt	3f
-	sub	x1, x7, #SRAMC1_MIN_ADDR
-	b	4f
-3:
-	mov	x1, #0
-4:
-	sub	x2, x8, #SRAMC1_MIN_ADDR
-	bl	clear_sramc_range
-
-	mov	x0, #0
-
-sram_exit:
-	/* Restore x30 */
-	mov	x30, x15
-	ret
-
-error:
-	/* Restore x30 */
-	mov	x30, x15
-	mov	x0, #-1
-	ret
-endfunc _s32g_sram_clr
diff --git a/plat/nxp/s32/s32g/s32g3/include/s32g3_sramc.h b/plat/nxp/s32/s32g/s32g3/include/s32g3_sramc.h
deleted file mode 100644
index 4e8c9362e..000000000
--- a/plat/nxp/s32/s32g/s32g3/include/s32g3_sramc.h
+++ /dev/null
@@ -1,36 +0,0 @@
-/*
- * Copyright 2021 NXP
- *
- * SPDX-License-Identifier: BSD-3-Clause
- */
-#ifndef S32G3_SRAMC_H
-#define S32G3_SRAMC_H
-
-#include <lib/utils_def.h>
-#include <s32g_sramc.h>
-
-#define SRAMC2_BASE_ADDR	0x4055A000
-#define SRAMC2_BASE_ADDR_H	(SRAMC0_BASE_ADDR >> 16)
-#define SRAMC2_BASE_ADDR_L	((SRAMC0_BASE_ADDR & 0xFFFF))
-#define SRAMC3_BASE_ADDR	0x4055E000
-#define SRAMC3_BASE_ADDR_H	(SRAMC1_BASE_ADDR >> 16)
-#define SRAMC3_BASE_ADDR_L	((SRAMC1_BASE_ADDR & 0xFFFF))
-
-/* Block ranges */
-#define SRAMC0_MIN_ADDR		(0x0)
-#define SRAMC0_MAX_ADDR		(0x7FFF)
-#define SRAMC1_MIN_ADDR		(SRAMC0_MAX_ADDR + 1)
-#define SRAMC1_MAX_ADDR		(0xFFFF)
-#define SRAMC2_MIN_ADDR		(SRAMC1_MAX_ADDR + 1)
-#define SRAMC2_MAX_ADDR		(0x17FFF)
-#define SRAMC2_MAX_ADDR_H	(SRAMC2_MAX_ADDR >> 16)
-#define SRAMC2_MAX_ADDR_L	(SRAMC2_MAX_ADDR & 0xFFFF)
-#define SRAMC3_MIN_ADDR		(SRAMC2_MAX_ADDR + 1)
-#define SRAMC3_MIN_ADDR_H	(SRAMC3_MIN_ADDR >> 16)
-#define SRAMC3_MIN_ADDR_L	(SRAMC3_MIN_ADDR & 0xFFFF)
-#define SRAMC3_MAX_ADDR		(0x1FFFF)
-#define SRAMC3_MAX_ADDR_H	(SRAMC3_MAX_ADDR >> 16)
-#define SRAMC3_MAX_ADDR_L	(SRAMC3_MAX_ADDR & 0xFFFF)
-
-#endif
-
diff --git a/plat/nxp/s32/s32g/s32g3/platform.mk b/plat/nxp/s32/s32g/s32g3/platform.mk
index cc1de703e..391b5525d 100644
--- a/plat/nxp/s32/s32g/s32g3/platform.mk
+++ b/plat/nxp/s32/s32g/s32g3/platform.mk
@@ -14,8 +14,7 @@ include plat/nxp/s32/s32g/s32g_common.mk
 
 PLAT_INCLUDES		+= -Iplat/nxp/s32/s32g/s32g3/include \
 
-PLAT_BL_COMMON_SOURCES	+= plat/nxp/s32/s32g/s32g3/s32g3_sramc.S \
-			   plat/nxp/s32/s32g/s32g3/s32g3_mc_me.c \
+PLAT_BL_COMMON_SOURCES	+= plat/nxp/s32/s32g/s32g3/s32g3_mc_me.c \
 			   plat/nxp/s32/s32g/s32g3/s32g3_mc_rgm.c \
 			   drivers/nxp/s32g/clk/s32g398a_clk.c \
 			   lib/cpus/aarch64/cortex_a53.S \
diff --git a/plat/nxp/s32/s32g/s32g_common.mk b/plat/nxp/s32/s32g/s32g_common.mk
index bb337aa59..2fd13a4d7 100644
--- a/plat/nxp/s32/s32g/s32g_common.mk
+++ b/plat/nxp/s32/s32g/s32g_common.mk
@@ -58,6 +58,7 @@ PLAT_BL_COMMON_SOURCES	+= plat/nxp/s32/s32g/s32g_lowlevel_common.S \
 			   plat/nxp/s32/s32g/s32g_pinctrl.c \
 			   plat/nxp/s32/s32g/s32g_clocks.c \
 			   plat/nxp/s32/s32g/s32g_sramc.c \
+			   plat/nxp/s32/s32g/s32g_sramc_asm.S \
 			   plat/nxp/s32/s32g/s32g_linflexuart.c \
 			   plat/nxp/s32/s32g/s32g_linflexuart_crash.S \
 			   drivers/nxp/s32g/i2c/s32g_i2c.c \
diff --git a/plat/nxp/s32/s32g/s32g3/s32g3_sramc.S b/plat/nxp/s32/s32g/s32g_sramc_asm.S
similarity index 89%
rename from plat/nxp/s32/s32g/s32g3/s32g3_sramc.S
rename to plat/nxp/s32/s32g/s32g_sramc_asm.S
index 7d27379fa..5918db6da 100644
--- a/plat/nxp/s32/s32g/s32g3/s32g3_sramc.S
+++ b/plat/nxp/s32/s32g/s32g_sramc_asm.S
@@ -7,16 +7,19 @@
 #include <asm_macros.S>
 #include <console_macros.S>
 #include "platform_def.h"
-#include "s32g3_sramc.h"
+#include "s32g_sramc.h"
 #include <lib/utils_def.h>
 
 .globl _s32g_sram_clr
 
 /*
  * Translate a bus address in SRAM controller initialization address based on:
- * mem_addr[16:0] = {bus_addr[24:10], bus_addr[5:4]}
- *
- * addr := ((addr >> 10) << 2) | ((addr >> 4) & 0x3);
+ * S32G2:
+ * 	mem_addr[16:0] = {bus_addr[23:9], bus_addr[5:4]}
+ * 	addr := ((addr >> 9) << 2) | ((addr >> 4) & 0x3);
+ * S32G3:
+ * 	mem_addr[16:0] = {bus_addr[23:10], bus_addr[5:4]}
+ * 	addr := ((addr >> 10) << 2) | ((addr >> 4) & 0x3);
  *
  * x0: SRAM bus address
  * ret: x0: Initialization address
@@ -24,7 +27,11 @@
  * Clobber list: x0,x4,x5
  */
 func calc_sramc_addr
+#if defined(PLAT_s32g2)
+	lsr	x4, x0, #9
+#else /* PLAT_s32g3 */
 	lsr	x4, x0, #10
+#endif
 	lsl	x4, x4, #2
 	lsr	x5, x0, #4
 	and	x5, x5, #3
@@ -169,8 +176,9 @@ endfunc clear_unaligned_ends
  * Clobber list: x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x11,x12,x13,x14,x15
  */
 func _s32g_sram_clr
-	mov	x16, x1
-	sub	x16, x16, x0
+	/* Save x30 */
+	mov	x15, x30
+
 	mov	x13, x0
 	mov	x14, x1
 	bl	clear_unaligned_ends
@@ -232,7 +240,11 @@ check_sramc1:
 	mov	x2, x7
 	mov	x3, x10
 	bl	in_overlap
+#if defined(PLAT_s32g2)
+	cbz	x0, sram_exit
+#else /* PLAT_s32g3 */
 	cbz	x0, check_sramc2
+#endif
 
 init_sramc1:
 	mov	x0, #SRAMC1_BASE_ADDR
@@ -247,6 +259,7 @@ init_sramc1:
 	sub	x2, x10, #SRAMC1_MIN_ADDR
 	bl	clear_sramc_range
 
+#if defined(PLAT_s32g3)
 check_sramc2:
 	mov	x0, #SRAMC2_MIN_ADDR
 	mov	x1, #SRAMC2_MAX_ADDR_L
@@ -290,39 +303,18 @@ init_sramc3:
 8:
 	sub	x2, x10, #SRAMC2_MIN_ADDR
 	bl	clear_sramc_range
+#endif
 
 	mov	x0, #0
 
 sram_exit:
 	/* Restore x30 */
 	mov	x30, x15
-	mov	x0, x16
 	ret
 
 error:
 	/* Restore x30 */
 	mov	x30, x15
-	mov	x0, #0
+	mov	x0, #-1
 	ret
 endfunc _s32g_sram_clr
-
-/**
- * Clear SRAM region using SRAMC
- *
- * x0: start address of memory area to clear
- * x1: size of the memory area to be cleared
- * x0: return the size of the cleared memory
- *
- * Clobber list: x0,x1,x2,x3,x4,x5,x6,x7,x9,x10,x11,x12,x13,x14,x15,x16
- */
-func sram_clr
-	/* Save x30 */
-	mov	x15, x30
-
-	/* To bus addresses */
-	mov	x2, #S32G_SRAM_BASE
-	sub	x0, x0, x2
-	add	x1, x1, x0
-
-	b	_s32g_sram_clr
-endfunc sram_clr
-- 
2.17.1

