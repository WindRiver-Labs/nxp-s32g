From 8e2f4c4b2571d361b0ab270c1ae3222aa7bfb21c Mon Sep 17 00:00:00 2001
From: Larisa Grigore <larisa.grigore@nxp.com>
Date: Thu, 1 Jul 2021 10:56:40 +0300
Subject: [PATCH 09/18] s32g: clk: Rename s32g274a_scmi_ids

Upstream-Status: Pending

Issue: ALB-7394
Signed-off-by: Larisa Grigore <larisa.grigore@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 .../{s32g274a_scmi_ids.c => s32g_scmi_ids.c}  | 36 +++++++++----------
 plat/nxp/s32g/s32g2/platform.mk               |  1 -
 plat/nxp/s32g/s32g_common.mk                  |  1 +
 3 files changed, 19 insertions(+), 19 deletions(-)
 rename drivers/nxp/s32g/clk/{s32g274a_scmi_ids.c => s32g_scmi_ids.c} (91%)

diff --git a/drivers/nxp/s32g/clk/s32g274a_scmi_ids.c b/drivers/nxp/s32g/clk/s32g_scmi_ids.c
similarity index 91%
rename from drivers/nxp/s32g/clk/s32g274a_scmi_ids.c
rename to drivers/nxp/s32g/clk/s32g_scmi_ids.c
index f0bec6b7a..eec6b4f41 100644
--- a/drivers/nxp/s32g/clk/s32g274a_scmi_ids.c
+++ b/drivers/nxp/s32g/clk/s32g_scmi_ids.c
@@ -12,7 +12,7 @@
 
 #define INDEX(X)	((X) - S32GEN1_SCMI_PLAT_CLK_BASE_ID)
 
-struct s32gen1_scmi_clk s32g274a_scmi_clk[] = {
+struct s32gen1_scmi_clk s32g_scmi_clk[] = {
 	SCMI_ARRAY_ENTRY(S32G_SCMI_CLK_USB_MEM,
 			 S32GEN1_CLK_XBAR_DIV4, "usb_mem"),
 	SCMI_ARRAY_ENTRY(S32G_SCMI_CLK_USB_LOW,
@@ -143,10 +143,10 @@ int plat_scmi_id2clk(uint32_t scmi_clk_id, uint32_t *clk_id)
 	if (!clk_id)
 		return -EINVAL;
 
-	if (INDEX(scmi_clk_id) >= ARRAY_SIZE(s32g274a_scmi_clk))
+	if (INDEX(scmi_clk_id) >= ARRAY_SIZE(s32g_scmi_clk))
 		return -EINVAL;
 
-	*clk_id = s32g274a_scmi_clk[INDEX(scmi_clk_id)].plat_id;
+	*clk_id = s32g_scmi_clk[INDEX(scmi_clk_id)].plat_id;
 	if (!*clk_id) {
 		ERROR("Unhandled S32G clock: %u\n", scmi_clk_id);
 		return -EINVAL;
@@ -159,7 +159,7 @@ int plat_compound_clk_get(struct clk *clk)
 {
 	uint32_t scmi_clk_id = clk->id;
 
-	if (INDEX(scmi_clk_id) >= ARRAY_SIZE(s32g274a_scmi_clk))
+	if (INDEX(scmi_clk_id) >= ARRAY_SIZE(s32g_scmi_clk))
 		return -EINVAL;
 
 	if (s32g_compound2clkid(scmi_clk_id, NULL)) {
@@ -311,13 +311,13 @@ int plat_compound_clk_enable(struct clk *clk, int enable)
 	int ret;
 
 	if (s32g_compound2clkid(clk_id, &id)) {
-		ERROR("Invalid s32g274a compound clock : %u\n", clk_id);
+		ERROR("Invalid s32g compound clock : %u\n", clk_id);
 		return -EINVAL;
 	}
 
 	if (id == S32GEN1_SCMI_NOT_IMPLEMENTED_CLK) {
 		ERROR("Clock %s is not handled yet\n",
-		      s32g274a_scmi_clk[INDEX(clk_id)].name);
+		      s32g_scmi_clk[INDEX(clk_id)].name);
 		return -EINVAL;
 	}
 
@@ -334,7 +334,7 @@ int plat_compound_clk_enable(struct clk *clk, int enable)
 		return ret;
 	}
 
-	s32g274a_scmi_clk[INDEX(clk_id)].enabled = enable;
+	s32g_scmi_clk[INDEX(clk_id)].enabled = enable;
 
 	return 0;
 }
@@ -346,7 +346,7 @@ unsigned long plat_compound_clk_set_rate(struct clk *clk, unsigned long rate)
 	uint32_t id;
 	int ret;
 
-	if (INDEX(scmi_clk_id) >= ARRAY_SIZE(s32g274a_scmi_clk))
+	if (INDEX(scmi_clk_id) >= ARRAY_SIZE(s32g_scmi_clk))
 		return -EINVAL;
 
 	ret = plat_compound_clk_set_parents(clk);
@@ -362,7 +362,7 @@ unsigned long plat_compound_clk_set_rate(struct clk *clk, unsigned long rate)
 
 	if (id == S32GEN1_SCMI_NOT_IMPLEMENTED_CLK) {
 		ERROR("Clock %s is not handled yet\n",
-		      s32g274a_scmi_clk[INDEX(scmi_clk_id)].name);
+		      s32g_scmi_clk[INDEX(scmi_clk_id)].name);
 		return 0;
 	}
 
@@ -376,7 +376,7 @@ unsigned long plat_compound_clk_get_rate(struct clk *clk)
 	uint32_t scmi_clk_id = clk->id;
 	uint32_t id;
 
-	if (INDEX(scmi_clk_id) >= ARRAY_SIZE(s32g274a_scmi_clk))
+	if (INDEX(scmi_clk_id) >= ARRAY_SIZE(s32g_scmi_clk))
 		return 0;
 
 	if (s32g_compound2clkid(scmi_clk_id, &id)) {
@@ -386,7 +386,7 @@ unsigned long plat_compound_clk_get_rate(struct clk *clk)
 
 	if (id == S32GEN1_SCMI_NOT_IMPLEMENTED_CLK) {
 		ERROR("Clock %s is not handled yet\n",
-		      s32g274a_scmi_clk[INDEX(scmi_clk_id)].name);
+		      s32g_scmi_clk[INDEX(scmi_clk_id)].name);
 		return 0;
 	}
 
@@ -396,23 +396,23 @@ unsigned long plat_compound_clk_get_rate(struct clk *clk)
 
 uint32_t plat_get_nclocks(void)
 {
-	return S32GEN1_PLAT_SCMI_CLK(ARRAY_SIZE(s32g274a_scmi_clk));
+	return S32GEN1_PLAT_SCMI_CLK(ARRAY_SIZE(s32g_scmi_clk));
 }
 
 const char *plat_scmi_clk_get_name(uint32_t scmi_clk_id)
 {
-	if (INDEX(scmi_clk_id) >= ARRAY_SIZE(s32g274a_scmi_clk))
+	if (INDEX(scmi_clk_id) >= ARRAY_SIZE(s32g_scmi_clk))
 		return NULL;
 
-	return s32g274a_scmi_clk[INDEX(scmi_clk_id)].name;
+	return s32g_scmi_clk[INDEX(scmi_clk_id)].name;
 }
 
 bool plat_scmi_clk_is_enabled(uint32_t scmi_clk_id)
 {
-	if (INDEX(scmi_clk_id) >= ARRAY_SIZE(s32g274a_scmi_clk))
+	if (INDEX(scmi_clk_id) >= ARRAY_SIZE(s32g_scmi_clk))
 		return false;
 
-	return s32g274a_scmi_clk[INDEX(scmi_clk_id)].enabled;
+	return s32g_scmi_clk[INDEX(scmi_clk_id)].enabled;
 }
 
 int plat_scmi_clk_get_rates(struct clk *clk, unsigned long *rates,
@@ -423,7 +423,7 @@ int plat_scmi_clk_get_rates(struct clk *clk, unsigned long *rates,
 	uint32_t id;
 	int ret;
 
-	if (INDEX(scmi_clk_id) >= ARRAY_SIZE(s32g274a_scmi_clk))
+	if (INDEX(scmi_clk_id) >= ARRAY_SIZE(s32g_scmi_clk))
 		return -EINVAL;
 
 	ret = plat_compound_clk_set_parents(clk);
@@ -439,7 +439,7 @@ int plat_scmi_clk_get_rates(struct clk *clk, unsigned long *rates,
 
 	if (id == S32GEN1_SCMI_NOT_IMPLEMENTED_CLK) {
 		ERROR("Clock %s is not handled yet\n",
-		      s32g274a_scmi_clk[INDEX(scmi_clk_id)].name);
+		      s32g_scmi_clk[INDEX(scmi_clk_id)].name);
 		return -EINVAL;
 	}
 
diff --git a/plat/nxp/s32g/s32g2/platform.mk b/plat/nxp/s32g/s32g2/platform.mk
index 57479f96a..a3ec9faf8 100644
--- a/plat/nxp/s32g/s32g2/platform.mk
+++ b/plat/nxp/s32g/s32g2/platform.mk
@@ -8,7 +8,6 @@ include plat/nxp/s32g/s32g_common.mk
 
 PLAT_BL_COMMON_SOURCES	+= drivers/nxp/s32g/clk/s32g274a_clk.c \
 
-BL31_SOURCES		+= drivers/nxp/s32g/clk/s32g274a_scmi_ids.c \
 # Device tree
 DTB_FILE_NAME		?= fsl-s32g274a-rdb.dtb
 FDT_SOURCES             := $(addprefix fdts/, $(patsubst %.dtb,%.dts,$(DTB_FILE_NAME)))
diff --git a/plat/nxp/s32g/s32g_common.mk b/plat/nxp/s32g/s32g_common.mk
index cdde39ed7..ae0a452da 100644
--- a/plat/nxp/s32g/s32g_common.mk
+++ b/plat/nxp/s32g/s32g_common.mk
@@ -113,6 +113,7 @@ BL31_SOURCES		+= plat/nxp/s32g/s32g_bl31.c \
 			   drivers/nxp/s32g/s32g_wkpu.c \
 			   drivers/nxp/s32g/clk/clk.c \
 			   drivers/nxp/s32g/clk/fixed_clk.c \
+			   drivers/nxp/s32g/clk/s32g_scmi_ids.c \
 			   drivers/nxp/s32g/clk/s32gen1_scmi_clk.c \
 			   drivers/nxp/s32g/clk/s32gen1_scmi_ids.c \
 			   drivers/st/scmi-msg/base.c \
-- 
2.17.1

