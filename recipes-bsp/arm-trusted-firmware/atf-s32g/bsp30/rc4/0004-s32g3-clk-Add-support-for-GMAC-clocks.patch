From 56176b62395ee27c77522a0883ac6f383bdbcb58 Mon Sep 17 00:00:00 2001
From: Larisa Grigore <larisa.grigore@nxp.com>
Date: Thu, 1 Jul 2021 15:12:40 +0300
Subject: [PATCH 04/18] s32g3: clk: Add support for GMAC clocks

In S32G3 case, GMAC implementation was changed compared to
S32G2. Now all GMAC related clocks derive from MC_CGM6.

Upstream-Status: Pending

Issue: ALB-7394
Signed-off-by: Larisa Grigore <larisa.grigore@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 drivers/nxp/s32g/clk/enable_clk.c             |   1 +
 drivers/nxp/s32g/clk/plat_clk.c               |  14 +-
 drivers/nxp/s32g/clk/s32g274a_clk.c           |  25 +++
 drivers/nxp/s32g/clk/s32g398a_clk.c           | 147 ++++++++++++++++++
 drivers/nxp/s32g/clk/s32g_clk.c               |   2 -
 drivers/nxp/s32g/clk/s32gen1_scmi_ids.c       |  21 ++-
 .../drivers/nxp/s32g/clk/s32gen1_clk_funcs.h  |   2 +
 .../nxp/s32g/clk/s32gen1_clk_modules.h        |   4 +-
 include/dt-bindings/clock/s32g-clock.h        |   1 +
 include/dt-bindings/clock/s32g3-clock.h       |  16 ++
 10 files changed, 219 insertions(+), 14 deletions(-)
 create mode 100644 drivers/nxp/s32g/clk/s32g398a_clk.c
 create mode 100644 include/dt-bindings/clock/s32g3-clock.h

diff --git a/drivers/nxp/s32g/clk/enable_clk.c b/drivers/nxp/s32g/clk/enable_clk.c
index ff11ae21a..3b168e01c 100644
--- a/drivers/nxp/s32g/clk/enable_clk.c
+++ b/drivers/nxp/s32g/clk/enable_clk.c
@@ -410,6 +410,7 @@ static int enable_mux(struct s32gen1_clk_obj *module,
 	case S32GEN1_CGM1:
 	case S32GEN1_CGM2:
 	case S32GEN1_CGM5:
+	case S32GEN1_CGM6:
 		return enable_cgm_mux(mux, priv, enable);
 	default:
 		ERROR("Unknown mux parent type: %d\n", mux->module);
diff --git a/drivers/nxp/s32g/clk/plat_clk.c b/drivers/nxp/s32g/clk/plat_clk.c
index 5710f04cc..0d55f5d9d 100644
--- a/drivers/nxp/s32g/clk/plat_clk.c
+++ b/drivers/nxp/s32g/clk/plat_clk.c
@@ -1,5 +1,5 @@
 /*
- * Copyright 2020 NXP
+ * Copyright 2020-2021 NXP
  *
  * SPDX-License-Identifier: BSD-3-Clause
  */
@@ -33,6 +33,8 @@ void *get_base_addr(enum s32gen1_clk_source id, struct s32gen1_clk_priv *priv)
 		return priv->cgm2;
 	case S32GEN1_CGM5:
 		return priv->cgm5;
+	case S32GEN1_CGM6:
+		return priv->cgm6;
 	case S32GEN1_DDR_PLL:
 		return priv->ddrpll;
 	case S32GEN1_FXOSC:
@@ -115,6 +117,10 @@ static int s32gen1_clk_probe(struct s32gen1_clk_driver *drv, void *fdt,
 			.base_addr = &priv->cgm5,
 			.compat = "fsl,s32gen1-mc_cgm5",
 		},
+		{
+			.base_addr = &priv->cgm6,
+			.compat = "fsl,s32gen1-mc_cgm6",
+		},
 		{
 			.base_addr = &priv->armpll,
 			.compat = "fsl,s32gen1-armpll",
@@ -142,10 +148,8 @@ static int s32gen1_clk_probe(struct s32gen1_clk_driver *drv, void *fdt,
 	};
 
 	for (i = 0; i < ARRAY_SIZE(deps); i++) {
-		ret = bind_clk_provider(drv, fdt, deps[i].compat,
-				deps[i].base_addr, &deps[i].node);
-		if (ret)
-			return ret;
+		bind_clk_provider(drv, fdt, deps[i].compat,
+				  deps[i].base_addr, &deps[i].node);
 	}
 
 	ret = dt_clk_apply_defaults(fdt, node);
diff --git a/drivers/nxp/s32g/clk/s32g274a_clk.c b/drivers/nxp/s32g/clk/s32g274a_clk.c
index 3d83a6134..d8a8f8d00 100644
--- a/drivers/nxp/s32g/clk/s32g274a_clk.c
+++ b/drivers/nxp/s32g/clk/s32g274a_clk.c
@@ -108,3 +108,28 @@ struct s32gen1_clk *s32g_get_plat_clock(uint32_t id)
 {
 	return NULL;
 }
+
+int cc_compound_clk_get_pid(uint32_t id, uint32_t *parent_id)
+{
+	if (!parent_id)
+		return -EINVAL;
+
+	switch (id) {
+	case S32GEN1_SCMI_CLK_GMAC0_RX_SGMII:
+	case S32GEN1_SCMI_CLK_GMAC0_RX_RGMII:
+		*parent_id = S32GEN1_CLK_MC_CGM0_MUX11;
+		break;
+	case S32GEN1_SCMI_CLK_GMAC0_TX_RGMII:
+	case S32GEN1_SCMI_CLK_GMAC0_TX_SGMII:
+		*parent_id = S32GEN1_CLK_MC_CGM0_MUX10;
+		break;
+	case S32GEN1_SCMI_CLK_GMAC0_TS_RGMII:
+	case S32GEN1_SCMI_CLK_GMAC0_TS_SGMII:
+		*parent_id = S32GEN1_CLK_MC_CGM0_MUX9;
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	return 0;
+}
diff --git a/drivers/nxp/s32g/clk/s32g398a_clk.c b/drivers/nxp/s32g/clk/s32g398a_clk.c
new file mode 100644
index 000000000..ad7fdec6d
--- /dev/null
+++ b/drivers/nxp/s32g/clk/s32g398a_clk.c
@@ -0,0 +1,147 @@
+// SPDX-License-Identifier: BSD-3-Clause
+/*
+ * Copyright 2021 NXP
+ */
+#include <dt-bindings/clock/s32gen1-clock.h>
+#include <dt-bindings/clock/s32gen1-scmi-clock.h>
+#include <dt-bindings/clock/s32g3-clock.h>
+#include <clk/s32gen1_clk_funcs.h>
+#include <clk/s32gen1_clk_modules.h>
+
+/* GMAC_TS_CLK */
+static struct s32gen1_fixed_clock gmac_ext_ts =
+		S32GEN1_FIXED_CLK_INIT();
+static struct s32gen1_clk gmac_ext_ts_clk =
+		S32GEN1_MODULE_CLK(gmac_ext_ts);
+static struct s32gen1_mux cgm6_mux0 =
+		S32GEN1_MUX_INIT(S32GEN1_CGM6, 0, 3,
+				 S32GEN1_CLK_FIRC,
+				 S32GEN1_CLK_PERIPH_PLL_PHI4,
+				 S32GEN1_CLK_GMAC0_EXT_TS);
+static struct s32gen1_clk cgm6_mux0_clk =
+		S32GEN1_MODULE_CLK(cgm6_mux0);
+static struct s32gen1_cgm_div gmac_ts_div =
+		S32GEN1_CGM_DIV_INIT(cgm6_mux0_clk, 0);
+static struct s32gen1_clk gmac_ts_clk =
+		S32GEN1_FREQ_MODULE_CLK(gmac_ts_div, 5 * MHZ, 200 * MHZ);
+
+/* GMAC0_TX_CLK */
+static struct s32gen1_fixed_clock gmac0_ext_tx =
+		S32GEN1_FIXED_CLK_INIT();
+static struct s32gen1_clk gmac0_ext_tx_clk =
+		S32GEN1_MODULE_CLK(gmac0_ext_tx);
+
+static struct s32gen1_fixed_clock gmac0_ext_ref =
+		S32GEN1_FIXED_CLK_INIT();
+static struct s32gen1_clk gmac0_ext_ref_clk =
+		S32GEN1_MODULE_CLK(gmac0_ext_ref);
+
+static struct s32gen1_mux cgm6_mux1 =
+		S32GEN1_MUX_INIT(S32GEN1_CGM6, 1, 5,
+				 S32GEN1_CLK_FIRC,
+				 S32GEN1_CLK_PERIPH_PLL_PHI5,
+				 S32GEN1_CLK_SERDES0_LANE0_TX,
+				 S32GEN1_CLK_GMAC0_EXT_TX,
+				 S32GEN1_CLK_GMAC0_EXT_REF);
+static struct s32gen1_clk cgm6_mux1_clk =
+		S32GEN1_MODULE_CLK(cgm6_mux1);
+static struct s32gen1_cgm_div gmac_tx_div =
+		S32GEN1_CGM_DIV_INIT(cgm6_mux1_clk, 0);
+static struct s32gen1_clk gmac_tx_clk =
+		S32GEN1_FREQ_MODULE_CLK(gmac_tx_div, 2500000, 125 * MHZ);
+
+/* GMAC0_RX_CLK */
+static struct s32gen1_fixed_clock gmac0_ext_rx =
+		S32GEN1_FIXED_CLK_INIT();
+static struct s32gen1_clk gmac0_ext_rx_clk =
+		S32GEN1_MODULE_CLK(gmac0_ext_rx);
+
+static struct s32gen1_mux cgm6_mux2 =
+		S32GEN1_MUX_INIT(S32GEN1_CGM6, 2, 4,
+				 S32GEN1_CLK_FIRC,
+				 S32GEN1_CLK_GMAC0_REF_DIV,
+				 S32GEN1_CLK_GMAC0_EXT_RX,
+				 S32GEN1_CLK_SERDES0_LANE0_CDR);
+static struct s32gen1_clk cgm6_mux2_clk =
+		S32GEN1_MODULE_CLK(cgm6_mux2);
+static struct s32gen1_clk gmac_rx_clk =
+		S32GEN1_CHILD_CLK(cgm6_mux2_clk, 2500000, 125 * MHZ);
+
+/* GMAC0_REF_DIV_CLK */
+static struct s32gen1_mux cgm6_mux3 =
+		S32GEN1_SHARED_MUX_INIT(S32GEN1_CGM6, 3, 2,
+					S32GEN1_CLK_FIRC,
+					S32GEN1_CLK_GMAC0_EXT_REF);
+static struct s32gen1_clk cgm6_mux3_clk =
+		S32GEN1_MODULE_CLK(cgm6_mux3);
+static struct s32gen1_clk gmac0_ref_div_clk =
+		S32GEN1_CHILD_CLK(cgm6_mux3_clk, 0, 50 * MHZ);
+static struct s32gen1_clk gmac0_ref_clk =
+		S32GEN1_CHILD_CLK(cgm6_mux3_clk, 0, 50 * MHZ);
+
+static struct s32gen1_clk *s32g398a_clocks[] = {
+	[ARR_CLK(S32G_CLK_MC_CGM6_MUX0)] = &cgm6_mux0_clk,
+	[ARR_CLK(S32G_CLK_MC_CGM6_MUX1)] = &cgm6_mux1_clk,
+	[ARR_CLK(S32G_CLK_MC_CGM6_MUX2)] = &cgm6_mux2_clk,
+	[ARR_CLK(S32G_CLK_MC_CGM6_MUX3)] = &cgm6_mux3_clk,
+};
+
+static struct s32gen1_clk *s32g398a_cc_clocks[] = {
+	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_TX)] = &gmac_tx_clk,
+	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_EXT_TS)] = &gmac_ext_ts_clk,
+	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_TS)] = &gmac_ts_clk,
+	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_EXT_TX)] = &gmac0_ext_tx_clk,
+	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_EXT_REF)] = &gmac0_ext_ref_clk,
+	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_EXT_RX)] = &gmac0_ext_rx_clk,
+	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_RX)] = &gmac_rx_clk,
+	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_REF_DIV)] = &gmac0_ref_div_clk,
+	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_REF)] = &gmac0_ref_clk,
+};
+
+struct s32gen1_clk *s32g_get_plat_cc_clock(uint32_t id)
+{
+	id = s32gen1_platclk2mux(id);
+
+	if (id >= ARRAY_SIZE(s32g398a_cc_clocks))
+		return NULL;
+
+	return s32g398a_cc_clocks[id];
+}
+
+struct s32gen1_clk *s32g_get_plat_clock(uint32_t id)
+{
+	if (id < S32GEN1_PLAT_CLK_ID_BASE)
+		return NULL;
+
+	id -= S32GEN1_PLAT_CLK_ID_BASE;
+
+	if (id >= ARRAY_SIZE(s32g398a_clocks))
+		return NULL;
+
+	return s32g398a_clocks[id];
+}
+
+int cc_compound_clk_get_pid(uint32_t id, uint32_t *parent_id)
+{
+	if (!parent_id)
+		return -EINVAL;
+
+	switch (id) {
+	case S32GEN1_SCMI_CLK_GMAC0_RX_SGMII:
+	case S32GEN1_SCMI_CLK_GMAC0_RX_RGMII:
+		*parent_id = S32G_CLK_MC_CGM6_MUX2;
+		break;
+	case S32GEN1_SCMI_CLK_GMAC0_TX_RGMII:
+	case S32GEN1_SCMI_CLK_GMAC0_TX_SGMII:
+		*parent_id = S32G_CLK_MC_CGM6_MUX1;
+		break;
+	case S32GEN1_SCMI_CLK_GMAC0_TS_RGMII:
+	case S32GEN1_SCMI_CLK_GMAC0_TS_SGMII:
+		*parent_id = S32G_CLK_MC_CGM6_MUX0;
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	return 0;
+}
diff --git a/drivers/nxp/s32g/clk/s32g_clk.c b/drivers/nxp/s32g/clk/s32g_clk.c
index 60a99c1b5..97d9b4261 100644
--- a/drivers/nxp/s32g/clk/s32g_clk.c
+++ b/drivers/nxp/s32g/clk/s32g_clk.c
@@ -7,8 +7,6 @@
 #include <clk/s32gen1_clk_modules.h>
 #include <clk/s32gen1_shared_clks.h>
 
-#define ARR_CLK(N)	S32G_CLK_INDEX(N)
-
 /* XBAR_2X */
 static struct s32gen1_part_block llce_block =
 		S32GEN1_PART_BLOCK_NO_STATUS(cgm0_mux0_clk, 3,
diff --git a/drivers/nxp/s32g/clk/s32gen1_scmi_ids.c b/drivers/nxp/s32g/clk/s32gen1_scmi_ids.c
index b4c46e2c7..3985d3b4b 100644
--- a/drivers/nxp/s32g/clk/s32gen1_scmi_ids.c
+++ b/drivers/nxp/s32g/clk/s32gen1_scmi_ids.c
@@ -210,7 +210,7 @@ int cc_set_mux_parent(struct clk *clk, uint32_t mux_id, uint32_t mux_source)
 
 static int set_gmac_rx_parent(struct clk *clk)
 {
-	uint32_t rx_id;
+	uint32_t rx_id, parent_id;
 	uint32_t clk_id = clk->id;
 
 	if (clk_id == S32GEN1_SCMI_CLK_GMAC0_RX_SGMII) {
@@ -222,12 +222,15 @@ static int set_gmac_rx_parent(struct clk *clk)
 		return -EINVAL;
 	}
 
-	return cc_set_mux_parent(clk, S32GEN1_CLK_MC_CGM0_MUX11, rx_id);
+	if (cc_compound_clk_get_pid(clk_id, &parent_id))
+		return -EINVAL;
+
+	return cc_set_mux_parent(clk, parent_id, rx_id);
 }
 
 static int set_gmac_tx_parent(struct clk *clk)
 {
-	uint32_t tx_id;
+	uint32_t tx_id, parent_id;
 	uint32_t clk_id = clk->id;
 
 	if (clk_id == S32GEN1_SCMI_CLK_GMAC0_TX_RGMII) {
@@ -239,12 +242,15 @@ static int set_gmac_tx_parent(struct clk *clk)
 		return -EINVAL;
 	}
 
-	return cc_set_mux_parent(clk, S32GEN1_CLK_MC_CGM0_MUX10, tx_id);
+	if (cc_compound_clk_get_pid(clk_id, &parent_id))
+		return -EINVAL;
+
+	return cc_set_mux_parent(clk, parent_id, tx_id);
 }
 
 static int set_gmac_ts_parent(struct clk *clk)
 {
-	uint32_t ts_id;
+	uint32_t ts_id, parent_id;
 	uint32_t clk_id = clk->id;
 
 	if (clk_id == S32GEN1_SCMI_CLK_GMAC0_TS_RGMII ||
@@ -255,7 +261,10 @@ static int set_gmac_ts_parent(struct clk *clk)
 		return -EINVAL;
 	}
 
-	return cc_set_mux_parent(clk, S32GEN1_CLK_MC_CGM0_MUX9, ts_id);
+	if (cc_compound_clk_get_pid(clk_id, &parent_id))
+		return -EINVAL;
+
+	return cc_set_mux_parent(clk, parent_id, ts_id);
 }
 
 static int cc_compound_clk_set_parents(struct clk *clk)
diff --git a/include/drivers/nxp/s32g/clk/s32gen1_clk_funcs.h b/include/drivers/nxp/s32g/clk/s32gen1_clk_funcs.h
index 0c4e0cd72..d461ed720 100644
--- a/include/drivers/nxp/s32g/clk/s32gen1_clk_funcs.h
+++ b/include/drivers/nxp/s32g/clk/s32gen1_clk_funcs.h
@@ -39,4 +39,6 @@ static inline struct s32gen1_clk_priv *s32gen1_get_clk_priv(struct clk *c)
 	return get_clk_drv_data(clk2clk_drv(c));
 }
 
+int cc_compound_clk_get_pid(uint32_t id, uint32_t *parent_id);
+
 #endif /* S32GEN1_CLK_FUNCS_H */
diff --git a/include/drivers/nxp/s32g/clk/s32gen1_clk_modules.h b/include/drivers/nxp/s32g/clk/s32gen1_clk_modules.h
index 39ed806d1..a0c42a8c1 100644
--- a/include/drivers/nxp/s32g/clk/s32gen1_clk_modules.h
+++ b/include/drivers/nxp/s32g/clk/s32gen1_clk_modules.h
@@ -1,6 +1,6 @@
 /* SPDX-License-Identifier: BSD-3-Clause */
 /*
- * Copyright 2020 NXP
+ * Copyright 2020-2021 NXP
  */
 #ifndef S32GEN1_CLK_MODULES_H
 #define S32GEN1_CLK_MODULES_H
@@ -129,6 +129,7 @@ struct s32gen1_clk_priv {
 	void *cgm1;
 	void *cgm2;
 	void *cgm5;
+	void *cgm6;
 	void *ddrpll;
 	void *fxosc;
 	void *mc_me;
@@ -146,6 +147,7 @@ enum s32gen1_clk_source {
 	S32GEN1_CGM1,
 	S32GEN1_CGM2,
 	S32GEN1_CGM5,
+	S32GEN1_CGM6,
 	S32GEN1_DDR_PLL,
 	S32GEN1_FIRC,
 	S32GEN1_FXOSC,
diff --git a/include/dt-bindings/clock/s32g-clock.h b/include/dt-bindings/clock/s32g-clock.h
index f80ac3d06..bdbd9c721 100644
--- a/include/dt-bindings/clock/s32g-clock.h
+++ b/include/dt-bindings/clock/s32g-clock.h
@@ -35,6 +35,7 @@
 
 #define S32G_CLK(N)			S32GEN1_PLAT_CLK(N)
 #define S32G_CLK_INDEX(N)		S32GEN1_PLAT_ARRAY_INDEX(N)
+#define ARR_CLK(N)			S32G_CLK_INDEX(N)
 
 /* PFE_MAC0 */
 #define S32G_CLK_PFE_MAC0_TX_DIV	S32G_CLK(0)
diff --git a/include/dt-bindings/clock/s32g3-clock.h b/include/dt-bindings/clock/s32g3-clock.h
new file mode 100644
index 000000000..b5f89a49d
--- /dev/null
+++ b/include/dt-bindings/clock/s32g3-clock.h
@@ -0,0 +1,16 @@
+/* SPDX-License-Identifier: BSD-3-Clause */
+/*
+ * Copyright 2021 NXP
+ */
+
+#ifndef __DT_BINDINGS_CLOCK_S32G3_H
+#define __DT_BINDINGS_CLOCK_S32G3_H
+
+#include <dt-bindings/clock/s32g-clock.h>
+
+#define S32G_CLK_MC_CGM6_MUX0		S32G_CLK(18)
+#define S32G_CLK_MC_CGM6_MUX1		S32G_CLK(19)
+#define S32G_CLK_MC_CGM6_MUX2		S32G_CLK(20)
+#define S32G_CLK_MC_CGM6_MUX3		S32G_CLK(21)
+
+#endif //__DT_BINDINGS_CLOCK_S32G3_H
-- 
2.17.1

