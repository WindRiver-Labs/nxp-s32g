From 0387b35d3a7556c87e86e6ac4edc8f8045973470 Mon Sep 17 00:00:00 2001
From: Larisa Grigore <larisa.grigore@nxp.com>
Date: Thu, 4 Feb 2021 11:59:00 +0200
Subject: [PATCH 03/14] s32g274:clk:scmi: Use S32G instead of S32G274

This rename is necessary in order to align with U-Boot
recent changes. The headers will be used by both S32G2 and
S32G3.

Upstream-Status: Pending

Issue: ALB-6121
Signed-off-by: Larisa Grigore <larisa.grigore@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 drivers/nxp/s32g/clk/s32g274a_scmi_ids.c      | 140 +++++++++---------
 include/dt-bindings/clock/s32g-scmi-clock.h   |  71 +++++++++
 .../dt-bindings/clock/s32g274a-scmi-clock.h   |  71 ---------
 3 files changed, 141 insertions(+), 141 deletions(-)
 create mode 100644 include/dt-bindings/clock/s32g-scmi-clock.h
 delete mode 100644 include/dt-bindings/clock/s32g274a-scmi-clock.h

diff --git a/drivers/nxp/s32g/clk/s32g274a_scmi_ids.c b/drivers/nxp/s32g/clk/s32g274a_scmi_ids.c
index cbc2d8cd7..c5b691267 100644
--- a/drivers/nxp/s32g/clk/s32g274a_scmi_ids.c
+++ b/drivers/nxp/s32g/clk/s32g274a_scmi_ids.c
@@ -1,133 +1,133 @@
 // SPDX-License-Identifier: BSD-3-Clause
 /*
- * Copyright 2020 NXP
+ * Copyright 2020-2021 NXP
  */
 #include <clk/s32gen1_clk_funcs.h>
 #include <clk/s32gen1_scmi_clk.h>
 #include <common/debug.h>
 #include <dt-bindings/clock/s32g274a-clock.h>
-#include <dt-bindings/clock/s32g274a-scmi-clock.h>
+#include <dt-bindings/clock/s32g-scmi-clock.h>
 #include <errno.h>
 #include <stdint.h>
 
 #define INDEX(X)	((X) - S32GEN1_SCMI_PLAT_CLK_BASE_ID)
 
 struct s32gen1_scmi_clk s32g274a_scmi_clk[] = {
-	SCMI_ARRAY_ENTRY(S32G274A_SCMI_CLK_USB_MEM,
+	SCMI_ARRAY_ENTRY(S32G_SCMI_CLK_USB_MEM,
 			 S32GEN1_CLK_XBAR_DIV4, "usb_mem"),
-	SCMI_ARRAY_ENTRY(S32G274A_SCMI_CLK_USB_LOW,
+	SCMI_ARRAY_ENTRY(S32G_SCMI_CLK_USB_LOW,
 			 S32GEN1_CLK_SIRC, "usb_low"),
-	SCMI_ARRAY_ENTRY(S32G274A_SCMI_CLK_PFE_AXI,
+	SCMI_ARRAY_ENTRY(S32G_SCMI_CLK_PFE_AXI,
 			 S32G274A_CLK_PFE_SYS, "pfe_axi"),
-	SCMI_ARRAY_ENTRY(S32G274A_SCMI_CLK_PFE_APB,
+	SCMI_ARRAY_ENTRY(S32G_SCMI_CLK_PFE_APB,
 			 S32G274A_CLK_PFE_SYS, "pfe_apb"),
-	SCMI_ARRAY_ENTRY(S32G274A_SCMI_CLK_PFE_TS,
+	SCMI_ARRAY_ENTRY(S32G_SCMI_CLK_PFE_TS,
 			 S32GEN1_CLK_GMAC0_TS, "pfe_ts"),
-	SCMI_ARRAY_ENTRY(S32G274A_SCMI_CLK_PFE_PE,
+	SCMI_ARRAY_ENTRY(S32G_SCMI_CLK_PFE_PE,
 			 S32G274A_CLK_PFE_PE, "pfe_pe"),
 	/* PFE0 */
-	SCMI_ARRAY_ENTRY(S32G274A_SCMI_CLK_PFE0_RX_SGMII,
+	SCMI_ARRAY_ENTRY(S32G_SCMI_CLK_PFE0_RX_SGMII,
 			 S32GEN1_SCMI_COMPLEX_CLK, "pfe0_rx_sgmii"),
-	SCMI_ARRAY_ENTRY(S32G274A_SCMI_CLK_PFE0_TX_SGMII,
+	SCMI_ARRAY_ENTRY(S32G_SCMI_CLK_PFE0_TX_SGMII,
 			 S32GEN1_SCMI_COMPLEX_CLK, "pfe0_tx_sgmii"),
-	SCMI_ARRAY_ENTRY(S32G274A_SCMI_CLK_PFE0_RX_RGMII,
+	SCMI_ARRAY_ENTRY(S32G_SCMI_CLK_PFE0_RX_RGMII,
 			 S32GEN1_SCMI_COMPLEX_CLK, "pfe0_rx_rgmii"),
-	SCMI_ARRAY_ENTRY(S32G274A_SCMI_CLK_PFE0_TX_RGMII,
+	SCMI_ARRAY_ENTRY(S32G_SCMI_CLK_PFE0_TX_RGMII,
 			 S32GEN1_SCMI_COMPLEX_CLK, "pfe0_tx_rgmii"),
-	SCMI_ARRAY_ENTRY(S32G274A_SCMI_CLK_PFE0_RX_RMII,
+	SCMI_ARRAY_ENTRY(S32G_SCMI_CLK_PFE0_RX_RMII,
 			 S32GEN1_SCMI_COMPLEX_CLK, "pfe0_rx_rmii"),
-	SCMI_ARRAY_ENTRY(S32G274A_SCMI_CLK_PFE0_TX_RMII,
+	SCMI_ARRAY_ENTRY(S32G_SCMI_CLK_PFE0_TX_RMII,
 			 S32GEN1_SCMI_COMPLEX_CLK, "pfe0_tx_rmii"),
-	SCMI_ARRAY_ENTRY(S32G274A_SCMI_CLK_PFE0_RX_MII,
+	SCMI_ARRAY_ENTRY(S32G_SCMI_CLK_PFE0_RX_MII,
 			 S32GEN1_SCMI_COMPLEX_CLK, "pfe0_rx_mii"),
-	SCMI_ARRAY_ENTRY(S32G274A_SCMI_CLK_PFE0_TX_MII,
+	SCMI_ARRAY_ENTRY(S32G_SCMI_CLK_PFE0_TX_MII,
 			 S32GEN1_SCMI_COMPLEX_CLK, "pfe0_tx_mii"),
 	/* PFE1 */
-	SCMI_ARRAY_ENTRY(S32G274A_SCMI_CLK_PFE1_RX_SGMII,
+	SCMI_ARRAY_ENTRY(S32G_SCMI_CLK_PFE1_RX_SGMII,
 			 S32GEN1_SCMI_COMPLEX_CLK, "pfe1_rx_sgmii"),
-	SCMI_ARRAY_ENTRY(S32G274A_SCMI_CLK_PFE1_TX_SGMII,
+	SCMI_ARRAY_ENTRY(S32G_SCMI_CLK_PFE1_TX_SGMII,
 			 S32GEN1_SCMI_COMPLEX_CLK, "pfe1_tx_sgmii"),
-	SCMI_ARRAY_ENTRY(S32G274A_SCMI_CLK_PFE1_RX_RGMII,
+	SCMI_ARRAY_ENTRY(S32G_SCMI_CLK_PFE1_RX_RGMII,
 			 S32GEN1_SCMI_COMPLEX_CLK, "pfe1_rx_rgmii"),
-	SCMI_ARRAY_ENTRY(S32G274A_SCMI_CLK_PFE1_TX_RGMII,
+	SCMI_ARRAY_ENTRY(S32G_SCMI_CLK_PFE1_TX_RGMII,
 			 S32GEN1_SCMI_COMPLEX_CLK, "pfe1_tx_rgmii"),
-	SCMI_ARRAY_ENTRY(S32G274A_SCMI_CLK_PFE1_RX_RMII,
+	SCMI_ARRAY_ENTRY(S32G_SCMI_CLK_PFE1_RX_RMII,
 			 S32GEN1_SCMI_COMPLEX_CLK, "pfe0_rx_rmii"),
-	SCMI_ARRAY_ENTRY(S32G274A_SCMI_CLK_PFE1_TX_RMII,
+	SCMI_ARRAY_ENTRY(S32G_SCMI_CLK_PFE1_TX_RMII,
 			 S32GEN1_SCMI_COMPLEX_CLK, "pfe0_tx_rmii"),
-	SCMI_ARRAY_ENTRY(S32G274A_SCMI_CLK_PFE1_RX_MII,
+	SCMI_ARRAY_ENTRY(S32G_SCMI_CLK_PFE1_RX_MII,
 			 S32GEN1_SCMI_COMPLEX_CLK, "pfe0_rx_mii"),
-	SCMI_ARRAY_ENTRY(S32G274A_SCMI_CLK_PFE1_TX_MII,
+	SCMI_ARRAY_ENTRY(S32G_SCMI_CLK_PFE1_TX_MII,
 			 S32GEN1_SCMI_COMPLEX_CLK, "pfe0_tx_mii"),
 	/* PFE2 */
-	SCMI_ARRAY_ENTRY(S32G274A_SCMI_CLK_PFE2_RX_SGMII,
+	SCMI_ARRAY_ENTRY(S32G_SCMI_CLK_PFE2_RX_SGMII,
 			 S32GEN1_SCMI_COMPLEX_CLK, "pfe2_rx_sgmii"),
-	SCMI_ARRAY_ENTRY(S32G274A_SCMI_CLK_PFE2_TX_SGMII,
+	SCMI_ARRAY_ENTRY(S32G_SCMI_CLK_PFE2_TX_SGMII,
 			 S32GEN1_SCMI_COMPLEX_CLK, "pfe2_tx_sgmii"),
-	SCMI_ARRAY_ENTRY(S32G274A_SCMI_CLK_PFE2_RX_RGMII,
+	SCMI_ARRAY_ENTRY(S32G_SCMI_CLK_PFE2_RX_RGMII,
 			 S32GEN1_SCMI_COMPLEX_CLK, "pfe2_rx_rgmii"),
-	SCMI_ARRAY_ENTRY(S32G274A_SCMI_CLK_PFE2_TX_RGMII,
+	SCMI_ARRAY_ENTRY(S32G_SCMI_CLK_PFE2_TX_RGMII,
 			 S32GEN1_SCMI_COMPLEX_CLK, "pfe2_tx_rgmii"),
-	SCMI_ARRAY_ENTRY(S32G274A_SCMI_CLK_PFE2_RX_RMII,
+	SCMI_ARRAY_ENTRY(S32G_SCMI_CLK_PFE2_RX_RMII,
 			 S32GEN1_SCMI_COMPLEX_CLK, "pfe0_rx_rmii"),
-	SCMI_ARRAY_ENTRY(S32G274A_SCMI_CLK_PFE2_TX_RMII,
+	SCMI_ARRAY_ENTRY(S32G_SCMI_CLK_PFE2_TX_RMII,
 			 S32GEN1_SCMI_COMPLEX_CLK, "pfe0_tx_rmii"),
-	SCMI_ARRAY_ENTRY(S32G274A_SCMI_CLK_PFE2_RX_MII,
+	SCMI_ARRAY_ENTRY(S32G_SCMI_CLK_PFE2_RX_MII,
 			 S32GEN1_SCMI_COMPLEX_CLK, "pfe0_rx_mii"),
-	SCMI_ARRAY_ENTRY(S32G274A_SCMI_CLK_PFE2_TX_MII,
+	SCMI_ARRAY_ENTRY(S32G_SCMI_CLK_PFE2_TX_MII,
 			 S32GEN1_SCMI_COMPLEX_CLK, "pfe0_tx_mii"),
 	/* LLCE */
-	SCMI_ARRAY_ENTRY(S32G274A_SCMI_CLK_LLCE_SYS,
+	SCMI_ARRAY_ENTRY(S32G_SCMI_CLK_LLCE_SYS,
 			 S32GEN1_CLK_XBAR_DIV2, "llce_sys"),
-	SCMI_ARRAY_ENTRY(S32G274A_SCMI_CLK_LLCE_CAN_PE,
+	SCMI_ARRAY_ENTRY(S32G_SCMI_CLK_LLCE_CAN_PE,
 			 S32GEN1_CLK_CAN_PE, "llce_can_pe"),
 };
 
 static int s32g_compound2clkid(uint32_t scmi_clk_id, uint32_t *clk_id)
 {
 	switch (scmi_clk_id) {
-	case S32G274A_SCMI_CLK_PFE0_RX_SGMII:
-	case S32G274A_SCMI_CLK_PFE0_RX_RGMII:
+	case S32G_SCMI_CLK_PFE0_RX_SGMII:
+	case S32G_SCMI_CLK_PFE0_RX_RGMII:
 		if (clk_id)
 			*clk_id = S32G274A_CLK_PFE_MAC0_RX;
 		break;
-	case S32G274A_SCMI_CLK_PFE0_TX_SGMII:
-	case S32G274A_SCMI_CLK_PFE0_TX_RGMII:
+	case S32G_SCMI_CLK_PFE0_TX_SGMII:
+	case S32G_SCMI_CLK_PFE0_TX_RGMII:
 		if (clk_id)
 			*clk_id = S32G274A_CLK_PFE_MAC0_TX_DIV;
 		break;
-	case S32G274A_SCMI_CLK_PFE1_RX_SGMII:
-	case S32G274A_SCMI_CLK_PFE1_RX_RGMII:
+	case S32G_SCMI_CLK_PFE1_RX_SGMII:
+	case S32G_SCMI_CLK_PFE1_RX_RGMII:
 		if (clk_id)
 			*clk_id = S32G274A_CLK_PFE_MAC1_RX;
 		break;
-	case S32G274A_SCMI_CLK_PFE1_TX_SGMII:
-	case S32G274A_SCMI_CLK_PFE1_TX_RGMII:
+	case S32G_SCMI_CLK_PFE1_TX_SGMII:
+	case S32G_SCMI_CLK_PFE1_TX_RGMII:
 		if (clk_id)
 			*clk_id = S32G274A_CLK_PFE_MAC1_TX;
 		break;
-	case S32G274A_SCMI_CLK_PFE2_RX_SGMII:
-	case S32G274A_SCMI_CLK_PFE2_RX_RGMII:
+	case S32G_SCMI_CLK_PFE2_RX_SGMII:
+	case S32G_SCMI_CLK_PFE2_RX_RGMII:
 		if (clk_id)
 			*clk_id = S32G274A_CLK_PFE_MAC2_RX;
 		break;
-	case S32G274A_SCMI_CLK_PFE2_TX_SGMII:
-	case S32G274A_SCMI_CLK_PFE2_TX_RGMII:
+	case S32G_SCMI_CLK_PFE2_TX_SGMII:
+	case S32G_SCMI_CLK_PFE2_TX_RGMII:
 		if (clk_id)
 			*clk_id = S32G274A_CLK_PFE_MAC2_TX;
 		break;
-	case S32G274A_SCMI_CLK_PFE0_RX_RMII:
-	case S32G274A_SCMI_CLK_PFE0_TX_RMII:
-	case S32G274A_SCMI_CLK_PFE0_RX_MII:
-	case S32G274A_SCMI_CLK_PFE0_TX_MII:
-	case S32G274A_SCMI_CLK_PFE1_RX_RMII:
-	case S32G274A_SCMI_CLK_PFE1_TX_RMII:
-	case S32G274A_SCMI_CLK_PFE1_RX_MII:
-	case S32G274A_SCMI_CLK_PFE1_TX_MII:
-	case S32G274A_SCMI_CLK_PFE2_RX_RMII:
-	case S32G274A_SCMI_CLK_PFE2_TX_RMII:
-	case S32G274A_SCMI_CLK_PFE2_RX_MII:
-	case S32G274A_SCMI_CLK_PFE2_TX_MII:
+	case S32G_SCMI_CLK_PFE0_RX_RMII:
+	case S32G_SCMI_CLK_PFE0_TX_RMII:
+	case S32G_SCMI_CLK_PFE0_RX_MII:
+	case S32G_SCMI_CLK_PFE0_TX_MII:
+	case S32G_SCMI_CLK_PFE1_RX_RMII:
+	case S32G_SCMI_CLK_PFE1_TX_RMII:
+	case S32G_SCMI_CLK_PFE1_RX_MII:
+	case S32G_SCMI_CLK_PFE1_TX_MII:
+	case S32G_SCMI_CLK_PFE2_RX_RMII:
+	case S32G_SCMI_CLK_PFE2_TX_RMII:
+	case S32G_SCMI_CLK_PFE2_RX_MII:
+	case S32G_SCMI_CLK_PFE2_TX_MII:
 		if (clk_id)
 			*clk_id = S32GEN1_SCMI_NOT_IMPLEMENTED_CLK;
 		break;
@@ -175,9 +175,9 @@ static int set_mac0_rx_parent(struct clk *clk)
 	uint32_t rx_id;
 	uint32_t clk_id = clk->id;
 
-	if (clk_id == S32G274A_SCMI_CLK_PFE0_RX_SGMII) {
+	if (clk_id == S32G_SCMI_CLK_PFE0_RX_SGMII) {
 		rx_id = S32G274A_CLK_SERDES1_LANE0_CDR;
-	} else if (clk_id == S32G274A_SCMI_CLK_PFE0_RX_RGMII) {
+	} else if (clk_id == S32G_SCMI_CLK_PFE0_RX_RGMII) {
 		rx_id = S32G274A_CLK_PFE_MAC0_EXT_RX;
 	} else {
 		ERROR("Invalid PFE0 RX mode\n");
@@ -192,9 +192,9 @@ static int set_mac0_tx_parent(struct clk *clk)
 	uint32_t tx_id;
 	uint32_t clk_id = clk->id;
 
-	if (clk_id == S32G274A_SCMI_CLK_PFE0_TX_SGMII) {
+	if (clk_id == S32G_SCMI_CLK_PFE0_TX_SGMII) {
 		tx_id = S32G274A_CLK_SERDES1_LANE0_TX;
-	} else if (clk_id == S32G274A_SCMI_CLK_PFE0_TX_RGMII) {
+	} else if (clk_id == S32G_SCMI_CLK_PFE0_TX_RGMII) {
 		tx_id = S32GEN1_CLK_PERIPH_PLL_PHI5;
 	} else {
 		ERROR("Invalid PFE0 TX mode\n");
@@ -209,9 +209,9 @@ static int set_mac1_rx_parent(struct clk *clk)
 	uint32_t rx_id;
 	uint32_t clk_id = clk->id;
 
-	if (clk_id == S32G274A_SCMI_CLK_PFE1_RX_SGMII) {
+	if (clk_id == S32G_SCMI_CLK_PFE1_RX_SGMII) {
 		rx_id = S32G274A_CLK_SERDES1_LANE1_CDR;
-	} else if (clk_id == S32G274A_SCMI_CLK_PFE1_RX_RGMII) {
+	} else if (clk_id == S32G_SCMI_CLK_PFE1_RX_RGMII) {
 		rx_id = S32G274A_CLK_PFE_MAC1_EXT_RX;
 	} else {
 		ERROR("Invalid PFE1 RX mode\n");
@@ -226,9 +226,9 @@ static int set_mac1_tx_parent(struct clk *clk)
 	uint32_t tx_id;
 	uint32_t clk_id = clk->id;
 
-	if (clk_id == S32G274A_SCMI_CLK_PFE1_TX_SGMII) {
+	if (clk_id == S32G_SCMI_CLK_PFE1_TX_SGMII) {
 		tx_id = S32G274A_CLK_SERDES1_LANE1_TX;
-	} else if (clk_id == S32G274A_SCMI_CLK_PFE1_TX_RGMII) {
+	} else if (clk_id == S32G_SCMI_CLK_PFE1_TX_RGMII) {
 		tx_id = S32GEN1_CLK_PERIPH_PLL_PHI5;
 	} else {
 		ERROR("Invalid PFE1 TX mode\n");
@@ -243,9 +243,9 @@ static int set_mac2_rx_parent(struct clk *clk)
 	uint32_t rx_id;
 	uint32_t clk_id = clk->id;
 
-	if (clk_id == S32G274A_SCMI_CLK_PFE2_RX_SGMII) {
+	if (clk_id == S32G_SCMI_CLK_PFE2_RX_SGMII) {
 		rx_id = S32G274A_CLK_SERDES0_LANE1_CDR;
-	} else if (clk_id == S32G274A_SCMI_CLK_PFE2_RX_RGMII) {
+	} else if (clk_id == S32G_SCMI_CLK_PFE2_RX_RGMII) {
 		rx_id = S32G274A_CLK_PFE_MAC2_EXT_RX;
 	} else {
 		ERROR("Invalid PFE2 RX mode\n");
@@ -260,9 +260,9 @@ static int set_mac2_tx_parent(struct clk *clk)
 	uint32_t tx_id;
 	uint32_t clk_id = clk->id;
 
-	if (clk_id == S32G274A_SCMI_CLK_PFE2_TX_SGMII) {
+	if (clk_id == S32G_SCMI_CLK_PFE2_TX_SGMII) {
 		tx_id = S32G274A_CLK_SERDES0_LANE1_TX;
-	} else if (clk_id == S32G274A_SCMI_CLK_PFE2_TX_RGMII) {
+	} else if (clk_id == S32G_SCMI_CLK_PFE2_TX_RGMII) {
 		tx_id = S32GEN1_CLK_PERIPH_PLL_PHI5;
 	} else {
 		ERROR("Invalid PFE2 TX mode\n");
diff --git a/include/dt-bindings/clock/s32g-scmi-clock.h b/include/dt-bindings/clock/s32g-scmi-clock.h
new file mode 100644
index 000000000..6c71a79ee
--- /dev/null
+++ b/include/dt-bindings/clock/s32g-scmi-clock.h
@@ -0,0 +1,71 @@
+/* SPDX-License-Identifier: BSD-3-Clause */
+/*
+ * Copyright 2020-2021 NXP
+ */
+#ifndef __DT_BINDINGS_SCMI_CLOCK_S32G274A_H
+#define __DT_BINDINGS_SCMI_CLOCK_S32G274A_H
+
+#include <dt-bindings/clock/s32gen1-scmi-clock.h>
+
+/* USB */
+#define S32G_SCMI_CLK_USB_MEM		S32GEN1_PLAT_SCMI_CLK(0)
+#define S32G_SCMI_CLK_USB_LOW		S32GEN1_PLAT_SCMI_CLK(1)
+
+#define S32G_SCMI_CLK_PFE_AXI		S32GEN1_PLAT_SCMI_CLK(2)
+#define S32G_SCMI_CLK_PFE_APB		S32GEN1_PLAT_SCMI_CLK(3)
+#define S32G_SCMI_CLK_PFE_PE		S32GEN1_PLAT_SCMI_CLK(4)
+#define S32G_SCMI_CLK_PFE_TS		S32GEN1_PLAT_SCMI_CLK(5)
+
+/* PFE 0 */
+/* SGMII RX: PFE_MAC_0_RX_CLK -> SERDES_1_LANE_0_CDR_CLK */
+#define S32G_SCMI_CLK_PFE0_RX_SGMII		S32GEN1_PLAT_SCMI_CLK(6)
+/* SGMII TX: PFE_MAC_0_TX_CLK -> SERDES_1_LANE_0_TX_CLK  */
+#define S32G_SCMI_CLK_PFE0_TX_SGMII		S32GEN1_PLAT_SCMI_CLK(7)
+/* RGMII RX: PFE_MAC_0_RX_CLK -> PFE_MAC0_RX_CLK_I */
+#define S32G_SCMI_CLK_PFE0_RX_RGMII		S32GEN1_PLAT_SCMI_CLK(8)
+/* RGMII TX: PFE_MAC_0_TX_CLK -> PERIPH_PLL_PHI5_CLK */
+#define S32G_SCMI_CLK_PFE0_TX_RGMII		S32GEN1_PLAT_SCMI_CLK(9)
+#define S32G_SCMI_CLK_PFE0_RX_RMII		S32GEN1_PLAT_SCMI_CLK(10)
+#define S32G_SCMI_CLK_PFE0_TX_RMII		S32GEN1_PLAT_SCMI_CLK(11)
+#define S32G_SCMI_CLK_PFE0_RX_MII		S32GEN1_PLAT_SCMI_CLK(12)
+#define S32G_SCMI_CLK_PFE0_TX_MII		S32GEN1_PLAT_SCMI_CLK(13)
+
+/* PFE 1 */
+/* SGMII RX: PFE_MAC_1_RX_CLK -> SERDES_1_LANE_1_CDR_CLK */
+#define S32G_SCMI_CLK_PFE1_RX_SGMII		S32GEN1_PLAT_SCMI_CLK(14)
+/* SGMII TX: PFE_MAC_1_TX_CLK -> SERDES_1_LANE_1_TX_CLK  */
+#define S32G_SCMI_CLK_PFE1_TX_SGMII		S32GEN1_PLAT_SCMI_CLK(15)
+/* RGMII RX: PFE_MAC_1_RX_CLK ->  PFE_MAC1_RX_CLK_I */
+#define S32G_SCMI_CLK_PFE1_RX_RGMII		S32GEN1_PLAT_SCMI_CLK(16)
+/* RGMII TX: PFE_MAC_1_TX_CLK ->  PERIPH_PLL_PHI5_CLK */
+#define S32G_SCMI_CLK_PFE1_TX_RGMII		S32GEN1_PLAT_SCMI_CLK(17)
+#define S32G_SCMI_CLK_PFE1_RX_RMII		S32GEN1_PLAT_SCMI_CLK(18)
+#define S32G_SCMI_CLK_PFE1_TX_RMII		S32GEN1_PLAT_SCMI_CLK(19)
+#define S32G_SCMI_CLK_PFE1_RX_MII		S32GEN1_PLAT_SCMI_CLK(20)
+#define S32G_SCMI_CLK_PFE1_TX_MII		S32GEN1_PLAT_SCMI_CLK(21)
+
+/* PFE 2 */
+/* SGMII RX: PFE_MAC_2_RX_CLK -> SERDES_0_LANE_1_CDR_CLK */
+#define S32G_SCMI_CLK_PFE2_RX_SGMII		S32GEN1_PLAT_SCMI_CLK(22)
+/* SGMII TX: PFE_MAC_2_TX_CLK -> SERDES_0_LANE_1_TX_CLK  */
+#define S32G_SCMI_CLK_PFE2_TX_SGMII		S32GEN1_PLAT_SCMI_CLK(23)
+/* RGMII RX: PFE_MAC_2_RX_CLK ->  PFE_MAC2_RX_CLK_I */
+#define S32G_SCMI_CLK_PFE2_RX_RGMII		S32GEN1_PLAT_SCMI_CLK(24)
+/* RGMII TX: PFE_MAC_2_TX_CLK ->  PERIPH_PLL_PHI5_CLK */
+#define S32G_SCMI_CLK_PFE2_TX_RGMII		S32GEN1_PLAT_SCMI_CLK(25)
+#define S32G_SCMI_CLK_PFE2_RX_RMII		S32GEN1_PLAT_SCMI_CLK(26)
+#define S32G_SCMI_CLK_PFE2_TX_RMII		S32GEN1_PLAT_SCMI_CLK(27)
+#define S32G_SCMI_CLK_PFE2_RX_MII		S32GEN1_PLAT_SCMI_CLK(28)
+#define S32G_SCMI_CLK_PFE2_TX_MII		S32GEN1_PLAT_SCMI_CLK(29)
+
+/* LLCE */
+#define S32G_SCMI_CLK_LLCE_SYS		S32GEN1_PLAT_SCMI_CLK(30)
+#define S32G_SCMI_CLK_LLCE_CAN_PE		S32GEN1_PLAT_SCMI_CLK(31)
+
+#define S32G_SCMI_CLK_MAX_ID		S32GEN1_PLAT_SCMI_CLK(32)
+
+#if S32GEN1_SCMI_CLK_MAX_ID < S32G_SCMI_CLK_MAX_ID
+#error Please increase the value of S32GEN1_SCMI_CLK_MAX_ID
+#endif
+
+#endif
diff --git a/include/dt-bindings/clock/s32g274a-scmi-clock.h b/include/dt-bindings/clock/s32g274a-scmi-clock.h
deleted file mode 100644
index 1b44227ec..000000000
--- a/include/dt-bindings/clock/s32g274a-scmi-clock.h
+++ /dev/null
@@ -1,71 +0,0 @@
-/* SPDX-License-Identifier: BSD-3-Clause */
-/*
- * Copyright 2020 NXP
- */
-#ifndef __DT_BINDINGS_SCMI_CLOCK_S32G274A_H
-#define __DT_BINDINGS_SCMI_CLOCK_S32G274A_H
-
-#include <dt-bindings/clock/s32gen1-scmi-clock.h>
-
-/* USB */
-#define S32G274A_SCMI_CLK_USB_MEM		S32GEN1_PLAT_SCMI_CLK(0)
-#define S32G274A_SCMI_CLK_USB_LOW		S32GEN1_PLAT_SCMI_CLK(1)
-
-#define S32G274A_SCMI_CLK_PFE_AXI		S32GEN1_PLAT_SCMI_CLK(2)
-#define S32G274A_SCMI_CLK_PFE_APB		S32GEN1_PLAT_SCMI_CLK(3)
-#define S32G274A_SCMI_CLK_PFE_PE		S32GEN1_PLAT_SCMI_CLK(4)
-#define S32G274A_SCMI_CLK_PFE_TS		S32GEN1_PLAT_SCMI_CLK(5)
-
-/* PFE 0 */
-/* SGMII RX: PFE_MAC_0_RX_CLK -> SERDES_1_LANE_0_CDR_CLK */
-#define S32G274A_SCMI_CLK_PFE0_RX_SGMII		S32GEN1_PLAT_SCMI_CLK(6)
-/* SGMII TX: PFE_MAC_0_TX_CLK -> SERDES_1_LANE_0_TX_CLK  */
-#define S32G274A_SCMI_CLK_PFE0_TX_SGMII		S32GEN1_PLAT_SCMI_CLK(7)
-/* RGMII RX: PFE_MAC_0_RX_CLK -> PFE_MAC0_RX_CLK_I */
-#define S32G274A_SCMI_CLK_PFE0_RX_RGMII		S32GEN1_PLAT_SCMI_CLK(8)
-/* RGMII TX: PFE_MAC_0_TX_CLK -> PERIPH_PLL_PHI5_CLK */
-#define S32G274A_SCMI_CLK_PFE0_TX_RGMII		S32GEN1_PLAT_SCMI_CLK(9)
-#define S32G274A_SCMI_CLK_PFE0_RX_RMII		S32GEN1_PLAT_SCMI_CLK(10)
-#define S32G274A_SCMI_CLK_PFE0_TX_RMII		S32GEN1_PLAT_SCMI_CLK(11)
-#define S32G274A_SCMI_CLK_PFE0_RX_MII		S32GEN1_PLAT_SCMI_CLK(12)
-#define S32G274A_SCMI_CLK_PFE0_TX_MII		S32GEN1_PLAT_SCMI_CLK(13)
-
-/* PFE 1 */
-/* SGMII RX: PFE_MAC_1_RX_CLK -> SERDES_1_LANE_1_CDR_CLK */
-#define S32G274A_SCMI_CLK_PFE1_RX_SGMII		S32GEN1_PLAT_SCMI_CLK(14)
-/* SGMII TX: PFE_MAC_1_TX_CLK -> SERDES_1_LANE_1_TX_CLK  */
-#define S32G274A_SCMI_CLK_PFE1_TX_SGMII		S32GEN1_PLAT_SCMI_CLK(15)
-/* RGMII RX: PFE_MAC_1_RX_CLK ->  PFE_MAC1_RX_CLK_I */
-#define S32G274A_SCMI_CLK_PFE1_RX_RGMII		S32GEN1_PLAT_SCMI_CLK(16)
-/* RGMII TX: PFE_MAC_1_TX_CLK ->  PERIPH_PLL_PHI5_CLK */
-#define S32G274A_SCMI_CLK_PFE1_TX_RGMII		S32GEN1_PLAT_SCMI_CLK(17)
-#define S32G274A_SCMI_CLK_PFE1_RX_RMII		S32GEN1_PLAT_SCMI_CLK(18)
-#define S32G274A_SCMI_CLK_PFE1_TX_RMII		S32GEN1_PLAT_SCMI_CLK(19)
-#define S32G274A_SCMI_CLK_PFE1_RX_MII		S32GEN1_PLAT_SCMI_CLK(20)
-#define S32G274A_SCMI_CLK_PFE1_TX_MII		S32GEN1_PLAT_SCMI_CLK(21)
-
-/* PFE 2 */
-/* SGMII RX: PFE_MAC_2_RX_CLK -> SERDES_0_LANE_1_CDR_CLK */
-#define S32G274A_SCMI_CLK_PFE2_RX_SGMII		S32GEN1_PLAT_SCMI_CLK(22)
-/* SGMII TX: PFE_MAC_2_TX_CLK -> SERDES_0_LANE_1_TX_CLK  */
-#define S32G274A_SCMI_CLK_PFE2_TX_SGMII		S32GEN1_PLAT_SCMI_CLK(23)
-/* RGMII RX: PFE_MAC_2_RX_CLK ->  PFE_MAC2_RX_CLK_I */
-#define S32G274A_SCMI_CLK_PFE2_RX_RGMII		S32GEN1_PLAT_SCMI_CLK(24)
-/* RGMII TX: PFE_MAC_2_TX_CLK ->  PERIPH_PLL_PHI5_CLK */
-#define S32G274A_SCMI_CLK_PFE2_TX_RGMII		S32GEN1_PLAT_SCMI_CLK(25)
-#define S32G274A_SCMI_CLK_PFE2_RX_RMII		S32GEN1_PLAT_SCMI_CLK(26)
-#define S32G274A_SCMI_CLK_PFE2_TX_RMII		S32GEN1_PLAT_SCMI_CLK(27)
-#define S32G274A_SCMI_CLK_PFE2_RX_MII		S32GEN1_PLAT_SCMI_CLK(28)
-#define S32G274A_SCMI_CLK_PFE2_TX_MII		S32GEN1_PLAT_SCMI_CLK(29)
-
-/* LLCE */
-#define S32G274A_SCMI_CLK_LLCE_SYS		S32GEN1_PLAT_SCMI_CLK(30)
-#define S32G274A_SCMI_CLK_LLCE_CAN_PE		S32GEN1_PLAT_SCMI_CLK(31)
-
-#define S32G274A_SCMI_CLK_MAX_ID		S32GEN1_PLAT_SCMI_CLK(32)
-
-#if S32GEN1_SCMI_CLK_MAX_ID < S32G274A_SCMI_CLK_MAX_ID
-#error Please increase the value of S32GEN1_SCMI_CLK_MAX_ID
-#endif
-
-#endif
-- 
2.25.1

