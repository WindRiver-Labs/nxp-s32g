From 82b1e50e6f2ca5c5a28fb404c7031301830af9fa Mon Sep 17 00:00:00 2001
From: Larisa Grigore <larisa.grigore@nxp.com>
Date: Mon, 5 Apr 2021 11:39:34 +0300
Subject: [PATCH 09/14] s32g: clk: Align with U-Boot names

Upstream-Status: Pending

Issue: ALB-6496
Signed-off-by: Larisa Grigore <larisa.grigore@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 drivers/nxp/s32g/clk/s32g274a_clk.c        | 126 ++++++++++-----------
 drivers/nxp/s32g/clk/s32g274a_scmi_ids.c   |  66 +++++------
 fdts/fsl-s32-gen1.dtsi                     |  12 +-
 fdts/fsl-s32g274a.dtsi                     |  16 +--
 include/dt-bindings/clock/s32g-clock.h     |  65 +++++++++++
 include/dt-bindings/clock/s32g274a-clock.h |  65 -----------
 6 files changed, 175 insertions(+), 175 deletions(-)
 create mode 100644 include/dt-bindings/clock/s32g-clock.h
 delete mode 100644 include/dt-bindings/clock/s32g274a-clock.h

diff --git a/drivers/nxp/s32g/clk/s32g274a_clk.c b/drivers/nxp/s32g/clk/s32g274a_clk.c
index 816a03079..5bf5ee5ca 100644
--- a/drivers/nxp/s32g/clk/s32g274a_clk.c
+++ b/drivers/nxp/s32g/clk/s32g274a_clk.c
@@ -1,13 +1,13 @@
 // SPDX-License-Identifier: BSD-3-Clause
 /*
- * Copyright 2020 NXP
+ * Copyright 2020-2021 NXP
  */
-#include <dt-bindings/clock/s32g274a-clock.h>
+#include <dt-bindings/clock/s32g-clock.h>
 #include <clk/s32gen1_clk_funcs.h>
 #include <clk/s32gen1_clk_modules.h>
 #include <clk/s32gen1_shared_clks.h>
 
-#define ARR_CLK(N)	S32G274A_CLK_INDEX(N)
+#define ARR_CLK(N)	S32G_CLK_INDEX(N)
 
 /* XBAR_2X */
 static struct s32gen1_part_block llce_block =
@@ -44,9 +44,9 @@ static struct s32gen1_mux cgm2_mux1 =
 		S32GEN1_MUX_INIT(S32GEN1_CGM2, 1, 5,
 				 S32GEN1_CLK_FIRC,
 				 S32GEN1_CLK_PERIPH_PLL_PHI5,
-				 S32G274A_CLK_PFE_MAC0_EXT_TX,
-				 S32G274A_CLK_PFE_MAC0_EXT_REF,
-				 S32G274A_CLK_SERDES1_LANE0_TX);
+				 S32G_CLK_PFE_MAC0_EXT_TX,
+				 S32G_CLK_PFE_MAC0_EXT_REF,
+				 S32G_CLK_SERDES1_LANE0_TX);
 static struct s32gen1_clk cgm2_mux1_clk =
 		S32GEN1_MODULE_CLK(cgm2_mux1);
 static struct s32gen1_cgm_div cgm2_mux1_div =
@@ -61,7 +61,7 @@ static struct s32gen1_clk pfe_mac0_tx_div_clk =
 static struct s32gen1_mux cgm2_mux7 =
 		S32GEN1_MUX_INIT(S32GEN1_CGM2, 7, 2,
 				 S32GEN1_CLK_FIRC,
-				 S32G274A_CLK_PFE_MAC0_EXT_REF);
+				 S32G_CLK_PFE_MAC0_EXT_REF);
 static struct s32gen1_clk cgm2_mux7_clk =
 		S32GEN1_MODULE_CLK(cgm2_mux7);
 static struct s32gen1_cgm_div cgm2_mux7_div =
@@ -86,9 +86,9 @@ static struct s32gen1_clk pfe_mac0_ext_rx_clk =
 static struct s32gen1_mux cgm2_mux4 =
 		S32GEN1_MUX_INIT(S32GEN1_CGM2, 4, 4,
 				 S32GEN1_CLK_FIRC,
-				 S32G274A_CLK_PFE_MAC0_EXT_RX,
-				 S32G274A_CLK_SERDES1_LANE0_CDR,
-				 S32G274A_CLK_PFE_MAC0_REF_DIV);
+				 S32G_CLK_PFE_MAC0_EXT_RX,
+				 S32G_CLK_SERDES1_LANE0_CDR,
+				 S32G_CLK_PFE_MAC0_REF_DIV);
 static struct s32gen1_clk cgm2_mux4_clk =
 		S32GEN1_MODULE_CLK(cgm2_mux4);
 static struct s32gen1_part_block pfe0_rx_block =
@@ -112,9 +112,9 @@ static struct s32gen1_mux cgm2_mux2 =
 		S32GEN1_MUX_INIT(S32GEN1_CGM2, 2, 5,
 				 S32GEN1_CLK_FIRC,
 				 S32GEN1_CLK_PERIPH_PLL_PHI5,
-				 S32G274A_CLK_PFE_MAC1_EXT_TX,
-				 S32G274A_CLK_PFE_MAC1_EXT_REF,
-				 S32G274A_CLK_SERDES1_LANE1_TX);
+				 S32G_CLK_PFE_MAC1_EXT_TX,
+				 S32G_CLK_PFE_MAC1_EXT_REF,
+				 S32G_CLK_SERDES1_LANE1_TX);
 static struct s32gen1_clk cgm2_mux2_clk =
 		S32GEN1_MODULE_CLK(cgm2_mux2);
 static struct s32gen1_cgm_div cgm2_mux2_div =
@@ -129,7 +129,7 @@ static struct s32gen1_clk pfe_mac1_tx_clk =
 static struct s32gen1_mux cgm2_mux8 =
 		S32GEN1_MUX_INIT(S32GEN1_CGM2, 8, 2,
 				 S32GEN1_CLK_FIRC,
-				 S32G274A_CLK_PFE_MAC1_EXT_REF);
+				 S32G_CLK_PFE_MAC1_EXT_REF);
 static struct s32gen1_clk cgm2_mux8_clk =
 		S32GEN1_MODULE_CLK(cgm2_mux8);
 static struct s32gen1_cgm_div cgm2_mux8_div =
@@ -149,9 +149,9 @@ static struct s32gen1_clk pfe_mac1_ext_rx_clk =
 static struct s32gen1_mux cgm2_mux5 =
 		S32GEN1_MUX_INIT(S32GEN1_CGM2, 5, 4,
 				 S32GEN1_CLK_FIRC,
-				 S32G274A_CLK_PFE_MAC1_EXT_RX,
-				 S32G274A_CLK_PFE_MAC1_REF_DIV,
-				 S32G274A_CLK_SERDES1_LANE1_CDR);
+				 S32G_CLK_PFE_MAC1_EXT_RX,
+				 S32G_CLK_PFE_MAC1_REF_DIV,
+				 S32G_CLK_SERDES1_LANE1_CDR);
 static struct s32gen1_clk cgm2_mux5_clk =
 		S32GEN1_MODULE_CLK(cgm2_mux5);
 static struct s32gen1_part_block pfe1_rx_block =
@@ -180,9 +180,9 @@ static struct s32gen1_mux cgm2_mux3 =
 		S32GEN1_MUX_INIT(S32GEN1_CGM2, 3, 5,
 				 S32GEN1_CLK_FIRC,
 				 S32GEN1_CLK_PERIPH_PLL_PHI5,
-				 S32G274A_CLK_PFE_MAC2_EXT_TX,
-				 S32G274A_CLK_PFE_MAC2_EXT_REF,
-				 S32G274A_CLK_SERDES0_LANE1_TX);
+				 S32G_CLK_PFE_MAC2_EXT_TX,
+				 S32G_CLK_PFE_MAC2_EXT_REF,
+				 S32G_CLK_SERDES0_LANE1_TX);
 static struct s32gen1_clk cgm2_mux3_clk =
 		S32GEN1_MODULE_CLK(cgm2_mux3);
 static struct s32gen1_cgm_div cgm2_mux3_div =
@@ -197,7 +197,7 @@ static struct s32gen1_clk pfe_mac2_tx_clk =
 static struct s32gen1_mux cgm2_mux9 =
 		S32GEN1_MUX_INIT(S32GEN1_CGM2, 9, 2,
 				 S32GEN1_CLK_FIRC,
-				 S32G274A_CLK_PFE_MAC2_EXT_REF);
+				 S32G_CLK_PFE_MAC2_EXT_REF);
 static struct s32gen1_clk cgm2_mux9_clk =
 		S32GEN1_MODULE_CLK(cgm2_mux9);
 static struct s32gen1_cgm_div cgm2_mux9_div =
@@ -222,9 +222,9 @@ static struct s32gen1_clk serdes0_lane1_cdr_clk =
 static struct s32gen1_mux cgm2_mux6 =
 		S32GEN1_MUX_INIT(S32GEN1_CGM2, 6, 4,
 				 S32GEN1_CLK_FIRC,
-				 S32G274A_CLK_PFE_MAC2_EXT_RX,
-				 S32G274A_CLK_PFE_MAC2_REF_DIV,
-				 S32G274A_CLK_SERDES0_LANE1_CDR);
+				 S32G_CLK_PFE_MAC2_EXT_RX,
+				 S32G_CLK_PFE_MAC2_REF_DIV,
+				 S32G_CLK_SERDES0_LANE1_CDR);
 static struct s32gen1_clk cgm2_mux6_clk =
 		S32GEN1_MODULE_CLK(cgm2_mux6);
 static struct s32gen1_part_block pfe2_rx_block =
@@ -237,7 +237,7 @@ static struct s32gen1_clk pfe_mac2_rx_clk =
 static struct s32gen1_mux cgm2_mux0 =
 		S32GEN1_MUX_INIT(S32GEN1_CGM2, 0, 2,
 				 S32GEN1_CLK_FIRC,
-				 S32G274A_CLK_ACCEL_PLL_PHI1);
+				 S32G_CLK_ACCEL_PLL_PHI1);
 static struct s32gen1_clk cgm2_mux0_clk =
 		S32GEN1_MODULE_CLK(cgm2_mux0);
 static struct s32gen1_cgm_div cgm2_mux0_div =
@@ -254,51 +254,51 @@ static struct s32gen1_clk pfe_sys_clk =
 
 static struct s32gen1_clk *s32g274a_clocks[] = {
 	/* PFE_MAC0 */
-	[ARR_CLK(S32G274A_CLK_PFE_MAC0_RX)] = &pfe_mac0_rx_clk,
-	[ARR_CLK(S32G274A_CLK_PFE_MAC0_TX_DIV)] = &pfe_mac0_tx_div_clk,
-	[ARR_CLK(S32G274A_CLK_MC_CGM2_MUX1)] = &cgm2_mux1_clk,
-	[ARR_CLK(S32G274A_CLK_MC_CGM2_MUX4)] = &cgm2_mux4_clk,
-	[ARR_CLK(S32G274A_CLK_MC_CGM2_MUX7)] = &cgm2_mux7_clk,
+	[ARR_CLK(S32G_CLK_PFE_MAC0_RX)] = &pfe_mac0_rx_clk,
+	[ARR_CLK(S32G_CLK_PFE_MAC0_TX_DIV)] = &pfe_mac0_tx_div_clk,
+	[ARR_CLK(S32G_CLK_MC_CGM2_MUX1)] = &cgm2_mux1_clk,
+	[ARR_CLK(S32G_CLK_MC_CGM2_MUX4)] = &cgm2_mux4_clk,
+	[ARR_CLK(S32G_CLK_MC_CGM2_MUX7)] = &cgm2_mux7_clk,
 	/* PFE_MAC1 */
-	[ARR_CLK(S32G274A_CLK_PFE_MAC1_RX)] = &pfe_mac1_rx_clk,
-	[ARR_CLK(S32G274A_CLK_PFE_MAC1_TX)] = &pfe_mac1_tx_clk,
-	[ARR_CLK(S32G274A_CLK_MC_CGM2_MUX2)] = &cgm2_mux2_clk,
-	[ARR_CLK(S32G274A_CLK_MC_CGM2_MUX5)] = &cgm2_mux5_clk,
-	[ARR_CLK(S32G274A_CLK_MC_CGM2_MUX8)] = &cgm2_mux8_clk,
+	[ARR_CLK(S32G_CLK_PFE_MAC1_RX)] = &pfe_mac1_rx_clk,
+	[ARR_CLK(S32G_CLK_PFE_MAC1_TX)] = &pfe_mac1_tx_clk,
+	[ARR_CLK(S32G_CLK_MC_CGM2_MUX2)] = &cgm2_mux2_clk,
+	[ARR_CLK(S32G_CLK_MC_CGM2_MUX5)] = &cgm2_mux5_clk,
+	[ARR_CLK(S32G_CLK_MC_CGM2_MUX8)] = &cgm2_mux8_clk,
 	/* PFE_MAC2 */
-	[ARR_CLK(S32G274A_CLK_PFE_MAC2_RX)] = &pfe_mac2_rx_clk,
-	[ARR_CLK(S32G274A_CLK_PFE_MAC2_TX)] = &pfe_mac2_tx_clk,
-	[ARR_CLK(S32G274A_CLK_MC_CGM2_MUX3)] = &cgm2_mux3_clk,
-	[ARR_CLK(S32G274A_CLK_MC_CGM2_MUX6)] = &cgm2_mux6_clk,
-	[ARR_CLK(S32G274A_CLK_MC_CGM2_MUX9)] = &cgm2_mux9_clk,
-	[ARR_CLK(S32G274A_CLK_MC_CGM2_MUX0)] = &cgm2_mux0_clk,
-	[ARR_CLK(S32G274A_CLK_PFE_SYS)] = &pfe_sys_clk,
-	[ARR_CLK(S32G274A_CLK_PFE_PE)] = &pfe_pe_clk,
+	[ARR_CLK(S32G_CLK_PFE_MAC2_RX)] = &pfe_mac2_rx_clk,
+	[ARR_CLK(S32G_CLK_PFE_MAC2_TX)] = &pfe_mac2_tx_clk,
+	[ARR_CLK(S32G_CLK_MC_CGM2_MUX3)] = &cgm2_mux3_clk,
+	[ARR_CLK(S32G_CLK_MC_CGM2_MUX6)] = &cgm2_mux6_clk,
+	[ARR_CLK(S32G_CLK_MC_CGM2_MUX9)] = &cgm2_mux9_clk,
+	[ARR_CLK(S32G_CLK_MC_CGM2_MUX0)] = &cgm2_mux0_clk,
+	[ARR_CLK(S32G_CLK_PFE_SYS)] = &pfe_sys_clk,
+	[ARR_CLK(S32G_CLK_PFE_PE)] = &pfe_pe_clk,
 };
 
 static struct s32gen1_clk *s32g274a_cc_clocks[] = {
 	[CC_ARR_CLK(S32GEN1_CLK_PER)] = &per_clk,
 	[CC_ARR_CLK(S32GEN1_CLK_CAN_PE)] = &can_pe_clk,
-	[CC_ARR_CLK(S32G274A_CLK_ACCEL_PLL_PHI0)] = &accel_pll_phi0_clk,
-	[CC_ARR_CLK(S32G274A_CLK_ACCEL_PLL_PHI1)] = &accel_pll_phi1_clk,
-	[CC_ARR_CLK(S32G274A_CLK_SERDES0_LANE1_CDR)] = &serdes0_lane1_cdr_clk,
-	[CC_ARR_CLK(S32G274A_CLK_SERDES0_LANE1_TX)] = &serdes0_lane1_tx_clk,
-	[CC_ARR_CLK(S32G274A_CLK_PFE_MAC0_EXT_TX)] = &pfe_mac0_ext_tx_clk,
-	[CC_ARR_CLK(S32G274A_CLK_PFE_MAC0_EXT_RX)] = &pfe_mac0_ext_rx_clk,
-	[CC_ARR_CLK(S32G274A_CLK_PFE_MAC0_EXT_REF)] = &pfe_mac0_ext_ref_clk,
-	[CC_ARR_CLK(S32G274A_CLK_PFE_MAC1_EXT_TX)] = &pfe_mac1_ext_tx_clk,
-	[CC_ARR_CLK(S32G274A_CLK_PFE_MAC1_EXT_RX)] = &pfe_mac1_ext_rx_clk,
-	[CC_ARR_CLK(S32G274A_CLK_PFE_MAC1_EXT_REF)] = &pfe_mac1_ext_ref_clk,
-	[CC_ARR_CLK(S32G274A_CLK_PFE_MAC2_EXT_TX)] = &pfe_mac2_ext_tx_clk,
-	[CC_ARR_CLK(S32G274A_CLK_PFE_MAC2_EXT_RX)] = &pfe_mac2_ext_rx_clk,
-	[CC_ARR_CLK(S32G274A_CLK_PFE_MAC2_EXT_REF)] = &pfe_mac2_ext_ref_clk,
-	[CC_ARR_CLK(S32G274A_CLK_SERDES1_LANE0_TX)] = &serdes1_lane0_ext_tx_clk,
-	[CC_ARR_CLK(S32G274A_CLK_SERDES1_LANE0_CDR)] = &serdes1_lane0_cdr_clk,
-	[CC_ARR_CLK(S32G274A_CLK_PFE_MAC0_REF_DIV)] = &pfe_mac0_ref_div_clk,
-	[CC_ARR_CLK(S32G274A_CLK_PFE_MAC1_REF_DIV)] = &pfe_mac1_ref_div_clk,
-	[CC_ARR_CLK(S32G274A_CLK_PFE_MAC2_REF_DIV)] = &pfe_mac2_ref_div_clk,
-	[CC_ARR_CLK(S32G274A_CLK_SERDES1_LANE1_TX)] = &serdes1_lane1_tx_clk,
-	[CC_ARR_CLK(S32G274A_CLK_SERDES1_LANE1_CDR)] = &serdes1_lane1_cdr_clk,
+	[CC_ARR_CLK(S32G_CLK_ACCEL_PLL_PHI0)] = &accel_pll_phi0_clk,
+	[CC_ARR_CLK(S32G_CLK_ACCEL_PLL_PHI1)] = &accel_pll_phi1_clk,
+	[CC_ARR_CLK(S32G_CLK_SERDES0_LANE1_CDR)] = &serdes0_lane1_cdr_clk,
+	[CC_ARR_CLK(S32G_CLK_SERDES0_LANE1_TX)] = &serdes0_lane1_tx_clk,
+	[CC_ARR_CLK(S32G_CLK_PFE_MAC0_EXT_TX)] = &pfe_mac0_ext_tx_clk,
+	[CC_ARR_CLK(S32G_CLK_PFE_MAC0_EXT_RX)] = &pfe_mac0_ext_rx_clk,
+	[CC_ARR_CLK(S32G_CLK_PFE_MAC0_EXT_REF)] = &pfe_mac0_ext_ref_clk,
+	[CC_ARR_CLK(S32G_CLK_PFE_MAC1_EXT_TX)] = &pfe_mac1_ext_tx_clk,
+	[CC_ARR_CLK(S32G_CLK_PFE_MAC1_EXT_RX)] = &pfe_mac1_ext_rx_clk,
+	[CC_ARR_CLK(S32G_CLK_PFE_MAC1_EXT_REF)] = &pfe_mac1_ext_ref_clk,
+	[CC_ARR_CLK(S32G_CLK_PFE_MAC2_EXT_TX)] = &pfe_mac2_ext_tx_clk,
+	[CC_ARR_CLK(S32G_CLK_PFE_MAC2_EXT_RX)] = &pfe_mac2_ext_rx_clk,
+	[CC_ARR_CLK(S32G_CLK_PFE_MAC2_EXT_REF)] = &pfe_mac2_ext_ref_clk,
+	[CC_ARR_CLK(S32G_CLK_SERDES1_LANE0_TX)] = &serdes1_lane0_ext_tx_clk,
+	[CC_ARR_CLK(S32G_CLK_SERDES1_LANE0_CDR)] = &serdes1_lane0_cdr_clk,
+	[CC_ARR_CLK(S32G_CLK_PFE_MAC0_REF_DIV)] = &pfe_mac0_ref_div_clk,
+	[CC_ARR_CLK(S32G_CLK_PFE_MAC1_REF_DIV)] = &pfe_mac1_ref_div_clk,
+	[CC_ARR_CLK(S32G_CLK_PFE_MAC2_REF_DIV)] = &pfe_mac2_ref_div_clk,
+	[CC_ARR_CLK(S32G_CLK_SERDES1_LANE1_TX)] = &serdes1_lane1_tx_clk,
+	[CC_ARR_CLK(S32G_CLK_SERDES1_LANE1_CDR)] = &serdes1_lane1_cdr_clk,
 };
 
 struct s32gen1_clk *get_plat_cc_clock(uint32_t id)
diff --git a/drivers/nxp/s32g/clk/s32g274a_scmi_ids.c b/drivers/nxp/s32g/clk/s32g274a_scmi_ids.c
index c5b691267..3c56fe73f 100644
--- a/drivers/nxp/s32g/clk/s32g274a_scmi_ids.c
+++ b/drivers/nxp/s32g/clk/s32g274a_scmi_ids.c
@@ -5,7 +5,7 @@
 #include <clk/s32gen1_clk_funcs.h>
 #include <clk/s32gen1_scmi_clk.h>
 #include <common/debug.h>
-#include <dt-bindings/clock/s32g274a-clock.h>
+#include <dt-bindings/clock/s32g-clock.h>
 #include <dt-bindings/clock/s32g-scmi-clock.h>
 #include <errno.h>
 #include <stdint.h>
@@ -18,13 +18,13 @@ struct s32gen1_scmi_clk s32g274a_scmi_clk[] = {
 	SCMI_ARRAY_ENTRY(S32G_SCMI_CLK_USB_LOW,
 			 S32GEN1_CLK_SIRC, "usb_low"),
 	SCMI_ARRAY_ENTRY(S32G_SCMI_CLK_PFE_AXI,
-			 S32G274A_CLK_PFE_SYS, "pfe_axi"),
+			 S32G_CLK_PFE_SYS, "pfe_axi"),
 	SCMI_ARRAY_ENTRY(S32G_SCMI_CLK_PFE_APB,
-			 S32G274A_CLK_PFE_SYS, "pfe_apb"),
+			 S32G_CLK_PFE_SYS, "pfe_apb"),
 	SCMI_ARRAY_ENTRY(S32G_SCMI_CLK_PFE_TS,
 			 S32GEN1_CLK_GMAC0_TS, "pfe_ts"),
 	SCMI_ARRAY_ENTRY(S32G_SCMI_CLK_PFE_PE,
-			 S32G274A_CLK_PFE_PE, "pfe_pe"),
+			 S32G_CLK_PFE_PE, "pfe_pe"),
 	/* PFE0 */
 	SCMI_ARRAY_ENTRY(S32G_SCMI_CLK_PFE0_RX_SGMII,
 			 S32GEN1_SCMI_COMPLEX_CLK, "pfe0_rx_sgmii"),
@@ -89,32 +89,32 @@ static int s32g_compound2clkid(uint32_t scmi_clk_id, uint32_t *clk_id)
 	case S32G_SCMI_CLK_PFE0_RX_SGMII:
 	case S32G_SCMI_CLK_PFE0_RX_RGMII:
 		if (clk_id)
-			*clk_id = S32G274A_CLK_PFE_MAC0_RX;
+			*clk_id = S32G_CLK_PFE_MAC0_RX;
 		break;
 	case S32G_SCMI_CLK_PFE0_TX_SGMII:
 	case S32G_SCMI_CLK_PFE0_TX_RGMII:
 		if (clk_id)
-			*clk_id = S32G274A_CLK_PFE_MAC0_TX_DIV;
+			*clk_id = S32G_CLK_PFE_MAC0_TX_DIV;
 		break;
 	case S32G_SCMI_CLK_PFE1_RX_SGMII:
 	case S32G_SCMI_CLK_PFE1_RX_RGMII:
 		if (clk_id)
-			*clk_id = S32G274A_CLK_PFE_MAC1_RX;
+			*clk_id = S32G_CLK_PFE_MAC1_RX;
 		break;
 	case S32G_SCMI_CLK_PFE1_TX_SGMII:
 	case S32G_SCMI_CLK_PFE1_TX_RGMII:
 		if (clk_id)
-			*clk_id = S32G274A_CLK_PFE_MAC1_TX;
+			*clk_id = S32G_CLK_PFE_MAC1_TX;
 		break;
 	case S32G_SCMI_CLK_PFE2_RX_SGMII:
 	case S32G_SCMI_CLK_PFE2_RX_RGMII:
 		if (clk_id)
-			*clk_id = S32G274A_CLK_PFE_MAC2_RX;
+			*clk_id = S32G_CLK_PFE_MAC2_RX;
 		break;
 	case S32G_SCMI_CLK_PFE2_TX_SGMII:
 	case S32G_SCMI_CLK_PFE2_TX_RGMII:
 		if (clk_id)
-			*clk_id = S32G274A_CLK_PFE_MAC2_TX;
+			*clk_id = S32G_CLK_PFE_MAC2_TX;
 		break;
 	case S32G_SCMI_CLK_PFE0_RX_RMII:
 	case S32G_SCMI_CLK_PFE0_TX_RMII:
@@ -148,7 +148,7 @@ int plat_scmi_id2clk(uint32_t scmi_clk_id, uint32_t *clk_id)
 
 	*clk_id = s32g274a_scmi_clk[INDEX(scmi_clk_id)].plat_id;
 	if (!*clk_id) {
-		ERROR("Unhandled S32G274A clock: %u\n", scmi_clk_id);
+		ERROR("Unhandled S32G clock: %u\n", scmi_clk_id);
 		return -EINVAL;
 	}
 
@@ -163,7 +163,7 @@ int plat_compound_clk_get(struct clk *clk)
 		return -EINVAL;
 
 	if (s32g_compound2clkid(scmi_clk_id, NULL)) {
-		ERROR("Invalid S32G274A compound clock : %u\n", scmi_clk_id);
+		ERROR("Invalid S32G compound clock : %u\n", scmi_clk_id);
 		return -EINVAL;
 	}
 
@@ -176,15 +176,15 @@ static int set_mac0_rx_parent(struct clk *clk)
 	uint32_t clk_id = clk->id;
 
 	if (clk_id == S32G_SCMI_CLK_PFE0_RX_SGMII) {
-		rx_id = S32G274A_CLK_SERDES1_LANE0_CDR;
+		rx_id = S32G_CLK_SERDES1_LANE0_CDR;
 	} else if (clk_id == S32G_SCMI_CLK_PFE0_RX_RGMII) {
-		rx_id = S32G274A_CLK_PFE_MAC0_EXT_RX;
+		rx_id = S32G_CLK_PFE_MAC0_EXT_RX;
 	} else {
 		ERROR("Invalid PFE0 RX mode\n");
 		return -EINVAL;
 	}
 
-	return cc_set_mux_parent(clk, S32G274A_CLK_MC_CGM2_MUX4, rx_id);
+	return cc_set_mux_parent(clk, S32G_CLK_MC_CGM2_MUX4, rx_id);
 }
 
 static int set_mac0_tx_parent(struct clk *clk)
@@ -193,7 +193,7 @@ static int set_mac0_tx_parent(struct clk *clk)
 	uint32_t clk_id = clk->id;
 
 	if (clk_id == S32G_SCMI_CLK_PFE0_TX_SGMII) {
-		tx_id = S32G274A_CLK_SERDES1_LANE0_TX;
+		tx_id = S32G_CLK_SERDES1_LANE0_TX;
 	} else if (clk_id == S32G_SCMI_CLK_PFE0_TX_RGMII) {
 		tx_id = S32GEN1_CLK_PERIPH_PLL_PHI5;
 	} else {
@@ -201,7 +201,7 @@ static int set_mac0_tx_parent(struct clk *clk)
 		return -EINVAL;
 	}
 
-	return cc_set_mux_parent(clk, S32G274A_CLK_MC_CGM2_MUX1, tx_id);
+	return cc_set_mux_parent(clk, S32G_CLK_MC_CGM2_MUX1, tx_id);
 }
 
 static int set_mac1_rx_parent(struct clk *clk)
@@ -210,15 +210,15 @@ static int set_mac1_rx_parent(struct clk *clk)
 	uint32_t clk_id = clk->id;
 
 	if (clk_id == S32G_SCMI_CLK_PFE1_RX_SGMII) {
-		rx_id = S32G274A_CLK_SERDES1_LANE1_CDR;
+		rx_id = S32G_CLK_SERDES1_LANE1_CDR;
 	} else if (clk_id == S32G_SCMI_CLK_PFE1_RX_RGMII) {
-		rx_id = S32G274A_CLK_PFE_MAC1_EXT_RX;
+		rx_id = S32G_CLK_PFE_MAC1_EXT_RX;
 	} else {
 		ERROR("Invalid PFE1 RX mode\n");
 		return -EINVAL;
 	}
 
-	return cc_set_mux_parent(clk, S32G274A_CLK_MC_CGM2_MUX5, rx_id);
+	return cc_set_mux_parent(clk, S32G_CLK_MC_CGM2_MUX5, rx_id);
 }
 
 static int set_mac1_tx_parent(struct clk *clk)
@@ -227,7 +227,7 @@ static int set_mac1_tx_parent(struct clk *clk)
 	uint32_t clk_id = clk->id;
 
 	if (clk_id == S32G_SCMI_CLK_PFE1_TX_SGMII) {
-		tx_id = S32G274A_CLK_SERDES1_LANE1_TX;
+		tx_id = S32G_CLK_SERDES1_LANE1_TX;
 	} else if (clk_id == S32G_SCMI_CLK_PFE1_TX_RGMII) {
 		tx_id = S32GEN1_CLK_PERIPH_PLL_PHI5;
 	} else {
@@ -235,7 +235,7 @@ static int set_mac1_tx_parent(struct clk *clk)
 		return -EINVAL;
 	}
 
-	return cc_set_mux_parent(clk, S32G274A_CLK_MC_CGM2_MUX2, tx_id);
+	return cc_set_mux_parent(clk, S32G_CLK_MC_CGM2_MUX2, tx_id);
 }
 
 static int set_mac2_rx_parent(struct clk *clk)
@@ -244,15 +244,15 @@ static int set_mac2_rx_parent(struct clk *clk)
 	uint32_t clk_id = clk->id;
 
 	if (clk_id == S32G_SCMI_CLK_PFE2_RX_SGMII) {
-		rx_id = S32G274A_CLK_SERDES0_LANE1_CDR;
+		rx_id = S32G_CLK_SERDES0_LANE1_CDR;
 	} else if (clk_id == S32G_SCMI_CLK_PFE2_RX_RGMII) {
-		rx_id = S32G274A_CLK_PFE_MAC2_EXT_RX;
+		rx_id = S32G_CLK_PFE_MAC2_EXT_RX;
 	} else {
 		ERROR("Invalid PFE2 RX mode\n");
 		return -EINVAL;
 	}
 
-	return cc_set_mux_parent(clk, S32G274A_CLK_MC_CGM2_MUX6, rx_id);
+	return cc_set_mux_parent(clk, S32G_CLK_MC_CGM2_MUX6, rx_id);
 }
 
 static int set_mac2_tx_parent(struct clk *clk)
@@ -261,7 +261,7 @@ static int set_mac2_tx_parent(struct clk *clk)
 	uint32_t clk_id = clk->id;
 
 	if (clk_id == S32G_SCMI_CLK_PFE2_TX_SGMII) {
-		tx_id = S32G274A_CLK_SERDES0_LANE1_TX;
+		tx_id = S32G_CLK_SERDES0_LANE1_TX;
 	} else if (clk_id == S32G_SCMI_CLK_PFE2_TX_RGMII) {
 		tx_id = S32GEN1_CLK_PERIPH_PLL_PHI5;
 	} else {
@@ -269,7 +269,7 @@ static int set_mac2_tx_parent(struct clk *clk)
 		return -EINVAL;
 	}
 
-	return cc_set_mux_parent(clk, S32G274A_CLK_MC_CGM2_MUX3, tx_id);
+	return cc_set_mux_parent(clk, S32G_CLK_MC_CGM2_MUX3, tx_id);
 }
 
 int plat_compound_clk_set_parents(struct clk *clk)
@@ -283,17 +283,17 @@ int plat_compound_clk_set_parents(struct clk *clk)
 	}
 
 	switch (id) {
-	case S32G274A_CLK_PFE_MAC0_TX_DIV:
+	case S32G_CLK_PFE_MAC0_TX_DIV:
 		return set_mac0_tx_parent(clk);
-	case S32G274A_CLK_PFE_MAC0_RX:
+	case S32G_CLK_PFE_MAC0_RX:
 		return set_mac0_rx_parent(clk);
-	case S32G274A_CLK_PFE_MAC1_TX:
+	case S32G_CLK_PFE_MAC1_TX:
 		return set_mac1_tx_parent(clk);
-	case S32G274A_CLK_PFE_MAC1_RX:
+	case S32G_CLK_PFE_MAC1_RX:
 		return set_mac1_rx_parent(clk);
-	case S32G274A_CLK_PFE_MAC2_TX:
+	case S32G_CLK_PFE_MAC2_TX:
 		return set_mac2_tx_parent(clk);
-	case S32G274A_CLK_PFE_MAC2_RX:
+	case S32G_CLK_PFE_MAC2_RX:
 		return set_mac2_rx_parent(clk);
 	case S32GEN1_SCMI_NOT_IMPLEMENTED_CLK:
 		return 0;
diff --git a/fdts/fsl-s32-gen1.dtsi b/fdts/fsl-s32-gen1.dtsi
index b46672930..c3601332a 100644
--- a/fdts/fsl-s32-gen1.dtsi
+++ b/fdts/fsl-s32-gen1.dtsi
@@ -158,14 +158,14 @@
 			<&clks S32GEN1_CLK_FIRC>,
 			<&clks S32GEN1_CLK_SIRC>,
 			<&clks S32GEN1_CLK_GMAC0_EXT_RX>,
-			<&clks S32G274A_CLK_SERDES1_LANE0_TX>,
-			<&clks S32G274A_CLK_SERDES1_LANE0_CDR>,
-			<&clks S32G274A_CLK_SERDES1_LANE1_TX>,
-			<&clks S32G274A_CLK_SERDES1_LANE1_CDR>,
+			<&clks S32G_CLK_SERDES1_LANE0_TX>,
+			<&clks S32G_CLK_SERDES1_LANE0_CDR>,
+			<&clks S32G_CLK_SERDES1_LANE1_TX>,
+			<&clks S32G_CLK_SERDES1_LANE1_CDR>,
 			<&clks S32GEN1_CLK_SERDES0_LANE0_TX>,
 			<&clks S32GEN1_CLK_SERDES0_LANE0_CDR>,
-			<&clks S32G274A_CLK_SERDES0_LANE1_TX>,
-			<&clks S32G274A_CLK_SERDES0_LANE1_CDR>,
+			<&clks S32G_CLK_SERDES0_LANE1_TX>,
+			<&clks S32G_CLK_SERDES0_LANE1_CDR>,
 			<&clks S32GEN1_CLK_SERDES_REF>;
 		assigned-clock-parents =
 			<&fxosc 0>,
diff --git a/fdts/fsl-s32g274a.dtsi b/fdts/fsl-s32g274a.dtsi
index c1bdc9079..82376f44c 100644
--- a/fdts/fsl-s32g274a.dtsi
+++ b/fdts/fsl-s32g274a.dtsi
@@ -1,15 +1,15 @@
 /*
- * Copyright 2020 NXP
+ * Copyright 2020-2021 NXP
  *
  * SPDX-License-Identifier: BSD-3-Clause
  */
 
-#include <dt-bindings/clock/s32g274a-clock.h>
+#include <dt-bindings/clock/s32g-clock.h>
 
 /dts-v1/;
 #include "fsl-s32-gen1.dtsi"
 / {
-	model = "NXP S32G274A";
+	model = "NXP S32G";
 	compatible = "fsl,s32g274a-simu", "fsl,s32g274a", "fsl,s32gen1",
 		     "arm,vexpress,v2p-aarch64", "arm,vexpress";
 };
@@ -33,13 +33,13 @@
 		reg = <0x0 0x44018000 0x0 0x3000>;
 
 		assigned-clocks =
-			<&clks S32G274A_CLK_MC_CGM2_MUX0>,
-			<&clks S32G274A_CLK_PFE_PE>;
+			<&clks S32G_CLK_MC_CGM2_MUX0>,
+			<&clks S32G_CLK_PFE_PE>;
 		assigned-clock-rates =
 			<0>,
 			<600000000>;
 		assigned-clock-parents =
-			<&clks S32G274A_CLK_ACCEL_PLL_PHI1>;
+			<&clks S32G_CLK_ACCEL_PLL_PHI1>;
 	};
 };
 
@@ -47,8 +47,8 @@
 	assigned-clocks =
 		<&clks S32GEN1_CLK_ACCEL_PLL_MUX>,
 		<&clks S32GEN1_CLK_ACCEL_PLL_VCO>,
-		<&clks S32G274A_CLK_ACCEL_PLL_PHI0>,
-		<&clks S32G274A_CLK_ACCEL_PLL_PHI1>;
+		<&clks S32G_CLK_ACCEL_PLL_PHI0>,
+		<&clks S32G_CLK_ACCEL_PLL_PHI1>;
 	assigned-clock-parents =
 		<&clks S32GEN1_CLK_FXOSC>;
 	assigned-clock-rates =
diff --git a/include/dt-bindings/clock/s32g-clock.h b/include/dt-bindings/clock/s32g-clock.h
new file mode 100644
index 000000000..f80ac3d06
--- /dev/null
+++ b/include/dt-bindings/clock/s32g-clock.h
@@ -0,0 +1,65 @@
+/* SPDX-License-Identifier: BSD-3-Clause */
+/*
+ * Copyright 2020-2021 NXP
+ */
+
+#ifndef __DT_BINDINGS_CLOCK_S32G_H
+#define __DT_BINDINGS_CLOCK_S32G_H
+
+#include <dt-bindings/clock/s32gen1-clock.h>
+
+#define S32G_CLK_ACCEL_PLL_PHI0		S32GEN1_CC_CLK(32)
+#define S32G_CLK_ACCEL_PLL_PHI1		S32GEN1_CC_CLK(33)
+#define S32G_CLK_SERDES0_LANE1_TX		S32GEN1_CC_CLK(46)
+#define S32G_CLK_SERDES0_LANE1_CDR		S32GEN1_CC_CLK(47)
+
+#define S32G_CLK_PFE_MAC0_EXT_TX		S32GEN1_CC_CLK(48)
+#define S32G_CLK_PFE_MAC0_EXT_RX		S32GEN1_CC_CLK(49)
+#define S32G_CLK_PFE_MAC0_EXT_REF		S32GEN1_CC_CLK(50)
+#define S32G_CLK_PFE_MAC1_EXT_TX		S32GEN1_CC_CLK(51)
+#define S32G_CLK_PFE_MAC1_EXT_RX		S32GEN1_CC_CLK(52)
+#define S32G_CLK_PFE_MAC1_EXT_REF		S32GEN1_CC_CLK(53)
+#define S32G_CLK_PFE_MAC2_EXT_TX		S32GEN1_CC_CLK(54)
+#define S32G_CLK_PFE_MAC2_EXT_RX		S32GEN1_CC_CLK(55)
+#define S32G_CLK_PFE_MAC2_EXT_REF		S32GEN1_CC_CLK(56)
+
+#define S32G_CLK_SERDES1_LANE0_TX		S32GEN1_CC_CLK(57)
+#define S32G_CLK_SERDES1_LANE0_CDR		S32GEN1_CC_CLK(58)
+
+#define S32G_CLK_PFE_MAC0_REF_DIV		S32GEN1_CC_CLK(59)
+#define S32G_CLK_PFE_MAC1_REF_DIV		S32GEN1_CC_CLK(60)
+#define S32G_CLK_PFE_MAC2_REF_DIV		S32GEN1_CC_CLK(61)
+#define S32G_CLK_SERDES1_LANE1_TX		S32GEN1_CC_CLK(62)
+
+#define S32G_CLK_SERDES1_LANE1_CDR		S32GEN1_CC_CLK(63)
+
+#define S32G_CLK(N)			S32GEN1_PLAT_CLK(N)
+#define S32G_CLK_INDEX(N)		S32GEN1_PLAT_ARRAY_INDEX(N)
+
+/* PFE_MAC0 */
+#define S32G_CLK_PFE_MAC0_TX_DIV	S32G_CLK(0)
+#define S32G_CLK_PFE_MAC0_RX	S32G_CLK(1)
+
+/* PFE_MAC1 */
+#define S32G_CLK_PFE_MAC1_TX	S32G_CLK(2)
+#define S32G_CLK_PFE_MAC1_RX	S32G_CLK(3)
+
+/* PFE_MAC2 */
+#define S32G_CLK_PFE_MAC2_TX	S32G_CLK(4)
+#define S32G_CLK_PFE_MAC2_RX	S32G_CLK(5)
+
+#define S32G_CLK_PFE_SYS		S32G_CLK(6)
+#define S32G_CLK_PFE_PE		S32G_CLK(7)
+
+#define S32G_CLK_MC_CGM2_MUX0	S32G_CLK(8)
+#define S32G_CLK_MC_CGM2_MUX1	S32G_CLK(9)
+#define S32G_CLK_MC_CGM2_MUX2	S32G_CLK(10)
+#define S32G_CLK_MC_CGM2_MUX3	S32G_CLK(11)
+#define S32G_CLK_MC_CGM2_MUX4	S32G_CLK(12)
+#define S32G_CLK_MC_CGM2_MUX5	S32G_CLK(13)
+#define S32G_CLK_MC_CGM2_MUX6	S32G_CLK(14)
+#define S32G_CLK_MC_CGM2_MUX7	S32G_CLK(15)
+#define S32G_CLK_MC_CGM2_MUX8	S32G_CLK(16)
+#define S32G_CLK_MC_CGM2_MUX9	S32G_CLK(17)
+
+#endif /* __DT_BINDINGS_CLOCK_S32G_H */
diff --git a/include/dt-bindings/clock/s32g274a-clock.h b/include/dt-bindings/clock/s32g274a-clock.h
deleted file mode 100644
index 4c55f790e..000000000
--- a/include/dt-bindings/clock/s32g274a-clock.h
+++ /dev/null
@@ -1,65 +0,0 @@
-/* SPDX-License-Identifier: BSD-3-Clause */
-/*
- * Copyright 2020 NXP
- */
-
-#ifndef __DT_BINDINGS_CLOCK_S32G274A_H
-#define __DT_BINDINGS_CLOCK_S32G274A_H
-
-#include <dt-bindings/clock/s32gen1-clock.h>
-
-#define S32G274A_CLK_ACCEL_PLL_PHI0		S32GEN1_CC_CLK(32)
-#define S32G274A_CLK_ACCEL_PLL_PHI1		S32GEN1_CC_CLK(33)
-#define S32G274A_CLK_SERDES0_LANE1_TX		S32GEN1_CC_CLK(46)
-#define S32G274A_CLK_SERDES0_LANE1_CDR		S32GEN1_CC_CLK(47)
-
-#define S32G274A_CLK_PFE_MAC0_EXT_TX		S32GEN1_CC_CLK(48)
-#define S32G274A_CLK_PFE_MAC0_EXT_RX		S32GEN1_CC_CLK(49)
-#define S32G274A_CLK_PFE_MAC0_EXT_REF		S32GEN1_CC_CLK(50)
-#define S32G274A_CLK_PFE_MAC1_EXT_TX		S32GEN1_CC_CLK(51)
-#define S32G274A_CLK_PFE_MAC1_EXT_RX		S32GEN1_CC_CLK(52)
-#define S32G274A_CLK_PFE_MAC1_EXT_REF		S32GEN1_CC_CLK(53)
-#define S32G274A_CLK_PFE_MAC2_EXT_TX		S32GEN1_CC_CLK(54)
-#define S32G274A_CLK_PFE_MAC2_EXT_RX		S32GEN1_CC_CLK(55)
-#define S32G274A_CLK_PFE_MAC2_EXT_REF		S32GEN1_CC_CLK(56)
-
-#define S32G274A_CLK_SERDES1_LANE0_TX		S32GEN1_CC_CLK(57)
-#define S32G274A_CLK_SERDES1_LANE0_CDR		S32GEN1_CC_CLK(58)
-
-#define S32G274A_CLK_PFE_MAC0_REF_DIV		S32GEN1_CC_CLK(59)
-#define S32G274A_CLK_PFE_MAC1_REF_DIV		S32GEN1_CC_CLK(60)
-#define S32G274A_CLK_PFE_MAC2_REF_DIV		S32GEN1_CC_CLK(61)
-#define S32G274A_CLK_SERDES1_LANE1_TX		S32GEN1_CC_CLK(62)
-
-#define S32G274A_CLK_SERDES1_LANE1_CDR		S32GEN1_CC_CLK(63)
-
-#define S32G274A_CLK(N)			S32GEN1_PLAT_CLK(N)
-#define S32G274A_CLK_INDEX(N)		S32GEN1_PLAT_ARRAY_INDEX(N)
-
-/* PFE_MAC0 */
-#define S32G274A_CLK_PFE_MAC0_TX_DIV	S32G274A_CLK(0)
-#define S32G274A_CLK_PFE_MAC0_RX	S32G274A_CLK(1)
-
-/* PFE_MAC1 */
-#define S32G274A_CLK_PFE_MAC1_TX	S32G274A_CLK(2)
-#define S32G274A_CLK_PFE_MAC1_RX	S32G274A_CLK(3)
-
-/* PFE_MAC2 */
-#define S32G274A_CLK_PFE_MAC2_TX	S32G274A_CLK(4)
-#define S32G274A_CLK_PFE_MAC2_RX	S32G274A_CLK(5)
-
-#define S32G274A_CLK_PFE_SYS		S32G274A_CLK(6)
-#define S32G274A_CLK_PFE_PE		S32G274A_CLK(7)
-
-#define S32G274A_CLK_MC_CGM2_MUX0	S32G274A_CLK(8)
-#define S32G274A_CLK_MC_CGM2_MUX1	S32G274A_CLK(9)
-#define S32G274A_CLK_MC_CGM2_MUX2	S32G274A_CLK(10)
-#define S32G274A_CLK_MC_CGM2_MUX3	S32G274A_CLK(11)
-#define S32G274A_CLK_MC_CGM2_MUX4	S32G274A_CLK(12)
-#define S32G274A_CLK_MC_CGM2_MUX5	S32G274A_CLK(13)
-#define S32G274A_CLK_MC_CGM2_MUX6	S32G274A_CLK(14)
-#define S32G274A_CLK_MC_CGM2_MUX7	S32G274A_CLK(15)
-#define S32G274A_CLK_MC_CGM2_MUX8	S32G274A_CLK(16)
-#define S32G274A_CLK_MC_CGM2_MUX9	S32G274A_CLK(17)
-
-#endif /* __DT_BINDINGS_CLOCK_S32G274A_H */
-- 
2.25.1

