From 1a282f04312e0742bc72c7fa9ca3c2821151af3f Mon Sep 17 00:00:00 2001
From: Radim Sosty <radim.sosty@nxp.com>
Date: Wed, 24 Mar 2021 09:49:30 +0100
Subject: [PATCH 09/42] s32g: ethernet: add alternative way to init PFE FW

This helps decrease dependency on pfe_ct.h. With the new version of
PFE FW, structures pfe_ct_log_if, pfe_ct_phy_if, pfe_ct_version and
pfe_ct_pe_mmap can be deleted and the configuration will be loaded
directly by the FW.

The current method of FW initialization is retained to maintain
compatibility with the FW in BSP28.0.

Upstream-Status: Pending

Issue: ALB-6459

Signed-off-by: Radim Sosty <radim.sosty@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 drivers/net/pfeng/hw_abi/pfeng_hw.h |  4 +++-
 drivers/net/pfeng/pfeng_hw.c        | 29 +++++++++++++++++++++--------
 2 files changed, 24 insertions(+), 9 deletions(-)

diff --git a/drivers/net/pfeng/hw_abi/pfeng_hw.h b/drivers/net/pfeng/hw_abi/pfeng_hw.h
index 24ba95e5da..96c631f134 100644
--- a/drivers/net/pfeng/hw_abi/pfeng_hw.h
+++ b/drivers/net/pfeng/hw_abi/pfeng_hw.h
@@ -1,7 +1,7 @@
 /* SPDX-License-Identifier: GPL 2.0 */
 /*
  *  Copyright (c) 2020 Imagination Technologies Limited
- *  Copyright 2018-2020 NXP
+ *  Copyright 2018-2021 NXP
  */
 
 /**
@@ -44,6 +44,8 @@
 #include "pfe_hif_ring.h"
 #include "pfe_platform_cfg.h"
 
+#define PFE_LOADCONF_ENABLE 0xABCDU
+
 struct pfe_hw_chnl;
 
 struct pfe_fw {
diff --git a/drivers/net/pfeng/pfeng_hw.c b/drivers/net/pfeng/pfeng_hw.c
index 6f3cb4b3a6..39d324eae1 100644
--- a/drivers/net/pfeng/pfeng_hw.c
+++ b/drivers/net/pfeng/pfeng_hw.c
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL 2.0
 /*
  *  Copyright (c) 2020 Imagination Technologies Limited
- *  Copyright 2018-2020 NXP
+ *  Copyright 2018-2021 NXP
  */
 
 /**
@@ -528,8 +528,10 @@ static int pfeng_hw_pe_load_firmware(s32 pe_idx, u8 *fw,
 {
 	s32 ii;
 	s32 l_addr;
+	u32 lcv = htonl(PFE_LOADCONF_ENABLE);
 	void *buf;
 	bool map_found = false;
+	bool lc_found = false;
 	int ret;
 	char *names;
 	Elf32_Ehdr *ehdr = (Elf32_Ehdr *)fw;
@@ -540,13 +542,28 @@ static int pfeng_hw_pe_load_firmware(s32 pe_idx, u8 *fw,
 
 	names = (char *)((int64_t)fw + shdr[ehdr->e_shstrndx].sh_offset);
 	for (ii = 0; ii < ehdr->e_shnum; ++ii) {
-		if (strcmp(".pfe_pe_mmap", &names[shdr[ii].sh_name]) == 0) {
-			map_found = true;
+		if (!strcmp(".loadconf", &names[shdr[ii].sh_name])) {
+			lc_found = true;
 			break;
 		}
 	}
 
-	if (map_found) {
+	if (lc_found) {
+		memcpy(((u8 *)fw + shdr[ii].sh_offset), &lcv, sizeof(lcv));
+	} else {
+		for (ii = 0; ii < ehdr->e_shnum; ++ii) {
+			if (!strcmp(".pfe_pe_mmap", &names[shdr[ii].sh_name])) {
+				map_found = true;
+				break;
+			}
+		}
+
+		if (!map_found) {
+			pr_err("PFE: loadconf section is not available.\n");
+			pr_err("PFE: PE Memory map is not available.\n");
+			return -EINVAL;
+		}
+
 		fw_mmap = malloc(sizeof(struct pfe_ct_pe_mmap));
 		if (!fw_mmap)
 			return -ENOMEM;
@@ -564,10 +581,6 @@ static int pfeng_hw_pe_load_firmware(s32 pe_idx, u8 *fw,
 		pr_info("pfe_ct.h file version\"%s\"\n", mmap_version_str);
 		/*	Indicate that mmap_data is available */
 		*memmap = fw_mmap;
-
-	} else {
-		pr_err("PFE: PE Memory map is not available.\n");
-		return -EINVAL;
 	}
 
 	/*	Try to upload all sections of the .elf */
-- 
2.25.1

