From 563d5d7411c4f75d71e8624d76e795c427e08225 Mon Sep 17 00:00:00 2001
From: Larisa Grigore <larisa.grigore@nxp.com>
Date: Mon, 29 Mar 2021 16:41:59 +0300
Subject: [PATCH 22/42] s32g3: clk: Add support for GMAC clocks

In S32G3 case, GMAC implementation was changed compared to
S32G2. Now all GMAC related clocks derive from MC_CGM6.

Upstream-Status: Pending

Issue: ALB-6496
Signed-off-by: Larisa Grigore <larisa.grigore@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 drivers/clk/s32/include/s32g_clk_funcs.h    |  12 ++
 drivers/clk/s32/include/s32gen1_clk_funcs.h |   2 +
 drivers/clk/s32/s32g274a_clk.c              | 130 +++++++++++++++++-
 drivers/clk/s32/s32g398a_clk.c              | 143 ++++++++++++++++++++
 drivers/clk/s32/s32g_clk.c                  |  22 +--
 drivers/clk/s32/s32gen1_clk.c               |  85 +-----------
 drivers/clk/s32/s32gen1_scmi_ids.c          |  22 ++-
 drivers/clk/s32/s32r45_clk.c                | 109 +++++++++++++++
 include/dt-bindings/clock/s32g-clock.h      |   2 +
 9 files changed, 425 insertions(+), 102 deletions(-)
 create mode 100644 drivers/clk/s32/include/s32g_clk_funcs.h

diff --git a/drivers/clk/s32/include/s32g_clk_funcs.h b/drivers/clk/s32/include/s32g_clk_funcs.h
new file mode 100644
index 0000000000..7a87a5f39e
--- /dev/null
+++ b/drivers/clk/s32/include/s32g_clk_funcs.h
@@ -0,0 +1,12 @@
+/* SPDX-License-Identifier: BSD-3-Clause */
+/*
+ * Copyright 2021 NXP
+ */
+#ifndef S32G_CLK_FUNCS_H
+#define S32G_CLK_FUNCS_H
+#include <s32gen1_clk_funcs.h>
+
+struct s32gen1_clk *s32g_get_plat_cc_clock(uint32_t id);
+struct s32gen1_clk *s32g_get_plat_clock(uint32_t id);
+
+#endif /* S32G_CLK_FUNCS_H */
diff --git a/drivers/clk/s32/include/s32gen1_clk_funcs.h b/drivers/clk/s32/include/s32gen1_clk_funcs.h
index 02dab97dd4..da71aeeaf3 100644
--- a/drivers/clk/s32/include/s32gen1_clk_funcs.h
+++ b/drivers/clk/s32/include/s32gen1_clk_funcs.h
@@ -30,4 +30,6 @@ int pllclk2clk(u32 pll_clk_id, u32 *clk_id);
 int get_pll_mfi_mfn(ulong pll_vco, ulong ref_freq, u32 *mfi, u32 *mfn);
 uint32_t s32gen1_platclk2mux(uint32_t clk_id);
 
+int cc_compound_clk_get_pid(u32 id, u32 *parent_id);
+
 #endif /* S32GEN1_CLK_FUNCS_H */
diff --git a/drivers/clk/s32/s32g274a_clk.c b/drivers/clk/s32/s32g274a_clk.c
index 3ea1e7354c..f67619e99e 100644
--- a/drivers/clk/s32/s32g274a_clk.c
+++ b/drivers/clk/s32/s32g274a_clk.c
@@ -5,9 +5,112 @@
 #include <asm/arch/siul.h>
 #include <dt-bindings/clock/s32g-clock.h>
 #include <dt-bindings/clock/s32gen1-scmi-clock.h>
-#include <s32gen1_clk_funcs.h>
+#include <s32g_clk_funcs.h>
+#include <s32gen1_clk_modules.h>
 #include <s32gen1_scmi_clk.h>
 
+/* GMAC_TS_CLK */
+static struct s32gen1_fixed_clock gmac_ext_ts =
+		S32GEN1_FIXED_CLK_INIT();
+static struct s32gen1_clk gmac_ext_ts_clk =
+		S32GEN1_MODULE_CLK(gmac_ext_ts);
+static struct s32gen1_mux cgm0_mux9 =
+		S32GEN1_MUX_INIT(S32GEN1_CGM0, 9, 3,
+				 S32GEN1_CLK_FIRC,
+				 S32GEN1_CLK_PERIPH_PLL_PHI4,
+				 S32GEN1_CLK_GMAC0_EXT_TS);
+static struct s32gen1_clk cgm0_mux9_clk =
+		S32GEN1_MODULE_CLK(cgm0_mux9);
+static struct s32gen1_cgm_div gmac_ts_div =
+		S32GEN1_CGM_DIV_INIT(cgm0_mux9_clk, 0);
+static struct s32gen1_clk gmac_ts_clk =
+		S32GEN1_FREQ_MODULE_CLK(gmac_ts_div, 5 * MHZ, 200 * MHZ);
+
+/* GMAC0_TX_CLK */
+static struct s32gen1_fixed_clock gmac0_ext_tx =
+		S32GEN1_FIXED_CLK_INIT();
+static struct s32gen1_clk gmac0_ext_tx_clk =
+		S32GEN1_MODULE_CLK(gmac0_ext_tx);
+
+static struct s32gen1_fixed_clock gmac0_ext_ref =
+		S32GEN1_FIXED_CLK_INIT();
+static struct s32gen1_clk gmac0_ext_ref_clk =
+		S32GEN1_MODULE_CLK(gmac0_ext_ref);
+
+static struct s32gen1_mux cgm0_mux10 =
+		S32GEN1_MUX_INIT(S32GEN1_CGM0, 10, 5,
+				 S32GEN1_CLK_FIRC,
+				 S32GEN1_CLK_PERIPH_PLL_PHI5,
+				 S32GEN1_CLK_SERDES0_LANE0_TX,
+				 S32GEN1_CLK_GMAC0_EXT_TX,
+				 S32GEN1_CLK_GMAC0_EXT_REF);
+static struct s32gen1_clk cgm0_mux10_clk =
+		S32GEN1_MODULE_CLK(cgm0_mux10);
+static struct s32gen1_cgm_div gmac_tx_div =
+		S32GEN1_CGM_DIV_INIT(cgm0_mux10_clk, 0);
+static struct s32gen1_clk gmac_tx_clk =
+		S32GEN1_FREQ_MODULE_CLK(gmac_tx_div, 2500000, 125 * MHZ);
+
+/* GMAC0_RX_CLK */
+static struct s32gen1_fixed_clock gmac0_ext_rx =
+		S32GEN1_FIXED_CLK_INIT();
+static struct s32gen1_clk gmac0_ext_rx_clk =
+		S32GEN1_MODULE_CLK(gmac0_ext_rx);
+
+static struct s32gen1_mux cgm0_mux11 =
+		S32GEN1_MUX_INIT(S32GEN1_CGM0, 11, 4,
+				 S32GEN1_CLK_FIRC,
+				 S32GEN1_CLK_GMAC0_REF_DIV,
+				 S32GEN1_CLK_GMAC0_EXT_RX,
+				 S32GEN1_CLK_SERDES0_LANE0_CDR);
+static struct s32gen1_clk cgm0_mux11_clk =
+		S32GEN1_MODULE_CLK(cgm0_mux11);
+static struct s32gen1_clk gmac_rx_clk =
+		S32GEN1_CHILD_CLK(cgm0_mux11_clk, 2500000, 125 * MHZ);
+
+/* GMAC0_REF_DIV_CLK */
+static struct s32gen1_mux cgm0_mux15 =
+		S32GEN1_SHARED_MUX_INIT(S32GEN1_CGM0, 15, 2,
+					S32GEN1_CLK_FIRC,
+					S32GEN1_CLK_GMAC0_EXT_REF);
+static struct s32gen1_clk cgm0_mux15_clk =
+		S32GEN1_MODULE_CLK(cgm0_mux15);
+static struct s32gen1_clk gmac0_ref_div_clk =
+		S32GEN1_CHILD_CLK(cgm0_mux15_clk, 0, 50 * MHZ);
+static struct s32gen1_clk gmac0_ref_clk =
+		S32GEN1_CHILD_CLK(cgm0_mux15_clk, 0, 50 * MHZ);
+
+static struct s32gen1_clk *s32g274a_cc_clocks[] = {
+	[CC_ARR_CLK(S32GEN1_CLK_MC_CGM0_MUX10)] = &cgm0_mux10_clk,
+	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_TX)] = &gmac_tx_clk,
+	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_EXT_TS)] = &gmac_ext_ts_clk,
+	[CC_ARR_CLK(S32GEN1_CLK_MC_CGM0_MUX9)] = &cgm0_mux9_clk,
+	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_TS)] = &gmac_ts_clk,
+	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_EXT_TX)] = &gmac0_ext_tx_clk,
+	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_EXT_REF)] = &gmac0_ext_ref_clk,
+	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_EXT_RX)] = &gmac0_ext_rx_clk,
+	[CC_ARR_CLK(S32GEN1_CLK_MC_CGM0_MUX11)] = &cgm0_mux11_clk,
+	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_RX)] = &gmac_rx_clk,
+	[CC_ARR_CLK(S32GEN1_CLK_MC_CGM0_MUX15)] = &cgm0_mux15_clk,
+	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_REF_DIV)] = &gmac0_ref_div_clk,
+	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_REF)] = &gmac0_ref_clk,
+};
+
+struct s32gen1_clk *s32g_get_plat_cc_clock(uint32_t id)
+{
+	id = s32gen1_platclk2mux(id);
+
+	if (id >= ARRAY_SIZE(s32g274a_cc_clocks))
+		return NULL;
+
+	return s32g274a_cc_clocks[id];
+}
+
+struct s32gen1_clk *s32g_get_plat_clock(uint32_t id)
+{
+	return NULL;
+}
+
 ulong s32gen1_plat_set_rate(struct clk *c, ulong rate)
 {
 	ulong qspi_max_rate;
@@ -27,3 +130,28 @@ ulong s32gen1_plat_set_rate(struct clk *c, ulong rate)
 
 	return s32gen1_scmi_set_rate(c, rate);
 }
+
+int cc_compound_clk_get_pid(u32 id, u32 *parent_id)
+{
+	if (!parent_id)
+		return -EINVAL;
+
+	switch (id) {
+	case S32GEN1_SCMI_CLK_GMAC0_RX_SGMII:
+	case S32GEN1_SCMI_CLK_GMAC0_RX_RGMII:
+		*parent_id = S32GEN1_CLK_MC_CGM0_MUX11;
+		break;
+	case S32GEN1_SCMI_CLK_GMAC0_TX_RGMII:
+	case S32GEN1_SCMI_CLK_GMAC0_TX_SGMII:
+		*parent_id = S32GEN1_CLK_MC_CGM0_MUX10;
+		break;
+	case S32GEN1_SCMI_CLK_GMAC0_TS_RGMII:
+	case S32GEN1_SCMI_CLK_GMAC0_TS_SGMII:
+		*parent_id = S32GEN1_CLK_MC_CGM0_MUX9;
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	return 0;
+}
diff --git a/drivers/clk/s32/s32g398a_clk.c b/drivers/clk/s32/s32g398a_clk.c
index a5c97eccaf..33298cdd1f 100644
--- a/drivers/clk/s32/s32g398a_clk.c
+++ b/drivers/clk/s32/s32g398a_clk.c
@@ -2,9 +2,127 @@
 /*
  * Copyright 2021 NXP
  */
+#include <dt-bindings/clock/s32gen1-clock.h>
+#include <dt-bindings/clock/s32gen1-scmi-clock.h>
+#include <dt-bindings/clock/s32g3-clock.h>
 #include <linux/types.h>
+#include <s32g_clk_funcs.h>
+#include <s32gen1_clk_modules.h>
 #include <s32gen1_scmi_clk.h>
 
+/* GMAC_TS_CLK */
+static struct s32gen1_fixed_clock gmac_ext_ts =
+		S32GEN1_FIXED_CLK_INIT();
+static struct s32gen1_clk gmac_ext_ts_clk =
+		S32GEN1_MODULE_CLK(gmac_ext_ts);
+static struct s32gen1_mux cgm6_mux0 =
+		S32GEN1_MUX_INIT(S32GEN1_CGM6, 0, 3,
+				 S32GEN1_CLK_FIRC,
+				 S32GEN1_CLK_PERIPH_PLL_PHI4,
+				 S32GEN1_CLK_GMAC0_EXT_TS);
+static struct s32gen1_clk cgm6_mux0_clk =
+		S32GEN1_MODULE_CLK(cgm6_mux0);
+static struct s32gen1_cgm_div gmac_ts_div =
+		S32GEN1_CGM_DIV_INIT(cgm6_mux0_clk, 0);
+static struct s32gen1_clk gmac_ts_clk =
+		S32GEN1_FREQ_MODULE_CLK(gmac_ts_div, 5 * MHZ, 200 * MHZ);
+
+/* GMAC0_TX_CLK */
+static struct s32gen1_fixed_clock gmac0_ext_tx =
+		S32GEN1_FIXED_CLK_INIT();
+static struct s32gen1_clk gmac0_ext_tx_clk =
+		S32GEN1_MODULE_CLK(gmac0_ext_tx);
+
+static struct s32gen1_fixed_clock gmac0_ext_ref =
+		S32GEN1_FIXED_CLK_INIT();
+static struct s32gen1_clk gmac0_ext_ref_clk =
+		S32GEN1_MODULE_CLK(gmac0_ext_ref);
+
+static struct s32gen1_mux cgm6_mux1 =
+		S32GEN1_MUX_INIT(S32GEN1_CGM6, 1, 5,
+				 S32GEN1_CLK_FIRC,
+				 S32GEN1_CLK_PERIPH_PLL_PHI5,
+				 S32GEN1_CLK_SERDES0_LANE0_TX,
+				 S32GEN1_CLK_GMAC0_EXT_TX,
+				 S32GEN1_CLK_GMAC0_EXT_REF);
+static struct s32gen1_clk cgm6_mux1_clk =
+		S32GEN1_MODULE_CLK(cgm6_mux1);
+static struct s32gen1_cgm_div gmac_tx_div =
+		S32GEN1_CGM_DIV_INIT(cgm6_mux1_clk, 0);
+static struct s32gen1_clk gmac_tx_clk =
+		S32GEN1_FREQ_MODULE_CLK(gmac_tx_div, 2500000, 125 * MHZ);
+
+/* GMAC0_RX_CLK */
+static struct s32gen1_fixed_clock gmac0_ext_rx =
+		S32GEN1_FIXED_CLK_INIT();
+static struct s32gen1_clk gmac0_ext_rx_clk =
+		S32GEN1_MODULE_CLK(gmac0_ext_rx);
+
+static struct s32gen1_mux cgm6_mux2 =
+		S32GEN1_MUX_INIT(S32GEN1_CGM6, 2, 4,
+				 S32GEN1_CLK_FIRC,
+				 S32GEN1_CLK_GMAC0_REF_DIV,
+				 S32GEN1_CLK_GMAC0_EXT_RX,
+				 S32GEN1_CLK_SERDES0_LANE0_CDR);
+static struct s32gen1_clk cgm6_mux2_clk =
+		S32GEN1_MODULE_CLK(cgm6_mux2);
+static struct s32gen1_clk gmac_rx_clk =
+		S32GEN1_CHILD_CLK(cgm6_mux2_clk, 2500000, 125 * MHZ);
+
+/* GMAC0_REF_DIV_CLK */
+static struct s32gen1_mux cgm6_mux3 =
+		S32GEN1_SHARED_MUX_INIT(S32GEN1_CGM6, 3, 2,
+					S32GEN1_CLK_FIRC,
+					S32GEN1_CLK_GMAC0_EXT_REF);
+static struct s32gen1_clk cgm6_mux3_clk =
+		S32GEN1_MODULE_CLK(cgm6_mux3);
+static struct s32gen1_clk gmac0_ref_div_clk =
+		S32GEN1_CHILD_CLK(cgm6_mux3_clk, 0, 50 * MHZ);
+static struct s32gen1_clk gmac0_ref_clk =
+		S32GEN1_CHILD_CLK(cgm6_mux3_clk, 0, 50 * MHZ);
+
+static struct s32gen1_clk *s32g398a_clocks[] = {
+	[ARR_CLK(S32G_CLK_MC_CGM6_MUX0)] = &cgm6_mux0_clk,
+	[ARR_CLK(S32G_CLK_MC_CGM6_MUX1)] = &cgm6_mux1_clk,
+	[ARR_CLK(S32G_CLK_MC_CGM6_MUX2)] = &cgm6_mux2_clk,
+	[ARR_CLK(S32G_CLK_MC_CGM6_MUX3)] = &cgm6_mux3_clk,
+};
+
+static struct s32gen1_clk *s32g398a_cc_clocks[] = {
+	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_TX)] = &gmac_tx_clk,
+	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_EXT_TS)] = &gmac_ext_ts_clk,
+	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_TS)] = &gmac_ts_clk,
+	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_EXT_TX)] = &gmac0_ext_tx_clk,
+	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_EXT_REF)] = &gmac0_ext_ref_clk,
+	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_EXT_RX)] = &gmac0_ext_rx_clk,
+	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_RX)] = &gmac_rx_clk,
+	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_REF_DIV)] = &gmac0_ref_div_clk,
+	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_REF)] = &gmac0_ref_clk,
+};
+
+struct s32gen1_clk *s32g_get_plat_cc_clock(uint32_t id)
+{
+	id = s32gen1_platclk2mux(id);
+
+	if (id >= ARRAY_SIZE(s32g398a_cc_clocks))
+		return NULL;
+
+	return s32g398a_cc_clocks[id];
+}
+
+struct s32gen1_clk *s32g_get_plat_clock(uint32_t id)
+{
+	if (id < S32GEN1_PLAT_CLK_ID_BASE)
+		return NULL;
+
+	id -= S32GEN1_PLAT_CLK_ID_BASE;
+
+	if (id >= ARRAY_SIZE(s32g398a_clocks))
+		return NULL;
+
+	return s32g398a_clocks[id];
+}
+
 ulong s32gen1_plat_set_rate(struct clk *c, ulong rate)
 {
 	if (s32gen1_scmi_request(c))
@@ -12,3 +130,28 @@ ulong s32gen1_plat_set_rate(struct clk *c, ulong rate)
 
 	return s32gen1_scmi_set_rate(c, rate);
 }
+
+int cc_compound_clk_get_pid(u32 id, u32 *parent_id)
+{
+	if (!parent_id)
+		return -EINVAL;
+
+	switch (id) {
+	case S32GEN1_SCMI_CLK_GMAC0_RX_SGMII:
+	case S32GEN1_SCMI_CLK_GMAC0_RX_RGMII:
+		*parent_id = S32G_CLK_MC_CGM6_MUX2;
+		break;
+	case S32GEN1_SCMI_CLK_GMAC0_TX_RGMII:
+	case S32GEN1_SCMI_CLK_GMAC0_TX_SGMII:
+		*parent_id = S32G_CLK_MC_CGM6_MUX1;
+		break;
+	case S32GEN1_SCMI_CLK_GMAC0_TS_RGMII:
+	case S32GEN1_SCMI_CLK_GMAC0_TS_SGMII:
+		*parent_id = S32G_CLK_MC_CGM6_MUX0;
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	return 0;
+}
diff --git a/drivers/clk/s32/s32g_clk.c b/drivers/clk/s32/s32g_clk.c
index 8d5e2293fc..c5ecb7b6e6 100644
--- a/drivers/clk/s32/s32g_clk.c
+++ b/drivers/clk/s32/s32g_clk.c
@@ -4,12 +4,10 @@
  */
 #include <asm/arch/siul.h>
 #include <dt-bindings/clock/s32g-clock.h>
-#include <s32gen1_clk_funcs.h>
+#include <s32g_clk_funcs.h>
 #include <s32gen1_clk_modules.h>
 #include <s32gen1_shared_clks.h>
 
-#define ARR_CLK(N)	S32G_CLK_INDEX(N)
-
 /* XBAR_2X */
 static struct s32gen1_part_block llce_block =
 		S32GEN1_PART_BLOCK_NO_STATUS(cgm0_mux0_clk, 3,
@@ -304,23 +302,25 @@ static struct s32gen1_clk *s32g_cc_clocks[] = {
 
 struct s32gen1_clk *get_plat_cc_clock(uint32_t id)
 {
-	id = s32gen1_platclk2mux(id);
+	u32 index = s32gen1_platclk2mux(id);
 
-	if (id >= ARRAY_SIZE(s32g_cc_clocks))
-		return NULL;
+	if (index >= ARRAY_SIZE(s32g_cc_clocks) || !s32g_cc_clocks[index])
+		return s32g_get_plat_cc_clock(id);
 
-	return s32g_cc_clocks[id];
+	return s32g_cc_clocks[index];
 }
 
 struct s32gen1_clk *get_plat_clock(uint32_t id)
 {
+	u32 index;
+
 	if (id < S32GEN1_PLAT_CLK_ID_BASE)
 		return NULL;
 
-	id -= S32GEN1_PLAT_CLK_ID_BASE;
+	index = id - S32GEN1_PLAT_CLK_ID_BASE;
 
-	if (id >= ARRAY_SIZE(s32g_clocks))
-		return NULL;
+	if (index >= ARRAY_SIZE(s32g_clocks) || !s32g_clocks[index])
+		return s32g_get_plat_clock(id);
 
-	return s32g_clocks[id];
+	return s32g_clocks[index];
 }
diff --git a/drivers/clk/s32/s32gen1_clk.c b/drivers/clk/s32/s32gen1_clk.c
index 13f00c0531..4f0e79857c 100644
--- a/drivers/clk/s32/s32gen1_clk.c
+++ b/drivers/clk/s32/s32gen1_clk.c
@@ -328,87 +328,17 @@ static struct s32gen1_fixed_div linflexd_div =
 static struct s32gen1_clk linflexd_clk =
 		S32GEN1_FREQ_MODULE_CLK(linflexd_div, 0, 66666666);
 
-/* GMAC_TS_CLK */
-static struct s32gen1_fixed_clock gmac_ext_ts =
-		S32GEN1_FIXED_CLK_INIT();
-static struct s32gen1_clk gmac_ext_ts_clk =
-		S32GEN1_MODULE_CLK(gmac_ext_ts);
-static struct s32gen1_mux cgm0_mux9 =
-		S32GEN1_MUX_INIT(S32GEN1_CGM0, 9, 3,
-				 S32GEN1_CLK_FIRC,
-				 S32GEN1_CLK_PERIPH_PLL_PHI4,
-				 S32GEN1_CLK_GMAC0_EXT_TS);
-static struct s32gen1_clk cgm0_mux9_clk =
-		S32GEN1_MODULE_CLK(cgm0_mux9);
-static struct s32gen1_cgm_div gmac_ts_div =
-		S32GEN1_CGM_DIV_INIT(cgm0_mux9_clk, 0);
-static struct s32gen1_clk gmac_ts_clk =
-		S32GEN1_FREQ_MODULE_CLK(gmac_ts_div, 5 * MHZ, 200 * MHZ);
-
-/* GMAC0_TX_CLK */
-static struct s32gen1_fixed_clock gmac0_ext_tx =
-		S32GEN1_FIXED_CLK_INIT();
-static struct s32gen1_clk gmac0_ext_tx_clk =
-		S32GEN1_MODULE_CLK(gmac0_ext_tx);
-
-static struct s32gen1_fixed_clock gmac0_ext_ref =
-		S32GEN1_FIXED_CLK_INIT();
-static struct s32gen1_clk gmac0_ext_ref_clk =
-		S32GEN1_MODULE_CLK(gmac0_ext_ref);
-
+/* S32GEN1_CLK_SERDES0_LANE0_TX */
 static struct s32gen1_fixed_clock serdes0_lane0_tx =
 		S32GEN1_FIXED_CLK_INIT();
 static struct s32gen1_clk serdes0_lane0_tx_clk =
 		S32GEN1_MODULE_CLK(serdes0_lane0_tx);
 
-static struct s32gen1_mux cgm0_mux10 =
-		S32GEN1_MUX_INIT(S32GEN1_CGM0, 10, 5,
-				 S32GEN1_CLK_FIRC,
-				 S32GEN1_CLK_PERIPH_PLL_PHI5,
-				 S32GEN1_CLK_SERDES0_LANE0_TX,
-				 S32GEN1_CLK_GMAC0_EXT_TX,
-				 S32GEN1_CLK_GMAC0_EXT_REF);
-static struct s32gen1_clk cgm0_mux10_clk =
-		S32GEN1_MODULE_CLK(cgm0_mux10);
-static struct s32gen1_cgm_div gmac_tx_div =
-		S32GEN1_CGM_DIV_INIT(cgm0_mux10_clk, 0);
-static struct s32gen1_clk gmac_tx_clk =
-		S32GEN1_FREQ_MODULE_CLK(gmac_tx_div, 2500000, 125 * MHZ);
-
-/* GMAC0_RX_CLK */
 static struct s32gen1_fixed_clock serdes0_lane0_cdr =
 		S32GEN1_FIXED_CLK_INIT();
 static struct s32gen1_clk serdes0_lane0_cdr_clk =
 		S32GEN1_MODULE_CLK(serdes0_lane0_cdr);
 
-static struct s32gen1_fixed_clock gmac0_ext_rx =
-		S32GEN1_FIXED_CLK_INIT();
-static struct s32gen1_clk gmac0_ext_rx_clk =
-		S32GEN1_MODULE_CLK(gmac0_ext_rx);
-
-static struct s32gen1_mux cgm0_mux11 =
-		S32GEN1_MUX_INIT(S32GEN1_CGM0, 11, 4,
-				 S32GEN1_CLK_FIRC,
-				 S32GEN1_CLK_GMAC0_REF_DIV,
-				 S32GEN1_CLK_GMAC0_EXT_RX,
-				 S32GEN1_CLK_SERDES0_LANE0_CDR);
-static struct s32gen1_clk cgm0_mux11_clk =
-		S32GEN1_MODULE_CLK(cgm0_mux11);
-static struct s32gen1_clk gmac_rx_clk =
-		S32GEN1_CHILD_CLK(cgm0_mux11_clk, 2500000, 125 * MHZ);
-
-/* GMAC0_REF_DIV_CLK */
-static struct s32gen1_mux cgm0_mux15 =
-		S32GEN1_SHARED_MUX_INIT(S32GEN1_CGM0, 15, 2,
-					S32GEN1_CLK_FIRC,
-					S32GEN1_CLK_GMAC0_EXT_REF);
-static struct s32gen1_clk cgm0_mux15_clk =
-		S32GEN1_MODULE_CLK(cgm0_mux15);
-static struct s32gen1_clk gmac0_ref_div_clk =
-		S32GEN1_CHILD_CLK(cgm0_mux15_clk, 0, 50 * MHZ);
-static struct s32gen1_clk gmac0_ref_clk =
-		S32GEN1_CHILD_CLK(cgm0_mux15_clk, 0, 50 * MHZ);
-
 /* SPI_CLK */
 static struct s32gen1_mux cgm0_mux16 =
 		S32GEN1_MUX_INIT(S32GEN1_CGM0, 16, 2,
@@ -597,21 +527,8 @@ static struct s32gen1_clk *plat_clocks[] = {
 	[CC_ARR_CLK(S32GEN1_CLK_MC_CGM0_MUX8)] = &cgm0_mux8_clk,
 	[CC_ARR_CLK(S32GEN1_CLK_LIN_BAUD)] = &lin_baud_clk,
 	[CC_ARR_CLK(S32GEN1_CLK_LINFLEXD)] = &linflexd_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_MC_CGM0_MUX10)] = &cgm0_mux10_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_TX)] = &gmac_tx_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_EXT_TS)] = &gmac_ext_ts_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_MC_CGM0_MUX9)] = &cgm0_mux9_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_TS)] = &gmac_ts_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_EXT_TX)] = &gmac0_ext_tx_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_EXT_REF)] = &gmac0_ext_ref_clk,
 	[CC_ARR_CLK(S32GEN1_CLK_SERDES0_LANE0_CDR)] = &serdes0_lane0_cdr_clk,
 	[CC_ARR_CLK(S32GEN1_CLK_SERDES0_LANE0_TX)] = &serdes0_lane0_tx_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_EXT_RX)] = &gmac0_ext_rx_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_MC_CGM0_MUX11)] = &cgm0_mux11_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_RX)] = &gmac_rx_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_MC_CGM0_MUX15)] = &cgm0_mux15_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_REF_DIV)] = &gmac0_ref_div_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_REF)] = &gmac0_ref_clk,
 	[CC_ARR_CLK(S32GEN1_CLK_MC_CGM0_MUX16)] = &cgm0_mux16_clk,
 	[CC_ARR_CLK(S32GEN1_CLK_SPI)] = &spi_clk,
 	[CC_ARR_CLK(S32GEN1_CLK_MC_CGM0_MUX12)] = &cgm0_mux12_clk,
diff --git a/drivers/clk/s32/s32gen1_scmi_ids.c b/drivers/clk/s32/s32gen1_scmi_ids.c
index fce1ce5083..93ea5eb251 100644
--- a/drivers/clk/s32/s32gen1_scmi_ids.c
+++ b/drivers/clk/s32/s32gen1_scmi_ids.c
@@ -2,6 +2,7 @@
 /*
  * Copyright 2020-2021 NXP
  */
+#include <dt-bindings/clock/s32g-clock.h>
 #include <dt-bindings/clock/s32gen1-clock.h>
 #include <dt-bindings/clock/s32gen1-scmi-clock.h>
 #include <errno.h>
@@ -114,7 +115,7 @@ int cc_set_mux_parent(struct clk *clk, u32 mux_id, u32 mux_source)
 
 static int set_gmac_rx_parent(struct clk *clk)
 {
-	u32 rx_id;
+	u32 rx_id, parent_id;
 	u32 clk_id = clk->id;
 
 	if (clk_id == S32GEN1_SCMI_CLK_GMAC0_RX_SGMII) {
@@ -126,12 +127,15 @@ static int set_gmac_rx_parent(struct clk *clk)
 		return -EINVAL;
 	}
 
-	return cc_set_mux_parent(clk, S32GEN1_CLK_MC_CGM0_MUX11, rx_id);
+	if (cc_compound_clk_get_pid(clk_id, &parent_id))
+		return -EINVAL;
+
+	return cc_set_mux_parent(clk, parent_id, rx_id);
 }
 
 static int set_gmac_tx_parent(struct clk *clk)
 {
-	u32 tx_id;
+	u32 tx_id, parent_id;
 	u32 clk_id = clk->id;
 
 	if (clk_id == S32GEN1_SCMI_CLK_GMAC0_TX_RGMII) {
@@ -143,12 +147,15 @@ static int set_gmac_tx_parent(struct clk *clk)
 		return -EINVAL;
 	}
 
-	return cc_set_mux_parent(clk, S32GEN1_CLK_MC_CGM0_MUX10, tx_id);
+	if (cc_compound_clk_get_pid(clk_id, &parent_id))
+		return -EINVAL;
+
+	return cc_set_mux_parent(clk, parent_id, tx_id);
 }
 
 static int set_gmac_ts_parent(struct clk *clk)
 {
-	u32 ts_id;
+	u32 ts_id, parent_id;
 	u32 clk_id = clk->id;
 
 	if (clk_id == S32GEN1_SCMI_CLK_GMAC0_TS_RGMII ||
@@ -159,7 +166,10 @@ static int set_gmac_ts_parent(struct clk *clk)
 		return -EINVAL;
 	}
 
-	return cc_set_mux_parent(clk, S32GEN1_CLK_MC_CGM0_MUX9, ts_id);
+	if (cc_compound_clk_get_pid(clk_id, &parent_id))
+		return -EINVAL;
+
+	return cc_set_mux_parent(clk, parent_id, ts_id);
 }
 
 static int cc_compound_clk_set_parents(struct clk *clk)
diff --git a/drivers/clk/s32/s32r45_clk.c b/drivers/clk/s32/s32r45_clk.c
index c027493712..1f0547fa7c 100644
--- a/drivers/clk/s32/s32r45_clk.c
+++ b/drivers/clk/s32/s32r45_clk.c
@@ -91,6 +91,77 @@ static struct s32gen1_part_block lax1_block =
 static struct s32gen1_clk accel4_clk =
 		S32GEN1_FREQ_MODULE_CLK(lax1_block, 0, 400 * MHZ);
 
+/* GMAC_TS_CLK */
+static struct s32gen1_fixed_clock gmac_ext_ts =
+		S32GEN1_FIXED_CLK_INIT();
+static struct s32gen1_clk gmac_ext_ts_clk =
+		S32GEN1_MODULE_CLK(gmac_ext_ts);
+static struct s32gen1_mux cgm0_mux9 =
+		S32GEN1_MUX_INIT(S32GEN1_CGM0, 9, 3,
+				 S32GEN1_CLK_FIRC,
+				 S32GEN1_CLK_PERIPH_PLL_PHI4,
+				 S32GEN1_CLK_GMAC0_EXT_TS);
+static struct s32gen1_clk cgm0_mux9_clk =
+		S32GEN1_MODULE_CLK(cgm0_mux9);
+static struct s32gen1_cgm_div gmac_ts_div =
+		S32GEN1_CGM_DIV_INIT(cgm0_mux9_clk, 0);
+static struct s32gen1_clk gmac_ts_clk =
+		S32GEN1_FREQ_MODULE_CLK(gmac_ts_div, 5 * MHZ, 200 * MHZ);
+
+/* GMAC0_TX_CLK */
+static struct s32gen1_fixed_clock gmac0_ext_tx =
+		S32GEN1_FIXED_CLK_INIT();
+static struct s32gen1_clk gmac0_ext_tx_clk =
+		S32GEN1_MODULE_CLK(gmac0_ext_tx);
+
+static struct s32gen1_fixed_clock gmac0_ext_ref =
+		S32GEN1_FIXED_CLK_INIT();
+static struct s32gen1_clk gmac0_ext_ref_clk =
+		S32GEN1_MODULE_CLK(gmac0_ext_ref);
+
+static struct s32gen1_mux cgm0_mux10 =
+		S32GEN1_MUX_INIT(S32GEN1_CGM0, 10, 5,
+				 S32GEN1_CLK_FIRC,
+				 S32GEN1_CLK_PERIPH_PLL_PHI5,
+				 S32GEN1_CLK_SERDES0_LANE0_TX,
+				 S32GEN1_CLK_GMAC0_EXT_TX,
+				 S32GEN1_CLK_GMAC0_EXT_REF);
+static struct s32gen1_clk cgm0_mux10_clk =
+		S32GEN1_MODULE_CLK(cgm0_mux10);
+static struct s32gen1_cgm_div gmac_tx_div =
+		S32GEN1_CGM_DIV_INIT(cgm0_mux10_clk, 0);
+static struct s32gen1_clk gmac_tx_clk =
+		S32GEN1_FREQ_MODULE_CLK(gmac_tx_div, 2500000, 125 * MHZ);
+
+/* GMAC0_RX_CLK */
+static struct s32gen1_fixed_clock gmac0_ext_rx =
+		S32GEN1_FIXED_CLK_INIT();
+static struct s32gen1_clk gmac0_ext_rx_clk =
+		S32GEN1_MODULE_CLK(gmac0_ext_rx);
+
+static struct s32gen1_mux cgm0_mux11 =
+		S32GEN1_MUX_INIT(S32GEN1_CGM0, 11, 4,
+				 S32GEN1_CLK_FIRC,
+				 S32GEN1_CLK_GMAC0_REF_DIV,
+				 S32GEN1_CLK_GMAC0_EXT_RX,
+				 S32GEN1_CLK_SERDES0_LANE0_CDR);
+static struct s32gen1_clk cgm0_mux11_clk =
+		S32GEN1_MODULE_CLK(cgm0_mux11);
+static struct s32gen1_clk gmac_rx_clk =
+		S32GEN1_CHILD_CLK(cgm0_mux11_clk, 2500000, 125 * MHZ);
+
+/* GMAC0_REF_DIV_CLK */
+static struct s32gen1_mux cgm0_mux15 =
+		S32GEN1_SHARED_MUX_INIT(S32GEN1_CGM0, 15, 2,
+					S32GEN1_CLK_FIRC,
+					S32GEN1_CLK_GMAC0_EXT_REF);
+static struct s32gen1_clk cgm0_mux15_clk =
+		S32GEN1_MODULE_CLK(cgm0_mux15);
+static struct s32gen1_clk gmac0_ref_div_clk =
+		S32GEN1_CHILD_CLK(cgm0_mux15_clk, 0, 50 * MHZ);
+static struct s32gen1_clk gmac0_ref_clk =
+		S32GEN1_CHILD_CLK(cgm0_mux15_clk, 0, 50 * MHZ);
+
 /* GMAC1_EXT_TX_CLK */
 static struct s32gen1_fixed_clock gmac1_ext_tx =
 		S32GEN1_FIXED_CLK_INIT();
@@ -160,6 +231,19 @@ static struct s32gen1_clk *s32r45_cc_clocks[] = {
 	[CC_ARR_CLK(S32R45_CLK_SERDES1_LANE1_TX)] = &serdes1_lane1_tx_clk,
 	[CC_ARR_CLK(S32R45_CLK_SERDES1_LANE1_CDR)] = &serdes1_lane1_cdr_clk,
 	[CC_ARR_CLK(S32R45_CLK_GMAC1_REF_DIV)] = &gmac1_ref_div_clk,
+	[CC_ARR_CLK(S32GEN1_CLK_MC_CGM0_MUX10)] = &cgm0_mux10_clk,
+	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_TX)] = &gmac_tx_clk,
+	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_EXT_TS)] = &gmac_ext_ts_clk,
+	[CC_ARR_CLK(S32GEN1_CLK_MC_CGM0_MUX9)] = &cgm0_mux9_clk,
+	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_TS)] = &gmac_ts_clk,
+	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_EXT_TX)] = &gmac0_ext_tx_clk,
+	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_EXT_REF)] = &gmac0_ext_ref_clk,
+	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_EXT_RX)] = &gmac0_ext_rx_clk,
+	[CC_ARR_CLK(S32GEN1_CLK_MC_CGM0_MUX11)] = &cgm0_mux11_clk,
+	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_RX)] = &gmac_rx_clk,
+	[CC_ARR_CLK(S32GEN1_CLK_MC_CGM0_MUX15)] = &cgm0_mux15_clk,
+	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_REF_DIV)] = &gmac0_ref_div_clk,
+	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_REF)] = &gmac0_ref_clk,
 };
 
 static struct s32gen1_clk *s32r45_clocks[] = {
@@ -217,3 +301,28 @@ ulong s32gen1_plat_set_rate(struct clk *c, ulong rate)
 
 	return s32gen1_scmi_set_rate(c, rate);
 }
+
+int cc_compound_clk_get_pid(u32 id, u32 *parent_id)
+{
+	if (!parent_id)
+		return -EINVAL;
+
+	switch (id) {
+	case S32GEN1_SCMI_CLK_GMAC0_RX_SGMII:
+	case S32GEN1_SCMI_CLK_GMAC0_RX_RGMII:
+		*parent_id = S32GEN1_CLK_MC_CGM0_MUX11;
+		break;
+	case S32GEN1_SCMI_CLK_GMAC0_TX_RGMII:
+	case S32GEN1_SCMI_CLK_GMAC0_TX_SGMII:
+		*parent_id = S32GEN1_CLK_MC_CGM0_MUX10;
+		break;
+	case S32GEN1_SCMI_CLK_GMAC0_TS_RGMII:
+	case S32GEN1_SCMI_CLK_GMAC0_TS_SGMII:
+		*parent_id = S32GEN1_CLK_MC_CGM0_MUX9;
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	return 0;
+}
diff --git a/include/dt-bindings/clock/s32g-clock.h b/include/dt-bindings/clock/s32g-clock.h
index d9309b0d45..80635a044c 100644
--- a/include/dt-bindings/clock/s32g-clock.h
+++ b/include/dt-bindings/clock/s32g-clock.h
@@ -35,6 +35,8 @@
 
 #define S32G_CLK(N)			S32GEN1_PLAT_CLK(N)
 #define S32G_CLK_INDEX(N)		S32GEN1_PLAT_ARRAY_INDEX(N)
+#define ARR_CLK(N)			S32G_CLK_INDEX(N)
+
 
 /* PFE_MAC0 */
 #define S32G_CLK_PFE_MAC0_TX_DIV	S32G_CLK(0)
-- 
2.25.1

