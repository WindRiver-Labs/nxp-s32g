From 40ef30e1beac4ae4d13057b560d75d257b24c2bb Mon Sep 17 00:00:00 2001
From: Radu Pirea <radu-nicolae.pirea@nxp.com>
Date: Thu, 11 Feb 2021 12:09:17 +0200
Subject: [PATCH 02/42] boards: campp: add rev b board support

Add s32v234campp_revb_defconfig and lpddr2 memory config for camera card
rev b.

Upstream-Status: Pending

Issue: ALB-6474

Signed-off-by: Radu Pirea <radu-nicolae.pirea@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 arch/arm/cpu/armv8/Kconfig                    |   1 +
 arch/arm/cpu/armv8/s32/Kconfig                |  14 +-
 arch/arm/mach-s32/Kconfig                     |   3 +-
 board/freescale/campps32v2/Kconfig            |   2 +-
 board/freescale/campps32v2/Makefile           |   7 +-
 .../freescale/campps32v2/lpddr2_config_revb.c | 164 ++++++++++++++++++
 configs/s32v234campp_revb_defconfig           |  34 ++++
 include/configs/s32v234_common.h              |   5 +-
 8 files changed, 222 insertions(+), 8 deletions(-)
 create mode 100644 board/freescale/campps32v2/lpddr2_config_revb.c
 create mode 100644 configs/s32v234campp_revb_defconfig

diff --git a/arch/arm/cpu/armv8/Kconfig b/arch/arm/cpu/armv8/Kconfig
index aa00a05749..d9658528e4 100644
--- a/arch/arm/cpu/armv8/Kconfig
+++ b/arch/arm/cpu/armv8/Kconfig
@@ -115,6 +115,7 @@ config PSCI_RESET
 		   !TARGET_S32V234PCIE && \
 		   !TARGET_S32V234CCPB && \
 		   !TARGET_CAMPPS32V2 && \
+		   !TARGET_CAMPPS32V2_REVB && \
 		   !TARGET_S32G274AEVB && \
 		   !TARGET_S32G274ARDB && \
 		   !TARGET_S32R45EVB && \
diff --git a/arch/arm/cpu/armv8/s32/Kconfig b/arch/arm/cpu/armv8/s32/Kconfig
index f1d098ff71..b8ea0a0bd5 100644
--- a/arch/arm/cpu/armv8/s32/Kconfig
+++ b/arch/arm/cpu/armv8/s32/Kconfig
@@ -51,11 +51,19 @@ config TARGET_MPXS32V234
 	select S32V2
 
 config TARGET_CAMPPS32V2
-	bool "Support campps32v2"
+	bool "Support Camera card"
 	select S32V2
 	help
-	  Enable Camera card V2 target.
-	  Camera card V2 is a developemnt board with 6x S32V.
+	  Enable Camera card target.
+	  Camera card is a development board with 6x S32V.
+	  This config always will target the latest revision of the board.
+
+config TARGET_CAMPPS32V2_REVB
+	bool "Support Camera card rev B"
+	select S32V2
+	help
+	  Enable Camera card Rev B target.
+	  Camera card is a development board with 6x S32V.
 
 config TARGET_S32R45EVB
 	bool "Support s32r45evb"
diff --git a/arch/arm/mach-s32/Kconfig b/arch/arm/mach-s32/Kconfig
index 850565124c..830ed1de6d 100644
--- a/arch/arm/mach-s32/Kconfig
+++ b/arch/arm/mach-s32/Kconfig
@@ -4,6 +4,7 @@
 config MKIMAGE_T
 	string
 	default "s32v234image" if TARGET_S32V234EVB || TARGET_S32V234PCIE || \
-		TARGET_MPXS32V234 || TARGET_S32V234CCPB || TARGET_CAMPPS32V2
+		TARGET_MPXS32V234 || TARGET_S32V234CCPB || \
+		TARGET_CAMPPS32V2 || TARGET_CAMPPS32V2_REVB
 	default "s32gen1image" if S32_GEN1
 	depends on ARCH_S32
diff --git a/board/freescale/campps32v2/Kconfig b/board/freescale/campps32v2/Kconfig
index f2f19e03b4..20ba6f809a 100644
--- a/board/freescale/campps32v2/Kconfig
+++ b/board/freescale/campps32v2/Kconfig
@@ -1,4 +1,4 @@
-if TARGET_CAMPPS32V2
+if TARGET_CAMPPS32V2 || TARGET_CAMPPS32V2_REVB
 
 config SYS_BOARD
 	string
diff --git a/board/freescale/campps32v2/Makefile b/board/freescale/campps32v2/Makefile
index 8b6cde2c96..0ce8cf250e 100644
--- a/board/freescale/campps32v2/Makefile
+++ b/board/freescale/campps32v2/Makefile
@@ -4,7 +4,12 @@
 #
 
 obj-y := campps32v2.o
-obj-$(CONFIG_S32_LPDDR2) += lpddr2_config.o
+
+ifdef CONFIG_S32_LPDDR2
+obj-$(CONFIG_TARGET_CAMPPS32V2) += lpddr2_config.o
+obj-$(CONFIG_TARGET_CAMPPS32V2_REVB) += lpddr2_config_revb.o
+endif
+
 obj-$(CONFIG_SJA1105) += sja1105_cfg.o
 
 #########################################################################
diff --git a/board/freescale/campps32v2/lpddr2_config_revb.c b/board/freescale/campps32v2/lpddr2_config_revb.c
new file mode 100644
index 0000000000..10bcf4125a
--- /dev/null
+++ b/board/freescale/campps32v2/lpddr2_config_revb.c
@@ -0,0 +1,164 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Copyright 2021 NXP
+ */
+
+#include <common.h>
+#include <asm/arch/lpddr2.h>
+#include <campps32v2.h>
+
+// The magic values used below are generated using a DDR Tool
+
+static const struct lpddr2_config campps32v2_lpddr2_config_1 = {
+	.mdasp_module0 = 0x0000004F,
+	.mdasp_module1 = 0x0000006F,
+	.mdcfg0 = 0x33374133,
+	.mdcfg1 = 0xDAF00A82,
+	.mdcfg2 = 0x00000093,
+	.mdcfg3lp = 0x00170777,
+	.mdctl = 0x03110000,
+	.mdmisc = 0x00001688,
+	.mdscr_mr2 = 0x04028030,
+	.mdscr_mr3 = 0x01038030,
+	.mprddlctl_module0 = 0x44444242,
+	.mprddlctl_module1 = 0x44484440,
+	.mpwrdlctl_module0 = 0x44444044,
+	.mpwrdlctl_module1 = 0x3E3C3A3E,
+	.mpdgctrl0_module0 = 0x20000000,
+	.mpdgctrl1_module0 = 0x00000000,
+	.mpdgctrl0_module1 = 0x20000000,
+	.mpdgctrl1_module1 = 0x00000000,
+	.frequency = 400,
+};
+
+static const struct lpddr2_config campps32v2_lpddr2_config_2 = {
+	.mdasp_module0 = 0x0000004F,
+	.mdasp_module1 = 0x0000006F,
+	.mdcfg0 = 0x33374133,
+	.mdcfg1 = 0xDAF00A82,
+	.mdcfg2 = 0x00000093,
+	.mdcfg3lp = 0x00170777,
+	.mdctl = 0x03110000,
+	.mdmisc = 0x00001688,
+	.mdscr_mr2 = 0x04028030,
+	.mdscr_mr3 = 0x01038030,
+	.mprddlctl_module0 = 0x46464040,
+	.mprddlctl_module1 = 0x46484042,
+	.mpwrdlctl_module0 = 0x44444442,
+	.mpwrdlctl_module1 = 0x423E3E3C,
+	.mpdgctrl0_module0 = 0x20000000,
+	.mpdgctrl1_module0 = 0x00000000,
+	.mpdgctrl0_module1 = 0x20000000,
+	.mpdgctrl1_module1 = 0x00000000,
+	.frequency = 400,
+};
+
+static const struct lpddr2_config campps32v2_lpddr2_config_3 = {
+	.mdasp_module0 = 0x0000004F,
+	.mdasp_module1 = 0x0000006F,
+	.mdcfg0 = 0x33374133,
+	.mdcfg1 = 0xDAF00A82,
+	.mdcfg2 = 0x00000093,
+	.mdcfg3lp = 0x00170777,
+	.mdctl = 0x03110000,
+	.mdmisc = 0x00001688,
+	.mdscr_mr2 = 0x04028030,
+	.mdscr_mr3 = 0x01038030,
+	.mprddlctl_module0 = 0x42444042,
+	.mprddlctl_module1 = 0x42464644,
+	.mpwrdlctl_module0 = 0x44444444,
+	.mpwrdlctl_module1 = 0x4040403E,
+	.mpdgctrl0_module0 = 0x20000000,
+	.mpdgctrl1_module0 = 0x00000000,
+	.mpdgctrl0_module1 = 0x20000000,
+	.mpdgctrl1_module1 = 0x00000000,
+	.frequency = 400,
+};
+
+static const struct lpddr2_config campps32v2_lpddr2_config_4 = {
+	.mdasp_module0 = 0x0000004F,
+	.mdasp_module1 = 0x0000006F,
+	.mdcfg0 = 0x33374133,
+	.mdcfg1 = 0xDAF00A82,
+	.mdcfg2 = 0x00000093,
+	.mdcfg3lp = 0x00170777,
+	.mdctl = 0x03110000,
+	.mdmisc = 0x00001688,
+	.mdscr_mr2 = 0x04028030,
+	.mdscr_mr3 = 0x01038030,
+	.mprddlctl_module0 = 0x44463E42,
+	.mprddlctl_module1 = 0x40444442,
+	.mpwrdlctl_module0 = 0x42444244,
+	.mpwrdlctl_module1 = 0x403E3E3C,
+	.mpdgctrl0_module0 = 0x20000000,
+	.mpdgctrl1_module0 = 0x00000000,
+	.mpdgctrl0_module1 = 0x20000000,
+	.mpdgctrl1_module1 = 0x00000000,
+	.frequency = 400,
+};
+
+static const struct lpddr2_config campps32v2_lpddr2_config_5 = {
+	.mdasp_module0 = 0x0000004F,
+	.mdasp_module1 = 0x0000006F,
+	.mdcfg0 = 0x33374133,
+	.mdcfg1 = 0xDAF00A82,
+	.mdcfg2 = 0x00000093,
+	.mdcfg3lp = 0x00170777,
+	.mdctl = 0x03110000,
+	.mdmisc = 0x00001688,
+	.mdscr_mr2 = 0x04028030,
+	.mdscr_mr3 = 0x01038030,
+	.mprddlctl_module0 = 0x42443C42,
+	.mprddlctl_module1 = 0x44444040,
+	.mpwrdlctl_module0 = 0x42444240,
+	.mpwrdlctl_module1 = 0x3E3E3E3C,
+	.mpdgctrl0_module0 = 0x20000000,
+	.mpdgctrl1_module0 = 0x00000000,
+	.mpdgctrl0_module1 = 0x20000000,
+	.mpdgctrl1_module1 = 0x00000000,
+	.frequency = 400,
+};
+
+static const struct lpddr2_config campps32v2_lpddr2_config_6 = {
+	.mdasp_module0 = 0x0000004F,
+	.mdasp_module1 = 0x0000006F,
+	.mdcfg0 = 0x33374133,
+	.mdcfg1 = 0xDAF00A82,
+	.mdcfg2 = 0x00000093,
+	.mdcfg3lp = 0x00170777,
+	.mdctl = 0x03110000,
+	.mdmisc = 0x00001688,
+	.mdscr_mr2 = 0x04028030,
+	.mdscr_mr3 = 0x01038030,
+	.mprddlctl_module0 = 0x44443E44,
+	.mprddlctl_module1 = 0x46484040,
+	.mpwrdlctl_module0 = 0x46424240,
+	.mpwrdlctl_module1 = 0x3C3C3E3C,
+	.mpdgctrl0_module0 = 0x20000000,
+	.mpdgctrl1_module0 = 0x00000000,
+	.mpdgctrl0_module1 = 0x20000000,
+	.mpdgctrl1_module1 = 0x00000000,
+	.frequency = 400,
+};
+
+const struct lpddr2_config *s32_get_lpddr2_config(void)
+{
+	switch (campps32v2_get_device_id()) {
+	case 1:
+		return &campps32v2_lpddr2_config_1;
+	case 2:
+		return &campps32v2_lpddr2_config_2;
+	case 3:
+		return &campps32v2_lpddr2_config_3;
+	case 4:
+		return &campps32v2_lpddr2_config_4;
+	case 5:
+		return &campps32v2_lpddr2_config_5;
+	case 6:
+		return &campps32v2_lpddr2_config_6;
+	default:
+		pr_err("DDR: config not fund\nInvalid SoC ID: %d",
+		       campps32v2_get_device_id());
+		return NULL;
+	}
+}
diff --git a/configs/s32v234campp_revb_defconfig b/configs/s32v234campp_revb_defconfig
new file mode 100644
index 0000000000..bc2c677b6e
--- /dev/null
+++ b/configs/s32v234campp_revb_defconfig
@@ -0,0 +1,34 @@
+CONFIG_ARM=y
+CONFIG_ARCH_S32=y
+CONFIG_ENV_SIZE=0x2000
+CONFIG_ENV_OFFSET=0x100000
+CONFIG_NR_DRAM_BANKS=3
+CONFIG_TARGET_CAMPPS32V2_REVB=y
+CONFIG_DISTRO_DEFAULTS=y
+# CONFIG_SYS_MALLOC_F is not set
+CONFIG_SD_BOOT=y
+CONFIG_BOOTDELAY=3
+CONFIG_USE_BOOTARGS=y
+CONFIG_BOARD_LATE_INIT=y
+CONFIG_ARCH_EARLY_INIT_R=y
+CONFIG_BOARD_EARLY_INIT_F=y
+CONFIG_CMD_MEMTEST=y
+CONFIG_CMD_I2C=y
+CONFIG_CMD_MMC=y
+CONFIG_CMD_PCI=y
+CONFIG_CMD_SPI=y
+CONFIG_ENV_IS_IN_MMC=y
+CONFIG_DM=y
+CONFIG_FSL_CSE3=y
+CONFIG_FSL_USDHC=y
+CONFIG_PHYLIB=y
+CONFIG_PHY_MICREL=y
+CONFIG_PHY_MICREL_KSZ90X1=y
+CONFIG_FEC_MXC=y
+CONFIG_RGMII=y
+CONFIG_MII=y
+CONFIG_FSL_LINFLEXUART=y
+CONFIG_SPI=y
+CONFIG_FSL_DSPI=y
+CONFIG_SJA1105=y
+CONFIG_OF_LIBFDT=y
diff --git a/include/configs/s32v234_common.h b/include/configs/s32v234_common.h
index 11bd889031..961086599e 100644
--- a/include/configs/s32v234_common.h
+++ b/include/configs/s32v234_common.h
@@ -1,7 +1,7 @@
 /* SPDX-License-Identifier: GPL-2.0+ */
 /*
  * (C) Copyright 2015-2016 Freescale Semiconductor, Inc.
- * Copyright 2016-2020 NXP
+ * Copyright 2016-2021 NXP
  */
 
 /*
@@ -42,7 +42,8 @@
 /* Flash related definitions */
 #define CONFIG_S32V234_USES_FLASH
 
-#if !defined(CONFIG_TARGET_CAMPPS32V2)
+#if !defined(CONFIG_TARGET_CAMPPS32V2) || \
+	!defined(CONFIG_TARGET_CAMPPS32V2_REVB)
 /* Enable DCU QoS fix */
 #define CONFIG_DCU_QOS_FIX
 #endif
-- 
2.25.1

