From caee9656d0dda574ca8bf09bd8baa9fecfb3341e Mon Sep 17 00:00:00 2001
From: Larisa Grigore <larisa.grigore@nxp.com>
Date: Mon, 29 Mar 2021 16:49:10 +0300
Subject: [PATCH 20/42] s32g3: clk: Add support MC_CGM6

Upstream-Status: Pending

Issue: ALB-6496
Signed-off-by: Larisa Grigore <larisa.grigore@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 drivers/clk/s32/clk_dump/Makefile             |  2 +-
 .../clk/s32/clk_dump/include/s32g_clk_dump.h  | 12 +++++++++
 drivers/clk/s32/clk_dump/s32g398a_clk_names.c | 26 +++++++++++++++++++
 drivers/clk/s32/clk_dump/s32g_clk_names.c     |  9 ++++++-
 drivers/clk/s32/enable_clk.c                  |  1 +
 drivers/clk/s32/include/s32gen1_clk_modules.h |  4 ++-
 drivers/clk/s32/s32gen1_clk_drv.c             | 24 ++++++++++-------
 7 files changed, 66 insertions(+), 12 deletions(-)
 create mode 100644 drivers/clk/s32/clk_dump/include/s32g_clk_dump.h
 create mode 100644 drivers/clk/s32/clk_dump/s32g398a_clk_names.c

diff --git a/drivers/clk/s32/clk_dump/Makefile b/drivers/clk/s32/clk_dump/Makefile
index 92bd4878f5..48edeb4637 100644
--- a/drivers/clk/s32/clk_dump/Makefile
+++ b/drivers/clk/s32/clk_dump/Makefile
@@ -6,7 +6,7 @@
 obj-y += clk_dump.o
 obj-y += s32gen1_clk_names.o
 obj-$(CONFIG_NXP_S32G2XX) += s32g_clk_names.o
-obj-$(CONFIG_NXP_S32G3XX) += s32g_clk_names.o
+obj-$(CONFIG_NXP_S32G3XX) += s32g_clk_names.o s32g398a_clk_names.o
 obj-$(CONFIG_NXP_S32R45) += s32r45_clk_names.o
 
 ccflags-y += -Idrivers/clk/s32/include
diff --git a/drivers/clk/s32/clk_dump/include/s32g_clk_dump.h b/drivers/clk/s32/clk_dump/include/s32g_clk_dump.h
new file mode 100644
index 0000000000..f03727ab3e
--- /dev/null
+++ b/drivers/clk/s32/clk_dump/include/s32g_clk_dump.h
@@ -0,0 +1,12 @@
+/* SPDX-License-Identifier: BSD-3-Clause */
+/*
+ * Copyright 2021 NXP
+ */
+#ifndef S32G_CLK_DUMP_H
+#define S32G_CLK_DUMP_H
+
+#include <s32gen1_clk_dump.h>
+
+struct s32gen1_clk_blk *s32g_get_plat_clk_blk(u32 id);
+
+#endif
diff --git a/drivers/clk/s32/clk_dump/s32g398a_clk_names.c b/drivers/clk/s32/clk_dump/s32g398a_clk_names.c
new file mode 100644
index 0000000000..2f32aa7d1b
--- /dev/null
+++ b/drivers/clk/s32/clk_dump/s32g398a_clk_names.c
@@ -0,0 +1,26 @@
+// SPDX-License-Identifier: BSD-3-Clause
+/*
+ * Copyright 2021 NXP
+ */
+#include <dt-bindings/clock/s32g-clock.h>
+#include <linux/kernel.h>
+#include <s32g_clk_dump.h>
+
+#define CLK_NAME(ID_DEF)     \
+	S32GEN1_CLK_NAME_INIT(ID_DEF, #ID_DEF)
+
+static struct s32gen1_clk_blk s32g398a_clk_blks[] = {
+	CLK_NAME(S32G_CLK_MC_CGM6_MUX0),
+	CLK_NAME(S32G_CLK_MC_CGM6_MUX1),
+	CLK_NAME(S32G_CLK_MC_CGM6_MUX2),
+	CLK_NAME(S32G_CLK_MC_CGM6_MUX3),
+};
+
+struct s32gen1_clk_blk *s32g_get_plat_clk_blk(u32 id)
+{
+	if (id < ARRAY_SIZE(s32g398a_clk_blks))
+		return &s32g398a_clk_blks[id];
+
+	return NULL;
+}
+
diff --git a/drivers/clk/s32/clk_dump/s32g_clk_names.c b/drivers/clk/s32/clk_dump/s32g_clk_names.c
index e2a70777de..9494751f46 100644
--- a/drivers/clk/s32/clk_dump/s32g_clk_names.c
+++ b/drivers/clk/s32/clk_dump/s32g_clk_names.c
@@ -71,12 +71,19 @@ const char *plat_clk_name(const char *name)
 	return name + s32g_len;
 }
 
+__weak struct s32gen1_clk_blk *s32g_get_plat_clk_blk(u32 id)
+{
+	return NULL;
+}
+
 struct s32gen1_clk_blk *s32gen1_get_plat_clk_blk(u32 id)
 {
 	if (id < ARRAY_SIZE(s32g_clk_blks))
 		return &s32g_clk_blks[id];
 
-	return NULL;
+	id -= ARRAY_SIZE(s32g_clk_blks);
+
+	return s32g_get_plat_clk_blk(id);
 }
 
 const char *s32gen1_get_plat_clock_name(struct s32gen1_clk_blk *clk)
diff --git a/drivers/clk/s32/enable_clk.c b/drivers/clk/s32/enable_clk.c
index ec0f5d38e8..807e4291fa 100644
--- a/drivers/clk/s32/enable_clk.c
+++ b/drivers/clk/s32/enable_clk.c
@@ -287,6 +287,7 @@ static int enable_mux(struct s32gen1_clk_obj *module,
 	case S32GEN1_CGM1:
 	case S32GEN1_CGM2:
 	case S32GEN1_CGM5:
+	case S32GEN1_CGM6:
 		return enable_cgm_mux(mux, priv);
 	default:
 		pr_err("Unknown mux parent type: %d\n", mux->module);
diff --git a/drivers/clk/s32/include/s32gen1_clk_modules.h b/drivers/clk/s32/include/s32gen1_clk_modules.h
index 165558ff3c..49d2141fd0 100644
--- a/drivers/clk/s32/include/s32gen1_clk_modules.h
+++ b/drivers/clk/s32/include/s32gen1_clk_modules.h
@@ -1,6 +1,6 @@
 /* SPDX-License-Identifier: BSD-3-Clause */
 /*
- * Copyright 2020 NXP
+ * Copyright 2020-2021 NXP
  */
 #ifndef S32GEN1_CLK_MODULES_H
 #define S32GEN1_CLK_MODULES_H
@@ -128,6 +128,7 @@ struct s32gen1_clk_priv {
 	void *cgm1;
 	void *cgm2;
 	void *cgm5;
+	void *cgm6;
 	void *ddrpll;
 	void *fxosc;
 	void *mc_me;
@@ -145,6 +146,7 @@ enum s32gen1_clk_source {
 	S32GEN1_CGM1,
 	S32GEN1_CGM2,
 	S32GEN1_CGM5,
+	S32GEN1_CGM6,
 	S32GEN1_DDR_PLL,
 	S32GEN1_FIRC,
 	S32GEN1_FXOSC,
diff --git a/drivers/clk/s32/s32gen1_clk_drv.c b/drivers/clk/s32/s32gen1_clk_drv.c
index 17a8ea05af..f1cc082033 100644
--- a/drivers/clk/s32/s32gen1_clk_drv.c
+++ b/drivers/clk/s32/s32gen1_clk_drv.c
@@ -1,6 +1,6 @@
 // SPDX-License-Identifier: BSD-3-Clause
 /*
- * Copyright 2020 NXP
+ * Copyright 2020-2021 NXP
  */
 #include <asm/arch/mc_cgm_regs.h>
 #include <asm/io.h>
@@ -24,9 +24,13 @@ static int bind_clk_provider(struct udevice *pdev, const char *compatible,
 	ofnode node;
 	int ret;
 
+	*base_addr = NULL;
 	node = ofnode_by_compatible(ofnode_null(), compatible);
-	if (!node.np) {
-		pr_err("Could not find '%s' node\n", compatible);
+	if (!ofnode_valid(node)) {
+		/* Don't print here an error if the node doesn't exist.
+		 * It may be never used.
+		 */
+		pr_debug("Could not find '%s' node\n", compatible);
 		return -EIO;
 	}
 
@@ -69,7 +73,6 @@ static int bind_clk_provider(struct udevice *pdev, const char *compatible,
 
 static int s32gen1_clk_probe(struct udevice *dev)
 {
-	int ret;
 	size_t i;
 	struct s32gen1_clk_priv *priv = dev_get_priv(dev);
 
@@ -109,6 +112,10 @@ static int s32gen1_clk_probe(struct udevice *dev)
 			.base_addr = &priv->cgm5,
 			.compat = "fsl,s32gen1-mc_cgm5",
 		},
+		{
+			.base_addr = &priv->cgm6,
+			.compat = "fsl,s32gen1-mc_cgm6",
+		},
 		{
 			.base_addr = &priv->armpll,
 			.compat = "fsl,s32gen1-armpll",
@@ -135,11 +142,8 @@ static int s32gen1_clk_probe(struct udevice *dev)
 		},
 	};
 
-	for (i = 0; i < ARRAY_SIZE(deps); i++) {
-		ret = bind_clk_provider(dev, deps[i].compat, deps[i].base_addr);
-		if (ret)
-			return ret;
-	}
+	for (i = 0; i < ARRAY_SIZE(deps); i++)
+		bind_clk_provider(dev, deps[i].compat, deps[i].base_addr);
 
 	return 0;
 }
@@ -161,6 +165,8 @@ void *get_base_addr(enum s32gen1_clk_source id, struct s32gen1_clk_priv *priv)
 		return priv->cgm2;
 	case S32GEN1_CGM5:
 		return priv->cgm5;
+	case S32GEN1_CGM6:
+		return priv->cgm6;
 	case S32GEN1_DDR_PLL:
 		return priv->ddrpll;
 	case S32GEN1_FXOSC:
-- 
2.25.1

