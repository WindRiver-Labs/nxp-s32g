From a169ee8ee849a399158ce6aa9aa1dbc38dac1506 Mon Sep 17 00:00:00 2001
From: Larisa Grigore <larisa.grigore@nxp.com>
Date: Mon, 1 Feb 2021 15:08:52 +0200
Subject: [PATCH 19/42] s32g: clk: Use S32G instead of S32G274

Use S32G instead of S32G274 since S32G3 is similar to S32G2.

Upstream-Status: Pending

Issue: ALB-6121
Signed-off-by: Larisa Grigore <larisa.grigore@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 arch/arm/dts/fsl-s32g.dtsi                  | 110 +++++++-------
 drivers/clk/s32/clk_dump/s32g_clk_names.c   |  88 +++++------
 drivers/clk/s32/s32g_clk.c                  | 134 ++++++++---------
 drivers/clk/s32/s32g_scmi_ids.c             | 154 ++++++++++----------
 include/dt-bindings/clock/s32g-clock.h      |  88 +++++------
 include/dt-bindings/clock/s32g-scmi-clock.h |  70 ++++-----
 6 files changed, 322 insertions(+), 322 deletions(-)

diff --git a/arch/arm/dts/fsl-s32g.dtsi b/arch/arm/dts/fsl-s32g.dtsi
index 23a4eaccbc..78927d17b6 100644
--- a/arch/arm/dts/fsl-s32g.dtsi
+++ b/arch/arm/dts/fsl-s32g.dtsi
@@ -43,10 +43,10 @@
 		clocks = <&clks S32GEN1_SCMI_CLK_SERDES_REF>;
 
 		assigned-clocks =
-			<&clks S32G274A_CLK_SERDES1_LANE0_TX>,
-			<&clks S32G274A_CLK_SERDES1_LANE0_CDR>,
-			<&clks S32G274A_CLK_SERDES1_LANE1_TX>,
-			<&clks S32G274A_CLK_SERDES1_LANE1_CDR>;
+			<&clks S32G_CLK_SERDES1_LANE0_TX>,
+			<&clks S32G_CLK_SERDES1_LANE0_CDR>,
+			<&clks S32G_CLK_SERDES1_LANE1_TX>,
+			<&clks S32G_CLK_SERDES1_LANE1_CDR>;
 		assigned-clock-parents =
 			<&serdes1_lane0_ext_tx 0>,
 			<&serdes1_lane0_ext_cdr 0>,
@@ -136,22 +136,22 @@
 	pfe: ethernet@46080000 {
 		compatible = "fsl,s32g274a-pfe";
 		reg = <0x0 0x46000000 0x0 0x1000000>;
-		clocks = <&clks S32G274A_SCMI_CLK_PFE_PE>,
+		clocks = <&clks S32G_SCMI_CLK_PFE_PE>,
 			/* PFE0 */
-			<&clks S32G274A_SCMI_CLK_PFE0_RX_SGMII>,
-			<&clks S32G274A_SCMI_CLK_PFE0_TX_SGMII>,
-			<&clks S32G274A_SCMI_CLK_PFE0_RX_RGMII>,
-			<&clks S32G274A_SCMI_CLK_PFE0_TX_RGMII>,
+			<&clks S32G_SCMI_CLK_PFE0_RX_SGMII>,
+			<&clks S32G_SCMI_CLK_PFE0_TX_SGMII>,
+			<&clks S32G_SCMI_CLK_PFE0_RX_RGMII>,
+			<&clks S32G_SCMI_CLK_PFE0_TX_RGMII>,
 			/* PFE1 */
-			<&clks S32G274A_SCMI_CLK_PFE1_RX_SGMII>,
-			<&clks S32G274A_SCMI_CLK_PFE1_TX_SGMII>,
-			<&clks S32G274A_SCMI_CLK_PFE1_RX_RGMII>,
-			<&clks S32G274A_SCMI_CLK_PFE1_TX_RGMII>,
+			<&clks S32G_SCMI_CLK_PFE1_RX_SGMII>,
+			<&clks S32G_SCMI_CLK_PFE1_TX_SGMII>,
+			<&clks S32G_SCMI_CLK_PFE1_RX_RGMII>,
+			<&clks S32G_SCMI_CLK_PFE1_TX_RGMII>,
 			/* PFE2 */
-			<&clks S32G274A_SCMI_CLK_PFE2_RX_SGMII>,
-			<&clks S32G274A_SCMI_CLK_PFE2_TX_SGMII>,
-			<&clks S32G274A_SCMI_CLK_PFE2_RX_RGMII>,
-			<&clks S32G274A_SCMI_CLK_PFE2_TX_RGMII>;
+			<&clks S32G_SCMI_CLK_PFE2_RX_SGMII>,
+			<&clks S32G_SCMI_CLK_PFE2_TX_SGMII>,
+			<&clks S32G_SCMI_CLK_PFE2_RX_RGMII>,
+			<&clks S32G_SCMI_CLK_PFE2_TX_RGMII>;
 		clock-names = "pe",
 			"mac0_rx_sgmii", "mac0_tx_sgmii",
 			"mac0_rx_rgmii", "mac0_tx_rgmii",
@@ -238,50 +238,50 @@
 		reg = <0x0 0x44018000 0x0 0x3000>;
 
 		assigned-clocks =
-			<&clks S32G274A_CLK_PFE_MAC0_EXT_REF>,
-			<&clks S32G274A_CLK_PFE_MAC1_EXT_REF>,
-			<&clks S32G274A_CLK_PFE_MAC2_EXT_REF>,
-			<&clks S32G274A_CLK_MC_CGM2_MUX0>,
+			<&clks S32G_CLK_PFE_MAC0_EXT_REF>,
+			<&clks S32G_CLK_PFE_MAC1_EXT_REF>,
+			<&clks S32G_CLK_PFE_MAC2_EXT_REF>,
+			<&clks S32G_CLK_MC_CGM2_MUX0>,
 			/* PFE MAC0 */
-			<&clks S32G274A_CLK_MC_CGM2_MUX7>,
-			<&clks S32G274A_CLK_MC_CGM2_MUX4>,
-			<&clks S32G274A_CLK_MC_CGM2_MUX1>,
+			<&clks S32G_CLK_MC_CGM2_MUX7>,
+			<&clks S32G_CLK_MC_CGM2_MUX4>,
+			<&clks S32G_CLK_MC_CGM2_MUX1>,
 			/* PFE MAC1 */
-			<&clks S32G274A_CLK_MC_CGM2_MUX8>,
-			<&clks S32G274A_CLK_MC_CGM2_MUX5>,
-			<&clks S32G274A_CLK_MC_CGM2_MUX2>,
+			<&clks S32G_CLK_MC_CGM2_MUX8>,
+			<&clks S32G_CLK_MC_CGM2_MUX5>,
+			<&clks S32G_CLK_MC_CGM2_MUX2>,
 			/* PFE MAC2 */
-			<&clks S32G274A_CLK_MC_CGM2_MUX9>,
-			<&clks S32G274A_CLK_MC_CGM2_MUX6>,
-			<&clks S32G274A_CLK_MC_CGM2_MUX3>,
-
-			<&clks S32G274A_CLK_PFE_PE>,
-			<&clks S32G274A_CLK_PFE_MAC0_REF_DIV>,
-			<&clks S32G274A_CLK_PFE_MAC0_RX>,
-			<&clks S32G274A_CLK_PFE_MAC0_TX_DIV>,
-			<&clks S32G274A_CLK_PFE_MAC1_REF_DIV>,
-			<&clks S32G274A_CLK_PFE_MAC1_RX>,
-			<&clks S32G274A_CLK_PFE_MAC1_TX>,
-			<&clks S32G274A_CLK_PFE_MAC2_REF_DIV>,
-			<&clks S32G274A_CLK_PFE_MAC2_RX>,
-			<&clks S32G274A_CLK_PFE_MAC2_TX>;
+			<&clks S32G_CLK_MC_CGM2_MUX9>,
+			<&clks S32G_CLK_MC_CGM2_MUX6>,
+			<&clks S32G_CLK_MC_CGM2_MUX3>,
+
+			<&clks S32G_CLK_PFE_PE>,
+			<&clks S32G_CLK_PFE_MAC0_REF_DIV>,
+			<&clks S32G_CLK_PFE_MAC0_RX>,
+			<&clks S32G_CLK_PFE_MAC0_TX_DIV>,
+			<&clks S32G_CLK_PFE_MAC1_REF_DIV>,
+			<&clks S32G_CLK_PFE_MAC1_RX>,
+			<&clks S32G_CLK_PFE_MAC1_TX>,
+			<&clks S32G_CLK_PFE_MAC2_REF_DIV>,
+			<&clks S32G_CLK_PFE_MAC2_RX>,
+			<&clks S32G_CLK_PFE_MAC2_TX>;
 		assigned-clock-parents =
 			<&pfe_mac0_ext_ref 0>,
 			<&pfe_mac1_ext_ref 0>,
 			<&pfe_mac2_ext_ref 0>,
-			<&clks S32G274A_CLK_ACCEL_PLL_PHI1>,
+			<&clks S32G_CLK_ACCEL_PLL_PHI1>,
 			/* PFE MAC0 */
-			<&clks S32G274A_CLK_PFE_MAC0_EXT_REF>,
-			<&clks S32G274A_CLK_SERDES1_LANE0_CDR>,
-			<&clks S32G274A_CLK_SERDES1_LANE0_TX>,
+			<&clks S32G_CLK_PFE_MAC0_EXT_REF>,
+			<&clks S32G_CLK_SERDES1_LANE0_CDR>,
+			<&clks S32G_CLK_SERDES1_LANE0_TX>,
 			/* PFE MAC1 */
-			<&clks S32G274A_CLK_PFE_MAC1_EXT_REF>,
-			<&clks S32G274A_CLK_SERDES1_LANE1_CDR>,
-			<&clks S32G274A_CLK_SERDES1_LANE1_TX>,
+			<&clks S32G_CLK_PFE_MAC1_EXT_REF>,
+			<&clks S32G_CLK_SERDES1_LANE1_CDR>,
+			<&clks S32G_CLK_SERDES1_LANE1_TX>,
 			/* PFE MAC2 */
-			<&clks S32G274A_CLK_PFE_MAC2_EXT_REF>,
-			<&clks S32G274A_CLK_SERDES0_LANE1_CDR>,
-			<&clks S32G274A_CLK_SERDES0_LANE1_TX>;
+			<&clks S32G_CLK_PFE_MAC2_EXT_REF>,
+			<&clks S32G_CLK_SERDES0_LANE1_CDR>,
+			<&clks S32G_CLK_SERDES0_LANE1_TX>;
 		assigned-clock-rates =
 			<0>, <0>, <0>, <0>, <0>, <0>, <0>,
 			<0>, <0>, <0>, <0>, <0>, <0>,
@@ -303,8 +303,8 @@
 	assigned-clocks =
 		<&clks S32GEN1_CLK_ACCEL_PLL_MUX>,
 		<&clks S32GEN1_CLK_ACCEL_PLL_VCO>,
-		<&clks S32G274A_CLK_ACCEL_PLL_PHI0>,
-		<&clks S32G274A_CLK_ACCEL_PLL_PHI1>;
+		<&clks S32G_CLK_ACCEL_PLL_PHI0>,
+		<&clks S32G_CLK_ACCEL_PLL_PHI1>;
 	assigned-clock-parents =
 		<&clks S32GEN1_CLK_FXOSC>;
 	assigned-clock-rates =
@@ -364,8 +364,8 @@
 	assigned-clocks =
 		<&clks S32GEN1_CLK_SERDES0_LANE0_TX>,
 		<&clks S32GEN1_CLK_SERDES0_LANE0_CDR>,
-		<&clks S32G274A_CLK_SERDES0_LANE1_TX>,
-		<&clks S32G274A_CLK_SERDES0_LANE1_CDR>;
+		<&clks S32G_CLK_SERDES0_LANE1_TX>,
+		<&clks S32G_CLK_SERDES0_LANE1_CDR>;
 
 	assigned-clock-parents =
 		<&serdes0_lane0_ext_tx 0>,
diff --git a/drivers/clk/s32/clk_dump/s32g_clk_names.c b/drivers/clk/s32/clk_dump/s32g_clk_names.c
index 0088474f8a..e2a70777de 100644
--- a/drivers/clk/s32/clk_dump/s32g_clk_names.c
+++ b/drivers/clk/s32/clk_dump/s32g_clk_names.c
@@ -6,61 +6,61 @@
 #include <linux/kernel.h>
 #include <s32gen1_clk_dump.h>
 
-#define S32G274A_CLK_PREFIX	"S32G274A_CLK_"
+#define S32G_CLK_PREFIX	"S32G_CLK_"
 
 #define CLK_NAME(ID_DEF)     \
 	S32GEN1_CLK_NAME_INIT(ID_DEF, #ID_DEF)
 
-static struct s32gen1_clk_blk s32g274a_clk_blks[] = {
+static struct s32gen1_clk_blk s32g_clk_blks[] = {
 	CLK_NAME(S32GEN1_CLK_PER),
 	CLK_NAME(S32GEN1_CLK_CAN_PE),
-	CLK_NAME(S32G274A_CLK_ACCEL_PLL_PHI0),
-	CLK_NAME(S32G274A_CLK_ACCEL_PLL_PHI1),
-	CLK_NAME(S32G274A_CLK_SERDES0_LANE1_CDR),
-	CLK_NAME(S32G274A_CLK_SERDES0_LANE1_TX),
-	CLK_NAME(S32G274A_CLK_PFE_MAC0_EXT_TX),
-	CLK_NAME(S32G274A_CLK_PFE_MAC0_EXT_RX),
-	CLK_NAME(S32G274A_CLK_PFE_MAC0_EXT_REF),
-	CLK_NAME(S32G274A_CLK_PFE_MAC1_EXT_TX),
-	CLK_NAME(S32G274A_CLK_PFE_MAC1_EXT_RX),
-	CLK_NAME(S32G274A_CLK_PFE_MAC1_EXT_REF),
-	CLK_NAME(S32G274A_CLK_PFE_MAC2_EXT_TX),
-	CLK_NAME(S32G274A_CLK_PFE_MAC2_EXT_RX),
-	CLK_NAME(S32G274A_CLK_PFE_MAC2_EXT_REF),
-	CLK_NAME(S32G274A_CLK_SERDES1_LANE0_TX),
-	CLK_NAME(S32G274A_CLK_SERDES1_LANE0_CDR),
-	CLK_NAME(S32G274A_CLK_PFE_MAC0_REF_DIV),
-	CLK_NAME(S32G274A_CLK_PFE_MAC1_REF_DIV),
-	CLK_NAME(S32G274A_CLK_PFE_MAC2_REF_DIV),
-	CLK_NAME(S32G274A_CLK_SERDES1_LANE1_TX),
-	CLK_NAME(S32G274A_CLK_SERDES1_LANE1_CDR),
+	CLK_NAME(S32G_CLK_ACCEL_PLL_PHI0),
+	CLK_NAME(S32G_CLK_ACCEL_PLL_PHI1),
+	CLK_NAME(S32G_CLK_SERDES0_LANE1_CDR),
+	CLK_NAME(S32G_CLK_SERDES0_LANE1_TX),
+	CLK_NAME(S32G_CLK_PFE_MAC0_EXT_TX),
+	CLK_NAME(S32G_CLK_PFE_MAC0_EXT_RX),
+	CLK_NAME(S32G_CLK_PFE_MAC0_EXT_REF),
+	CLK_NAME(S32G_CLK_PFE_MAC1_EXT_TX),
+	CLK_NAME(S32G_CLK_PFE_MAC1_EXT_RX),
+	CLK_NAME(S32G_CLK_PFE_MAC1_EXT_REF),
+	CLK_NAME(S32G_CLK_PFE_MAC2_EXT_TX),
+	CLK_NAME(S32G_CLK_PFE_MAC2_EXT_RX),
+	CLK_NAME(S32G_CLK_PFE_MAC2_EXT_REF),
+	CLK_NAME(S32G_CLK_SERDES1_LANE0_TX),
+	CLK_NAME(S32G_CLK_SERDES1_LANE0_CDR),
+	CLK_NAME(S32G_CLK_PFE_MAC0_REF_DIV),
+	CLK_NAME(S32G_CLK_PFE_MAC1_REF_DIV),
+	CLK_NAME(S32G_CLK_PFE_MAC2_REF_DIV),
+	CLK_NAME(S32G_CLK_SERDES1_LANE1_TX),
+	CLK_NAME(S32G_CLK_SERDES1_LANE1_CDR),
 	/* PFE_MAC0 */
-	CLK_NAME(S32G274A_CLK_PFE_MAC0_RX),
-	CLK_NAME(S32G274A_CLK_PFE_MAC0_TX_DIV),
-	CLK_NAME(S32G274A_CLK_MC_CGM2_MUX1),
-	CLK_NAME(S32G274A_CLK_MC_CGM2_MUX4),
-	CLK_NAME(S32G274A_CLK_MC_CGM2_MUX7),
+	CLK_NAME(S32G_CLK_PFE_MAC0_RX),
+	CLK_NAME(S32G_CLK_PFE_MAC0_TX_DIV),
+	CLK_NAME(S32G_CLK_MC_CGM2_MUX1),
+	CLK_NAME(S32G_CLK_MC_CGM2_MUX4),
+	CLK_NAME(S32G_CLK_MC_CGM2_MUX7),
 	/* PFE_MAC1 */
-	CLK_NAME(S32G274A_CLK_PFE_MAC1_RX),
-	CLK_NAME(S32G274A_CLK_PFE_MAC1_TX),
-	CLK_NAME(S32G274A_CLK_MC_CGM2_MUX2),
-	CLK_NAME(S32G274A_CLK_MC_CGM2_MUX5),
-	CLK_NAME(S32G274A_CLK_MC_CGM2_MUX8),
+	CLK_NAME(S32G_CLK_PFE_MAC1_RX),
+	CLK_NAME(S32G_CLK_PFE_MAC1_TX),
+	CLK_NAME(S32G_CLK_MC_CGM2_MUX2),
+	CLK_NAME(S32G_CLK_MC_CGM2_MUX5),
+	CLK_NAME(S32G_CLK_MC_CGM2_MUX8),
 	/* PFE_MAC2 */
-	CLK_NAME(S32G274A_CLK_PFE_MAC2_RX),
-	CLK_NAME(S32G274A_CLK_PFE_MAC2_TX),
-	CLK_NAME(S32G274A_CLK_MC_CGM2_MUX3),
-	CLK_NAME(S32G274A_CLK_MC_CGM2_MUX6),
-	CLK_NAME(S32G274A_CLK_MC_CGM2_MUX9),
-	CLK_NAME(S32G274A_CLK_MC_CGM2_MUX0),
-	CLK_NAME(S32G274A_CLK_PFE_SYS),
-	CLK_NAME(S32G274A_CLK_PFE_PE),
+	CLK_NAME(S32G_CLK_PFE_MAC2_RX),
+	CLK_NAME(S32G_CLK_PFE_MAC2_TX),
+	CLK_NAME(S32G_CLK_MC_CGM2_MUX3),
+	CLK_NAME(S32G_CLK_MC_CGM2_MUX6),
+	CLK_NAME(S32G_CLK_MC_CGM2_MUX9),
+	CLK_NAME(S32G_CLK_MC_CGM2_MUX0),
+	CLK_NAME(S32G_CLK_PFE_SYS),
+	CLK_NAME(S32G_CLK_PFE_PE),
 };
 
 const char *plat_clk_name(const char *name)
 {
 	static size_t s32gen1_len = sizeof(S32GEN1_CLK_PREFIX) - 1;
-	static size_t s32g274a_len = sizeof(S32G274A_CLK_PREFIX) - 1;
+	static size_t s32g_len = sizeof(S32G_CLK_PREFIX) - 1;
 
 	if (!name)
 		return NULL;
@@ -68,13 +68,13 @@ const char *plat_clk_name(const char *name)
 	if (!strncmp(name, S32GEN1_CLK_PREFIX, s32gen1_len))
 		return name + s32gen1_len;
 
-	return name + s32g274a_len;
+	return name + s32g_len;
 }
 
 struct s32gen1_clk_blk *s32gen1_get_plat_clk_blk(u32 id)
 {
-	if (id < ARRAY_SIZE(s32g274a_clk_blks))
-		return &s32g274a_clk_blks[id];
+	if (id < ARRAY_SIZE(s32g_clk_blks))
+		return &s32g_clk_blks[id];
 
 	return NULL;
 }
diff --git a/drivers/clk/s32/s32g_clk.c b/drivers/clk/s32/s32g_clk.c
index 17b8f806a2..8d5e2293fc 100644
--- a/drivers/clk/s32/s32g_clk.c
+++ b/drivers/clk/s32/s32g_clk.c
@@ -8,7 +8,7 @@
 #include <s32gen1_clk_modules.h>
 #include <s32gen1_shared_clks.h>
 
-#define ARR_CLK(N)	S32G274A_CLK_INDEX(N)
+#define ARR_CLK(N)	S32G_CLK_INDEX(N)
 
 /* XBAR_2X */
 static struct s32gen1_part_block llce_block =
@@ -45,9 +45,9 @@ static struct s32gen1_mux cgm2_mux1 =
 		S32GEN1_MUX_INIT(S32GEN1_CGM2, 1, 5,
 				 S32GEN1_CLK_FIRC,
 				 S32GEN1_CLK_PERIPH_PLL_PHI5,
-				 S32G274A_CLK_PFE_MAC0_EXT_TX,
-				 S32G274A_CLK_PFE_MAC0_EXT_REF,
-				 S32G274A_CLK_SERDES1_LANE0_TX);
+				 S32G_CLK_PFE_MAC0_EXT_TX,
+				 S32G_CLK_PFE_MAC0_EXT_REF,
+				 S32G_CLK_SERDES1_LANE0_TX);
 static struct s32gen1_clk cgm2_mux1_clk =
 		S32GEN1_MODULE_CLK(cgm2_mux1);
 static struct s32gen1_cgm_div cgm2_mux1_div =
@@ -62,7 +62,7 @@ static struct s32gen1_clk pfe_mac0_tx_div_clk =
 static struct s32gen1_mux cgm2_mux7 =
 		S32GEN1_MUX_INIT(S32GEN1_CGM2, 7, 2,
 				 S32GEN1_CLK_FIRC,
-				 S32G274A_CLK_PFE_MAC0_EXT_REF);
+				 S32G_CLK_PFE_MAC0_EXT_REF);
 static struct s32gen1_clk cgm2_mux7_clk =
 		S32GEN1_MODULE_CLK(cgm2_mux7);
 static struct s32gen1_cgm_div cgm2_mux7_div =
@@ -87,9 +87,9 @@ static struct s32gen1_clk pfe_mac0_ext_rx_clk =
 static struct s32gen1_mux cgm2_mux4 =
 		S32GEN1_MUX_INIT(S32GEN1_CGM2, 4, 4,
 				 S32GEN1_CLK_FIRC,
-				 S32G274A_CLK_PFE_MAC0_EXT_RX,
-				 S32G274A_CLK_SERDES1_LANE0_CDR,
-				 S32G274A_CLK_PFE_MAC0_REF_DIV);
+				 S32G_CLK_PFE_MAC0_EXT_RX,
+				 S32G_CLK_SERDES1_LANE0_CDR,
+				 S32G_CLK_PFE_MAC0_REF_DIV);
 static struct s32gen1_clk cgm2_mux4_clk =
 		S32GEN1_MODULE_CLK(cgm2_mux4);
 static struct s32gen1_part_block pfe0_rx_block =
@@ -113,9 +113,9 @@ static struct s32gen1_mux cgm2_mux2 =
 		S32GEN1_MUX_INIT(S32GEN1_CGM2, 2, 5,
 				 S32GEN1_CLK_FIRC,
 				 S32GEN1_CLK_PERIPH_PLL_PHI5,
-				 S32G274A_CLK_PFE_MAC1_EXT_TX,
-				 S32G274A_CLK_PFE_MAC1_EXT_REF,
-				 S32G274A_CLK_SERDES1_LANE1_TX);
+				 S32G_CLK_PFE_MAC1_EXT_TX,
+				 S32G_CLK_PFE_MAC1_EXT_REF,
+				 S32G_CLK_SERDES1_LANE1_TX);
 static struct s32gen1_clk cgm2_mux2_clk =
 		S32GEN1_MODULE_CLK(cgm2_mux2);
 static struct s32gen1_cgm_div cgm2_mux2_div =
@@ -130,7 +130,7 @@ static struct s32gen1_clk pfe_mac1_tx_clk =
 static struct s32gen1_mux cgm2_mux8 =
 		S32GEN1_MUX_INIT(S32GEN1_CGM2, 8, 2,
 				 S32GEN1_CLK_FIRC,
-				 S32G274A_CLK_PFE_MAC1_EXT_REF);
+				 S32G_CLK_PFE_MAC1_EXT_REF);
 static struct s32gen1_clk cgm2_mux8_clk =
 		S32GEN1_MODULE_CLK(cgm2_mux8);
 static struct s32gen1_cgm_div cgm2_mux8_div =
@@ -150,9 +150,9 @@ static struct s32gen1_clk pfe_mac1_ext_rx_clk =
 static struct s32gen1_mux cgm2_mux5 =
 		S32GEN1_MUX_INIT(S32GEN1_CGM2, 5, 4,
 				 S32GEN1_CLK_FIRC,
-				 S32G274A_CLK_PFE_MAC1_EXT_RX,
-				 S32G274A_CLK_PFE_MAC1_REF_DIV,
-				 S32G274A_CLK_SERDES1_LANE1_CDR);
+				 S32G_CLK_PFE_MAC1_EXT_RX,
+				 S32G_CLK_PFE_MAC1_REF_DIV,
+				 S32G_CLK_SERDES1_LANE1_CDR);
 static struct s32gen1_clk cgm2_mux5_clk =
 		S32GEN1_MODULE_CLK(cgm2_mux5);
 static struct s32gen1_part_block pfe1_rx_block =
@@ -181,9 +181,9 @@ static struct s32gen1_mux cgm2_mux3 =
 		S32GEN1_MUX_INIT(S32GEN1_CGM2, 3, 5,
 				 S32GEN1_CLK_FIRC,
 				 S32GEN1_CLK_PERIPH_PLL_PHI5,
-				 S32G274A_CLK_PFE_MAC2_EXT_TX,
-				 S32G274A_CLK_PFE_MAC2_EXT_REF,
-				 S32G274A_CLK_SERDES0_LANE1_TX);
+				 S32G_CLK_PFE_MAC2_EXT_TX,
+				 S32G_CLK_PFE_MAC2_EXT_REF,
+				 S32G_CLK_SERDES0_LANE1_TX);
 static struct s32gen1_clk cgm2_mux3_clk =
 		S32GEN1_MODULE_CLK(cgm2_mux3);
 static struct s32gen1_cgm_div cgm2_mux3_div =
@@ -198,7 +198,7 @@ static struct s32gen1_clk pfe_mac2_tx_clk =
 static struct s32gen1_mux cgm2_mux9 =
 		S32GEN1_MUX_INIT(S32GEN1_CGM2, 9, 2,
 				 S32GEN1_CLK_FIRC,
-				 S32G274A_CLK_PFE_MAC2_EXT_REF);
+				 S32G_CLK_PFE_MAC2_EXT_REF);
 static struct s32gen1_clk cgm2_mux9_clk =
 		S32GEN1_MODULE_CLK(cgm2_mux9);
 static struct s32gen1_cgm_div cgm2_mux9_div =
@@ -223,9 +223,9 @@ static struct s32gen1_clk serdes0_lane1_cdr_clk =
 static struct s32gen1_mux cgm2_mux6 =
 		S32GEN1_MUX_INIT(S32GEN1_CGM2, 6, 4,
 				 S32GEN1_CLK_FIRC,
-				 S32G274A_CLK_PFE_MAC2_EXT_RX,
-				 S32G274A_CLK_PFE_MAC2_REF_DIV,
-				 S32G274A_CLK_SERDES0_LANE1_CDR);
+				 S32G_CLK_PFE_MAC2_EXT_RX,
+				 S32G_CLK_PFE_MAC2_REF_DIV,
+				 S32G_CLK_SERDES0_LANE1_CDR);
 static struct s32gen1_clk cgm2_mux6_clk =
 		S32GEN1_MODULE_CLK(cgm2_mux6);
 static struct s32gen1_part_block pfe2_rx_block =
@@ -238,7 +238,7 @@ static struct s32gen1_clk pfe_mac2_rx_clk =
 static struct s32gen1_mux cgm2_mux0 =
 		S32GEN1_MUX_INIT(S32GEN1_CGM2, 0, 2,
 				 S32GEN1_CLK_FIRC,
-				 S32G274A_CLK_ACCEL_PLL_PHI1);
+				 S32G_CLK_ACCEL_PLL_PHI1);
 static struct s32gen1_clk cgm2_mux0_clk =
 		S32GEN1_MODULE_CLK(cgm2_mux0);
 static struct s32gen1_cgm_div cgm2_mux0_div =
@@ -253,63 +253,63 @@ static struct s32gen1_fixed_div pfe_sys_div =
 static struct s32gen1_clk pfe_sys_clk =
 		S32GEN1_FREQ_MODULE_CLK(pfe_sys_div, 0, 300 * MHZ);
 
-static struct s32gen1_clk *s32g274a_clocks[] = {
+static struct s32gen1_clk *s32g_clocks[] = {
 	/* PFE_MAC0 */
-	[ARR_CLK(S32G274A_CLK_PFE_MAC0_RX)] = &pfe_mac0_rx_clk,
-	[ARR_CLK(S32G274A_CLK_PFE_MAC0_TX_DIV)] = &pfe_mac0_tx_div_clk,
-	[ARR_CLK(S32G274A_CLK_MC_CGM2_MUX1)] = &cgm2_mux1_clk,
-	[ARR_CLK(S32G274A_CLK_MC_CGM2_MUX4)] = &cgm2_mux4_clk,
-	[ARR_CLK(S32G274A_CLK_MC_CGM2_MUX7)] = &cgm2_mux7_clk,
+	[ARR_CLK(S32G_CLK_PFE_MAC0_RX)] = &pfe_mac0_rx_clk,
+	[ARR_CLK(S32G_CLK_PFE_MAC0_TX_DIV)] = &pfe_mac0_tx_div_clk,
+	[ARR_CLK(S32G_CLK_MC_CGM2_MUX1)] = &cgm2_mux1_clk,
+	[ARR_CLK(S32G_CLK_MC_CGM2_MUX4)] = &cgm2_mux4_clk,
+	[ARR_CLK(S32G_CLK_MC_CGM2_MUX7)] = &cgm2_mux7_clk,
 	/* PFE_MAC1 */
-	[ARR_CLK(S32G274A_CLK_PFE_MAC1_RX)] = &pfe_mac1_rx_clk,
-	[ARR_CLK(S32G274A_CLK_PFE_MAC1_TX)] = &pfe_mac1_tx_clk,
-	[ARR_CLK(S32G274A_CLK_MC_CGM2_MUX2)] = &cgm2_mux2_clk,
-	[ARR_CLK(S32G274A_CLK_MC_CGM2_MUX5)] = &cgm2_mux5_clk,
-	[ARR_CLK(S32G274A_CLK_MC_CGM2_MUX8)] = &cgm2_mux8_clk,
+	[ARR_CLK(S32G_CLK_PFE_MAC1_RX)] = &pfe_mac1_rx_clk,
+	[ARR_CLK(S32G_CLK_PFE_MAC1_TX)] = &pfe_mac1_tx_clk,
+	[ARR_CLK(S32G_CLK_MC_CGM2_MUX2)] = &cgm2_mux2_clk,
+	[ARR_CLK(S32G_CLK_MC_CGM2_MUX5)] = &cgm2_mux5_clk,
+	[ARR_CLK(S32G_CLK_MC_CGM2_MUX8)] = &cgm2_mux8_clk,
 	/* PFE_MAC2 */
-	[ARR_CLK(S32G274A_CLK_PFE_MAC2_RX)] = &pfe_mac2_rx_clk,
-	[ARR_CLK(S32G274A_CLK_PFE_MAC2_TX)] = &pfe_mac2_tx_clk,
-	[ARR_CLK(S32G274A_CLK_MC_CGM2_MUX3)] = &cgm2_mux3_clk,
-	[ARR_CLK(S32G274A_CLK_MC_CGM2_MUX6)] = &cgm2_mux6_clk,
-	[ARR_CLK(S32G274A_CLK_MC_CGM2_MUX9)] = &cgm2_mux9_clk,
-	[ARR_CLK(S32G274A_CLK_MC_CGM2_MUX0)] = &cgm2_mux0_clk,
-	[ARR_CLK(S32G274A_CLK_PFE_SYS)] = &pfe_sys_clk,
-	[ARR_CLK(S32G274A_CLK_PFE_PE)] = &pfe_pe_clk,
+	[ARR_CLK(S32G_CLK_PFE_MAC2_RX)] = &pfe_mac2_rx_clk,
+	[ARR_CLK(S32G_CLK_PFE_MAC2_TX)] = &pfe_mac2_tx_clk,
+	[ARR_CLK(S32G_CLK_MC_CGM2_MUX3)] = &cgm2_mux3_clk,
+	[ARR_CLK(S32G_CLK_MC_CGM2_MUX6)] = &cgm2_mux6_clk,
+	[ARR_CLK(S32G_CLK_MC_CGM2_MUX9)] = &cgm2_mux9_clk,
+	[ARR_CLK(S32G_CLK_MC_CGM2_MUX0)] = &cgm2_mux0_clk,
+	[ARR_CLK(S32G_CLK_PFE_SYS)] = &pfe_sys_clk,
+	[ARR_CLK(S32G_CLK_PFE_PE)] = &pfe_pe_clk,
 };
 
-static struct s32gen1_clk *s32g274a_cc_clocks[] = {
+static struct s32gen1_clk *s32g_cc_clocks[] = {
 	[CC_ARR_CLK(S32GEN1_CLK_PER)] = &per_clk,
 	[CC_ARR_CLK(S32GEN1_CLK_CAN_PE)] = &can_pe_clk,
-	[CC_ARR_CLK(S32G274A_CLK_ACCEL_PLL_PHI0)] = &accel_pll_phi0_clk,
-	[CC_ARR_CLK(S32G274A_CLK_ACCEL_PLL_PHI1)] = &accel_pll_phi1_clk,
-	[CC_ARR_CLK(S32G274A_CLK_SERDES0_LANE1_CDR)] = &serdes0_lane1_cdr_clk,
-	[CC_ARR_CLK(S32G274A_CLK_SERDES0_LANE1_TX)] = &serdes0_lane1_tx_clk,
-	[CC_ARR_CLK(S32G274A_CLK_PFE_MAC0_EXT_TX)] = &pfe_mac0_ext_tx_clk,
-	[CC_ARR_CLK(S32G274A_CLK_PFE_MAC0_EXT_RX)] = &pfe_mac0_ext_rx_clk,
-	[CC_ARR_CLK(S32G274A_CLK_PFE_MAC0_EXT_REF)] = &pfe_mac0_ext_ref_clk,
-	[CC_ARR_CLK(S32G274A_CLK_PFE_MAC1_EXT_TX)] = &pfe_mac1_ext_tx_clk,
-	[CC_ARR_CLK(S32G274A_CLK_PFE_MAC1_EXT_RX)] = &pfe_mac1_ext_rx_clk,
-	[CC_ARR_CLK(S32G274A_CLK_PFE_MAC1_EXT_REF)] = &pfe_mac1_ext_ref_clk,
-	[CC_ARR_CLK(S32G274A_CLK_PFE_MAC2_EXT_TX)] = &pfe_mac2_ext_tx_clk,
-	[CC_ARR_CLK(S32G274A_CLK_PFE_MAC2_EXT_RX)] = &pfe_mac2_ext_rx_clk,
-	[CC_ARR_CLK(S32G274A_CLK_PFE_MAC2_EXT_REF)] = &pfe_mac2_ext_ref_clk,
-	[CC_ARR_CLK(S32G274A_CLK_SERDES1_LANE0_TX)] = &serdes1_lane0_ext_tx_clk,
-	[CC_ARR_CLK(S32G274A_CLK_SERDES1_LANE0_CDR)] = &serdes1_lane0_cdr_clk,
-	[CC_ARR_CLK(S32G274A_CLK_PFE_MAC0_REF_DIV)] = &pfe_mac0_ref_div_clk,
-	[CC_ARR_CLK(S32G274A_CLK_PFE_MAC1_REF_DIV)] = &pfe_mac1_ref_div_clk,
-	[CC_ARR_CLK(S32G274A_CLK_PFE_MAC2_REF_DIV)] = &pfe_mac2_ref_div_clk,
-	[CC_ARR_CLK(S32G274A_CLK_SERDES1_LANE1_TX)] = &serdes1_lane1_tx_clk,
-	[CC_ARR_CLK(S32G274A_CLK_SERDES1_LANE1_CDR)] = &serdes1_lane1_cdr_clk,
+	[CC_ARR_CLK(S32G_CLK_ACCEL_PLL_PHI0)] = &accel_pll_phi0_clk,
+	[CC_ARR_CLK(S32G_CLK_ACCEL_PLL_PHI1)] = &accel_pll_phi1_clk,
+	[CC_ARR_CLK(S32G_CLK_SERDES0_LANE1_CDR)] = &serdes0_lane1_cdr_clk,
+	[CC_ARR_CLK(S32G_CLK_SERDES0_LANE1_TX)] = &serdes0_lane1_tx_clk,
+	[CC_ARR_CLK(S32G_CLK_PFE_MAC0_EXT_TX)] = &pfe_mac0_ext_tx_clk,
+	[CC_ARR_CLK(S32G_CLK_PFE_MAC0_EXT_RX)] = &pfe_mac0_ext_rx_clk,
+	[CC_ARR_CLK(S32G_CLK_PFE_MAC0_EXT_REF)] = &pfe_mac0_ext_ref_clk,
+	[CC_ARR_CLK(S32G_CLK_PFE_MAC1_EXT_TX)] = &pfe_mac1_ext_tx_clk,
+	[CC_ARR_CLK(S32G_CLK_PFE_MAC1_EXT_RX)] = &pfe_mac1_ext_rx_clk,
+	[CC_ARR_CLK(S32G_CLK_PFE_MAC1_EXT_REF)] = &pfe_mac1_ext_ref_clk,
+	[CC_ARR_CLK(S32G_CLK_PFE_MAC2_EXT_TX)] = &pfe_mac2_ext_tx_clk,
+	[CC_ARR_CLK(S32G_CLK_PFE_MAC2_EXT_RX)] = &pfe_mac2_ext_rx_clk,
+	[CC_ARR_CLK(S32G_CLK_PFE_MAC2_EXT_REF)] = &pfe_mac2_ext_ref_clk,
+	[CC_ARR_CLK(S32G_CLK_SERDES1_LANE0_TX)] = &serdes1_lane0_ext_tx_clk,
+	[CC_ARR_CLK(S32G_CLK_SERDES1_LANE0_CDR)] = &serdes1_lane0_cdr_clk,
+	[CC_ARR_CLK(S32G_CLK_PFE_MAC0_REF_DIV)] = &pfe_mac0_ref_div_clk,
+	[CC_ARR_CLK(S32G_CLK_PFE_MAC1_REF_DIV)] = &pfe_mac1_ref_div_clk,
+	[CC_ARR_CLK(S32G_CLK_PFE_MAC2_REF_DIV)] = &pfe_mac2_ref_div_clk,
+	[CC_ARR_CLK(S32G_CLK_SERDES1_LANE1_TX)] = &serdes1_lane1_tx_clk,
+	[CC_ARR_CLK(S32G_CLK_SERDES1_LANE1_CDR)] = &serdes1_lane1_cdr_clk,
 };
 
 struct s32gen1_clk *get_plat_cc_clock(uint32_t id)
 {
 	id = s32gen1_platclk2mux(id);
 
-	if (id >= ARRAY_SIZE(s32g274a_cc_clocks))
+	if (id >= ARRAY_SIZE(s32g_cc_clocks))
 		return NULL;
 
-	return s32g274a_cc_clocks[id];
+	return s32g_cc_clocks[id];
 }
 
 struct s32gen1_clk *get_plat_clock(uint32_t id)
@@ -319,8 +319,8 @@ struct s32gen1_clk *get_plat_clock(uint32_t id)
 
 	id -= S32GEN1_PLAT_CLK_ID_BASE;
 
-	if (id >= ARRAY_SIZE(s32g274a_clocks))
+	if (id >= ARRAY_SIZE(s32g_clocks))
 		return NULL;
 
-	return s32g274a_clocks[id];
+	return s32g_clocks[id];
 }
diff --git a/drivers/clk/s32/s32g_scmi_ids.c b/drivers/clk/s32/s32g_scmi_ids.c
index 99c4108a60..aa85932b69 100644
--- a/drivers/clk/s32/s32g_scmi_ids.c
+++ b/drivers/clk/s32/s32g_scmi_ids.c
@@ -11,65 +11,65 @@
 
 #define INDEX(X)	((X) - S32GEN1_SCMI_PLAT_CLK_BASE_ID)
 
-static u32 s32g274a_scmi_ids[] = {
-	[INDEX(S32G274A_SCMI_CLK_USB_MEM)] = S32GEN1_CLK_XBAR_DIV4,
-	[INDEX(S32G274A_SCMI_CLK_USB_LOW)] = S32GEN1_CLK_SIRC,
-	[INDEX(S32G274A_SCMI_CLK_PFE_AXI)] = S32G274A_CLK_PFE_SYS,
-	[INDEX(S32G274A_SCMI_CLK_PFE_APB)] = S32G274A_CLK_PFE_SYS,
-	[INDEX(S32G274A_SCMI_CLK_PFE_PE)] = S32G274A_CLK_PFE_PE,
-	[INDEX(S32G274A_SCMI_CLK_PFE_TS)] = S32GEN1_CLK_GMAC0_TS,
+static u32 s32g_scmi_ids[] = {
+	[INDEX(S32G_SCMI_CLK_USB_MEM)] = S32GEN1_CLK_XBAR_DIV4,
+	[INDEX(S32G_SCMI_CLK_USB_LOW)] = S32GEN1_CLK_SIRC,
+	[INDEX(S32G_SCMI_CLK_PFE_AXI)] = S32G_CLK_PFE_SYS,
+	[INDEX(S32G_SCMI_CLK_PFE_APB)] = S32G_CLK_PFE_SYS,
+	[INDEX(S32G_SCMI_CLK_PFE_PE)] = S32G_CLK_PFE_PE,
+	[INDEX(S32G_SCMI_CLK_PFE_TS)] = S32GEN1_CLK_GMAC0_TS,
 	/* PFE0 */
-	[INDEX(S32G274A_SCMI_CLK_PFE0_RX_SGMII)] = S32GEN1_SCMI_COMPLEX_CLK,
-	[INDEX(S32G274A_SCMI_CLK_PFE0_TX_SGMII)] = S32GEN1_SCMI_COMPLEX_CLK,
-	[INDEX(S32G274A_SCMI_CLK_PFE0_RX_RGMII)] = S32GEN1_SCMI_COMPLEX_CLK,
-	[INDEX(S32G274A_SCMI_CLK_PFE0_TX_RGMII)] = S32GEN1_SCMI_COMPLEX_CLK,
+	[INDEX(S32G_SCMI_CLK_PFE0_RX_SGMII)] = S32GEN1_SCMI_COMPLEX_CLK,
+	[INDEX(S32G_SCMI_CLK_PFE0_TX_SGMII)] = S32GEN1_SCMI_COMPLEX_CLK,
+	[INDEX(S32G_SCMI_CLK_PFE0_RX_RGMII)] = S32GEN1_SCMI_COMPLEX_CLK,
+	[INDEX(S32G_SCMI_CLK_PFE0_TX_RGMII)] = S32GEN1_SCMI_COMPLEX_CLK,
 	/* PFE1 */
-	[INDEX(S32G274A_SCMI_CLK_PFE1_RX_SGMII)] = S32GEN1_SCMI_COMPLEX_CLK,
-	[INDEX(S32G274A_SCMI_CLK_PFE1_TX_SGMII)] = S32GEN1_SCMI_COMPLEX_CLK,
-	[INDEX(S32G274A_SCMI_CLK_PFE1_RX_RGMII)] = S32GEN1_SCMI_COMPLEX_CLK,
-	[INDEX(S32G274A_SCMI_CLK_PFE1_TX_RGMII)] = S32GEN1_SCMI_COMPLEX_CLK,
+	[INDEX(S32G_SCMI_CLK_PFE1_RX_SGMII)] = S32GEN1_SCMI_COMPLEX_CLK,
+	[INDEX(S32G_SCMI_CLK_PFE1_TX_SGMII)] = S32GEN1_SCMI_COMPLEX_CLK,
+	[INDEX(S32G_SCMI_CLK_PFE1_RX_RGMII)] = S32GEN1_SCMI_COMPLEX_CLK,
+	[INDEX(S32G_SCMI_CLK_PFE1_TX_RGMII)] = S32GEN1_SCMI_COMPLEX_CLK,
 	/* PFE2 */
-	[INDEX(S32G274A_SCMI_CLK_PFE2_RX_SGMII)] = S32GEN1_SCMI_COMPLEX_CLK,
-	[INDEX(S32G274A_SCMI_CLK_PFE2_TX_SGMII)] = S32GEN1_SCMI_COMPLEX_CLK,
-	[INDEX(S32G274A_SCMI_CLK_PFE2_RX_RGMII)] = S32GEN1_SCMI_COMPLEX_CLK,
-	[INDEX(S32G274A_SCMI_CLK_PFE2_TX_RGMII)] = S32GEN1_SCMI_COMPLEX_CLK,
+	[INDEX(S32G_SCMI_CLK_PFE2_RX_SGMII)] = S32GEN1_SCMI_COMPLEX_CLK,
+	[INDEX(S32G_SCMI_CLK_PFE2_TX_SGMII)] = S32GEN1_SCMI_COMPLEX_CLK,
+	[INDEX(S32G_SCMI_CLK_PFE2_RX_RGMII)] = S32GEN1_SCMI_COMPLEX_CLK,
+	[INDEX(S32G_SCMI_CLK_PFE2_TX_RGMII)] = S32GEN1_SCMI_COMPLEX_CLK,
 	/* LLCE */
-	[INDEX(S32G274A_SCMI_CLK_LLCE_SYS)] = S32GEN1_CLK_XBAR_DIV2,
-	[INDEX(S32G274A_SCMI_CLK_LLCE_CAN_PE)] = S32GEN1_CLK_CAN_PE,
+	[INDEX(S32G_SCMI_CLK_LLCE_SYS)] = S32GEN1_CLK_XBAR_DIV2,
+	[INDEX(S32G_SCMI_CLK_LLCE_CAN_PE)] = S32GEN1_CLK_CAN_PE,
 };
 
 static int s32g_compound2clkid(u32 scmi_clk_id, u32 *clk_id)
 {
 	switch (scmi_clk_id) {
-	case S32G274A_SCMI_CLK_PFE0_RX_SGMII:
-	case S32G274A_SCMI_CLK_PFE0_RX_RGMII:
+	case S32G_SCMI_CLK_PFE0_RX_SGMII:
+	case S32G_SCMI_CLK_PFE0_RX_RGMII:
 		if (clk_id)
-			*clk_id = S32G274A_CLK_PFE_MAC0_RX;
+			*clk_id = S32G_CLK_PFE_MAC0_RX;
 		break;
-	case S32G274A_SCMI_CLK_PFE0_TX_SGMII:
-	case S32G274A_SCMI_CLK_PFE0_TX_RGMII:
+	case S32G_SCMI_CLK_PFE0_TX_SGMII:
+	case S32G_SCMI_CLK_PFE0_TX_RGMII:
 		if (clk_id)
-			*clk_id = S32G274A_CLK_PFE_MAC0_TX_DIV;
+			*clk_id = S32G_CLK_PFE_MAC0_TX_DIV;
 		break;
-	case S32G274A_SCMI_CLK_PFE1_RX_SGMII:
-	case S32G274A_SCMI_CLK_PFE1_RX_RGMII:
+	case S32G_SCMI_CLK_PFE1_RX_SGMII:
+	case S32G_SCMI_CLK_PFE1_RX_RGMII:
 		if (clk_id)
-			*clk_id = S32G274A_CLK_PFE_MAC1_RX;
+			*clk_id = S32G_CLK_PFE_MAC1_RX;
 		break;
-	case S32G274A_SCMI_CLK_PFE1_TX_SGMII:
-	case S32G274A_SCMI_CLK_PFE1_TX_RGMII:
+	case S32G_SCMI_CLK_PFE1_TX_SGMII:
+	case S32G_SCMI_CLK_PFE1_TX_RGMII:
 		if (clk_id)
-			*clk_id = S32G274A_CLK_PFE_MAC1_TX;
+			*clk_id = S32G_CLK_PFE_MAC1_TX;
 		break;
-	case S32G274A_SCMI_CLK_PFE2_RX_SGMII:
-	case S32G274A_SCMI_CLK_PFE2_RX_RGMII:
+	case S32G_SCMI_CLK_PFE2_RX_SGMII:
+	case S32G_SCMI_CLK_PFE2_RX_RGMII:
 		if (clk_id)
-			*clk_id = S32G274A_CLK_PFE_MAC2_RX;
+			*clk_id = S32G_CLK_PFE_MAC2_RX;
 		break;
-	case S32G274A_SCMI_CLK_PFE2_TX_SGMII:
-	case S32G274A_SCMI_CLK_PFE2_TX_RGMII:
+	case S32G_SCMI_CLK_PFE2_TX_SGMII:
+	case S32G_SCMI_CLK_PFE2_TX_RGMII:
 		if (clk_id)
-			*clk_id = S32G274A_CLK_PFE_MAC2_TX;
+			*clk_id = S32G_CLK_PFE_MAC2_TX;
 		break;
 	default:
 		return -EINVAL;
@@ -83,10 +83,10 @@ int plat_scmi_id2clk(u32 scmi_clk_id, u32 *clk_id)
 	if (!clk_id)
 		return -EINVAL;
 
-	if (INDEX(scmi_clk_id) >= ARRAY_SIZE(s32g274a_scmi_ids))
+	if (INDEX(scmi_clk_id) >= ARRAY_SIZE(s32g_scmi_ids))
 		return -EINVAL;
 
-	*clk_id = s32g274a_scmi_ids[INDEX(scmi_clk_id)];
+	*clk_id = s32g_scmi_ids[INDEX(scmi_clk_id)];
 	if (!*clk_id) {
 		pr_err("Unhandled clock: %u\n", scmi_clk_id);
 		return -EINVAL;
@@ -99,7 +99,7 @@ int plat_compound_clk_get(struct clk *clk)
 {
 	u32 scmi_clk_id = clk->id;
 
-	if (INDEX(scmi_clk_id) >= ARRAY_SIZE(s32g274a_scmi_ids))
+	if (INDEX(scmi_clk_id) >= ARRAY_SIZE(s32g_scmi_ids))
 		return -EINVAL;
 
 	if (s32g_compound2clkid(scmi_clk_id, NULL)) {
@@ -115,16 +115,16 @@ static int set_mac0_rx_parent(struct clk *clk)
 	u32 rx_id;
 	u32 clk_id = clk->id;
 
-	if (clk_id == S32G274A_SCMI_CLK_PFE0_RX_SGMII) {
-		rx_id = S32G274A_CLK_SERDES1_LANE0_CDR;
-	} else if (clk_id == S32G274A_SCMI_CLK_PFE0_RX_RGMII) {
-		rx_id = S32G274A_CLK_PFE_MAC0_EXT_RX;
+	if (clk_id == S32G_SCMI_CLK_PFE0_RX_SGMII) {
+		rx_id = S32G_CLK_SERDES1_LANE0_CDR;
+	} else if (clk_id == S32G_SCMI_CLK_PFE0_RX_RGMII) {
+		rx_id = S32G_CLK_PFE_MAC0_EXT_RX;
 	} else {
 		pr_err("Invalid PFE0 RX mode\n");
 		return -EINVAL;
 	}
 
-	return cc_set_mux_parent(clk, S32G274A_CLK_MC_CGM2_MUX4, rx_id);
+	return cc_set_mux_parent(clk, S32G_CLK_MC_CGM2_MUX4, rx_id);
 }
 
 static int set_mac0_tx_parent(struct clk *clk)
@@ -132,16 +132,16 @@ static int set_mac0_tx_parent(struct clk *clk)
 	u32 tx_id;
 	u32 clk_id = clk->id;
 
-	if (clk_id == S32G274A_SCMI_CLK_PFE0_TX_SGMII) {
-		tx_id = S32G274A_CLK_SERDES1_LANE0_TX;
-	} else if (clk_id == S32G274A_SCMI_CLK_PFE0_TX_RGMII) {
+	if (clk_id == S32G_SCMI_CLK_PFE0_TX_SGMII) {
+		tx_id = S32G_CLK_SERDES1_LANE0_TX;
+	} else if (clk_id == S32G_SCMI_CLK_PFE0_TX_RGMII) {
 		tx_id = S32GEN1_CLK_PERIPH_PLL_PHI5;
 	} else {
 		pr_err("Invalid PFE0 TX mode\n");
 		return -EINVAL;
 	}
 
-	return cc_set_mux_parent(clk, S32G274A_CLK_MC_CGM2_MUX1, tx_id);
+	return cc_set_mux_parent(clk, S32G_CLK_MC_CGM2_MUX1, tx_id);
 }
 
 static int set_mac1_rx_parent(struct clk *clk)
@@ -149,16 +149,16 @@ static int set_mac1_rx_parent(struct clk *clk)
 	u32 rx_id;
 	u32 clk_id = clk->id;
 
-	if (clk_id == S32G274A_SCMI_CLK_PFE1_RX_SGMII) {
-		rx_id = S32G274A_CLK_SERDES1_LANE1_CDR;
-	} else if (clk_id == S32G274A_SCMI_CLK_PFE1_RX_RGMII) {
-		rx_id = S32G274A_CLK_PFE_MAC1_EXT_RX;
+	if (clk_id == S32G_SCMI_CLK_PFE1_RX_SGMII) {
+		rx_id = S32G_CLK_SERDES1_LANE1_CDR;
+	} else if (clk_id == S32G_SCMI_CLK_PFE1_RX_RGMII) {
+		rx_id = S32G_CLK_PFE_MAC1_EXT_RX;
 	} else {
 		pr_err("Invalid PFE1 RX mode\n");
 		return -EINVAL;
 	}
 
-	return cc_set_mux_parent(clk, S32G274A_CLK_MC_CGM2_MUX5, rx_id);
+	return cc_set_mux_parent(clk, S32G_CLK_MC_CGM2_MUX5, rx_id);
 }
 
 static int set_mac1_tx_parent(struct clk *clk)
@@ -166,16 +166,16 @@ static int set_mac1_tx_parent(struct clk *clk)
 	u32 tx_id;
 	u32 clk_id = clk->id;
 
-	if (clk_id == S32G274A_SCMI_CLK_PFE1_TX_SGMII) {
-		tx_id = S32G274A_CLK_SERDES1_LANE1_TX;
-	} else if (clk_id == S32G274A_SCMI_CLK_PFE1_TX_RGMII) {
+	if (clk_id == S32G_SCMI_CLK_PFE1_TX_SGMII) {
+		tx_id = S32G_CLK_SERDES1_LANE1_TX;
+	} else if (clk_id == S32G_SCMI_CLK_PFE1_TX_RGMII) {
 		tx_id = S32GEN1_CLK_PERIPH_PLL_PHI5;
 	} else {
 		pr_err("Invalid PFE1 TX mode\n");
 		return -EINVAL;
 	}
 
-	return cc_set_mux_parent(clk, S32G274A_CLK_MC_CGM2_MUX2, tx_id);
+	return cc_set_mux_parent(clk, S32G_CLK_MC_CGM2_MUX2, tx_id);
 }
 
 static int set_mac2_rx_parent(struct clk *clk)
@@ -183,16 +183,16 @@ static int set_mac2_rx_parent(struct clk *clk)
 	u32 rx_id;
 	u32 clk_id = clk->id;
 
-	if (clk_id == S32G274A_SCMI_CLK_PFE2_RX_SGMII) {
-		rx_id = S32G274A_CLK_SERDES0_LANE1_CDR;
-	} else if (clk_id == S32G274A_SCMI_CLK_PFE2_RX_RGMII) {
-		rx_id = S32G274A_CLK_PFE_MAC2_EXT_RX;
+	if (clk_id == S32G_SCMI_CLK_PFE2_RX_SGMII) {
+		rx_id = S32G_CLK_SERDES0_LANE1_CDR;
+	} else if (clk_id == S32G_SCMI_CLK_PFE2_RX_RGMII) {
+		rx_id = S32G_CLK_PFE_MAC2_EXT_RX;
 	} else {
 		pr_err("Invalid PFE2 RX mode\n");
 		return -EINVAL;
 	}
 
-	return cc_set_mux_parent(clk, S32G274A_CLK_MC_CGM2_MUX6, rx_id);
+	return cc_set_mux_parent(clk, S32G_CLK_MC_CGM2_MUX6, rx_id);
 }
 
 static int set_mac2_tx_parent(struct clk *clk)
@@ -200,16 +200,16 @@ static int set_mac2_tx_parent(struct clk *clk)
 	u32 tx_id;
 	u32 clk_id = clk->id;
 
-	if (clk_id == S32G274A_SCMI_CLK_PFE2_TX_SGMII) {
-		tx_id = S32G274A_CLK_SERDES0_LANE1_TX;
-	} else if (clk_id == S32G274A_SCMI_CLK_PFE2_TX_RGMII) {
+	if (clk_id == S32G_SCMI_CLK_PFE2_TX_SGMII) {
+		tx_id = S32G_CLK_SERDES0_LANE1_TX;
+	} else if (clk_id == S32G_SCMI_CLK_PFE2_TX_RGMII) {
 		tx_id = S32GEN1_CLK_PERIPH_PLL_PHI5;
 	} else {
 		pr_err("Invalid PFE2 TX mode\n");
 		return -EINVAL;
 	}
 
-	return cc_set_mux_parent(clk, S32G274A_CLK_MC_CGM2_MUX3, tx_id);
+	return cc_set_mux_parent(clk, S32G_CLK_MC_CGM2_MUX3, tx_id);
 }
 
 int plat_compound_clk_set_parents(struct clk *clk)
@@ -223,17 +223,17 @@ int plat_compound_clk_set_parents(struct clk *clk)
 	}
 
 	switch (id) {
-	case S32G274A_CLK_PFE_MAC0_TX_DIV:
+	case S32G_CLK_PFE_MAC0_TX_DIV:
 		return set_mac0_tx_parent(clk);
-	case S32G274A_CLK_PFE_MAC0_RX:
+	case S32G_CLK_PFE_MAC0_RX:
 		return set_mac0_rx_parent(clk);
-	case S32G274A_CLK_PFE_MAC1_TX:
+	case S32G_CLK_PFE_MAC1_TX:
 		return set_mac1_tx_parent(clk);
-	case S32G274A_CLK_PFE_MAC1_RX:
+	case S32G_CLK_PFE_MAC1_RX:
 		return set_mac1_rx_parent(clk);
-	case S32G274A_CLK_PFE_MAC2_TX:
+	case S32G_CLK_PFE_MAC2_TX:
 		return set_mac2_tx_parent(clk);
-	case S32G274A_CLK_PFE_MAC2_RX:
+	case S32G_CLK_PFE_MAC2_RX:
 		return set_mac2_rx_parent(clk);
 	default:
 		pr_err("%s: Invalid clock %d\n", __func__, id);
@@ -249,7 +249,7 @@ int plat_compound_clk_enable(struct clk *clk)
 	int ret;
 
 	if (s32g_compound2clkid(clk_id, &id)) {
-		pr_err("Invalid s32g274a compound clock : %u\n", clk_id);
+		pr_err("Invalid s32g compound clock : %u\n", clk_id);
 		return -EINVAL;
 	}
 
@@ -276,7 +276,7 @@ ulong plat_compound_clk_set_rate(struct clk *clk, ulong rate)
 	u32 id;
 	int ret;
 
-	if (INDEX(scmi_clk_id) >= ARRAY_SIZE(s32g274a_scmi_ids))
+	if (INDEX(scmi_clk_id) >= ARRAY_SIZE(s32g_scmi_ids))
 		return -EINVAL;
 
 	ret = plat_compound_clk_set_parents(clk);
diff --git a/include/dt-bindings/clock/s32g-clock.h b/include/dt-bindings/clock/s32g-clock.h
index 4c55f790eb..d9309b0d45 100644
--- a/include/dt-bindings/clock/s32g-clock.h
+++ b/include/dt-bindings/clock/s32g-clock.h
@@ -1,65 +1,65 @@
 /* SPDX-License-Identifier: BSD-3-Clause */
 /*
- * Copyright 2020 NXP
+ * Copyright 2020-2021 NXP
  */
 
-#ifndef __DT_BINDINGS_CLOCK_S32G274A_H
-#define __DT_BINDINGS_CLOCK_S32G274A_H
+#ifndef __DT_BINDINGS_CLOCK_S32G_H
+#define __DT_BINDINGS_CLOCK_S32G_H
 
 #include <dt-bindings/clock/s32gen1-clock.h>
 
-#define S32G274A_CLK_ACCEL_PLL_PHI0		S32GEN1_CC_CLK(32)
-#define S32G274A_CLK_ACCEL_PLL_PHI1		S32GEN1_CC_CLK(33)
-#define S32G274A_CLK_SERDES0_LANE1_TX		S32GEN1_CC_CLK(46)
-#define S32G274A_CLK_SERDES0_LANE1_CDR		S32GEN1_CC_CLK(47)
+#define S32G_CLK_ACCEL_PLL_PHI0		S32GEN1_CC_CLK(32)
+#define S32G_CLK_ACCEL_PLL_PHI1		S32GEN1_CC_CLK(33)
+#define S32G_CLK_SERDES0_LANE1_TX	S32GEN1_CC_CLK(46)
+#define S32G_CLK_SERDES0_LANE1_CDR	S32GEN1_CC_CLK(47)
 
-#define S32G274A_CLK_PFE_MAC0_EXT_TX		S32GEN1_CC_CLK(48)
-#define S32G274A_CLK_PFE_MAC0_EXT_RX		S32GEN1_CC_CLK(49)
-#define S32G274A_CLK_PFE_MAC0_EXT_REF		S32GEN1_CC_CLK(50)
-#define S32G274A_CLK_PFE_MAC1_EXT_TX		S32GEN1_CC_CLK(51)
-#define S32G274A_CLK_PFE_MAC1_EXT_RX		S32GEN1_CC_CLK(52)
-#define S32G274A_CLK_PFE_MAC1_EXT_REF		S32GEN1_CC_CLK(53)
-#define S32G274A_CLK_PFE_MAC2_EXT_TX		S32GEN1_CC_CLK(54)
-#define S32G274A_CLK_PFE_MAC2_EXT_RX		S32GEN1_CC_CLK(55)
-#define S32G274A_CLK_PFE_MAC2_EXT_REF		S32GEN1_CC_CLK(56)
+#define S32G_CLK_PFE_MAC0_EXT_TX	S32GEN1_CC_CLK(48)
+#define S32G_CLK_PFE_MAC0_EXT_RX	S32GEN1_CC_CLK(49)
+#define S32G_CLK_PFE_MAC0_EXT_REF	S32GEN1_CC_CLK(50)
+#define S32G_CLK_PFE_MAC1_EXT_TX	S32GEN1_CC_CLK(51)
+#define S32G_CLK_PFE_MAC1_EXT_RX	S32GEN1_CC_CLK(52)
+#define S32G_CLK_PFE_MAC1_EXT_REF	S32GEN1_CC_CLK(53)
+#define S32G_CLK_PFE_MAC2_EXT_TX	S32GEN1_CC_CLK(54)
+#define S32G_CLK_PFE_MAC2_EXT_RX	S32GEN1_CC_CLK(55)
+#define S32G_CLK_PFE_MAC2_EXT_REF	S32GEN1_CC_CLK(56)
 
-#define S32G274A_CLK_SERDES1_LANE0_TX		S32GEN1_CC_CLK(57)
-#define S32G274A_CLK_SERDES1_LANE0_CDR		S32GEN1_CC_CLK(58)
+#define S32G_CLK_SERDES1_LANE0_TX	S32GEN1_CC_CLK(57)
+#define S32G_CLK_SERDES1_LANE0_CDR	S32GEN1_CC_CLK(58)
 
-#define S32G274A_CLK_PFE_MAC0_REF_DIV		S32GEN1_CC_CLK(59)
-#define S32G274A_CLK_PFE_MAC1_REF_DIV		S32GEN1_CC_CLK(60)
-#define S32G274A_CLK_PFE_MAC2_REF_DIV		S32GEN1_CC_CLK(61)
-#define S32G274A_CLK_SERDES1_LANE1_TX		S32GEN1_CC_CLK(62)
+#define S32G_CLK_PFE_MAC0_REF_DIV	S32GEN1_CC_CLK(59)
+#define S32G_CLK_PFE_MAC1_REF_DIV	S32GEN1_CC_CLK(60)
+#define S32G_CLK_PFE_MAC2_REF_DIV	S32GEN1_CC_CLK(61)
+#define S32G_CLK_SERDES1_LANE1_TX	S32GEN1_CC_CLK(62)
 
-#define S32G274A_CLK_SERDES1_LANE1_CDR		S32GEN1_CC_CLK(63)
+#define S32G_CLK_SERDES1_LANE1_CDR	S32GEN1_CC_CLK(63)
 
-#define S32G274A_CLK(N)			S32GEN1_PLAT_CLK(N)
-#define S32G274A_CLK_INDEX(N)		S32GEN1_PLAT_ARRAY_INDEX(N)
+#define S32G_CLK(N)			S32GEN1_PLAT_CLK(N)
+#define S32G_CLK_INDEX(N)		S32GEN1_PLAT_ARRAY_INDEX(N)
 
 /* PFE_MAC0 */
-#define S32G274A_CLK_PFE_MAC0_TX_DIV	S32G274A_CLK(0)
-#define S32G274A_CLK_PFE_MAC0_RX	S32G274A_CLK(1)
+#define S32G_CLK_PFE_MAC0_TX_DIV	S32G_CLK(0)
+#define S32G_CLK_PFE_MAC0_RX		S32G_CLK(1)
 
 /* PFE_MAC1 */
-#define S32G274A_CLK_PFE_MAC1_TX	S32G274A_CLK(2)
-#define S32G274A_CLK_PFE_MAC1_RX	S32G274A_CLK(3)
+#define S32G_CLK_PFE_MAC1_TX		S32G_CLK(2)
+#define S32G_CLK_PFE_MAC1_RX		S32G_CLK(3)
 
 /* PFE_MAC2 */
-#define S32G274A_CLK_PFE_MAC2_TX	S32G274A_CLK(4)
-#define S32G274A_CLK_PFE_MAC2_RX	S32G274A_CLK(5)
+#define S32G_CLK_PFE_MAC2_TX		S32G_CLK(4)
+#define S32G_CLK_PFE_MAC2_RX		S32G_CLK(5)
 
-#define S32G274A_CLK_PFE_SYS		S32G274A_CLK(6)
-#define S32G274A_CLK_PFE_PE		S32G274A_CLK(7)
+#define S32G_CLK_PFE_SYS		S32G_CLK(6)
+#define S32G_CLK_PFE_PE			S32G_CLK(7)
 
-#define S32G274A_CLK_MC_CGM2_MUX0	S32G274A_CLK(8)
-#define S32G274A_CLK_MC_CGM2_MUX1	S32G274A_CLK(9)
-#define S32G274A_CLK_MC_CGM2_MUX2	S32G274A_CLK(10)
-#define S32G274A_CLK_MC_CGM2_MUX3	S32G274A_CLK(11)
-#define S32G274A_CLK_MC_CGM2_MUX4	S32G274A_CLK(12)
-#define S32G274A_CLK_MC_CGM2_MUX5	S32G274A_CLK(13)
-#define S32G274A_CLK_MC_CGM2_MUX6	S32G274A_CLK(14)
-#define S32G274A_CLK_MC_CGM2_MUX7	S32G274A_CLK(15)
-#define S32G274A_CLK_MC_CGM2_MUX8	S32G274A_CLK(16)
-#define S32G274A_CLK_MC_CGM2_MUX9	S32G274A_CLK(17)
+#define S32G_CLK_MC_CGM2_MUX0		S32G_CLK(8)
+#define S32G_CLK_MC_CGM2_MUX1		S32G_CLK(9)
+#define S32G_CLK_MC_CGM2_MUX2		S32G_CLK(10)
+#define S32G_CLK_MC_CGM2_MUX3		S32G_CLK(11)
+#define S32G_CLK_MC_CGM2_MUX4		S32G_CLK(12)
+#define S32G_CLK_MC_CGM2_MUX5		S32G_CLK(13)
+#define S32G_CLK_MC_CGM2_MUX6		S32G_CLK(14)
+#define S32G_CLK_MC_CGM2_MUX7		S32G_CLK(15)
+#define S32G_CLK_MC_CGM2_MUX8		S32G_CLK(16)
+#define S32G_CLK_MC_CGM2_MUX9		S32G_CLK(17)
 
-#endif /* __DT_BINDINGS_CLOCK_S32G274A_H */
+#endif /* __DT_BINDINGS_CLOCK_S32G_H */
diff --git a/include/dt-bindings/clock/s32g-scmi-clock.h b/include/dt-bindings/clock/s32g-scmi-clock.h
index b77cc4aa99..0babeedfed 100644
--- a/include/dt-bindings/clock/s32g-scmi-clock.h
+++ b/include/dt-bindings/clock/s32g-scmi-clock.h
@@ -1,65 +1,65 @@
 /* SPDX-License-Identifier: BSD-3-Clause */
 /*
- * Copyright 2020 NXP
+ * Copyright 2020-2021 NXP
  */
-#ifndef __DT_BINDINGS_SCMI_CLOCK_S32G274A_H
-#define __DT_BINDINGS_SCMI_CLOCK_S32G274A_H
+#ifndef __DT_BINDINGS_SCMI_CLOCK_S32G_H
+#define __DT_BINDINGS_SCMI_CLOCK_S32G_H
 
 #include <dt-bindings/clock/s32gen1-scmi-clock.h>
 
 /* USB */
-#define S32G274A_SCMI_CLK_USB_MEM		S32GEN1_PLAT_SCMI_CLK(0)
-#define S32G274A_SCMI_CLK_USB_LOW		S32GEN1_PLAT_SCMI_CLK(1)
+#define S32G_SCMI_CLK_USB_MEM		S32GEN1_PLAT_SCMI_CLK(0)
+#define S32G_SCMI_CLK_USB_LOW		S32GEN1_PLAT_SCMI_CLK(1)
 
-#define S32G274A_SCMI_CLK_PFE_AXI		S32GEN1_PLAT_SCMI_CLK(2)
-#define S32G274A_SCMI_CLK_PFE_APB		S32GEN1_PLAT_SCMI_CLK(3)
-#define S32G274A_SCMI_CLK_PFE_PE		S32GEN1_PLAT_SCMI_CLK(4)
-#define S32G274A_SCMI_CLK_PFE_TS		S32GEN1_PLAT_SCMI_CLK(5)
+#define S32G_SCMI_CLK_PFE_AXI		S32GEN1_PLAT_SCMI_CLK(2)
+#define S32G_SCMI_CLK_PFE_APB		S32GEN1_PLAT_SCMI_CLK(3)
+#define S32G_SCMI_CLK_PFE_PE		S32GEN1_PLAT_SCMI_CLK(4)
+#define S32G_SCMI_CLK_PFE_TS		S32GEN1_PLAT_SCMI_CLK(5)
 
 /* PFE 0 */
 /* SGMII RX: PFE_MAC_0_RX_CLK -> SERDES_1_LANE_0_CDR_CLK */
-#define S32G274A_SCMI_CLK_PFE0_RX_SGMII		S32GEN1_PLAT_SCMI_CLK(6)
+#define S32G_SCMI_CLK_PFE0_RX_SGMII		S32GEN1_PLAT_SCMI_CLK(6)
 /* SGMII TX: PFE_MAC_0_TX_CLK -> SERDES_1_LANE_0_TX_CLK  */
-#define S32G274A_SCMI_CLK_PFE0_TX_SGMII		S32GEN1_PLAT_SCMI_CLK(7)
+#define S32G_SCMI_CLK_PFE0_TX_SGMII		S32GEN1_PLAT_SCMI_CLK(7)
 /* RGMII RX: PFE_MAC_0_RX_CLK -> PFE_MAC0_RX_CLK_I */
-#define S32G274A_SCMI_CLK_PFE0_RX_RGMII		S32GEN1_PLAT_SCMI_CLK(8)
+#define S32G_SCMI_CLK_PFE0_RX_RGMII		S32GEN1_PLAT_SCMI_CLK(8)
 /* RGMII TX: PFE_MAC_0_TX_CLK -> PERIPH_PLL_PHI5_CLK */
-#define S32G274A_SCMI_CLK_PFE0_TX_RGMII		S32GEN1_PLAT_SCMI_CLK(9)
-#define S32G274A_SCMI_CLK_PFE0_RX_RMII		S32GEN1_PLAT_SCMI_CLK(10)
-#define S32G274A_SCMI_CLK_PFE0_TX_RMII		S32GEN1_PLAT_SCMI_CLK(11)
-#define S32G274A_SCMI_CLK_PFE0_RX_MII		S32GEN1_PLAT_SCMI_CLK(12)
-#define S32G274A_SCMI_CLK_PFE0_TX_MII		S32GEN1_PLAT_SCMI_CLK(13)
+#define S32G_SCMI_CLK_PFE0_TX_RGMII		S32GEN1_PLAT_SCMI_CLK(9)
+#define S32G_SCMI_CLK_PFE0_RX_RMII		S32GEN1_PLAT_SCMI_CLK(10)
+#define S32G_SCMI_CLK_PFE0_TX_RMII		S32GEN1_PLAT_SCMI_CLK(11)
+#define S32G_SCMI_CLK_PFE0_RX_MII		S32GEN1_PLAT_SCMI_CLK(12)
+#define S32G_SCMI_CLK_PFE0_TX_MII		S32GEN1_PLAT_SCMI_CLK(13)
 
 /* PFE 1 */
 /* SGMII RX: PFE_MAC_1_RX_CLK -> SERDES_1_LANE_1_CDR_CLK */
-#define S32G274A_SCMI_CLK_PFE1_RX_SGMII		S32GEN1_PLAT_SCMI_CLK(14)
+#define S32G_SCMI_CLK_PFE1_RX_SGMII		S32GEN1_PLAT_SCMI_CLK(14)
 /* SGMII TX: PFE_MAC_1_TX_CLK -> SERDES_1_LANE_1_TX_CLK  */
-#define S32G274A_SCMI_CLK_PFE1_TX_SGMII		S32GEN1_PLAT_SCMI_CLK(15)
+#define S32G_SCMI_CLK_PFE1_TX_SGMII		S32GEN1_PLAT_SCMI_CLK(15)
 /* RGMII RX: PFE_MAC_1_RX_CLK ->  PFE_MAC1_RX_CLK_I */
-#define S32G274A_SCMI_CLK_PFE1_RX_RGMII		S32GEN1_PLAT_SCMI_CLK(16)
+#define S32G_SCMI_CLK_PFE1_RX_RGMII		S32GEN1_PLAT_SCMI_CLK(16)
 /* RGMII TX: PFE_MAC_1_TX_CLK ->  PERIPH_PLL_PHI5_CLK */
-#define S32G274A_SCMI_CLK_PFE1_TX_RGMII		S32GEN1_PLAT_SCMI_CLK(17)
-#define S32G274A_SCMI_CLK_PFE1_RX_RMII		S32GEN1_PLAT_SCMI_CLK(18)
-#define S32G274A_SCMI_CLK_PFE1_TX_RMII		S32GEN1_PLAT_SCMI_CLK(19)
-#define S32G274A_SCMI_CLK_PFE1_RX_MII		S32GEN1_PLAT_SCMI_CLK(20)
-#define S32G274A_SCMI_CLK_PFE1_TX_MII		S32GEN1_PLAT_SCMI_CLK(21)
+#define S32G_SCMI_CLK_PFE1_TX_RGMII		S32GEN1_PLAT_SCMI_CLK(17)
+#define S32G_SCMI_CLK_PFE1_RX_RMII		S32GEN1_PLAT_SCMI_CLK(18)
+#define S32G_SCMI_CLK_PFE1_TX_RMII		S32GEN1_PLAT_SCMI_CLK(19)
+#define S32G_SCMI_CLK_PFE1_RX_MII		S32GEN1_PLAT_SCMI_CLK(20)
+#define S32G_SCMI_CLK_PFE1_TX_MII		S32GEN1_PLAT_SCMI_CLK(21)
 
 /* PFE 2 */
 /* SGMII RX: PFE_MAC_2_RX_CLK -> SERDES_0_LANE_1_CDR_CLK */
-#define S32G274A_SCMI_CLK_PFE2_RX_SGMII		S32GEN1_PLAT_SCMI_CLK(22)
+#define S32G_SCMI_CLK_PFE2_RX_SGMII		S32GEN1_PLAT_SCMI_CLK(22)
 /* SGMII TX: PFE_MAC_2_TX_CLK -> SERDES_0_LANE_1_TX_CLK  */
-#define S32G274A_SCMI_CLK_PFE2_TX_SGMII		S32GEN1_PLAT_SCMI_CLK(23)
+#define S32G_SCMI_CLK_PFE2_TX_SGMII		S32GEN1_PLAT_SCMI_CLK(23)
 /* RGMII RX: PFE_MAC_2_RX_CLK ->  PFE_MAC2_RX_CLK_I */
-#define S32G274A_SCMI_CLK_PFE2_RX_RGMII		S32GEN1_PLAT_SCMI_CLK(24)
+#define S32G_SCMI_CLK_PFE2_RX_RGMII		S32GEN1_PLAT_SCMI_CLK(24)
 /* RGMII TX: PFE_MAC_2_TX_CLK ->  PERIPH_PLL_PHI5_CLK */
-#define S32G274A_SCMI_CLK_PFE2_TX_RGMII		S32GEN1_PLAT_SCMI_CLK(25)
-#define S32G274A_SCMI_CLK_PFE2_RX_RMII		S32GEN1_PLAT_SCMI_CLK(26)
-#define S32G274A_SCMI_CLK_PFE2_TX_RMII		S32GEN1_PLAT_SCMI_CLK(27)
-#define S32G274A_SCMI_CLK_PFE2_RX_MII		S32GEN1_PLAT_SCMI_CLK(28)
-#define S32G274A_SCMI_CLK_PFE2_TX_MII		S32GEN1_PLAT_SCMI_CLK(29)
+#define S32G_SCMI_CLK_PFE2_TX_RGMII		S32GEN1_PLAT_SCMI_CLK(25)
+#define S32G_SCMI_CLK_PFE2_RX_RMII		S32GEN1_PLAT_SCMI_CLK(26)
+#define S32G_SCMI_CLK_PFE2_TX_RMII		S32GEN1_PLAT_SCMI_CLK(27)
+#define S32G_SCMI_CLK_PFE2_RX_MII		S32GEN1_PLAT_SCMI_CLK(28)
+#define S32G_SCMI_CLK_PFE2_TX_MII		S32GEN1_PLAT_SCMI_CLK(29)
 
 /* LLCE */
-#define S32G274A_SCMI_CLK_LLCE_SYS		S32GEN1_PLAT_SCMI_CLK(30)
-#define S32G274A_SCMI_CLK_LLCE_CAN_PE		S32GEN1_PLAT_SCMI_CLK(31)
+#define S32G_SCMI_CLK_LLCE_SYS			S32GEN1_PLAT_SCMI_CLK(30)
+#define S32G_SCMI_CLK_LLCE_CAN_PE		S32GEN1_PLAT_SCMI_CLK(31)
 
 #endif
-- 
2.25.1

