From 15fdd4b9c8df618f22eba135fe44b6254fa79dab Mon Sep 17 00:00:00 2001
From: Xulin Sun <xulin.sun@windriver.com>
Date: Mon, 17 Aug 2020 09:47:14 +0800
Subject: [PATCH] drivers: net: dwc_eth_qos: correct the invalidation
 descriptor pointer

This commit gets from the NXP draft. In order to resolve the issue
"GMAC rx hangs when ring buffer becomes full". Here correct the invalidation
descriptor pointer for receiving package operation in case no descriptor is
available.

Signed-off-by: Xulin Sun <xulin.sun@windriver.com>
---
 drivers/net/dwc_eth_qos_core.c | 34 +++++++++++++++++++++++++++++-----
 1 file changed, 29 insertions(+), 5 deletions(-)
 mode change 100644 => 100755 drivers/net/dwc_eth_qos_core.c

diff --git a/drivers/net/dwc_eth_qos_core.c b/drivers/net/dwc_eth_qos_core.c
old mode 100644
new mode 100755
index 0a8c1ea5d9..511b16e525
--- a/drivers/net/dwc_eth_qos_core.c
+++ b/drivers/net/dwc_eth_qos_core.c
@@ -700,7 +700,7 @@ static int eqos_start(struct udevice *dev)
 		struct eqos_desc *rx_desc = &(eqos->rx_descs[i]);
 		rx_desc->des0 = (u32)(ulong)(eqos->rx_dma_buf +
 					     (i * EQOS_MAX_PACKET_SIZE));
-		rx_desc->des3 |= EQOS_DESC3_OWN | EQOS_DESC3_BUF1V;
+		rx_desc->des3 = EQOS_DESC3_OWN | EQOS_DESC3_BUF1V;
 		eqos->config->ops->eqos_flush_desc(rx_desc);
 	}
 	eqos->config->ops->eqos_flush_desc(eqos->descs);
@@ -832,7 +832,8 @@ int eqos_send(struct udevice *dev, void *packet, int length)
 	tx_desc->des3 = EQOS_DESC3_OWN | EQOS_DESC3_FD | EQOS_DESC3_LD | length;
 	eqos->config->ops->eqos_flush_desc(tx_desc);
 
-	writel((ulong)(tx_desc + 1), &eqos->dma_regs->ch0_txdesc_tail_pointer);
+	writel((ulong)(&(eqos->tx_descs[eqos->tx_desc_idx])),
+		&eqos->dma_regs->ch0_txdesc_tail_pointer);
 
 	for (i = 0; i < 1000000; i++) {
 		eqos->config->ops->eqos_inval_desc(tx_desc);
@@ -859,8 +860,18 @@ int eqos_recv(struct udevice *dev, int flags, uchar **packetp)
 	eqos->config->ops->eqos_inval_desc(rx_desc);
 
 	if (rx_desc->des3 & EQOS_DESC3_OWN) {
-		debug("%s: RX packet not available\n", __func__);
-		return -EAGAIN;
+		int n = (eqos->rx_desc_idx + 1) % EQOS_DESCRIPTORS_RX;
+
+		rx_desc = &eqos->rx_descs[n];
+		eqos->config->ops->eqos_inval_desc(rx_desc);
+
+		if (rx_desc->des3 & EQOS_DESC3_OWN) {
+			debug("%s: RX packet not available\n", __func__);
+			return -EAGAIN;
+		}
+
+		eqos->rx_desc_idx = n;
+
 	}
 
 	*packetp = eqos->rx_dma_buf +
@@ -890,6 +901,15 @@ int eqos_free_pkt(struct udevice *dev, uchar *packet, int length)
 	}
 
 	rx_desc = &(eqos->rx_descs[eqos->rx_desc_idx]);
+
+	rx_desc->des0 = 0;
+	/*
+	 * Make sure that DMA access to packet is disabled
+	 * prior further descriptor configuration.
+	 */
+	mb();
+	eqos->config->ops->eqos_flush_desc(rx_desc);
+	eqos->config->ops->eqos_inval_buffer(packet, length);
 	rx_desc->des0 = (u32)(ulong)packet;
 	rx_desc->des1 = 0;
 	rx_desc->des2 = 0;
@@ -898,7 +918,7 @@ int eqos_free_pkt(struct udevice *dev, uchar *packet, int length)
 	 * writes to the rest of the descriptor too.
 	 */
 	mb();
-	rx_desc->des3 |= EQOS_DESC3_OWN | EQOS_DESC3_BUF1V;
+	rx_desc->des3 = EQOS_DESC3_OWN | EQOS_DESC3_BUF1V;
 	eqos->config->ops->eqos_flush_desc(rx_desc);
 
 	writel((ulong)rx_desc, &eqos->dma_regs->ch0_rxdesc_tail_pointer);
@@ -950,6 +970,10 @@ static int eqos_probe_resources_core(struct udevice *dev)
 		ret = -ENOMEM;
 		goto err_free_rx_dma_buf;
 	}
+
+	eqos->config->ops->eqos_inval_buffer(eqos->rx_dma_buf,
+			EQOS_MAX_PACKET_SIZE * EQOS_DESCRIPTORS_RX);
+
 	debug("%s: rx_pkt=%p\n", __func__, eqos->rx_pkt);
 
 	debug("%s: OK\n", __func__);
-- 
2.17.1

