From affc464c5fe39641387549fa4f4943bd1911870d Mon Sep 17 00:00:00 2001
From: Ghennadi Procopciuc <ghennadi.procopciuc@nxp.com>
Date: Tue, 18 Jan 2022 12:06:40 +0200
Subject: [PATCH 22/64] misc: sja1105: Make configuration part of the driver

The selection of SJA1105 switch configuration is attached to the
match string to avoid code split between driver and board implementation.

Issue: ALB-8329
Upstream-Status: Pending 

Signed-off-by: Ghennadi Procopciuc <ghennadi.procopciuc@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 arch/arm/dts/fsl-s32gxxxaevb.dtsi          |   4 +-
 board/freescale/s32-gen1/Makefile          |   9 -
 board/freescale/s32-gen1/sja1105_cfg_evb.c | 112 --------
 board/freescale/s32-gen1/sja1105_cfg_rdb.c | 112 --------
 drivers/misc/Makefile                      |   1 -
 drivers/misc/sja1105.c                     | 314 +++++++++++++++------
 drivers/misc/sja1105_cfg.c                 |  33 ---
 drivers/misc/sja1105_ll.h                  |   4 +-
 include/sja1105_cfg.h                      |  14 -
 9 files changed, 237 insertions(+), 366 deletions(-)
 delete mode 100644 board/freescale/s32-gen1/sja1105_cfg_evb.c
 delete mode 100644 board/freescale/s32-gen1/sja1105_cfg_rdb.c
 delete mode 100644 drivers/misc/sja1105_cfg.c
 delete mode 100644 include/sja1105_cfg.h

diff --git a/arch/arm/dts/fsl-s32gxxxaevb.dtsi b/arch/arm/dts/fsl-s32gxxxaevb.dtsi
index bab63cb31a..dd8861aad6 100644
--- a/arch/arm/dts/fsl-s32gxxxaevb.dtsi
+++ b/arch/arm/dts/fsl-s32gxxxaevb.dtsi
@@ -1,6 +1,6 @@
 // SPDX-License-Identifier: GPL-2.0-or-later
 /*
- * Copyright 2019-2021 NXP
+ * Copyright 2019-2022 NXP
  */
 
 #include <dt-bindings/gpio/gpio.h>
@@ -45,7 +45,7 @@
 	status = "okay";
 
 	ethernet-switch@0 {
-		compatible = "nxp,sja1105-fw-loader";
+		compatible = "nxp,sja1105-s32gevb-fw-loader";
 		spi-max-frequency = <1000000>;
 		reg = <0>;
 		spi-cpha;
diff --git a/board/freescale/s32-gen1/Makefile b/board/freescale/s32-gen1/Makefile
index b039123e9e..da38778c83 100644
--- a/board/freescale/s32-gen1/Makefile
+++ b/board/freescale/s32-gen1/Makefile
@@ -74,15 +74,6 @@ obj-$(CONFIG_SYS_FSL_DDRSS) +=	ddr_density.o \
 				s32r45/pie_cfg.o \
 
 endif
-
-ifdef CONFIG_TARGET_S32G2XXAEVB
-obj-$(CONFIG_SJA1105) += sja1105_cfg_evb.o
-else ifdef CONFIG_TARGET_S32G3XXAEVB
-obj-$(CONFIG_SJA1105) += sja1105_cfg_rdb.o
-else ifdef CONFIG_TARGET_S32G274ARDB
-obj-$(CONFIG_SJA1105) += sja1105_cfg_rdb.o
-endif
-
 endif
 
 #########################################################################
diff --git a/board/freescale/s32-gen1/sja1105_cfg_evb.c b/board/freescale/s32-gen1/sja1105_cfg_evb.c
deleted file mode 100644
index 21d001bd28..0000000000
--- a/board/freescale/s32-gen1/sja1105_cfg_evb.c
+++ /dev/null
@@ -1,112 +0,0 @@
-/* SPDX-License-Identifier:    GPL-2.0+
- *
- * Copyright 2019-2020 NXP
- *
- * Contains firmware in octet string format for SJA1105.
- *
- */
-
-#include <common.h>
-#include <errno.h>
-#include <sja1105_cfg.h>
-
-#define SJA1105_VAL_DEVICEID_1_1              0xAE00030EUL
-
-/*
- * Obtained from encoding the S32G274-EVB configuration firmware from
- * sja1105 driver
- * To regenerate this, use the file with the following command:
- * 'xxd -i <filename>'
- */
-unsigned char sja1105p_cfg_1_1_bin[] = {
-	0x0e, 0x03, 0x00, 0xae, 0x00, 0x00, 0x00, 0x05, 0x05, 0x00, 0x00, 0x00,
-	0x2b, 0xa0, 0x1c, 0x9a, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00, 0x25, 0x04,
-	0xc0, 0x8a, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,
-	0xea, 0x9b, 0x8c, 0x4c, 0x00, 0x00, 0x00, 0x06, 0x50, 0x00, 0x00, 0x00,
-	0x6b, 0x25, 0x6f, 0x21, 0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x03,
-	0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x03, 0x00, 0x00, 0xfb, 0xfe,
-	0xff, 0xff, 0xff, 0x03, 0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x03,
-	0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x03, 0x00, 0x00, 0xfb, 0xfe,
-	0xff, 0xff, 0xff, 0x03, 0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x03,
-	0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x03, 0x00, 0x00, 0xfb, 0xfe,
-	0xff, 0xff, 0xff, 0x07, 0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x07,
-	0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x07, 0x00, 0x00, 0xfb, 0xfe,
-	0xff, 0xff, 0xff, 0x07, 0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x07,
-	0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x07, 0x00, 0x00, 0xfb, 0xfe,
-	0xff, 0xff, 0xff, 0x07, 0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x07,
-	0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x0b, 0x00, 0x00, 0xfb, 0xfe,
-	0xff, 0xff, 0xff, 0x0b, 0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x0b,
-	0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x0b, 0x00, 0x00, 0xfb, 0xfe,
-	0xff, 0xff, 0xff, 0x0b, 0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x0b,
-	0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x0b, 0x00, 0x00, 0xfb, 0xfe,
-	0xff, 0xff, 0xff, 0x0b, 0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x0f,
-	0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x0f, 0x00, 0x00, 0xfb, 0xfe,
-	0xff, 0xff, 0xff, 0x0f, 0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x0f,
-	0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x0f, 0x00, 0x00, 0xfb, 0xfe,
-	0xff, 0xff, 0xff, 0x0f, 0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x0f,
-	0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x0f, 0x00, 0x00, 0xfb, 0xfe,
-	0xff, 0xff, 0xff, 0x13, 0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x13,
-	0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x13, 0x00, 0x00, 0xfb, 0xfe,
-	0xff, 0xff, 0xff, 0x13, 0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x13,
-	0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x13, 0x00, 0x00, 0xfb, 0xfe,
-	0xff, 0xff, 0xff, 0x13, 0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x13,
-	0xc1, 0x63, 0x99, 0xe9, 0x00, 0x00, 0x00, 0x07, 0x02, 0x00, 0x00, 0x00,
-	0xf2, 0xcb, 0x0b, 0x7d, 0x00, 0x00, 0x00, 0x58, 0x11, 0xf0, 0x3f, 0x00,
-	0x75, 0x32, 0xfe, 0x68, 0x00, 0x00, 0x00, 0x08, 0x1a, 0x00, 0x00, 0x00,
-	0x53, 0x23, 0xf6, 0x6a, 0x00, 0x00, 0x00, 0x10, 0x8d, 0xf5, 0xbd, 0xf7,
-	0x00, 0x00, 0x00, 0x10, 0x8d, 0xf5, 0x7b, 0xef, 0x00, 0x00, 0x00, 0x10,
-	0x8d, 0xf5, 0xf7, 0xde, 0x00, 0x00, 0x00, 0x10, 0x8d, 0xf5, 0xef, 0xbd,
-	0x00, 0x00, 0x00, 0x10, 0x8d, 0xf5, 0xdf, 0x7b, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x92, 0x24, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x24, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb6,
-	0x6d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x92, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0xda, 0xb6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6c,
-	0xdb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0x00, 0x00, 0x00,
-	0x06, 0xe0, 0x42, 0x67, 0x00, 0x00, 0x00, 0x09, 0x28, 0x00, 0x00, 0x00,
-	0xc9, 0x3a, 0xb4, 0x0d, 0x00, 0x00, 0x00, 0x80, 0x03, 0xac, 0x08, 0xfe,
-	0x01, 0x00, 0x00, 0x00, 0x02, 0x01, 0xfc, 0x08, 0xe4, 0x4f, 0x40, 0xbf,
-	0x02, 0xfb, 0x17, 0xe0, 0xcf, 0x40, 0xff, 0x06, 0xfc, 0x3b, 0xf0, 0xff,
-	0x00, 0x00, 0x00, 0x80, 0x03, 0xac, 0x08, 0xfe, 0x01, 0x00, 0x00, 0x00,
-	0x04, 0x01, 0xfc, 0x08, 0xe4, 0x4f, 0x40, 0xbf, 0x02, 0xfb, 0x17, 0xe0,
-	0xcf, 0x40, 0xff, 0x06, 0xfc, 0x3b, 0xf0, 0xff, 0x00, 0x00, 0x00, 0x80,
-	0x03, 0xac, 0x08, 0xfe, 0x01, 0x00, 0x00, 0x00, 0x04, 0x01, 0xfc, 0x08,
-	0xe4, 0x4f, 0x40, 0xbf, 0x02, 0xfb, 0x17, 0xe0, 0xcf, 0x40, 0xff, 0x06,
-	0xfc, 0x3b, 0xf0, 0xff, 0x00, 0x00, 0x00, 0x80, 0x03, 0xac, 0x08, 0xfe,
-	0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x08, 0xe4, 0x4f, 0x40, 0xbf,
-	0x02, 0xfb, 0x17, 0xe0, 0xcf, 0x40, 0xff, 0x06, 0xfc, 0x3b, 0xf0, 0xff,
-	0x00, 0x00, 0x00, 0x80, 0x03, 0xac, 0x08, 0xfe, 0x01, 0x00, 0x00, 0x00,
-	0x00, 0x01, 0xfc, 0x08, 0xe4, 0x4f, 0x40, 0xbf, 0x02, 0xfb, 0x17, 0xe0,
-	0xcf, 0x40, 0xff, 0x06, 0xfc, 0x3b, 0xf0, 0xff, 0x00, 0x0d, 0x80, 0x44,
-	0x00, 0x00, 0x00, 0x0d, 0x04, 0x00, 0x00, 0x00, 0x8f, 0x8c, 0xd0, 0x12,
-	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x10, 0x80, 0x00, 0x04,
-	0x20, 0x00, 0x01, 0x00, 0x78, 0x1d, 0xe3, 0x34, 0x00, 0x00, 0x00, 0x0e,
-	0x03, 0x00, 0x00, 0x00, 0xe6, 0xce, 0xa7, 0xc8, 0x00, 0xc0, 0x71, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb9, 0x04, 0xf7, 0xc3,
-	0x00, 0x00, 0x00, 0x10, 0x04, 0x00, 0x00, 0x00, 0xbc, 0xdf, 0xa0, 0x8a,
-	0x00, 0x00, 0x00, 0x80, 0xfb, 0x3f, 0xf0, 0x0d, 0x98, 0x80, 0xb7, 0xb2,
-	0xf7, 0x0d, 0x98, 0x40, 0x8c, 0x31, 0xc9, 0xe6, 0x00, 0x00, 0x00, 0x11,
-	0x0b, 0x00, 0x00, 0x00, 0x5a, 0xe6, 0xa3, 0xef, 0x00, 0x00, 0xc0, 0x01,
-	0x00, 0x00, 0x04, 0x42, 0x45, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-	0xff, 0x37, 0x0c, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-	0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x45, 0xd8, 0x05, 0x85, 0xce, 0x00, 0x00, 0x00, 0x4e,
-	0x01, 0x00, 0x00, 0x00, 0x24, 0x5e, 0x5d, 0x3a, 0x00, 0x00, 0x0c, 0x48,
-	0xb2, 0x59, 0xf6, 0xf5, 0x00, 0x00, 0x00, 0x82, 0x15, 0x00, 0x00, 0x00,
-	0x36, 0x9b, 0xc3, 0xc9, 0x12, 0x12, 0x12, 0x12, 0x12, 0x02, 0x02, 0x02,
-	0x12, 0x12, 0x12, 0x12, 0x12, 0x02, 0x02, 0x02, 0x12, 0x12, 0x12, 0x12,
-	0x12, 0x02, 0x02, 0x02, 0x12, 0x12, 0x12, 0x12, 0x12, 0x02, 0x02, 0x02,
-	0x12, 0x12, 0x12, 0x12, 0x12, 0x02, 0x02, 0x02, 0x48, 0x48, 0x00, 0x00,
-	0x23, 0x23, 0x00, 0x00, 0x23, 0x23, 0x00, 0x00, 0x48, 0x48, 0x00, 0x00,
-	0x48, 0x48, 0x00, 0x00, 0x12, 0x04, 0x12, 0x00, 0x07, 0x04, 0x04, 0x12,
-	0x00, 0x00, 0x00, 0x02, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x36, 0x52, 0x55, 0x88, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x3c, 0xf2, 0xe8, 0x3f
-};
-
-
-static struct sja1105_cfgs_s sja1105_cfgs_m[] = {
-	{SJA1105_VAL_DEVICEID_1_1, 0, ARRAY_SIZE(sja1105p_cfg_1_1_bin),
-		sja1105p_cfg_1_1_bin},
-	{0x0UL, 0,   0, NULL}
-};
-struct sja1105_cfgs_s *sja1105_cfgs = &sja1105_cfgs_m[0];
diff --git a/board/freescale/s32-gen1/sja1105_cfg_rdb.c b/board/freescale/s32-gen1/sja1105_cfg_rdb.c
deleted file mode 100644
index efe4ae5e5d..0000000000
--- a/board/freescale/s32-gen1/sja1105_cfg_rdb.c
+++ /dev/null
@@ -1,112 +0,0 @@
-/* SPDX-License-Identifier:    GPL-2.0+
- *
- * Copyright 2019-2020 NXP
- *
- * Contains firmware in octet string format for SJA1105.
- *
- */
-
-#include <common.h>
-#include <errno.h>
-#include <sja1105_cfg.h>
-
-#define SJA1105_VAL_DEVICEID_1_1              0xAE00030EUL
-
-/*
- * Obtained from encoding the S32G-VNP-RDB configuration firmware from
- * sja1105 driver
- * To regenerate this, use the file with the following command:
- * 'xxd -i <filename>'
- */
-unsigned char sja1105p_cfg_1_1_bin[] = {
-	0x0e, 0x03, 0x00, 0xae, 0x00, 0x00, 0x00, 0x05, 0x05, 0x00, 0x00, 0x00,
-	0x2b, 0xa0, 0x1c, 0x9a, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00, 0x25, 0x04,
-	0xc0, 0x8a, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,
-	0xea, 0x9b, 0x8c, 0x4c, 0x00, 0x00, 0x00, 0x06, 0x50, 0x00, 0x00, 0x00,
-	0x6b, 0x25, 0x6f, 0x21, 0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x03,
-	0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x03, 0x00, 0x00, 0xfb, 0xfe,
-	0xff, 0xff, 0xff, 0x03, 0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x03,
-	0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x03, 0x00, 0x00, 0xfb, 0xfe,
-	0xff, 0xff, 0xff, 0x03, 0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x03,
-	0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x03, 0x00, 0x00, 0xfb, 0xfe,
-	0xff, 0xff, 0xff, 0x07, 0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x07,
-	0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x07, 0x00, 0x00, 0xfb, 0xfe,
-	0xff, 0xff, 0xff, 0x07, 0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x07,
-	0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x07, 0x00, 0x00, 0xfb, 0xfe,
-	0xff, 0xff, 0xff, 0x07, 0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x07,
-	0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x0b, 0x00, 0x00, 0xfb, 0xfe,
-	0xff, 0xff, 0xff, 0x0b, 0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x0b,
-	0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x0b, 0x00, 0x00, 0xfb, 0xfe,
-	0xff, 0xff, 0xff, 0x0b, 0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x0b,
-	0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x0b, 0x00, 0x00, 0xfb, 0xfe,
-	0xff, 0xff, 0xff, 0x0b, 0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x0f,
-	0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x0f, 0x00, 0x00, 0xfb, 0xfe,
-	0xff, 0xff, 0xff, 0x0f, 0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x0f,
-	0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x0f, 0x00, 0x00, 0xfb, 0xfe,
-	0xff, 0xff, 0xff, 0x0f, 0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x0f,
-	0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x0f, 0x00, 0x00, 0xfb, 0xfe,
-	0xff, 0xff, 0xff, 0x13, 0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x13,
-	0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x13, 0x00, 0x00, 0xfb, 0xfe,
-	0xff, 0xff, 0xff, 0x13, 0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x13,
-	0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x13, 0x00, 0x00, 0xfb, 0xfe,
-	0xff, 0xff, 0xff, 0x13, 0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x13,
-	0xc1, 0x63, 0x99, 0xe9, 0x00, 0x00, 0x00, 0x07, 0x02, 0x00, 0x00, 0x00,
-	0xf2, 0xcb, 0x0b, 0x7d, 0x00, 0x00, 0x00, 0x58, 0x11, 0xf0, 0x3f, 0x00,
-	0x75, 0x32, 0xfe, 0x68, 0x00, 0x00, 0x00, 0x08, 0x1a, 0x00, 0x00, 0x00,
-	0x53, 0x23, 0xf6, 0x6a, 0x00, 0x00, 0x00, 0x10, 0x8d, 0xf5, 0xbd, 0xf7,
-	0x00, 0x00, 0x00, 0x10, 0x8d, 0xf5, 0x7b, 0xef, 0x00, 0x00, 0x00, 0x10,
-	0x8d, 0xf5, 0xf7, 0xde, 0x00, 0x00, 0x00, 0x10, 0x8d, 0xf5, 0xef, 0xbd,
-	0x00, 0x00, 0x00, 0x10, 0x8d, 0xf5, 0xdf, 0x7b, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x92, 0x24, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x24, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb6,
-	0x6d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x92, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0xda, 0xb6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6c,
-	0xdb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0x00, 0x00, 0x00,
-	0x06, 0xe0, 0x42, 0x67, 0x00, 0x00, 0x00, 0x09, 0x28, 0x00, 0x00, 0x00,
-	0xc9, 0x3a, 0xb4, 0x0d, 0x00, 0x00, 0x00, 0x80, 0x03, 0xac, 0x08, 0xfe,
-	0x01, 0x00, 0x00, 0x00, 0x02, 0x01, 0xfc, 0x08, 0xe4, 0x4f, 0x40, 0xbf,
-	0x02, 0xfb, 0x17, 0xe0, 0xcf, 0x40, 0xff, 0x06, 0xfc, 0x3b, 0xf0, 0xff,
-	0x00, 0x00, 0x00, 0x80, 0x03, 0xac, 0x08, 0xfe, 0x01, 0x00, 0x00, 0x00,
-	0x04, 0x01, 0xfc, 0x08, 0xe4, 0x4f, 0x40, 0xbf, 0x02, 0xfb, 0x17, 0xe0,
-	0xcf, 0x40, 0xff, 0x06, 0xfc, 0x3b, 0xf0, 0xff, 0x00, 0x00, 0x00, 0x80,
-	0x03, 0xac, 0x08, 0xfe, 0x01, 0x00, 0x00, 0x00, 0x04, 0x01, 0xfc, 0x08,
-	0xe4, 0x4f, 0x40, 0xbf, 0x02, 0xfb, 0x17, 0xe0, 0xcf, 0x40, 0xff, 0x06,
-	0xfc, 0x3b, 0xf0, 0xff, 0x00, 0x00, 0x00, 0x80, 0x03, 0xac, 0x08, 0xfe,
-	0x01, 0x00, 0x00, 0x00, 0x04, 0x01, 0xfc, 0x08, 0xe4, 0x4f, 0x40, 0xbf,
-	0x02, 0xfb, 0x17, 0xe0, 0xcf, 0x40, 0xff, 0x06, 0xfc, 0x3b, 0xf0, 0xff,
-	0x00, 0x00, 0x00, 0x80, 0x03, 0xac, 0x08, 0xfe, 0x01, 0x00, 0x00, 0x00,
-	0x04, 0x01, 0xfc, 0x08, 0xe4, 0x4f, 0x40, 0xbf, 0x02, 0xfb, 0x17, 0xe0,
-	0xcf, 0x40, 0xff, 0x06, 0xfc, 0x3b, 0xf0, 0xff, 0x2c, 0x10, 0x2f, 0x76,
-	0x00, 0x00, 0x00, 0x0d, 0x04, 0x00, 0x00, 0x00, 0x8f, 0x8c, 0xd0, 0x12,
-	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x10, 0x80, 0x00, 0x04,
-	0x20, 0x00, 0x01, 0x00, 0x78, 0x1d, 0xe3, 0x34, 0x00, 0x00, 0x00, 0x0e,
-	0x03, 0x00, 0x00, 0x00, 0xe6, 0xce, 0xa7, 0xc8, 0x00, 0xc0, 0x71, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb9, 0x04, 0xf7, 0xc3,
-	0x00, 0x00, 0x00, 0x10, 0x04, 0x00, 0x00, 0x00, 0xbc, 0xdf, 0xa0, 0x8a,
-	0x00, 0x00, 0x00, 0x80, 0xfb, 0x3f, 0xf0, 0x0d, 0x98, 0x80, 0xb7, 0xb2,
-	0xf7, 0x0d, 0x98, 0x40, 0x8c, 0x31, 0xc9, 0xe6, 0x00, 0x00, 0x00, 0x11,
-	0x0b, 0x00, 0x00, 0x00, 0x5a, 0xe6, 0xa3, 0xef, 0x00, 0x00, 0xc0, 0x01,
-	0x00, 0x00, 0x04, 0x42, 0x45, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-	0xff, 0x37, 0x0c, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-	0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x45, 0xd8, 0x05, 0x85, 0xce, 0x00, 0x00, 0x00, 0x4e,
-	0x01, 0x00, 0x00, 0x00, 0x24, 0x5e, 0x5d, 0x3a, 0x00, 0x00, 0x0c, 0x00,
-	0x10, 0x90, 0xf1, 0x8d, 0x00, 0x00, 0x00, 0x82, 0x15, 0x00, 0x00, 0x00,
-	0x36, 0x9b, 0xc3, 0xc9, 0x12, 0x12, 0x12, 0x12, 0x12, 0x02, 0x02, 0x02,
-	0x12, 0x12, 0x12, 0x12, 0x12, 0x02, 0x02, 0x02, 0x12, 0x12, 0x12, 0x12,
-	0x12, 0x02, 0x02, 0x02, 0x12, 0x12, 0x12, 0x12, 0x12, 0x02, 0x02, 0x02,
-	0x12, 0x12, 0x12, 0x12, 0x12, 0x02, 0x02, 0x02, 0x48, 0x48, 0x00, 0x00,
-	0x23, 0x23, 0x00, 0x00, 0x23, 0x23, 0x00, 0x00, 0x23, 0x23, 0x00, 0x00,
-	0x23, 0x23, 0x00, 0x00, 0x12, 0x04, 0x12, 0x00, 0x07, 0x04, 0x04, 0x12,
-	0x00, 0x00, 0x00, 0x02, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x2a, 0x5e, 0xe7, 0xba, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x3c, 0xf2, 0xe8, 0x3f
-};
-
-
-static struct sja1105_cfgs_s sja1105_cfgs_m[] = {
-	{SJA1105_VAL_DEVICEID_1_1, 0, ARRAY_SIZE(sja1105p_cfg_1_1_bin),
-		sja1105p_cfg_1_1_bin},
-	{0x0UL, 0,   0, NULL}
-};
-struct sja1105_cfgs_s *sja1105_cfgs = &sja1105_cfgs_m[0];
diff --git a/drivers/misc/Makefile b/drivers/misc/Makefile
index 4e6efc8d9b..ba910bc961 100644
--- a/drivers/misc/Makefile
+++ b/drivers/misc/Makefile
@@ -76,4 +76,3 @@ obj-$(CONFIG_JZ4780_EFUSE) += jz4780_efuse.o
 obj-$(CONFIG_MICROCHIP_FLEXCOM) += microchip_flexcom.o
 obj-$(CONFIG_K3_AVS0) += k3_avs.o
 obj-$(CONFIG_SJA1105) += sja1105.o
-obj-$(CONFIG_SJA1105) += sja1105_cfg.o
diff --git a/drivers/misc/sja1105.c b/drivers/misc/sja1105.c
index 5fc2240631..c4be9a9f21 100644
--- a/drivers/misc/sja1105.c
+++ b/drivers/misc/sja1105.c
@@ -1,14 +1,15 @@
 // SPDX-License-Identifier: GPL-2.0+
 /*
- * Copyright 2017-2018, 2020-2021 NXP
+ * Copyright 2017-2018, 2020-2022 NXP
  */
-
-
+#include "sja1105_ll.h"
 #include <common.h>
 #include <dm/device.h>
+#include <dm/uclass.h>
 #include <linux/errno.h>
 #include <spi.h>
-#include "sja1105_ll.h"
+
+#define SJA1105_VAL_DEVICEID_1_1	0xAE00030EUL
 
 #ifndef CONFIG_DEFAULT_SPI_BUS
 #   define CONFIG_DEFAULT_SPI_BUS	0
@@ -22,9 +23,14 @@
 #define sja_debug(fmt, ...) \
 	debug("[SJA1105]%s:%d " fmt, __func__, __LINE__, ##__VA_ARGS__);
 
-#ifdef CONFIG_DM_SPI
 #define SPI_NAME_PRINT_TEMPLATE "generic_%d:%d"
-#endif
+
+struct sja1105_cfgs_s {
+	u32 devid;
+	u32 cs;
+	u32 bin_len;
+	const u8 *cfg_bin;
+};
 
 #define NUM_MAC_LVL_COUNTERS1 4
 static char *mac_lvl_counters1[NUM_MAC_LVL_COUNTERS1] = {
@@ -81,13 +87,12 @@ struct sja_parms {
 	u32 cs;
 	u32 devid;
 	u32 bin_len;
-	u8 *cfg_bin;
+	const u8 *cfg_bin;
 };
 
 static struct spi_slave *get_spi_slave(struct sja_parms *sjap)
 {
 	struct spi_slave *slave;
-#ifdef CONFIG_DM_SPI
 #define MAX_ARRAY_SIZE 30
 	int ret;
 	char name[MAX_ARRAY_SIZE + 1];
@@ -113,11 +118,6 @@ static struct spi_slave *get_spi_slave(struct sja_parms *sjap)
 	slave->max_hz = SJA_DSPI_HZ;
 	slave->mode = SJA_DSPI_MODE;
 	slave->wordlen = SPI_DEFAULT_WORDLEN;
-#else
-	slave = spi_setup_slave(sjap->bus, sjap->cs, SJA_DSPI_HZ,
-				SJA_DSPI_MODE);
-
-#endif
 	return slave;
 }
 
@@ -147,9 +147,6 @@ static int sja1105_write(struct sja_parms *sjap, u32 *cmd, u8 nb_words)
 
 done:
 	spi_release_bus(slave);
-#ifndef CONFIG_DM_SPI
-	spi_free_slave(slave);
-#endif
 
 	return ret;
 }
@@ -211,9 +208,6 @@ static u32 sja1105_read_reg32(struct sja_parms *sjap, u32 reg_addr)
 	if (rc)
 		printf("Error %d during SPI transaction\n", rc);
 	spi_release_bus(slave);
-#ifndef CONFIG_DM_SPI
-	spi_free_slave(slave);
-#endif
 
 	upper = (resp[1] & 0x0000FFFF) << 16;
 	down = (resp[1] & 0xFFFF0000) >> 16;
@@ -260,9 +254,6 @@ static u32 sja1105_write_reg32(struct sja_parms *sjap, u32 reg_addr, u32 val)
 	if (rc)
 		printf("Error %d during SPI transaction\n", rc);
 	spi_release_bus(slave);
-#ifndef CONFIG_DM_SPI
-	spi_free_slave(slave);
-#endif
 
 	upper = (resp[1] & 0x0000FFFF) << 16;
 	down = (resp[1] & 0xFFFF0000) >> 16;
@@ -578,9 +569,10 @@ static int sja1105_configuration_load(struct sja_parms *sjap)
 	return 0;
 }
 
-static bool sja1105_speed_control(struct sja_parms *sjap, char *options)
+static bool sja1105_speed_control(struct udevice *dev, char *options)
 {
 	int port;
+	struct sja_parms *sjap = dev_get_priv(dev);
 	u32 speed[SJA1105_PORT_NB] = {-1, -1, -1, -1, -1};
 	char *tok;
 	static const char * const speed_str[] = {"Disabled",
@@ -588,6 +580,9 @@ static bool sja1105_speed_control(struct sja_parms *sjap, char *options)
 						 "100M",
 						 "10M"};
 
+	if (!sjap)
+		return false;
+
 	switch (sja1105_check_device_id(sjap)) {
 	case SJA1105_DEV_COMPATIBLE_PRx:
 	case SJA1105_DEV_COMPATIBLE_QSx:
@@ -628,16 +623,16 @@ static bool sja1105_speed_control(struct sja_parms *sjap, char *options)
 	return true;
 }
 
-void sja1105_reset_ports(u32 cs, u32 bus)
+static void sja1105_reset_ports(struct udevice *dev)
 {
-	struct sja_parms sjap;
+	struct sja_parms *sjap = dev_get_priv(dev);
 	int i, val;
 
-	sjap.cs = cs;
-	sjap.bus = bus;
+	if (!sjap)
+		return;
 
 	for (i = 0; i < SJA1105_PORT_NB; i++) {
-		val = sja1105_read_reg32(&sjap,
+		val = sja1105_read_reg32(sjap,
 					 SJA1105_CFG_PAD_MIIX_ID_PORT(i));
 
 		/* If the RXID is disabled, skip the port */
@@ -649,71 +644,85 @@ void sja1105_reset_ports(u32 cs, u32 bus)
 		val |= SJA1105_CFG_PAD_MIIX_ID_RXC_PD;
 		val |= SJA1105_CFG_PAD_MIIX_ID_RXC_BYPASS;
 
-		sja1105_write_reg32(&sjap, SJA1105_CFG_PAD_MIIX_ID_PORT(i),
+		sja1105_write_reg32(sjap, SJA1105_CFG_PAD_MIIX_ID_PORT(i),
 				    val);
 
 		val &= ~SJA1105_CFG_PAD_MIIX_ID_RXC_PD;
 		val &= ~SJA1105_CFG_PAD_MIIX_ID_RXC_BYPASS;
 
-		sja1105_write_reg32(&sjap, SJA1105_CFG_PAD_MIIX_ID_PORT(i),
+		sja1105_write_reg32(sjap, SJA1105_CFG_PAD_MIIX_ID_PORT(i),
 				    val);
 	}
 }
 
-int sja1105_probe(u32 cs, u32 bus)
+static int init_config(struct udevice *dev)
 {
-	struct sja_parms sjap;
-	int ret = 0;
+	struct sja_parms *sjap = dev_get_priv(dev);
+	ulong driver_data = dev_get_driver_data(dev);
+	struct sja1105_cfgs_s *cfg = (struct sja1105_cfgs_s *)driver_data;
+	int i = 0;
 
-	memset(&sjap, 0, sizeof(struct sja_parms));
+	if (!sjap)
+		return -EINVAL;
 
-	sjap.cs = cs;
-	sjap.bus = bus;
+	for (i = 0; cfg[i].cfg_bin; i++) {
+		if (cfg[i].devid == sjap->devid && cfg[i].cs == sjap->cs) {
+			sjap->bin_len = cfg[i].bin_len;
+			sjap->cfg_bin = cfg[i].cfg_bin;
+			return 0;
+		}
+	}
 
-	sjap.devid = sja1105_check_device_id(&sjap);
+	printf("No matching device ID found for devid %X, cs %d.\n",
+	       sjap->devid, sjap->cs);
 
-	sja_debug("devid %X\n", sjap.devid);
+	return -EINVAL;
+}
+
+static int sja11105_dm_probe(struct udevice *dev)
+{
+	struct sja_parms *sjap = dev_get_priv(dev);
+	int cs = spi_chip_select(dev);
+	int bus = dev->parent->seq;
+	int ret;
+
+	if (!sjap)
+		return -EINVAL;
+
+	if (cs < 0)
+		return cs;
 
-	if (sja1105_post_cfg_load_check(&sjap)) {
+	sjap->cs = cs;
+	sjap->bus = bus;
+	sjap->devid = sja1105_check_device_id(sjap);
+
+	sja_debug("devid %X\n", sjap->devid);
+
+	if (sja1105_post_cfg_load_check(sjap)) {
 		sja_debug("SJA1105 configuration already done. Skipping switch configuration\n");
 		return 0;
 	}
 
 	printf("Loading SJA1105 firmware over SPI %d:%d\n", bus, cs);
 
-	ret = sja1105_get_cfg(sjap.devid, sjap.cs, &sjap.bin_len,
-		&sjap.cfg_bin);
-
+	ret = init_config(dev);
 	if (ret) {
 		printf("Error SJA1105 configuration not completed\n");
 		return -EINVAL;
 	}
 
-	return sja1105_configuration_load(&sjap);
+	return sja1105_configuration_load(sjap);
 }
 
-static int sja11105_dm_probe(struct udevice *dev)
-{
-#ifdef CONFIG_DM_SPI
-	int cs = spi_chip_select(dev);
-	int bus = dev->parent->seq;
-#else
-	struct spi_slave *slave = dev_get_parent_priv(dev);
-	int cs = slave->cs;
-	int bus = slave->bus;
-#endif
-
-	if (cs < 0)
-		return cs;
-
-	return sja1105_probe(cs, bus);
-}
-
-static int sja1105_print_regs(struct sja_parms *sjap)
+static int sja1105_print_regs(struct udevice *dev)
 {
+	struct sja_parms *sjap = dev_get_priv(dev);
 	u32 val32;
 	int i, j;
 
+	if (!sjap)
+		return -EINVAL;
+
 	printf("\nGeneral Status\n");
 	val32 = sja1105_read_reg32(sjap, SJA1105_REG_GENERAL_STATUS1);
 	printf("general_status_1    = %08x\n", val32);
@@ -779,18 +788,167 @@ static int sja1105_print_regs(struct sja_parms *sjap)
 	return 0;
 }
 
+/*
+ * Obtained from encoding the S32G274-EVB configuration firmware from
+ * sja1105 driver
+ * To regenerate this, use the file with the following command:
+ * 'xxd -i <filename>'
+ */
+static const unsigned char sja1105p_evb_cfg[] = {
+	0x0e, 0x03, 0x00, 0xae, 0x00, 0x00, 0x00, 0x05, 0x05, 0x00, 0x00, 0x00,
+	0x2b, 0xa0, 0x1c, 0x9a, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00, 0x25, 0x04,
+	0xc0, 0x8a, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,
+	0xea, 0x9b, 0x8c, 0x4c, 0x00, 0x00, 0x00, 0x06, 0x50, 0x00, 0x00, 0x00,
+	0x6b, 0x25, 0x6f, 0x21, 0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x03,
+	0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x03, 0x00, 0x00, 0xfb, 0xfe,
+	0xff, 0xff, 0xff, 0x03, 0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x03,
+	0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x03, 0x00, 0x00, 0xfb, 0xfe,
+	0xff, 0xff, 0xff, 0x03, 0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x03,
+	0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x03, 0x00, 0x00, 0xfb, 0xfe,
+	0xff, 0xff, 0xff, 0x07, 0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x07,
+	0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x07, 0x00, 0x00, 0xfb, 0xfe,
+	0xff, 0xff, 0xff, 0x07, 0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x07,
+	0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x07, 0x00, 0x00, 0xfb, 0xfe,
+	0xff, 0xff, 0xff, 0x07, 0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x07,
+	0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x0b, 0x00, 0x00, 0xfb, 0xfe,
+	0xff, 0xff, 0xff, 0x0b, 0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x0b,
+	0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x0b, 0x00, 0x00, 0xfb, 0xfe,
+	0xff, 0xff, 0xff, 0x0b, 0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x0b,
+	0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x0b, 0x00, 0x00, 0xfb, 0xfe,
+	0xff, 0xff, 0xff, 0x0b, 0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x0f,
+	0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x0f, 0x00, 0x00, 0xfb, 0xfe,
+	0xff, 0xff, 0xff, 0x0f, 0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x0f,
+	0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x0f, 0x00, 0x00, 0xfb, 0xfe,
+	0xff, 0xff, 0xff, 0x0f, 0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x0f,
+	0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x0f, 0x00, 0x00, 0xfb, 0xfe,
+	0xff, 0xff, 0xff, 0x13, 0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x13,
+	0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x13, 0x00, 0x00, 0xfb, 0xfe,
+	0xff, 0xff, 0xff, 0x13, 0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x13,
+	0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x13, 0x00, 0x00, 0xfb, 0xfe,
+	0xff, 0xff, 0xff, 0x13, 0x00, 0x00, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x13,
+	0xc1, 0x63, 0x99, 0xe9, 0x00, 0x00, 0x00, 0x07, 0x02, 0x00, 0x00, 0x00,
+	0xf2, 0xcb, 0x0b, 0x7d, 0x00, 0x00, 0x00, 0x58, 0x11, 0xf0, 0x3f, 0x00,
+	0x75, 0x32, 0xfe, 0x68, 0x00, 0x00, 0x00, 0x08, 0x1a, 0x00, 0x00, 0x00,
+	0x53, 0x23, 0xf6, 0x6a, 0x00, 0x00, 0x00, 0x10, 0x8d, 0xf5, 0xbd, 0xf7,
+	0x00, 0x00, 0x00, 0x10, 0x8d, 0xf5, 0x7b, 0xef, 0x00, 0x00, 0x00, 0x10,
+	0x8d, 0xf5, 0xf7, 0xde, 0x00, 0x00, 0x00, 0x10, 0x8d, 0xf5, 0xef, 0xbd,
+	0x00, 0x00, 0x00, 0x10, 0x8d, 0xf5, 0xdf, 0x7b, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x92, 0x24, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x24, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb6,
+	0x6d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x92, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0xda, 0xb6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6c,
+	0xdb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0x00, 0x00, 0x00,
+	0x06, 0xe0, 0x42, 0x67, 0x00, 0x00, 0x00, 0x09, 0x28, 0x00, 0x00, 0x00,
+	0xc9, 0x3a, 0xb4, 0x0d, 0x00, 0x00, 0x00, 0x80, 0x03, 0xac, 0x08, 0xfe,
+	0x01, 0x00, 0x00, 0x00, 0x02, 0x01, 0xfc, 0x08, 0xe4, 0x4f, 0x40, 0xbf,
+	0x02, 0xfb, 0x17, 0xe0, 0xcf, 0x40, 0xff, 0x06, 0xfc, 0x3b, 0xf0, 0xff,
+	0x00, 0x00, 0x00, 0x80, 0x03, 0xac, 0x08, 0xfe, 0x01, 0x00, 0x00, 0x00,
+	0x04, 0x01, 0xfc, 0x08, 0xe4, 0x4f, 0x40, 0xbf, 0x02, 0xfb, 0x17, 0xe0,
+	0xcf, 0x40, 0xff, 0x06, 0xfc, 0x3b, 0xf0, 0xff, 0x00, 0x00, 0x00, 0x80,
+	0x03, 0xac, 0x08, 0xfe, 0x01, 0x00, 0x00, 0x00, 0x04, 0x01, 0xfc, 0x08,
+	0xe4, 0x4f, 0x40, 0xbf, 0x02, 0xfb, 0x17, 0xe0, 0xcf, 0x40, 0xff, 0x06,
+	0xfc, 0x3b, 0xf0, 0xff, 0x00, 0x00, 0x00, 0x80, 0x03, 0xac, 0x08, 0xfe,
+	0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x08, 0xe4, 0x4f, 0x40, 0xbf,
+	0x02, 0xfb, 0x17, 0xe0, 0xcf, 0x40, 0xff, 0x06, 0xfc, 0x3b, 0xf0, 0xff,
+	0x00, 0x00, 0x00, 0x80, 0x03, 0xac, 0x08, 0xfe, 0x01, 0x00, 0x00, 0x00,
+	0x00, 0x01, 0xfc, 0x08, 0xe4, 0x4f, 0x40, 0xbf, 0x02, 0xfb, 0x17, 0xe0,
+	0xcf, 0x40, 0xff, 0x06, 0xfc, 0x3b, 0xf0, 0xff, 0x00, 0x0d, 0x80, 0x44,
+	0x00, 0x00, 0x00, 0x0d, 0x04, 0x00, 0x00, 0x00, 0x8f, 0x8c, 0xd0, 0x12,
+	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x10, 0x80, 0x00, 0x04,
+	0x20, 0x00, 0x01, 0x00, 0x78, 0x1d, 0xe3, 0x34, 0x00, 0x00, 0x00, 0x0e,
+	0x03, 0x00, 0x00, 0x00, 0xe6, 0xce, 0xa7, 0xc8, 0x00, 0xc0, 0x71, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb9, 0x04, 0xf7, 0xc3,
+	0x00, 0x00, 0x00, 0x10, 0x04, 0x00, 0x00, 0x00, 0xbc, 0xdf, 0xa0, 0x8a,
+	0x00, 0x00, 0x00, 0x80, 0xfb, 0x3f, 0xf0, 0x0d, 0x98, 0x80, 0xb7, 0xb2,
+	0xf7, 0x0d, 0x98, 0x40, 0x8c, 0x31, 0xc9, 0xe6, 0x00, 0x00, 0x00, 0x11,
+	0x0b, 0x00, 0x00, 0x00, 0x5a, 0xe6, 0xa3, 0xef, 0x00, 0x00, 0xc0, 0x01,
+	0x00, 0x00, 0x04, 0x42, 0x45, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+	0xff, 0x37, 0x0c, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+	0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x45, 0xd8, 0x05, 0x85, 0xce, 0x00, 0x00, 0x00, 0x4e,
+	0x01, 0x00, 0x00, 0x00, 0x24, 0x5e, 0x5d, 0x3a, 0x00, 0x00, 0x0c, 0x48,
+	0xb2, 0x59, 0xf6, 0xf5, 0x00, 0x00, 0x00, 0x82, 0x15, 0x00, 0x00, 0x00,
+	0x36, 0x9b, 0xc3, 0xc9, 0x12, 0x12, 0x12, 0x12, 0x12, 0x02, 0x02, 0x02,
+	0x12, 0x12, 0x12, 0x12, 0x12, 0x02, 0x02, 0x02, 0x12, 0x12, 0x12, 0x12,
+	0x12, 0x02, 0x02, 0x02, 0x12, 0x12, 0x12, 0x12, 0x12, 0x02, 0x02, 0x02,
+	0x12, 0x12, 0x12, 0x12, 0x12, 0x02, 0x02, 0x02, 0x48, 0x48, 0x00, 0x00,
+	0x23, 0x23, 0x00, 0x00, 0x23, 0x23, 0x00, 0x00, 0x48, 0x48, 0x00, 0x00,
+	0x48, 0x48, 0x00, 0x00, 0x12, 0x04, 0x12, 0x00, 0x07, 0x04, 0x04, 0x12,
+	0x00, 0x00, 0x00, 0x02, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x36, 0x52, 0x55, 0x88, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x3c, 0xf2, 0xe8, 0x3f
+};
+
+static const struct sja1105_cfgs_s sja1105_evb_cfgs_m[] = {
+	{
+		.devid = SJA1105_VAL_DEVICEID_1_1,
+		.cs = 0,
+		.bin_len = ARRAY_SIZE(sja1105p_evb_cfg),
+		.cfg_bin = sja1105p_evb_cfg
+	},
+	{ 0x0UL, 0, 0, NULL }
+};
+
+static const struct udevice_id sja1105_ids[] = {
+	{
+		.compatible = "nxp,sja1105-s32gevb-fw-loader",
+		.data = (ulong)&sja1105_evb_cfgs_m[0]
+	},
+	{}
+};
+
+U_BOOT_DRIVER(sja1105_fw_loader) = {
+	.name	= "sja1105_fw_loader",
+	.id	= UCLASS_MISC,
+	.of_match = sja1105_ids,
+	.probe	= sja11105_dm_probe,
+	.priv_auto_alloc_size = sizeof(struct sja_parms),
+};
+
+static int get_sja1105_device(struct udevice **dev, struct sja_parms *sjap)
+{
+	struct udevice *parent;
+	size_t i;
+	int off, ret;
+
+	for (i = 0; i < ARRAY_SIZE(sja1105_ids); i++) {
+		if (!sja1105_ids[i].compatible)
+			continue;
+
+		off = fdt_node_offset_by_compatible(gd->fdt_blob, -1,
+						    sja1105_ids[i].compatible);
+		if (off == -FDT_ERR_NOTFOUND)
+			continue;
+
+		ret = uclass_get_device_by_of_offset(UCLASS_MISC, off, dev);
+		if (ret)
+			continue;
+
+		parent = dev_get_parent(*dev);
+		if (!parent)
+			continue;
+
+		if (spi_chip_select(*dev) == sjap->cs &&
+		    parent->req_seq == sjap->bus)
+			return 0;
+	}
+
+	return -EINVAL;
+}
+
 static int do_sja_cmd(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
 {
-	char  *cp = NULL, *options = NULL;
+	char *cp = NULL, *options = NULL;
+	struct udevice *dev;
 	struct sja_parms sjap;
+	int ret;
 
 	/* Parse SPI data */
 	sjap.cs = 0;
 	sjap.bus = CONFIG_DEFAULT_SPI_BUS;
 
-	if (argc < 2) {
+	if (argc < 2)
 		return CMD_RET_USAGE;
-	}
 
 	/* Check if last argument is spi:cs */
 	if (argc > 2 && !strchr(argv[argc - 1], ',')) {
@@ -803,18 +961,24 @@ static int do_sja_cmd(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
 		}
 	}
 
+	ret = get_sja1105_device(&dev, &sjap);
+	if (ret) {
+		printf("Failed to get SJA device on SPI %u:%u\n",
+		       sjap.bus, sjap.cs);
+		return CMD_RET_FAILURE;
+	}
+
 	if (!strcmp(argv[1], "probe")) {
 		printf("Probe SJA1105\n");
-		/* For debug purposes force SJA1105 initialization*/
-		sja1105_probe(sjap.cs, sjap.bus);
-		sja1105_reset_ports(sjap.cs, sjap.bus);
-		/* end of force SJA1105 initialization*/
+		sja1105_reset_ports(dev);
 	} else if (!strcmp(argv[1], "info")) {
-		sja1105_print_regs(&sjap);
+		ret = sja1105_print_regs(dev);
+		if (ret)
+			return CMD_RET_FAILURE;
 	} else if (!strcmp(argv[1], "speed")) {
 		if (argc >= 3 && !strchr(argv[2], ':'))
 			options = argv[2];
-		if (!sja1105_speed_control(&sjap, options))
+		if (!sja1105_speed_control(dev, options))
 			return CMD_RET_USAGE;
 	} else {
 		return CMD_RET_USAGE;
@@ -834,14 +998,4 @@ U_BOOT_CMD(
 	"          given port is not updated\n"
 );
 
-static const struct udevice_id sja1105_ids[] = {
-	{ .compatible = "nxp,sja1105-fw-loader" },
-	{}
-};
 
-U_BOOT_DRIVER(altera_sysid) = {
-	.name	= "sja1105_fw_loader",
-	.id	= UCLASS_MISC,
-	.of_match = sja1105_ids,
-	.probe	= sja11105_dm_probe,
-};
diff --git a/drivers/misc/sja1105_cfg.c b/drivers/misc/sja1105_cfg.c
deleted file mode 100644
index 9c041fba42..0000000000
--- a/drivers/misc/sja1105_cfg.c
+++ /dev/null
@@ -1,33 +0,0 @@
-// SPDX-License-Identifier: GPL-2.0+
-/*
- * Copyright 2017, 2020 NXP
- *
- * Contains firmware in octet string format for SJA1105.
- */
-
-#include <common.h>
-#include <errno.h>
-#include <sja1105_cfg.h>
-
-extern struct sja1105_cfgs_s *sja1105_cfgs;
-
-int sja1105_get_cfg(u32 devid, u32 cs, u32 *bin_len, const u8 **cfg_bin)
-{
-	int i = 0;
-	while (sja1105_cfgs[i].cfg_bin) {
-		if (sja1105_cfgs[i].devid == devid &&
-		    sja1105_cfgs[i].cs == cs) {
-			*bin_len = sja1105_cfgs[i].bin_len;
-			*cfg_bin = sja1105_cfgs[i].cfg_bin;
-			return 0;
-		}
-		i++;
-	}
-
-	*bin_len = 0;
-	*cfg_bin = NULL;
-
-	printf("No matching device ID found for devid %X, cs %d.\n", devid, cs);
-
-	return -EINVAL;
-}
diff --git a/drivers/misc/sja1105_ll.h b/drivers/misc/sja1105_ll.h
index dd03e39110..f3cbfeeaf2 100644
--- a/drivers/misc/sja1105_ll.h
+++ b/drivers/misc/sja1105_ll.h
@@ -1,7 +1,7 @@
 /* SPDX-License-Identifier: GPL-2.0+ */
 /*
 * AVB switch driver module for SJA1105
-* Copyright 2017, 2020 NXP
+* Copyright 2017,2020,2022 NXP
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
@@ -285,6 +285,4 @@ enum sja1105_mii_mode {
 
 #define SJA1105_PORT_NB 5
 
-int sja1105_get_cfg(u32 devid, u32 cs, u32 *bin_len, u8 **cfg_bin);
-
 #endif
diff --git a/include/sja1105_cfg.h b/include/sja1105_cfg.h
deleted file mode 100644
index 0e62641d09..0000000000
--- a/include/sja1105_cfg.h
+++ /dev/null
@@ -1,14 +0,0 @@
-/* SPDX-License-Identifier:    GPL-2.0+
- *
- * Copyright 2019-2020 NXP
- *
- */
-
-
-struct sja1105_cfgs_s {
-	u32 devid;
-	u32 cs;
-	u32 bin_len;
-	const u8 *cfg_bin;
-};
-
-- 
2.17.1

