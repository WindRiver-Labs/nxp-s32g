From 22e649649f46a9d57fac702d6bef3c017ac602d6 Mon Sep 17 00:00:00 2001
From: Ciprian Costea <ciprianmarian.costea@nxp.com>
Date: Wed, 26 Jan 2022 14:09:43 +0200
Subject: [PATCH 48/64] s32-gen1: Remove disablement of VR5510 PMIC

This operation is already done in ATF.

'vr5510_reset_flt_err_cnt' routine will also be
performed in arm trusted firmware.

Issue: ALB-8351
Upstream-Status: Pending 

Signed-off-by: Ciprian Costea <ciprianmarian.costea@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 arch/arm/cpu/armv8/s32/cpu.c | 232 +----------------------------------
 include/power/vr5510.h       | 161 ------------------------
 2 files changed, 1 insertion(+), 392 deletions(-)
 delete mode 100644 include/power/vr5510.h

diff --git a/arch/arm/cpu/armv8/s32/cpu.c b/arch/arm/cpu/armv8/s32/cpu.c
index 3e2798d0e1..6029f8c00f 100644
--- a/arch/arm/cpu/armv8/s32/cpu.c
+++ b/arch/arm/cpu/armv8/s32/cpu.c
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier:     GPL-2.0+
 /*
  * Copyright 2014-2016 Freescale Semiconductor, Inc.
- * Copyright 2017-2021 NXP
+ * Copyright 2017-2022 NXP
  */
 
 #include <common.h>
@@ -27,7 +27,6 @@
 #include <misc.h>
 #include <linux/sizes.h>
 #include <power/pmic.h>
-#include <power/vr5510.h>
 
 #define S32GEN1_DRAM_STD_ADDR	0x80000000ULL
 #define S32GEN1_DRAM_EXT_ADDR	0x800000000ULL
@@ -288,229 +287,6 @@ static inline int clear_after_bss(void)
 }
 #endif
 
-#if defined(CONFIG_DM_PMIC_VR5510) && !defined(CONFIG_S32_ATF_BOOT_FLOW)
-static int watchdog_refresh(struct udevice *pmic)
-{
-	uint seed, wd_cfg;
-	int ret;
-
-	seed = pmic_reg_read(pmic, VR5510_FS_WD_SEED);
-
-	/* Challenger watchdog refresh */
-	seed = ((~(seed * 4 + 2) & 0xFFFFFFFFU) / 4) & 0xFFFFU;
-
-	ret = pmic_reg_write(pmic, VR5510_FS_WD_ANSWER, seed);
-	if (ret) {
-		pr_err("Failed to write VR5510 WD answer\n");
-		return ret;
-	}
-
-	wd_cfg = pmic_reg_read(pmic, VR5510_FS_I_WD_CFG);
-	if (VR5510_ERR_CNT(wd_cfg)) {
-		pr_err("Failed to refresh watchdog\n");
-		return -EIO;
-	}
-
-	return 0;
-}
-
-static int disable_vr5510_wdg(struct udevice *pmic)
-{
-	uint wd_window, safe_input, fs_states, diag;
-	int ret;
-
-	ret = pmic_get(VR5510_FSU_NAME, &pmic);
-	if (ret)
-		return ret;
-
-	fs_states = pmic_reg_read(pmic, VR5510_FS_STATES);
-	if (VR5510_STATE(fs_states) != INIT_FS) {
-		pr_warn("VR5510 is not in INIT_FS state\n");
-		return 0;
-	}
-
-	/* Disable watchdog */
-	wd_window = pmic_reg_read(pmic, VR5510_FS_WD_WINDOW);
-	wd_window &= ~VR5510_WD_WINDOW_MASK;
-	ret = pmic_reg_write(pmic, VR5510_FS_WD_WINDOW, wd_window);
-	if (ret) {
-		pr_err("Failed write watchdog window\n");
-		return ret;
-	}
-
-	wd_window = ~wd_window & 0xFFFFU;
-	ret = pmic_reg_write(pmic, VR5510_FS_NOT_WD_WINDOW, wd_window);
-	if (ret) {
-		pr_err("Failed write watchdog window\n");
-		return ret;
-	}
-
-	diag = pmic_reg_read(pmic, VR5510_FS_DIAG_SAFETY);
-	if (!VR5510_ABIST1_OK(diag)) {
-		pr_err("VR5510 is not in ABIST1 state\n");
-		return ret;
-	}
-
-	/* Disable FCCU monitoring */
-	safe_input = pmic_reg_read(pmic, VR5510_FS_I_SAFE_INPUTS);
-	safe_input &= ~VR5510_FCCU_CFG_MASK;
-	ret = pmic_reg_write(pmic, VR5510_FS_I_SAFE_INPUTS, safe_input);
-	if (ret) {
-		pr_err("Failed to disable FCCU\n");
-		return ret;
-	}
-
-	safe_input = ~safe_input & 0xFFFFU;
-	ret = pmic_reg_write(pmic, VR5510_FS_I_NOT_SAFE_INPUTS, safe_input);
-	if (ret) {
-		pr_err("Failed to disable FCCU\n");
-		return ret;
-	}
-
-	return watchdog_refresh(pmic);
-}
-
-#if defined(CONFIG_TARGET_S32G274ABLUEBOX3)
-static int vr5510_reset_flt_err_cnt(struct udevice *pmic)
-{
-	uint fs_i_fssm, flt_err_cnt, flt_err_cnt_lmt;
-	int ret;
-
-	fs_i_fssm = pmic_reg_read(pmic, VR5510_FS_I_FSSM);
-	flt_err_cnt_lmt = VR5510_ERR_CNT_LMT(fs_i_fssm);
-	flt_err_cnt = VR5510_ERR_CNT(fs_i_fssm);
-
-	switch (flt_err_cnt_lmt) {
-	case ERR_CNT_LIMIT_00:
-		flt_err_cnt_lmt = 2;
-		break;
-	case ERR_CNT_LIMIT_10:
-		flt_err_cnt_lmt = 8;
-		break;
-	case ERR_CNT_LIMIT_11:
-		flt_err_cnt_lmt = 12;
-		break;
-	case ERR_CNT_LIMIT_01:
-	default:
-		flt_err_cnt_lmt = 6;
-		break;
-	}
-
-	/* Reset FLT_ERR_CNT only for its intermediate value. */
-	if (!flt_err_cnt || flt_err_cnt < (flt_err_cnt_lmt / 2) - 1)
-		return 0;
-
-	pr_warn("VR5510 FLT_ERR_CNT counter at %d, resetting to 0\n",
-		flt_err_cnt);
-	while (flt_err_cnt) {
-		ret = watchdog_refresh(pmic);
-		if (ret)
-			return ret;
-
-		fs_i_fssm = pmic_reg_read(pmic, VR5510_FS_I_FSSM);
-		flt_err_cnt = VR5510_ERR_CNT(fs_i_fssm);
-	}
-
-	return 0;
-}
-#endif /* CONFIG_TARGET_S32G274ABLUEBOX3 */
-
-static int is_svs_needed(bool *status)
-{
-	struct udevice *dev;
-	int ret;
-	u32 val;
-
-	ret = uclass_get_device_by_driver(UCLASS_MISC,
-					  DM_GET_DRIVER(s32gen1_ocotp),
-					  &dev);
-	if (ret) {
-		pr_err("Failed to get 's32gen1_ocotp' driver\n");
-		return ret;
-	}
-
-	ret = misc_read(dev, S32GEN1_OCOTP_DIE_PROCESS_ADDR, &val,
-			S32GEN1_OCOTP_WORD_SIZE);
-
-	/* Read less than 4 bytes */
-	if (ret != S32GEN1_OCOTP_WORD_SIZE && ret > 0)
-		return -EIO;
-
-	if (ret < 0)
-		return ret;
-
-	*status = !!(val & S32GEN1_OCOTP_DIE_PROCESS_MASK);
-
-	return 0;
-}
-
-static int apply_svs(struct udevice *pmic)
-{
-	int ret;
-	uint svs, fs_states;
-	bool enable_svs;
-
-	ret = is_svs_needed(&enable_svs);
-	if (ret)
-		return ret;
-
-	if (!enable_svs)
-		return 0;
-
-	fs_states = pmic_reg_read(pmic, VR5510_FS_STATES);
-	if (VR5510_STATE(fs_states) != INIT_FS) {
-		pr_err("Cannot apply SVS in state %u\n",
-			VR5510_STATE(fs_states));
-		return -1;
-	}
-
-	/**
-	 * Targeted voltage according to S32G & S32R DS : 0.76875V ->
-	 * 5 SVS steps
-	 */
-	svs = 5 << VR5510_FS_I_SVS_SVS_OFFSET;
-	ret = pmic_reg_write(pmic, VR5510_FS_I_SVS, svs);
-	if (ret) {
-		pr_err("Failed to write SVS\n");
-		return ret;
-	}
-
-	svs = ~svs & 0xFFFFU;
-	ret = pmic_reg_write(pmic, VR5510_FS_I_NOT_SVS, svs);
-	if (ret) {
-		pr_err("Failed to write NOT_SVS\n");
-		return ret;
-	}
-
-	return 0;
-}
-
-static int setup_vr5510(void)
-{
-	struct udevice *pmic;
-	int ret;
-
-	ret = pmic_get(VR5510_FSU_NAME, &pmic);
-	if (ret)
-		return ret;
-
-#if defined(CONFIG_TARGET_S32G274ABLUEBOX3)
-	ret = vr5510_reset_flt_err_cnt(pmic);
-	if (ret)
-		return ret;
-#endif
-	ret = apply_svs(pmic);
-	if (ret)
-		return ret;
-
-	ret = disable_vr5510_wdg(pmic);
-	if (ret)
-		return ret;
-
-	return ret;
-}
-#endif
-
 int arch_cpu_init(void)
 {
 	int ret = 0;
@@ -599,12 +375,6 @@ int arch_early_init_r(void)
 {
 	int rv = 0;
 
-#if defined(CONFIG_DM_PMIC_VR5510) && !defined(CONFIG_S32_ATF_BOOT_FLOW)
-	rv = setup_vr5510();
-	if (rv)
-		return rv;
-#endif
-
 #if !defined(CONFIG_S32_ATF_BOOT_FLOW)
 	asm volatile("dsb sy");
 	rv = fsl_s32_wake_secondary_cores();
diff --git a/include/power/vr5510.h b/include/power/vr5510.h
deleted file mode 100644
index bbf32a63de..0000000000
--- a/include/power/vr5510.h
+++ /dev/null
@@ -1,161 +0,0 @@
-/* SPDX-License-Identifier: GPL-2.0+ OR BSD-3-Clause */
-/*
- * Copyright 2020-2021 NXP
- */
-#ifndef VR5510_PMIC_H
-#define VR5510_PMIC_H
-
-#include <linux/bitops.h>
-
-#define VR5510_MU_NAME		"vr5510"
-#define VR5510_FSU_NAME		"vr5510_fsu"
-
-#define VR5510_M_FLAG		0
-#define VR5510_M_MODE		1
-
-/* Main Unit */
-#define VR5510_M_SM_CTRL1	2
-#define VR5510_CTRL1_GOTO_OFF		BIT(0)
-#define VR5510_CTRL1_STBY_TIMER_EN	BIT(10)
-#define VR5510_CTRL1_TIMER_STBY_WIN(N)	((N) << 12)
-#define VR5510_CTRL1_TIMER_16MS		VR5510_CTRL1_TIMER_STBY_WIN(0)
-#define VR5510_CTRL1_TIMER_32MS		VR5510_CTRL1_TIMER_STBY_WIN(1)
-#define VR5510_CTRL1_TIMER_128MS	VR5510_CTRL1_TIMER_STBY_WIN(2)
-#define VR5510_CTRL1_TIMER_512MS	VR5510_CTRL1_TIMER_STBY_WIN(3)
-#define VR5510_CTRL1_TIMER_1024MS	VR5510_CTRL1_TIMER_STBY_WIN(4)
-#define VR5510_CTRL1_TIMER_4096MS	VR5510_CTRL1_TIMER_STBY_WIN(5)
-
-#define VR5510_M_REG_CTRL1	3
-#define VR5510_M_REG_CTRL2	4
-
-#define VR5510_M_REG_CTRL3	5
-#define VR5510_CTRL3_BUCK1_STBY		BIT(0)
-#define VR5510_CTRL3_BUCK2_STBY		BIT(2)
-#define VR5510_CTRL3_BUCK3_STBY		BIT(4)
-#define VR5510_CTRL3_VPREV_STBY		BIT(6)
-#define VR5510_CTRL3_HVLDO_STBY		BIT(8)
-#define VR5510_CTRL3_LDO1_STBY		BIT(10)
-#define VR5510_CTRL3_LDO2_STBY		BIT(12)
-#define VR5510_CTRL3_LDO3_STBY		BIT(14)
-
-#define VR5510_M_TSD_CFG	6
-#define VR5510_M_AMUX		7
-#define VR5510_M_CLOCK1		8
-
-#define VR5510_M_CLOCK2		9
-#define VR5510_M_CLOCK2_100KHZ	0
-#define VR5510_M_CLOCK2_300KHZ	2
-#define VR5510_M_CLOCK2_600KHZ	3
-
-#define VR5510_M_INT_MASK1	10
-#define VR5510_M_INT_MASK2	11
-
-#define VR5510_M_FLAG1		12
-#define VR5510_FLAG1_ALL_FLAGS	0xBFFF
-
-#define VR5510_M_FLAG2		13
-#define VR5510_FLAG2_ALL_FLAGS	0xFFFF
-
-#define VR5510_M_FLAG3		14
-#define VR5510_FLAG3_I2C_M_REQ		BIT(0)
-#define VR5510_FLAG3_I2C_M_CRC		BIT(1)
-
-#define VR5510_M_VMON_REGX	15
-#define VR5510_M_LVB1_SVS	16
-#define VR5510_M_LVB1_STBY_DVS	17
-#define VR5510_M_MEMORY0	41
-#define VR5510_M_MEMORY1	42
-#define VR5510_M_DEVICEID	43
-
-/* Fail Safe unit */
-
-/* Used for all FS_I_NOT_* registers */
-#define VR5510_FS_I_NOT_VALUE(V)		(~(V) & 0xFFU)
-
-#define VR5510_FS_GRL_FLAGS			0
-#define VR5510_GRL_FLAGS_I2C_FS_REQ		BIT(5)
-#define VR5510_GRL_FLAGS_I2C_FS_CRC		BIT(6)
-
-#define VR5510_FS_I_OVUV_SAFE_REACTION1		1
-#define VR5510_FS_I_NOT_OVUV_SAFE_REACTION1	2
-#define VR5510_FS_I_OVUV_SAFE_REACTION2		3
-#define VR5510_FS_I_NOT_OVUV_SAFE_REACTION2	4
-#define VR5510_FS_I_ABIST2_CTRL			5
-#define VR5510_FS_I_NOT_ABIST2_CTRL		6
-#define VR5510_FS_I_WD_CFG			7
-#define VR5510_ERR_CNT_LMT_OFFSET		14
-#define VR5510_ERR_CNT_LMT_MASK			(3 << VR5510_ERR_CNT_LMT_OFFSET)
-#define VR5510_ERR_CNT_LMT(V)		(((V) & VR5510_ERR_CNT_LMT_MASK) \
-					 >> VR5510_ERR_CNT_LMT_OFFSET)
-#define VR5510_ERR_CNT_MASK			0xF
-#define VR5510_ERR_CNT(V)			((V) & VR5510_ERR_CNT_MASK)
-#define VR5510_FS_I_NOT_WD_CFG			8
-
-#define VR5510_FS_I_SAFE_INPUTS			9
-#define VR5510_FCCU_CFG_OFFSET			14
-#define VR5510_FCCU_CFG_MASK			(3 << VR5510_FCCU_CFG_OFFSET)
-#define VR5510_FCCU_CFG(V)			((V) & VR5510_FCCU_CFG_MASK >>\
-						 VR5510_FCCU_CFG_OFFSET)
-#define VR5510_SAFE_INPUTS_TW_STBY_60US		0x4
-#define VR5510_SAFE_INPUTS_TW_STBY_80US		0x5
-#define VR5510_SAFE_INPUTS_TW_STBY_100US	0x6
-#define VR5510_SAFE_INPUTS_TW_STBY_200US	0x7
-#define VR5510_SAFE_INPUTS_TW_STBY_300US	0x8
-#define VR5510_SAFE_INPUTS_TW_STBY_500US	0x9
-#define VR5510_SAFE_INPUTS_TW_STBY_1MS		0xA
-#define VR5510_SAFE_INPUTS_TW_STBY_2MS		0xB
-#define VR5510_SAFE_INPUTS_TW_STBY_3MS		0xC
-#define VR5510_SAFE_INPUTS_TW_STBY_5MS		0xD
-#define VR5510_SAFE_INPUTS_TW_STBY_8MS		0xE
-#define VR5510_SAFE_INPUTS_TW_STBY_10MS		0xF
-
-#define VR5510_FS_I_NOT_SAFE_INPUTS		10
-#define VR5510_FS_I_FSSM			11
-#define VR5510_FS_I_NOT_FSSM			12
-#define VR5510_FS_I_SVS				13
-#define VR5510_FS_I_SVS_SVS_OFFSET		10
-#define VR5510_FS_I_NOT_SVS			14
-#define VR5510_FS_WD_WINDOW			15
-#define VR5510_WD_WINDOW_OFFSET			12
-#define VR5510_WD_WINDOW_MASK			0xF000
-
-#define VR5510_FS_NOT_WD_WINDOW			16
-#define VR5510_FS_WD_SEED			17
-#define VR5510_FS_WD_ANSWER			18
-#define VR5510_FS_OVUVREG_STATUS		19
-#define VR5510_FS_RELEASE_FS0B			20
-
-#define VR5510_FS_SAFE_IOS			21
-#define VR5510_SAFE_IOS_STBY_REQ		BIT(1)
-
-#define VR5510_FS_DIAG_SAFETY			22
-#define VR5510_ABIST1_OK_OFFSET			10
-#define VR5510_ABIST1_OK_MASK			BIT(VR5510_ABIST1_OK_OFFSET)
-#define VR5510_ABIST1_OK(V)			((V) & VR5510_ABIST1_OK_MASK >>\
-						 VR5510_ABIST1_OK_OFFSET)
-#define VR5510_FS_INTB_MASK			23
-#define VR5510_FS_STATES			24
-#define VR5510_STATE_MASK			0x1FU
-#define VR5510_STATE_OFFSET			0
-#define VR5510_STATE(V)				(((V) & VR5510_STATE_MASK) >>\
-						 VR5510_STATE_OFFSET)
-
-#define VR5510_FS_OTP_ASIL_LEVEL		36
-
-enum fs_states {
-	INIT_FS = 6,
-	WAIT_ABIST2,
-	ABIST2,
-	ASSERT_FS0B,
-	NORMAL_FS,
-
-};
-
-enum flt_err_cnt_limit {
-	ERR_CNT_LIMIT_00 = 0,
-	ERR_CNT_LIMIT_01,
-	ERR_CNT_LIMIT_10,
-	ERR_CNT_LIMIT_11,
-};
-
-#endif
-- 
2.17.1

