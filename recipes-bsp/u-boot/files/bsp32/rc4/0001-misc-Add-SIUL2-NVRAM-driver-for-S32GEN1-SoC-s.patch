From 78519618dfe6d56109fec4481e2685095a2c8891 Mon Sep 17 00:00:00 2001
From: Ghennadi Procopciuc <ghennadi.procopciuc@nxp.com>
Date: Thu, 13 Jan 2022 11:15:48 +0200
Subject: [PATCH 01/64] misc: Add SIUL2 NVRAM driver for S32GEN1 SoC's

The driver provides a unique interface to access non volatile SoC
information from SIUL2 module. E.g. SoC's revision.

Issue: ALB-8339
Upstream-Status: Pending 

Signed-off-by: Ghennadi Procopciuc <ghennadi.procopciuc@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 .../misc/fsl,s32-siul2-nvmem.yaml             |  59 ++++
 drivers/misc/Makefile                         |   1 +
 drivers/misc/s32gen1_siul2_nvram.c            | 261 ++++++++++++++++++
 drivers/misc/s32gen1_siul2_nvram.h            |  20 ++
 4 files changed, 341 insertions(+)
 create mode 100644 doc/device-tree-bindings/misc/fsl,s32-siul2-nvmem.yaml
 create mode 100644 drivers/misc/s32gen1_siul2_nvram.c
 create mode 100644 drivers/misc/s32gen1_siul2_nvram.h

diff --git a/doc/device-tree-bindings/misc/fsl,s32-siul2-nvmem.yaml b/doc/device-tree-bindings/misc/fsl,s32-siul2-nvmem.yaml
new file mode 100644
index 0000000000..55c548a889
--- /dev/null
+++ b/doc/device-tree-bindings/misc/fsl,s32-siul2-nvmem.yaml
@@ -0,0 +1,59 @@
+# SPDX-License-Identifier: (GPL-2.0 or BSD-2-Clause)
+%YAML 1.2
+---
+$id: http://devicetree.org/schemas/nvmem/fsl,s32-siul2-nvmem.yaml#
+$schema: http://devicetree.org/meta-schemas/core.yaml#
+
+title: NXP S32 SIUL2 NVMEM driver
+
+maintainers:
+  - Catalin Udma <catalin-dan.udma@nxp.com>
+
+description: |
+  The drivers provides a unique interface to access non volatile SoC
+  information from SIUL2 module, for example SoC Revision
+
+allOf:
+  - $ref: "nvmem.yaml#"
+
+properties:
+  compatible:
+    description: |-
+      Each compatible string provides an interface for
+      SIUL2_0 or SIUL2_1 module.
+      const: fsl,s32-gen1-siul2_0-nvram
+      const: fsl,s32g2-siul2_1-nvram
+      const: fsl,s32g3-siul2_1-nvram
+      const: fsl,s32r-siul2_1-nvram
+
+  reg:
+    description:
+      Address and Size of the SIUL2 MCU ID Registers (MIDR1 & MIDR2).
+    maxItems: 1
+
+  '#address-cells':
+    const: 1
+
+  '#size-cells':
+    const: 1
+
+required:
+  - compatible
+  - reg
+  - '#address-cells'
+  - '#size-cells'
+
+unevaluatedProperties: false
+
+examples:
+  - |
+    nvram: nvram@4009C000 {
+      compatible = "fsl,s32gen1-siul2_0-nvmem";
+      reg = <0x0 10>;
+      #address-cells = <1>;
+      #size-cells = <1>;
+      status = "okay";
+      soc_revision: soc_revision@0 {
+              reg = <0x0 0x4>;
+      };
+    };
diff --git a/drivers/misc/Makefile b/drivers/misc/Makefile
index 0b2439e1f1..4e6efc8d9b 100644
--- a/drivers/misc/Makefile
+++ b/drivers/misc/Makefile
@@ -60,6 +60,7 @@ obj-$(CONFIG_ROCKCHIP_EFUSE) += rockchip-efuse.o
 obj-$(CONFIG_ROCKCHIP_OTP) += rockchip-otp.o
 obj-$(CONFIG_S32_GEN1) += s32gen1_fuse.o
 obj-$(CONFIG_S32_GEN1) += s32gen1_ocotp.o
+obj-$(CONFIG_S32_GEN1) += s32gen1_siul2_nvram.o
 obj-$(CONFIG_SANDBOX) += syscon_sandbox.o misc_sandbox.o
 obj-$(CONFIG_SMSC_LPC47M) += smsc_lpc47m.o
 obj-$(CONFIG_SMSC_SIO1007) += smsc_sio1007.o
diff --git a/drivers/misc/s32gen1_siul2_nvram.c b/drivers/misc/s32gen1_siul2_nvram.c
new file mode 100644
index 0000000000..c671619e03
--- /dev/null
+++ b/drivers/misc/s32gen1_siul2_nvram.c
@@ -0,0 +1,261 @@
+// SPDX-License-Identifier: GPL-2.0+ OR BSD-3-Clause
+/*
+ * Copyright 2022 NXP
+ */
+#include "s32gen1_siul2_nvram.h"
+#include <asm/io.h>
+#include <dm/device.h>
+#include <dm/fdtaddr.h>
+#include <linux/bitops.h>
+#include <linux/errno.h>
+#include <linux/kernel.h>
+#include <log.h>
+#include <misc.h>
+
+#define MIDR1_OFF	0x4
+#define MIDR2_OFF	0x8
+
+/* SIUL2_0, MIDR1 */
+#define MINOR_SHIFT	0
+#define MINOR_MASK	GENMASK(3, MINOR_SHIFT)
+
+#define MAJOR_SHIFT	4
+#define MAJOR_MASK	GENMASK(7, MAJOR_SHIFT)
+
+#define PART_NO_SHIFT	16
+#define PART_NO_MASK	GENMASK(25, PART_NO_SHIFT)
+
+#define LETTER_SHIFT	26
+#define LETTER_MASK	GENMASK(31, LETTER_SHIFT)
+
+/* SIUL2_0, MIDR2 */
+#define CORE_FREQ_SHIFT	16
+#define CORE_FREQ_MASK	GENMASK(19, CORE_FREQ_SHIFT)
+
+/* SIUL2_1 MIDR1 */
+#define SERDES_SHIFT	15
+#define SERDES_MASK	BIT(SERDES_SHIFT)
+
+#define LAX_SHIFT	12
+#define LAX_MASK	BIT(LAX_SHIFT)
+
+/* SIUL2_1 MIDR2 */
+#define S32G2_SUBMINOR_SHIFT	26
+#define S32G2_SUBMINOR_MASK	GENMASK(27, 26)
+
+struct siul2_nvram;
+
+struct siul_mapping {
+	u32 nvram_off;
+	u32 siul2_off;
+	u32 mask;
+	u32 shift;
+	u32 (*adjust_value)(u32 value, struct siul2_nvram *nvram);
+};
+
+struct siul_platdata {
+	const struct siul_mapping *mappings;
+	size_t n_mappings;
+	const struct siul_platdata *next;
+};
+
+struct siul2_nvram {
+	const struct siul_platdata *platdata;
+	fdt_addr_t base;
+};
+
+static u32 adjust_letter(u32 value, struct siul2_nvram *nvram)
+{
+	return ('A' - 1 + value);
+}
+
+static u32 adjust_major(u32 value, struct siul2_nvram *nvram)
+{
+	return value + 1;
+}
+
+static u32 adjust_freq(u32 value, struct siul2_nvram *nvram)
+{
+	static const u32 freqs[] = {
+		[1] = 64,
+		[2] = 80,
+		[3] = 120,
+		[4] = 160,
+		[5] = 240,
+		[6] = 320,
+		[7] = 340,
+		[8] = 400,
+		[9] = 600,
+		[10] = 800,
+		[11] = 1000,
+		[12] = 1100,
+		[14] = 1300,
+	};
+
+	if (value < ARRAY_SIZE(freqs))
+		return freqs[value];
+
+	return 0;
+}
+
+static const struct siul_mapping siul20_mappings[] = {
+	{
+		.nvram_off = S32GEN1_SOC_MAJOR,
+		.siul2_off = MIDR1_OFF,
+		.mask = MAJOR_MASK,
+		.shift = MAJOR_SHIFT,
+		.adjust_value = adjust_major,
+	},
+	{
+		.nvram_off = S32GEN1_SOC_MINOR,
+		.siul2_off = MIDR1_OFF,
+		.mask = MINOR_MASK,
+		.shift = MINOR_SHIFT,
+	},
+	{
+		.nvram_off = S32GEN1_SOC_PART_NO,
+		.siul2_off = MIDR1_OFF,
+		.mask = PART_NO_MASK,
+		.shift = PART_NO_SHIFT,
+	},
+	{
+		.nvram_off = S32GEN1_SOC_LETTER,
+		.siul2_off = MIDR1_OFF,
+		.mask = LETTER_MASK,
+		.shift = LETTER_SHIFT,
+		.adjust_value = adjust_letter,
+	},
+	{
+		.nvram_off = S32GEN1_MAX_CORE_FREQ,
+		.siul2_off = MIDR2_OFF,
+		.mask = CORE_FREQ_MASK,
+		.shift = CORE_FREQ_SHIFT,
+		.adjust_value = adjust_freq,
+	},
+};
+
+static const struct siul_mapping siul21_mappings[] = {
+	{
+		.nvram_off = S32GEN1_SERDES_PRESENCE,
+		.siul2_off = MIDR2_OFF,
+		.mask = SERDES_MASK,
+		.shift = SERDES_SHIFT,
+	},
+	{
+		.nvram_off = S32GEN1_LAX_PRESENCE,
+		.siul2_off = MIDR2_OFF,
+		.mask = LAX_MASK,
+		.shift = LAX_SHIFT,
+	},
+};
+
+static const struct siul_mapping s32g2_siul21_mappings[] = {
+	{
+		.nvram_off = S32GEN1_SOC_SUBMINOR,
+		.siul2_off = MIDR2_OFF,
+		.mask = S32G2_SUBMINOR_MASK,
+		.shift = S32G2_SUBMINOR_SHIFT,
+	},
+};
+
+static const struct siul_platdata siul20_platdata = {
+	.mappings = &siul20_mappings[0],
+	.n_mappings = ARRAY_SIZE(siul20_mappings),
+};
+
+static const struct siul_platdata siul21_platdata = {
+	.mappings = &siul21_mappings[0],
+	.n_mappings = ARRAY_SIZE(siul21_mappings),
+};
+
+static const struct siul_platdata s32g2_siul21_platdata = {
+	.mappings = &s32g2_siul21_mappings[0],
+	.n_mappings = ARRAY_SIZE(s32g2_siul21_mappings),
+	.next = &siul21_platdata,
+};
+
+static int siul2_nvram_read(struct udevice *dev, int offset,
+			    void *buf, int size)
+{
+	struct siul2_nvram *nvram = dev_get_platdata(dev);
+	const struct siul_mapping *mapping = NULL;
+	const struct siul_platdata *platdata = nvram->platdata;
+	size_t i;
+	u32 val;
+
+	/* All values are 4 bytes wide */
+	if (size != sizeof(u32))
+		return 0;
+
+	while (platdata) {
+		for (i = 0u; i < platdata->n_mappings; i++) {
+			if (platdata->mappings[i].nvram_off == offset) {
+				mapping = &platdata->mappings[i];
+				break;
+			}
+		}
+
+		if (mapping)
+			break;
+
+		platdata = platdata->next;
+	}
+
+	if (!mapping)
+		return 0;
+
+	val = readl(nvram->base + mapping->siul2_off);
+
+	val = (val & mapping->mask) >> mapping->shift;
+	if (mapping->adjust_value)
+		val = mapping->adjust_value(val, nvram);
+
+	*((u32 *)buf) = val;
+	return size;
+}
+
+static const struct misc_ops siul2_nvram_ops = {
+	.read = siul2_nvram_read,
+};
+
+static const struct udevice_id siul2_nvram_ids[] = {
+	{
+		.compatible = "fsl,s32-gen1-siul2_0-nvram",
+		.data = (ulong)&siul20_platdata
+	},
+	{
+		.compatible = "fsl,s32g2-siul2_1-nvram",
+		.data = (ulong)&s32g2_siul21_platdata,
+	},
+	{
+		.compatible = "fsl,s32g3-siul2_1-nvram",
+		.data = (ulong)&siul21_platdata,
+	},
+	{
+		.compatible = "fsl,s32r-siul2_1-nvram",
+		.data = (ulong)&siul21_platdata,
+	},
+	{ /* sentinel */ }
+};
+
+static int siul2_nvram_set_platdata(struct udevice *dev)
+{
+	struct siul2_nvram *nvram = dev_get_platdata(dev);
+
+	nvram->base = devfdt_get_addr(dev->parent);
+	if (nvram->base == (fdt_addr_t)FDT_ADDR_T_NONE)
+		return -EINVAL;
+
+	nvram->platdata = (struct siul_platdata *)dev_get_driver_data(dev);
+	return 0;
+}
+
+U_BOOT_DRIVER(s32gen1_siul2_nvram) = {
+	.name = "s32gen1_siul2_nvram",
+	.id = UCLASS_MISC,
+	.ops = &siul2_nvram_ops,
+	.of_match = siul2_nvram_ids,
+	.platdata_auto_alloc_size = sizeof(struct siul2_nvram),
+	.ofdata_to_platdata = siul2_nvram_set_platdata,
+};
+
diff --git a/drivers/misc/s32gen1_siul2_nvram.h b/drivers/misc/s32gen1_siul2_nvram.h
new file mode 100644
index 0000000000..5bd865b19e
--- /dev/null
+++ b/drivers/misc/s32gen1_siul2_nvram.h
@@ -0,0 +1,20 @@
+/* SPDX-License-Identifier: GPL-2.0+ OR BSD-3-Clause */
+/*
+ * Copyright 2022 NXP
+ */
+#ifndef S32GEN1_SIUL2_NVRAM_H
+#define S32GEN1_SIUL2_NVRAM_H
+
+/* siul2_0 */
+#define S32GEN1_SOC_LETTER	0x0
+#define S32GEN1_SOC_PART_NO	0x4
+#define S32GEN1_SOC_MAJOR	0x8
+#define S32GEN1_SOC_MINOR	0xc
+#define S32GEN1_MAX_CORE_FREQ	0x10
+
+/* siul2_1 */
+#define S32GEN1_SERDES_PRESENCE	0x100
+#define S32GEN1_LAX_PRESENCE	0x104
+#define S32GEN1_SOC_SUBMINOR	0x108
+
+#endif
-- 
2.17.1

