From 69a091799e381a3b6668b36baebbb454d6099f79 Mon Sep 17 00:00:00 2001
From: Ciprian Marian Costea <ciprianmarian.costea@nxp.com>
Date: Mon, 8 Nov 2021 20:33:33 +0200
Subject: [PATCH 11/20] s32-gen1: pcie: Check if SerDes subsystem is present

Add check if SerDes subsystem is present before initializing PCIe.

We temporarely disable this check for S32G3 platforms, since
current version of S32G3 SoC's have an inaccessible MIDR2 register
from SIUL2_1 module.

Issue: ALB-8072
Upstream-Status: Pending 

Signed-off-by: Ciprian Marian Costea <ciprianmarian.costea@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 arch/arm/dts/fsl-s32g3xxaevb.dts     |  8 ++++++++
 arch/arm/include/asm/arch-s32/siul.h |  7 +++++++
 drivers/pci/pcie_s32gen1.c           | 11 +++++++++++
 drivers/pci/pcie_s32gen1.h           |  3 ++-
 4 files changed, 28 insertions(+), 1 deletion(-)

diff --git a/arch/arm/dts/fsl-s32g3xxaevb.dts b/arch/arm/dts/fsl-s32g3xxaevb.dts
index 91d5fc645a..5aa6525028 100644
--- a/arch/arm/dts/fsl-s32g3xxaevb.dts
+++ b/arch/arm/dts/fsl-s32g3xxaevb.dts
@@ -7,3 +7,11 @@
 #include "fsl-s32g.dtsi"
 #include "fsl-s32g3.dtsi"
 #include "fsl-s32gxxxaevb.dtsi"
+
+&pcie0 {
+	no-check-serdes;
+};
+
+&pcie1 {
+	no-check-serdes;
+};
diff --git a/arch/arm/include/asm/arch-s32/siul.h b/arch/arm/include/asm/arch-s32/siul.h
index e9746824bf..4f66878d0f 100644
--- a/arch/arm/include/asm/arch-s32/siul.h
+++ b/arch/arm/include/asm/arch-s32/siul.h
@@ -11,6 +11,7 @@
 
 #include <asm/io.h>
 #include <asm/arch/imx-regs.h>
+#include <linux/bitops.h>
 #include "ddr.h"
 
 #if defined(CONFIG_S32_GEN1) && !defined(CONFIG_TARGET_TYPE_S32GEN1_SIMULATOR)
@@ -68,6 +69,7 @@
 #endif
 #define SIUL2_MIDR1_DERIV_MASK		(0xFFFF0000U)
 #define SIUL2_MIDR1_OFF			(16U)
+#define SIUL2_MIDR2_SERDES			BIT(15)
 #endif  /* CONFIG_S32_GEN1 */
 
 #define TREERUNNER_GENERATION_2_MAJOR	1
@@ -153,6 +155,11 @@ static inline int get_siul2_midr2_subminor(void)
 			>> SIUL2_MIDR2_SUBMINOR_SHIFT);
 }
 
+static inline int is_serdes_subsystem_present(void)
+{
+	return (readl(SIUL2_1_MIDR2) & SIUL2_MIDR2_SERDES);
+}
+
 #endif  /* CONFIG_S32_GEN1 */
 
 #endif /*__ARCH_ARM_MACH_S32V234_SIUL_H__ */
diff --git a/drivers/pci/pcie_s32gen1.c b/drivers/pci/pcie_s32gen1.c
index a8732577c8..26b525d965 100644
--- a/drivers/pci/pcie_s32gen1.c
+++ b/drivers/pci/pcie_s32gen1.c
@@ -754,6 +754,9 @@ static int s32_pcie_get_config_from_device_tree(struct s32_pcie *pcie)
 	/* get supported width (X1/X2) from device tree */
 	pcie->linkwidth = fdtdec_get_int(fdt, node, "num-lanes", X1);
 
+	if (fdt_getprop(fdt, node, "no-check-serdes", NULL))
+		pcie->no_check_serdes = true;
+
 	return ret;
 }
 
@@ -893,6 +896,7 @@ static int s32_pcie_probe(struct udevice *dev)
 	ulong dev_data = dev_get_driver_data(dev);
 
 	pcie->enabled = false;
+	pcie->no_check_serdes = false;
 
 	debug("%s: probing %s\n", __func__, dev->name);
 	if (!pcie) {
@@ -908,6 +912,13 @@ static int s32_pcie_probe(struct udevice *dev)
 	if (ret)
 		return ret;
 
+	if (!pcie->no_check_serdes) {
+		if (!is_serdes_subsystem_present()) {
+			printf("SerDes Subsystem is not present, skipping configuring PCIe\n");
+			return -ENODEV;
+		}
+	}
+
 	ltssm_en = is_s32gen1_pcie_ltssm_enabled(pcie);
 	if (!ltssm_en) {
 		printf("PCIe%d: Not configuring PCIe, PHY not configured\n",
diff --git a/drivers/pci/pcie_s32gen1.h b/drivers/pci/pcie_s32gen1.h
index 3bcdce8785..e7bf00b86a 100644
--- a/drivers/pci/pcie_s32gen1.h
+++ b/drivers/pci/pcie_s32gen1.h
@@ -1,6 +1,6 @@
 /* SPDX-License-Identifier: GPL-2.0+ */
 /*
- * Copyright 2019-2020 NXP
+ * Copyright 2019-2021 NXP
  * S32Gen1 PCIe driver
  */
 
@@ -152,6 +152,7 @@ struct s32_pcie {
 	int id;
 	bool enabled;
 	bool ep_mode;
+	bool no_check_serdes;
 	enum serdes_link_width linkwidth;
 	enum pcie_link_speed linkspeed;
 	int atu_out_num;
-- 
2.17.1

