From b93e31b7c7aa17f5d15e8d078f426c4aa8ef7baf Mon Sep 17 00:00:00 2001
From: Bogdan-Gabriel Roman <bogdan-gabriel.roman@nxp.com>
Date: Thu, 3 Feb 2022 12:14:59 +0200
Subject: [PATCH 01/43] sram: remove initsram command

initsram command can be replaced using:
    => dcache off
    => mw.w 0x34000000 0x0 0x500000
    => dcache on

Issue: ALB-8350
Upstream-Status: Pending 

Signed-off-by: Bogdan-Gabriel Roman <bogdan-gabriel.roman@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 arch/arm/cpu/armv8/s32/Makefile   |  3 +-
 arch/arm/cpu/armv8/s32/initsram.c | 69 -------------------------------
 2 files changed, 1 insertion(+), 71 deletions(-)
 delete mode 100644 arch/arm/cpu/armv8/s32/initsram.c

diff --git a/arch/arm/cpu/armv8/s32/Makefile b/arch/arm/cpu/armv8/s32/Makefile
index 1cb3947a20..efdfb19dea 100644
--- a/arch/arm/cpu/armv8/s32/Makefile
+++ b/arch/arm/cpu/armv8/s32/Makefile
@@ -1,7 +1,7 @@
 # SPDX-License-Identifier:	GPL-2.0+
 #
 # (C) Copyright 2013-2016 Freescale Semiconductor, Inc.
-# (C) Copyright 2016-2018, 2020-2021 NXP
+# (C) Copyright 2016-2018, 2020-2022 NXP
 #
 ccflags-y += -I./board/freescale/common/
 ccflags-y += -Iarch/arm/cpu/armv8/s32/
@@ -14,7 +14,6 @@ obj-$(CONFIG_SYS_PIT_TIMER)	+= timer.o
 obj-$(CONFIG_GICSUPPORT)	+= gicsupport.o
 obj-$(CONFIG_MP)		+= mp.o
 obj-$(CONFIG_OF_LIBFDT)		+= fdt.o
-obj-y				+= initsram.o
 ccflags-y			+= -Idrivers/clk/s32/include
 ccflags-y			+= -Idrivers/misc
 ccflags-y			+= -Iboard/freescale/s32-gen1
diff --git a/arch/arm/cpu/armv8/s32/initsram.c b/arch/arm/cpu/armv8/s32/initsram.c
deleted file mode 100644
index e5fbdd9dc7..0000000000
--- a/arch/arm/cpu/armv8/s32/initsram.c
+++ /dev/null
@@ -1,69 +0,0 @@
-// SPDX-License-Identifier:     GPL-2.0+
-/*
- * Copyright 2018,2020-2021 NXP
- */
-
-#include <asm/arch-s32/soc.h>
-#include <common.h>
-#include <cpu_func.h>
-#include <linux/kernel.h>
-#include <sram.h>
-
-static int do_init_sram(cmd_tbl_t *cmdtp, int flag, int argc,
-			char * const argv[])
-{
-	unsigned long addr;
-	unsigned int size, max_size, ret;
-	char *ep;
-
-	if (argc < 3)
-		return CMD_RET_USAGE;
-
-	addr = simple_strtoul(argv[1], &ep, 16);
-	if (ep == argv[1] || *ep != '\0')
-		return CMD_RET_USAGE;
-
-	size = simple_strtoul(argv[2], &ep, 16);
-	if (ep == argv[2] || *ep != '\0')
-		return CMD_RET_USAGE;
-
-	if (!IS_ALIGNED(addr, 32)) {
-		printf("ERROR: Address 0x%08lX is not 32 byte aligned ...\n",
-		       addr);
-		return CMD_RET_USAGE;
-	}
-
-	if (!IS_ALIGNED(size, 32)) {
-		printf("ERROR: size 0x%08X is not a 32 byte multiple ...\n",
-		       size);
-		return CMD_RET_USAGE;
-	}
-
-	if (!is_addr_in_sram(addr)) {
-		printf("ERROR: Address 0x%08lX not in internal SRAM ...\n",
-		       addr);
-		return CMD_RET_USAGE;
-	}
-
-	max_size = get_sram_size() - (addr - S32_SRAM_BASE);
-	if (size > max_size) {
-		printf("WARNING: given size exceeds SRAM boundaries.\n");
-		size = max_size;
-	}
-
-	invalidate_dcache_range(addr, addr + size);
-	ret = sram_clr(addr, size);
-	if (!ret) {
-		printf("Init SRAM failed\n");
-		return CMD_RET_FAILURE;
-	}
-
-	return CMD_RET_SUCCESS;
-}
-
-U_BOOT_CMD(
-		initsram,	3,	1,	do_init_sram,
-		"Initialize SRAM from address",
-		"startAddress[hex] size[hex]"
-	  );
-
-- 
2.17.1

