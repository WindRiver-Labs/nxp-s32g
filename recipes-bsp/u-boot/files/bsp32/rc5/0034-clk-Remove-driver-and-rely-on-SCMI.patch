From ed28bf73b1ef2544e33dc6fd2d1afb0aefb406ae Mon Sep 17 00:00:00 2001
From: Andrei Cherechesu <andrei.cherechesu@nxp.com>
Date: Tue, 8 Feb 2022 17:19:56 +0200
Subject: [PATCH 34/43] clk: Remove driver and rely on SCMI

Removed all the s32-gen1 clk driver code and include
files, since the clock enablement will be done via
SCMI mechanism by ATF.

CONFIG_S32GEN1_SET_NEAREST_FREQ has been removed.

Issue: ALB-8352
Upstream-Status: Pending 

Signed-off-by: Andrei Cherechesu <andrei.cherechesu@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 arch/arm/include/asm/arch-s32/siul.h          |  10 -
 board/freescale/s32-gen1/Kconfig              |   9 -
 drivers/clk/s32/Makefile                      |  14 +-
 drivers/clk/s32/clk_dump/Makefile             |  13 -
 drivers/clk/s32/clk_dump/clk_dump.c           |  41 -
 .../clk/s32/clk_dump/include/s32g_clk_dump.h  |  12 -
 .../s32/clk_dump/include/s32gen1_clk_dump.h   |  29 -
 drivers/clk/s32/clk_dump/s32g3_clk_names.c    |  27 -
 drivers/clk/s32/clk_dump/s32g_clk_names.c     |  96 --
 drivers/clk/s32/clk_dump/s32gen1_clk_names.c  | 134 ---
 drivers/clk/s32/clk_dump/s32r45_clk_names.c   |  67 --
 drivers/clk/s32/clk_utils.c                   |  47 +-
 drivers/clk/s32/early_clocks.c                | 225 ----
 drivers/clk/s32/enable_clk.c                  | 966 ------------------
 drivers/clk/s32/get_rate.c                    | 333 ------
 drivers/clk/s32/include/s32g_clk_funcs.h      |  12 -
 drivers/clk/s32/include/s32gen1_clk_funcs.h   |  27 +-
 drivers/clk/s32/include/s32gen1_clk_modules.h | 459 ---------
 drivers/clk/s32/include/s32gen1_clk_utils.h   |  20 -
 drivers/clk/s32/include/s32gen1_scmi_clk.h    |  32 -
 drivers/clk/s32/include/s32gen1_shared_clks.h |  20 -
 drivers/clk/s32/s32g274a_clk.c                | 157 ---
 drivers/clk/s32/s32g3_clk.c                   | 204 ----
 drivers/clk/s32/s32g_clk.c                    | 325 ------
 drivers/clk/s32/s32g_scmi_ids.c               | 301 ------
 drivers/clk/s32/s32gen1_clk.c                 | 600 -----------
 drivers/clk/s32/s32gen1_clk_drv.c             | 209 ----
 drivers/clk/s32/s32gen1_scmi_clk.c            | 128 ---
 drivers/clk/s32/s32gen1_scmi_ids.c            | 298 ------
 drivers/clk/s32/s32r45_clk.c                  | 340 ------
 drivers/clk/s32/s32r45_scmi_ids.c             | 215 ----
 drivers/clk/s32/set_par_rate.c                | 305 ------
 32 files changed, 5 insertions(+), 5670 deletions(-)
 delete mode 100644 drivers/clk/s32/clk_dump/Makefile
 delete mode 100644 drivers/clk/s32/clk_dump/clk_dump.c
 delete mode 100644 drivers/clk/s32/clk_dump/include/s32g_clk_dump.h
 delete mode 100644 drivers/clk/s32/clk_dump/include/s32gen1_clk_dump.h
 delete mode 100644 drivers/clk/s32/clk_dump/s32g3_clk_names.c
 delete mode 100644 drivers/clk/s32/clk_dump/s32g_clk_names.c
 delete mode 100644 drivers/clk/s32/clk_dump/s32gen1_clk_names.c
 delete mode 100644 drivers/clk/s32/clk_dump/s32r45_clk_names.c
 delete mode 100644 drivers/clk/s32/early_clocks.c
 delete mode 100644 drivers/clk/s32/enable_clk.c
 delete mode 100644 drivers/clk/s32/get_rate.c
 delete mode 100644 drivers/clk/s32/include/s32g_clk_funcs.h
 delete mode 100644 drivers/clk/s32/include/s32gen1_clk_modules.h
 delete mode 100644 drivers/clk/s32/include/s32gen1_clk_utils.h
 delete mode 100644 drivers/clk/s32/include/s32gen1_scmi_clk.h
 delete mode 100644 drivers/clk/s32/include/s32gen1_shared_clks.h
 delete mode 100644 drivers/clk/s32/s32g274a_clk.c
 delete mode 100644 drivers/clk/s32/s32g3_clk.c
 delete mode 100644 drivers/clk/s32/s32g_clk.c
 delete mode 100644 drivers/clk/s32/s32g_scmi_ids.c
 delete mode 100644 drivers/clk/s32/s32gen1_clk.c
 delete mode 100644 drivers/clk/s32/s32gen1_clk_drv.c
 delete mode 100644 drivers/clk/s32/s32gen1_scmi_clk.c
 delete mode 100644 drivers/clk/s32/s32gen1_scmi_ids.c
 delete mode 100644 drivers/clk/s32/s32r45_clk.c
 delete mode 100644 drivers/clk/s32/s32r45_scmi_ids.c
 delete mode 100644 drivers/clk/s32/set_par_rate.c

diff --git a/arch/arm/include/asm/arch-s32/siul.h b/arch/arm/include/asm/arch-s32/siul.h
index 00393addfb..1d10fb77e0 100644
--- a/arch/arm/include/asm/arch-s32/siul.h
+++ b/arch/arm/include/asm/arch-s32/siul.h
@@ -16,10 +16,6 @@
 #define SIUL2_MIDR1				(SIUL2_0_BASE_ADDR + 0x00000004)
 #define SIUL2_MIDR2				(SIUL2_0_BASE_ADDR + 0x00000008)
 
-/* SIUL2_MIDR2 masks */
-#define SIUL2_MIDR2_FREQ_SHIFT		(16)
-#define SIUL2_MIDR2_FREQ_MASK		(0xF << SIUL2_MIDR2_FREQ_SHIFT)
-
 #define SIUL2_MIDR1_DERIV_MASK		(0xFFFF0000U)
 #define SIUL2_MIDR1_OFF			(16U)
 
@@ -71,10 +67,4 @@ static inline const char *get_s32g2_deriv_name(void)
 }
 #endif
 
-static inline u32 get_siul2_midr2_freq(void)
-{
-	return ((readl(SIUL2_MIDR2) & SIUL2_MIDR2_FREQ_MASK)
-			>> SIUL2_MIDR2_FREQ_SHIFT);
-}
-
 #endif /*____ARCH_ARM_MACH_S32_SIUL_H__ */
diff --git a/board/freescale/s32-gen1/Kconfig b/board/freescale/s32-gen1/Kconfig
index 9898c1347e..c284af2b42 100644
--- a/board/freescale/s32-gen1/Kconfig
+++ b/board/freescale/s32-gen1/Kconfig
@@ -13,15 +13,6 @@ config NXP_S32GRDB_BOARD
 	default y
 	depends on TARGET_S32G274ARDB2 || TARGET_S32G399ARDB3
 
-config S32GEN1_SET_NEAREST_FREQ
-	bool "Set the frequency to the nearest available"
-	default n
-	help
-	  Select this config to allow the clock driver to set
-	  the nearest frequency for a clock if the requested
-	  one cannot be set. In both cases, an error will be
-	  printed with the targeted and the actual frequency.
-
 config S32GEN1_DRAM_INLINE_ECC
 	bool "S32 GEN1 inline ECC"
 	default y if !TARGET_TYPE_S32GEN1_EMULATOR
diff --git a/drivers/clk/s32/Makefile b/drivers/clk/s32/Makefile
index 3cae736fbd..67c1bf83a8 100644
--- a/drivers/clk/s32/Makefile
+++ b/drivers/clk/s32/Makefile
@@ -1,20 +1,8 @@
 # SPDX-License-Identifier:	GPL-2.0+
 #
-# Copyright 2020-2021 NXP
+# Copyright 2020-2022 NXP
 #
-obj-y += s32gen1_clk_drv.o
-obj-y += enable_clk.o
-obj-y += get_rate.o
-obj-y += set_par_rate.o
-obj-y += s32gen1_clk.o
-obj-y += early_clocks.o
 obj-y += clk_utils.o
-obj-y += s32gen1_scmi_ids.o
-obj-y += s32gen1_scmi_clk.o
-obj-$(CONFIG_NXP_S32G2XX) += s32g274a_clk.o s32g_clk.o s32g_scmi_ids.o
-obj-$(CONFIG_NXP_S32G3XX) += s32g3_clk.o s32g_clk.o s32g_scmi_ids.o
-obj-$(CONFIG_NXP_S32R45) += s32r45_clk.o s32r45_scmi_ids.o
-obj-$(CONFIG_CMD_CLK) += clk_dump/
 
 ccflags-y += -Iarch/arm/include/asm/arch-s32/s32-gen1
 ccflags-y += -Idrivers/clk/s32/include
diff --git a/drivers/clk/s32/clk_dump/Makefile b/drivers/clk/s32/clk_dump/Makefile
deleted file mode 100644
index 02ab8cf63a..0000000000
--- a/drivers/clk/s32/clk_dump/Makefile
+++ /dev/null
@@ -1,13 +0,0 @@
-#
-# Copyright 2020-2021 NXP
-#
-# SPDX-License-Identifier:	GPL-2.0+
-#
-obj-y += clk_dump.o
-obj-y += s32gen1_clk_names.o
-obj-$(CONFIG_NXP_S32G2XX) += s32g_clk_names.o
-obj-$(CONFIG_NXP_S32G3XX) += s32g_clk_names.o s32g3_clk_names.o
-obj-$(CONFIG_NXP_S32R45) += s32r45_clk_names.o
-
-ccflags-y += -Idrivers/clk/s32/include
-ccflags-y += -Idrivers/clk/s32/clk_dump/include
diff --git a/drivers/clk/s32/clk_dump/clk_dump.c b/drivers/clk/s32/clk_dump/clk_dump.c
deleted file mode 100644
index 9f06fceb58..0000000000
--- a/drivers/clk/s32/clk_dump/clk_dump.c
+++ /dev/null
@@ -1,41 +0,0 @@
-// SPDX-License-Identifier: BSD-3-Clause
-/*
- * Copyright 2020 NXP
- */
-#include <clk.h>
-#include <s32gen1_clk_dump.h>
-#include <s32gen1_clk_funcs.h>
-#include <s32gen1_clk_utils.h>
-
-int soc_clk_dump(void)
-{
-	struct clk clk;
-	struct udevice *dev;
-	struct s32gen1_clk *s32_clk;
-	struct s32gen1_clk_blk *clk_name;
-	ulong i, rate, id;
-	const char *name;
-
-	dev = get_clk_device();
-	if (!dev)
-		return -EINVAL;
-
-	clk.dev = dev;
-
-	for (i = 0; clk_name = s32gen1_get_clk_blk(i), clk_name; i++) {
-		id = clk_name->id;
-		name = s32gen1_get_clock_name(clk_name);
-
-		s32_clk = get_clock(id);
-		if (!s32_clk)
-			continue;
-
-		clk.id = id;
-		rate = s32gen1_get_rate(&clk);
-
-		printf("%-30.30s : %lu Hz\n", name, rate);
-	}
-
-	return 0;
-}
-
diff --git a/drivers/clk/s32/clk_dump/include/s32g_clk_dump.h b/drivers/clk/s32/clk_dump/include/s32g_clk_dump.h
deleted file mode 100644
index f03727ab3e..0000000000
--- a/drivers/clk/s32/clk_dump/include/s32g_clk_dump.h
+++ /dev/null
@@ -1,12 +0,0 @@
-/* SPDX-License-Identifier: BSD-3-Clause */
-/*
- * Copyright 2021 NXP
- */
-#ifndef S32G_CLK_DUMP_H
-#define S32G_CLK_DUMP_H
-
-#include <s32gen1_clk_dump.h>
-
-struct s32gen1_clk_blk *s32g_get_plat_clk_blk(u32 id);
-
-#endif
diff --git a/drivers/clk/s32/clk_dump/include/s32gen1_clk_dump.h b/drivers/clk/s32/clk_dump/include/s32gen1_clk_dump.h
deleted file mode 100644
index 68e4afe038..0000000000
--- a/drivers/clk/s32/clk_dump/include/s32gen1_clk_dump.h
+++ /dev/null
@@ -1,29 +0,0 @@
-/* SPDX-License-Identifier: BSD-3-Clause */
-/*
- * Copyright 2020 NXP
- */
-#ifndef S32GEN1_CLK_DUMP_H
-#define S32GEN1_CLK_DUMP_H
-
-#include <compiler.h>
-
-#define S32GEN1_CLK_PREFIX	"S32GEN1_CLK_"
-
-#define S32GEN1_CLK_NAME_INIT(ID, NAME) \
-{                                       \
-	.id = (ID),                     \
-	.name = (NAME),                 \
-}                                       \
-
-struct s32gen1_clk_blk {
-	ulong id;
-	const char *name;
-};
-
-struct s32gen1_clk_blk *s32gen1_get_clk_blk(u32 id);
-const char *s32gen1_get_clock_name(struct s32gen1_clk_blk *clk);
-
-struct s32gen1_clk_blk *s32gen1_get_plat_clk_blk(u32 id);
-const char *s32gen1_get_plat_clock_name(struct s32gen1_clk_blk *clk);
-
-#endif
diff --git a/drivers/clk/s32/clk_dump/s32g3_clk_names.c b/drivers/clk/s32/clk_dump/s32g3_clk_names.c
deleted file mode 100644
index d4c7530d8d..0000000000
--- a/drivers/clk/s32/clk_dump/s32g3_clk_names.c
+++ /dev/null
@@ -1,27 +0,0 @@
-// SPDX-License-Identifier: BSD-3-Clause
-/*
- * Copyright 2021 NXP
- */
-#include <dt-bindings/clock/s32g-clock.h>
-#include <dt-bindings/clock/s32g3-clock.h>
-#include <linux/kernel.h>
-#include <s32g_clk_dump.h>
-
-#define CLK_NAME(ID_DEF)     \
-	S32GEN1_CLK_NAME_INIT(ID_DEF, #ID_DEF)
-
-static struct s32gen1_clk_blk s32g3_clk_blks[] = {
-	CLK_NAME(S32G_CLK_MC_CGM6_MUX0),
-	CLK_NAME(S32G_CLK_MC_CGM6_MUX1),
-	CLK_NAME(S32G_CLK_MC_CGM6_MUX2),
-	CLK_NAME(S32G_CLK_MC_CGM6_MUX3),
-};
-
-struct s32gen1_clk_blk *s32g_get_plat_clk_blk(u32 id)
-{
-	if (id < ARRAY_SIZE(s32g3_clk_blks))
-		return &s32g3_clk_blks[id];
-
-	return NULL;
-}
-
diff --git a/drivers/clk/s32/clk_dump/s32g_clk_names.c b/drivers/clk/s32/clk_dump/s32g_clk_names.c
deleted file mode 100644
index 9494751f46..0000000000
--- a/drivers/clk/s32/clk_dump/s32g_clk_names.c
+++ /dev/null
@@ -1,96 +0,0 @@
-// SPDX-License-Identifier: BSD-3-Clause
-/*
- * Copyright 2020-2021 NXP
- */
-#include <dt-bindings/clock/s32g-clock.h>
-#include <linux/kernel.h>
-#include <s32gen1_clk_dump.h>
-
-#define S32G_CLK_PREFIX	"S32G_CLK_"
-
-#define CLK_NAME(ID_DEF)     \
-	S32GEN1_CLK_NAME_INIT(ID_DEF, #ID_DEF)
-
-static struct s32gen1_clk_blk s32g_clk_blks[] = {
-	CLK_NAME(S32GEN1_CLK_PER),
-	CLK_NAME(S32GEN1_CLK_CAN_PE),
-	CLK_NAME(S32G_CLK_ACCEL_PLL_PHI0),
-	CLK_NAME(S32G_CLK_ACCEL_PLL_PHI1),
-	CLK_NAME(S32G_CLK_SERDES0_LANE1_CDR),
-	CLK_NAME(S32G_CLK_SERDES0_LANE1_TX),
-	CLK_NAME(S32G_CLK_PFE_MAC0_EXT_TX),
-	CLK_NAME(S32G_CLK_PFE_MAC0_EXT_RX),
-	CLK_NAME(S32G_CLK_PFE_MAC0_EXT_REF),
-	CLK_NAME(S32G_CLK_PFE_MAC1_EXT_TX),
-	CLK_NAME(S32G_CLK_PFE_MAC1_EXT_RX),
-	CLK_NAME(S32G_CLK_PFE_MAC1_EXT_REF),
-	CLK_NAME(S32G_CLK_PFE_MAC2_EXT_TX),
-	CLK_NAME(S32G_CLK_PFE_MAC2_EXT_RX),
-	CLK_NAME(S32G_CLK_PFE_MAC2_EXT_REF),
-	CLK_NAME(S32G_CLK_SERDES1_LANE0_TX),
-	CLK_NAME(S32G_CLK_SERDES1_LANE0_CDR),
-	CLK_NAME(S32G_CLK_PFE_MAC0_REF_DIV),
-	CLK_NAME(S32G_CLK_PFE_MAC1_REF_DIV),
-	CLK_NAME(S32G_CLK_PFE_MAC2_REF_DIV),
-	CLK_NAME(S32G_CLK_SERDES1_LANE1_TX),
-	CLK_NAME(S32G_CLK_SERDES1_LANE1_CDR),
-	/* PFE_MAC0 */
-	CLK_NAME(S32G_CLK_PFE_MAC0_RX),
-	CLK_NAME(S32G_CLK_PFE_MAC0_TX_DIV),
-	CLK_NAME(S32G_CLK_MC_CGM2_MUX1),
-	CLK_NAME(S32G_CLK_MC_CGM2_MUX4),
-	CLK_NAME(S32G_CLK_MC_CGM2_MUX7),
-	/* PFE_MAC1 */
-	CLK_NAME(S32G_CLK_PFE_MAC1_RX),
-	CLK_NAME(S32G_CLK_PFE_MAC1_TX),
-	CLK_NAME(S32G_CLK_MC_CGM2_MUX2),
-	CLK_NAME(S32G_CLK_MC_CGM2_MUX5),
-	CLK_NAME(S32G_CLK_MC_CGM2_MUX8),
-	/* PFE_MAC2 */
-	CLK_NAME(S32G_CLK_PFE_MAC2_RX),
-	CLK_NAME(S32G_CLK_PFE_MAC2_TX),
-	CLK_NAME(S32G_CLK_MC_CGM2_MUX3),
-	CLK_NAME(S32G_CLK_MC_CGM2_MUX6),
-	CLK_NAME(S32G_CLK_MC_CGM2_MUX9),
-	CLK_NAME(S32G_CLK_MC_CGM2_MUX0),
-	CLK_NAME(S32G_CLK_PFE_SYS),
-	CLK_NAME(S32G_CLK_PFE_PE),
-};
-
-const char *plat_clk_name(const char *name)
-{
-	static size_t s32gen1_len = sizeof(S32GEN1_CLK_PREFIX) - 1;
-	static size_t s32g_len = sizeof(S32G_CLK_PREFIX) - 1;
-
-	if (!name)
-		return NULL;
-
-	if (!strncmp(name, S32GEN1_CLK_PREFIX, s32gen1_len))
-		return name + s32gen1_len;
-
-	return name + s32g_len;
-}
-
-__weak struct s32gen1_clk_blk *s32g_get_plat_clk_blk(u32 id)
-{
-	return NULL;
-}
-
-struct s32gen1_clk_blk *s32gen1_get_plat_clk_blk(u32 id)
-{
-	if (id < ARRAY_SIZE(s32g_clk_blks))
-		return &s32g_clk_blks[id];
-
-	id -= ARRAY_SIZE(s32g_clk_blks);
-
-	return s32g_get_plat_clk_blk(id);
-}
-
-const char *s32gen1_get_plat_clock_name(struct s32gen1_clk_blk *clk)
-{
-	if (!clk)
-		return NULL;
-
-	return plat_clk_name(clk->name);
-}
-
diff --git a/drivers/clk/s32/clk_dump/s32gen1_clk_names.c b/drivers/clk/s32/clk_dump/s32gen1_clk_names.c
deleted file mode 100644
index e45ead00fc..0000000000
--- a/drivers/clk/s32/clk_dump/s32gen1_clk_names.c
+++ /dev/null
@@ -1,134 +0,0 @@
-// SPDX-License-Identifier: BSD-3-Clause
-/*
- * Copyright 2020 NXP
- */
-#include <dt-bindings/clock/s32gen1-clock.h>
-#include <linux/kernel.h>
-#include <s32gen1_clk_dump.h>
-
-#define CLK_NAME(ID_DEF)     \
-	S32GEN1_CLK_NAME_INIT(ID_DEF, #ID_DEF)
-
-static struct s32gen1_clk_blk s32gen1_clk_blks[] = {
-	/* Oscillators */
-	CLK_NAME(S32GEN1_CLK_FIRC),
-	CLK_NAME(S32GEN1_CLK_SIRC),
-	CLK_NAME(S32GEN1_CLK_FXOSC),
-	/* ARM PLL */
-	CLK_NAME(S32GEN1_CLK_ARM_PLL_MUX),
-	CLK_NAME(S32GEN1_CLK_ARM_PLL_VCO),
-	CLK_NAME(S32GEN1_CLK_ARM_PLL_PHI0),
-	/* ARM DFS */
-	CLK_NAME(S32GEN1_CLK_ARM_PLL_DFS1),
-	CLK_NAME(S32GEN1_CLK_ARM_PLL_DFS2),
-	/* ARM - MC_CGM1 */
-	CLK_NAME(S32GEN1_CLK_MC_CGM1_MUX0),
-	CLK_NAME(S32GEN1_CLK_A53_CORE),
-	CLK_NAME(S32GEN1_CLK_A53_CORE_DIV2),
-	CLK_NAME(S32GEN1_CLK_A53_CORE_DIV10),
-	/* ARM - MC_CGM0 */
-	CLK_NAME(S32GEN1_CLK_MC_CGM0_MUX0),
-	CLK_NAME(S32GEN1_CLK_XBAR_2X),
-	CLK_NAME(S32GEN1_CLK_XBAR),
-	CLK_NAME(S32GEN1_CLK_XBAR_DIV2),
-	CLK_NAME(S32GEN1_CLK_XBAR_DIV3),
-	CLK_NAME(S32GEN1_CLK_XBAR_DIV4),
-	CLK_NAME(S32GEN1_CLK_XBAR_DIV6),
-	/* PERIPH PLL */
-	CLK_NAME(S32GEN1_CLK_PERIPH_PLL_MUX),
-	CLK_NAME(S32GEN1_CLK_PERIPH_PLL_VCO),
-	CLK_NAME(S32GEN1_CLK_PERIPH_PLL_PHI0),
-	CLK_NAME(S32GEN1_CLK_PERIPH_PLL_PHI1),
-	CLK_NAME(S32GEN1_CLK_PERIPH_PLL_PHI2),
-	CLK_NAME(S32GEN1_CLK_PERIPH_PLL_PHI3),
-	CLK_NAME(S32GEN1_CLK_PERIPH_PLL_PHI4),
-	CLK_NAME(S32GEN1_CLK_PERIPH_PLL_PHI5),
-	CLK_NAME(S32GEN1_CLK_PERIPH_PLL_PHI7),
-	/* PERIPH DFS */
-	CLK_NAME(S32GEN1_CLK_PERIPH_PLL_DFS1),
-	CLK_NAME(S32GEN1_CLK_PERIPH_PLL_DFS2),
-	CLK_NAME(S32GEN1_CLK_PERIPH_PLL_DFS3),
-	CLK_NAME(S32GEN1_CLK_PERIPH_PLL_DFS5),
-	/* PERIPH - MC_CGM0 */
-	CLK_NAME(S32GEN1_CLK_SERDES_REF),
-	CLK_NAME(S32GEN1_CLK_MC_CGM0_MUX3),
-	CLK_NAME(S32GEN1_CLK_MC_CGM0_MUX4),
-	CLK_NAME(S32GEN1_CLK_FTM0_EXT_REF),
-	CLK_NAME(S32GEN1_CLK_FTM0_REF),
-	CLK_NAME(S32GEN1_CLK_MC_CGM0_MUX5),
-	CLK_NAME(S32GEN1_CLK_FTM1_EXT_REF),
-	CLK_NAME(S32GEN1_CLK_FTM1_REF),
-	CLK_NAME(S32GEN1_CLK_MC_CGM0_MUX6),
-	CLK_NAME(S32GEN1_CLK_FLEXRAY_PE),
-	CLK_NAME(S32GEN1_CLK_MC_CGM0_MUX7),
-	CLK_NAME(S32GEN1_CLK_MC_CGM0_MUX8),
-	CLK_NAME(S32GEN1_CLK_LIN_BAUD),
-	CLK_NAME(S32GEN1_CLK_LINFLEXD),
-	CLK_NAME(S32GEN1_CLK_MC_CGM0_MUX10),
-	CLK_NAME(S32GEN1_CLK_GMAC0_TX),
-	CLK_NAME(S32GEN1_CLK_GMAC0_EXT_TS),
-	CLK_NAME(S32GEN1_CLK_MC_CGM0_MUX9),
-	CLK_NAME(S32GEN1_CLK_GMAC0_TS),
-	CLK_NAME(S32GEN1_CLK_GMAC0_EXT_TX),
-	CLK_NAME(S32GEN1_CLK_GMAC0_EXT_REF),
-	CLK_NAME(S32GEN1_CLK_SERDES0_LANE0_CDR),
-	CLK_NAME(S32GEN1_CLK_SERDES0_LANE0_TX),
-	CLK_NAME(S32GEN1_CLK_GMAC0_EXT_RX),
-	CLK_NAME(S32GEN1_CLK_MC_CGM0_MUX11),
-	CLK_NAME(S32GEN1_CLK_GMAC0_RX),
-	CLK_NAME(S32GEN1_CLK_MC_CGM0_MUX15),
-	CLK_NAME(S32GEN1_CLK_GMAC0_REF_DIV),
-	CLK_NAME(S32GEN1_CLK_GMAC0_REF),
-	CLK_NAME(S32GEN1_CLK_MC_CGM0_MUX16),
-	CLK_NAME(S32GEN1_CLK_SPI),
-	CLK_NAME(S32GEN1_CLK_MC_CGM0_MUX12),
-	CLK_NAME(S32GEN1_CLK_QSPI_2X),
-	CLK_NAME(S32GEN1_CLK_QSPI),
-	CLK_NAME(S32GEN1_CLK_MC_CGM0_MUX14),
-	CLK_NAME(S32GEN1_CLK_SDHC),
-	/* DDR PLL */
-	CLK_NAME(S32GEN1_CLK_DDR_PLL_MUX),
-	CLK_NAME(S32GEN1_CLK_DDR_PLL_VCO),
-	CLK_NAME(S32GEN1_CLK_DDR_PLL_PHI0),
-	CLK_NAME(S32GEN1_CLK_MC_CGM5_MUX0),
-	CLK_NAME(S32GEN1_CLK_DDR),
-	/* ACCEL PLL */
-	CLK_NAME(S32GEN1_CLK_ACCEL_PLL_MUX),
-	CLK_NAME(S32GEN1_CLK_ACCEL_PLL_VCO),
-	/* CLKOUT */
-	CLK_NAME(S32GEN1_CLK_MC_CGM0_MUX1),
-	CLK_NAME(S32GEN1_CLK_CLKOUT0),
-	CLK_NAME(S32GEN1_CLK_MC_CGM0_MUX2),
-	CLK_NAME(S32GEN1_CLK_CLKOUT1),
-};
-
-const char *clk_name(const char *name)
-{
-	if (!name)
-		return NULL;
-
-	return name + sizeof(S32GEN1_CLK_PREFIX) - 1;
-}
-
-struct s32gen1_clk_blk *s32gen1_get_clk_blk(u32 id)
-{
-	if (id < ARRAY_SIZE(s32gen1_clk_blks))
-		return &s32gen1_clk_blks[id];
-
-	id -= ARRAY_SIZE(s32gen1_clk_blks);
-
-	return s32gen1_get_plat_clk_blk(id);
-}
-
-const char *s32gen1_get_clock_name(struct s32gen1_clk_blk *clk)
-{
-	if (!clk)
-		return NULL;
-
-	if (!(clk >= &s32gen1_clk_blks[0] &&
-	      clk <= (&s32gen1_clk_blks[0] + ARRAY_SIZE(s32gen1_clk_blks))))
-		return s32gen1_get_plat_clock_name(clk);
-
-	return clk_name(clk->name);
-}
-
diff --git a/drivers/clk/s32/clk_dump/s32r45_clk_names.c b/drivers/clk/s32/clk_dump/s32r45_clk_names.c
deleted file mode 100644
index 433bbc1cb6..0000000000
--- a/drivers/clk/s32/clk_dump/s32r45_clk_names.c
+++ /dev/null
@@ -1,67 +0,0 @@
-// SPDX-License-Identifier: BSD-3-Clause
-/*
- * Copyright 2020-2021 NXP
- */
-#include <dt-bindings/clock/s32r45-clock.h>
-#include <linux/kernel.h>
-#include <s32gen1_clk_dump.h>
-
-#define S32R45_CLK_PREFIX	"S32R45_CLK_"
-
-#define CLK_NAME(ID_DEF)     \
-	S32GEN1_CLK_NAME_INIT(ID_DEF, #ID_DEF)
-
-static struct s32gen1_clk_blk s32r45_clk_blks[] = {
-	CLK_NAME(S32GEN1_CLK_PER),
-	CLK_NAME(S32GEN1_CLK_CAN_PE),
-	CLK_NAME(S32R45_CLK_ACCEL_PLL_PHI0),
-	CLK_NAME(S32GEN1_CLK_ARM_PLL_DFS4),
-	CLK_NAME(S32R45_CLK_ARM_PLL_DFS4_2),
-	CLK_NAME(S32R45_CLK_GMAC1_EXT_TX),
-	CLK_NAME(S32R45_CLK_GMAC1_EXT_RX),
-	CLK_NAME(S32R45_CLK_GMAC1_EXT_REF),
-	CLK_NAME(S32R45_CLK_SERDES1_LANE0_TX),
-	CLK_NAME(S32R45_CLK_SERDES1_LANE0_CDR),
-	CLK_NAME(S32R45_CLK_GMAC1_REF_DIV),
-	CLK_NAME(S32R45_CLK_MC_CGM2_MUX0),
-	CLK_NAME(S32R45_CLK_ACCEL3),
-	CLK_NAME(S32R45_CLK_ACCEL3_DIV3),
-	CLK_NAME(S32R45_CLK_MC_CGM2_MUX1),
-	CLK_NAME(S32R45_CLK_ACCEL4),
-	CLK_NAME(S32R45_CLK_MC_CGM2_MUX2),
-	CLK_NAME(S32R45_CLK_GMAC1_TX),
-	CLK_NAME(S32R45_CLK_MC_CGM2_MUX3),
-	CLK_NAME(S32R45_CLK_MC_CGM2_MUX4),
-	CLK_NAME(S32R45_CLK_GMAC1_RX),
-};
-
-const char *plat_clk_name(const char *name)
-{
-	static size_t s32gen1_len = sizeof(S32GEN1_CLK_PREFIX) - 1;
-	static size_t s32r45_len = sizeof(S32R45_CLK_PREFIX) - 1;
-
-	if (!name)
-		return NULL;
-
-	if (!strncmp(name, S32GEN1_CLK_PREFIX, s32gen1_len))
-		return name + s32gen1_len;
-
-	return name + s32r45_len;
-}
-
-struct s32gen1_clk_blk *s32gen1_get_plat_clk_blk(u32 id)
-{
-	if (id < ARRAY_SIZE(s32r45_clk_blks))
-		return &s32r45_clk_blks[id];
-
-	return NULL;
-}
-
-const char *s32gen1_get_plat_clock_name(struct s32gen1_clk_blk *clk)
-{
-	if (!clk)
-		return NULL;
-
-	return plat_clk_name(clk->name);
-}
-
diff --git a/drivers/clk/s32/clk_utils.c b/drivers/clk/s32/clk_utils.c
index 5995cc573c..19f32aaf1d 100644
--- a/drivers/clk/s32/clk_utils.c
+++ b/drivers/clk/s32/clk_utils.c
@@ -1,15 +1,15 @@
 // SPDX-License-Identifier:     GPL-2.0+
 /*
- * Copyright 2018-2020 NXP
+ * Copyright 2018-2022 NXP
  */
 
 #include <asm/arch/clock.h>
 #include <dm/uclass.h>
 #include <dt-bindings/clock/s32gen1-clock.h>
-#include <s32gen1_clk_utils.h>
+#include "s32gen1_clk_utils.h"
 #include <s32gen1_clk_funcs.h>
 
-struct udevice *get_clk_device(void)
+static struct udevice *get_clk_device(void)
 {
 	static struct udevice *dev;
 	int ret;
@@ -73,47 +73,6 @@ int s32gen1_enable_dev_clk(const char *name, struct udevice *dev)
 	return ret;
 }
 
-ulong s32gen1_get_plat_clk_rate(ulong clk_id)
-{
-	struct clk clk;
-	struct udevice *clkdev = get_clk_device();
-	ulong rate;
-	int ret;
-
-	if (!clkdev)
-		return -EINVAL;
-
-	clk.id = clk_id;
-	ret = clk_request(clkdev, &clk);
-	if (ret)
-		return 0;
-
-	rate = clk_get_rate(&clk);
-
-	(void)clk_free(&clk);
-	return rate;
-}
-
-int s32gen1_enable_plat_clk(ulong clk_id)
-{
-	struct clk clk;
-	struct udevice *clkdev = get_clk_device();
-	int ret = 0;
-
-	if (!clkdev)
-		return -EINVAL;
-
-	clk.id = clk_id;
-	ret = clk_request(clkdev, &clk);
-	if (ret)
-		return ret;
-
-	ret = clk_enable(&clk);
-	(void)clk_free(&clk);
-
-	return ret;
-}
-
 int s32gen1_set_parent_clk_id(ulong clk_id, ulong parent_clk_id)
 {
 	struct clk clk, pclk;
diff --git a/drivers/clk/s32/early_clocks.c b/drivers/clk/s32/early_clocks.c
deleted file mode 100644
index 8ec560679c..0000000000
--- a/drivers/clk/s32/early_clocks.c
+++ /dev/null
@@ -1,225 +0,0 @@
-// SPDX-License-Identifier: BSD-3-Clause
-/*
- * Copyright 2020-2021 NXP
- */
-#include <dm/device.h>
-#include <dt-bindings/clock/s32gen1-clock.h>
-#include <dt-bindings/clock/s32gen1-clock-freq.h>
-#include <s32-gen1-regs.h>
-#include <s32gen1_clk_funcs.h>
-#include <asm/arch/siul.h>
-
-#define CLK_INIT(ID)          \
-{                             \
-	.id = (ID),           \
-	.dev = &fake_clk_dev, \
-}
-
-static struct s32gen1_clk_priv s32_priv = {
-	.accelpll = (void *)ACCEL_PLL_BASE_ADDR,
-	.armdfs = (void *)ARM_DFS_BASE_ADDR,
-	.armpll = (void *)ARM_PLL_BASE_ADDR,
-	.cgm0 = (void *)MC_CGM0_BASE_ADDR,
-	.cgm1 = (void *)MC_CGM1_BASE_ADDR,
-	.cgm2 = (void *)MC_CGM2_BASE_ADDR,
-	.cgm5 = (void *)MC_CGM5_BASE_ADDR,
-	.ddrpll = (void *)DRAM_PLL_BASE_ADDR,
-	.fxosc = (void *)XOSC_BASE_ADDR,
-	.mc_me = (void *)MC_ME_BASE_ADDR,
-	.periphdfs = (void *)PERIPH_DFS_BASE_ADDR,
-	.periphpll = (void *)PERIPH_PLL_BASE_ADDR,
-	.rdc = (void *)RDC_BASE_ADDR,
-	.rgm = (void *)MC_RGM_BASE_ADDR,
-};
-
-static struct udevice fake_clk_dev = {
-	.priv = &s32_priv,
-};
-
-/* A53 clocks */
-static struct clk fxosc = CLK_INIT(S32GEN1_CLK_FXOSC);
-static struct clk arm_pll_mux = CLK_INIT(S32GEN1_CLK_ARM_PLL_MUX);
-static struct clk arm_pll_vco = CLK_INIT(S32GEN1_CLK_ARM_PLL_VCO);
-static struct clk arm_pll_phi0 = CLK_INIT(S32GEN1_CLK_ARM_PLL_PHI0);
-static struct clk mc_cgm1_mux0 = CLK_INIT(S32GEN1_CLK_MC_CGM1_MUX0);
-static struct clk a53_clk = CLK_INIT(S32GEN1_CLK_A53_CORE);
-
-/* XBAR clock */
-#ifdef CONFIG_HSE_SECBOOT
-static struct clk firc = CLK_INIT(S32GEN1_CLK_FIRC);
-#endif
-static struct clk arm_dfs1 = CLK_INIT(S32GEN1_CLK_ARM_PLL_DFS1);
-static struct clk mc_cgm0_mux0 = CLK_INIT(S32GEN1_CLK_MC_CGM0_MUX0);
-static struct clk xbar_2x = CLK_INIT(S32GEN1_CLK_XBAR_2X);
-
-/* LINFLEX clock */
-#ifndef CONFIG_TARGET_TYPE_S32GEN1_EMULATOR
-static struct clk periph_pll_mux = CLK_INIT(S32GEN1_CLK_PERIPH_PLL_MUX);
-static struct clk periph_pll_vco = CLK_INIT(S32GEN1_CLK_PERIPH_PLL_VCO);
-static struct clk periph_pll_phi3 = CLK_INIT(S32GEN1_CLK_PERIPH_PLL_PHI3);
-static struct clk mc_cgm0_mux8 = CLK_INIT(S32GEN1_CLK_MC_CGM0_MUX8);
-static struct clk lin_baud = CLK_INIT(S32GEN1_CLK_LIN_BAUD);
-#endif
-
-/* DDR clock */
-static struct clk ddr_pll_mux = CLK_INIT(S32GEN1_CLK_DDR_PLL_MUX);
-static struct clk ddr_pll_vco = CLK_INIT(S32GEN1_CLK_DDR_PLL_VCO);
-static struct clk ddr_pll_phi0 = CLK_INIT(S32GEN1_CLK_DDR_PLL_PHI0);
-static struct clk mc_cgm5_mux0 = CLK_INIT(S32GEN1_CLK_MC_CGM5_MUX0);
-static struct clk ddr = CLK_INIT(S32GEN1_CLK_DDR);
-
-#ifdef CONFIG_HSE_SECBOOT
-static int secboot_xbar_to_firc(void)
-{
-	int ret;
-
-	ret = s32gen1_set_parent(&mc_cgm0_mux0, &firc);
-	if (ret)
-		return ret;
-
-	return s32gen1_enable(&xbar_2x);
-}
-#endif
-
-static const struct siul2_freq_mapping *early_freqs;
-
-static int enable_a53_clock(void)
-{
-	int ret;
-	ulong rate;
-
-	ret = s32gen1_set_parent(&arm_pll_mux, &fxosc);
-	if (ret)
-		return ret;
-
-	ret = s32gen1_set_parent(&mc_cgm1_mux0, &arm_pll_phi0);
-	if (ret)
-		return ret;
-
-	rate = s32gen1_set_rate(&fxosc, S32GEN1_FXOSC_FREQ);
-	if (rate != S32GEN1_FXOSC_FREQ)
-		return -EINVAL;
-
-	rate = s32gen1_set_rate(&arm_pll_vco,
-			early_freqs->arm_pll_vco_freq);
-	if (rate != early_freqs->arm_pll_vco_freq)
-		return -EINVAL;
-
-	rate = s32gen1_set_rate(&arm_pll_phi0,
-			early_freqs->arm_pll_phi0_freq);
-	if (rate != early_freqs->arm_pll_phi0_freq)
-		return -EINVAL;
-
-	rate = s32gen1_set_rate(&a53_clk,
-			early_freqs->a53_freq);
-	if (rate != early_freqs->a53_freq)
-		return -EINVAL;
-
-	return s32gen1_enable(&a53_clk);
-}
-
-static int enable_xbar_clock(void)
-{
-	int ret;
-	ulong rate;
-
-	ret = s32gen1_set_parent(&mc_cgm0_mux0, &arm_dfs1);
-	if (ret)
-		return ret;
-
-	rate = s32gen1_set_rate(&xbar_2x,
-			early_freqs->xbar_2x_freq);
-	if (rate != early_freqs->xbar_2x_freq)
-		return -EINVAL;
-
-	return s32gen1_enable(&xbar_2x);
-}
-
-#ifndef CONFIG_TARGET_TYPE_S32GEN1_EMULATOR
-static int enable_lin_clock(void)
-{
-	int ret;
-	ulong rate;
-
-	ret = s32gen1_set_parent(&periph_pll_mux, &fxosc);
-	if (ret)
-		return ret;
-
-	ret = s32gen1_set_parent(&mc_cgm0_mux8, &periph_pll_phi3);
-	if (ret)
-		return ret;
-
-	rate = s32gen1_set_rate(&periph_pll_vco,
-				S32GEN1_PERIPH_PLL_VCO_FREQ);
-	if (rate != S32GEN1_PERIPH_PLL_VCO_FREQ)
-		return -EINVAL;
-
-	rate = s32gen1_set_rate(&lin_baud, S32GEN1_LIN_BAUD_CLK_FREQ);
-	if (rate != S32GEN1_LIN_BAUD_CLK_FREQ)
-		return -EINVAL;
-
-	return s32gen1_enable(&lin_baud);
-}
-#endif
-
-static int enable_ddr_clock(void)
-{
-	int ret;
-	ulong rate;
-	ulong ddr_pll_freq, ddr_freq;
-
-	ddr_pll_freq = S32GEN1_DDR_PLL_VCO_FREQ;
-	ddr_freq = S32GEN1_DDR_FREQ;
-
-	ret = s32gen1_set_parent(&ddr_pll_mux, &fxosc);
-	if (ret)
-		return ret;
-
-	ret = s32gen1_set_parent(&mc_cgm5_mux0, &ddr_pll_phi0);
-	if (ret)
-		return ret;
-
-	rate = s32gen1_set_rate(&ddr_pll_vco, ddr_pll_freq);
-	if (rate != ddr_pll_freq)
-		return -EINVAL;
-
-	rate = s32gen1_set_rate(&ddr, ddr_freq);
-	if (rate != ddr_freq)
-		return -EINVAL;
-
-	return s32gen1_enable(&ddr);
-}
-
-int enable_early_clocks(void)
-{
-	int ret;
-
-#ifdef CONFIG_HSE_SECBOOT
-	ret = secboot_xbar_to_firc();
-	if (ret)
-		return ret;
-#endif
-
-	ret = s32gen1_get_early_clks_freqs(&early_freqs);
-	if (ret < 0)
-		return -EINVAL;
-
-	ret = enable_a53_clock();
-	if (ret)
-		return ret;
-
-	ret = enable_xbar_clock();
-	if (ret)
-		return ret;
-
-#ifndef CONFIG_TARGET_TYPE_S32GEN1_EMULATOR
-	/* On emulator, changing the LIN clock frequency will
-	 * make the print very slow.
-	 */
-	ret = enable_lin_clock();
-	if (ret)
-		return ret;
-#endif
-
-	return enable_ddr_clock();
-}
diff --git a/drivers/clk/s32/enable_clk.c b/drivers/clk/s32/enable_clk.c
deleted file mode 100644
index 6e8dae6d9c..0000000000
--- a/drivers/clk/s32/enable_clk.c
+++ /dev/null
@@ -1,966 +0,0 @@
-// SPDX-License-Identifier: BSD-3-Clause
-/*
- * Copyright 2020-2022 NXP
- */
-#include <linux/bitops.h>
-#include <asm/arch/mc_cgm_regs.h>
-#include <asm/arch/mc_me_regs.h>
-#include <asm/arch/mc_rgm_regs.h>
-#include <asm/io.h>
-#include <command.h>
-#include <dm/device.h>
-#include <dt-bindings/clock/s32gen1-clock.h>
-#include <linux/printk.h>
-#include <log.h>
-#include <s32gen1_clk_funcs.h>
-#include <s32gen1_clk_modules.h>
-
-static int enable_module(struct s32gen1_clk_obj *module,
-			 struct s32gen1_clk_priv *priv);
-
-static void setup_fxosc(struct s32gen1_clk_priv *priv)
-{
-	void *fxosc = priv->fxosc;
-
-	/* According to "Initialization information" chapter from
-	 * S32G274A Reference Manual, "Once FXOSC is turned ON, DO NOT change
-	 * any signal (on the fly) which is going to analog module input.
-	 * The inputs can be changed when the analog module is OFF...When
-	 * disabling the IP through Software do not change any other values in
-	 * the registers for at least 4 crystal clock cycles."
-	 *
-	 * Just make sure that FXOSC wasn't already started by BootROM.
-	 */
-	u32 ctrl;
-
-	if (readl(FXOSC_CTRL(fxosc)) & FXOSC_CTRL_OSCON)
-		return;
-
-	ctrl = FXOSC_CTRL_COMP_EN;
-	ctrl &= ~FXOSC_CTRL_OSC_BYP;
-	ctrl |= FXOSC_CTRL_EOCV(0x1);
-	ctrl |= FXOSC_CTRL_GM_SEL(0x7);
-	writel(ctrl, FXOSC_CTRL(fxosc));
-
-	/* Switch ON the crystal oscillator. */
-	writel(FXOSC_CTRL_OSCON | readl(FXOSC_CTRL(fxosc)), FXOSC_CTRL(fxosc));
-
-	/* Wait until the clock is stable. */
-	while (!(readl(FXOSC_STAT(fxosc)) & FXOSC_STAT_OSC_STAT))
-		;
-}
-
-static void mc_me_wait_update(u32 partition_n, u32 mask,
-			      struct s32gen1_clk_priv *priv)
-{
-	void *mc_me = priv->mc_me;
-	u32 pupd = readl(MC_ME_PRTN_N_PUPD(mc_me, partition_n));
-
-	writel(pupd | mask, MC_ME_PRTN_N_PUPD(mc_me, partition_n));
-	writel(MC_ME_CTL_KEY_KEY, MC_ME_CTL_KEY(mc_me));
-	writel(MC_ME_CTL_KEY_INVERTEDKEY, MC_ME_CTL_KEY(mc_me));
-
-	while (readl(MC_ME_PRTN_N_PUPD(mc_me, partition_n)) & mask)
-		;
-}
-
-static void enable_partition(u32 partition_n, struct s32gen1_clk_priv *priv)
-{
-	void *mc_me = priv->mc_me;
-	void *rdc = priv->rdc;
-	void *rgm = priv->rgm;
-	u32 rdc_ctrl;
-
-	writel(readl(MC_ME_PRTN_N_PCONF(mc_me, partition_n)) | MC_ME_PRTN_N_PCE,
-	       MC_ME_PRTN_N_PCONF(mc_me, partition_n));
-
-	mc_me_wait_update(partition_n, MC_ME_PRTN_N_PCUD, priv);
-
-	while (!(readl(MC_ME_PRTN_N_STAT(mc_me, partition_n)) &
-	       MC_ME_PRTN_N_PCS))
-		;
-
-	/* Unlock RDC register write */
-	rdc_ctrl = readl(RDC_RD_N_CTRL(rdc, partition_n));
-	writel(rdc_ctrl | RD_CTRL_UNLOCK_MASK, RDC_RD_N_CTRL(rdc, partition_n));
-
-	/* Enable the XBAR interface */
-	rdc_ctrl = readl(RDC_RD_N_CTRL(rdc, partition_n));
-	rdc_ctrl &= ~RDC_RD_INTERCONNECT_DISABLE;
-	writel(rdc_ctrl, RDC_RD_N_CTRL(rdc, partition_n));
-
-	/* Wait until XBAR interface enabled */
-	while ((readl(RDC_RD_N_STATUS(rdc, partition_n)) &
-		RDC_RD_INTERCONNECT_DISABLE_STAT))
-		;
-
-	/* Lift reset for partition */
-	writel(readl(RGM_PRST(rgm, partition_n)) & (~PRST_PERIPH_n_RST(0)),
-	       RGM_PRST(rgm, partition_n));
-
-	/* Follow steps to clear OSSE bit */
-	writel(readl(MC_ME_PRTN_N_PCONF(mc_me, partition_n)) &
-			~MC_ME_PRTN_N_OSSE,
-			MC_ME_PRTN_N_PCONF(mc_me, partition_n));
-
-	mc_me_wait_update(partition_n, MC_ME_PRTN_N_OSSUD, priv);
-
-	while (readl(MC_ME_PRTN_N_STAT(mc_me, partition_n)) &
-			MC_ME_PRTN_N_OSSS)
-		;
-
-	while (readl(RGM_PSTAT(rgm, partition_n)) &
-			PSTAT_PERIPH_n_STAT(0))
-		;
-
-	/* Lock RDC register write */
-	writel(readl(RDC_RD_N_CTRL(rdc, partition_n)) & ~RD_CTRL_UNLOCK_MASK,
-	       RDC_RD_N_CTRL(rdc, partition_n));
-}
-
-static void enable_part_cofb(u32 partition_n, u32 block,
-			     struct s32gen1_clk_priv *priv,
-			     bool check_status)
-{
-	void *mc_me = priv->mc_me;
-	u32 block_mask = MC_ME_PRTN_N_REQ(block);
-	u32 part_status;
-
-	part_status = readl(MC_ME_PRTN_N_STAT(mc_me, partition_n));
-
-	/* Enable a partition only if it's disabled */
-	if (!(MC_ME_PRTN_N_PCS & part_status))
-		enable_partition(partition_n, priv);
-
-	writel(readl(MC_ME_PRTN_N_COFB0_CLKEN(mc_me, partition_n)) | block_mask,
-	       MC_ME_PRTN_N_COFB0_CLKEN(mc_me, partition_n));
-
-	writel(readl(MC_ME_PRTN_N_PCONF(mc_me, partition_n)) | MC_ME_PRTN_N_PCE,
-	       MC_ME_PRTN_N_PCONF(mc_me, partition_n));
-
-	mc_me_wait_update(partition_n, MC_ME_PRTN_N_PCUD, priv);
-
-	if (check_status)
-		while (!(readl(MC_ME_PRTN_N_COFB0_STAT(mc_me, partition_n)) &
-			 block_mask))
-			;
-}
-
-static int enable_clock(struct s32gen1_clk_obj *module,
-			struct s32gen1_clk_priv *priv)
-{
-	struct s32gen1_clk *clk = obj2clk(module);
-
-	if (clk->module)
-		return enable_module(clk->module, priv);
-
-	if (clk->pclock)
-		return enable_clock(&clk->pclock->desc, priv);
-
-	return -EINVAL;
-}
-
-static int enable_part_block(struct s32gen1_clk_obj *module,
-			     struct s32gen1_clk_priv *priv)
-{
-	struct s32gen1_part_block *block = obj2partblock(module);
-	u32 cofb;
-
-	switch (block->block) {
-	case s32gen1_part_block0 ... s32gen1_part_block15:
-		cofb = block->block - s32gen1_part_block0;
-		enable_part_cofb(block->partition, cofb,
-				 priv, block->status);
-		break;
-	default:
-		pr_err("Unknown partition block type: %d\n",
-		       block->block);
-		return -EINVAL;
-	};
-
-	return enable_module(block->parent, priv);
-}
-
-uint32_t s32gen1_platclk2mux(uint32_t clk_id)
-{
-	return clk_id - S32GEN1_CLK_ID_BASE;
-}
-
-static int cgm_mux_clk_config(void *cgm_addr, u32 mux, u32 source)
-{
-	u32 css, csc;
-
-	css = readl(CGM_MUXn_CSS(cgm_addr, mux));
-
-	/* Platform ID translation */
-	source = s32gen1_platclk2mux(source);
-
-	/* Already configured */
-	if (MC_CGM_MUXn_CSS_SELSTAT(css) == source &&
-	    MC_CGM_MUXn_CSS_SWTRG(css) == MC_CGM_MUXn_CSS_SWTRG_SUCCESS &&
-	    !(css & MC_CGM_MUXn_CSS_SWIP))
-		return 0;
-
-	/* Ongoing clock switch? */
-	while (readl(CGM_MUXn_CSS(cgm_addr, mux)) & MC_CGM_MUXn_CSS_SWIP)
-		;
-
-	csc = readl(CGM_MUXn_CSC(cgm_addr, mux));
-	/* Clear previous source. */
-
-	csc &= ~(MC_CGM_MUXn_CSC_SELCTL_MASK);
-
-	/* Select the clock source and trigger the clock switch. */
-	writel(csc | MC_CGM_MUXn_CSC_SELCTL(source) | MC_CGM_MUXn_CSC_CLK_SW,
-	       CGM_MUXn_CSC(cgm_addr, mux));
-
-	/* Wait for configuration bit to auto-clear. */
-	while (readl(CGM_MUXn_CSC(cgm_addr, mux)) & MC_CGM_MUXn_CSC_CLK_SW)
-		;
-
-	/* Is the clock switch completed? */
-	while (readl(CGM_MUXn_CSS(cgm_addr, mux)) & MC_CGM_MUXn_CSS_SWIP)
-		;
-
-	/*
-	 * Check if the switch succeeded.
-	 * Check switch trigger cause and the source.
-	 */
-	css = readl(CGM_MUXn_CSS(cgm_addr, mux));
-	if ((MC_CGM_MUXn_CSS_SWTRG(css) == MC_CGM_MUXn_CSS_SWTRG_SUCCESS) &&
-	    (MC_CGM_MUXn_CSS_SELSTAT(css) == source))
-		return 0;
-
-	pr_err("Failed to change the clock source of mux %d to %d (CGM = %p)\n",
-	       mux, source, cgm_addr);
-
-	return -EINVAL;
-}
-
-static int enable_cgm_mux(struct s32gen1_mux *mux,
-			  struct s32gen1_clk_priv *priv)
-{
-	void *module_addr;
-
-	module_addr = get_base_addr(mux->module, priv);
-
-	if (!module_addr) {
-		pr_err("Failed to get the base address of the module %d\n",
-		       mux->module);
-		return -EINVAL;
-	}
-
-	return cgm_mux_clk_config(module_addr, mux->index, mux->source_id);
-}
-
-static int enable_mux(struct s32gen1_clk_obj *module,
-		      struct s32gen1_clk_priv *priv)
-{
-	int ret;
-	struct s32gen1_mux *mux = obj2mux(module);
-	struct s32gen1_clk *clk = get_clock(mux->source_id);
-
-	if (!clk) {
-		pr_err("Invalid parent (%d) for mux %d\n",
-		       mux->source_id, mux->index);
-		return -EINVAL;
-	}
-
-	ret = enable_module(&clk->desc, priv);
-
-	if (ret)
-		return ret;
-
-	switch (mux->module) {
-	/* PLL mux will be enabled by PLL setup */
-	case S32GEN1_ACCEL_PLL:
-	case S32GEN1_ARM_PLL:
-	case S32GEN1_DDR_PLL:
-	case S32GEN1_PERIPH_PLL:
-		return 0;
-	case S32GEN1_CGM0:
-	case S32GEN1_CGM1:
-	case S32GEN1_CGM2:
-	case S32GEN1_CGM5:
-	case S32GEN1_CGM6:
-		return enable_cgm_mux(mux, priv);
-	default:
-		pr_err("Unknown mux parent type: %d\n", mux->module);
-		return -EINVAL;
-	};
-
-	return -EINVAL;
-}
-
-static void cgm_mux_div_config(void *cgm_addr, u32 mux, u32 dc, u32 div_index)
-{
-	u32 updstat;
-	u32 dc_val = readl(CGM_MUXn_DCm(cgm_addr, mux, div_index));
-
-	dc_val &= (MC_CGM_MUXn_DCm_DIV_MASK | MC_CGM_MUXn_DCm_DE);
-
-	if (dc_val == (MC_CGM_MUXn_DCm_DE | MC_CGM_MUXn_DCm_DIV(dc)))
-		return;
-
-	/* Set the divider */
-	writel(MC_CGM_MUXn_DCm_DE | MC_CGM_MUXn_DCm_DIV(dc),
-	       CGM_MUXn_DCm(cgm_addr, mux, div_index));
-
-	/* Wait for divider gets updated */
-	do {
-		updstat = readl(CGM_MUXn_DIV_UPD_STAT(cgm_addr, mux));
-	} while (MC_CGM_MUXn_DIV_UPD_STAT_DIVSTAT(updstat));
-}
-
-static int enable_cgm_div(struct s32gen1_clk_obj *module,
-			  struct s32gen1_clk_priv *priv)
-{
-	struct s32gen1_cgm_div *div = obj2cgmdiv(module);
-	struct s32gen1_mux *mux;
-	void *cgm_addr;
-	int ret;
-	double pfreq;
-	u32 dc;
-
-	if (!div->parent) {
-		pr_err("Failed to identify CGM divider's parent\n");
-		return -EINVAL;
-	}
-
-	mux = get_cgm_div_mux(div);
-	if (!mux)
-		return -EINVAL;
-
-	if (!div->freq) {
-		pr_err("The frequency of the divider %d is not set (mux = %u)\n",
-		       div->index, mux->index);
-		return -EINVAL;
-	}
-
-	ret = enable_module(div->parent, priv);
-	if (ret)
-		return ret;
-
-	pfreq = (double)get_module_rate(div->parent, priv);
-	if (!pfreq) {
-		pr_err("Failed to get the frequency of CGM MUX (id = %u)\n",
-		       mux->index);
-		return -EINVAL;
-	}
-
-	dc = (u32)(pfreq / div->freq);
-	if ((ulong)(pfreq / dc) != div->freq) {
-		pr_err("Cannot set CGM divider (mux = %u div = %u) for input = %lu & output = %lu. Nearest freq = %lu\n",
-		       mux->index, div->index, (ulong)pfreq,
-		       div->freq, (ulong)(pfreq / dc));
-#ifndef CONFIG_S32GEN1_SET_NEAREST_FREQ
-		return -EINVAL;
-#endif
-	}
-
-	cgm_addr = get_base_addr(mux->module, priv);
-	if (!cgm_addr) {
-		pr_err("Failed to get CGM base address of the module %d\n",
-		       mux->module);
-	}
-
-	cgm_mux_div_config(cgm_addr, mux->index,
-			   dc - 1, div->index);
-	return ret;
-}
-
-static int get_dfs_mfi_mfn(ulong dfs_freq, struct s32gen1_dfs_div *div,
-			   u32 *mfi, u32 *mfn)
-{
-	double dmfn;
-	double div_freq;
-
-	ulong in = dfs_freq;
-	ulong out = div->freq;
-
-	*mfi = in / out / 2;
-	dmfn = ((double)in / (2 * out) - *mfi) * 36;
-	*mfn = (u32)dmfn;
-	div_freq = (double)in / (2 * (*mfi + (double)*mfn / 36.0));
-
-	if ((ulong)div_freq != div->freq) {
-		pr_err("Failed to find MFI and MFN settings for DFS DIV freq %lu. Nearest freq = %lu\n",
-		       div->freq, (ulong)div_freq);
-#ifndef CONFIG_S32GEN1_SET_NEAREST_FREQ
-		return -EINVAL;
-#endif
-	}
-
-	return 0;
-}
-
-static int init_dfs_port(void *dfs_addr, u32 port, u32 mfi, u32 mfn)
-{
-	u32 portsr, portreset, portolsr;
-	bool init_dfs;
-	u32 mask, old_mfi, old_mfn;
-	u32 dvport = readl(DFS_DVPORTn(dfs_addr, port));
-
-	old_mfi = DFS_DVPORTn_MFI(dvport);
-	old_mfn = DFS_DVPORTn_MFN(dvport);
-
-	portsr = readl(DFS_PORTSR(dfs_addr));
-	portolsr = readl(DFS_PORTOLSR(dfs_addr));
-
-	/* Skip configuration if it's not needed */
-	if (portsr & BIT(port) && !(portolsr & BIT(port)) &&
-	    mfi == old_mfi && mfn == old_mfn)
-		return 0;
-
-	init_dfs = (!portsr);
-
-	if (init_dfs)
-		mask = DFS_PORTRESET_PORTRESET_MAXVAL;
-	else
-		mask = DFS_PORTRESET_PORTRESET_SET(BIT(port));
-
-	writel(mask, DFS_PORTOLSR(dfs_addr));
-	writel(mask, DFS_PORTRESET(dfs_addr));
-
-#ifndef CONFIG_TARGET_TYPE_S32GEN1_EMULATOR
-	while (readl(DFS_PORTSR(dfs_addr)) & mask)
-		;
-#endif
-
-	if (init_dfs)
-		writel(DFS_CTL_RESET, DFS_CTL(dfs_addr));
-
-	writel(DFS_DVPORTn_MFI_SET(mfi) | DFS_DVPORTn_MFN_SET(mfn),
-	       DFS_DVPORTn(dfs_addr, port));
-
-	if (init_dfs)
-		/* DFS clk enable programming */
-		writel(~DFS_CTL_RESET, DFS_CTL(dfs_addr));
-
-	portreset = readl(DFS_PORTRESET(dfs_addr));
-	portreset &= ~BIT(port);
-	writel(portreset, DFS_PORTRESET(dfs_addr));
-
-#ifndef CONFIG_TARGET_TYPE_S32GEN1_EMULATOR
-	while ((readl(DFS_PORTSR(dfs_addr)) & BIT(port)) != BIT(port))
-		;
-#endif
-
-	portolsr = readl(DFS_PORTOLSR(dfs_addr));
-	if (portolsr & DFS_PORTOLSR_LOL(port)) {
-		pr_err("Failed to lock DFS divider\n");
-		return -EINVAL;
-	}
-
-	return 0;
-}
-
-static int enable_dfs_div(struct s32gen1_clk_obj *module,
-			  struct s32gen1_clk_priv *priv)
-{
-	int ret;
-	struct s32gen1_dfs_div *div = obj2dfsdiv(module);
-	void *dfs_addr;
-	struct s32gen1_dfs *dfs;
-	u32 mfi, mfn;
-	u32 ctl;
-	ulong dfs_freq;
-
-	ret = enable_module(div->parent, priv);
-	if (ret)
-		return ret;
-
-	dfs = get_div_dfs(div);
-	if (!dfs)
-		return -EINVAL;
-
-	if (!dfs->source) {
-		pr_err("Failed to identify DFS divider's parent\n");
-		return -EINVAL;
-	}
-
-	dfs_addr = get_base_addr(dfs->instance, priv);
-	if (!dfs_addr)
-		return -EINVAL;
-
-	ctl = readl(DFS_CTL(dfs_addr));
-
-	/* Enabled DFS */
-	if (!(ctl & DFS_CTL_RESET))
-		dfs_freq = get_module_rate(&dfs->desc, priv);
-	else
-		dfs_freq = get_module_rate(dfs->source, priv);
-
-	if (!dfs_freq) {
-		pr_err("Failed to get DFS's freqeuncy\n");
-		return -EINVAL;
-	}
-
-	ret = get_dfs_mfi_mfn(dfs_freq, div, &mfi, &mfn);
-	if (ret)
-		return -EINVAL;
-
-	return init_dfs_port(dfs_addr, div->index, mfi, mfn);
-}
-
-static int enable_dfs(struct s32gen1_clk_obj *module,
-		      struct s32gen1_clk_priv *priv)
-{
-	struct s32gen1_dfs *dfs = obj2dfs(module);
-
-	if (!dfs->source) {
-		pr_err("Failed to identify DFS's parent\n");
-		return -EINVAL;
-	}
-
-	return enable_module(dfs->source, priv);
-}
-
-static bool is_pll_enabled(void *pll_base)
-{
-	u32 pllcr, pllsr;
-
-	pllcr = readl(PLLDIG_PLLCR(pll_base));
-	pllsr = readl(PLLDIG_PLLSR(pll_base));
-
-	/* Enabled and locked PLL */
-	return !(pllcr & PLLDIG_PLLCR_PLLPD) && (pllsr & PLLDIG_PLLSR_LOCK);
-}
-
-int get_pll_mfi_mfn(ulong pll_vco, ulong ref_freq, u32 *mfi, u32 *mfn)
-
-{
-	double dmfn, vco;
-
-	/* FRAC-N mode */
-	*mfi = (pll_vco / ref_freq);
-
-	dmfn = (double)(pll_vco % ref_freq) / ref_freq * 18432.0;
-	*mfn = (u32)dmfn;
-
-	/* Round MFN value */
-	if (dmfn - (double)*mfn >= 0.5)
-		*mfn += 1;
-
-	vco = ref_freq * (*mfi + (double)*mfn / 18432.0);
-
-	if ((ulong)vco != pll_vco) {
-		pr_err("Failed to find MFI and MFN settings for PLL freq %lu. Nearest freq = %lu\n",
-		       pll_vco, (ulong)vco);
-#ifndef CONFIG_S32GEN1_SET_NEAREST_FREQ
-		return -EINVAL;
-#endif
-	}
-
-	return 0;
-}
-
-static void disable_pll_hw(void *pll_addr)
-{
-	writel(PLLDIG_PLLCR_PLLPD, PLLDIG_PLLCR(pll_addr));
-}
-
-static void enable_pll_hw(void *pll_addr)
-{
-	/* Enable the PLL. */
-	writel(0x0, PLLDIG_PLLCR(pll_addr));
-
-	/* Poll until PLL acquires lock. */
-	while (!(readl(PLLDIG_PLLSR(pll_addr)) & PLLDIG_PLLSR_LOCK))
-		;
-}
-
-static u32 get_enabled_odivs(void *pll_addr, u32 ndivs)
-{
-	u32 i;
-	u32 mask = 0;
-	u32 pllodiv;
-
-	for (i = 0; i < ndivs; i++) {
-		pllodiv = readl(PLLDIG_PLLODIV(pll_addr, i));
-		if (pllodiv & PLLDIG_PLLODIV_DE)
-			mask |= BIT(i);
-	}
-
-	return mask;
-}
-
-static void disable_odiv(void *pll_addr, u32 div_index)
-{
-	u32 pllodiv = readl(PLLDIG_PLLODIV(pll_addr, div_index));
-
-	writel(pllodiv & ~PLLDIG_PLLODIV_DE,
-	       PLLDIG_PLLODIV(pll_addr, div_index));
-}
-
-static void enable_odiv(void *pll_addr, u32 div_index)
-{
-	u32 pllodiv = readl(PLLDIG_PLLODIV(pll_addr, div_index));
-
-	writel(pllodiv | PLLDIG_PLLODIV_DE,
-	       PLLDIG_PLLODIV(pll_addr, div_index));
-}
-
-static void disable_odivs(void *pll_addr, u32 ndivs)
-{
-	u32 i;
-
-	for (i = 0; i < ndivs; i++)
-		disable_odiv(pll_addr, i);
-}
-
-static void enable_odivs(void *pll_addr, u32 ndivs, u32 mask)
-{
-	u32 i;
-
-	for (i = 0; i < ndivs; i++) {
-		if (mask & BIT(i))
-			enable_odiv(pll_addr, i);
-	}
-}
-
-static int adjust_odiv_settings(struct s32gen1_pll *pll, void *pll_addr,
-				struct s32gen1_clk_priv *priv,
-				u32 odivs_mask, ulong old_vco)
-{
-	u32 i, pllodiv, div;
-	double old_odiv_freq, odiv_freq;
-	int ret = 0;
-
-	if (!old_vco)
-		return 0;
-
-	for (i = 0; i < pll->ndividers; i++) {
-		if (!(odivs_mask & BIT(i)))
-			continue;
-
-		pllodiv = readl(PLLDIG_PLLODIV(pll_addr, i));
-
-		div = PLLDIG_PLLODIV_DIV(pllodiv);
-		old_odiv_freq = (double)old_vco / (div + 1);
-		div = (u32)((double)pll->vco_freq / old_odiv_freq);
-		odiv_freq = (double)pll->vco_freq / div;
-
-		if (old_odiv_freq != odiv_freq) {
-			pr_err("Failed to adjust ODIV %d to match previous frequency\n",
-			       i);
-			pr_err("Previous freq: %lu Nearest freq: %lu\n",
-			       (ulong)old_odiv_freq, (ulong)odiv_freq);
-		}
-
-		pllodiv = PLLDIG_PLLODIV_DIV_SET(div - 1);
-		writel(pllodiv, PLLDIG_PLLODIV(pll_addr, i));
-	}
-
-	return ret;
-}
-
-static int clk2pllclk(u32 clk_id, u32 *pll_clk_id)
-{
-	switch (clk_id) {
-	case S32GEN1_CLK_FIRC:
-		*pll_clk_id = 0;
-		return 0;
-	case S32GEN1_CLK_FXOSC:
-		*pll_clk_id = 1;
-		return 0;
-	};
-
-	return -EINVAL;
-}
-
-int pllclk2clk(u32 pll_clk_id, u32 *clk_id)
-{
-	switch (pll_clk_id) {
-	case 0:
-		*clk_id = S32GEN1_CLK_FIRC;
-		return 0;
-	case 1:
-		*clk_id = S32GEN1_CLK_FXOSC;
-		return 0;
-	};
-
-	return -EINVAL;
-}
-
-static int program_pll(struct s32gen1_pll *pll, void *pll_addr,
-		       struct s32gen1_clk_priv *priv, u32 clk_src)
-{
-	ulong sfreq;
-	struct s32gen1_clk *sclk = get_clock(clk_src);
-	u32 rdiv = 1, mfi, mfn;
-	int ret;
-	u32 odivs_mask;
-	ulong old_vco;
-
-	if (!sclk)
-		return -EINVAL;
-
-	sfreq = get_module_rate(&sclk->desc, priv);
-	if (!sfreq)
-		return -EINVAL;
-
-	ret = get_pll_mfi_mfn(pll->vco_freq, sfreq, &mfi, &mfn);
-	if (ret)
-		return -EINVAL;
-
-	if (clk2pllclk(clk_src, &clk_src)) {
-		pr_err("Failed to translate PLL clock\n");
-		return -EINVAL;
-	}
-
-	odivs_mask = get_enabled_odivs(pll_addr, pll->ndividers);
-
-	old_vco = get_module_rate(&pll->desc, priv);
-
-	/* Disable ODIVs*/
-	disable_odivs(pll_addr, pll->ndividers);
-
-	/* Disable PLL */
-	disable_pll_hw(pll_addr);
-
-	/* Program PLLCLKMUX */
-	writel(clk_src, PLLDIG_PLLCLKMUX(pll_addr));
-
-	/* Program VCO */
-	writel(PLLDIG_PLLDV_RDIV_SET(rdiv) | PLLDIG_PLLDV_MFI(mfi),
-	       PLLDIG_PLLDV(pll_addr));
-	writel(PLLDIG_PLLFD_MFN_SET(mfn) |
-	       PLLDIG_PLLFD_SMDEN, PLLDIG_PLLFD(pll_addr));
-
-	ret = adjust_odiv_settings(pll, pll_addr, priv, odivs_mask, old_vco);
-
-	enable_pll_hw(pll_addr);
-
-	/* Enable out dividers */
-	enable_odivs(pll_addr, pll->ndividers, odivs_mask);
-
-	return ret;
-}
-
-static struct s32gen1_mux *get_pll_mux(struct s32gen1_pll *pll)
-{
-	struct s32gen1_clk_obj *source = pll->source;
-	struct s32gen1_clk *clk;
-
-	if (!source) {
-		pr_err("Failed to identify PLL's parent\n");
-		return NULL;
-	}
-
-	if (source->type != s32gen1_clk_t) {
-		pr_err("The parent of the PLL isn't a clock\n");
-		return NULL;
-	}
-
-	clk = obj2clk(source);
-
-	if (!clk->module) {
-		pr_err("The clock isn't connected to a module\n");
-		return NULL;
-	}
-
-	source = clk->module;
-
-	if (source->type != s32gen1_mux_t &&
-	    source->type != s32gen1_shared_mux_t) {
-		pr_err("The parent of the PLL isn't a MUX\n");
-		return NULL;
-	}
-
-	return obj2mux(source);
-}
-
-static int enable_pll(struct s32gen1_clk_obj *module,
-		      struct s32gen1_clk_priv *priv)
-{
-	int ret;
-	struct s32gen1_pll *pll = obj2pll(module);
-	struct s32gen1_mux *mux;
-	void *pll_addr;
-	u32 clk_src;
-
-	mux = get_pll_mux(pll);
-	if (!mux)
-		return -EINVAL;
-
-	if (pll->instance != mux->module) {
-		pr_err("MUX type is not in sync with PLL ID\n");
-		return -EINVAL;
-	}
-
-	/* Enable MUX & OSC */
-	ret = enable_module(pll->source, priv);
-	if (ret)
-		return ret;
-
-	pll_addr = get_base_addr(pll->instance, priv);
-	if (!pll_addr) {
-		pr_err("Failed to detect PLL instance\n");
-		return -EINVAL;
-	}
-
-	clk_src = readl(PLLDIG_PLLCLKMUX(pll_addr));
-	if (pllclk2clk(clk_src, &clk_src)) {
-		pr_err("Failed to get PLL clock id\n");
-		return -EINVAL;
-	}
-
-	if (clk_src == mux->source_id &&
-	    is_pll_enabled(pll_addr) &&
-	    get_module_rate(module, priv) == pll->vco_freq) {
-		return 0;
-	}
-
-	return program_pll(pll, pll_addr, priv, mux->source_id);
-}
-
-static void config_pll_out_div(void *pll_addr, u32 div_index, u32 dc)
-{
-	u32 pllodiv;
-	u32 div;
-
-	pllodiv = readl(PLLDIG_PLLODIV(pll_addr, div_index));
-	div = PLLDIG_PLLODIV_DIV(pllodiv);
-
-	if (div + 1 == dc && pllodiv & PLLDIG_PLLODIV_DE)
-		return;
-
-	if (pllodiv & PLLDIG_PLLODIV_DE)
-		disable_odiv(pll_addr, div_index);
-
-	pllodiv = PLLDIG_PLLODIV_DIV_SET(dc - 1);
-	writel(pllodiv, PLLDIG_PLLODIV(pll_addr, div_index));
-
-	enable_odiv(pll_addr, div_index);
-}
-
-static int enable_pll_div(struct s32gen1_clk_obj *module,
-			  struct s32gen1_clk_priv *priv)
-{
-	int ret;
-	struct s32gen1_pll_out_div *div = obj2plldiv(module);
-	struct s32gen1_clk_obj *parent = div->parent;
-	struct s32gen1_pll *pll;
-	double pfreq;
-	u32 dc;
-	void *pll_addr;
-
-	ret = enable_module(parent, priv);
-	if (ret)
-		return ret;
-
-	pll = get_div_pll(div);
-	if (!pll) {
-		pr_err("The parent of the PLL DIV is invalid\n");
-		return 0;
-	}
-
-	pll_addr = get_base_addr(pll->instance, priv);
-	if (!pll_addr) {
-		pr_err("Failed to detect PLL instance\n");
-		return -EINVAL;
-	}
-
-	pfreq = (double)get_module_rate(parent, priv);
-	if (!pfreq) {
-		pr_err("Failed to get the frequency of CGM MUX\n");
-		return -EINVAL;
-	}
-
-	dc = (u32)(pfreq / div->freq);
-	if ((ulong)(pfreq / dc) != div->freq) {
-		pr_err("Cannot set PLL divider for input = %lu & output = %lu. Nearest freq = %lu\n",
-		       (ulong)pfreq, div->freq, (ulong)(pfreq / dc));
-#ifndef CONFIG_S32GEN1_SET_NEAREST_FREQ
-		return -EINVAL;
-#endif
-	}
-
-	config_pll_out_div(pll_addr, div->index, dc);
-
-	return 0;
-}
-
-static int enable_osc(struct s32gen1_clk_obj *module,
-		      struct s32gen1_clk_priv *priv)
-{
-	struct s32gen1_osc *osc = obj2osc(module);
-
-	switch (osc->source) {
-	/* FIRC and SIRC oscillators are enabled by default */
-	case S32GEN1_FIRC:
-	case S32GEN1_SIRC:
-		return 0;
-	case S32GEN1_FXOSC:
-		setup_fxosc(priv);
-		return 0;
-	default:
-		pr_err("Invalid oscillator %d\n", osc->source);
-		return -EINVAL;
-	};
-
-	return -EINVAL;
-}
-
-static int enable_fixed_div(struct s32gen1_clk_obj *module,
-			    struct s32gen1_clk_priv *priv)
-{
-	struct s32gen1_fixed_div *pll = obj2fixeddiv(module);
-
-	return enable_module(pll->parent, priv);
-}
-
-static int enable_module(struct s32gen1_clk_obj *module,
-			 struct s32gen1_clk_priv *priv)
-{
-	switch (module->type) {
-	case s32gen1_clk_t:
-		return enable_clock(module, priv);
-	case s32gen1_part_block_t:
-		return enable_part_block(module, priv);
-	case s32gen1_shared_mux_t:
-	case s32gen1_mux_t:
-		return enable_mux(module, priv);
-	case s32gen1_cgm_div_t:
-		return enable_cgm_div(module, priv);
-	case s32gen1_dfs_div_t:
-		return enable_dfs_div(module, priv);
-	case s32gen1_dfs_t:
-		return enable_dfs(module, priv);
-	case s32gen1_pll_t:
-		return enable_pll(module, priv);
-	case s32gen1_osc_t:
-		return enable_osc(module, priv);
-	case s32gen1_fixed_clk_t:
-		return 0;
-	case s32gen1_fixed_div_t:
-		return enable_fixed_div(module, priv);
-	case s32gen1_pll_out_div_t:
-		return enable_pll_div(module, priv);
-	default:
-		pr_err("Undefined module type: %d\n", module->type);
-		return -EINVAL;
-	};
-
-	return -EINVAL;
-}
-
-int s32gen1_enable(struct clk *c)
-{
-	int ret;
-	struct s32gen1_clk *clk;
-	struct s32gen1_clk_priv *priv = dev_get_priv(c->dev);
-
-	clk = get_clock(c->id);
-	if (!clk) {
-		pr_err("Clock %ld is not part of the clock tree\n", c->id);
-		return 0;
-	}
-
-	ret = enable_module(&clk->desc, priv);
-	if (ret)
-		pr_err("Failed to enable clock: %ld\n", c->id);
-
-	return ret;
-}
diff --git a/drivers/clk/s32/get_rate.c b/drivers/clk/s32/get_rate.c
deleted file mode 100644
index 93eea2fd13..0000000000
--- a/drivers/clk/s32/get_rate.c
+++ /dev/null
@@ -1,333 +0,0 @@
-// SPDX-License-Identifier: BSD-3-Clause
-/*
- * Copyright 2020 NXP
- */
-#include <asm/arch/mc_cgm_regs.h>
-#include <asm/io.h>
-#include <dm/device.h>
-#include <linux/printk.h>
-#include <s32gen1_clk_funcs.h>
-
-static ulong get_osc_freq(struct s32gen1_clk_obj *module,
-			  struct s32gen1_clk_priv *priv)
-{
-	struct s32gen1_osc *osc = obj2osc(module);
-
-	if (!osc->freq) {
-		pr_err("Uninitialized oscillator\n");
-		return 0;
-	}
-	return osc->freq;
-}
-
-static ulong get_clk_freq(struct s32gen1_clk_obj *module,
-			  struct s32gen1_clk_priv *priv)
-{
-	struct s32gen1_clk *clk = obj2clk(module);
-
-	if (!clk) {
-		pr_err("Invalid clock\n");
-		return 0;
-	}
-
-	if (clk->module)
-		return get_module_rate(clk->module, priv);
-
-	if (!clk->pclock) {
-		pr_err("Invalid clock parent\n");
-		return 0;
-	}
-
-	return get_clk_freq(&clk->pclock->desc, priv);
-}
-
-static ulong get_mux_freq(struct s32gen1_clk_obj *module,
-			  struct s32gen1_clk_priv *priv)
-{
-	struct s32gen1_mux *mux = obj2mux(module);
-	struct s32gen1_clk *clk = get_clock(mux->source_id);
-
-	if (!clk) {
-		pr_err("Mux without a valid source\n");
-		return 0;
-	}
-	return get_clk_freq(&clk->desc, priv);
-}
-
-static ulong get_dfs_freq(struct s32gen1_clk_obj *module,
-			  struct s32gen1_clk_priv *priv)
-{
-	struct s32gen1_dfs *dfs = obj2dfs(module);
-	void *dfs_addr;
-	u32 ctl;
-
-	dfs_addr = get_base_addr(dfs->instance, priv);
-	if (!dfs_addr) {
-		pr_err("Failed to detect DFS instance\n");
-		return 0;
-	}
-
-	ctl = readl(DFS_CTL(dfs_addr));
-	/* Disabled DFS */
-	if (ctl & DFS_CTL_RESET)
-		return 0;
-
-	return get_module_rate(dfs->source, priv);
-}
-
-static ulong get_dfs_div_freq(struct s32gen1_clk_obj *module,
-			      struct s32gen1_clk_priv *priv)
-{
-	struct s32gen1_dfs_div *div = obj2dfsdiv(module);
-	struct s32gen1_dfs *dfs;
-	void *dfs_addr;
-	u32 dvport, mfi, mfn;
-	ulong pfreq;
-	double freq;
-
-	dfs = get_div_dfs(div);
-	if (!dfs)
-		return 0;
-
-	pfreq = get_module_rate(div->parent, priv);
-	if (!pfreq)
-		return 0;
-
-	dfs_addr = get_base_addr(dfs->instance, priv);
-	if (!dfs_addr) {
-		pr_err("Failed to detect DFS instance\n");
-		return 0;
-	}
-
-	dvport = readl(DFS_DVPORTn(dfs_addr, div->index));
-
-	mfi = DFS_DVPORTn_MFI(dvport);
-	mfn = DFS_DVPORTn_MFN(dvport);
-
-	/* Disabled port */
-	if (!mfi && !mfn)
-		return 0;
-
-	/**
-	 * Equation for input and output clocks of each port divider.
-	 * See 'Digital Frequency Synthesizer' chapter from Reference Manual.
-	 */
-	freq = (double)pfreq / (2 * (mfi + (double)mfn / 36.0));
-
-	return (ulong)freq;
-}
-
-static ulong get_pll_freq(struct s32gen1_clk_obj *module,
-			  struct s32gen1_clk_priv *priv)
-{
-	struct s32gen1_pll *pll = obj2pll(module);
-	struct s32gen1_clk *source;
-	ulong prate;
-	void *pll_addr;
-	u32 pllpd;
-	u32 mfi, mfn, rdiv, plldv;
-	u32 clk_src;
-
-	pll_addr = get_base_addr(pll->instance, priv);
-	if (!pll_addr) {
-		pr_err("Failed to detect PLL instance\n");
-		return 0;
-	}
-
-	/* Disabled PLL */
-	pllpd = readl(PLLDIG_PLLCR(pll_addr)) & PLLDIG_PLLCR_PLLPD;
-	if (pllpd)
-		return 0;
-
-	clk_src = readl(PLLDIG_PLLCLKMUX(pll_addr));
-	if (pllclk2clk(clk_src, &clk_src)) {
-		pr_err("Failed to get PLL clock id\n");
-		return -EINVAL;
-	}
-
-	source = get_clock(clk_src);
-	if (!source) {
-		pr_err("Failed to get PLL source clock\n");
-		return 0;
-	}
-
-	prate = get_module_rate(&source->desc, priv);
-	plldv = readl(PLLDIG_PLLDV(pll_addr));
-	mfi = PLLDIG_PLLDV_MFI(plldv);
-	rdiv = PLLDIG_PLLDV_RDIV(plldv);
-	if (rdiv == 0)
-		rdiv = 1;
-
-	/* Frac-N mode */
-	mfn = PLLDIG_PLLFD_MFN_SET(readl(PLLDIG_PLLFD(pll_addr)));
-	/* PLL VCO frequency in Fractional mode when PLLDV[RDIV] is not 0 */
-	return (ulong)((double)prate / rdiv * (mfi + ((double)mfn / 18432)));
-}
-
-static ulong get_fixed_clk_freq(struct s32gen1_clk_obj *module,
-				struct s32gen1_clk_priv *priv)
-{
-	struct s32gen1_fixed_clock *clk = obj2fixedclk(module);
-
-	return clk->freq;
-}
-
-static ulong get_fixed_div_freq(struct s32gen1_clk_obj *module,
-				struct s32gen1_clk_priv *priv)
-{
-	struct s32gen1_fixed_div *div = obj2fixeddiv(module);
-	ulong pfreq = get_module_rate(div->parent, priv);
-
-	return (ulong)((double)pfreq / div->div);
-}
-
-static ulong get_pll_div_freq(struct s32gen1_clk_obj *module,
-			      struct s32gen1_clk_priv *priv)
-{
-	struct s32gen1_pll_out_div *div = obj2plldiv(module);
-	struct s32gen1_pll *pll;
-	void *pll_addr;
-	u32 pllodiv;
-	ulong pfreq;
-	u32 dc;
-
-	pll = get_div_pll(div);
-	if (!pll) {
-		pr_err("The parent of the PLL DIV is invalid\n");
-		return 0;
-	}
-
-	pll_addr = get_base_addr(pll->instance, priv);
-	if (!pll_addr) {
-		pr_err("Failed to detect PLL instance\n");
-		return 0;
-	}
-
-	pfreq = get_module_rate(div->parent, priv);
-	if (!pfreq) {
-		pr_err("Failed to get the frequency of CGM MUX\n");
-		return 0;
-	}
-
-	pllodiv = readl(PLLDIG_PLLODIV(pll_addr, div->index));
-	/* Disabled module */
-	if (!(pllodiv & PLLDIG_PLLODIV_DE))
-		return 0;
-
-	dc = PLLDIG_PLLODIV_DIV(pllodiv);
-	return (ulong)((double)pfreq / (dc + 1));
-}
-
-static ulong get_part_block_freq(struct s32gen1_clk_obj *module,
-				 struct s32gen1_clk_priv *priv)
-{
-	struct s32gen1_part_block *block = obj2partblock(module);
-
-	return get_module_rate(block->parent, priv);
-}
-
-static ulong calc_cgm_div_freq(ulong pfreq, void *cgm_addr,
-			       u32 mux, u32 div_index)
-{
-	u32 dc_val = readl(CGM_MUXn_DCm(cgm_addr, mux, div_index));
-	u32 div;
-
-	dc_val &= (MC_CGM_MUXn_DCm_DIV_MASK | MC_CGM_MUXn_DCm_DE);
-
-	if (!(dc_val & MC_CGM_MUXn_DCm_DE))
-		return 0;
-
-	div = MC_CGM_MUXn_DCm_DIV_VAL(dc_val) + 1;
-	return (ulong)((double)pfreq / div);
-}
-
-static ulong get_cgm_div_freq(struct s32gen1_clk_obj *module,
-			      struct s32gen1_clk_priv *priv)
-{
-	struct s32gen1_cgm_div *div = obj2cgmdiv(module);
-	struct s32gen1_mux *mux;
-	void *cgm_addr;
-	ulong pfreq;
-
-	if (!div->parent) {
-		pr_err("Failed to identify CGM divider's parent\n");
-		return 0;
-	}
-
-	pfreq = get_module_rate(div->parent, priv);
-	if (!pfreq) {
-		pr_err("Failed to get the frequency of CGM MUX\n");
-		return 0;
-	}
-
-	mux = get_cgm_div_mux(div);
-	if (!mux)
-		return -EINVAL;
-
-	cgm_addr = get_base_addr(mux->module, priv);
-	if (!cgm_addr) {
-		pr_err("Failed to get CGM base address of the module %d\n",
-		       mux->module);
-	}
-
-	return calc_cgm_div_freq(pfreq, cgm_addr, mux->index, div->index);
-}
-
-ulong get_module_rate(struct s32gen1_clk_obj *module,
-		      struct s32gen1_clk_priv *priv)
-{
-	if (!module) {
-		pr_err("Invalid module\n");
-		return 0;
-	}
-
-	switch (module->type) {
-	case s32gen1_shared_mux_t:
-	case s32gen1_mux_t:
-		return get_mux_freq(module, priv);
-	case s32gen1_clk_t:
-		return get_clk_freq(module, priv);
-	case s32gen1_osc_t:
-		return get_osc_freq(module, priv);
-	case s32gen1_pll_t:
-		return get_pll_freq(module, priv);
-	case s32gen1_dfs_t:
-		return get_dfs_freq(module, priv);
-	case s32gen1_dfs_div_t:
-		return get_dfs_div_freq(module, priv);
-	case s32gen1_fixed_clk_t:
-		return get_fixed_clk_freq(module, priv);
-	case s32gen1_fixed_div_t:
-		return get_fixed_div_freq(module, priv);
-	case s32gen1_pll_out_div_t:
-		return get_pll_div_freq(module, priv);
-	case s32gen1_cgm_div_t:
-		return get_cgm_div_freq(module, priv);
-	case s32gen1_part_block_t:
-		return get_part_block_freq(module, priv);
-	};
-
-	return 0;
-}
-
-ulong s32gen1_get_rate(struct clk *c)
-{
-	struct s32gen1_clk *clk;
-	struct s32gen1_clk_priv *priv = dev_get_priv(c->dev);
-
-	if (!c)
-		return 0;
-
-	clk = get_clock(c->id);
-	if (!clk) {
-		pr_err("Invalid clock\n");
-		return 0;
-	}
-
-	if (clk->desc.type != s32gen1_clk_t) {
-		pr_err("Invalid clock type: %d\n", clk->desc.type);
-		return 0;
-	}
-
-	return get_module_rate(&clk->desc, priv);
-}
diff --git a/drivers/clk/s32/include/s32g_clk_funcs.h b/drivers/clk/s32/include/s32g_clk_funcs.h
deleted file mode 100644
index 7a87a5f39e..0000000000
--- a/drivers/clk/s32/include/s32g_clk_funcs.h
+++ /dev/null
@@ -1,12 +0,0 @@
-/* SPDX-License-Identifier: BSD-3-Clause */
-/*
- * Copyright 2021 NXP
- */
-#ifndef S32G_CLK_FUNCS_H
-#define S32G_CLK_FUNCS_H
-#include <s32gen1_clk_funcs.h>
-
-struct s32gen1_clk *s32g_get_plat_cc_clock(uint32_t id);
-struct s32gen1_clk *s32g_get_plat_clock(uint32_t id);
-
-#endif /* S32G_CLK_FUNCS_H */
diff --git a/drivers/clk/s32/include/s32gen1_clk_funcs.h b/drivers/clk/s32/include/s32gen1_clk_funcs.h
index cbc9771574..83d8e31792 100644
--- a/drivers/clk/s32/include/s32gen1_clk_funcs.h
+++ b/drivers/clk/s32/include/s32gen1_clk_funcs.h
@@ -1,37 +1,12 @@
 /* SPDX-License-Identifier: BSD-3-Clause */
 /*
- * Copyright 2020-2021 NXP
+ * Copyright 2020-2022 NXP
  */
 #ifndef S32GEN1_CLK_FUNCS_H
 #define S32GEN1_CLK_FUNCS_H
 #include <clk-uclass.h>
 #include <inttypes.h>
-#include <s32gen1_clk_modules.h>
 
-struct s32gen1_clk *get_clock(uint32_t id);
-struct s32gen1_clk *get_plat_clock(uint32_t id);
-struct s32gen1_clk *get_plat_cc_clock(uint32_t id);
-ulong s32gen1_set_rate(struct clk *c, ulong rate);
-ulong s32gen1_plat_set_rate(struct clk *c, ulong rate);
 int s32gen1_set_parent(struct clk *c, struct clk *p);
-int s32gen1_enable(struct clk *c);
-
-bool is_qspi1x_clk(uint32_t id);
-bool is_qspi2x_clk(uint32_t id);
-bool is_qspi_clk(uint32_t id);
-
-ulong s32gen1_get_rate(struct clk *clk);
-ulong get_module_rate(struct s32gen1_clk_obj *module,
-		      struct s32gen1_clk_priv *priv);
-
-void *get_base_addr(enum s32gen1_clk_source id, struct s32gen1_clk_priv *priv);
-
-int pllclk2clk(u32 pll_clk_id, u32 *clk_id);
-int get_pll_mfi_mfn(ulong pll_vco, ulong ref_freq, u32 *mfi, u32 *mfn);
-uint32_t s32gen1_platclk2mux(uint32_t clk_id);
-
-int cc_compound_clk_get_pid(u32 id, u32 *parent_id);
-
-int s32gen1_get_early_clks_freqs(const struct siul2_freq_mapping **mapping);
 
 #endif /* S32GEN1_CLK_FUNCS_H */
diff --git a/drivers/clk/s32/include/s32gen1_clk_modules.h b/drivers/clk/s32/include/s32gen1_clk_modules.h
deleted file mode 100644
index 169d78fd2e..0000000000
--- a/drivers/clk/s32/include/s32gen1_clk_modules.h
+++ /dev/null
@@ -1,459 +0,0 @@
-/* SPDX-License-Identifier: BSD-3-Clause */
-/*
- * Copyright 2020-2021 NXP
- */
-#ifndef S32GEN1_CLK_MODULES_H
-#define S32GEN1_CLK_MODULES_H
-
-#include <linux/kernel.h>
-#include <linux/printk.h>
-
-#define MHZ	(1000000UL)
-
-#define S32GEN1_OSC_INIT(SOURCE)       \
-{                                      \
-	.desc = {                      \
-		.type = s32gen1_osc_t, \
-	},                             \
-	.source = (SOURCE),            \
-}
-
-#define S32GEN1_FIXED_CLK_INIT()             \
-{                                            \
-	.desc = {                            \
-		.type = s32gen1_fixed_clk_t, \
-	},                                   \
-}
-
-#define S32GEN1_MUX_TYPE_INIT(TYPE, MODULE, INDEX, NCLKS, ...) \
-{                                                              \
-	.desc = {                                              \
-		.type = (TYPE),                                \
-	},                                                     \
-	.module = (MODULE),                                    \
-	.index = (INDEX),                                      \
-	.nclks = (NCLKS),                                      \
-	.clkids = {__VA_ARGS__},                               \
-}
-
-#define S32GEN1_MUX_INIT(MODULE, INDEX, NCLKS, ...)  \
-	S32GEN1_MUX_TYPE_INIT(s32gen1_mux_t, MODULE, \
-			      INDEX, NCLKS, __VA_ARGS__)
-
-#define S32GEN1_SHARED_MUX_INIT(MODULE, INDEX, NCLKS, ...)  \
-	S32GEN1_MUX_TYPE_INIT(s32gen1_shared_mux_t, MODULE, \
-			      INDEX, NCLKS, __VA_ARGS__)
-
-#define S32GEN1_FIXED_DIV_INIT(PARENT, DIV_RATE) \
-{                                                \
-	.desc = {                                \
-		.type = s32gen1_fixed_div_t,     \
-	},                                       \
-	.parent = &(PARENT).desc,                \
-	.div = (DIV_RATE),                       \
-}
-
-#define S32GEN1_PLL_OUT_DIV_INIT(PARENT, INDEX)  \
-{                                                \
-	.desc = {                                \
-		.type = s32gen1_pll_out_div_t,   \
-	},                                       \
-	.parent = &(PARENT).desc,                \
-	.index = (INDEX),                        \
-}
-
-#define S32GEN1_DFS_DIV_INIT(PARENT, INDEX)      \
-{                                                \
-	.desc = {                                \
-		.type = s32gen1_dfs_div_t,       \
-	},                                       \
-	.parent = &(PARENT).desc,                \
-	.index = (INDEX),                        \
-}
-
-#define S32GEN1_CGM_DIV_INIT(PARENT, INDEX)      \
-{                                                \
-	.desc = {                                \
-		.type = s32gen1_cgm_div_t,       \
-	},                                       \
-	.parent = &(PARENT).desc,                \
-	.index = (INDEX),                        \
-}
-
-#define S32GEN1_FREQ_MODULE_CLK(PARENT_MODULE, MIN, MAX) \
-{                                                        \
-	.desc = {                                        \
-		.type = s32gen1_clk_t,                   \
-	},                                               \
-	.module = &(PARENT_MODULE).desc,                 \
-	.min_freq = (MIN),                               \
-	.max_freq = (MAX),                               \
-}
-
-#define S32GEN1_MODULE_CLK(PARENT_MODULE) \
-	S32GEN1_FREQ_MODULE_CLK(PARENT_MODULE, 0, 0)
-
-#define S32GEN1_CHILD_CLK(PARENT, MIN, MAX) \
-{                                           \
-	.desc = {                           \
-		.type = s32gen1_clk_t,      \
-	},                                  \
-	.pclock = &(PARENT),                \
-	.min_freq = (MIN),                  \
-	.max_freq = (MAX),                  \
-}
-
-#define S32GEN1_PART_BLOCK_STATUS(PARENT, PART, BLOCK, STATUS) \
-{                                                              \
-	.desc = {                                              \
-		.type = s32gen1_part_block_t,                  \
-	},                                                     \
-	.parent = &(PARENT).desc,                              \
-	.partition = (PART),                                   \
-	.block = (BLOCK),                                      \
-	.status = (STATUS),                                    \
-}
-
-#define S32GEN1_PART_BLOCK(PARENT, PART, BLOCK) \
-	S32GEN1_PART_BLOCK_STATUS(PARENT, PART, BLOCK, true)
-
-#define S32GEN1_PART_BLOCK_NO_STATUS(PARENT, PART, BLOCK) \
-	S32GEN1_PART_BLOCK_STATUS(PARENT, PART, BLOCK, false)
-
-#define SIUL2_FREQ_MAP(MIDR2, A53, VCO, PHI0, XBAR_2X)	\
-{							\
-	.siul2_midr2_freq = (MIDR2),			\
-	.a53_freq = (A53),				\
-	.arm_pll_vco_freq = (VCO),			\
-	.arm_pll_phi0_freq = (PHI0),			\
-	.xbar_2x_freq = (XBAR_2X),			\
-}
-
-struct s32gen1_clk_priv {
-	void *accelpll;
-	void *armdfs;
-	void *armpll;
-	void *cgm0;
-	void *cgm1;
-	void *cgm2;
-	void *cgm5;
-	void *cgm6;
-	void *ddrpll;
-	void *fxosc;
-	void *mc_me;
-	void *periphdfs;
-	void *periphpll;
-	void *rdc;
-	void *rgm;
-};
-
-enum s32gen1_clk_source {
-	S32GEN1_ACCEL_PLL,
-	S32GEN1_ARM_DFS,
-	S32GEN1_ARM_PLL,
-	S32GEN1_CGM0,
-	S32GEN1_CGM1,
-	S32GEN1_CGM2,
-	S32GEN1_CGM5,
-	S32GEN1_CGM6,
-	S32GEN1_DDR_PLL,
-	S32GEN1_FIRC,
-	S32GEN1_FXOSC,
-	S32GEN1_PERIPH_DFS,
-	S32GEN1_PERIPH_PLL,
-	S32GEN1_SIRC,
-};
-
-enum s32gen1_clkm_type {
-	s32gen1_osc_t,
-	s32gen1_fixed_clk_t,
-	s32gen1_pll_t,
-	s32gen1_dfs_t,
-	s32gen1_mux_t,
-	s32gen1_shared_mux_t,
-	s32gen1_fixed_div_t,
-	s32gen1_pll_out_div_t,
-	s32gen1_dfs_div_t,
-	s32gen1_cgm_div_t,
-	s32gen1_part_block_t,
-	s32gen1_clk_t,
-};
-
-enum s32gen1_part_block_type {
-	s32gen1_part_block0,
-	s32gen1_part_block1,
-	s32gen1_part_block2,
-	s32gen1_part_block3,
-	s32gen1_part_block4,
-	s32gen1_part_block5,
-	s32gen1_part_block6,
-	s32gen1_part_block7,
-	s32gen1_part_block8,
-	s32gen1_part_block9,
-	s32gen1_part_block10,
-	s32gen1_part_block11,
-	s32gen1_part_block12,
-	s32gen1_part_block13,
-	s32gen1_part_block14,
-	s32gen1_part_block15,
-};
-
-struct s32gen1_clk_obj {
-	enum s32gen1_clkm_type type;
-};
-
-struct s32gen1_clk {
-	struct s32gen1_clk_obj desc;
-	struct s32gen1_clk_obj *module;
-	struct s32gen1_clk *pclock;
-	ulong min_freq;
-	ulong max_freq;
-};
-
-struct s32gen1_osc {
-	struct s32gen1_clk_obj desc;
-	enum s32gen1_clk_source source;
-	ulong freq;
-	void *base;
-};
-
-struct s32gen1_fixed_clock {
-	struct s32gen1_clk_obj desc;
-	ulong freq;
-};
-
-struct s32gen1_part_block {
-	struct s32gen1_clk_obj desc;
-	struct s32gen1_clk_obj *parent;
-	u32 partition;
-	enum s32gen1_part_block_type block;
-	bool status;
-};
-
-struct s32gen1_pll {
-	struct s32gen1_clk_obj desc;
-	struct s32gen1_clk_obj *source;
-	enum s32gen1_clk_source instance;
-	ulong vco_freq;
-	u32 ndividers;
-	void *base;
-};
-
-struct s32gen1_dfs {
-	struct s32gen1_clk_obj desc;
-	struct s32gen1_clk_obj *source;
-	enum s32gen1_clk_source instance;
-	void *base;
-};
-
-struct s32gen1_mux {
-	struct s32gen1_clk_obj desc;
-	enum s32gen1_clk_source module;
-	u8 index;	/* Mux index in parent module */
-	u32 source_id;	/* Selected source */
-	u8 nclks;	/* Number of output clocks */
-	u32 clkids[];	/* IDs of the output clocks */
-};
-
-struct s32gen1_pll_out_div {
-	struct s32gen1_clk_obj desc;
-	struct s32gen1_clk_obj *parent;
-	u32 index;
-	ulong freq;
-};
-
-struct s32gen1_dfs_div {
-	struct s32gen1_clk_obj desc;
-	struct s32gen1_clk_obj *parent;
-	u32 index;
-	ulong freq;
-};
-
-struct s32gen1_cgm_div {
-	struct s32gen1_clk_obj desc;
-	struct s32gen1_clk_obj *parent;
-	u32 index;
-	ulong freq;
-};
-
-struct s32gen1_fixed_div {
-	struct s32gen1_clk_obj desc;
-	struct s32gen1_clk_obj *parent;
-	u32 div;
-};
-
-/* Map values read from SIUL2_MIDR2 register to actual frequencies */
-struct siul2_freq_mapping {
-	u32 siul2_midr2_freq;
-	unsigned long a53_freq;
-	unsigned long arm_pll_vco_freq;
-	unsigned long arm_pll_phi0_freq;
-	unsigned long xbar_2x_freq;
-};
-
-static inline struct s32gen1_pll *obj2pll(struct s32gen1_clk_obj *mod)
-{
-	return container_of(mod, struct s32gen1_pll, desc);
-}
-
-static inline struct s32gen1_pll_out_div *obj2plldiv(struct s32gen1_clk_obj
-						     *mod)
-{
-	return container_of(mod, struct s32gen1_pll_out_div, desc);
-}
-
-static inline struct s32gen1_dfs_div *obj2dfsdiv(struct s32gen1_clk_obj *mod)
-{
-	return container_of(mod, struct s32gen1_dfs_div, desc);
-}
-
-static inline struct s32gen1_dfs *obj2dfs(struct s32gen1_clk_obj *mod)
-{
-	return container_of(mod, struct s32gen1_dfs, desc);
-}
-
-static inline struct s32gen1_cgm_div *obj2cgmdiv(struct s32gen1_clk_obj *mod)
-{
-	return container_of(mod, struct s32gen1_cgm_div, desc);
-}
-
-static inline struct s32gen1_osc *obj2osc(struct s32gen1_clk_obj *mod)
-{
-	return container_of(mod, struct s32gen1_osc, desc);
-}
-
-static inline struct s32gen1_fixed_clock *obj2fixedclk(struct s32gen1_clk_obj
-						       *mod)
-{
-	return container_of(mod, struct s32gen1_fixed_clock, desc);
-}
-
-static inline struct s32gen1_fixed_div *obj2fixeddiv(struct s32gen1_clk_obj
-						     *mod)
-{
-	return container_of(mod, struct s32gen1_fixed_div, desc);
-}
-
-static inline struct s32gen1_part_block *obj2partblock(struct s32gen1_clk_obj
-						       *mod)
-{
-	return container_of(mod, struct s32gen1_part_block, desc);
-}
-
-static inline struct s32gen1_mux *obj2mux(struct s32gen1_clk_obj *mod)
-{
-	return container_of(mod, struct s32gen1_mux, desc);
-}
-
-static inline struct s32gen1_clk *obj2clk(struct s32gen1_clk_obj *mod)
-{
-	return container_of(mod, struct s32gen1_clk, desc);
-}
-
-static inline bool is_mux(struct s32gen1_clk *clk)
-{
-	struct s32gen1_clk_obj *module;
-
-	module = clk->module;
-	if (!module)
-		return NULL;
-
-	return module->type == s32gen1_mux_t ||
-	       module->type == s32gen1_shared_mux_t;
-}
-
-static inline struct s32gen1_mux *clk2mux(struct s32gen1_clk *clk)
-{
-	if (!is_mux(clk))
-		return NULL;
-
-	return container_of(clk->module, struct s32gen1_mux, desc);
-}
-
-static inline bool is_osc(struct s32gen1_clk *clk)
-{
-	struct s32gen1_clk_obj *module;
-
-	module = clk->module;
-	if (!module)
-		return NULL;
-
-	return (module->type == s32gen1_osc_t);
-}
-
-static inline bool is_fixed_clk(struct s32gen1_clk *clk)
-{
-	struct s32gen1_clk_obj *module;
-
-	module = clk->module;
-	if (!module)
-		return NULL;
-
-	return (module->type == s32gen1_fixed_clk_t);
-}
-
-static inline struct s32gen1_dfs *get_div_dfs(struct s32gen1_dfs_div *div)
-{
-	struct s32gen1_clk_obj *parent = div->parent;
-
-	if (parent->type != s32gen1_dfs_t) {
-		pr_err("DFS DIV doesn't have a DFS as parent\n");
-		return NULL;
-	}
-
-	return obj2dfs(parent);
-}
-
-static inline struct s32gen1_pll *get_div_pll(struct s32gen1_pll_out_div *div)
-{
-	struct s32gen1_clk_obj *parent;
-
-	parent = div->parent;
-	if (!parent) {
-		pr_err("Failed to identify PLL divider's parent\n");
-		return NULL;
-	}
-
-	if (parent->type != s32gen1_pll_t) {
-		pr_err("The parent of the divider is not a PLL instance\n");
-		return NULL;
-	}
-
-	return obj2pll(parent);
-}
-
-static inline struct s32gen1_mux *get_cgm_div_mux(struct s32gen1_cgm_div *div)
-{
-	struct s32gen1_clk_obj *parent = div->parent;
-	struct s32gen1_clk_obj *mux_obj;
-	struct s32gen1_clk *clk;
-
-	if (!parent) {
-		pr_err("Failed to identify CGm DIV's parent\n");
-		return NULL;
-	}
-
-	if (parent->type != s32gen1_clk_t) {
-		pr_err("The parent of the CGM DIV isn't a clock\n");
-		return NULL;
-	}
-
-	clk = obj2clk(parent);
-
-	if (!clk->module) {
-		pr_err("The clock isn't connected to a module\n");
-		return NULL;
-	}
-
-	mux_obj = clk->module;
-
-	if (mux_obj->type != s32gen1_mux_t &&
-	    mux_obj->type != s32gen1_shared_mux_t) {
-		pr_err("The parent of the CGM DIV isn't a MUX\n");
-		return NULL;
-	}
-
-	return obj2mux(mux_obj);
-}
-
-#endif /* S32GEN1_CLK_MODULES_H */
diff --git a/drivers/clk/s32/include/s32gen1_clk_utils.h b/drivers/clk/s32/include/s32gen1_clk_utils.h
deleted file mode 100644
index 8f944ad12f..0000000000
--- a/drivers/clk/s32/include/s32gen1_clk_utils.h
+++ /dev/null
@@ -1,20 +0,0 @@
-/* SPDX-License-Identifier: BSD-3-Clause */
-/*
- * Copyright 2020 NXP
- */
-#ifndef S32GEN1_CLOCK_UTILS_H
-#define S32GEN1_CLOCK_UTILS_H
-
-int enable_early_clocks(void);
-
-struct udevice *get_clk_device(void);
-int s32gen1_enable_dev_clk(const char *name, struct udevice *dev);
-ulong s32gen1_set_dev_clk_rate(const char *name,
-			       struct udevice *dev, ulong rate);
-ulong s32gen1_get_dev_clk_rate(const char *name, struct udevice *dev);
-
-int s32gen1_enable_plat_clk(ulong clk_id);
-ulong s32gen1_get_plat_clk_rate(ulong clk_id);
-int s32gen1_set_parent_clk_id(ulong clk_id, ulong parent_clk_id);
-
-#endif
diff --git a/drivers/clk/s32/include/s32gen1_scmi_clk.h b/drivers/clk/s32/include/s32gen1_scmi_clk.h
deleted file mode 100644
index 19b2307a61..0000000000
--- a/drivers/clk/s32/include/s32gen1_scmi_clk.h
+++ /dev/null
@@ -1,32 +0,0 @@
-/* SPDX-License-Identifier: BSD-3-Clause */
-/*
- * Copyright 2020 NXP
- */
-#ifndef S32GEN1_SCMI_CLK_H
-#define S32GEN1_SCMI_CLK_H
-
-#include <clk.h>
-
-int cc_scmi_id2clk(u32 scmi_clk_id, u32 *clk_id);
-int cc_compound_clk_get(struct clk *clk);
-ulong cc_compound_clk_get_rate(struct clk *clk);
-ulong cc_compound_clk_set_rate(struct clk *clk, ulong rate);
-int cc_compound_clk_enable(struct clk *clk);
-int cc_set_mux_parent(struct clk *clk, u32 mux_id, u32 mux_source);
-
-int plat_scmi_id2clk(u32 scmi_clk_id, u32 *clk_id);
-int plat_compound_clk_get(struct clk *clk);
-ulong plat_compound_clk_get_rate(struct clk *clk);
-ulong plat_compound_clk_set_rate(struct clk *clk, ulong rate);
-int plat_compound_clk_enable(struct clk *clk);
-int plat_compound_clk_set_parents(struct clk *clk);
-
-int s32gen1_scmi_request(struct clk *clk);
-ulong s32gen1_scmi_get_rate(struct clk *clk);
-ulong s32gen1_scmi_set_rate(struct clk *clk, ulong rate);
-int s32gen1_scmi_set_parent(struct clk *clk, struct clk *parent);
-int s32gen1_scmi_enable(struct clk *clk);
-int s32gen1_scmi_disable(struct clk *clk);
-
-#endif
-
diff --git a/drivers/clk/s32/include/s32gen1_shared_clks.h b/drivers/clk/s32/include/s32gen1_shared_clks.h
deleted file mode 100644
index 222916caa7..0000000000
--- a/drivers/clk/s32/include/s32gen1_shared_clks.h
+++ /dev/null
@@ -1,20 +0,0 @@
-/* SPDX-License-Identifier: BSD-3-Clause */
-/*
- * Copyright 2020-2021 NXP
- */
-#ifndef S32GEN1_SHARED_CLKS_H
-#define S32GEN1_SHARED_CLKS_H
-
-extern struct s32gen1_clk cgm0_mux7_clk;
-extern struct s32gen1_clk xbar_2x_clk;
-extern struct s32gen1_cgm_div per_div;
-extern struct s32gen1_clk cgm0_mux0_clk;
-extern struct s32gen1_dfs armdfs;
-extern struct s32gen1_clk serdes1_lane0_tx_clk;
-extern struct s32gen1_clk serdes1_lane0_cdr_clk;
-extern struct s32gen1_clk accel_pll_phi0_clk;
-extern struct s32gen1_clk accel_pll_phi1_clk;
-extern const struct siul2_freq_mapping siul2_clk_freq_map[];
-
-#endif
-
diff --git a/drivers/clk/s32/s32g274a_clk.c b/drivers/clk/s32/s32g274a_clk.c
deleted file mode 100644
index fdc07898a4..0000000000
--- a/drivers/clk/s32/s32g274a_clk.c
+++ /dev/null
@@ -1,157 +0,0 @@
-// SPDX-License-Identifier: BSD-3-Clause
-/*
- * Copyright 2020-2021 NXP
- */
-#include <asm/arch/siul.h>
-#include <dt-bindings/clock/s32g-clock.h>
-#include <dt-bindings/clock/s32gen1-scmi-clock.h>
-#include <dt-bindings/clock/s32gen1-clock-freq.h>
-#include <s32g_clk_funcs.h>
-#include <s32gen1_clk_modules.h>
-#include <s32gen1_scmi_clk.h>
-
-#define SIUL2_MIDR2_FREQ_VAL1		(0xB)
-
-#define S32GEN1_XBAR_2X_MAX_FREQ	(800 * MHZ)
-
-/* GMAC_TS_CLK */
-static struct s32gen1_fixed_clock gmac_ext_ts =
-		S32GEN1_FIXED_CLK_INIT();
-static struct s32gen1_clk gmac_ext_ts_clk =
-		S32GEN1_MODULE_CLK(gmac_ext_ts);
-static struct s32gen1_mux cgm0_mux9 =
-		S32GEN1_MUX_INIT(S32GEN1_CGM0, 9, 3,
-				 S32GEN1_CLK_FIRC,
-				 S32GEN1_CLK_PERIPH_PLL_PHI4,
-				 S32GEN1_CLK_GMAC0_EXT_TS);
-static struct s32gen1_clk cgm0_mux9_clk =
-		S32GEN1_MODULE_CLK(cgm0_mux9);
-static struct s32gen1_cgm_div gmac_ts_div =
-		S32GEN1_CGM_DIV_INIT(cgm0_mux9_clk, 0);
-static struct s32gen1_clk gmac_ts_clk =
-		S32GEN1_FREQ_MODULE_CLK(gmac_ts_div, 5 * MHZ, 200 * MHZ);
-
-/* GMAC0_TX_CLK */
-static struct s32gen1_fixed_clock gmac0_ext_tx =
-		S32GEN1_FIXED_CLK_INIT();
-static struct s32gen1_clk gmac0_ext_tx_clk =
-		S32GEN1_MODULE_CLK(gmac0_ext_tx);
-
-static struct s32gen1_fixed_clock gmac0_ext_ref =
-		S32GEN1_FIXED_CLK_INIT();
-static struct s32gen1_clk gmac0_ext_ref_clk =
-		S32GEN1_MODULE_CLK(gmac0_ext_ref);
-
-static struct s32gen1_mux cgm0_mux10 =
-		S32GEN1_MUX_INIT(S32GEN1_CGM0, 10, 5,
-				 S32GEN1_CLK_FIRC,
-				 S32GEN1_CLK_PERIPH_PLL_PHI5,
-				 S32GEN1_CLK_SERDES0_LANE0_TX,
-				 S32GEN1_CLK_GMAC0_EXT_TX,
-				 S32GEN1_CLK_GMAC0_EXT_REF);
-static struct s32gen1_clk cgm0_mux10_clk =
-		S32GEN1_MODULE_CLK(cgm0_mux10);
-static struct s32gen1_cgm_div gmac_tx_div =
-		S32GEN1_CGM_DIV_INIT(cgm0_mux10_clk, 0);
-static struct s32gen1_clk gmac_tx_clk =
-		S32GEN1_FREQ_MODULE_CLK(gmac_tx_div, 2500000, 125 * MHZ);
-
-/* GMAC0_RX_CLK */
-static struct s32gen1_fixed_clock gmac0_ext_rx =
-		S32GEN1_FIXED_CLK_INIT();
-static struct s32gen1_clk gmac0_ext_rx_clk =
-		S32GEN1_MODULE_CLK(gmac0_ext_rx);
-
-static struct s32gen1_mux cgm0_mux11 =
-		S32GEN1_MUX_INIT(S32GEN1_CGM0, 11, 4,
-				 S32GEN1_CLK_FIRC,
-				 S32GEN1_CLK_GMAC0_REF_DIV,
-				 S32GEN1_CLK_GMAC0_EXT_RX,
-				 S32GEN1_CLK_SERDES0_LANE0_CDR);
-static struct s32gen1_clk cgm0_mux11_clk =
-		S32GEN1_MODULE_CLK(cgm0_mux11);
-static struct s32gen1_clk gmac_rx_clk =
-		S32GEN1_CHILD_CLK(cgm0_mux11_clk, 2500000, 125 * MHZ);
-
-/* GMAC0_REF_DIV_CLK */
-static struct s32gen1_mux cgm0_mux15 =
-		S32GEN1_SHARED_MUX_INIT(S32GEN1_CGM0, 15, 2,
-					S32GEN1_CLK_FIRC,
-					S32GEN1_CLK_GMAC0_EXT_REF);
-static struct s32gen1_clk cgm0_mux15_clk =
-		S32GEN1_MODULE_CLK(cgm0_mux15);
-static struct s32gen1_clk gmac0_ref_div_clk =
-		S32GEN1_CHILD_CLK(cgm0_mux15_clk, 0, 50 * MHZ);
-static struct s32gen1_clk gmac0_ref_clk =
-		S32GEN1_CHILD_CLK(cgm0_mux15_clk, 0, 50 * MHZ);
-
-static struct s32gen1_clk *s32g274a_cc_clocks[] = {
-	[CC_ARR_CLK(S32GEN1_CLK_MC_CGM0_MUX10)] = &cgm0_mux10_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_TX)] = &gmac_tx_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_EXT_TS)] = &gmac_ext_ts_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_MC_CGM0_MUX9)] = &cgm0_mux9_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_TS)] = &gmac_ts_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_EXT_TX)] = &gmac0_ext_tx_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_EXT_REF)] = &gmac0_ext_ref_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_EXT_RX)] = &gmac0_ext_rx_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_MC_CGM0_MUX11)] = &cgm0_mux11_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_RX)] = &gmac_rx_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_MC_CGM0_MUX15)] = &cgm0_mux15_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_REF_DIV)] = &gmac0_ref_div_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_REF)] = &gmac0_ref_clk,
-};
-
-struct s32gen1_clk *s32g_get_plat_cc_clock(uint32_t id)
-{
-	id = s32gen1_platclk2mux(id);
-
-	if (id >= ARRAY_SIZE(s32g274a_cc_clocks))
-		return NULL;
-
-	return s32g274a_cc_clocks[id];
-}
-
-struct s32gen1_clk *s32g_get_plat_clock(uint32_t id)
-{
-	return NULL;
-}
-
-ulong s32gen1_plat_set_rate(struct clk *c, ulong rate)
-{
-	if (s32gen1_scmi_request(c))
-		return 0;
-
-	return s32gen1_scmi_set_rate(c, rate);
-}
-
-int cc_compound_clk_get_pid(u32 id, u32 *parent_id)
-{
-	if (!parent_id)
-		return -EINVAL;
-
-	switch (id) {
-	case S32GEN1_SCMI_CLK_GMAC0_RX_SGMII:
-	case S32GEN1_SCMI_CLK_GMAC0_RX_RGMII:
-		*parent_id = S32GEN1_CLK_MC_CGM0_MUX11;
-		break;
-	case S32GEN1_SCMI_CLK_GMAC0_TX_RGMII:
-	case S32GEN1_SCMI_CLK_GMAC0_TX_SGMII:
-		*parent_id = S32GEN1_CLK_MC_CGM0_MUX10;
-		break;
-	case S32GEN1_SCMI_CLK_GMAC0_TS:
-		*parent_id = S32GEN1_CLK_MC_CGM0_MUX9;
-		break;
-	default:
-		return -EINVAL;
-	}
-
-	return 0;
-}
-
-const struct siul2_freq_mapping siul2_clk_freq_map[] = {
-	SIUL2_FREQ_MAP(SIUL2_MIDR2_FREQ_VAL1, S32GEN1_A53_MAX_FREQ,
-			S32GEN1_ARM_PLL_VCO_MAX_FREQ,
-			S32GEN1_ARM_PLL_PHI0_MAX_FREQ,
-			S32GEN1_XBAR_2X_MAX_FREQ),
-	{} /* empty entry */
-};
diff --git a/drivers/clk/s32/s32g3_clk.c b/drivers/clk/s32/s32g3_clk.c
deleted file mode 100644
index 470788005d..0000000000
--- a/drivers/clk/s32/s32g3_clk.c
+++ /dev/null
@@ -1,204 +0,0 @@
-// SPDX-License-Identifier: BSD-3-Clause
-/*
- * Copyright 2021 NXP
- */
-#include <dt-bindings/clock/s32gen1-clock.h>
-#include <dt-bindings/clock/s32gen1-scmi-clock.h>
-#include <dt-bindings/clock/s32g3-clock.h>
-#include <dt-bindings/clock/s32gen1-clock-freq.h>
-#include <linux/types.h>
-#include <s32g_clk_funcs.h>
-#include <s32gen1_clk_modules.h>
-#include <s32gen1_scmi_clk.h>
-
-#define SIUL2_MIDR2_FREQ_VAL1		(0xB)
-#define SIUL2_MIDR2_FREQ_VAL2		(0xC)
-#define SIUL2_MIDR2_FREQ_VAL3		(0xE)
-
-#define S32GEN1_A53_MID_FREQ		(1100 * MHZ)
-#define S32GEN1_A53_LOW_FREQ		(1000 * MHZ)
-
-#define S32GEN1_ARM_PLL_VCO_MID_FREQ	(2200 * MHZ)
-#define S32GEN1_ARM_PLL_VCO_LOW_FREQ	(2000 * MHZ)
-
-#define S32GEN1_ARM_PLL_PHI0_MID_FREQ	(1100 * MHZ)
-#define S32GEN1_ARM_PLL_PHI0_LOW_FREQ	(1000 * MHZ)
-
-/* The XBAR_2X naming convention corresponds to the
- * A53/VCO/PHI0 mapped frequencies, not to the order
- * of the actual values
- */
-#define S32GEN1_XBAR_2X_MAX_FREQ	(793220338UL)
-#define S32GEN1_XBAR_2X_MID_FREQ	(792 * MHZ)
-#define S32GEN1_XBAR_2X_LOW_FREQ	(800 * MHZ)
-
-/* GMAC_TS_CLK */
-static struct s32gen1_fixed_clock gmac_ext_ts =
-		S32GEN1_FIXED_CLK_INIT();
-static struct s32gen1_clk gmac_ext_ts_clk =
-		S32GEN1_MODULE_CLK(gmac_ext_ts);
-static struct s32gen1_mux cgm6_mux0 =
-		S32GEN1_MUX_INIT(S32GEN1_CGM6, 0, 3,
-				 S32GEN1_CLK_FIRC,
-				 S32GEN1_CLK_PERIPH_PLL_PHI4,
-				 S32GEN1_CLK_GMAC0_EXT_TS);
-static struct s32gen1_clk cgm6_mux0_clk =
-		S32GEN1_MODULE_CLK(cgm6_mux0);
-static struct s32gen1_cgm_div gmac_ts_div =
-		S32GEN1_CGM_DIV_INIT(cgm6_mux0_clk, 0);
-static struct s32gen1_clk gmac_ts_clk =
-		S32GEN1_FREQ_MODULE_CLK(gmac_ts_div, 5 * MHZ, 200 * MHZ);
-
-/* GMAC0_TX_CLK */
-static struct s32gen1_fixed_clock gmac0_ext_tx =
-		S32GEN1_FIXED_CLK_INIT();
-static struct s32gen1_clk gmac0_ext_tx_clk =
-		S32GEN1_MODULE_CLK(gmac0_ext_tx);
-
-static struct s32gen1_fixed_clock gmac0_ext_ref =
-		S32GEN1_FIXED_CLK_INIT();
-static struct s32gen1_clk gmac0_ext_ref_clk =
-		S32GEN1_MODULE_CLK(gmac0_ext_ref);
-
-static struct s32gen1_mux cgm6_mux1 =
-		S32GEN1_MUX_INIT(S32GEN1_CGM6, 1, 5,
-				 S32GEN1_CLK_FIRC,
-				 S32GEN1_CLK_PERIPH_PLL_PHI5,
-				 S32GEN1_CLK_SERDES0_LANE0_TX,
-				 S32GEN1_CLK_GMAC0_EXT_TX,
-				 S32GEN1_CLK_GMAC0_EXT_REF);
-static struct s32gen1_clk cgm6_mux1_clk =
-		S32GEN1_MODULE_CLK(cgm6_mux1);
-static struct s32gen1_cgm_div gmac_tx_div =
-		S32GEN1_CGM_DIV_INIT(cgm6_mux1_clk, 0);
-static struct s32gen1_clk gmac_tx_clk =
-		S32GEN1_FREQ_MODULE_CLK(gmac_tx_div, 2500000, 125 * MHZ);
-
-/* GMAC0_RX_CLK */
-static struct s32gen1_fixed_clock gmac0_ext_rx =
-		S32GEN1_FIXED_CLK_INIT();
-static struct s32gen1_clk gmac0_ext_rx_clk =
-		S32GEN1_MODULE_CLK(gmac0_ext_rx);
-
-static struct s32gen1_mux cgm6_mux2 =
-		S32GEN1_MUX_INIT(S32GEN1_CGM6, 2, 4,
-				 S32GEN1_CLK_FIRC,
-				 S32GEN1_CLK_GMAC0_REF_DIV,
-				 S32GEN1_CLK_GMAC0_EXT_RX,
-				 S32GEN1_CLK_SERDES0_LANE0_CDR);
-static struct s32gen1_clk cgm6_mux2_clk =
-		S32GEN1_MODULE_CLK(cgm6_mux2);
-static struct s32gen1_clk gmac_rx_clk =
-		S32GEN1_CHILD_CLK(cgm6_mux2_clk, 2500000, 125 * MHZ);
-
-/* GMAC0_REF_DIV_CLK */
-static struct s32gen1_mux cgm6_mux3 =
-		S32GEN1_SHARED_MUX_INIT(S32GEN1_CGM6, 3, 2,
-					S32GEN1_CLK_FIRC,
-					S32GEN1_CLK_GMAC0_EXT_REF);
-static struct s32gen1_clk cgm6_mux3_clk =
-		S32GEN1_MODULE_CLK(cgm6_mux3);
-static struct s32gen1_clk gmac0_ref_div_clk =
-		S32GEN1_CHILD_CLK(cgm6_mux3_clk, 0, 50 * MHZ);
-static struct s32gen1_clk gmac0_ref_clk =
-		S32GEN1_CHILD_CLK(cgm6_mux3_clk, 0, 50 * MHZ);
-
-static struct s32gen1_clk *s32g3_clocks[] = {
-	[ARR_CLK(S32G_CLK_MC_CGM6_MUX0)] = &cgm6_mux0_clk,
-	[ARR_CLK(S32G_CLK_MC_CGM6_MUX1)] = &cgm6_mux1_clk,
-	[ARR_CLK(S32G_CLK_MC_CGM6_MUX2)] = &cgm6_mux2_clk,
-	[ARR_CLK(S32G_CLK_MC_CGM6_MUX3)] = &cgm6_mux3_clk,
-};
-
-static struct s32gen1_clk *s32g3_cc_clocks[] = {
-	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_TX)] = &gmac_tx_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_EXT_TS)] = &gmac_ext_ts_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_TS)] = &gmac_ts_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_EXT_TX)] = &gmac0_ext_tx_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_EXT_REF)] = &gmac0_ext_ref_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_EXT_RX)] = &gmac0_ext_rx_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_RX)] = &gmac_rx_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_REF_DIV)] = &gmac0_ref_div_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_REF)] = &gmac0_ref_clk,
-};
-
-struct s32gen1_clk *s32g_get_plat_cc_clock(uint32_t id)
-{
-	id = s32gen1_platclk2mux(id);
-
-	if (id >= ARRAY_SIZE(s32g3_cc_clocks))
-		return NULL;
-
-	return s32g3_cc_clocks[id];
-}
-
-struct s32gen1_clk *s32g_get_plat_clock(uint32_t id)
-{
-	if (id < S32GEN1_PLAT_CLK_ID_BASE)
-		return NULL;
-
-	id -= S32GEN1_PLAT_CLK_ID_BASE;
-
-	if (id >= ARRAY_SIZE(s32g3_clocks))
-		return NULL;
-
-	return s32g3_clocks[id];
-}
-
-ulong s32gen1_plat_set_rate(struct clk *c, ulong rate)
-{
-	if (s32gen1_scmi_request(c))
-		return 0;
-
-	return s32gen1_scmi_set_rate(c, rate);
-}
-
-int cc_compound_clk_get_pid(u32 id, u32 *parent_id)
-{
-	if (!parent_id)
-		return -EINVAL;
-
-	switch (id) {
-	case S32GEN1_SCMI_CLK_GMAC0_RX_SGMII:
-	case S32GEN1_SCMI_CLK_GMAC0_RX_RGMII:
-		*parent_id = S32G_CLK_MC_CGM6_MUX2;
-		break;
-	case S32GEN1_SCMI_CLK_GMAC0_TX_RGMII:
-	case S32GEN1_SCMI_CLK_GMAC0_TX_SGMII:
-		*parent_id = S32G_CLK_MC_CGM6_MUX1;
-		break;
-	case S32GEN1_SCMI_CLK_GMAC0_TS:
-		*parent_id = S32G_CLK_MC_CGM6_MUX0;
-		break;
-	default:
-		return -EINVAL;
-	}
-
-	return 0;
-}
-
-const struct siul2_freq_mapping siul2_clk_freq_map[] = {
-
-	SIUL2_FREQ_MAP(SIUL2_MIDR2_FREQ_VAL1, S32GEN1_A53_LOW_FREQ,
-			S32GEN1_ARM_PLL_VCO_LOW_FREQ,
-			S32GEN1_ARM_PLL_PHI0_LOW_FREQ,
-			S32GEN1_XBAR_2X_LOW_FREQ),
-
-	SIUL2_FREQ_MAP(SIUL2_MIDR2_FREQ_VAL2, S32GEN1_A53_MID_FREQ,
-			S32GEN1_ARM_PLL_VCO_MID_FREQ,
-			S32GEN1_ARM_PLL_PHI0_MID_FREQ,
-			S32GEN1_XBAR_2X_MID_FREQ),
-
-	SIUL2_FREQ_MAP(SIUL2_MIDR2_FREQ_VAL3, S32GEN1_A53_MAX_FREQ,
-			S32GEN1_ARM_PLL_VCO_MAX_FREQ,
-			S32GEN1_ARM_PLL_PHI0_MAX_FREQ,
-			S32GEN1_XBAR_2X_MAX_FREQ),
-
-	/* Test samples, let's assume it's S32G399A */
-	SIUL2_FREQ_MAP(0x0, S32GEN1_A53_MAX_FREQ,
-		       S32GEN1_ARM_PLL_VCO_MAX_FREQ,
-		       S32GEN1_ARM_PLL_PHI0_MAX_FREQ,
-		       S32GEN1_XBAR_2X_MAX_FREQ),
-
-	{} /* empty entry */
-};
diff --git a/drivers/clk/s32/s32g_clk.c b/drivers/clk/s32/s32g_clk.c
deleted file mode 100644
index 8eba3a53f9..0000000000
--- a/drivers/clk/s32/s32g_clk.c
+++ /dev/null
@@ -1,325 +0,0 @@
-// SPDX-License-Identifier: BSD-3-Clause
-/*
- * Copyright 2020-2021 NXP
- */
-#include <asm/arch/siul.h>
-#include <dt-bindings/clock/s32g-clock.h>
-#include <s32g_clk_funcs.h>
-#include <s32gen1_clk_modules.h>
-#include <s32gen1_shared_clks.h>
-
-/* XBAR_2X */
-static struct s32gen1_part_block llce_block =
-		S32GEN1_PART_BLOCK_NO_STATUS(cgm0_mux0_clk, 3,
-					     s32gen1_part_block0);
-struct s32gen1_clk xbar_2x_clk =
-		S32GEN1_FREQ_MODULE_CLK(llce_block, 48 * MHZ, 800 * MHZ);
-
-/* PER_CLK */
-static struct s32gen1_clk per_clk =
-		S32GEN1_FREQ_MODULE_CLK(per_div, 0, 80 * MHZ);
-
-/* CAN_PE_CLK */
-static struct s32gen1_clk can_pe_clk =
-		S32GEN1_CHILD_CLK(cgm0_mux7_clk, 40 * MHZ, 80 * MHZ);
-
-/* PFE_MAC0_TX_DIV */
-static struct s32gen1_fixed_clock pfe_mac0_ext_tx =
-		S32GEN1_FIXED_CLK_INIT();
-static struct s32gen1_clk pfe_mac0_ext_tx_clk =
-		S32GEN1_MODULE_CLK(pfe_mac0_ext_tx);
-
-static struct s32gen1_fixed_clock pfe_mac0_ext_ref =
-		S32GEN1_FIXED_CLK_INIT();
-static struct s32gen1_clk pfe_mac0_ext_ref_clk =
-		S32GEN1_MODULE_CLK(pfe_mac0_ext_ref);
-
-static struct s32gen1_mux cgm2_mux1 =
-		S32GEN1_MUX_INIT(S32GEN1_CGM2, 1, 5,
-				 S32GEN1_CLK_FIRC,
-				 S32GEN1_CLK_PERIPH_PLL_PHI5,
-				 S32G_CLK_PFE_MAC0_EXT_TX,
-				 S32G_CLK_PFE_MAC0_EXT_REF,
-				 S32G_CLK_SERDES1_LANE0_TX);
-static struct s32gen1_clk cgm2_mux1_clk =
-		S32GEN1_MODULE_CLK(cgm2_mux1);
-static struct s32gen1_cgm_div cgm2_mux1_div =
-		S32GEN1_CGM_DIV_INIT(cgm2_mux1_clk, 0);
-static struct s32gen1_part_block pfe0_tx_block =
-		S32GEN1_PART_BLOCK_NO_STATUS(cgm2_mux1_div, 2,
-					     s32gen1_part_block0);
-static struct s32gen1_clk pfe_mac0_tx_div_clk =
-		S32GEN1_FREQ_MODULE_CLK(pfe0_tx_block, 2500000, 312500000);
-
-/* PFE_MAC0_REF_DIV */
-static struct s32gen1_mux cgm2_mux7 =
-		S32GEN1_MUX_INIT(S32GEN1_CGM2, 7, 2,
-				 S32GEN1_CLK_FIRC,
-				 S32G_CLK_PFE_MAC0_EXT_REF);
-static struct s32gen1_clk cgm2_mux7_clk =
-		S32GEN1_MODULE_CLK(cgm2_mux7);
-static struct s32gen1_cgm_div cgm2_mux7_div =
-		S32GEN1_CGM_DIV_INIT(cgm2_mux7_clk, 0);
-static struct s32gen1_part_block pfe0_ref_block =
-		S32GEN1_PART_BLOCK_NO_STATUS(cgm2_mux7_div, 2,
-					     s32gen1_part_block0);
-static struct s32gen1_clk pfe_mac0_ref_div_clk =
-		S32GEN1_FREQ_MODULE_CLK(pfe0_ref_block, 0, 50 * MHZ);
-
-/* PFE_MAC0_RX */
-static struct s32gen1_fixed_clock pfe_mac0_ext_rx =
-		S32GEN1_FIXED_CLK_INIT();
-static struct s32gen1_clk pfe_mac0_ext_rx_clk =
-		S32GEN1_MODULE_CLK(pfe_mac0_ext_rx);
-
-static struct s32gen1_mux cgm2_mux4 =
-		S32GEN1_MUX_INIT(S32GEN1_CGM2, 4, 4,
-				 S32GEN1_CLK_FIRC,
-				 S32G_CLK_PFE_MAC0_EXT_RX,
-				 S32G_CLK_SERDES1_LANE0_CDR,
-				 S32G_CLK_PFE_MAC0_REF_DIV);
-static struct s32gen1_clk cgm2_mux4_clk =
-		S32GEN1_MODULE_CLK(cgm2_mux4);
-static struct s32gen1_part_block pfe0_rx_block =
-		S32GEN1_PART_BLOCK_NO_STATUS(cgm2_mux4_clk, 2,
-					     s32gen1_part_block0);
-static struct s32gen1_clk pfe_mac0_rx_clk =
-		S32GEN1_FREQ_MODULE_CLK(pfe0_rx_block, 2500000, 312500000);
-
-/* PFE_MAC1_TX */
-static struct s32gen1_fixed_clock serdes1_lane1_tx =
-		S32GEN1_FIXED_CLK_INIT();
-struct s32gen1_clk serdes1_lane1_tx_clk =
-		S32GEN1_MODULE_CLK(serdes1_lane1_tx);
-static struct s32gen1_fixed_clock pfe_mac1_ext_tx =
-		S32GEN1_FIXED_CLK_INIT();
-static struct s32gen1_clk pfe_mac1_ext_tx_clk =
-		S32GEN1_MODULE_CLK(pfe_mac1_ext_tx);
-
-static struct s32gen1_fixed_clock pfe_mac1_ext_ref =
-		S32GEN1_FIXED_CLK_INIT();
-static struct s32gen1_clk pfe_mac1_ext_ref_clk =
-		S32GEN1_MODULE_CLK(pfe_mac1_ext_ref);
-
-static struct s32gen1_mux cgm2_mux2 =
-		S32GEN1_MUX_INIT(S32GEN1_CGM2, 2, 5,
-				 S32GEN1_CLK_FIRC,
-				 S32GEN1_CLK_PERIPH_PLL_PHI5,
-				 S32G_CLK_PFE_MAC1_EXT_TX,
-				 S32G_CLK_PFE_MAC1_EXT_REF,
-				 S32G_CLK_SERDES1_LANE1_TX);
-static struct s32gen1_clk cgm2_mux2_clk =
-		S32GEN1_MODULE_CLK(cgm2_mux2);
-static struct s32gen1_cgm_div cgm2_mux2_div =
-		S32GEN1_CGM_DIV_INIT(cgm2_mux2_clk, 0);
-static struct s32gen1_part_block pfe1_tx_block =
-		S32GEN1_PART_BLOCK_NO_STATUS(cgm2_mux2_div, 2,
-					     s32gen1_part_block1);
-static struct s32gen1_clk pfe_mac1_tx_clk =
-		S32GEN1_FREQ_MODULE_CLK(pfe1_tx_block, 2500000, 125 * MHZ);
-
-/* PFE_MAC1_REF_DIV */
-static struct s32gen1_mux cgm2_mux8 =
-		S32GEN1_MUX_INIT(S32GEN1_CGM2, 8, 2,
-				 S32GEN1_CLK_FIRC,
-				 S32G_CLK_PFE_MAC1_EXT_REF);
-static struct s32gen1_clk cgm2_mux8_clk =
-		S32GEN1_MODULE_CLK(cgm2_mux8);
-static struct s32gen1_cgm_div cgm2_mux8_div =
-		S32GEN1_CGM_DIV_INIT(cgm2_mux8_clk, 0);
-static struct s32gen1_part_block pfe1_ref_block =
-		S32GEN1_PART_BLOCK_NO_STATUS(cgm2_mux8_div, 2,
-					     s32gen1_part_block1);
-static struct s32gen1_clk pfe_mac1_ref_div_clk =
-		S32GEN1_FREQ_MODULE_CLK(pfe1_ref_block, 0, 50 * MHZ);
-
-/* PFE_MAC1_RX */
-static struct s32gen1_fixed_clock serdes1_lane1_cdr =
-		S32GEN1_FIXED_CLK_INIT();
-struct s32gen1_clk serdes1_lane1_cdr_clk =
-		S32GEN1_MODULE_CLK(serdes1_lane1_cdr);
-
-static struct s32gen1_fixed_clock pfe_mac1_ext_rx =
-		S32GEN1_FIXED_CLK_INIT();
-static struct s32gen1_clk pfe_mac1_ext_rx_clk =
-		S32GEN1_MODULE_CLK(pfe_mac1_ext_rx);
-
-static struct s32gen1_mux cgm2_mux5 =
-		S32GEN1_MUX_INIT(S32GEN1_CGM2, 5, 4,
-				 S32GEN1_CLK_FIRC,
-				 S32G_CLK_PFE_MAC1_EXT_RX,
-				 S32G_CLK_PFE_MAC1_REF_DIV,
-				 S32G_CLK_SERDES1_LANE1_CDR);
-static struct s32gen1_clk cgm2_mux5_clk =
-		S32GEN1_MODULE_CLK(cgm2_mux5);
-static struct s32gen1_part_block pfe1_rx_block =
-		S32GEN1_PART_BLOCK_NO_STATUS(cgm2_mux5_clk, 2,
-					     s32gen1_part_block1);
-static struct s32gen1_clk pfe_mac1_rx_clk =
-		S32GEN1_FREQ_MODULE_CLK(pfe1_rx_block, 2500000, 125 * MHZ);
-
-/* PFE_MAC2_TX */
-static struct s32gen1_fixed_clock serdes0_lane1_tx =
-		S32GEN1_FIXED_CLK_INIT();
-static struct s32gen1_clk serdes0_lane1_tx_clk =
-		S32GEN1_MODULE_CLK(serdes0_lane1_tx);
-
-static struct s32gen1_fixed_clock pfe_mac2_ext_tx =
-		S32GEN1_FIXED_CLK_INIT();
-static struct s32gen1_clk pfe_mac2_ext_tx_clk =
-		S32GEN1_MODULE_CLK(pfe_mac2_ext_tx);
-
-static struct s32gen1_fixed_clock pfe_mac2_ext_ref =
-		S32GEN1_FIXED_CLK_INIT();
-static struct s32gen1_clk pfe_mac2_ext_ref_clk =
-		S32GEN1_MODULE_CLK(pfe_mac2_ext_ref);
-
-static struct s32gen1_mux cgm2_mux3 =
-		S32GEN1_MUX_INIT(S32GEN1_CGM2, 3, 5,
-				 S32GEN1_CLK_FIRC,
-				 S32GEN1_CLK_PERIPH_PLL_PHI5,
-				 S32G_CLK_PFE_MAC2_EXT_TX,
-				 S32G_CLK_PFE_MAC2_EXT_REF,
-				 S32G_CLK_SERDES0_LANE1_TX);
-static struct s32gen1_clk cgm2_mux3_clk =
-		S32GEN1_MODULE_CLK(cgm2_mux3);
-static struct s32gen1_cgm_div cgm2_mux3_div =
-		S32GEN1_CGM_DIV_INIT(cgm2_mux3_clk, 0);
-static struct s32gen1_part_block pfe2_tx_block =
-		S32GEN1_PART_BLOCK_NO_STATUS(cgm2_mux3_div, 2,
-					     s32gen1_part_block2);
-static struct s32gen1_clk pfe_mac2_tx_clk =
-		S32GEN1_FREQ_MODULE_CLK(pfe2_tx_block, 2500000, 125 * MHZ);
-
-/* PFE_MAC2_REF_DIV */
-static struct s32gen1_mux cgm2_mux9 =
-		S32GEN1_MUX_INIT(S32GEN1_CGM2, 9, 2,
-				 S32GEN1_CLK_FIRC,
-				 S32G_CLK_PFE_MAC2_EXT_REF);
-static struct s32gen1_clk cgm2_mux9_clk =
-		S32GEN1_MODULE_CLK(cgm2_mux9);
-static struct s32gen1_cgm_div cgm2_mux9_div =
-		S32GEN1_CGM_DIV_INIT(cgm2_mux9_clk, 0);
-static struct s32gen1_part_block pfe2_ref_block =
-		S32GEN1_PART_BLOCK_NO_STATUS(cgm2_mux9_div, 2,
-					     s32gen1_part_block2);
-static struct s32gen1_clk pfe_mac2_ref_div_clk =
-		S32GEN1_FREQ_MODULE_CLK(pfe2_ref_block, 0, 50 * MHZ);
-
-/* PFE_MAC2_RX */
-static struct s32gen1_fixed_clock pfe_mac2_ext_rx =
-		S32GEN1_FIXED_CLK_INIT();
-static struct s32gen1_clk pfe_mac2_ext_rx_clk =
-		S32GEN1_MODULE_CLK(pfe_mac2_ext_rx);
-
-static struct s32gen1_fixed_clock serdes0_lane1_cdr =
-		S32GEN1_FIXED_CLK_INIT();
-static struct s32gen1_clk serdes0_lane1_cdr_clk =
-		S32GEN1_MODULE_CLK(serdes0_lane1_cdr);
-
-static struct s32gen1_mux cgm2_mux6 =
-		S32GEN1_MUX_INIT(S32GEN1_CGM2, 6, 4,
-				 S32GEN1_CLK_FIRC,
-				 S32G_CLK_PFE_MAC2_EXT_RX,
-				 S32G_CLK_PFE_MAC2_REF_DIV,
-				 S32G_CLK_SERDES0_LANE1_CDR);
-static struct s32gen1_clk cgm2_mux6_clk =
-		S32GEN1_MODULE_CLK(cgm2_mux6);
-static struct s32gen1_part_block pfe2_rx_block =
-		S32GEN1_PART_BLOCK_NO_STATUS(cgm2_mux6_clk, 2,
-					     s32gen1_part_block2);
-static struct s32gen1_clk pfe_mac2_rx_clk =
-		S32GEN1_FREQ_MODULE_CLK(pfe2_rx_block, 2500000, 125 * MHZ);
-
-/* PFE_SYS_CLK */
-static struct s32gen1_mux cgm2_mux0 =
-		S32GEN1_MUX_INIT(S32GEN1_CGM2, 0, 2,
-				 S32GEN1_CLK_FIRC,
-				 S32G_CLK_ACCEL_PLL_PHI1);
-static struct s32gen1_clk cgm2_mux0_clk =
-		S32GEN1_MODULE_CLK(cgm2_mux0);
-static struct s32gen1_cgm_div cgm2_mux0_div =
-		S32GEN1_CGM_DIV_INIT(cgm2_mux0_clk, 0);
-static struct s32gen1_part_block pfe_sys_block =
-		S32GEN1_PART_BLOCK_NO_STATUS(cgm2_mux0_div, 2,
-					     s32gen1_part_block3);
-static struct s32gen1_clk pfe_pe_clk =
-		S32GEN1_FREQ_MODULE_CLK(pfe_sys_block, 0, 600 * MHZ);
-static struct s32gen1_fixed_div pfe_sys_div =
-		S32GEN1_FIXED_DIV_INIT(pfe_sys_block, 2);
-static struct s32gen1_clk pfe_sys_clk =
-		S32GEN1_FREQ_MODULE_CLK(pfe_sys_div, 0, 300 * MHZ);
-
-static struct s32gen1_clk *s32g_clocks[] = {
-	/* PFE_MAC0 */
-	[ARR_CLK(S32G_CLK_PFE_MAC0_RX)] = &pfe_mac0_rx_clk,
-	[ARR_CLK(S32G_CLK_PFE_MAC0_TX_DIV)] = &pfe_mac0_tx_div_clk,
-	[ARR_CLK(S32G_CLK_MC_CGM2_MUX1)] = &cgm2_mux1_clk,
-	[ARR_CLK(S32G_CLK_MC_CGM2_MUX4)] = &cgm2_mux4_clk,
-	[ARR_CLK(S32G_CLK_MC_CGM2_MUX7)] = &cgm2_mux7_clk,
-	/* PFE_MAC1 */
-	[ARR_CLK(S32G_CLK_PFE_MAC1_RX)] = &pfe_mac1_rx_clk,
-	[ARR_CLK(S32G_CLK_PFE_MAC1_TX)] = &pfe_mac1_tx_clk,
-	[ARR_CLK(S32G_CLK_MC_CGM2_MUX2)] = &cgm2_mux2_clk,
-	[ARR_CLK(S32G_CLK_MC_CGM2_MUX5)] = &cgm2_mux5_clk,
-	[ARR_CLK(S32G_CLK_MC_CGM2_MUX8)] = &cgm2_mux8_clk,
-	/* PFE_MAC2 */
-	[ARR_CLK(S32G_CLK_PFE_MAC2_RX)] = &pfe_mac2_rx_clk,
-	[ARR_CLK(S32G_CLK_PFE_MAC2_TX)] = &pfe_mac2_tx_clk,
-	[ARR_CLK(S32G_CLK_MC_CGM2_MUX3)] = &cgm2_mux3_clk,
-	[ARR_CLK(S32G_CLK_MC_CGM2_MUX6)] = &cgm2_mux6_clk,
-	[ARR_CLK(S32G_CLK_MC_CGM2_MUX9)] = &cgm2_mux9_clk,
-	[ARR_CLK(S32G_CLK_MC_CGM2_MUX0)] = &cgm2_mux0_clk,
-	[ARR_CLK(S32G_CLK_PFE_SYS)] = &pfe_sys_clk,
-	[ARR_CLK(S32G_CLK_PFE_PE)] = &pfe_pe_clk,
-};
-
-static struct s32gen1_clk *s32g_cc_clocks[] = {
-	[CC_ARR_CLK(S32GEN1_CLK_PER)] = &per_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_CAN_PE)] = &can_pe_clk,
-	[CC_ARR_CLK(S32G_CLK_ACCEL_PLL_PHI0)] = &accel_pll_phi0_clk,
-	[CC_ARR_CLK(S32G_CLK_ACCEL_PLL_PHI1)] = &accel_pll_phi1_clk,
-	[CC_ARR_CLK(S32G_CLK_SERDES0_LANE1_CDR)] = &serdes0_lane1_cdr_clk,
-	[CC_ARR_CLK(S32G_CLK_SERDES0_LANE1_TX)] = &serdes0_lane1_tx_clk,
-	[CC_ARR_CLK(S32G_CLK_PFE_MAC0_EXT_TX)] = &pfe_mac0_ext_tx_clk,
-	[CC_ARR_CLK(S32G_CLK_PFE_MAC0_EXT_RX)] = &pfe_mac0_ext_rx_clk,
-	[CC_ARR_CLK(S32G_CLK_PFE_MAC0_EXT_REF)] = &pfe_mac0_ext_ref_clk,
-	[CC_ARR_CLK(S32G_CLK_PFE_MAC1_EXT_TX)] = &pfe_mac1_ext_tx_clk,
-	[CC_ARR_CLK(S32G_CLK_PFE_MAC1_EXT_RX)] = &pfe_mac1_ext_rx_clk,
-	[CC_ARR_CLK(S32G_CLK_PFE_MAC1_EXT_REF)] = &pfe_mac1_ext_ref_clk,
-	[CC_ARR_CLK(S32G_CLK_PFE_MAC2_EXT_TX)] = &pfe_mac2_ext_tx_clk,
-	[CC_ARR_CLK(S32G_CLK_PFE_MAC2_EXT_RX)] = &pfe_mac2_ext_rx_clk,
-	[CC_ARR_CLK(S32G_CLK_PFE_MAC2_EXT_REF)] = &pfe_mac2_ext_ref_clk,
-	[CC_ARR_CLK(S32G_CLK_SERDES1_LANE0_TX)] = &serdes1_lane0_tx_clk,
-	[CC_ARR_CLK(S32G_CLK_SERDES1_LANE0_CDR)] = &serdes1_lane0_cdr_clk,
-	[CC_ARR_CLK(S32G_CLK_PFE_MAC0_REF_DIV)] = &pfe_mac0_ref_div_clk,
-	[CC_ARR_CLK(S32G_CLK_PFE_MAC1_REF_DIV)] = &pfe_mac1_ref_div_clk,
-	[CC_ARR_CLK(S32G_CLK_PFE_MAC2_REF_DIV)] = &pfe_mac2_ref_div_clk,
-	[CC_ARR_CLK(S32G_CLK_SERDES1_LANE1_TX)] = &serdes1_lane1_tx_clk,
-	[CC_ARR_CLK(S32G_CLK_SERDES1_LANE1_CDR)] = &serdes1_lane1_cdr_clk,
-};
-
-struct s32gen1_clk *get_plat_cc_clock(uint32_t id)
-{
-	u32 index = s32gen1_platclk2mux(id);
-
-	if (index >= ARRAY_SIZE(s32g_cc_clocks) || !s32g_cc_clocks[index])
-		return s32g_get_plat_cc_clock(id);
-
-	return s32g_cc_clocks[index];
-}
-
-struct s32gen1_clk *get_plat_clock(uint32_t id)
-{
-	u32 index;
-
-	if (id < S32GEN1_PLAT_CLK_ID_BASE)
-		return NULL;
-
-	index = id - S32GEN1_PLAT_CLK_ID_BASE;
-
-	if (index >= ARRAY_SIZE(s32g_clocks) || !s32g_clocks[index])
-		return s32g_get_plat_clock(id);
-
-	return s32g_clocks[index];
-}
diff --git a/drivers/clk/s32/s32g_scmi_ids.c b/drivers/clk/s32/s32g_scmi_ids.c
deleted file mode 100644
index aa85932b69..0000000000
--- a/drivers/clk/s32/s32g_scmi_ids.c
+++ /dev/null
@@ -1,301 +0,0 @@
-// SPDX-License-Identifier: BSD-3-Clause
-/*
- * Copyright 2020-2021 NXP
- */
-#include <dt-bindings/clock/s32g-clock.h>
-#include <dt-bindings/clock/s32g-scmi-clock.h>
-#include <errno.h>
-#include <linux/kernel.h>
-#include <s32gen1_clk_funcs.h>
-#include <s32gen1_scmi_clk.h>
-
-#define INDEX(X)	((X) - S32GEN1_SCMI_PLAT_CLK_BASE_ID)
-
-static u32 s32g_scmi_ids[] = {
-	[INDEX(S32G_SCMI_CLK_USB_MEM)] = S32GEN1_CLK_XBAR_DIV4,
-	[INDEX(S32G_SCMI_CLK_USB_LOW)] = S32GEN1_CLK_SIRC,
-	[INDEX(S32G_SCMI_CLK_PFE_AXI)] = S32G_CLK_PFE_SYS,
-	[INDEX(S32G_SCMI_CLK_PFE_APB)] = S32G_CLK_PFE_SYS,
-	[INDEX(S32G_SCMI_CLK_PFE_PE)] = S32G_CLK_PFE_PE,
-	[INDEX(S32G_SCMI_CLK_PFE_TS)] = S32GEN1_CLK_GMAC0_TS,
-	/* PFE0 */
-	[INDEX(S32G_SCMI_CLK_PFE0_RX_SGMII)] = S32GEN1_SCMI_COMPLEX_CLK,
-	[INDEX(S32G_SCMI_CLK_PFE0_TX_SGMII)] = S32GEN1_SCMI_COMPLEX_CLK,
-	[INDEX(S32G_SCMI_CLK_PFE0_RX_RGMII)] = S32GEN1_SCMI_COMPLEX_CLK,
-	[INDEX(S32G_SCMI_CLK_PFE0_TX_RGMII)] = S32GEN1_SCMI_COMPLEX_CLK,
-	/* PFE1 */
-	[INDEX(S32G_SCMI_CLK_PFE1_RX_SGMII)] = S32GEN1_SCMI_COMPLEX_CLK,
-	[INDEX(S32G_SCMI_CLK_PFE1_TX_SGMII)] = S32GEN1_SCMI_COMPLEX_CLK,
-	[INDEX(S32G_SCMI_CLK_PFE1_RX_RGMII)] = S32GEN1_SCMI_COMPLEX_CLK,
-	[INDEX(S32G_SCMI_CLK_PFE1_TX_RGMII)] = S32GEN1_SCMI_COMPLEX_CLK,
-	/* PFE2 */
-	[INDEX(S32G_SCMI_CLK_PFE2_RX_SGMII)] = S32GEN1_SCMI_COMPLEX_CLK,
-	[INDEX(S32G_SCMI_CLK_PFE2_TX_SGMII)] = S32GEN1_SCMI_COMPLEX_CLK,
-	[INDEX(S32G_SCMI_CLK_PFE2_RX_RGMII)] = S32GEN1_SCMI_COMPLEX_CLK,
-	[INDEX(S32G_SCMI_CLK_PFE2_TX_RGMII)] = S32GEN1_SCMI_COMPLEX_CLK,
-	/* LLCE */
-	[INDEX(S32G_SCMI_CLK_LLCE_SYS)] = S32GEN1_CLK_XBAR_DIV2,
-	[INDEX(S32G_SCMI_CLK_LLCE_CAN_PE)] = S32GEN1_CLK_CAN_PE,
-};
-
-static int s32g_compound2clkid(u32 scmi_clk_id, u32 *clk_id)
-{
-	switch (scmi_clk_id) {
-	case S32G_SCMI_CLK_PFE0_RX_SGMII:
-	case S32G_SCMI_CLK_PFE0_RX_RGMII:
-		if (clk_id)
-			*clk_id = S32G_CLK_PFE_MAC0_RX;
-		break;
-	case S32G_SCMI_CLK_PFE0_TX_SGMII:
-	case S32G_SCMI_CLK_PFE0_TX_RGMII:
-		if (clk_id)
-			*clk_id = S32G_CLK_PFE_MAC0_TX_DIV;
-		break;
-	case S32G_SCMI_CLK_PFE1_RX_SGMII:
-	case S32G_SCMI_CLK_PFE1_RX_RGMII:
-		if (clk_id)
-			*clk_id = S32G_CLK_PFE_MAC1_RX;
-		break;
-	case S32G_SCMI_CLK_PFE1_TX_SGMII:
-	case S32G_SCMI_CLK_PFE1_TX_RGMII:
-		if (clk_id)
-			*clk_id = S32G_CLK_PFE_MAC1_TX;
-		break;
-	case S32G_SCMI_CLK_PFE2_RX_SGMII:
-	case S32G_SCMI_CLK_PFE2_RX_RGMII:
-		if (clk_id)
-			*clk_id = S32G_CLK_PFE_MAC2_RX;
-		break;
-	case S32G_SCMI_CLK_PFE2_TX_SGMII:
-	case S32G_SCMI_CLK_PFE2_TX_RGMII:
-		if (clk_id)
-			*clk_id = S32G_CLK_PFE_MAC2_TX;
-		break;
-	default:
-		return -EINVAL;
-	}
-
-	return 0;
-}
-
-int plat_scmi_id2clk(u32 scmi_clk_id, u32 *clk_id)
-{
-	if (!clk_id)
-		return -EINVAL;
-
-	if (INDEX(scmi_clk_id) >= ARRAY_SIZE(s32g_scmi_ids))
-		return -EINVAL;
-
-	*clk_id = s32g_scmi_ids[INDEX(scmi_clk_id)];
-	if (!*clk_id) {
-		pr_err("Unhandled clock: %u\n", scmi_clk_id);
-		return -EINVAL;
-	}
-
-	return 0;
-}
-
-int plat_compound_clk_get(struct clk *clk)
-{
-	u32 scmi_clk_id = clk->id;
-
-	if (INDEX(scmi_clk_id) >= ARRAY_SIZE(s32g_scmi_ids))
-		return -EINVAL;
-
-	if (s32g_compound2clkid(scmi_clk_id, NULL)) {
-		pr_err("Invalid compound clock : %u\n", scmi_clk_id);
-		return -EINVAL;
-	}
-
-	return 0;
-}
-
-static int set_mac0_rx_parent(struct clk *clk)
-{
-	u32 rx_id;
-	u32 clk_id = clk->id;
-
-	if (clk_id == S32G_SCMI_CLK_PFE0_RX_SGMII) {
-		rx_id = S32G_CLK_SERDES1_LANE0_CDR;
-	} else if (clk_id == S32G_SCMI_CLK_PFE0_RX_RGMII) {
-		rx_id = S32G_CLK_PFE_MAC0_EXT_RX;
-	} else {
-		pr_err("Invalid PFE0 RX mode\n");
-		return -EINVAL;
-	}
-
-	return cc_set_mux_parent(clk, S32G_CLK_MC_CGM2_MUX4, rx_id);
-}
-
-static int set_mac0_tx_parent(struct clk *clk)
-{
-	u32 tx_id;
-	u32 clk_id = clk->id;
-
-	if (clk_id == S32G_SCMI_CLK_PFE0_TX_SGMII) {
-		tx_id = S32G_CLK_SERDES1_LANE0_TX;
-	} else if (clk_id == S32G_SCMI_CLK_PFE0_TX_RGMII) {
-		tx_id = S32GEN1_CLK_PERIPH_PLL_PHI5;
-	} else {
-		pr_err("Invalid PFE0 TX mode\n");
-		return -EINVAL;
-	}
-
-	return cc_set_mux_parent(clk, S32G_CLK_MC_CGM2_MUX1, tx_id);
-}
-
-static int set_mac1_rx_parent(struct clk *clk)
-{
-	u32 rx_id;
-	u32 clk_id = clk->id;
-
-	if (clk_id == S32G_SCMI_CLK_PFE1_RX_SGMII) {
-		rx_id = S32G_CLK_SERDES1_LANE1_CDR;
-	} else if (clk_id == S32G_SCMI_CLK_PFE1_RX_RGMII) {
-		rx_id = S32G_CLK_PFE_MAC1_EXT_RX;
-	} else {
-		pr_err("Invalid PFE1 RX mode\n");
-		return -EINVAL;
-	}
-
-	return cc_set_mux_parent(clk, S32G_CLK_MC_CGM2_MUX5, rx_id);
-}
-
-static int set_mac1_tx_parent(struct clk *clk)
-{
-	u32 tx_id;
-	u32 clk_id = clk->id;
-
-	if (clk_id == S32G_SCMI_CLK_PFE1_TX_SGMII) {
-		tx_id = S32G_CLK_SERDES1_LANE1_TX;
-	} else if (clk_id == S32G_SCMI_CLK_PFE1_TX_RGMII) {
-		tx_id = S32GEN1_CLK_PERIPH_PLL_PHI5;
-	} else {
-		pr_err("Invalid PFE1 TX mode\n");
-		return -EINVAL;
-	}
-
-	return cc_set_mux_parent(clk, S32G_CLK_MC_CGM2_MUX2, tx_id);
-}
-
-static int set_mac2_rx_parent(struct clk *clk)
-{
-	u32 rx_id;
-	u32 clk_id = clk->id;
-
-	if (clk_id == S32G_SCMI_CLK_PFE2_RX_SGMII) {
-		rx_id = S32G_CLK_SERDES0_LANE1_CDR;
-	} else if (clk_id == S32G_SCMI_CLK_PFE2_RX_RGMII) {
-		rx_id = S32G_CLK_PFE_MAC2_EXT_RX;
-	} else {
-		pr_err("Invalid PFE2 RX mode\n");
-		return -EINVAL;
-	}
-
-	return cc_set_mux_parent(clk, S32G_CLK_MC_CGM2_MUX6, rx_id);
-}
-
-static int set_mac2_tx_parent(struct clk *clk)
-{
-	u32 tx_id;
-	u32 clk_id = clk->id;
-
-	if (clk_id == S32G_SCMI_CLK_PFE2_TX_SGMII) {
-		tx_id = S32G_CLK_SERDES0_LANE1_TX;
-	} else if (clk_id == S32G_SCMI_CLK_PFE2_TX_RGMII) {
-		tx_id = S32GEN1_CLK_PERIPH_PLL_PHI5;
-	} else {
-		pr_err("Invalid PFE2 TX mode\n");
-		return -EINVAL;
-	}
-
-	return cc_set_mux_parent(clk, S32G_CLK_MC_CGM2_MUX3, tx_id);
-}
-
-int plat_compound_clk_set_parents(struct clk *clk)
-{
-	u32 clk_id = clk->id;
-	u32 id;
-
-	if (s32g_compound2clkid(clk_id, &id)) {
-		pr_err("Invalid compound clock : %u\n", clk_id);
-		return -EINVAL;
-	}
-
-	switch (id) {
-	case S32G_CLK_PFE_MAC0_TX_DIV:
-		return set_mac0_tx_parent(clk);
-	case S32G_CLK_PFE_MAC0_RX:
-		return set_mac0_rx_parent(clk);
-	case S32G_CLK_PFE_MAC1_TX:
-		return set_mac1_tx_parent(clk);
-	case S32G_CLK_PFE_MAC1_RX:
-		return set_mac1_rx_parent(clk);
-	case S32G_CLK_PFE_MAC2_TX:
-		return set_mac2_tx_parent(clk);
-	case S32G_CLK_PFE_MAC2_RX:
-		return set_mac2_rx_parent(clk);
-	default:
-		pr_err("%s: Invalid clock %d\n", __func__, id);
-		return -EINVAL;
-	}
-}
-
-int plat_compound_clk_enable(struct clk *clk)
-{
-	struct clk sclock = *clk;
-	u32 clk_id = clk->id;
-	u32 id;
-	int ret;
-
-	if (s32g_compound2clkid(clk_id, &id)) {
-		pr_err("Invalid s32g compound clock : %u\n", clk_id);
-		return -EINVAL;
-	}
-
-	ret = plat_compound_clk_set_parents(clk);
-	if (ret) {
-		pr_err("Failed to set parents for %u\n", clk_id);
-		return -EINVAL;
-	}
-
-	sclock.id = id;
-	ret = s32gen1_enable(&sclock);
-	if (ret) {
-		pr_err("Failed to enable %u clock\n", clk_id);
-		return ret;
-	}
-
-	return 0;
-}
-
-ulong plat_compound_clk_set_rate(struct clk *clk, ulong rate)
-{
-	struct clk sclock = *clk;
-	u32 scmi_clk_id = clk->id;
-	u32 id;
-	int ret;
-
-	if (INDEX(scmi_clk_id) >= ARRAY_SIZE(s32g_scmi_ids))
-		return -EINVAL;
-
-	ret = plat_compound_clk_set_parents(clk);
-	if (ret) {
-		pr_err("Failed to set parents for %u\n", scmi_clk_id);
-		return -EINVAL;
-	}
-
-	if (s32g_compound2clkid(scmi_clk_id, &id)) {
-		pr_err("Invalid compound clock : %u\n", scmi_clk_id);
-		return -EINVAL;
-	}
-
-	sclock.id = id;
-	return s32gen1_set_rate(&sclock, rate);
-}
-
-ulong plat_compound_clk_get_rate(struct clk *clk)
-{
-	return 0;
-}
-
diff --git a/drivers/clk/s32/s32gen1_clk.c b/drivers/clk/s32/s32gen1_clk.c
deleted file mode 100644
index a7c02492b3..0000000000
--- a/drivers/clk/s32/s32gen1_clk.c
+++ /dev/null
@@ -1,600 +0,0 @@
-// SPDX-License-Identifier: BSD-3-Clause
-/*
- * Copyright 2020-2021 NXP
- */
-#include <asm/arch/siul.h>
-#include <dt-bindings/clock/s32gen1-clock.h>
-#include <dt-bindings/clock/s32gen1-scmi-clock.h>
-#include <s32gen1_clk_funcs.h>
-#include <s32gen1_clk_modules.h>
-#include <s32gen1_shared_clks.h>
-
-/* Clock generation modules */
-static struct s32gen1_osc fxosc =
-		S32GEN1_OSC_INIT(S32GEN1_FXOSC);
-static struct s32gen1_osc firc =
-		S32GEN1_OSC_INIT(S32GEN1_FIRC);
-static struct s32gen1_osc sirc =
-		S32GEN1_OSC_INIT(S32GEN1_SIRC);
-
-/* Muxes */
-static struct s32gen1_mux arm_pll_mux =
-	S32GEN1_MUX_INIT(S32GEN1_ARM_PLL, 0, 2,
-			 S32GEN1_CLK_FIRC,
-			 S32GEN1_CLK_FXOSC);
-
-static struct s32gen1_mux cgm1_mux0 =
-	S32GEN1_SHARED_MUX_INIT(S32GEN1_CGM1, 0, 3,
-				S32GEN1_CLK_FIRC,
-				S32GEN1_CLK_ARM_PLL_PHI0,
-				S32GEN1_CLK_ARM_PLL_DFS2);
-
-static struct s32gen1_mux cgm0_mux0 =
-	S32GEN1_SHARED_MUX_INIT(S32GEN1_CGM0, 0, 2,
-				S32GEN1_CLK_FIRC,
-				S32GEN1_CLK_ARM_PLL_DFS1);
-
-/* Static part of the clock tree */
-
-static struct s32gen1_clk firc_clk =
-		S32GEN1_MODULE_CLK(firc);
-static struct s32gen1_clk fxosc_clk =
-		S32GEN1_MODULE_CLK(fxosc);
-static struct s32gen1_clk sirc_clk =
-		S32GEN1_MODULE_CLK(sirc);
-
-/* ARM PLL */
-static struct s32gen1_clk arm_pll_mux_clk =
-		S32GEN1_MODULE_CLK(arm_pll_mux);
-
-static struct s32gen1_pll armpll = {
-	.desc = {
-		.type = s32gen1_pll_t,
-	},
-	.ndividers = 2,
-	.source = &arm_pll_mux_clk.desc,
-	.instance = S32GEN1_ARM_PLL,
-};
-
-static struct s32gen1_clk arm_pll_vco_clk =
-		S32GEN1_FREQ_MODULE_CLK(armpll, 1300 * MHZ,
-					S32GEN1_ARM_PLL_VCO_MAX_FREQ);
-static struct s32gen1_pll_out_div arm_pll_phi0_div =
-		S32GEN1_PLL_OUT_DIV_INIT(armpll, 0);
-static struct s32gen1_clk arm_pll_phi0_clk =
-		S32GEN1_FREQ_MODULE_CLK(arm_pll_phi0_div, 0,
-					S32GEN1_ARM_PLL_PHI0_MAX_FREQ);
-
-/* ARM DFS */
-struct s32gen1_dfs armdfs = {
-	.desc = {
-		.type = s32gen1_dfs_t,
-	},
-	.source = &armpll.desc,
-	.instance = S32GEN1_ARM_DFS,
-};
-
-static struct s32gen1_dfs_div arm_dfs1_div =
-		S32GEN1_DFS_DIV_INIT(armdfs, 0);
-static struct s32gen1_clk arm_dfs1_clk =
-		S32GEN1_FREQ_MODULE_CLK(arm_dfs1_div, 0, 800 * MHZ);
-
-static struct s32gen1_dfs_div arm_dfs2_div =
-		S32GEN1_DFS_DIV_INIT(armdfs, 1);
-static struct s32gen1_clk arm_dfs2_clk =
-		S32GEN1_FREQ_MODULE_CLK(arm_dfs2_div, 0, 800 * MHZ);
-
-/* Peripherals' clocks */
-
-/* ARM - MC_CGM_1 */
-static struct s32gen1_clk cgm1_mux0_clk =
-		S32GEN1_MODULE_CLK(cgm1_mux0);
-
-/* A53_CORE */
-static struct s32gen1_clk a53_core_clk =
-		S32GEN1_FREQ_MODULE_CLK(cgm1_mux0_clk, 0,
-					S32GEN1_A53_MAX_FREQ);
-
-/* A53_CORE_DIV2 */
-static struct s32gen1_fixed_div a53_core_div2 =
-		S32GEN1_FIXED_DIV_INIT(cgm1_mux0_clk, 2);
-static struct s32gen1_clk a53_core_div2_clk =
-		S32GEN1_FREQ_MODULE_CLK(a53_core_div2, 0,
-					S32GEN1_A53_MAX_FREQ / 2);
-/* A53_CORE_DIV10 */
-static struct s32gen1_fixed_div a53_core_div10 =
-		S32GEN1_FIXED_DIV_INIT(cgm1_mux0_clk, 10);
-static struct s32gen1_clk a53_core_div10_clk =
-		S32GEN1_FREQ_MODULE_CLK(a53_core_div10, 0,
-					S32GEN1_A53_MAX_FREQ / 10);
-
-/* ARM - MC_CGM_0 */
-struct s32gen1_clk cgm0_mux0_clk =
-		S32GEN1_MODULE_CLK(cgm0_mux0);
-/* XBAR */
-static struct s32gen1_fixed_div xbar_div2 =
-		S32GEN1_FIXED_DIV_INIT(cgm0_mux0_clk, 2);
-static struct s32gen1_clk xbar_clk =
-		S32GEN1_FREQ_MODULE_CLK(xbar_div2, 24 * MHZ, 400 * MHZ);
-/* XBAR_DIV2 */
-static struct s32gen1_fixed_div xbar_div4 =
-		S32GEN1_FIXED_DIV_INIT(cgm0_mux0_clk, 4);
-static struct s32gen1_clk xbar_div2_clk =
-		S32GEN1_FREQ_MODULE_CLK(xbar_div4, 12 * MHZ, 200 * MHZ);
-/* XBAR_DIV3 */
-static struct s32gen1_fixed_div xbar_div6 =
-		S32GEN1_FIXED_DIV_INIT(cgm0_mux0_clk, 6);
-static struct s32gen1_clk xbar_div3_clk =
-		S32GEN1_FREQ_MODULE_CLK(xbar_div6, 8 * MHZ, 133333333);
-/* XBAR_DIV4 */
-static struct s32gen1_fixed_div xbar_div8 =
-		S32GEN1_FIXED_DIV_INIT(cgm0_mux0_clk, 8);
-static struct s32gen1_clk xbar_div4_clk =
-		S32GEN1_FREQ_MODULE_CLK(xbar_div8, 6 * MHZ, 100 * MHZ);
-/* XBAR_DIV6 */
-static struct s32gen1_fixed_div xbar_div12 =
-		S32GEN1_FIXED_DIV_INIT(cgm0_mux0_clk, 12);
-static struct s32gen1_clk xbar_div6_clk =
-		S32GEN1_FREQ_MODULE_CLK(xbar_div12, 4 * MHZ, 66666666);
-
-/* PERIPH PLL */
-static struct s32gen1_mux periph_pll_mux =
-	S32GEN1_MUX_INIT(S32GEN1_PERIPH_PLL, 0, 2,
-			 S32GEN1_CLK_FIRC,
-			 S32GEN1_CLK_FXOSC);
-static struct s32gen1_clk periph_pll_mux_clk =
-		S32GEN1_MODULE_CLK(periph_pll_mux);
-
-static struct s32gen1_pll periphpll = {
-	.desc = {
-		.type = s32gen1_pll_t,
-	},
-	.ndividers = 8,
-	.source = &periph_pll_mux_clk.desc,
-	.instance = S32GEN1_PERIPH_PLL,
-};
-
-static struct s32gen1_clk periph_pll_vco_clk =
-		S32GEN1_FREQ_MODULE_CLK(periphpll, 1300 * MHZ, 2000 * MHZ);
-
-static struct s32gen1_pll_out_div periph_pll_phi0_div =
-		S32GEN1_PLL_OUT_DIV_INIT(periphpll, 0);
-static struct s32gen1_clk periph_pll_phi0_clk =
-		S32GEN1_FREQ_MODULE_CLK(periph_pll_phi0_div,
-					S32GEN1_PERIPH_PLL_PHI0_MIN_FREQ,
-					125 * MHZ);
-
-static struct s32gen1_pll_out_div periph_pll_phi1_div =
-		S32GEN1_PLL_OUT_DIV_INIT(periphpll, 1);
-static struct s32gen1_clk periph_pll_phi1_clk =
-		S32GEN1_FREQ_MODULE_CLK(periph_pll_phi1_div, 0, 80 * MHZ);
-
-static struct s32gen1_pll_out_div periph_pll_phi2_div =
-		S32GEN1_PLL_OUT_DIV_INIT(periphpll, 2);
-static struct s32gen1_clk periph_pll_phi2_clk =
-		S32GEN1_FREQ_MODULE_CLK(periph_pll_phi2_div,
-					S32GEN1_PERIPH_PLL_PHI2_MIN_FREQ,
-					80 * MHZ);
-
-static struct s32gen1_pll_out_div periph_pll_phi3_div =
-		S32GEN1_PLL_OUT_DIV_INIT(periphpll, 3);
-static struct s32gen1_clk periph_pll_phi3_clk =
-		S32GEN1_FREQ_MODULE_CLK(periph_pll_phi3_div, 0, 133333333);
-
-static struct s32gen1_pll_out_div periph_pll_phi4_div =
-		S32GEN1_PLL_OUT_DIV_INIT(periphpll, 4);
-static struct s32gen1_clk periph_pll_phi4_clk =
-		S32GEN1_FREQ_MODULE_CLK(periph_pll_phi4_div, 0, 200 * MHZ);
-
-static struct s32gen1_pll_out_div periph_pll_phi5_div =
-		S32GEN1_PLL_OUT_DIV_INIT(periphpll, 5);
-static struct s32gen1_clk periph_pll_phi5_clk =
-		S32GEN1_FREQ_MODULE_CLK(periph_pll_phi5_div, 0, 500 * MHZ);
-
-static struct s32gen1_pll_out_div periph_pll_phi7_div =
-		S32GEN1_PLL_OUT_DIV_INIT(periphpll, 7);
-static struct s32gen1_clk periph_pll_phi7_clk =
-		S32GEN1_FREQ_MODULE_CLK(periph_pll_phi7_div, 0, 100 * MHZ);
-
-/* PERIPH DFS */
-static struct s32gen1_dfs periphdfs = {
-	.desc = {
-		.type = s32gen1_dfs_t,
-	},
-	.source = &periphpll.desc,
-	.instance = S32GEN1_PERIPH_DFS,
-};
-
-static struct s32gen1_dfs_div periph_dfs1_div =
-		S32GEN1_DFS_DIV_INIT(periphdfs, 0);
-static struct s32gen1_clk periph_dfs1_clk =
-		S32GEN1_FREQ_MODULE_CLK(periph_dfs1_div, 532 * MHZ, 800 * MHZ);
-
-static struct s32gen1_dfs_div periph_dfs2_div =
-		S32GEN1_DFS_DIV_INIT(periphdfs, 1);
-static struct s32gen1_clk periph_dfs2_clk =
-		S32GEN1_FREQ_MODULE_CLK(periph_dfs2_div, 0, 800 * MHZ);
-
-static struct s32gen1_dfs_div periph_dfs3_div =
-		S32GEN1_DFS_DIV_INIT(periphdfs, 2);
-static struct s32gen1_clk periph_dfs3_clk =
-		S32GEN1_FREQ_MODULE_CLK(periph_dfs3_div, 416 * MHZ, 800 * MHZ);
-
-static struct s32gen1_dfs_div periph_dfs5_div =
-		S32GEN1_DFS_DIV_INIT(periphdfs, 4);
-static struct s32gen1_clk periph_dfs5_clk =
-		S32GEN1_FREQ_MODULE_CLK(periph_dfs5_div, 0, 800 * MHZ);
-
-/* PERIPH - CGM0 */
-/* SERDES_REF_CLK */
-static struct s32gen1_clk serdes_ref_clk =
-		S32GEN1_CHILD_CLK(periph_pll_phi0_clk, 100 * MHZ, 125 * MHZ);
-
-/* PER_CLK */
-static struct s32gen1_mux cgm0_mux3 =
-		S32GEN1_MUX_INIT(S32GEN1_CGM0, 3, 2,
-				 S32GEN1_CLK_FIRC,
-				 S32GEN1_CLK_PERIPH_PLL_PHI1);
-static struct s32gen1_clk cgm0_mux3_clk =
-		S32GEN1_MODULE_CLK(cgm0_mux3);
-struct s32gen1_cgm_div per_div =
-		S32GEN1_CGM_DIV_INIT(cgm0_mux3_clk, 0);
-
-/* FTM_0_REF_CLK */
-static struct s32gen1_fixed_clock ftm0_ext =
-		S32GEN1_FIXED_CLK_INIT();
-static struct s32gen1_clk ftm0_ext_clk =
-		S32GEN1_MODULE_CLK(ftm0_ext);
-static struct s32gen1_mux cgm0_mux4 =
-		S32GEN1_MUX_INIT(S32GEN1_CGM0, 4, 3,
-				 S32GEN1_CLK_FIRC,
-				 S32GEN1_CLK_PERIPH_PLL_PHI1,
-				 S32GEN1_CLK_FTM0_EXT_REF);
-static struct s32gen1_clk cgm0_mux4_clk =
-		S32GEN1_MODULE_CLK(cgm0_mux4);
-static struct s32gen1_cgm_div ftm0_div =
-		S32GEN1_CGM_DIV_INIT(cgm0_mux4_clk, 0);
-static struct s32gen1_clk ftm0_ref_clk =
-		S32GEN1_FREQ_MODULE_CLK(ftm0_div, 0, 40 * MHZ);
-
-/* FTM_1_REF_CLK */
-static struct s32gen1_fixed_clock ftm1_ext =
-		S32GEN1_FIXED_CLK_INIT();
-static struct s32gen1_clk ftm1_ext_clk =
-		S32GEN1_MODULE_CLK(ftm1_ext);
-static struct s32gen1_mux cgm0_mux5 =
-		S32GEN1_MUX_INIT(S32GEN1_CGM0, 5, 3,
-				 S32GEN1_CLK_FIRC,
-				 S32GEN1_CLK_PERIPH_PLL_PHI1,
-				 S32GEN1_CLK_FTM1_EXT_REF);
-static struct s32gen1_clk cgm0_mux5_clk =
-		S32GEN1_MODULE_CLK(cgm0_mux5);
-static struct s32gen1_cgm_div ftm1_div =
-		S32GEN1_CGM_DIV_INIT(cgm0_mux5_clk, 0);
-static struct s32gen1_clk ftm1_ref_clk =
-		S32GEN1_FREQ_MODULE_CLK(ftm1_div, 0, 40 * MHZ);
-
-/* FLEXRAY_PE_CLK */
-static struct s32gen1_mux cgm0_mux6 =
-		S32GEN1_MUX_INIT(S32GEN1_CGM0, 6, 3,
-				 S32GEN1_CLK_FIRC,
-				 S32GEN1_CLK_PERIPH_PLL_PHI1,
-				 S32GEN1_CLK_FXOSC);
-static struct s32gen1_clk cgm0_mux6_clk =
-		S32GEN1_MODULE_CLK(cgm0_mux6);
-static struct s32gen1_cgm_div flexray_pe_div =
-		S32GEN1_CGM_DIV_INIT(cgm0_mux6_clk, 0);
-static struct s32gen1_clk flexray_pe_clk =
-		S32GEN1_FREQ_MODULE_CLK(flexray_pe_div, 0, 40 * MHZ);
-
-/* CAN_PE_CLK */
-static struct s32gen1_mux cgm0_mux7 =
-		S32GEN1_MUX_INIT(S32GEN1_CGM0, 7, 3,
-				 S32GEN1_CLK_FIRC,
-				 S32GEN1_CLK_PERIPH_PLL_PHI2,
-				 S32GEN1_CLK_FXOSC);
-struct s32gen1_clk cgm0_mux7_clk =
-		S32GEN1_MODULE_CLK(cgm0_mux7);
-
-/* LIN_BAUD_CLK */
-static struct s32gen1_mux cgm0_mux8 =
-		S32GEN1_MUX_INIT(S32GEN1_CGM0, 8, 3,
-				 S32GEN1_CLK_FIRC,
-				 S32GEN1_CLK_PERIPH_PLL_PHI3,
-				 S32GEN1_CLK_FXOSC);
-static struct s32gen1_clk cgm0_mux8_clk =
-		S32GEN1_MODULE_CLK(cgm0_mux8);
-static struct s32gen1_clk lin_baud_clk =
-		S32GEN1_CHILD_CLK(cgm0_mux8_clk, 0, 133333333);
-
-static struct s32gen1_fixed_div linflexd_div =
-		S32GEN1_FIXED_DIV_INIT(lin_baud_clk, 2);
-static struct s32gen1_clk linflexd_clk =
-		S32GEN1_FREQ_MODULE_CLK(linflexd_div, 0, 66666666);
-
-/* S32GEN1_CLK_SERDES0_LANE0_TX */
-static struct s32gen1_fixed_clock serdes0_lane0_tx =
-		S32GEN1_FIXED_CLK_INIT();
-static struct s32gen1_clk serdes0_lane0_tx_clk =
-		S32GEN1_MODULE_CLK(serdes0_lane0_tx);
-
-static struct s32gen1_fixed_clock serdes0_lane0_cdr =
-		S32GEN1_FIXED_CLK_INIT();
-static struct s32gen1_clk serdes0_lane0_cdr_clk =
-		S32GEN1_MODULE_CLK(serdes0_lane0_cdr);
-
-/* S32GEN1_CLK_SERDES1_LANE0_TX */
-static struct s32gen1_fixed_clock serdes1_lane0_tx =
-		S32GEN1_FIXED_CLK_INIT();
-struct s32gen1_clk serdes1_lane0_tx_clk =
-		S32GEN1_MODULE_CLK(serdes1_lane0_tx);
-static struct s32gen1_fixed_clock serdes1_lane0_cdr =
-		S32GEN1_FIXED_CLK_INIT();
-struct s32gen1_clk serdes1_lane0_cdr_clk =
-		S32GEN1_MODULE_CLK(serdes1_lane0_cdr);
-
-/* SPI_CLK */
-static struct s32gen1_mux cgm0_mux16 =
-		S32GEN1_MUX_INIT(S32GEN1_CGM0, 16, 2,
-				 S32GEN1_CLK_FIRC,
-				 S32GEN1_CLK_PERIPH_PLL_PHI7);
-static struct s32gen1_clk cgm0_mux16_clk =
-		S32GEN1_MODULE_CLK(cgm0_mux16);
-static struct s32gen1_clk spi_clk =
-		S32GEN1_CHILD_CLK(cgm0_mux16_clk, 10 * MHZ, 100 * MHZ);
-
-/* QSPI_CLK */
-static struct s32gen1_mux cgm0_mux12 =
-		S32GEN1_SHARED_MUX_INIT(S32GEN1_CGM0, 12, 2,
-					S32GEN1_CLK_FIRC,
-					S32GEN1_CLK_PERIPH_PLL_DFS1);
-static struct s32gen1_clk cgm0_mux12_clk =
-		S32GEN1_MODULE_CLK(cgm0_mux12);
-static struct s32gen1_cgm_div qspi_div =
-		S32GEN1_CGM_DIV_INIT(cgm0_mux12_clk, 0);
-static struct s32gen1_clk qspi_2x_clk =
-		S32GEN1_FREQ_MODULE_CLK(qspi_div, 0, S32GEN1_QSPI_MAX_FREQ * 2);
-static struct s32gen1_fixed_div qspi_div2 =
-		S32GEN1_FIXED_DIV_INIT(qspi_2x_clk, 2);
-static struct s32gen1_clk qspi_clk =
-		S32GEN1_FREQ_MODULE_CLK(qspi_div2, 0, S32GEN1_QSPI_MAX_FREQ);
-
-/* SDHC_CLK */
-static struct s32gen1_mux cgm0_mux14 =
-		S32GEN1_MUX_INIT(S32GEN1_CGM0, 14, 2,
-				 S32GEN1_CLK_FIRC,
-				 S32GEN1_CLK_PERIPH_PLL_DFS3);
-static struct s32gen1_clk cgm0_mux14_clk =
-		S32GEN1_MODULE_CLK(cgm0_mux14);
-static struct s32gen1_cgm_div sdhc_div =
-		S32GEN1_CGM_DIV_INIT(cgm0_mux14_clk, 0);
-static struct s32gen1_part_block sdhc_block =
-		S32GEN1_PART_BLOCK(sdhc_div, 0, s32gen1_part_block0);
-static struct s32gen1_clk sdhc_clk =
-		S32GEN1_FREQ_MODULE_CLK(sdhc_block, 0, 400 * MHZ);
-
-/* DDR PLL */
-static struct s32gen1_mux ddr_pll_mux =
-	S32GEN1_MUX_INIT(S32GEN1_DDR_PLL, 0, 2,
-			 S32GEN1_CLK_FIRC,
-			 S32GEN1_CLK_FXOSC);
-static struct s32gen1_clk ddr_pll_mux_clk =
-		S32GEN1_MODULE_CLK(ddr_pll_mux);
-
-static struct s32gen1_pll ddrpll = {
-	.desc = {
-		.type = s32gen1_pll_t,
-	},
-	.ndividers = 1,
-	.source = &ddr_pll_mux_clk.desc,
-	.instance = S32GEN1_DDR_PLL,
-};
-
-static struct s32gen1_clk ddr_pll_vco_clk =
-		S32GEN1_FREQ_MODULE_CLK(ddrpll, 1300 * MHZ, 1600 * MHZ);
-
-static struct s32gen1_pll_out_div ddr_pll_phi0_div =
-		S32GEN1_PLL_OUT_DIV_INIT(ddrpll, 0);
-static struct s32gen1_clk ddr_pll_phi0_clk =
-		S32GEN1_FREQ_MODULE_CLK(ddr_pll_phi0_div, 0, 800 * MHZ);
-
-/* DDR_CLK */
-static struct s32gen1_mux cgm5_mux0 =
-		S32GEN1_MUX_INIT(S32GEN1_CGM5, 0, 2,
-				 S32GEN1_CLK_FIRC,
-				 S32GEN1_CLK_DDR_PLL_PHI0);
-static struct s32gen1_clk cgm5_mux0_clk =
-		S32GEN1_MODULE_CLK(cgm5_mux0);
-static struct s32gen1_part_block ddr_block =
-		S32GEN1_PART_BLOCK(cgm5_mux0_clk, 0, s32gen1_part_block1);
-static struct s32gen1_clk ddr_clk =
-		S32GEN1_FREQ_MODULE_CLK(ddr_block, 0, 800 * MHZ);
-
-/* ACCEL PLL */
-static struct s32gen1_mux accel_pll_mux =
-	S32GEN1_MUX_INIT(S32GEN1_ACCEL_PLL, 0, 2,
-			 S32GEN1_CLK_FIRC,
-			 S32GEN1_CLK_FXOSC);
-static struct s32gen1_clk accel_pll_mux_clk =
-		S32GEN1_MODULE_CLK(accel_pll_mux);
-
-static struct s32gen1_pll accelpll = {
-	.desc = {
-		.type = s32gen1_pll_t,
-	},
-	.ndividers = 2,
-	.source = &accel_pll_mux_clk.desc,
-	.instance = S32GEN1_ACCEL_PLL,
-};
-
-static struct s32gen1_clk accel_pll_vco_clk =
-		S32GEN1_FREQ_MODULE_CLK(accelpll, 1300 * MHZ, 2400 * MHZ);
-
-static struct s32gen1_pll_out_div accel_pll_phi0_div =
-		S32GEN1_PLL_OUT_DIV_INIT(accelpll, 0);
-struct s32gen1_clk accel_pll_phi0_clk =
-		S32GEN1_FREQ_MODULE_CLK(accel_pll_phi0_div, 0, 600 * MHZ);
-static struct s32gen1_pll_out_div accel_pll_phi1_div =
-		S32GEN1_PLL_OUT_DIV_INIT(accelpll, 1);
-struct s32gen1_clk accel_pll_phi1_clk =
-		S32GEN1_FREQ_MODULE_CLK(accel_pll_phi1_div, 0, 600 * MHZ);
-
-/* CLKOUT */
-static struct s32gen1_mux cgm0_mux1 =
-		S32GEN1_MUX_INIT(S32GEN1_CGM0, 1, 4,
-				 S32GEN1_CLK_FXOSC,
-				 S32GEN1_CLK_PERIPH_PLL_PHI0,
-				 S32GEN1_CLK_PERIPH_PLL_DFS2,
-				 S32GEN1_CLK_PERIPH_PLL_DFS5);
-static struct s32gen1_clk cgm0_mux1_clk =
-		S32GEN1_MODULE_CLK(cgm0_mux1);
-static struct s32gen1_cgm_div clkout0_div =
-		S32GEN1_CGM_DIV_INIT(cgm0_mux1_clk, 0);
-static struct s32gen1_clk clkout0_clk =
-		S32GEN1_MODULE_CLK(clkout0_div);
-
-static struct s32gen1_mux cgm0_mux2 =
-		S32GEN1_MUX_INIT(S32GEN1_CGM0, 2, 4,
-				 S32GEN1_CLK_FIRC,
-				 S32GEN1_CLK_PERIPH_PLL_PHI0,
-				 S32GEN1_CLK_PERIPH_PLL_DFS2,
-				 S32GEN1_CLK_PERIPH_PLL_DFS5);
-static struct s32gen1_clk cgm0_mux2_clk =
-		S32GEN1_MODULE_CLK(cgm0_mux2);
-static struct s32gen1_cgm_div clkout1_div =
-		S32GEN1_CGM_DIV_INIT(cgm0_mux2_clk, 0);
-static struct s32gen1_clk clkout1_clk =
-		S32GEN1_MODULE_CLK(clkout1_div);
-
-static struct s32gen1_clk *plat_clocks[] = {
-	/* Oscillators */
-	[CC_ARR_CLK(S32GEN1_CLK_FIRC)] = &firc_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_SIRC)] = &sirc_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_FXOSC)] = &fxosc_clk,
-	/* ARM PLL */
-	[CC_ARR_CLK(S32GEN1_CLK_ARM_PLL_MUX)] = &arm_pll_mux_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_ARM_PLL_VCO)] = &arm_pll_vco_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_ARM_PLL_PHI0)] = &arm_pll_phi0_clk,
-	/* ARM DFS */
-	[CC_ARR_CLK(S32GEN1_CLK_ARM_PLL_DFS1)] = &arm_dfs1_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_ARM_PLL_DFS2)] = &arm_dfs2_clk,
-	/* ARM - MC_CGM1 */
-	[CC_ARR_CLK(S32GEN1_CLK_MC_CGM1_MUX0)] = &cgm1_mux0_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_A53_CORE)] = &a53_core_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_A53_CORE_DIV2)] = &a53_core_div2_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_A53_CORE_DIV10)] = &a53_core_div10_clk,
-	/* ARM - MC_CGM0 */
-	[CC_ARR_CLK(S32GEN1_CLK_MC_CGM0_MUX0)] = &cgm0_mux0_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_XBAR_2X)] = &xbar_2x_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_XBAR)] = &xbar_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_XBAR_DIV2)] = &xbar_div2_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_XBAR_DIV3)] = &xbar_div3_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_XBAR_DIV4)] = &xbar_div4_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_XBAR_DIV6)] = &xbar_div6_clk,
-	/* PERIPH PLL */
-	[CC_ARR_CLK(S32GEN1_CLK_PERIPH_PLL_MUX)] = &periph_pll_mux_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_PERIPH_PLL_VCO)] = &periph_pll_vco_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_PERIPH_PLL_PHI0)] = &periph_pll_phi0_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_PERIPH_PLL_PHI1)] = &periph_pll_phi1_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_PERIPH_PLL_PHI2)] = &periph_pll_phi2_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_PERIPH_PLL_PHI3)] = &periph_pll_phi3_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_PERIPH_PLL_PHI4)] = &periph_pll_phi4_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_PERIPH_PLL_PHI5)] = &periph_pll_phi5_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_PERIPH_PLL_PHI7)] = &periph_pll_phi7_clk,
-	/* PERIPH DFS */
-	[CC_ARR_CLK(S32GEN1_CLK_PERIPH_PLL_DFS1)] = &periph_dfs1_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_PERIPH_PLL_DFS2)] = &periph_dfs2_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_PERIPH_PLL_DFS3)] = &periph_dfs3_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_PERIPH_PLL_DFS5)] = &periph_dfs5_clk,
-	/* PERIPH - MC_CGM0 */
-	[CC_ARR_CLK(S32GEN1_CLK_SERDES_REF)] = &serdes_ref_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_MC_CGM0_MUX3)] = &cgm0_mux3_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_MC_CGM0_MUX4)] = &cgm0_mux4_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_FTM0_EXT_REF)] = &ftm0_ext_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_FTM0_REF)] = &ftm0_ref_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_MC_CGM0_MUX5)] = &cgm0_mux5_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_FTM1_EXT_REF)] = &ftm1_ext_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_FTM1_REF)] = &ftm1_ref_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_MC_CGM0_MUX6)] = &cgm0_mux6_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_FLEXRAY_PE)] = &flexray_pe_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_MC_CGM0_MUX7)] = &cgm0_mux7_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_MC_CGM0_MUX8)] = &cgm0_mux8_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_LIN_BAUD)] = &lin_baud_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_LINFLEXD)] = &linflexd_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_SERDES0_LANE0_CDR)] = &serdes0_lane0_cdr_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_SERDES0_LANE0_TX)] = &serdes0_lane0_tx_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_MC_CGM0_MUX16)] = &cgm0_mux16_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_SPI)] = &spi_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_MC_CGM0_MUX12)] = &cgm0_mux12_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_QSPI_2X)] = &qspi_2x_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_QSPI)] = &qspi_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_MC_CGM0_MUX14)] = &cgm0_mux14_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_SDHC)] = &sdhc_clk,
-	/* DDR PLL */
-	[CC_ARR_CLK(S32GEN1_CLK_DDR_PLL_MUX)] = &ddr_pll_mux_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_DDR_PLL_VCO)] = &ddr_pll_vco_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_DDR_PLL_PHI0)] = &ddr_pll_phi0_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_MC_CGM5_MUX0)] = &cgm5_mux0_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_DDR)] = &ddr_clk,
-	/* ACCEL PLL */
-	[CC_ARR_CLK(S32GEN1_CLK_ACCEL_PLL_MUX)] = &accel_pll_mux_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_ACCEL_PLL_VCO)] = &accel_pll_vco_clk,
-	/* CLKOUT */
-	[CC_ARR_CLK(S32GEN1_CLK_MC_CGM0_MUX1)] = &cgm0_mux1_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_CLKOUT0)] = &clkout0_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_MC_CGM0_MUX2)] = &cgm0_mux2_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_CLKOUT1)] = &clkout1_clk,
-};
-
-struct s32gen1_clk *get_clock(uint32_t id)
-{
-	u32 index;
-
-	if (id < S32GEN1_CLK_ID_BASE)
-		return NULL;
-
-	if (id >= S32GEN1_PLAT_CLK_ID_BASE)
-		return get_plat_clock(id);
-
-	index = s32gen1_platclk2mux(id);
-
-	if (index >= ARRAY_SIZE(plat_clocks) || !plat_clocks[index])
-		return get_plat_cc_clock(id);
-
-	return plat_clocks[index];
-}
-
-bool is_qspi1x_clk(uint32_t id)
-{
-	return (id == S32GEN1_SCMI_CLK_QSPI_FLASH1X) ||
-		(id == S32GEN1_CLK_QSPI);
-}
-
-bool is_qspi2x_clk(uint32_t id)
-{
-	return (id == S32GEN1_SCMI_CLK_QSPI_FLASH2X) ||
-		(id == S32GEN1_CLK_QSPI_2X);
-}
-
-bool is_qspi_clk(uint32_t id)
-{
-	return is_qspi1x_clk(id) || is_qspi2x_clk(id);
-}
-
-int s32gen1_get_early_clks_freqs(const struct siul2_freq_mapping **mapping)
-{
-	u32 freq;
-	size_t i;
-
-	freq = get_siul2_midr2_freq();
-
-	/* Last entry is empty */
-	for (i = 0; siul2_clk_freq_map[i].a53_freq != 0; i++)
-
-		if (siul2_clk_freq_map[i].siul2_midr2_freq == freq) {
-			*mapping = &siul2_clk_freq_map[i];
-			return 0;
-		}
-
-	return -EINVAL;
-}
diff --git a/drivers/clk/s32/s32gen1_clk_drv.c b/drivers/clk/s32/s32gen1_clk_drv.c
deleted file mode 100644
index 212351a230..0000000000
--- a/drivers/clk/s32/s32gen1_clk_drv.c
+++ /dev/null
@@ -1,209 +0,0 @@
-// SPDX-License-Identifier: BSD-3-Clause
-/*
- * Copyright 2020-2021 NXP
- */
-#include <asm/arch/mc_cgm_regs.h>
-#include <asm/io.h>
-#include <command.h>
-#include <dm/device.h>
-#include <dm/lists.h>
-#include <dm/of_access.h>
-#include <dm/read.h>
-#include <dt-bindings/clock/s32gen1-clock.h>
-#include <linux/ioport.h>
-#include <log.h>
-#include <s32gen1_clk_funcs.h>
-#include <s32gen1_clk_modules.h>
-#include <s32gen1_scmi_clk.h>
-
-static int bind_clk_provider(struct udevice *pdev, const char *compatible,
-			     void **base_addr)
-{
-	struct resource res;
-	struct udevice *dev;
-	ofnode node;
-	int ret;
-
-	*base_addr = NULL;
-	node = ofnode_by_compatible(ofnode_null(), compatible);
-	if (!ofnode_valid(node)) {
-		/* Don't print here an error if the node doesn't exist.
-		 * It may be never used.
-		 */
-		pr_debug("Could not find '%s' node\n", compatible);
-		return -EIO;
-	}
-
-	ret = ofnode_read_resource(node, 0, &res);
-	if (ret) {
-		pr_err("Failed to get '%s' registers\n", compatible);
-		return -EIO;
-	}
-
-	*base_addr = map_physmem(res.start, res.end - res.start + 1,
-				 MAP_NOCACHE);
-	if (!*base_addr) {
-		pr_err("Failed to map '%s'\n", compatible);
-		return -EIO;
-	}
-
-	ret = device_bind_driver_to_node(pdev, "s32gen1_clk",
-					 ofnode_get_name(node), node, &dev);
-	if (ret) {
-		pr_err("Failed to bind '%s'\n", compatible);
-		return -EIO;
-	}
-
-	/* Pre probe */
-	ret = clk_set_defaults(dev, 0);
-	if (ret) {
-		pr_err("Failed to set default clocks(0) for '%s'\n",
-		       compatible);
-		return -EIO;
-	}
-
-	/* Post probe */
-	ret = clk_set_defaults(dev, 1);
-	if (ret) {
-		pr_err("Failed to set default clocks(1) for '%s'\n",
-		       compatible);
-		return -EIO;
-	}
-
-	return ret;
-}
-
-static int s32gen1_clk_probe(struct udevice *dev)
-{
-	size_t i;
-	struct s32gen1_clk_priv *priv = dev_get_priv(dev);
-
-	struct clk_dep {
-		void **base_addr;
-		const char *compat;
-	} deps[] = {
-		{
-			.base_addr = &priv->fxosc,
-			.compat = "fsl,s32gen1-fxosc",
-		},
-		{
-			.base_addr = &priv->cgm0,
-			.compat = "fsl,s32gen1-mc_cgm0",
-		},
-		{
-			.base_addr = &priv->mc_me,
-			.compat = "fsl,s32gen1-mc_me",
-		},
-		{
-			.base_addr = &priv->rdc,
-			.compat = "fsl,s32gen1-rdc",
-		},
-		{
-			.base_addr = &priv->rgm,
-			.compat = "fsl,s32gen1-rgm",
-		},
-		{
-			.base_addr = &priv->cgm1,
-			.compat = "fsl,s32gen1-mc_cgm1",
-		},
-		{
-			.base_addr = &priv->cgm2,
-			.compat = "fsl,s32gen1-mc_cgm2",
-		},
-		{
-			.base_addr = &priv->cgm5,
-			.compat = "fsl,s32gen1-mc_cgm5",
-		},
-		{
-			.base_addr = &priv->cgm6,
-			.compat = "fsl,s32gen1-mc_cgm6",
-		},
-		{
-			.base_addr = &priv->armpll,
-			.compat = "fsl,s32gen1-armpll",
-		},
-		{
-			.base_addr = &priv->periphpll,
-			.compat = "fsl,s32gen1-periphpll",
-		},
-		{
-			.base_addr = &priv->accelpll,
-			.compat = "fsl,s32gen1-accelpll",
-		},
-		{
-			.base_addr = &priv->ddrpll,
-			.compat = "fsl,s32gen1-ddrpll",
-		},
-		{
-			.base_addr = &priv->armdfs,
-			.compat = "fsl,s32gen1-armdfs",
-		},
-		{
-			.base_addr = &priv->periphdfs,
-			.compat = "fsl,s32gen1-periphdfs",
-		},
-	};
-
-	for (i = 0; i < ARRAY_SIZE(deps); i++)
-		bind_clk_provider(dev, deps[i].compat, deps[i].base_addr);
-
-	return 0;
-}
-
-void *get_base_addr(enum s32gen1_clk_source id, struct s32gen1_clk_priv *priv)
-{
-	switch (id) {
-	case S32GEN1_ACCEL_PLL:
-		return priv->accelpll;
-	case S32GEN1_ARM_DFS:
-		return priv->armdfs;
-	case S32GEN1_ARM_PLL:
-		return priv->armpll;
-	case S32GEN1_CGM0:
-		return priv->cgm0;
-	case S32GEN1_CGM1:
-		return priv->cgm1;
-	case S32GEN1_CGM2:
-		return priv->cgm2;
-	case S32GEN1_CGM5:
-		return priv->cgm5;
-	case S32GEN1_CGM6:
-		return priv->cgm6;
-	case S32GEN1_DDR_PLL:
-		return priv->ddrpll;
-	case S32GEN1_FXOSC:
-		return priv->fxosc;
-	case S32GEN1_PERIPH_DFS:
-		return priv->periphdfs;
-	case S32GEN1_PERIPH_PLL:
-		return priv->periphpll;
-	default:
-		pr_err("Unknown clock source id: %d\n", id);
-	}
-
-	return NULL;
-}
-
-static struct clk_ops s32gen1_clk_ops = {
-	.request = s32gen1_scmi_request,
-	.get_rate = s32gen1_scmi_get_rate,
-	.set_rate = s32gen1_plat_set_rate,
-	.set_parent = s32gen1_scmi_set_parent,
-	.enable = s32gen1_scmi_enable,
-	.disable = s32gen1_scmi_disable,
-};
-
-static const struct udevice_id s32gen1_clk_ids[] = {
-	{ .compatible = "fsl,s32-gen1-clocking", },
-	{}
-};
-
-U_BOOT_DRIVER(s32gen1_clk) = {
-	.name		= "s32gen1_clk",
-	.id		= UCLASS_CLK,
-	.of_match	= s32gen1_clk_ids,
-	.ops		= &s32gen1_clk_ops,
-	.priv_auto_alloc_size = sizeof(struct s32gen1_clk_priv),
-	.probe		= s32gen1_clk_probe,
-	.flags		= DM_FLAG_PRE_RELOC,
-};
diff --git a/drivers/clk/s32/s32gen1_scmi_clk.c b/drivers/clk/s32/s32gen1_scmi_clk.c
deleted file mode 100644
index b800f28d9f..0000000000
--- a/drivers/clk/s32/s32gen1_scmi_clk.c
+++ /dev/null
@@ -1,128 +0,0 @@
-// SPDX-License-Identifier: BSD-3-Clause
-/*
- * Copyright 2020 NXP
- */
-#include <dt-bindings/clock/s32gen1-clock.h>
-#include <dt-bindings/clock/s32gen1-scmi-clock.h>
-#include <linux/printk.h>
-#include <s32gen1_clk_funcs.h>
-#include <s32gen1_scmi_clk.h>
-
-static bool is_scmi_clk(uint32_t id)
-{
-	if (id >= S32GEN1_SCMI_CLK_BASE_ID && id < S32GEN1_CLK_ID_BASE)
-		return true;
-
-	return false;
-}
-
-int s32gen1_scmi_request(struct clk *clk)
-{
-	int ret;
-	u32 clk_id;
-
-	if (is_scmi_clk(clk->id)) {
-		ret = cc_scmi_id2clk(clk->id, &clk_id);
-		if (ret) {
-			pr_err("Clock with ID %ld isn't covered by this driver\n",
-			       clk->id);
-			return -EINVAL;
-		}
-
-		if (clk_id == S32GEN1_SCMI_COMPLEX_CLK)
-			return cc_compound_clk_get(clk);
-
-		clk->id = clk_id;
-	} else {
-		clk_id = clk->id;
-	}
-
-	if (!get_clock(clk_id)) {
-		pr_err("Clock %ld is not part of the clock tree\n", clk->id);
-		return -EINVAL;
-	}
-
-	return 0;
-}
-
-ulong s32gen1_scmi_get_rate(struct clk *clk)
-{
-	int ret;
-	u32 clk_id;
-
-	if (is_scmi_clk(clk->id)) {
-		ret = cc_scmi_id2clk(clk->id, &clk_id);
-		if (ret) {
-			pr_err("Clock with ID %ld isn't covered by this driver\n",
-			       clk->id);
-			return 0;
-		}
-
-		if (clk_id == S32GEN1_SCMI_COMPLEX_CLK)
-			return cc_compound_clk_get_rate(clk);
-
-		clk->id = clk_id;
-	}
-
-	return s32gen1_get_rate(clk);
-}
-
-ulong s32gen1_scmi_set_rate(struct clk *clk, ulong rate)
-{
-	int ret;
-	u32 clk_id;
-
-	if (is_scmi_clk(clk->id)) {
-		ret = cc_scmi_id2clk(clk->id, &clk_id);
-		if (ret) {
-			pr_err("Clock with ID %ld isn't covered by this driver\n",
-			       clk->id);
-			return 0;
-		}
-
-		if (clk_id == S32GEN1_SCMI_COMPLEX_CLK)
-			return cc_compound_clk_set_rate(clk, rate);
-
-		clk->id = clk_id;
-	}
-
-	return s32gen1_set_rate(clk, rate);
-}
-
-int s32gen1_scmi_set_parent(struct clk *clk, struct clk *parent)
-{
-	if (is_scmi_clk(clk->id)) {
-		pr_err("Is not allowed to set parents for SCMI clocks\n");
-		return -EINVAL;
-	}
-
-	return s32gen1_set_parent(clk, parent);
-}
-
-int s32gen1_scmi_enable(struct clk *clk)
-{
-	int ret;
-	u32 clk_id;
-
-	if (is_scmi_clk(clk->id)) {
-		ret = cc_scmi_id2clk(clk->id, &clk_id);
-		if (ret) {
-			pr_err("Clock with ID %ld isn't covered by this driver\n",
-			       clk->id);
-			return -1;
-		}
-
-		if (clk_id == S32GEN1_SCMI_COMPLEX_CLK)
-			return cc_compound_clk_enable(clk);
-
-		clk->id = clk_id;
-	}
-
-	return s32gen1_enable(clk);
-}
-
-int s32gen1_scmi_disable(struct clk *clk)
-{
-	/* Not implemented yet */
-	return -EINVAL;
-}
diff --git a/drivers/clk/s32/s32gen1_scmi_ids.c b/drivers/clk/s32/s32gen1_scmi_ids.c
deleted file mode 100644
index e643628e01..0000000000
--- a/drivers/clk/s32/s32gen1_scmi_ids.c
+++ /dev/null
@@ -1,298 +0,0 @@
-// SPDX-License-Identifier: BSD-3-Clause
-/*
- * Copyright 2020-2022 NXP
- */
-#include <dt-bindings/clock/s32g-clock.h>
-#include <dt-bindings/clock/s32gen1-clock.h>
-#include <dt-bindings/clock/s32gen1-scmi-clock.h>
-#include <errno.h>
-#include <linux/kernel.h>
-#include <s32gen1_clk_funcs.h>
-#include <s32gen1_clk_utils.h>
-#include <s32gen1_scmi_clk.h>
-
-#define INDEX(X)	((X) - S32GEN1_SCMI_CLK_BASE_ID)
-
-static u32 s32gen1_scmi_ids[] = {
-	[INDEX(S32GEN1_SCMI_CLK_A53)] = S32GEN1_CLK_A53_CORE,
-	[INDEX(S32GEN1_SCMI_CLK_SERDES_AXI)] = S32GEN1_CLK_XBAR,
-	[INDEX(S32GEN1_SCMI_CLK_SERDES_AUX)] = S32GEN1_CLK_FIRC,
-	[INDEX(S32GEN1_SCMI_CLK_SERDES_APB)] = S32GEN1_CLK_XBAR_DIV3,
-	[INDEX(S32GEN1_SCMI_CLK_SERDES_REF)] = S32GEN1_CLK_SERDES_REF,
-	[INDEX(S32GEN1_SCMI_CLK_FTM0_SYS)] = S32GEN1_CLK_PER,
-	[INDEX(S32GEN1_SCMI_CLK_FTM0_EXT)] = S32GEN1_CLK_FTM0_REF,
-	[INDEX(S32GEN1_SCMI_CLK_FTM1_SYS)] = S32GEN1_CLK_PER,
-	[INDEX(S32GEN1_SCMI_CLK_FTM1_EXT)] = S32GEN1_CLK_FTM1_REF,
-	[INDEX(S32GEN1_SCMI_CLK_FLEXCAN_REG)] = S32GEN1_CLK_XBAR_DIV3,
-	[INDEX(S32GEN1_SCMI_CLK_FLEXCAN_SYS)] = S32GEN1_CLK_XBAR_DIV3,
-	[INDEX(S32GEN1_SCMI_CLK_FLEXCAN_CAN)] = S32GEN1_CLK_CAN_PE,
-	[INDEX(S32GEN1_SCMI_CLK_FLEXCAN_TS)] = S32GEN1_CLK_XBAR_DIV2,
-	[INDEX(S32GEN1_SCMI_CLK_LINFLEX_XBAR)] = S32GEN1_CLK_LINFLEXD,
-	[INDEX(S32GEN1_SCMI_CLK_LINFLEX_LIN)] = S32GEN1_CLK_LIN_BAUD,
-	[INDEX(S32GEN1_SCMI_CLK_GMAC0_RX_SGMII)] = S32GEN1_SCMI_COMPLEX_CLK,
-	[INDEX(S32GEN1_SCMI_CLK_GMAC0_TX_SGMII)] = S32GEN1_SCMI_COMPLEX_CLK,
-	[INDEX(S32GEN1_SCMI_CLK_GMAC0_RX_RGMII)] = S32GEN1_SCMI_COMPLEX_CLK,
-	[INDEX(S32GEN1_SCMI_CLK_GMAC0_TX_RGMII)] = S32GEN1_SCMI_COMPLEX_CLK,
-	[INDEX(S32GEN1_SCMI_CLK_GMAC0_TS)] = S32GEN1_SCMI_COMPLEX_CLK,
-	[INDEX(S32GEN1_SCMI_CLK_GMAC0_AXI)] = S32GEN1_CLK_XBAR,
-	[INDEX(S32GEN1_SCMI_CLK_SPI_REG)] = S32GEN1_CLK_SPI,
-	[INDEX(S32GEN1_SCMI_CLK_SPI_MODULE)] = S32GEN1_CLK_SPI,
-	[INDEX(S32GEN1_SCMI_CLK_QSPI_REG)] = S32GEN1_CLK_XBAR_DIV3,
-	[INDEX(S32GEN1_SCMI_CLK_QSPI_AHB)] = S32GEN1_CLK_XBAR_DIV3,
-	[INDEX(S32GEN1_SCMI_CLK_QSPI_FLASH2X)] = S32GEN1_CLK_QSPI_2X,
-	[INDEX(S32GEN1_SCMI_CLK_QSPI_FLASH1X)] = S32GEN1_CLK_QSPI,
-	[INDEX(S32GEN1_SCMI_CLK_USDHC_AHB)] = S32GEN1_CLK_XBAR,
-	[INDEX(S32GEN1_SCMI_CLK_USDHC_MODULE)] = S32GEN1_CLK_XBAR_DIV3,
-	[INDEX(S32GEN1_SCMI_CLK_USDHC_CORE)] = S32GEN1_CLK_SDHC,
-	[INDEX(S32GEN1_SCMI_CLK_USDHC_MOD32K)] = S32GEN1_CLK_SIRC,
-	[INDEX(S32GEN1_SCMI_CLK_DDR_REG)] = S32GEN1_CLK_XBAR_DIV3,
-	[INDEX(S32GEN1_SCMI_CLK_DDR_PLL_REF)] = S32GEN1_CLK_DDR,
-	[INDEX(S32GEN1_SCMI_CLK_DDR_AXI)] = S32GEN1_CLK_DDR,
-	[INDEX(S32GEN1_SCMI_CLK_SRAM_AXI)] = S32GEN1_CLK_XBAR,
-	[INDEX(S32GEN1_SCMI_CLK_SRAM_REG)] = S32GEN1_CLK_XBAR_DIV3,
-	[INDEX(S32GEN1_SCMI_CLK_I2C_REG)] = S32GEN1_CLK_XBAR_DIV3,
-	[INDEX(S32GEN1_SCMI_CLK_I2C_MODULE)] = S32GEN1_CLK_XBAR_DIV3,
-	[INDEX(S32GEN1_SCMI_CLK_SAR_ADC_BUS)] = S32GEN1_CLK_PER,
-	[INDEX(S32GEN1_SCMI_CLK_RTC_REG)] = S32GEN1_CLK_XBAR_DIV6,
-	[INDEX(S32GEN1_SCMI_CLK_RTC_SIRC)] = S32GEN1_CLK_SIRC,
-	[INDEX(S32GEN1_SCMI_CLK_RTC_FIRC)] = S32GEN1_CLK_FIRC,
-	[INDEX(S32GEN1_SCMI_CLK_SIUL2_REG)] = S32GEN1_CLK_XBAR_DIV6,
-	[INDEX(S32GEN1_SCMI_CLK_SIUL2_FILTER)] = S32GEN1_CLK_FIRC,
-	[INDEX(S32GEN1_SCMI_CLK_CRC_REG)] = S32GEN1_CLK_XBAR_DIV3,
-	[INDEX(S32GEN1_SCMI_CLK_CRC_MODULE)] = S32GEN1_CLK_XBAR_DIV3,
-	[INDEX(S32GEN1_SCMI_CLK_EIM0_REG)] = S32GEN1_CLK_A53_CORE_DIV10,
-	[INDEX(S32GEN1_SCMI_CLK_EIM0_MODULE)] = S32GEN1_CLK_A53_CORE_DIV10,
-	[INDEX(S32GEN1_SCMI_CLK_EIM123_REG)] = S32GEN1_CLK_XBAR_DIV6,
-	[INDEX(S32GEN1_SCMI_CLK_EIM123_MODULE)] = S32GEN1_CLK_XBAR_DIV6,
-	[INDEX(S32GEN1_SCMI_CLK_EIM_REG)] = S32GEN1_CLK_XBAR_DIV6,
-	[INDEX(S32GEN1_SCMI_CLK_EIM_MODULE)] = S32GEN1_CLK_XBAR_DIV6,
-	[INDEX(S32GEN1_SCMI_CLK_FCCU_MODULE)] = S32GEN1_CLK_XBAR_DIV6,
-	[INDEX(S32GEN1_SCMI_CLK_FCCU_SAFE)] = S32GEN1_CLK_FIRC,
-	[INDEX(S32GEN1_SCMI_CLK_PIT_MODULE)] = S32GEN1_CLK_XBAR_DIV3,
-	[INDEX(S32GEN1_SCMI_CLK_PIT_REG)] = S32GEN1_CLK_XBAR_DIV3,
-};
-
-static int compound2clkid(u32 scmi_clk_id, u32 *clk_id)
-{
-	switch (scmi_clk_id) {
-	case S32GEN1_SCMI_CLK_GMAC0_RX_SGMII:
-	case S32GEN1_SCMI_CLK_GMAC0_RX_RGMII:
-		if (clk_id)
-			*clk_id = S32GEN1_CLK_GMAC0_RX;
-		break;
-	case S32GEN1_SCMI_CLK_GMAC0_TX_SGMII:
-	case S32GEN1_SCMI_CLK_GMAC0_TX_RGMII:
-		if (clk_id)
-			*clk_id = S32GEN1_CLK_GMAC0_TX;
-		break;
-	case S32GEN1_SCMI_CLK_GMAC0_TS:
-		if (clk_id)
-			*clk_id = S32GEN1_CLK_GMAC0_TS;
-		break;
-	default:
-		return -EINVAL;
-	}
-
-	return 0;
-}
-
-int cc_set_mux_parent(struct clk *clk, u32 mux_id, u32 mux_source)
-{
-	struct clk source = *clk;
-	struct clk mux = *clk;
-	int ret;
-
-	source.id = mux_source;
-	mux.id = mux_id;
-
-	ret = s32gen1_set_parent(&mux, &source);
-	if (ret) {
-		pr_err("Failed to set cgm0_mux11 source\n");
-		return -EINVAL;
-	}
-
-	return 0;
-}
-
-static int set_gmac_rx_parent(struct clk *clk)
-{
-	u32 rx_id, parent_id;
-	u32 clk_id = clk->id;
-
-	if (clk_id == S32GEN1_SCMI_CLK_GMAC0_RX_SGMII) {
-		rx_id = S32GEN1_CLK_SERDES0_LANE0_CDR;
-	} else if (clk_id == S32GEN1_SCMI_CLK_GMAC0_RX_RGMII) {
-		rx_id = S32GEN1_CLK_GMAC0_EXT_RX;
-	} else {
-		pr_err("Invalid GMAC RX mode\n");
-		return -EINVAL;
-	}
-
-	if (cc_compound_clk_get_pid(clk_id, &parent_id))
-		return -EINVAL;
-
-	return cc_set_mux_parent(clk, parent_id, rx_id);
-}
-
-static int set_gmac_tx_parent(struct clk *clk)
-{
-	u32 tx_id, parent_id;
-	u32 clk_id = clk->id;
-
-	if (clk_id == S32GEN1_SCMI_CLK_GMAC0_TX_RGMII) {
-		tx_id = S32GEN1_CLK_PERIPH_PLL_PHI5;
-	} else if (clk_id == S32GEN1_SCMI_CLK_GMAC0_TX_SGMII) {
-		tx_id = S32GEN1_CLK_SERDES0_LANE0_TX;
-	} else {
-		pr_err("Invalid GMAC TX mode\n");
-		return -EINVAL;
-	}
-
-	if (cc_compound_clk_get_pid(clk_id, &parent_id))
-		return -EINVAL;
-
-	return cc_set_mux_parent(clk, parent_id, tx_id);
-}
-
-static int set_gmac_ts_parent(struct clk *clk)
-{
-	u32 ts_id, parent_id;
-	u32 clk_id = clk->id;
-
-	if (clk_id == S32GEN1_SCMI_CLK_GMAC0_TS) {
-		ts_id = S32GEN1_CLK_PERIPH_PLL_PHI4;
-	} else {
-		pr_err("Invalid GMAC TS mode\n");
-		return -EINVAL;
-	}
-
-	if (cc_compound_clk_get_pid(clk_id, &parent_id))
-		return -EINVAL;
-
-	return cc_set_mux_parent(clk, parent_id, ts_id);
-}
-
-static int cc_compound_clk_set_parents(struct clk *clk)
-{
-	u32 clk_id = clk->id;
-	u32 id;
-
-	if (compound2clkid(clk_id, &id)) {
-		pr_err("Invalid compound clock : %u\n", clk_id);
-		return -EINVAL;
-	}
-
-	switch (id) {
-	case S32GEN1_CLK_GMAC0_RX:
-		return set_gmac_rx_parent(clk);
-	case S32GEN1_CLK_GMAC0_TX:
-		return set_gmac_tx_parent(clk);
-	case S32GEN1_CLK_GMAC0_TS:
-		return set_gmac_ts_parent(clk);
-	default:
-		return plat_compound_clk_set_parents(clk);
-	}
-}
-
-int cc_scmi_id2clk(u32 scmi_clk_id, u32 *clk_id)
-{
-	if (!clk_id)
-		return -EINVAL;
-
-	if (scmi_clk_id >= S32GEN1_SCMI_PLAT_CLK_BASE_ID)
-		return plat_scmi_id2clk(scmi_clk_id, clk_id);
-
-	if (INDEX(scmi_clk_id) >= ARRAY_SIZE(s32gen1_scmi_ids))
-		return -EINVAL;
-
-	*clk_id = s32gen1_scmi_ids[INDEX(scmi_clk_id)];
-	if (!*clk_id) {
-		pr_err("Unhandled clock: %u\n", scmi_clk_id);
-		return -EINVAL;
-	}
-	return 0;
-}
-
-int cc_compound_clk_get(struct clk *clk)
-{
-	u32 scmi_clk_id = clk->id;
-
-	if (scmi_clk_id >= S32GEN1_SCMI_PLAT_CLK_BASE_ID)
-		return plat_compound_clk_get(clk);
-
-	if (INDEX(scmi_clk_id) >= ARRAY_SIZE(s32gen1_scmi_ids))
-		return -EINVAL;
-
-	if (compound2clkid(scmi_clk_id, NULL)) {
-		pr_err("Invalid compound clock : %u\n", scmi_clk_id);
-		return -EINVAL;
-	}
-
-	return 0;
-}
-
-ulong cc_compound_clk_set_rate(struct clk *clk, ulong rate)
-{
-	struct clk sclock = *clk;
-	u32 scmi_clk_id = clk->id;
-	u32 id;
-	int ret;
-
-	if (scmi_clk_id >= S32GEN1_SCMI_PLAT_CLK_BASE_ID)
-		return plat_compound_clk_set_rate(clk, rate);
-
-	if (INDEX(scmi_clk_id) >= ARRAY_SIZE(s32gen1_scmi_ids))
-		return -EINVAL;
-
-	ret = cc_compound_clk_set_parents(clk);
-	if (ret) {
-		pr_err("Failed to set parents for %u\n", scmi_clk_id);
-		return -EINVAL;
-	}
-
-	if (compound2clkid(scmi_clk_id, &id)) {
-		pr_err("Invalid compound clock : %u\n", scmi_clk_id);
-		return -EINVAL;
-	}
-
-	sclock.id = id;
-	return s32gen1_set_rate(&sclock, rate);
-}
-
-int cc_compound_clk_enable(struct clk *clk)
-{
-	struct clk sclock = *clk;
-	u32 clk_id = clk->id;
-	u32 id;
-	int ret;
-
-	if (clk_id >= S32GEN1_SCMI_PLAT_CLK_BASE_ID)
-		return plat_compound_clk_enable(clk);
-
-	if (compound2clkid(clk_id, &id)) {
-		pr_err("Invalid compound clock : %u\n", clk_id);
-		return -EINVAL;
-	}
-
-	ret = cc_compound_clk_set_parents(clk);
-	if (ret) {
-		pr_err("Failed to set parents for %u\n", clk_id);
-		return -EINVAL;
-	}
-
-	sclock.id = id;
-	ret = s32gen1_enable(&sclock);
-	if (ret) {
-		pr_err("Failed to enable %u clock\n", clk_id);
-		return ret;
-	}
-
-	return 0;
-}
-
-ulong cc_compound_clk_get_rate(struct clk *clk)
-{
-	printf("TODO: %s\n", __func__);
-	return 0;
-}
-
diff --git a/drivers/clk/s32/s32r45_clk.c b/drivers/clk/s32/s32r45_clk.c
deleted file mode 100644
index 13a5392432..0000000000
--- a/drivers/clk/s32/s32r45_clk.c
+++ /dev/null
@@ -1,340 +0,0 @@
-// SPDX-License-Identifier: BSD-3-Clause
-/*
- * Copyright 2020-2021 NXP
- */
-#include <dt-bindings/clock/s32r45-clock.h>
-#include <dt-bindings/clock/s32gen1-scmi-clock.h>
-#include <dt-bindings/clock/s32gen1-clock-freq.h>
-#include <s32gen1_clk_funcs.h>
-#include <s32gen1_clk_modules.h>
-#include <s32gen1_scmi_clk.h>
-#include <s32gen1_shared_clks.h>
-
-#define ARR_CLK(N)	S32R45_CLK_INDEX(N)
-
-#define SIUL2_MIDR2_FREQ_VAL1		(0xA)
-
-#define S32GEN1_XBAR_2X_MAX_FREQ	(800 * MHZ)
-
-/* XBAR_2X */
-static struct s32gen1_part_block xbar_div3_block =
-		S32GEN1_PART_BLOCK(cgm0_mux0_clk, 3, s32gen1_part_block2);
-static struct s32gen1_part_block eim_block =
-		S32GEN1_PART_BLOCK(xbar_div3_block, 3, s32gen1_part_block3);
-static struct s32gen1_part_block mipi20_block =
-		S32GEN1_PART_BLOCK(eim_block, 0, s32gen1_part_block5);
-static struct s32gen1_part_block mipi21_block =
-		S32GEN1_PART_BLOCK(mipi20_block, 0, s32gen1_part_block6);
-static struct s32gen1_part_block mipi22_block =
-		S32GEN1_PART_BLOCK(mipi21_block, 0, s32gen1_part_block7);
-static struct s32gen1_part_block mipi23_block =
-		S32GEN1_PART_BLOCK(mipi22_block, 0, s32gen1_part_block8);
-static struct s32gen1_part_block fdma_block =
-		S32GEN1_PART_BLOCK(mipi23_block, 0, s32gen1_part_block9);
-struct s32gen1_clk xbar_2x_clk =
-		S32GEN1_FREQ_MODULE_CLK(fdma_block, 48 * MHZ, 800 * MHZ);
-
-/* PER_CLK */
-static struct s32gen1_part_block per_block =
-		S32GEN1_PART_BLOCK_NO_STATUS(per_div, 3, s32gen1_part_block1);
-static struct s32gen1_clk per_clk =
-		S32GEN1_FREQ_MODULE_CLK(per_block, 0, 80 * MHZ);
-
-/* CAN_PE_CLK */
-static struct s32gen1_part_block can4_block =
-		S32GEN1_PART_BLOCK(cgm0_mux7_clk, 0, s32gen1_part_block11);
-static struct s32gen1_part_block can5_block =
-		S32GEN1_PART_BLOCK(can4_block, 0, s32gen1_part_block12);
-static struct s32gen1_part_block can6_block =
-		S32GEN1_PART_BLOCK(can5_block, 0, s32gen1_part_block13);
-static struct s32gen1_part_block can7_block =
-		S32GEN1_PART_BLOCK(can6_block, 0, s32gen1_part_block14);
-static struct s32gen1_clk can_pe_clk =
-		S32GEN1_FREQ_MODULE_CLK(can7_block, 40 * MHZ, 80 * MHZ);
-
-/* ARM DFS - PHI4 */
-static struct s32gen1_dfs_div arm_dfs4_div =
-		S32GEN1_DFS_DIV_INIT(armdfs, 3);
-static struct s32gen1_clk arm_dfs4_clk =
-		S32GEN1_FREQ_MODULE_CLK(arm_dfs4_div, 0, 400 * MHZ);
-static struct s32gen1_clk arm_dfs4_2_clk =
-		S32GEN1_CHILD_CLK(arm_dfs4_clk, 0, 400 * MHZ);
-
-/* ACCEL3_CLK (SPT) */
-static struct s32gen1_mux cgm2_mux0 =
-		S32GEN1_MUX_INIT(S32GEN1_CGM2, 0, 2,
-				 S32GEN1_CLK_FIRC,
-				 S32R45_CLK_ACCEL_PLL_PHI0);
-static struct s32gen1_clk cgm2_mux0_clk =
-		S32GEN1_MODULE_CLK(cgm2_mux0);
-static struct s32gen1_cgm_div cgm2_mux0_div =
-		S32GEN1_CGM_DIV_INIT(cgm2_mux0_clk, 0);
-static struct s32gen1_part_block bbe32ep_block =
-		S32GEN1_PART_BLOCK(cgm2_mux0_div, 3, s32gen1_part_block4);
-static struct s32gen1_part_block spt_block =
-		S32GEN1_PART_BLOCK(bbe32ep_block, 3, s32gen1_part_block5);
-static struct s32gen1_clk accel3_clk =
-		S32GEN1_FREQ_MODULE_CLK(spt_block, 0, 600 * MHZ);
-static struct s32gen1_fixed_div accle3_div3_div =
-		S32GEN1_FIXED_DIV_INIT(accel3_clk, 2);
-static struct s32gen1_clk accel3_div3_clk =
-		S32GEN1_FREQ_MODULE_CLK(accle3_div3_div, 0, 200 * MHZ);
-
-/* ACCEL4_CLK (LAX) */
-static struct s32gen1_mux cgm2_mux1 =
-		S32GEN1_MUX_INIT(S32GEN1_CGM2, 1, 2,
-				 S32GEN1_CLK_FIRC,
-				 S32R45_CLK_ARM_PLL_DFS4_2);
-static struct s32gen1_clk cgm2_mux1_clk =
-		S32GEN1_MODULE_CLK(cgm2_mux1);
-static struct s32gen1_cgm_div cgm2_mux1_div =
-		S32GEN1_CGM_DIV_INIT(cgm2_mux1_clk, 0);
-static struct s32gen1_part_block lax0_block =
-		S32GEN1_PART_BLOCK(cgm2_mux1_div, 2, s32gen1_part_block0);
-static struct s32gen1_part_block lax1_block =
-		S32GEN1_PART_BLOCK(lax0_block, 2, s32gen1_part_block1);
-static struct s32gen1_clk accel4_clk =
-		S32GEN1_FREQ_MODULE_CLK(lax1_block, 0, 400 * MHZ);
-
-/* GMAC_TS_CLK */
-static struct s32gen1_fixed_clock gmac_ext_ts =
-		S32GEN1_FIXED_CLK_INIT();
-static struct s32gen1_clk gmac_ext_ts_clk =
-		S32GEN1_MODULE_CLK(gmac_ext_ts);
-static struct s32gen1_mux cgm0_mux9 =
-		S32GEN1_MUX_INIT(S32GEN1_CGM0, 9, 3,
-				 S32GEN1_CLK_FIRC,
-				 S32GEN1_CLK_PERIPH_PLL_PHI4,
-				 S32GEN1_CLK_GMAC0_EXT_TS);
-static struct s32gen1_clk cgm0_mux9_clk =
-		S32GEN1_MODULE_CLK(cgm0_mux9);
-static struct s32gen1_cgm_div gmac_ts_div =
-		S32GEN1_CGM_DIV_INIT(cgm0_mux9_clk, 0);
-static struct s32gen1_clk gmac_ts_clk =
-		S32GEN1_FREQ_MODULE_CLK(gmac_ts_div, 5 * MHZ, 200 * MHZ);
-
-/* GMAC0_TX_CLK */
-static struct s32gen1_fixed_clock gmac0_ext_tx =
-		S32GEN1_FIXED_CLK_INIT();
-static struct s32gen1_clk gmac0_ext_tx_clk =
-		S32GEN1_MODULE_CLK(gmac0_ext_tx);
-
-static struct s32gen1_fixed_clock gmac0_ext_ref =
-		S32GEN1_FIXED_CLK_INIT();
-static struct s32gen1_clk gmac0_ext_ref_clk =
-		S32GEN1_MODULE_CLK(gmac0_ext_ref);
-
-static struct s32gen1_mux cgm0_mux10 =
-		S32GEN1_MUX_INIT(S32GEN1_CGM0, 10, 5,
-				 S32GEN1_CLK_FIRC,
-				 S32GEN1_CLK_PERIPH_PLL_PHI5,
-				 S32GEN1_CLK_SERDES0_LANE0_TX,
-				 S32GEN1_CLK_GMAC0_EXT_TX,
-				 S32GEN1_CLK_GMAC0_EXT_REF);
-static struct s32gen1_clk cgm0_mux10_clk =
-		S32GEN1_MODULE_CLK(cgm0_mux10);
-static struct s32gen1_cgm_div gmac_tx_div =
-		S32GEN1_CGM_DIV_INIT(cgm0_mux10_clk, 0);
-static struct s32gen1_clk gmac_tx_clk =
-		S32GEN1_FREQ_MODULE_CLK(gmac_tx_div, 2500000, 125 * MHZ);
-
-/* GMAC0_RX_CLK */
-static struct s32gen1_fixed_clock gmac0_ext_rx =
-		S32GEN1_FIXED_CLK_INIT();
-static struct s32gen1_clk gmac0_ext_rx_clk =
-		S32GEN1_MODULE_CLK(gmac0_ext_rx);
-
-static struct s32gen1_mux cgm0_mux11 =
-		S32GEN1_MUX_INIT(S32GEN1_CGM0, 11, 4,
-				 S32GEN1_CLK_FIRC,
-				 S32GEN1_CLK_GMAC0_REF_DIV,
-				 S32GEN1_CLK_GMAC0_EXT_RX,
-				 S32GEN1_CLK_SERDES0_LANE0_CDR);
-static struct s32gen1_clk cgm0_mux11_clk =
-		S32GEN1_MODULE_CLK(cgm0_mux11);
-static struct s32gen1_clk gmac_rx_clk =
-		S32GEN1_CHILD_CLK(cgm0_mux11_clk, 2500000, 125 * MHZ);
-
-/* GMAC0_REF_DIV_CLK */
-static struct s32gen1_mux cgm0_mux15 =
-		S32GEN1_SHARED_MUX_INIT(S32GEN1_CGM0, 15, 2,
-					S32GEN1_CLK_FIRC,
-					S32GEN1_CLK_GMAC0_EXT_REF);
-static struct s32gen1_clk cgm0_mux15_clk =
-		S32GEN1_MODULE_CLK(cgm0_mux15);
-static struct s32gen1_clk gmac0_ref_div_clk =
-		S32GEN1_CHILD_CLK(cgm0_mux15_clk, 0, 50 * MHZ);
-static struct s32gen1_clk gmac0_ref_clk =
-		S32GEN1_CHILD_CLK(cgm0_mux15_clk, 0, 50 * MHZ);
-
-/* GMAC1_EXT_TX_CLK */
-static struct s32gen1_fixed_clock gmac1_ext_tx =
-		S32GEN1_FIXED_CLK_INIT();
-static struct s32gen1_clk gmac1_ext_tx_clk =
-		S32GEN1_MODULE_CLK(gmac1_ext_tx);
-
-/* GMAC1_EXT_REF_CLK */
-static struct s32gen1_fixed_clock gmac1_ext_ref =
-		S32GEN1_FIXED_CLK_INIT();
-static struct s32gen1_clk gmac1_ext_ref_clk =
-		S32GEN1_MODULE_CLK(gmac1_ext_ref);
-
-/* GMAC1_EXT_RX_CLK */
-static struct s32gen1_fixed_clock gmac1_ext_rx =
-		S32GEN1_FIXED_CLK_INIT();
-static struct s32gen1_clk gmac1_ext_rx_clk =
-		S32GEN1_MODULE_CLK(gmac1_ext_rx);
-
-/* GMAC1_TX_CLK */
-static struct s32gen1_mux cgm2_mux2 =
-		S32GEN1_MUX_INIT(S32GEN1_CGM2, 2, 5,
-				 S32GEN1_CLK_FIRC,
-				 S32GEN1_CLK_PERIPH_PLL_PHI5,
-				 S32R45_CLK_GMAC1_EXT_TX,
-				 S32R45_CLK_GMAC1_EXT_REF,
-				 S32R45_CLK_SERDES1_LANE0_TX);
-static struct s32gen1_clk cgm2_mux2_clk =
-		S32GEN1_MODULE_CLK(cgm2_mux2);
-static struct s32gen1_cgm_div cgm2_mux2_div =
-		S32GEN1_CGM_DIV_INIT(cgm2_mux2_clk, 0);
-static struct s32gen1_clk gmac1_tx_clk =
-		S32GEN1_FREQ_MODULE_CLK(cgm2_mux2_div, 2500000, 125 * MHZ);
-
-/* GMAC1_REF_CLK */
-static struct s32gen1_mux cgm2_mux3 =
-		S32GEN1_MUX_INIT(S32GEN1_CGM2, 3, 2,
-				 S32GEN1_CLK_FIRC,
-				 S32R45_CLK_GMAC1_EXT_REF);
-static struct s32gen1_clk cgm2_mux3_clk =
-		S32GEN1_MODULE_CLK(cgm2_mux3);
-static struct s32gen1_cgm_div cgm2_mux3_div =
-		S32GEN1_CGM_DIV_INIT(cgm2_mux3_clk, 0);
-static struct s32gen1_clk gmac1_ref_div_clk =
-		S32GEN1_FREQ_MODULE_CLK(cgm2_mux3_div, 0, 50 * MHZ);
-
-/* GMAC1_RX_CLK */
-static struct s32gen1_mux cgm2_mux4 =
-		S32GEN1_MUX_INIT(S32GEN1_CGM2, 4, 4,
-				 S32GEN1_CLK_FIRC,
-				 S32R45_CLK_GMAC1_REF_DIV,
-				 S32R45_CLK_GMAC1_EXT_RX,
-				 S32R45_CLK_SERDES1_LANE0_CDR);
-static struct s32gen1_clk cgm2_mux4_clk =
-		S32GEN1_MODULE_CLK(cgm2_mux4);
-static struct s32gen1_clk gmac1_rx_clk =
-		S32GEN1_FREQ_MODULE_CLK(cgm2_mux4_clk, 2500000, 125 * MHZ);
-
-static struct s32gen1_clk *s32r45_cc_clocks[] = {
-	[CC_ARR_CLK(S32GEN1_CLK_PER)] = &per_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_CAN_PE)] = &can_pe_clk,
-	[CC_ARR_CLK(S32R45_CLK_ACCEL_PLL_PHI0)] = &accel_pll_phi0_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_ARM_PLL_DFS4)] = &arm_dfs4_clk,
-	[CC_ARR_CLK(S32R45_CLK_ARM_PLL_DFS4_2)] = &arm_dfs4_2_clk,
-	[CC_ARR_CLK(S32R45_CLK_GMAC1_EXT_TX)] = &gmac1_ext_tx_clk,
-	[CC_ARR_CLK(S32R45_CLK_GMAC1_EXT_RX)] = &gmac1_ext_rx_clk,
-	[CC_ARR_CLK(S32R45_CLK_GMAC1_EXT_REF)] = &gmac1_ext_ref_clk,
-	[CC_ARR_CLK(S32R45_CLK_SERDES1_LANE0_TX)] = &serdes1_lane0_tx_clk,
-	[CC_ARR_CLK(S32R45_CLK_SERDES1_LANE0_CDR)] = &serdes1_lane0_cdr_clk,
-	[CC_ARR_CLK(S32R45_CLK_GMAC1_REF_DIV)] = &gmac1_ref_div_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_MC_CGM0_MUX10)] = &cgm0_mux10_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_TX)] = &gmac_tx_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_EXT_TS)] = &gmac_ext_ts_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_MC_CGM0_MUX9)] = &cgm0_mux9_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_TS)] = &gmac_ts_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_EXT_TX)] = &gmac0_ext_tx_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_EXT_REF)] = &gmac0_ext_ref_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_EXT_RX)] = &gmac0_ext_rx_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_MC_CGM0_MUX11)] = &cgm0_mux11_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_RX)] = &gmac_rx_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_MC_CGM0_MUX15)] = &cgm0_mux15_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_REF_DIV)] = &gmac0_ref_div_clk,
-	[CC_ARR_CLK(S32GEN1_CLK_GMAC0_REF)] = &gmac0_ref_clk,
-};
-
-static struct s32gen1_clk *s32r45_clocks[] = {
-	[ARR_CLK(S32R45_CLK_MC_CGM2_MUX0)] = &cgm2_mux0_clk,
-	[ARR_CLK(S32R45_CLK_ACCEL3)] = &accel3_clk,
-	[ARR_CLK(S32R45_CLK_ACCEL3_DIV3)] = &accel3_div3_clk,
-	[ARR_CLK(S32R45_CLK_MC_CGM2_MUX1)] = &cgm2_mux1_clk,
-	[ARR_CLK(S32R45_CLK_ACCEL4)] = &accel4_clk,
-	[ARR_CLK(S32R45_CLK_MC_CGM2_MUX2)] = &cgm2_mux2_clk,
-	[ARR_CLK(S32R45_CLK_GMAC1_TX)] = &gmac1_tx_clk,
-	[ARR_CLK(S32R45_CLK_MC_CGM2_MUX3)] = &cgm2_mux3_clk,
-	[ARR_CLK(S32R45_CLK_MC_CGM2_MUX4)] = &cgm2_mux4_clk,
-	[ARR_CLK(S32R45_CLK_GMAC1_RX)] = &gmac1_rx_clk,
-};
-
-struct s32gen1_clk *get_plat_cc_clock(uint32_t id)
-{
-	id -= S32GEN1_CLK_ID_BASE;
-
-	if (id >= ARRAY_SIZE(s32r45_cc_clocks))
-		return NULL;
-
-	return s32r45_cc_clocks[id];
-}
-
-struct s32gen1_clk *get_plat_clock(uint32_t id)
-{
-	if (id < S32GEN1_PLAT_CLK_ID_BASE)
-		return NULL;
-
-	id -= S32GEN1_PLAT_CLK_ID_BASE;
-
-	if (id >= ARRAY_SIZE(s32r45_clocks))
-		return NULL;
-
-	return s32r45_clocks[id];
-}
-
-ulong s32gen1_plat_set_rate(struct clk *c, ulong rate)
-{
-	ulong qspi_max_rate;
-
-	if (s32gen1_scmi_request(c))
-		return 0;
-
-	if (is_qspi_clk(c->id)) {
-		if (is_qspi2x_clk(c->id))
-			qspi_max_rate = S32GEN1_QSPI_MAX_FREQ * 2;
-		else
-			qspi_max_rate = S32GEN1_QSPI_MAX_FREQ;
-
-		if (rate > qspi_max_rate)
-			rate = qspi_max_rate;
-	}
-
-	return s32gen1_scmi_set_rate(c, rate);
-}
-
-int cc_compound_clk_get_pid(u32 id, u32 *parent_id)
-{
-	if (!parent_id)
-		return -EINVAL;
-
-	switch (id) {
-	case S32GEN1_SCMI_CLK_GMAC0_RX_SGMII:
-	case S32GEN1_SCMI_CLK_GMAC0_RX_RGMII:
-		*parent_id = S32GEN1_CLK_MC_CGM0_MUX11;
-		break;
-	case S32GEN1_SCMI_CLK_GMAC0_TX_RGMII:
-	case S32GEN1_SCMI_CLK_GMAC0_TX_SGMII:
-		*parent_id = S32GEN1_CLK_MC_CGM0_MUX10;
-		break;
-	case S32GEN1_SCMI_CLK_GMAC0_TS:
-		*parent_id = S32GEN1_CLK_MC_CGM0_MUX9;
-		break;
-	default:
-		return -EINVAL;
-	}
-
-	return 0;
-}
-
-const struct siul2_freq_mapping siul2_clk_freq_map[] = {
-	SIUL2_FREQ_MAP(SIUL2_MIDR2_FREQ_VAL1, S32GEN1_A53_MAX_FREQ,
-			S32GEN1_ARM_PLL_VCO_MAX_FREQ,
-			S32GEN1_ARM_PLL_PHI0_MAX_FREQ,
-			S32GEN1_XBAR_2X_MAX_FREQ),
-	{} /* empty entry */
-};
diff --git a/drivers/clk/s32/s32r45_scmi_ids.c b/drivers/clk/s32/s32r45_scmi_ids.c
deleted file mode 100644
index 9a4d0532a3..0000000000
--- a/drivers/clk/s32/s32r45_scmi_ids.c
+++ /dev/null
@@ -1,215 +0,0 @@
-// SPDX-License-Identifier: BSD-3-Clause
-/*
- * Copyright 2020-2021 NXP
- */
-#include <dt-bindings/clock/s32r45-clock.h>
-#include <dt-bindings/clock/s32r45-scmi-clock.h>
-#include <errno.h>
-#include <linux/kernel.h>
-#include <s32gen1_clk_funcs.h>
-#include <s32gen1_scmi_clk.h>
-
-#define INDEX(X)	((X) - S32GEN1_SCMI_PLAT_CLK_BASE_ID)
-
-static u32 s32r45_scmi_ids[] = {
-	/* LAX */
-	[INDEX(S32R45_SCMI_CLK_LAX_MODULE)] = S32R45_CLK_ACCEL4,
-	/* SPT */
-	[INDEX(S32R45_SCMI_CLK_SPT_SPT)] = S32R45_CLK_ACCEL3,
-	[INDEX(S32R45_SCMI_CLK_SPT_AXI)] = S32R45_CLK_ACCEL3,
-	[INDEX(S32R45_SCMI_CLK_SPT_MODULE)] = S32R45_CLK_ACCEL3_DIV3,
-	/* GMAC1 */
-	[INDEX(S32R45_SCMI_CLK_GMAC1_RX_SGMII)] = S32GEN1_SCMI_COMPLEX_CLK,
-	[INDEX(S32R45_SCMI_CLK_GMAC1_TX_SGMII)] = S32GEN1_SCMI_COMPLEX_CLK,
-	[INDEX(S32R45_SCMI_CLK_GMAC1_TS)] = S32GEN1_SCMI_COMPLEX_CLK,
-};
-
-static int s32r_compound2clkid(u32 scmi_clk_id, u32 *clk_id)
-{
-	switch (scmi_clk_id) {
-	case S32R45_SCMI_CLK_GMAC1_RX_SGMII:
-	case S32R45_SCMI_CLK_GMAC1_RX_RGMII:
-		if (clk_id)
-			*clk_id = S32R45_CLK_GMAC1_RX;
-		break;
-	case S32R45_SCMI_CLK_GMAC1_TX_SGMII:
-	case S32R45_SCMI_CLK_GMAC1_TX_RGMII:
-		if (clk_id)
-			*clk_id = S32R45_CLK_GMAC1_TX;
-		break;
-	case S32R45_SCMI_CLK_GMAC1_TS:
-		if (clk_id)
-			*clk_id = S32GEN1_CLK_GMAC0_TS;
-		break;
-	default:
-		return -EINVAL;
-	}
-
-	return 0;
-}
-
-int plat_scmi_id2clk(u32 scmi_clk_id, u32 *clk_id)
-{
-	if (!clk_id)
-		return -EINVAL;
-
-	if (INDEX(scmi_clk_id) >= ARRAY_SIZE(s32r45_scmi_ids)) {
-		pr_err("Unhandled clock (index out of bounds): %u\n",
-		       scmi_clk_id);
-		return -EINVAL;
-	}
-
-	*clk_id = s32r45_scmi_ids[INDEX(scmi_clk_id)];
-	if (!*clk_id) {
-		pr_err("Unhandled clock (no clock id): %u\n", scmi_clk_id);
-		return -EINVAL;
-	}
-
-	return 0;
-}
-
-int plat_compound_clk_get(struct clk *clk)
-{
-	u32 scmi_clk_id = clk->id;
-
-	if (INDEX(scmi_clk_id) >= ARRAY_SIZE(s32r45_scmi_ids))
-		return -EINVAL;
-
-	if (s32r_compound2clkid(scmi_clk_id, NULL)) {
-		pr_err("Invalid compound clock : %u\n", scmi_clk_id);
-		return -EINVAL;
-	}
-
-	return 0;
-}
-
-static int set_gmac1_rx_parent(struct clk *clk)
-{
-	u32 rx_id;
-	u32 clk_id = clk->id;
-
-	if (clk_id == S32R45_SCMI_CLK_GMAC1_RX_SGMII) {
-		rx_id = S32R45_CLK_SERDES1_LANE0_CDR;
-	} else {
-		pr_err("Invalid GMAC RX mode\n");
-		return -EINVAL;
-	}
-
-	return cc_set_mux_parent(clk, S32R45_CLK_MC_CGM2_MUX4, rx_id);
-}
-
-static int set_gmac1_tx_parent(struct clk *clk)
-{
-	u32 tx_id;
-	u32 clk_id = clk->id;
-
-	if (clk_id == S32R45_SCMI_CLK_GMAC1_TS) {
-		tx_id = S32GEN1_CLK_PERIPH_PLL_PHI5;
-	} else if (clk_id == S32R45_SCMI_CLK_GMAC1_TX_SGMII) {
-		tx_id = S32R45_CLK_SERDES1_LANE0_TX;
-	} else {
-		pr_err("Invalid GMAC TX mode\n");
-		return -EINVAL;
-	}
-
-	return cc_set_mux_parent(clk, S32R45_CLK_MC_CGM2_MUX2, tx_id);
-}
-
-static int set_gmac_ts_parent(struct clk *clk)
-{
-	u32 ts_id;
-	u32 clk_id = clk->id;
-
-	if (clk_id == S32R45_SCMI_CLK_GMAC1_TS) {
-		ts_id = S32GEN1_CLK_PERIPH_PLL_PHI4;
-	} else {
-		pr_err("Invalid GMAC TS mode\n");
-		return -EINVAL;
-	}
-
-	return cc_set_mux_parent(clk, S32GEN1_CLK_MC_CGM0_MUX9, ts_id);
-}
-
-int plat_compound_clk_set_parents(struct clk *clk)
-{
-	u32 clk_id = clk->id;
-	u32 id;
-
-	if (s32r_compound2clkid(clk_id, &id)) {
-		pr_err("Invalid compound clock : %u\n", clk_id);
-		return -EINVAL;
-	}
-
-	switch (id) {
-	case S32R45_CLK_GMAC1_RX:
-		return set_gmac1_rx_parent(clk);
-	case S32R45_CLK_GMAC1_TX:
-		return set_gmac1_tx_parent(clk);
-	case S32GEN1_CLK_GMAC0_TS:
-		return set_gmac_ts_parent(clk);
-	default:
-		return plat_compound_clk_set_parents(clk);
-	}
-
-}
-
-int plat_compound_clk_enable(struct clk *clk)
-{
-	struct clk sclock = *clk;
-	u32 clk_id = clk->id;
-	u32 id;
-	int ret;
-
-	if (s32r_compound2clkid(clk_id, &id)) {
-		pr_err("Invalid s3245 compound clock : %u\n", clk_id);
-		return -EINVAL;
-	}
-
-	ret = plat_compound_clk_set_parents(clk);
-	if (ret) {
-		pr_err("Failed to set parents for %u\n", clk_id);
-		return -EINVAL;
-	}
-
-	sclock.id = id;
-	ret = s32gen1_enable(&sclock);
-	if (ret) {
-		pr_err("%s Failed to enable %u clock\n", __func__, clk_id);
-		return ret;
-	}
-
-	return 0;
-
-}
-
-ulong plat_compound_clk_set_rate(struct clk *clk, ulong rate)
-{
-	struct clk sclock = *clk;
-	u32 scmi_clk_id = clk->id;
-	u32 id;
-	int ret;
-
-	if (INDEX(scmi_clk_id) >= ARRAY_SIZE(s32r45_scmi_ids))
-		return -EINVAL;
-
-	ret = plat_compound_clk_set_parents(clk);
-	if (ret) {
-		pr_err("Failed to set parents for %u\n", scmi_clk_id);
-		return -EINVAL;
-	}
-
-	if (s32r_compound2clkid(scmi_clk_id, &id)) {
-		pr_err("Invalid compound clock : %u\n", scmi_clk_id);
-		return -EINVAL;
-	}
-
-	sclock.id = id;
-	return s32gen1_set_rate(&sclock, rate);
-
-}
-
-ulong plat_compound_clk_get_rate(struct clk *clk)
-{
-	return 0;
-}
-
diff --git a/drivers/clk/s32/set_par_rate.c b/drivers/clk/s32/set_par_rate.c
deleted file mode 100644
index 6307a36c28..0000000000
--- a/drivers/clk/s32/set_par_rate.c
+++ /dev/null
@@ -1,305 +0,0 @@
-// SPDX-License-Identifier: BSD-3-Clause
-/*
- * Copyright 2020 NXP
- */
-#include <command.h>
-#include <log.h>
-#include <linux/printk.h>
-#include <s32gen1_clk_funcs.h>
-#include <s32gen1_clk_modules.h>
-
-static ulong set_module_rate(struct s32gen1_clk_obj *module, ulong rate);
-
-static ulong set_pll_freq(struct s32gen1_clk_obj *module, ulong rate)
-{
-	struct s32gen1_pll *pll = obj2pll(module);
-
-	if (pll->vco_freq && pll->vco_freq != rate) {
-		pr_err("PLL frequency was already set\n");
-		return 0;
-	}
-
-	pll->vco_freq = rate;
-	return rate;
-}
-
-static ulong set_pll_div_freq(struct s32gen1_clk_obj *module, ulong rate)
-{
-	struct s32gen1_pll_out_div *div = obj2plldiv(module);
-	struct s32gen1_pll *pll;
-
-	if (!div->parent) {
-		pr_err("Failed to identify PLL divider's parent\n");
-		return 0;
-	}
-
-	pll = obj2pll(div->parent);
-	if (!pll) {
-		pr_err("The parent of the PLL DIV is invalid\n");
-		return 0;
-	}
-
-	if (div->freq && div->freq != rate) {
-		pr_err("PLL DIV frequency was already set to %lu\n", div->freq);
-		return 0;
-	}
-
-	div->freq = rate;
-	return rate;
-}
-
-static ulong set_dfs_div_freq(struct s32gen1_clk_obj *module, ulong rate)
-{
-	struct s32gen1_dfs_div *div = obj2dfsdiv(module);
-	struct s32gen1_dfs *dfs;
-
-	if (!div->parent) {
-		pr_err("Failed to identify DFS divider's parent\n");
-		return 0;
-	}
-
-	/* Sanity check */
-	dfs = obj2dfs(div->parent);
-	if (!dfs->source) {
-		pr_err("Failed to identify DFS's parent\n");
-		return 0;
-	}
-
-	if (div->freq && div->freq != rate) {
-		pr_err("DFS DIV frequency was already set to %lu\n", div->freq);
-		return 0;
-	}
-
-	div->freq = rate;
-	return rate;
-}
-
-static ulong set_cgm_div_freq(struct s32gen1_clk_obj *module, ulong rate)
-{
-	struct s32gen1_cgm_div *div = obj2cgmdiv(module);
-
-	if (!div->parent) {
-		pr_err("Failed to identify DCGM divider's parent\n");
-		return 0;
-	}
-
-	div->freq = rate;
-	return rate;
-}
-
-static ulong set_clk_freq(struct s32gen1_clk_obj *module, ulong rate)
-{
-	struct s32gen1_clk *clk = obj2clk(module);
-
-	if ((clk->min_freq && clk->max_freq) &&
-	    (rate < clk->min_freq || rate > clk->max_freq)) {
-		pr_err("%lu frequency is out of the allowed range: [%lu:%lu]\n",
-		       rate, clk->min_freq, clk->max_freq);
-		return 0;
-	}
-
-	if (clk->module)
-		return set_module_rate(clk->module, rate);
-
-	if (clk->pclock)
-		return set_clk_freq(&clk->pclock->desc, rate);
-
-	return 0;
-}
-
-static ulong set_fixed_div_freq(struct s32gen1_clk_obj *module, ulong rate)
-{
-	struct s32gen1_fixed_div *div = obj2fixeddiv(module);
-
-	if (!div->parent) {
-		pr_err("The divider doesn't have a valid parent\b");
-		return 0;
-	}
-
-	return set_module_rate(div->parent, rate * div->div);
-}
-
-static ulong set_mux_freq(struct s32gen1_clk_obj *module, ulong rate)
-{
-	struct s32gen1_mux *mux = obj2mux(module);
-	struct s32gen1_clk *clk = get_clock(mux->source_id);
-
-	if (!clk) {
-		pr_err("Mux without a valid source\n");
-		return 0;
-	}
-
-	return set_module_rate(&clk->desc, rate);
-}
-
-static ulong set_osc_freq(struct s32gen1_clk_obj *module, ulong rate)
-{
-	struct s32gen1_osc *osc = obj2osc(module);
-
-	if (osc->freq && rate != osc->freq) {
-		pr_err("Already initialized oscillator. freq = %lu\n",
-		       osc->freq);
-		return 0;
-	}
-
-	osc->freq = rate;
-
-	return osc->freq;
-}
-
-static ulong set_fixed_clk_freq(struct s32gen1_clk_obj *module, ulong rate)
-{
-	struct s32gen1_fixed_clock *fixed_clk = obj2fixedclk(module);
-
-	if (fixed_clk->freq && rate != fixed_clk->freq) {
-		pr_err("Already initialized clock. Current freq = %lu Req freq = %lu\n",
-		       fixed_clk->freq, rate);
-		return 0;
-	}
-
-	fixed_clk->freq = rate;
-
-	return fixed_clk->freq;
-}
-
-static ulong set_part_block_freq(struct s32gen1_clk_obj *module, ulong rate)
-{
-	struct s32gen1_part_block *block = obj2partblock(module);
-
-	if (!block->parent)
-		pr_err("Partition block with no parent\n");
-
-	return set_module_rate(block->parent, rate);
-}
-
-static ulong set_module_rate(struct s32gen1_clk_obj *module, ulong rate)
-{
-	switch (module->type) {
-	case s32gen1_fixed_clk_t:
-		return set_fixed_clk_freq(module, rate);
-	case s32gen1_osc_t:
-		return set_osc_freq(module, rate);
-	case s32gen1_pll_t:
-		return set_pll_freq(module, rate);
-	case s32gen1_pll_out_div_t:
-		return set_pll_div_freq(module, rate);
-	case s32gen1_dfs_div_t:
-		return set_dfs_div_freq(module, rate);
-	case s32gen1_clk_t:
-		return set_clk_freq(module, rate);
-	case s32gen1_mux_t:
-	case s32gen1_shared_mux_t:
-		return set_mux_freq(module, rate);
-	case s32gen1_fixed_div_t:
-		return set_fixed_div_freq(module, rate);
-	case s32gen1_part_block_t:
-		return set_part_block_freq(module, rate);
-	case s32gen1_cgm_div_t:
-		return set_cgm_div_freq(module, rate);
-	case s32gen1_dfs_t:
-		pr_err("It's not allowed to set the frequency of a DFS !");
-		return 0;
-	};
-
-	return 0;
-}
-
-ulong s32gen1_set_rate(struct clk *c, ulong rate)
-{
-	struct s32gen1_clk *clk;
-
-	clk = get_clock(c->id);
-	if (!clk)
-		return 0;
-
-	rate = set_module_rate(&clk->desc, rate);
-	if (rate == 0)
-		pr_err("Failed to set frequency for clock %ld\n", c->id);
-
-	return rate;
-}
-
-static bool check_mux_source(struct s32gen1_mux *mux, uint32_t source_id)
-{
-	u8 i;
-
-	for (i = 0; i < mux->nclks; i++) {
-		if (mux->clkids[i] == source_id)
-			return true;
-	}
-
-	return false;
-}
-
-static int update_frequency(struct clk *c, struct clk *p,
-			    struct s32gen1_clk *clk, struct s32gen1_clk *parent)
-{
-	ulong rate;
-
-	if (!(is_osc(parent) || is_fixed_clk(parent))) {
-		pr_err("Unknown module type: %d\n", parent->desc.type);
-		return -EINVAL;
-	}
-
-	rate = clk_get_rate(p);
-	if (rate == 0) {
-		pr_err("Failed to get the frequency of clock %lu\n", p->id);
-		return -EINVAL;
-	}
-
-	if (set_module_rate(parent->module, rate) != rate)
-		return -EINVAL;
-
-	return 0;
-}
-
-int s32gen1_set_parent(struct clk *c, struct clk *p)
-{
-	struct s32gen1_clk *clk, *parent;
-	struct s32gen1_mux *mux;
-	int ret;
-
-	if (!c || !p)
-		return -EINVAL;
-
-	clk = get_clock(c->id);
-
-	if (!clk) {
-		pr_err("Invalid clock\n");
-		return -EINVAL;
-	}
-
-	/* The parent is a fixed /external clock */
-	if (p->dev != c->dev && (is_fixed_clk(clk) || is_osc(clk))) {
-		ret = update_frequency(c, p, clk, clk);
-		if (ret)
-			return ret;
-		return 0;
-	}
-
-	parent = get_clock(p->id);
-	if (!parent) {
-		pr_err("Invalid parent\n");
-		return -EINVAL;
-	}
-
-	if (!is_mux(clk)) {
-		pr_err("Clock %ld is not a mux\n", c->id);
-		return -EINVAL;
-	}
-
-	mux = clk2mux(clk);
-	if (!mux) {
-		pr_err("Failed to cast clock %ld to clock mux\n", c->id);
-		return -EINVAL;
-	}
-
-	if (!check_mux_source(mux, p->id)) {
-		pr_err("Clock %ld is not a valid clock for mux %ld\n",
-		       p->id, c->id);
-		return -EINVAL;
-	}
-
-	mux->source_id = p->id;
-	return 0;
-}
-- 
2.17.1

