From 7bae47c72d1e03f81bbbe6640d09ab1aae89c6fa Mon Sep 17 00:00:00 2001
From: Andrei Cherechesu <andrei.cherechesu@nxp.com>
Date: Wed, 9 Feb 2022 18:04:53 +0200
Subject: [PATCH 33/43] qspi: Read QSPI clock from dts

Modified the QSPI driver to read and enable the clocks
from the device tree.

Issue: ALB-8352
Upstream-Status: Pending 

Signed-off-by: Andrei Cherechesu <andrei.cherechesu@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 arch/arm/dts/fsl-s32-gen1.dtsi |  3 +++
 drivers/spi/fsl_qspi.c         | 41 +++++++++++++++++++++++++++++++++-
 2 files changed, 43 insertions(+), 1 deletion(-)

diff --git a/arch/arm/dts/fsl-s32-gen1.dtsi b/arch/arm/dts/fsl-s32-gen1.dtsi
index b507b9d41a..1fc6af34f9 100644
--- a/arch/arm/dts/fsl-s32-gen1.dtsi
+++ b/arch/arm/dts/fsl-s32-gen1.dtsi
@@ -596,6 +596,9 @@
 		reg = <0x0 0x00000000 0x0 0x20000000>,
 			<0x0 0x40134000 0x0 0x1000>;
 		reg-names = "QuadSPI-memory", "QuadSPI";
+		clock-names = "qspi_en", "qspi";
+		clocks = <&clks S32GEN1_SCMI_CLK_QSPI_FLASH1X>,
+			 <&clks S32GEN1_SCMI_CLK_QSPI_FLASH1X>;
 		num-cs = <2>;
 		status = "disabled";
 	};
diff --git a/drivers/spi/fsl_qspi.c b/drivers/spi/fsl_qspi.c
index 386b485251..1ee56c16dd 100644
--- a/drivers/spi/fsl_qspi.c
+++ b/drivers/spi/fsl_qspi.c
@@ -1,12 +1,13 @@
 // SPDX-License-Identifier: GPL-2.0+
 /*
  * Copyright 2013-2015 Freescale Semiconductor, Inc.
- * Copyright 2020-2021 NXP
+ * Copyright 2020-2022 NXP
  *
  * Freescale Quad Serial Peripheral Interface (QSPI) driver
  */
 #include <malloc.h>
 #include <spi.h>
+#include <clk.h>
 #include <asm/io.h>
 #include <linux/sizes.h>
 #include <linux/iopoll.h>
@@ -956,6 +957,32 @@ static int fsl_qspi_child_pre_probe(struct udevice *dev)
 	return 0;
 }
 
+static __maybe_unused ulong fsl_qspi_clk_get_rate(struct udevice *bus)
+{
+	int ret;
+	struct clk clk_qspi_en, clk_qspi;
+
+	ret = clk_get_by_name(bus, "qspi_en", &clk_qspi_en);
+	if (ret)
+		return ret;
+
+	ret = clk_get_by_name(bus, "qspi", &clk_qspi);
+	if (ret)
+		return ret;
+
+	ret = clk_enable(&clk_qspi_en);
+	if (ret)
+		return ret;
+
+	ret = clk_enable(&clk_qspi);
+	if (ret) {
+		clk_disable(&clk_qspi_en);
+		return ret;
+	}
+
+	return clk_get_rate(&clk_qspi);
+}
+
 static int fsl_qspi_probe(struct udevice *bus)
 {
 	u32 amba_size_per_chip;
@@ -967,7 +994,15 @@ static int fsl_qspi_probe(struct udevice *bus)
 
 	dm_spi_bus = bus->uclass_priv;
 
+#if defined(CONFIG_S32_GEN1)
+	dm_spi_bus->max_hz = fsl_qspi_clk_get_rate(bus);
+	if (!dm_spi_bus->max_hz) {
+		printf("Invalid clk rate: %u\n", dm_spi_bus->max_hz);
+		return -EINVAL;
+	}
+#else
 	dm_spi_bus->max_hz = plat->speed_hz;
+#endif
 
 	priv->regs = (struct fsl_qspi_regs *)(uintptr_t)plat->reg_base;
 	priv->flags = plat->flags;
@@ -980,7 +1015,11 @@ static int fsl_qspi_probe(struct udevice *bus)
 	s32gen1_reset_bootrom_settings(priv);
 #endif
 
+#if defined(CONFIG_S32_GEN1)
+	priv->speed_hz = dm_spi_bus->max_hz;
+#else
 	priv->speed_hz = plat->speed_hz;
+#endif
 	/*
 	 * QSPI SFADR width is 32bits, the max dest addr is 4GB-1.
 	 * AMBA memory zone should be located on the 0~4GB space
-- 
2.17.1

