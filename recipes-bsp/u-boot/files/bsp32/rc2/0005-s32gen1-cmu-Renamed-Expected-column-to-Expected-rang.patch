From 32552edd6cc42a839d751038157df1065e019e74 Mon Sep 17 00:00:00 2001
From: Ghennadi Procopciuc <ghennadi.procopciuc@nxp.com>
Date: Thu, 16 Dec 2021 07:49:40 +0200
Subject: [PATCH 5/9] s32gen1: cmu: Renamed 'Expected' column to 'Expected
 range'

Issue: ALB-8219
Upstream-Status: Pending 

Signed-off-by: Ghennadi Procopciuc <ghennadi.procopciuc@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 arch/arm/cpu/armv8/s32/s32-gen1/cmu.c         |  73 +++++++++---
 arch/arm/cpu/armv8/s32/s32-gen1/include/cmu.h | 112 +++++++++++-------
 arch/arm/cpu/armv8/s32/s32-gen1/s32g2_cmu.c   |  63 +++++-----
 arch/arm/cpu/armv8/s32/s32-gen1/s32g3_cmu.c   |  82 ++++++-------
 arch/arm/cpu/armv8/s32/s32-gen1/s32r45_cmu.c  |  60 +++++-----
 5 files changed, 226 insertions(+), 164 deletions(-)

diff --git a/arch/arm/cpu/armv8/s32/s32-gen1/cmu.c b/arch/arm/cpu/armv8/s32/s32-gen1/cmu.c
index e0993b6309..123f6db552 100644
--- a/arch/arm/cpu/armv8/s32/s32-gen1/cmu.c
+++ b/arch/arm/cpu/armv8/s32/s32-gen1/cmu.c
@@ -105,7 +105,7 @@ static u32 u32_get_digits(u32 val)
 	return digits;
 }
 
-static u32 get_ndigits(double val)
+static u32 get_ndigits(double val, u32 precision)
 {
 	u32 digits = 0;
 	u32 val32 = (u32)val;
@@ -116,21 +116,34 @@ static u32 get_ndigits(double val)
 	digits++;
 
 	/* Fractional part */
-	digits += 3;
+	precision /= 10;
+	while (precision) {
+		digits++;
+		precision /= 10;
+	}
 
 	return digits;
 }
 
-static void print_double(double val, u32 space)
+static void print_double(double val, u32 space, u32 precision)
 {
 	size_t i;
+	size_t ndigits;
 	u32 val32 = (u32)val;
-	u32 frac = (u32)((val - (double)val32) * 1000.0);
+	u32 frac = (u32)((val - (double)val32) * (double)precision);
 
-	for (i = 0; i < space - get_ndigits(val); i++)
-		printf(" ");
+	ndigits = get_ndigits(val, precision);
+	if (space > ndigits) {
+		for (i = 0; i < space - ndigits; i++)
+			printf(" ");
+	}
 
-	printf("%" PRIu32 ".%03" PRIu32, val32, frac);
+	if (precision == 1000)
+		printf("%" PRIu32 ".%03" PRIu32, val32, frac);
+	else if (precision == 100)
+		printf("%" PRIu32 ".%02" PRIu32, val32, frac);
+	else
+		printf("%" PRIu32 ".%01" PRIu32, val32, frac);
 }
 
 static int calc_cmu_ref_cnt(double ref_clk, double mon_clk,
@@ -292,12 +305,20 @@ static int get_fc_mon_freq(struct cmu *inst,
 	return _get_fc_mon_freq(inst, freq_int, MAX_DEPTH);
 }
 
+static double get_max_exp_freq(struct cmu *inst)
+{
+	if (inst->has_exp_range)
+		return inst->exp_range.max;
+
+	return inst->exp_freq;
+}
+
 static int get_fm_mon_freq(struct cmu *inst, double *mon_freq)
 {
 	struct cmu_fm_params cmu_fm;
 	u32 met_cnt, sr;
 
-	if (get_fm_params(inst->ref_freq, inst->mon_freq, &cmu_fm))
+	if (get_fm_params(inst->ref_freq, get_max_exp_freq(inst), &cmu_fm))
 		return -1;
 
 	/* Disable the module*/
@@ -333,6 +354,18 @@ static int get_fm_mon_freq(struct cmu *inst, double *mon_freq)
 	return 0;
 }
 
+static void print_expected_freq(struct cmu *inst)
+{
+	if (inst->has_exp_range) {
+		print_double(inst->exp_range.min, 5, 10);
+		puts(" - ");
+		print_double(inst->exp_range.max, 5, 10);
+		return;
+	}
+
+	print_double(inst->exp_freq, 12, 1);
+}
+
 static int do_verify_clocks(cmd_tbl_t *cmdtp, int flag, int argc,
 			    char * const argv[])
 {
@@ -342,12 +375,12 @@ static int do_verify_clocks(cmd_tbl_t *cmdtp, int flag, int argc,
 	double max_var;
 	double mon_freq = 0;
 
-	puts("    CMU    |     Monitored    | Reference | Expected ");
-	puts("|  Verified interval \n");
-	puts("  Address  |       clock      |   clock   |   (MHz)  ");
-	puts("|       (MHz)       \n");
-	puts("-----------|------------------|-----------|----------");
-	puts("|--------------------\n");
+	puts(" CMU       | Monitored    | Reference | Expected      |");
+	puts(" Verified\n");
+	puts(" Address   | clock        | clock     | range (MHz)   |");
+	puts(" range (MHz)\n");
+	puts("-----------|--------------|-----------|---------------|");
+	puts("--------------------\n");
 
 	for (i = 0; i < get_cmu_blocks_number(); i++) {
 		inst = get_cmu_block(i);
@@ -365,16 +398,18 @@ static int do_verify_clocks(cmd_tbl_t *cmdtp, int flag, int argc,
 
 		printf("0x%" PRIxPTR " |", inst->addr);
 		max_var = min(inst->mon_var, inst->ref_var);
-		printf(" %16s | ", inst->mon_name);
+		printf(" %12s | ", inst->mon_name);
 		printf("%9s | ", inst->ref_name);
-		print_double(inst->mon_freq, 8);
+		print_expected_freq(inst);
 		printf(" | ");
 		if (inst->fc) {
-			print_double(get_min_freq(freq_int.min, max_var), 8);
+			print_double(get_min_freq(freq_int.min, max_var),
+				     8, 1000);
 			printf(" - ");
-			print_double(get_max_freq(freq_int.max, max_var), 8);
+			print_double(get_max_freq(freq_int.max, max_var),
+				     8, 1000);
 		} else {
-			print_double(mon_freq, 19);
+			print_double(mon_freq, 19, 1000);
 		}
 		printf("\n");
 	}
diff --git a/arch/arm/cpu/armv8/s32/s32-gen1/include/cmu.h b/arch/arm/cpu/armv8/s32/s32-gen1/include/cmu.h
index 7ace47dea7..f7949022e7 100644
--- a/arch/arm/cpu/armv8/s32/s32-gen1/include/cmu.h
+++ b/arch/arm/cpu/armv8/s32/s32-gen1/include/cmu.h
@@ -23,7 +23,7 @@
 #define FXOSC_FREQ			((double)40)
 #define SIRC_FREQ			((double)0.032)
 
-#define CMU(ID, REF_CLK, MON_CLK, REF_FRQ, MON_FRQ, REF_VAR, MON_VAR, FC) \
+#define CMU(ID, REF_CLK, MON_CLK, REF_FRQ, EXP_FRQ, REF_VAR, MON_VAR, FC) \
 {\
 	.addr = CMU_BASE_ADDR + 0x20 * (ID),\
 	.ref_clk = (REF_CLK),\
@@ -31,66 +31,87 @@
 	.ref_name = STR(REF_CLK),\
 	.mon_name = STR(MON_CLK),\
 	.ref_freq = (REF_FRQ),\
-	.mon_freq = (MON_FRQ),\
+	.has_exp_range = false,\
+	.exp_freq = (EXP_FRQ),\
+	.ref_var = (REF_VAR),\
+	.mon_var = (MON_VAR),\
+	.fc = (FC),\
+}
+
+#define CMU_EXP_RANGE(ID, REF_CLK, MON_CLK, REF_FRQ, EXP_MIN, EXP_MAX,\
+		      REF_VAR, MON_VAR, FC) \
+{\
+	.addr = CMU_BASE_ADDR + 0x20 * (ID),\
+	.ref_clk = (REF_CLK),\
+	.mon_clk = (MON_CLK),\
+	.ref_name = STR(REF_CLK),\
+	.mon_name = STR(MON_CLK),\
+	.ref_freq = (REF_FRQ),\
+	.has_exp_range = true,\
+	.exp_range = { .min = (EXP_MIN), .max = (EXP_MAX) },\
 	.ref_var = (REF_VAR),\
 	.mon_var = (MON_VAR),\
 	.fc = (FC),\
 }
 
 #define FXOSC_PERIPH_CMU_FC(ID, MON, MON_FRQ) \
-	CMU(ID, FXOSC_CLK, MON, FXOSC_FREQ, MON_FRQ, \
+	CMU(ID, FXOSC, MON, FXOSC_FREQ, MON_FRQ, \
+			FXOSC_VARIATION, PERIPH_VARIATION, true)
+
+#define FXOSC_PERIPH_CMU_FC_RANGE(ID, MON, MIN_FRQ, MAX_FRQ) \
+	CMU_EXP_RANGE(ID, FXOSC, MON, FXOSC_FREQ, MIN_FRQ, MAX_FRQ, \
 			FXOSC_VARIATION, PERIPH_VARIATION, true)
 
 #define FIRC_PERIPH_CMU_FC(ID, MON, MON_FRQ) \
-	CMU(ID, FIRC_CLK, MON, FIRC_FREQ, MON_FRQ, \
+	CMU(ID, FIRC, MON, FIRC_FREQ, MON_FRQ, \
 			FIRC_VARIATION, PERIPH_VARIATION, true)
 
 #define FXOSC_PERIPH_CMU_FM(ID, MON, MON_FRQ) \
-	CMU(ID, FXOSC_CLK, MON, FXOSC_FREQ, MON_FRQ, \
+	CMU(ID, FXOSC, MON, FXOSC_FREQ, MON_FRQ, \
 			0, 0, false)
 
 #define FIRC_PERIPH_CMU_FM(ID, MON, MON_FRQ) \
-	CMU(ID, FIRC_CLK, MON, FIRC_FREQ, MON_FRQ, \
+	CMU(ID, FIRC, MON, FIRC_FREQ, MON_FRQ, \
 			0, 0, false)
 
 enum cmu_fc_clk {
-	FIRC_CLK,
-	FXOSC_CLK,
-	SIRC_CLK,
-	XBAR_CLK_M7_0,
-	XBAR_CLK_M7_1,
-	XBAR_CLK_M7_2,
-	XBAR_CLK_M7_3,
-	XBAR_DIV3_CLK,
-	SERDES_REF_CLK,
-	PER_CLK,
-	CAN_PE_CLK,
-	LIN_CLK,
-	QSPI_1X_CLK,
-	SDHC_CLK,
-	DDR_CLK,
-	SPI_CLK,
-	A53_CORE_CLK,
-	ACCEL3_CLK,
-	ACCEL4_CLK_0,
-	ACCEL4_CLK_1,
+	FIRC,
+	FXOSC,
+	SIRC,
+	XBAR_M7_0,
+	XBAR_M7_1,
+	XBAR_M7_2,
+	XBAR_M7_3,
+	XBAR_DIV3,
+	SERDES_REF,
+	PER,
+	CAN_PE,
+	LIN,
+	QSPI_1X,
+	SDHC,
+	DDR,
+	SPI,
+	A53_CORE,
+	ACCEL3,
+	ACCEL4_0,
+	ACCEL4_1,
 	MIPICSI2_0,
 	MIPICSI2_2,
-	GMAC_TS_CLK,
-	GMAC_0_TX_CLK,
-	GMAC_0_RX_CLK,
-	GMAC_1_TX_CLK,
-	GMAC_1_RX_CLK,
-	PFE_SYS_CLK,
-	PFE_MAC_0_TX_CLK,
-	PFE_MAC_0_RX_CLK,
-	PFE_MAC_1_TX_CLK,
-	PFE_MAC_1_RX_CLK,
-	PFE_MAC_2_TX_CLK,
-	PFE_MAC_2_RX_CLK,
-	FTM_0_REF_CLK,
-	FTM_1_REF_CLK,
-	FLEXRAY_PE_CLK,
+	GMAC_TS,
+	GMAC_0_TX,
+	GMAC_0_RX,
+	GMAC_1_TX,
+	GMAC_1_RX,
+	PFE_SYS,
+	PFE_MAC_0_TX,
+	PFE_MAC_0_RX,
+	PFE_MAC_1_TX,
+	PFE_MAC_1_RX,
+	PFE_MAC_2_TX,
+	PFE_MAC_2_RX,
+	FTM_0_REF,
+	FTM_1_REF,
+	FLEXRAY_PE,
 };
 
 struct cmu {
@@ -100,7 +121,14 @@ struct cmu {
 	const char *ref_name;
 	const char *mon_name;
 	double ref_freq;
-	double mon_freq;
+	bool has_exp_range;
+	union {
+		double exp_freq;
+		struct {
+			double min;
+			double max;
+		} exp_range;
+	};
 	double ref_var;
 	double mon_var;
 	bool fc;
diff --git a/arch/arm/cpu/armv8/s32/s32-gen1/s32g2_cmu.c b/arch/arm/cpu/armv8/s32/s32-gen1/s32g2_cmu.c
index 7302d615b7..7a2eecbbd0 100644
--- a/arch/arm/cpu/armv8/s32/s32-gen1/s32g2_cmu.c
+++ b/arch/arm/cpu/armv8/s32/s32-gen1/s32g2_cmu.c
@@ -7,48 +7,47 @@
 #include <cmu.h>
 
 static struct cmu cmu_blocks[] = {
-	FIRC_PERIPH_CMU_FC(0, FXOSC_CLK, FXOSC_FREQ),
+	FIRC_PERIPH_CMU_FC(0, FXOSC, FXOSC_FREQ),
 
-	FXOSC_PERIPH_CMU_FM(1, FIRC_CLK, FIRC_FREQ),
-	FXOSC_PERIPH_CMU_FM(2, SIRC_CLK, SIRC_FREQ),
-	FXOSC_PERIPH_CMU_FM(3, FTM_0_REF_CLK, 40),
-	FXOSC_PERIPH_CMU_FM(4, FTM_1_REF_CLK, 40),
+	FXOSC_PERIPH_CMU_FM(1, FIRC, FIRC_FREQ),
+	FXOSC_PERIPH_CMU_FM(2, SIRC, SIRC_FREQ),
+	FXOSC_PERIPH_CMU_FM(3, FTM_0_REF, 40),
+	FXOSC_PERIPH_CMU_FM(4, FTM_1_REF, 40),
 
-	FIRC_PERIPH_CMU_FC(5, XBAR_DIV3_CLK, 133.33),
-	FIRC_PERIPH_CMU_FC(6, XBAR_CLK_M7_0, 400),
+	FIRC_PERIPH_CMU_FC(5, XBAR_DIV3, 133.33),
+	FIRC_PERIPH_CMU_FC(6, XBAR_M7_0, 400),
 
-	FXOSC_PERIPH_CMU_FC(7, XBAR_DIV3_CLK, 133.33),
+	FXOSC_PERIPH_CMU_FC(7, XBAR_DIV3, 133.33),
 
-	FIRC_PERIPH_CMU_FC(8, XBAR_CLK_M7_1, 400),
-	FIRC_PERIPH_CMU_FC(9, XBAR_CLK_M7_2, 400),
-	FIRC_PERIPH_CMU_FC(10, PER_CLK, 80),
+	FIRC_PERIPH_CMU_FC(8, XBAR_M7_1, 400),
+	FIRC_PERIPH_CMU_FC(9, XBAR_M7_2, 400),
+	FIRC_PERIPH_CMU_FC(10, PER, 80),
 
-	FXOSC_PERIPH_CMU_FC(11, SERDES_REF_CLK, 125),
-	FXOSC_PERIPH_CMU_FC(12, FLEXRAY_PE_CLK, 40),
-	FXOSC_PERIPH_CMU_FC(13, CAN_PE_CLK, 80),
-	FXOSC_PERIPH_CMU_FC(14, GMAC_0_TX_CLK, 125),
-	FXOSC_PERIPH_CMU_FC(15, GMAC_TS_CLK, 200),
-	FXOSC_PERIPH_CMU_FC(16, LIN_CLK, 125),
-	FXOSC_PERIPH_CMU_FC(17, QSPI_1X_CLK, 200),
-	FXOSC_PERIPH_CMU_FC(18, SDHC_CLK, 400),
+	FXOSC_PERIPH_CMU_FC_RANGE(11, SERDES_REF, 100, 125),
+	FXOSC_PERIPH_CMU_FC(12, FLEXRAY_PE, 40),
+	FXOSC_PERIPH_CMU_FC(13, CAN_PE, 80),
+	FXOSC_PERIPH_CMU_FC_RANGE(14, GMAC_0_TX, 2.5, 125),
+	FXOSC_PERIPH_CMU_FC_RANGE(15, GMAC_TS, 5, 200),
+	FXOSC_PERIPH_CMU_FC(16, LIN, 125),
+	FXOSC_PERIPH_CMU_FC(17, QSPI_1X, 200),
+	FXOSC_PERIPH_CMU_FC(18, SDHC, 400),
 
-	FIRC_PERIPH_CMU_FC(20, DDR_CLK, 666.66),
+	FIRC_PERIPH_CMU_FC(20, DDR, 666.66),
 
-	FXOSC_PERIPH_CMU_FC(21, GMAC_0_RX_CLK, 125),
-	FXOSC_PERIPH_CMU_FC(22, SPI_CLK, 100),
+	FXOSC_PERIPH_CMU_FC_RANGE(21, GMAC_0_RX, 2.5, 125),
+	FXOSC_PERIPH_CMU_FC(22, SPI, 100),
 
-	FXOSC_PERIPH_CMU_FC(27, A53_CORE_CLK, 1000),
+	FXOSC_PERIPH_CMU_FC(27, A53_CORE, 1000),
 
-	FIRC_PERIPH_CMU_FC(28, A53_CORE_CLK, 1000),
-
-	FXOSC_PERIPH_CMU_FC(39, PFE_SYS_CLK, 300),
-	FXOSC_PERIPH_CMU_FC(46, PFE_MAC_0_TX_CLK, 312.5),
-	FXOSC_PERIPH_CMU_FC(47, PFE_MAC_0_RX_CLK, 312.5),
-	FXOSC_PERIPH_CMU_FC(48, PFE_MAC_1_TX_CLK, 125),
-	FXOSC_PERIPH_CMU_FC(49, PFE_MAC_1_RX_CLK, 125),
-	FXOSC_PERIPH_CMU_FC(50, PFE_MAC_2_TX_CLK, 125),
-	FXOSC_PERIPH_CMU_FC(51, PFE_MAC_2_RX_CLK, 125),
+	FIRC_PERIPH_CMU_FC(28, A53_CORE, 1000),
 
+	FXOSC_PERIPH_CMU_FC(39, PFE_SYS, 300),
+	FXOSC_PERIPH_CMU_FC_RANGE(46, PFE_MAC_0_TX, 2.5, 312.5),
+	FXOSC_PERIPH_CMU_FC_RANGE(47, PFE_MAC_0_RX, 2.5, 312.5),
+	FXOSC_PERIPH_CMU_FC_RANGE(48, PFE_MAC_1_TX, 2.5, 125),
+	FXOSC_PERIPH_CMU_FC_RANGE(49, PFE_MAC_1_RX, 2.5, 125),
+	FXOSC_PERIPH_CMU_FC_RANGE(50, PFE_MAC_2_TX, 2.5, 125),
+	FXOSC_PERIPH_CMU_FC_RANGE(51, PFE_MAC_2_RX, 2.5, 125),
 };
 
 struct cmu *get_cmu_block(int index)
diff --git a/arch/arm/cpu/armv8/s32/s32-gen1/s32g3_cmu.c b/arch/arm/cpu/armv8/s32/s32-gen1/s32g3_cmu.c
index d71d9eb00c..35be6a482a 100644
--- a/arch/arm/cpu/armv8/s32/s32-gen1/s32g3_cmu.c
+++ b/arch/arm/cpu/armv8/s32/s32-gen1/s32g3_cmu.c
@@ -5,47 +5,47 @@
 #include <cmu.h>
 
 static struct cmu cmu_blocks[] = {
-	FIRC_PERIPH_CMU_FC(0, FXOSC_CLK, FXOSC_FREQ),
-
-	FXOSC_PERIPH_CMU_FM(1, FIRC_CLK, FIRC_FREQ),
-	FXOSC_PERIPH_CMU_FM(2, SIRC_CLK, SIRC_FREQ),
-	FXOSC_PERIPH_CMU_FM(3, FTM_0_REF_CLK, 40),
-	FXOSC_PERIPH_CMU_FM(4, FTM_1_REF_CLK, 40),
-
-	FIRC_PERIPH_CMU_FC(5, XBAR_DIV3_CLK, 133),
-	FIRC_PERIPH_CMU_FC(6, XBAR_CLK_M7_0, 399.96),
-
-	FXOSC_PERIPH_CMU_FC(7, XBAR_DIV3_CLK, 133.32),
-
-	FIRC_PERIPH_CMU_FC(8, XBAR_CLK_M7_1, 399.96),
-	FIRC_PERIPH_CMU_FC(9, XBAR_CLK_M7_2, 399.96),
-	FIRC_PERIPH_CMU_FC(24, XBAR_CLK_M7_3, 399.96),
-	FIRC_PERIPH_CMU_FC(10, PER_CLK, 80),
-
-	FXOSC_PERIPH_CMU_FC(11, SERDES_REF_CLK, 125),
-	FXOSC_PERIPH_CMU_FC(12, FLEXRAY_PE_CLK, 40),
-	FXOSC_PERIPH_CMU_FC(13, CAN_PE_CLK, 80),
-	FXOSC_PERIPH_CMU_FC(14, GMAC_0_TX_CLK, 125),
-	FXOSC_PERIPH_CMU_FC(15, GMAC_TS_CLK, 200),
-	FXOSC_PERIPH_CMU_FC(16, LIN_CLK, 125),
-	FXOSC_PERIPH_CMU_FC(17, QSPI_1X_CLK, 200),
-	FXOSC_PERIPH_CMU_FC(18, SDHC_CLK, 400),
-
-	FIRC_PERIPH_CMU_FC(20, DDR_CLK, 800),
-
-	FXOSC_PERIPH_CMU_FC(21, GMAC_0_RX_CLK, 125),
-	FXOSC_PERIPH_CMU_FC(22, SPI_CLK, 100),
-	FXOSC_PERIPH_CMU_FC(27, A53_CORE_CLK, 1300),
-
-	FIRC_PERIPH_CMU_FC(28, A53_CORE_CLK, 1300),
-
-	FXOSC_PERIPH_CMU_FC(39, PFE_SYS_CLK, 300),
-	FXOSC_PERIPH_CMU_FC(46, PFE_MAC_0_TX_CLK, 312.5),
-	FXOSC_PERIPH_CMU_FC(47, PFE_MAC_0_RX_CLK, 312.5),
-	FXOSC_PERIPH_CMU_FC(48, PFE_MAC_1_TX_CLK, 125),
-	FXOSC_PERIPH_CMU_FC(49, PFE_MAC_1_RX_CLK, 125),
-	FXOSC_PERIPH_CMU_FC(50, PFE_MAC_2_TX_CLK, 125),
-	FXOSC_PERIPH_CMU_FC(51, PFE_MAC_2_RX_CLK, 125),
+	FIRC_PERIPH_CMU_FC(0, FXOSC, FXOSC_FREQ),
+
+	FXOSC_PERIPH_CMU_FM(1, FIRC, FIRC_FREQ),
+	FXOSC_PERIPH_CMU_FM(2, SIRC, SIRC_FREQ),
+	FXOSC_PERIPH_CMU_FM(3, FTM_0_REF, 40),
+	FXOSC_PERIPH_CMU_FM(4, FTM_1_REF, 40),
+
+	FIRC_PERIPH_CMU_FC(5, XBAR_DIV3, 133),
+	FIRC_PERIPH_CMU_FC(6, XBAR_M7_0, 399.96),
+
+	FXOSC_PERIPH_CMU_FC(7, XBAR_DIV3, 133.32),
+
+	FIRC_PERIPH_CMU_FC(8, XBAR_M7_1, 399.96),
+	FIRC_PERIPH_CMU_FC(9, XBAR_M7_2, 399.96),
+	FIRC_PERIPH_CMU_FC(24, XBAR_M7_3, 399.96),
+	FIRC_PERIPH_CMU_FC(10, PER, 80),
+
+	FXOSC_PERIPH_CMU_FC_RANGE(11, SERDES_REF, 100, 125),
+	FXOSC_PERIPH_CMU_FC(12, FLEXRAY_PE, 40),
+	FXOSC_PERIPH_CMU_FC(13, CAN_PE, 80),
+	FXOSC_PERIPH_CMU_FC_RANGE(14, GMAC_0_TX, 2.5, 125),
+	FXOSC_PERIPH_CMU_FC_RANGE(15, GMAC_TS, 5, 200),
+	FXOSC_PERIPH_CMU_FC(16, LIN, 125),
+	FXOSC_PERIPH_CMU_FC(17, QSPI_1X, 200),
+	FXOSC_PERIPH_CMU_FC(18, SDHC, 400),
+
+	FIRC_PERIPH_CMU_FC(20, DDR, 800),
+
+	FXOSC_PERIPH_CMU_FC_RANGE(21, GMAC_0_RX, 2.5, 125),
+	FXOSC_PERIPH_CMU_FC(22, SPI, 100),
+	FXOSC_PERIPH_CMU_FC(27, A53_CORE, 1300),
+
+	FIRC_PERIPH_CMU_FC(28, A53_CORE, 1300),
+
+	FXOSC_PERIPH_CMU_FC(39, PFE_SYS, 300),
+	FXOSC_PERIPH_CMU_FC_RANGE(46, PFE_MAC_0_TX, 2.5, 312.5),
+	FXOSC_PERIPH_CMU_FC_RANGE(47, PFE_MAC_0_RX, 2.5, 312.5),
+	FXOSC_PERIPH_CMU_FC_RANGE(48, PFE_MAC_1_TX, 2.5, 312.5),
+	FXOSC_PERIPH_CMU_FC_RANGE(49, PFE_MAC_1_RX, 2.5, 312.5),
+	FXOSC_PERIPH_CMU_FC_RANGE(50, PFE_MAC_2_TX, 2.5, 125),
+	FXOSC_PERIPH_CMU_FC_RANGE(51, PFE_MAC_2_RX, 2.5, 125),
 };
 
 struct cmu *get_cmu_block(int index)
diff --git a/arch/arm/cpu/armv8/s32/s32-gen1/s32r45_cmu.c b/arch/arm/cpu/armv8/s32/s32-gen1/s32r45_cmu.c
index c47685a9e4..822a405eba 100644
--- a/arch/arm/cpu/armv8/s32/s32-gen1/s32r45_cmu.c
+++ b/arch/arm/cpu/armv8/s32/s32-gen1/s32r45_cmu.c
@@ -6,47 +6,47 @@
 #include <cmu.h>
 
 static struct cmu cmu_blocks[] = {
-	FIRC_PERIPH_CMU_FC(0, FXOSC_CLK, FXOSC_FREQ),
+	FIRC_PERIPH_CMU_FC(0, FXOSC, FXOSC_FREQ),
 
-	FXOSC_PERIPH_CMU_FM(1, FIRC_CLK, FIRC_FREQ),
-	FXOSC_PERIPH_CMU_FM(2, SIRC_CLK, SIRC_FREQ),
-	FXOSC_PERIPH_CMU_FM(3, FTM_0_REF_CLK, 40),
-	FXOSC_PERIPH_CMU_FM(4, FTM_1_REF_CLK, 40),
+	FXOSC_PERIPH_CMU_FM(1, FIRC, FIRC_FREQ),
+	FXOSC_PERIPH_CMU_FM(2, SIRC, SIRC_FREQ),
+	FXOSC_PERIPH_CMU_FM(3, FTM_0_REF, 40),
+	FXOSC_PERIPH_CMU_FM(4, FTM_1_REF, 40),
 
-	FIRC_PERIPH_CMU_FC(5, XBAR_DIV3_CLK, 133.33),
-	FIRC_PERIPH_CMU_FC(6, XBAR_CLK_M7_0, 400),
+	FIRC_PERIPH_CMU_FC(5, XBAR_DIV3, 133.33),
+	FIRC_PERIPH_CMU_FC(6, XBAR_M7_0, 400),
 
-	FXOSC_PERIPH_CMU_FC(7, XBAR_DIV3_CLK, 133.33),
+	FXOSC_PERIPH_CMU_FC(7, XBAR_DIV3, 133.33),
 
-	FIRC_PERIPH_CMU_FC(8, XBAR_CLK_M7_1, 400),
-	FIRC_PERIPH_CMU_FC(9, XBAR_CLK_M7_2, 400),
-	FIRC_PERIPH_CMU_FC(10, PER_CLK, 80),
+	FIRC_PERIPH_CMU_FC(8, XBAR_M7_1, 400),
+	FIRC_PERIPH_CMU_FC(9, XBAR_M7_2, 400),
+	FIRC_PERIPH_CMU_FC(10, PER, 80),
 
-	FXOSC_PERIPH_CMU_FC(11, SERDES_REF_CLK, 125),
-	FXOSC_PERIPH_CMU_FC(12, FLEXRAY_PE_CLK, 40),
-	FXOSC_PERIPH_CMU_FC(13, CAN_PE_CLK, 80),
-	FXOSC_PERIPH_CMU_FC(14, GMAC_0_TX_CLK, 125),
-	FXOSC_PERIPH_CMU_FC(15, GMAC_TS_CLK, 200),
-	FXOSC_PERIPH_CMU_FC(16, LIN_CLK, 125),
-	FXOSC_PERIPH_CMU_FC(17, QSPI_1X_CLK, 133.33),
-	FXOSC_PERIPH_CMU_FC(18, SDHC_CLK, 400),
+	FXOSC_PERIPH_CMU_FC_RANGE(11, SERDES_REF, 100, 125),
+	FXOSC_PERIPH_CMU_FC(12, FLEXRAY_PE, 40),
+	FXOSC_PERIPH_CMU_FC(13, CAN_PE, 80),
+	FXOSC_PERIPH_CMU_FC(14, GMAC_0_TX, 125),
+	FXOSC_PERIPH_CMU_FC(15, GMAC_TS, 200),
+	FXOSC_PERIPH_CMU_FC(16, LIN, 125),
+	FXOSC_PERIPH_CMU_FC(17, QSPI_1X, 133.33),
+	FXOSC_PERIPH_CMU_FC(18, SDHC, 400),
 
-	FIRC_PERIPH_CMU_FC(20, DDR_CLK, 800),
+	FIRC_PERIPH_CMU_FC(20, DDR, 800),
 
-	FXOSC_PERIPH_CMU_FC(21, GMAC_0_RX_CLK, 125),
-	FXOSC_PERIPH_CMU_FC(22, SPI_CLK, 100),
-	FXOSC_PERIPH_CMU_FC(27, A53_CORE_CLK, 800),
+	FXOSC_PERIPH_CMU_FC_RANGE(21, GMAC_0_RX, 2.5, 125),
+	FXOSC_PERIPH_CMU_FC(22, SPI, 100),
+	FXOSC_PERIPH_CMU_FC(27, A53_CORE, 800),
 
-	FIRC_PERIPH_CMU_FC(28, A53_CORE_CLK, 800),
+	FIRC_PERIPH_CMU_FC(28, A53_CORE, 800),
 
-	FXOSC_PERIPH_CMU_FC(38, ACCEL3_CLK, 600),
-	FXOSC_PERIPH_CMU_FC(39, ACCEL4_CLK_0, 400),
-	FXOSC_PERIPH_CMU_FC(40, ACCEL4_CLK_0, 400),
-	FXOSC_PERIPH_CMU_FC(46, GMAC_1_TX_CLK, 125),
-	FXOSC_PERIPH_CMU_FC(51, GMAC_1_RX_CLK, 125),
+	FXOSC_PERIPH_CMU_FC(38, ACCEL3, 600),
+	FXOSC_PERIPH_CMU_FC(39, ACCEL4_0, 400),
+	FXOSC_PERIPH_CMU_FC(40, ACCEL4_0, 400),
+	FXOSC_PERIPH_CMU_FC(46, GMAC_1_TX, 125),
+	FXOSC_PERIPH_CMU_FC(51, GMAC_1_RX, 125),
 	FXOSC_PERIPH_CMU_FC(52, MIPICSI2_0, 400),
 	FXOSC_PERIPH_CMU_FC(53, MIPICSI2_0, 400),
-	FXOSC_PERIPH_CMU_FC(54, SERDES_REF_CLK, 125),
+	FXOSC_PERIPH_CMU_FC(54, SERDES_REF, 125),
 };
 
 struct cmu *get_cmu_block(int index)
-- 
2.17.1

