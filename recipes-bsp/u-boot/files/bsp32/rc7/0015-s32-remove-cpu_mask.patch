From 07c450ebebcf14816791b08fc0c83975e5909ba8 Mon Sep 17 00:00:00 2001
From: Andrei Botila <andrei.botila@nxp.com>
Date: Thu, 3 Feb 2022 16:14:23 +0200
Subject: [PATCH 15/51] s32: remove cpu_mask()

Removed cpu_mask() and the associated functions. Most of them
were called by fsl_s32_wake_secondary_cores. Since moving to
ATF bootflow no need to wake the secondary cores from U-Boot.

Issue: ALB-8365
Upstream-Status: Pending 

Signed-off-by: Andrei Botila <andrei.botila@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 arch/arm/cpu/armv8/s32/s32-gen1/s32g274a.c    |  30 ----
 arch/arm/cpu/armv8/s32/s32-gen1/soc.c         |  45 ------
 arch/arm/include/asm/arch-s32/cpu.h           |  18 +--
 .../asm/arch-s32/s32-gen1/a53_cluster_gpr.h   | 151 ------------------
 4 files changed, 1 insertion(+), 243 deletions(-)
 delete mode 100644 arch/arm/include/asm/arch-s32/s32-gen1/a53_cluster_gpr.h

diff --git a/arch/arm/cpu/armv8/s32/s32-gen1/s32g274a.c b/arch/arm/cpu/armv8/s32/s32-gen1/s32g274a.c
index f67265c77c..d4375f5088 100644
--- a/arch/arm/cpu/armv8/s32/s32-gen1/s32g274a.c
+++ b/arch/arm/cpu/armv8/s32/s32-gen1/s32g274a.c
@@ -45,36 +45,6 @@ static inline int get_s32g2_derivative(void)
 	return S32G2_INVAL_DERIV;
 }
 
-u32 cpu_pos_mask_cluster0(void)
-{
-	switch (get_s32g2_derivative()) {
-	case S32G274A_DERIV:
-		return CPUMASK_CLUSTER0;
-	case S32G254A_DERIV:
-	case S32G233A_DERIV:
-		return BIT(0);
-	default:
-		return 0;
-	}
-
-	return 0;
-}
-
-u32 cpu_pos_mask_cluster1(void)
-{
-	switch (get_s32g2_derivative()) {
-	case S32G274A_DERIV:
-		return CPUMASK_CLUSTER1;
-	case S32G254A_DERIV:
-	case S32G233A_DERIV:
-		return BIT(2);
-	default:
-		return 0;
-	}
-
-	return 0;
-}
-
 u32 get_sram_size(void)
 {
 	switch (get_s32g2_derivative()) {
diff --git a/arch/arm/cpu/armv8/s32/s32-gen1/soc.c b/arch/arm/cpu/armv8/s32/s32-gen1/soc.c
index 106cce9371..f2501f9986 100644
--- a/arch/arm/cpu/armv8/s32/s32-gen1/soc.c
+++ b/arch/arm/cpu/armv8/s32/s32-gen1/soc.c
@@ -11,7 +11,6 @@
 #include <errno.h>
 #include <hang.h>
 #include <asm/arch/cpu.h>
-#include <asm/arch/s32-gen1/a53_cluster_gpr.h>
 #include <board_common.h>
 #ifdef CONFIG_SAF1508BET_USB_PHY
 #include <dm/device.h>
@@ -33,8 +32,6 @@
 #define PSTAT_PERIPH_n_STAT(n)		BIT(n)
 #define PSTAT_PERIPH_CM7n_STAT(n)	PSTAT_PERIPH_n_STAT(n)
 
-#define RGM_CORES_RESET_GROUP		1
-
 /* MC_ME registers. */
 #define MC_ME_CTL_KEY(MC_ME)		(UPTR(MC_ME) + 0x0)
 #define MC_ME_CTL_KEY_KEY		(0x00005AF0)
@@ -69,48 +66,6 @@
 
 DECLARE_GLOBAL_DATA_PTR;
 
-__weak u32 cpu_pos_lockstep_mask(void)
-{
-	return CPUMASK_LOCKSTEP;
-}
-
-__weak u32 cpu_pos_mask(void)
-{
-	if (is_a53_lockstep_enabled())
-		return cpu_pos_lockstep_mask();
-
-	return cpu_pos_mask_cluster0() | cpu_pos_mask_cluster1();
-}
-
-__weak u32 cpu_pos_mask_cluster0(void)
-{
-	return CPUMASK_CLUSTER0;
-}
-
-__weak u32 cpu_pos_mask_cluster1(void)
-{
-	return CPUMASK_CLUSTER1;
-}
-
-u32 cpu_mask(void)
-{
-	u32 rgm_stat = readl(RGM_PSTAT(MC_RGM_BASE_ADDR,
-				       RGM_CORES_RESET_GROUP));
-	/* 0 means out of reset. */
-	/* Bit 0 corresponds to cluster reset and is 0 if any
-	 * of the other bits 1-4 are 0.
-	 */
-	return ((~(rgm_stat)) >> 1) & cpu_pos_mask();
-}
-
-/*
- * Return the number of cores on this SOC.
- */
-int cpu_numcores(void)
-{
-	return hweight32(cpu_mask());
-}
-
 __weak int dram_init(void)
 {
 	return 0;
diff --git a/arch/arm/include/asm/arch-s32/cpu.h b/arch/arm/include/asm/arch-s32/cpu.h
index 4086e4b455..94e61cd525 100644
--- a/arch/arm/include/asm/arch-s32/cpu.h
+++ b/arch/arm/include/asm/arch-s32/cpu.h
@@ -1,7 +1,7 @@
 /* SPDX-License-Identifier: GPL-2.0+ */
 /*
  * Copyright 2014-2016 Freescale Semiconductor, Inc.
- * Copyright 2017,2019-2021 NXP
+ * Copyright 2017,2019-2022 NXP
  *
  */
 #ifndef _FSL_S32_CPU_H
@@ -34,20 +34,4 @@
 
 #endif
 
-#if defined(CONFIG_NXP_S32G3XX)
-#define CPUMASK_CLUSTER0	(BIT(0) | BIT(1) | BIT(4) | BIT(5))
-#define CPUMASK_CLUSTER1	(BIT(2) | BIT(3) | BIT(6) | BIT(7))
-#define CPUMASK_LOCKSTEP	(BIT(0) | BIT(1) | BIT(2) | BIT(3))
-#elif defined(CONFIG_NXP_S32G2XX) || defined(CONFIG_NXP_S32R45)
-#define CPUMASK_CLUSTER0	(BIT(0) | BIT(1))
-#define CPUMASK_CLUSTER1	(BIT(2) | BIT(3))
-#define CPUMASK_LOCKSTEP	CPUMASK_CLUSTER0
-#endif
-
-u32 cpu_mask(void);
-int cpu_numcores(void);
-u32 cpu_pos_mask_cluster0(void);
-u32 cpu_pos_mask_cluster1(void);
-u32 cpu_pos_lockstep_mask(void);
-
 #endif /* _FSL_S32_CPU_H */
diff --git a/arch/arm/include/asm/arch-s32/s32-gen1/a53_cluster_gpr.h b/arch/arm/include/asm/arch-s32/s32-gen1/a53_cluster_gpr.h
deleted file mode 100644
index c0b4a7fd8f..0000000000
--- a/arch/arm/include/asm/arch-s32/s32-gen1/a53_cluster_gpr.h
+++ /dev/null
@@ -1,151 +0,0 @@
-// SPDX-License-Identifier: BSD-3-Clause
-/*
- * Copyright 2019, 2021 NXP
- */
-
-#define A53_CLUSTER_GPR			0x4007C400ul
-#define A53_CLUSTER_GPR_GPR(x)		(A53_CLUSTER_GPR + ((x) * 0x4))
-
-#define GPR00_CA53_0_CORE0_AA64NAA32_MASK	BIT(0)
-#define GPR00_CA53_0_CORE1_AA64NAA32_MASK	BIT(1)
-#define GPR00_CA53_1_CORE0_AA64NAA32_MASK	BIT(2)
-#define GPR00_CA53_1_CORE1_AA64NAA32_MASK	BIT(3)
-#define GPR00_CA53_0_BROADCASTCACHEMAINT_MASK	BIT(4)
-#define GPR00_CA53_0_BROADCASTINNER_MASK	BIT(5)
-#define GPR00_CA53_0_BROADCASTOUTER_MASK	BIT(6)
-#define GPR00_CA53_1_BROADCASTCACHEMAINT_MASK	BIT(7)
-#define GPR00_CA53_1_BROADCASTINNER_MASK	BIT(8)
-#define GPR00_CA53_1_BROADCASTOUTER_MASK	BIT(9)
-#define GPR00_CA53_0_CORE0_CFGEND_MASK		BIT(10)
-#define GPR00_CA53_0_CORE1_CFGEND_MASK		BIT(11)
-#define GPR00_CA53_0_CORE0_CFGTE_MASK		BIT(12)
-#define GPR00_CA53_0_CORE1_CFGTE_MASK		BIT(13)
-#define GPR00_CA53_1_CORE0_CFGEND_MASK		BIT(14)
-#define GPR00_CA53_1_CORE1_CFGEND_MASK		BIT(15)
-#define GPR00_CA53_1_CORE0_CFGTE_MASK		BIT(16)
-#define GPR00_CA53_1_CORE1_CFGTE_MASK		BIT(17)
-#define GPR00_CA53_0_CORE0_VINITHI_MASK		BIT(18)
-#define GPR00_CA53_0_CORE1_VINITHI_MASK		BIT(19)
-#define GPR00_CA53_1_CORE0_VINITHI_MASK		BIT(20)
-#define GPR00_CA53_1_CORE1_VINITHI_MASK		BIT(21)
-#define GPR00_CA53_COUNTER_CLK_DIV_VAL_MASK	(BIT(24) | BIT(25) | BIT(26))
-#define GPR00_CA53_0_CORE0_AA64NAA32_VALUE(x)		(((x) & 0x1) << 0)
-#define GPR00_CA53_0_CORE1_AA64NAA32_VALUE(x)		(((x) & 0x1) << 1)
-#define GPR00_CA53_1_CORE0_AA64NAA32_VALUE(x)		(((x) & 0x1) << 2)
-#define GPR00_CA53_1_CORE1_AA64NAA32_VALUE(x)		(((x) & 0x1) << 3)
-#define GPR00_CA53_0_BROADCASTCACHEMAINT_VALUE(x)	(((x) & 0x1) << 4)
-#define GPR00_CA53_0_BROADCASTINNER_VALUE(x)		(((x) & 0x1) << 5)
-#define GPR00_CA53_0_BROADCASTOUTER_VALUE(x)		(((x) & 0x1) << 6)
-#define GPR00_CA53_1_BROADCASTCACHEMAINT_VALUE(x)	(((x) & 0x1) << 7)
-#define GPR00_CA53_1_BROADCASTINNER_VALUE(x)		(((x) & 0x1) << 8)
-#define GPR00_CA53_1_BROADCASTOUTER_VALUE(x)		(((x) & 0x1) << 9)
-#define GPR00_CA53_0_CORE0_CFGEND_VALUE(x)		(((x) & 0x1) << 10)
-#define GPR00_CA53_0_CORE1_CFGEND_VALUE(x)		(((x) & 0x1) << 11)
-#define GPR00_CA53_0_CORE0_CFGTE_VALUE(x)		(((x) & 0x1) << 12)
-#define GPR00_CA53_0_CORE1_CFGTE_VALUE(x)		(((x) & 0x1) << 13)
-#define GPR00_CA53_1_CORE0_CFGEND_VALUE(x)		(((x) & 0x1) << 14)
-#define GPR00_CA53_1_CORE1_CFGEND_VALUE(x)		(((x) & 0x1) << 15)
-#define GPR00_CA53_1_CORE0_CFGTE_VALUE(x)		(((x) & 0x1) << 16)
-#define GPR00_CA53_1_CORE1_CFGTE_VALUE(x)		(((x) & 0x1) << 17)
-#define GPR00_CA53_0_CORE0_VINITHI_VALUE(x)		(((x) & 0x1) << 18)
-#define GPR00_CA53_0_CORE1_VINITHI_VALUE(x)		(((x) & 0x1) << 19)
-#define GPR00_CA53_1_CORE0_VINITHI_VALUE(x)		(((x) & 0x1) << 20)
-#define GPR00_CA53_1_CORE1_VINITHI_VALUE(x)		(((x) & 0x1) << 21)
-#define GPR00_CA53_COUNTER_CLK_DIV_VAL_VALUE(x)		(((x) & 0x7) << 24)
-#define GPR00_CA53_COUNTER_CLK_DIV_VAL_SHIFT	(24)
-
-#define GPR01_WFE_EVT_CA53_CLUSTER0_MASK	BIT(0)
-#define GPR01_WFE_EVT_CA53_CLUSTER1_MASK	BIT(1)
-#define GPR01_CLUSTER0_CG_EN_MASK		BIT(8)
-#define GPR01_CLUSTER1_CG_EN_MASK		BIT(9)
-#define GPR01_CA53_0_CORE0_CP15SDISABLE_MASK	BIT(24)
-#define GPR01_CA53_0_CORE1_CP15SDISABLE_MASK	BIT(25)
-#define GPR01_CA53_1_CORE0_CP15SDISABLE_MASK	BIT(26)
-#define GPR01_CA53_1_CORE1_CP15SDISABLE_MASK	BIT(27)
-#define GPR01_WFE_EVT_CA53_CLUSTER0_VALUE(x)		(((x) & 0x1) << 0)
-#define GPR01_WFE_EVT_CA53_CLUSTER1_VALUE(x)		(((x) & 0x1) << 1)
-#define GPR01_CLUSTER0_CG_EN_VALUE(x)			(((x) & 0x1) << 8)
-#define GPR01_CLUSTER1_CG_EN_VALUE(x)			(((x) & 0x1) << 9)
-#define GPR01_CA53_0_CORE0_CP15SDISABLE_VALUE(x)	(((x) & 0x1) << 24)
-#define GPR01_CA53_0_CORE1_CP15SDISABLE_VALUE(x)	(((x) & 0x1) << 25)
-#define GPR01_CA53_1_CORE0_CP15SDISABLE_VALUE(x)	(((x) & 0x1) << 26)
-#define GPR01_CA53_1_CORE1_CP15SDISABLE_VALUE(x)	(((x) & 0x1) << 27)
-
-#define GPR06_CA53_LOCKSTEP_EN_MASK		BIT(0)
-#define GPR06_GIC500_LOCKSTEP_EN_MASK		(BIT(1) | BIT(2))
-#define GPR06_CA53_LOCKSTEP_EN_VALUE(x)		(((x) & 0x1) << 0)
-#define GPR06_GIC500_LOCKSTEP_EN_VALUE(x)	(((x) & 0x3) << 1)
-
-#define GPR07_CA53_0_CLUSTERIDAFF1_MASK		(0xff << 0)
-#define GPR07_CA53_0_CLUSTERIDAFF2_MASK		(0xff << 8)
-#define GPR07_CA53_1_CLUSTERIDAFF1_MASK		(0xff << 16)
-#define GPR07_CA53_1_CLUSTERIDAFF2_MASK		(0xff << 24)
-#define GPR07_CA53_0_CLUSTERIDAFF1_VALUE(x)	(((x) & 0xff) << 0)
-#define GPR07_CA53_0_CLUSTERIDAFF2_VALUE(x)	(((x) & 0xff) << 8)
-#define GPR07_CA53_1_CLUSTERIDAFF1_VALUE(x)	(((x) & 0xff) << 16)
-#define GPR07_CA53_1_CLUSTERIDAFF2_VALUE(x)	(((x) & 0xff) << 24)
-
-#define GPR08_CA53_0_CORE0_WARM_RESET_STATUS_MASK	BIT(0)
-#define GPR08_CA53_0_CORE1_WARM_RESET_STATUS_MASK	BIT(1)
-#define GPR08_CA53_1_CORE0_WARM_RESET_STATUS_MASK	BIT(2)
-#define GPR08_CA53_1_CORE1_WARM_RESET_STATUS_MASK	BIT(3)
-#define GPR08_CLUSTER0_STANDBYWFIL2_STATUS_MASK		BIT(8)
-#define GPR08_CLUSTER1_STANDBYWFIL2_STATUS_MASK		BIT(9)
-#define GPR08_CA53_0_CORE0_STANDBYWFE_STATUS_MASK	BIT(16)
-#define GPR08_CA53_0_CORE1_STANDBYWFE_STATUS_MASK	BIT(17)
-#define GPR08_CA53_1_CORE0_STANDBYWFE_STATUS_MASK	BIT(18)
-#define GPR08_CA53_1_CORE1_STANDBYWFE_STATUS_MASK	BIT(19)
-#define GPR08_CA53_0_CORE0_STANDBYWFI_STATUS_MASK	BIT(24)
-#define GPR08_CA53_0_CORE1_STANDBYWFI_STATUS_MASK	BIT(25)
-#define GPR08_CA53_1_CORE0_STANDBYWFI_STATUS_MASK	BIT(26)
-#define GPR08_CA53_1_CORE1_STANDBYWFI_STATUS_MASK	BIT(27)
-
-#define GPR09_CA53_0_CORE0_RVBARADDR_39_32_MASK		(0xff << 0)
-#define GPR09_CA53_0_CORE1_RVBARADDR_39_32_MASK		(0xff << 8)
-#define GPR09_CA53_1_CORE0_RVBARADDR_39_32_MASK		(0xff << 16)
-#define GPR09_CA53_1_CORE1_RVBARADDR_39_32_MASK		(0xff << 24)
-#define GPR09_CA53_0_CORE0_RVBARADDR_39_32_VALUE(x)	(((x) & 0xff) << 0)
-#define GPR09_CA53_0_CORE1_RVBARADDR_39_32_VALUE(x)	(((x) & 0xff) << 8)
-#define GPR09_CA53_1_CORE0_RVBARADDR_39_32_VALUE(x)	(((x) & 0xff) << 16)
-#define GPR09_CA53_1_CORE1_RVBARADDR_39_32_VALUE(x)	(((x) & 0xff) << 24)
-
-#define GPR10_CA53_0_CORE0_CPUMERRSR_HIGH_BITS_MASK	(0xffffffff)
-#define GPR10_CA53_0_CORE0_CPUMERRSR_HIGH_BITS_VALUE(x)	(((x) & 0xffffffff) << 0)
-
-#define GPR11_CA53_0_CORE0_CPUMERRSR_LOW_BITS_MASK	(0xffffffff)
-#define GPR11_CA53_0_CORE0_CPUMERRSR_LOW_BITS_VALUE(x)	(((x) & 0xffffffff) << 0)
-
-#define GPR12_CA53_0_CORE1_CPUMERRSR_HIGH_BITS_MASK	(0xffffffff)
-#define GPR12_CA53_0_CORE1_CPUMERRSR_HIGH_BITS_VALUE(x)	(((x) & 0xffffffff) << 0)
-
-#define GPR13_CA53_0_CORE1_CPUMERRSR_LOW_BITS_MASK	(0xffffffff)
-#define GPR13_CA53_0_CORE1_CPUMERRSR_LOW_BITS_VALUE(x)	(((x) & 0xffffffff) << 0)
-
-#define GPR14_CA53_1_CORE0_CPUMERRSR_HIGH_BITS_MASK	(0xffffffff)
-#define GPR14_CA53_1_CORE0_CPUMERRSR_HIGH_BITS_VALUE(x)	(((x) & 0xffffffff) << 0)
-
-#define GPR15_CA53_1_CORE0_CPUMERRSR_LOW_BITS_MASK	(0xffffffff)
-#define GPR15_CA53_1_CORE0_CPUMERRSR_LOW_BITS_VALUE(x)	(((x) & 0xffffffff) << 0)
-
-#define GPR16_CA53_1_CORE1_CPUMERRSR_HIGH_BITS_MASK	(0xffffffff)
-#define GPR16_CA53_1_CORE1_CPUMERRSR_HIGH_BITS_VALUE(x)	(((x) & 0xffffffff) << 0)
-
-#define GPR17_CA53_1_CORE1_CPUMERRSR_LOW_BITS_MASK	(0xffffffff)
-#define GPR17_CA53_1_CORE1_CPUMERRSR_LOW_BITS_VALUE(x)	(((x) & 0xffffffff) << 0)
-
-#define GPR18_CA53_0_L2MERRSR_HIGH_BITS_MASK		(0xffffffff)
-#define GPR18_CA53_0_L2MERRSR_HIGH_BITS_VALUE(x)	(((x) & 0xffffffff) << 0)
-
-#define GPR19_CA53_0_L2MERRSR_LOW_BITS_MASK		(0xffffffff)
-#define GPR19_CA53_0_L2MERRSR_LOW_BITS_VALUE(x)		(((x) & 0xffffffff) << 0)
-
-#define GPR20_CA53_1_L2MERRSR_HIGH_BITS_MASK		(0xffffffff)
-#define GPR20_CA53_1_L2MERRSR_HIGH_BITS_VALUE(x)	(((x) & 0xffffffff) << 0)
-
-#define GPR21_CA53_1_L2MERRSR_LOW_BITS_MASK		(0xffffffff)
-#define GPR21_CA53_1_L2MERRSR_LOW_BITS_VALUE(x)		(((x) & 0xffffffff) << 0)
-
-static inline bool is_a53_lockstep_enabled(void)
-{
-	return readl(A53_CLUSTER_GPR_GPR(6)) & GPR06_CA53_LOCKSTEP_EN_MASK;
-}
-- 
2.17.1

