From 1ebb7cf413d06cd23897a92bded74c4ac190ab63 Mon Sep 17 00:00:00 2001
From: Ghennadi Procopciuc <ghennadi.procopciuc@nxp.com>
Date: Wed, 16 Feb 2022 15:50:46 +0200
Subject: [PATCH 23/51] s32-gen1: Replace u-boot.s32 with u-boot-s32.bin

Issue: ALB-8514
Upstream-Status: Pending 

Signed-off-by: Ghennadi Procopciuc <ghennadi.procopciuc@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 Makefile                                      | 13 +++++++---
 arch/arm/config.mk                            |  2 --
 arch/arm/cpu/armv8/s32/cpu.c                  | 12 +++++++++
 .../cpu/armv8/s32/s32-gen1/hse_adv_secboot.c  |  6 +++--
 arch/arm/mach-s32/Makefile                    | 25 +------------------
 board/freescale/s32-gen1/Kconfig              | 14 +++--------
 doc/README.s32gen1image                       | 16 ++++--------
 include/configs/s32.h                         |  6 +----
 8 files changed, 35 insertions(+), 59 deletions(-)

diff --git a/Makefile b/Makefile
index 048519bd89..1af2d4ac24 100644
--- a/Makefile
+++ b/Makefile
@@ -926,6 +926,10 @@ ifeq ($(CONFIG_ARCH_ROCKCHIP)$(CONFIG_SPL),yy)
 ALL-y += u-boot-rockchip.bin
 endif
 
+ifeq ($(CONFIG_S32_GEN1),y)
+ALL-y += u-boot-s32.bin u-boot-s32.cfgout
+endif
+
 LDFLAGS_u-boot += $(LDFLAGS_FINAL)
 
 # Avoid 'Not enough room for program headers' error on binutils 2.28 onwards.
@@ -1173,12 +1177,13 @@ endif
 	$(Q)$(MAKE) $(build)=arch/arm/cpu/armv7/vf610 $@
 
 ifeq ($(CONFIG_S32_GEN1),y)
-S32_DEPS = u-boot.dtb
-endif
-
-%.s32: %.bin $(S32_DEPS)
+%.cfgout: FORCE
 	$(Q)$(MAKE) $(build)=arch/arm/mach-s32 $@
 
+u-boot-s32.bin: u-boot.dtb u-boot-nodtb.bin
+	$(call if_changed,binman)
+endif
+
 quiet_cmd_copy = COPY    $@
       cmd_copy = cp $< $@
 
diff --git a/arch/arm/config.mk b/arch/arm/config.mk
index 11444414e9..3df45f8ddc 100644
--- a/arch/arm/config.mk
+++ b/arch/arm/config.mk
@@ -150,8 +150,6 @@ ifdef CONFIG_EFI_LOADER
 OBJCOPYFLAGS += -j .efi_runtime -j .efi_runtime_rel
 endif
 
-ALL-y += u-boot.s32
-
 ifneq ($(CONFIG_IMX_CONFIG),)
 ifdef CONFIG_SPL
 ifndef CONFIG_SPL_BUILD
diff --git a/arch/arm/cpu/armv8/s32/cpu.c b/arch/arm/cpu/armv8/s32/cpu.c
index bffbc35946..27b1f15dd0 100644
--- a/arch/arm/cpu/armv8/s32/cpu.c
+++ b/arch/arm/cpu/armv8/s32/cpu.c
@@ -202,3 +202,15 @@ void board_prep_linux(bootm_headers_t *images)
 	if (ret)
 		pr_err("Failed to reset SCMI agent's settings\n");
 }
+
+void *board_fdt_blob_setup(void)
+{
+	void *dtb;
+
+	dtb = (void *)(CONFIG_SYS_TEXT_BASE - CONFIG_S32GEN1_MAX_DTB_SIZE);
+
+	if (fdt_magic(dtb) != FDT_MAGIC)
+		panic("DTB is not passed via %p\n", dtb);
+
+	return dtb;
+}
diff --git a/arch/arm/cpu/armv8/s32/s32-gen1/hse_adv_secboot.c b/arch/arm/cpu/armv8/s32/s32-gen1/hse_adv_secboot.c
index ef576b0aef..30c57699f2 100644
--- a/arch/arm/cpu/armv8/s32/s32-gen1/hse_adv_secboot.c
+++ b/arch/arm/cpu/armv8/s32/s32-gen1/hse_adv_secboot.c
@@ -230,10 +230,12 @@ int hse_install_smr_entry(struct hse_private *priv, u32 *recv_buf)
 
 	/**
 	 * no address of actual code start, need to reference app bl header
-	 * CONFIG_DTB_ADDR used bc smr contains dtb and code
+	 * (CONFIG_SYS_TEXT_BASE - CONFIG_S32GEN1_MAX_DTB_SIZE) used bc smr
+	 * contains dtb and code
 	 */
 	smr_entry->smr_src = priv->ivt.app_boot + 0x200;
-	smr_entry->smr_dst_addr = CONFIG_DTB_ADDR;
+	smr_entry->smr_dst_addr = CONFIG_SYS_TEXT_BASE -
+	    CONFIG_S32GEN1_MAX_DTB_SIZE;
 	smr_entry->smr_size = HSE_UBOOT_MAX_SIZE;
 	smr_entry->config_flags = (HSE_SMR_CFG_FLAG_SD_FLASH |
 				   HSE_SMR_CFG_FLAG_INSTALL_AUTH);
diff --git a/arch/arm/mach-s32/Makefile b/arch/arm/mach-s32/Makefile
index 7b10ef685d..a3da8e9620 100644
--- a/arch/arm/mach-s32/Makefile
+++ b/arch/arm/mach-s32/Makefile
@@ -38,29 +38,6 @@ else
 $(QSPI_PARAMS_FILE):
 endif
 
-%.cfgout: $(S32GEN1_CONFIG_FILE) FORCE
+%.cfgout: $(S32GEN1_CONFIG_FILE) $(QSPI_PARAMS_FILE) FORCE
 	$(Q)mkdir -p $(dir $@)
 	$(call if_changed_dep,cpp_cfg)
-
-MKIMAGEFLAGS_u-boot.s32 = -T $(CONFIG_MKIMAGE_T) \
-	-n u-boot.cfgout \
-	-a $(CONFIG_DTB_ADDR) \
-	-e $(CONFIG_SYS_TEXT_BASE)
-
-u-boot.s32: MKIMAGEOUTPUT = u-boot.s32.log
-u-boot.s32: u-boot.bin u-boot.cfgout $(QSPI_PARAMS_FILE) FORCE
-	$(eval DTB_RSRVD_SIZE = $(shell \
-		echo $$((${CONFIG_SYS_TEXT_BASE} - ${CONFIG_DTB_ADDR}))))
-	$(eval DTB_SIZE = $(shell stat --printf="%s" u-boot.dtb))
-
-	$(Q)if [ ${DTB_SIZE} -gt ${DTB_RSRVD_SIZE} ]; then \
-		echo "DTB exceeds the reserved space of" \
-		"${DTB_RSRVD_SIZE} bytes between CONFIG_SYS_TEXT_BASE" \
-		"and CONFIG_DTB_ADDR"; \
-		false; \
-	fi
-
-	$(Q)dd if=u-boot.dtb of=u-boot-with-dtb.bin bs=${DTB_RSRVD_SIZE} count=1 2>/dev/null
-	$(Q)dd if=u-boot.bin of=u-boot-with-dtb.bin bs=${DTB_RSRVD_SIZE} seek=1 2>/dev/null
-	$(Q)mv u-boot-with-dtb.bin u-boot.bin
-	$(call if_changed,mkimage)
diff --git a/board/freescale/s32-gen1/Kconfig b/board/freescale/s32-gen1/Kconfig
index c284af2b42..3d2ea3c1c0 100644
--- a/board/freescale/s32-gen1/Kconfig
+++ b/board/freescale/s32-gen1/Kconfig
@@ -62,17 +62,9 @@ config SYS_CONFIG_NAME
 	default "s32r45" if NXP_S32R45
 	default "s32g399a" if NXP_S32G3XX
 
-config CUSTOM_DTB_ADDR
-	bool "Use a custom DTB_ADDR"
-	help
-	  Enable this if you need to use a custom DTB_ADDR.
-	  When disabled, a suitable DTB_ADDR address is calculated
-	  automatically.
-
-config DTB_ADDR
-	hex "Address at which the dtb will be found" if CUSTOM_DTB_ADDR
-	default 0xbfa90000 if TARGET_TYPE_S32GEN1_EMULATOR
-	default 0xffa90000
+config S32GEN1_MAX_DTB_SIZE
+	hex "Max size reserved for device tree in image layout"
+	default 0x7000
 
 config S32GEN1_HWCONFIG
 	string "S32GEN1 HWConfig definition"
diff --git a/doc/README.s32gen1image b/doc/README.s32gen1image
index 129c6578f6..cdd1fbe054 100644
--- a/doc/README.s32gen1image
+++ b/doc/README.s32gen1image
@@ -20,19 +20,13 @@ Command syntax:
 
 Example:
 	./tools/mkimage -T "s32gen1image" \
-			-n u-boot.cfg \
-			-a 0x34090000 \
-			-e 0x340a0000 \
-			-d u-boot.bin u-boot.s32
+			-n fip.cfgout \
+			-a 0x34300910 \
+			-e 0x34302000 \
+			-d fip.bin fip.s32
 
 s32gen1image support available with mkimage utility will generate a S32GEN1 boot
-image that can be flashed on the board's QSPI, EMMC or SD. The make target which
-uses mkimage to produce such an image is "u-boot.s32".  For example:
-
-  export KBUILD_OUTPUT=/tmp/build
-  make distclean
-  make yourboard_config
-  make u-boot.s32
+image that can be flashed on the board's QSPI, EMMC or SD.
 
 Board specific configuration file specifications:
 ------------------------------------------------
diff --git a/include/configs/s32.h b/include/configs/s32.h
index ce19e06f6c..e1e6d9e1ae 100644
--- a/include/configs/s32.h
+++ b/include/configs/s32.h
@@ -121,9 +121,6 @@
 #error "FDT and Ramdisk would overlap in flash memory"
 #endif
 
-#define ENV_FDTCONTROLADDR \
-			"fdtcontroladdr=" __stringify(CONFIG_DTB_ADDR) "\0"
-
 /* Generic Timer Definitions */
 #if defined(CONFIG_SYS_ARCH_TIMER)
 /* COUNTER_FREQUENCY value will be used at startup but will be replaced
@@ -282,7 +279,6 @@
 	CONFIG_BOARD_EXTRA_ENV_SETTINGS  \
 	CONFIG_DCU_EXTRA_ENV_SETTINGS \
 	"ipaddr=" S32_DEFAULT_IP \
-	ENV_FDTCONTROLADDR \
 	"serverip=10.0.0.1\0" \
 	"netmask=255.255.255.0\0" \
 	"nfsbootargs=setenv bootargs console=${console},${baudrate} " \
@@ -311,7 +307,7 @@
 	"mmcdev=" __stringify(CONFIG_SYS_MMC_ENV_DEV) "\0" \
 	"mmcpart=" __stringify(CONFIG_MMC_PART) "\0" \
 	"mmcroot=/dev/mmcblk0p2 rootwait rw\0" \
-	"update_sd_firmware_filename=u-boot.s32\0" \
+	"update_sd_firmware_filename=fip.s32\0" \
 	"update_sd_firmware=" \
 		"if test ${ip_dyn} = yes; then " \
 			"setenv get_cmd dhcp; " \
-- 
2.17.1

