From 9b6bcdf86ff7239f50ab1da6afe067eedcb99bc9 Mon Sep 17 00:00:00 2001
From: Ciprian Costea <ciprianmarian.costea@nxp.com>
Date: Tue, 15 Feb 2022 10:29:45 +0200
Subject: [PATCH 10/51] a53: gpr: Add misc driver for retrieving lockstep
 information

This Misc driver's only purpose at the moment is to
get information regarding lockstep enablement.

Issue: ALB-8517
Upstream-Status: Pending 

Signed-off-by: Ciprian Costea <ciprianmarian.costea@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 arch/arm/dts/fsl-s32-gen1.dtsi |   6 ++
 drivers/misc/Makefile          |   1 +
 drivers/misc/s32gen1_a53_gpr.c | 118 +++++++++++++++++++++++++++++++++
 drivers/misc/s32gen1_a53_gpr.h |  11 +++
 4 files changed, 136 insertions(+)
 create mode 100644 drivers/misc/s32gen1_a53_gpr.c
 create mode 100644 drivers/misc/s32gen1_a53_gpr.h

diff --git a/arch/arm/dts/fsl-s32-gen1.dtsi b/arch/arm/dts/fsl-s32-gen1.dtsi
index bd739de431..c69e7fd82d 100644
--- a/arch/arm/dts/fsl-s32-gen1.dtsi
+++ b/arch/arm/dts/fsl-s32-gen1.dtsi
@@ -368,6 +368,12 @@
 		status = "okay";
 	};
 
+	a53_gpr {
+		compatible = "fsl,s32gen1-a53-gpr";
+		reg = <0x0 0x4007C400 0x0 0x100>;
+		status = "okay";
+	};
+
 	saradc0: saradc0 {
 		compatible = "fsl,s32gen1-adc";
 		reg = <0x0 0x401f8000 0x0 0x1000>;
diff --git a/drivers/misc/Makefile b/drivers/misc/Makefile
index ba910bc961..95c81d960d 100644
--- a/drivers/misc/Makefile
+++ b/drivers/misc/Makefile
@@ -61,6 +61,7 @@ obj-$(CONFIG_ROCKCHIP_OTP) += rockchip-otp.o
 obj-$(CONFIG_S32_GEN1) += s32gen1_fuse.o
 obj-$(CONFIG_S32_GEN1) += s32gen1_ocotp.o
 obj-$(CONFIG_S32_GEN1) += s32gen1_siul2_nvram.o
+obj-$(CONFIG_S32_GEN1) += s32gen1_a53_gpr.o
 obj-$(CONFIG_SANDBOX) += syscon_sandbox.o misc_sandbox.o
 obj-$(CONFIG_SMSC_LPC47M) += smsc_lpc47m.o
 obj-$(CONFIG_SMSC_SIO1007) += smsc_sio1007.o
diff --git a/drivers/misc/s32gen1_a53_gpr.c b/drivers/misc/s32gen1_a53_gpr.c
new file mode 100644
index 0000000000..fe41226e58
--- /dev/null
+++ b/drivers/misc/s32gen1_a53_gpr.c
@@ -0,0 +1,118 @@
+// SPDX-License-Identifier: GPL-2.0+ OR BSD-3-Clause
+/*
+ * Copyright 2022 NXP
+ */
+
+#include <common.h>
+#include <dm/device.h>
+#include <dm/fdtaddr.h>
+#include <misc.h>
+#include <asm/io.h>
+#include "s32gen1_a53_gpr.h"
+
+#define A53_CLUSTER_GPR_GPR(x) ((x) * 0x4)
+#define GPR06_CA53_LOCKSTEP_EN_MASK	BIT(0)
+#define GPR06_CA53_LOCKSTEP_EN_SHIFT	0
+
+struct a53_gpr {
+	const struct a53_gpr_platdata *platdata;
+	fdt_addr_t base;
+};
+
+struct a53_gpr_mapping {
+	u32 gpr_misc_off;
+	u32 gpr_off;
+	u32 mask;
+	u32 shift;
+};
+
+struct a53_gpr_platdata {
+	const struct a53_gpr_mapping *mappings;
+	size_t n_mappings;
+	const struct a53_gpr_platdata *next;
+};
+
+static const struct a53_gpr_mapping a53_gpr_mappings[] = {
+	{
+		.gpr_misc_off = S32GEN1_A53_GPR_LOCKSTEP_EN,
+		.gpr_off = A53_CLUSTER_GPR_GPR(6),
+		.mask = GPR06_CA53_LOCKSTEP_EN_MASK,
+		.shift = GPR06_CA53_LOCKSTEP_EN_SHIFT,
+	},
+};
+
+static const struct a53_gpr_platdata s32gen1_a53_gpr_platdata = {
+	.mappings = &a53_gpr_mappings[0],
+	.n_mappings = ARRAY_SIZE(a53_gpr_mappings),
+};
+
+static int a53_gpr_read(struct udevice *dev,
+			int offset, void *buf, int size)
+{
+	struct a53_gpr *a53_gpr_data = dev_get_platdata(dev);
+	const struct a53_gpr_mapping *mapping = NULL;
+	const struct a53_gpr_platdata *platdata = a53_gpr_data->platdata;
+	size_t i;
+	u32 val;
+
+	if (size != sizeof(u32))
+		return 0;
+
+	while (platdata) {
+		for (i = 0u; i < platdata->n_mappings; i++) {
+			if (platdata->mappings[i].gpr_misc_off == offset) {
+				mapping = &platdata->mappings[i];
+				break;
+			}
+		}
+
+		if (mapping)
+			break;
+
+		platdata = platdata->next;
+	}
+
+	if (!mapping)
+		return 0;
+
+	val = readl(a53_gpr_data->base + mapping->gpr_off);
+	val = (val & mapping->mask) >> mapping->shift;
+
+	*((u32 *)buf) = val;
+	return size;
+}
+
+static int a53_gpr_set_platdata(struct udevice *dev)
+{
+	struct a53_gpr *a53_gpr_data = dev_get_platdata(dev);
+
+	a53_gpr_data->base = devfdt_get_addr(dev);
+	if (a53_gpr_data->base == (fdt_addr_t)FDT_ADDR_T_NONE)
+		return -EINVAL;
+
+	a53_gpr_data->platdata = (struct a53_gpr_platdata *)
+		dev_get_driver_data(dev);
+
+	return 0;
+}
+
+static const struct misc_ops s32gen1_a53_gpr_ops = {
+	.read = a53_gpr_read,
+};
+
+static const struct udevice_id s32gen1_a53_gpr_ids[] = {
+	{ .compatible = "fsl,s32gen1-a53-gpr",
+	  .data = (ulong)&s32gen1_a53_gpr_platdata,
+	},
+	{ /* sentinel */ }
+};
+
+U_BOOT_DRIVER(s32gen1_a53_gpr) = {
+	.name = "s32gen1-a53-gpr",
+	.id = UCLASS_MISC,
+	.ops = &s32gen1_a53_gpr_ops,
+	.of_match = s32gen1_a53_gpr_ids,
+	.platdata_auto_alloc_size = sizeof(struct a53_gpr),
+	.ofdata_to_platdata = a53_gpr_set_platdata,
+};
+
diff --git a/drivers/misc/s32gen1_a53_gpr.h b/drivers/misc/s32gen1_a53_gpr.h
new file mode 100644
index 0000000000..6473e55397
--- /dev/null
+++ b/drivers/misc/s32gen1_a53_gpr.h
@@ -0,0 +1,11 @@
+/* SPDX-License-Identifier: GPL-2.0+ OR BSD-3-Clause */
+/*
+ * Copyright 2022 NXP
+ */
+#ifndef S32GEN1_A53_GPR_H
+#define S32GEN1_A53_GPR_H
+
+/* A53 GPR6 */
+#define S32GEN1_A53_GPR_LOCKSTEP_EN	0x0
+
+#endif
-- 
2.17.1

