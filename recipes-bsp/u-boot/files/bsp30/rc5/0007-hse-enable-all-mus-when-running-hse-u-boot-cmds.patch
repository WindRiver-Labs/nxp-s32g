From 45e99a4f50ef726dff18cf9715ac68c445de4b36 Mon Sep 17 00:00:00 2001
From: Vlad Pelin <vlad.pelin@nxp.com>
Date: Mon, 9 Aug 2021 15:29:06 +0300
Subject: [PATCH 7/8] hse: enable all mus when running hse u-boot cmds

in preparation for kernel-uio split

Upstream-Status: Pending

Issue: ALB-7504
Signed-off-by: Vlad Pelin <vlad.pelin@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 .../cpu/armv8/s32/s32-gen1/hse_adv_secboot.c  | 55 +++++++++++++++++++
 include/hse/hse_abi.h                         | 42 ++++++++++++++
 2 files changed, 97 insertions(+)

diff --git a/arch/arm/cpu/armv8/s32/s32-gen1/hse_adv_secboot.c b/arch/arm/cpu/armv8/s32/s32-gen1/hse_adv_secboot.c
index e084c98c8c..ff423f045c 100644
--- a/arch/arm/cpu/armv8/s32/s32-gen1/hse_adv_secboot.c
+++ b/arch/arm/cpu/armv8/s32/s32-gen1/hse_adv_secboot.c
@@ -350,6 +350,53 @@ ret_fail:
 	return ret;
 }
 
+int hse_enable_mus(struct hse_private *priv, u32 *recv_buf)
+{
+	struct hse_getset_attr_srv *getset_attr_req;
+	int ret = 0;
+
+	printf("\tEnabling MUs...\n");
+
+	getset_attr_req = &(priv->srv_desc.getset_attr_req);
+
+	priv->srv_desc.srv_id = HSE_SRV_ID_SET_ATTR;
+
+	priv->mu_config.mu_instances[0].mu_config = HSE_MU_ACTIVATED;
+	priv->mu_config.mu_instances[0].xrdc_domain_id = 0u;
+	priv->mu_config.mu_instances[0].shared_mem_chunk_size = 0u;
+
+	priv->mu_config.mu_instances[1].mu_config = HSE_MU_ACTIVATED;
+	priv->mu_config.mu_instances[1].xrdc_domain_id = 0u;
+	priv->mu_config.mu_instances[1].shared_mem_chunk_size = 0u;
+
+	priv->mu_config.mu_instances[2].mu_config = HSE_MU_ACTIVATED;
+	priv->mu_config.mu_instances[2].xrdc_domain_id = 0u;
+	priv->mu_config.mu_instances[2].shared_mem_chunk_size = 0u;
+
+	priv->mu_config.mu_instances[3].mu_config = HSE_MU_ACTIVATED;
+	priv->mu_config.mu_instances[3].xrdc_domain_id = 0u;
+	priv->mu_config.mu_instances[3].shared_mem_chunk_size = 0u;
+
+	getset_attr_req->attr_id = HSE_MU_CONFIG_ATTR_ID;
+	getset_attr_req->attr_len = sizeof(struct hse_mu_config);
+	getset_attr_req->p_attr = (uintptr_t)&priv->mu_config;
+
+	flush_dcache_range((u64)priv,
+			   (u64)priv + sizeof(struct hse_private));
+
+	ret = hse_send_recv(HSE_CHANNEL_ADMIN,
+			    (u32)(uintptr_t)&priv->srv_desc,
+			    recv_buf);
+	if (ret) {
+		log_err("ERROR: enable MU failed!\n");
+		goto ret_fail;
+	}
+
+	ret = CMD_RET_SUCCESS;
+ret_fail:
+	return ret;
+}
+
 static int do_hse_adv_secboot_prep(cmd_tbl_t *cmdtp, int flag,
 				   int argc, char * const argv[])
 {
@@ -430,6 +477,10 @@ static int do_hse_adv_secboot_prep(cmd_tbl_t *cmdtp, int flag,
 		}
 	}
 
+	ret = hse_enable_mus(priv, &hse_recv);
+	if (ret)
+		goto ret_fail;
+
 	ret = hse_format_key_store(priv, &hse_recv);
 	if (ret)
 		goto ret_fail;
@@ -516,6 +567,10 @@ static int do_hse_keystore_format(cmd_tbl_t *cmdtp, int flag,
 		goto ret_fail;
 	}
 
+	ret = hse_enable_mus(priv, &hse_recv);
+	if (ret)
+		goto ret_fail;
+
 	ret = hse_format_key_store(priv, &hse_recv);
 	if (ret)
 		goto ret_fail;
diff --git a/include/hse/hse_abi.h b/include/hse/hse_abi.h
index 806f1dc30f..d29f8168d3 100644
--- a/include/hse/hse_abi.h
+++ b/include/hse/hse_abi.h
@@ -41,6 +41,7 @@
 #define HSE_STATUS_INIT_OK  BIT(8)
 #define HSE_IVT_BOOTSEQ_BIT BIT(3)
 
+#define HSE_SRV_ID_SET_ATTR                 0x00000001ul
 #define HSE_SRV_ID_PUBLISH_SYS_IMAGE        0x00000011ul
 #define HSE_SRV_ID_FORMAT_KEY_CATALOGS      0x00000101ul
 #define HSE_SRV_ID_IMPORT_KEY               0x00000104ul
@@ -60,6 +61,10 @@
 #define HSE_CR_SANCTION_KEEP_CORE_IN_RESET 0x7455u
 #define HSE_CR_AUTO_START                  0x35A5u
 
+#define HSE_MU_ACTIVATED      0xA5u
+#define HSE_MU_DEACTIVATED    0x5Au
+#define HSE_MU_CONFIG_ATTR_ID 20u
+
 #define HSE_SIGN_RSASSA_PKCS1_V15 0x93u
 #define HSE_HASH_ALGO_SHA_1       2u
 
@@ -338,6 +343,40 @@ struct hse_publish_sys_img_srv {
 	u64 buff_addr;
 } __packed;
 
+/**
+ * struct hse_mu_instance_config - configure a MU interface
+ * @mu_config: specify MU state; MU0 cannot be deactivated
+ * @xrdc_domain_id: domain id to acces host interface memory chunk
+ * @shared_mem_chunk_size: which chunk of host interface memory to reserve
+ */
+struct hse_mu_instance_config {
+	u8 mu_config;
+	u8 xrdc_domain_id;
+	u16 shared_mem_chunk_size;
+	u8 reserved[60];
+} __packed;
+
+/**
+ * struct hse_mu_config - configure all MU interfaces
+ * @mu_instances: contains configuration for all MU interfaces
+ */
+struct hse_mu_config {
+	struct hse_mu_instance_config mu_instances[4];
+} __packed;
+
+/**
+ * struct hse_getset_attr_srv - get attribute
+ * @attr_id: attribute ID
+ * @attr_len: attribute length, in bytes
+ * @attr: DMA address of the attribute
+ */
+struct hse_getset_attr_srv {
+	u16 attr_id;
+	u8 reserved[2];
+	u32 attr_len;
+	u64 p_attr;
+} __packed;
+
 /**
  * struct hse_srv_desc - HSE service descriptor
  * @srv_id: specify service for HSE to execute
@@ -347,6 +386,7 @@ struct hse_srv_desc {
 	u32 srv_id;
 	u8 reserved[4];
 	union {
+		struct hse_getset_attr_srv getset_attr_req;
 		struct hse_format_key_catalogs_srv format_catalogs_req;
 		struct hse_import_key_srv import_key_req;
 		struct hse_cr_install_srv cr_install_req;
@@ -362,6 +402,7 @@ struct hse_srv_desc {
  * @key_info: key data for insertion into catalog
  * @cr_entry: core reset entry data
  * @smr_entry: secure memory region data
+ * @mu_config: mu configuration data
  * @rsa2048_pub_modulus: public modulus of u-boot signature key
  * @rsa2048_pub_exponent: public exponent of u-boot signature key
  * @uboot_sign: copy of u-boot signature in ddr
@@ -378,6 +419,7 @@ struct hse_private {
 	struct hse_key_info key_info;
 	struct hse_cr_entry cr_entry;
 	struct hse_smr_entry smr_entry;
+	struct hse_mu_config mu_config;
 	u8 rsa2048_pub_modulus[256];
 	u8 rsa2048_pub_exponent[3];
 	u8 reserved1;
-- 
2.17.1

