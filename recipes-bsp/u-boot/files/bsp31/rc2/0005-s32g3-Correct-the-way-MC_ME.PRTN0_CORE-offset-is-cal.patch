From 23101c4a38795c014ac14360fcb0172475d872af Mon Sep 17 00:00:00 2001
From: Ghennadi Procopciuc <ghennadi.procopciuc@oss.nxp.com>
Date: Mon, 20 Sep 2021 12:11:58 +0300
Subject: [PATCH 05/19] s32g3: Correct the way MC_ME.PRTN0_CORE* offset is
 calculated

This update is based on S32G3 reference manual Rev. 1 Draft R, 07/2021

Issue: ALB-7715
Upstream-Status: Pending 

Signed-off-by: Ghennadi Procopciuc <ghennadi.procopciuc@oss.nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 arch/arm/cpu/armv8/s32/s32-gen1/Makefile      |  1 +
 arch/arm/cpu/armv8/s32/s32-gen1/s32g3_soc.c   | 47 +++++++++++++++++++
 arch/arm/cpu/armv8/s32/s32-gen1/soc.c         |  5 ++
 .../asm/arch-s32/s32-gen1/mc_me_regs.h        |  6 ++-
 4 files changed, 58 insertions(+), 1 deletion(-)
 create mode 100644 arch/arm/cpu/armv8/s32/s32-gen1/s32g3_soc.c

diff --git a/arch/arm/cpu/armv8/s32/s32-gen1/Makefile b/arch/arm/cpu/armv8/s32/s32-gen1/Makefile
index cdabcbbc2a..997e6decad 100644
--- a/arch/arm/cpu/armv8/s32/s32-gen1/Makefile
+++ b/arch/arm/cpu/armv8/s32/s32-gen1/Makefile
@@ -6,6 +6,7 @@
 obj-$(CONFIG_S32_CMU)			+= cmu.o
 obj-$(CONFIG_NXP_S32G2XX)		+= s32g2_cmu.o
 obj-$(CONFIG_NXP_S32G3XX)		+= s32g3_cmu.o
+obj-$(CONFIG_NXP_S32G3XX)		+= s32g3_soc.o
 obj-$(CONFIG_NXP_S32R45)		+= s32r45_cmu.o
 obj-$(CONFIG_HSE_SECBOOT)		+= hse_adv_secboot.o
 obj-y					+= ncore.o
diff --git a/arch/arm/cpu/armv8/s32/s32-gen1/s32g3_soc.c b/arch/arm/cpu/armv8/s32/s32-gen1/s32g3_soc.c
new file mode 100644
index 0000000000..651177b45f
--- /dev/null
+++ b/arch/arm/cpu/armv8/s32/s32-gen1/s32g3_soc.c
@@ -0,0 +1,47 @@
+// SPDX-License-Identifier:     GPL-2.0+
+/*
+ * Copyright 2021 NXP
+ */
+
+#include <asm/arch/s32-gen1/mc_me_regs.h>
+
+u8 mc_me_core2prtn_core_id(u8 part, u8 id)
+{
+	/**
+	 * A map where the key is core id obtained from MPIDR and the
+	 * value represents the ID of the core in MC_ME.PRTN1_CORE*
+	 */
+	static const u8 mc_me_a53_core_id[] = {
+		/* Cluster 0, core 0 */
+		[0] = 0,
+		/* Cluster 0, core 1 */
+		[1] = 1,
+		/* Cluster 0, core 2 */
+		[2] = 4,
+		/* Cluster 0, core 3 */
+		[3] = 5,
+		/* Cluster 1, core 0 */
+		[4] = 2,
+		/* Cluster 1, core 1 */
+		[5] = 3,
+		/* Cluster 1, core 2 */
+		[6] = 6,
+		/* Cluster 1, core 3 */
+		[7] = 7,
+	};
+
+	static const u8 mc_me_m7_core_id[] = {
+		/* Core 0 */
+		[0] = 0,
+		[1] = 1,
+		[2] = 2,
+		/* Core 3 */
+		[3] = 4,
+	};
+
+	if (part == MC_ME_CORES_PRTN)
+		return mc_me_a53_core_id[id];
+
+	return mc_me_m7_core_id[id];
+}
+
diff --git a/arch/arm/cpu/armv8/s32/s32-gen1/soc.c b/arch/arm/cpu/armv8/s32/s32-gen1/soc.c
index 0d4ad571c8..16ad62c389 100644
--- a/arch/arm/cpu/armv8/s32/s32-gen1/soc.c
+++ b/arch/arm/cpu/armv8/s32/s32-gen1/soc.c
@@ -383,3 +383,8 @@ __weak u32 get_sram_size(void)
 {
 	return S32_SRAM_SIZE;
 }
+
+__weak u8 mc_me_core2prtn_core_id(u8 part, u8 id)
+{
+	return id;
+}
diff --git a/arch/arm/include/asm/arch-s32/s32-gen1/mc_me_regs.h b/arch/arm/include/asm/arch-s32/s32-gen1/mc_me_regs.h
index feaeb4e2ee..50bde345c6 100644
--- a/arch/arm/include/asm/arch-s32/s32-gen1/mc_me_regs.h
+++ b/arch/arm/include/asm/arch-s32/s32-gen1/mc_me_regs.h
@@ -9,6 +9,7 @@
 #define __ARCH_ARM_MACH_S32GEN1_MCME_REGS_H__
 
 #ifndef __ASSEMBLY__
+#include <common.h>
 
 /* MC_ME registers. */
 #define MC_ME_CTL_KEY(MC_ME)		(UPTR(MC_ME) + 0x0)
@@ -45,7 +46,8 @@
 
 /* MC_ME partition 1 m M definitions. */
 #define MC_ME_PRTN_N_CORE_M(n, m)	(MC_ME_BASE_ADDR + 0x140 + \
-						(n) * 0x200 + (m) * 0x20)
+					 (n) * 0x200 + \
+					 mc_me_core2prtn_core_id(n, m) * 0x20)
 #define MC_ME_PRTN_N_CORE_M_PCONF(n, m)	(MC_ME_PRTN_N_CORE_M(n, m))
 #define MC_ME_PRTN_N_CORE_M_PUPD(n, m)	(MC_ME_PRTN_N_CORE_M(n, m) + 0x4)
 #define MC_ME_PRTN_N_CORE_M_STAT(n, m)	(MC_ME_PRTN_N_CORE_M(n, m) + 0x8)
@@ -72,6 +74,8 @@
 
 #define RDC_RD_STAT_XBAR_DISABLE_MASK	BIT(4)
 
+u8 mc_me_core2prtn_core_id(u8 part, u8 id);
+
 #endif
 
 #endif /*__ARCH_ARM_MACH_S32GEN1_MCME_REGS_H__ */
-- 
2.17.1

