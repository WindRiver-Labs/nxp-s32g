From dbb5cadb4756a275c1a8febd7281a2021dc90e12 Mon Sep 17 00:00:00 2001
From: Ghennadi Procopciuc <ghennadi.procopciuc@oss.nxp.com>
Date: Tue, 7 Sep 2021 10:12:04 +0300
Subject: [PATCH 4/5] clk: s32-gen1: Set the frequency to the nearest available
 value

Upstream-Status: Pending

Issue: ALB-7681
Signed-off-by: Ghennadi Procopciuc <ghennadi.procopciuc@oss.nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 board/freescale/s32-gen1/Kconfig |  9 +++++++++
 drivers/clk/s32/enable_clk.c     | 24 ++++++++++++++++--------
 2 files changed, 25 insertions(+), 8 deletions(-)

diff --git a/board/freescale/s32-gen1/Kconfig b/board/freescale/s32-gen1/Kconfig
index 3f9190f179..c75cf8d2b8 100644
--- a/board/freescale/s32-gen1/Kconfig
+++ b/board/freescale/s32-gen1/Kconfig
@@ -18,6 +18,15 @@ config TARGET_TYPE_S32GEN1_SIMULATOR
 
 endif
 
+config S32GEN1_SET_NEAREST_FREQ
+	bool "Set the frequency to the nearest available"
+	default n
+	help
+	  Select this config to allow the clock driver to set
+	  the nearest frequency for a clock if the requested
+	  one cannot be set. In both cases, an error will be
+	  printed with the targeted and the actual frequency.
+
 config S32GEN1_DRAM_INLINE_ECC
 	bool "S32 GEN1 inline ECC"
 	default y if !TARGET_TYPE_S32GEN1_EMULATOR
diff --git a/drivers/clk/s32/enable_clk.c b/drivers/clk/s32/enable_clk.c
index 807e4291fa..2640cb354b 100644
--- a/drivers/clk/s32/enable_clk.c
+++ b/drivers/clk/s32/enable_clk.c
@@ -350,9 +350,11 @@ static int enable_cgm_div(struct s32gen1_clk_obj *module,
 
 	dc = (u32)(pfreq / div->freq);
 	if ((ulong)(pfreq / dc) != div->freq) {
-		pr_err("Cannot set CGM divider for input = %lu & output = %lu\n",
-		       (ulong)pfreq, div->freq);
+		pr_err("Cannot set CGM divider for input = %lu & output = %lu. Nearest freq = %lu\n",
+		       (ulong)pfreq, div->freq, (ulong)(pfreq / dc));
+#ifndef CONFIG_S32GEN1_SET_NEAREST_FREQ
 		return -EINVAL;
+#endif
 	}
 
 	mux = get_cgm_div_mux(div);
@@ -385,9 +387,11 @@ static int get_dfs_mfi_mfn(ulong dfs_freq, struct s32gen1_dfs_div *div,
 	div_freq = (double)in / (2 * (*mfi + (double)*mfn / 36.0));
 
 	if ((ulong)div_freq != div->freq) {
-		pr_err("Failed to find MFI and MFN settings for DFS DIV freq %lu\n",
-		       div->freq);
+		pr_err("Failed to find MFI and MFN settings for DFS DIV freq %lu. Nearest freq = %lu\n",
+		       div->freq, (ulong)div_freq);
+#ifndef CONFIG_S32GEN1_SET_NEAREST_FREQ
 		return -EINVAL;
+#endif
 	}
 
 	return 0;
@@ -544,9 +548,11 @@ int get_pll_mfi_mfn(ulong pll_vco, ulong ref_freq, u32 *mfi, u32 *mfn)
 	vco = ref_freq * (*mfi + (double)*mfn / 18432.0);
 
 	if ((ulong)vco != pll_vco) {
-		pr_err("Failed to find MFI and MFN settings for PLL freq %lu\n",
-		       pll_vco);
+		pr_err("Failed to find MFI and MFN settings for PLL freq %lu. Nearest freq = %lu\n",
+		       pll_vco, (ulong)vco);
+#ifndef CONFIG_S32GEN1_SET_NEAREST_FREQ
 		return -EINVAL;
+#endif
 	}
 
 	return 0;
@@ -867,9 +873,11 @@ static int enable_pll_div(struct s32gen1_clk_obj *module,
 
 	dc = (u32)(pfreq / div->freq);
 	if ((ulong)(pfreq / dc) != div->freq) {
-		pr_err("Cannot set PLL divider for input = %lu & output = %lu\n",
-		       (ulong)pfreq, div->freq);
+		pr_err("Cannot set PLL divider for input = %lu & output = %lu. Nearest freq = %lu\n",
+		       (ulong)pfreq, div->freq, (ulong)(pfreq / dc));
+#ifndef CONFIG_S32GEN1_SET_NEAREST_FREQ
 		return -EINVAL;
+#endif
 	}
 
 	config_pll_out_div(pll_addr, div->index, dc);
-- 
2.17.1

