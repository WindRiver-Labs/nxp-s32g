From 709795a545c749cde1ab96c82b7f2b7cd01a119a Mon Sep 17 00:00:00 2001
From: Ghennadi Procopciuc <ghennadi.procopciuc@nxp.com>
Date: Mon, 4 Oct 2021 13:38:06 +0300
Subject: [PATCH 04/14] s32g3: Correct the way secondary cores are kicked-off

Encapsulate A53 cluster's clock enablement into a new function
and correct core's MC_RGM mask.

Issue: ALB-7715
Upstream-Status: Pending 

Signed-off-by: Ghennadi Procopciuc <ghennadi.procopciuc@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 arch/arm/cpu/armv8/s32/mp.c                   | 41 ++++++++++++-------
 arch/arm/cpu/armv8/s32/s32-gen1/s32g3_soc.c   |  2 +-
 arch/arm/cpu/armv8/s32/s32-gen1/soc.c         |  2 +-
 .../asm/arch-s32/s32-gen1/mc_me_regs.h        | 28 +++++++++----
 4 files changed, 48 insertions(+), 25 deletions(-)

diff --git a/arch/arm/cpu/armv8/s32/mp.c b/arch/arm/cpu/armv8/s32/mp.c
index 7fb9eeb0d3..9b2aa3c957 100644
--- a/arch/arm/cpu/armv8/s32/mp.c
+++ b/arch/arm/cpu/armv8/s32/mp.c
@@ -70,10 +70,8 @@ static unsigned long get_core_start_addr(int core)
 	return readl(MC_ME_PRTN_N_CORE_M_ADDR(MC_ME_CORES_PRTN, core));
 }
 
-static void fsl_s32_wake_secondary_core(int prtn, int core)
+static void enable_a53_core_cluster(int core)
 {
-	u32 reset, resetc;
-
 	/* For S32G2/S32R45 we have the following mapping:
 	 * MC_ME_PRTN1_CORE0_* -> CA53 cluster0 core0/1
 	 * MC_ME_PRTN1_CORE2_* -> CA53 cluster1 core0/1
@@ -81,10 +79,14 @@ static void fsl_s32_wake_secondary_core(int prtn, int core)
 	 * MC_ME_PRTN1_CORE0_* -> CA53 cluster0 core0/1/2/3
 	 * MC_ME_PRTN1_CORE2_* -> CA53 cluster1 core0/1/2/3
 	 */
-	u32 pconf_index = (core % 4) & ~1;
+	u32 pconf_cluster = (core % 4) & ~1;
+	u32 prtn = MC_ME_CORES_PRTN;
+	u32 stat;
 
-	/* MC_ME holds the low 32 bits of the start_address */
-	writel(gd->relocaddr, MC_ME_PRTN_N_CORE_M_ADDR(prtn, core));
+	stat = readl(MC_ME_PRTN_PART(prtn, pconf_cluster) +
+		     MC_ME_PRTN_N_STAT_OFF);
+	if (stat & MC_ME_PRTN_N_CORE_M_STAT_CCS)
+		return;
 
 	/* If in performance (i.e. not lockstep) mode, the following bits used
 	 * in the core wakeup sequence are only defined for the first core of
@@ -94,23 +96,34 @@ static void fsl_s32_wake_secondary_core(int prtn, int core)
 	 * Enable core clock
 	 */
 	writel(MC_ME_PRTN_N_CORE_M_PCONF_CCE,
-	       MC_ME_PRTN_N_CORE_M_PCONF(prtn, pconf_index));
+	       MC_ME_PRTN_PART(prtn, pconf_cluster) + MC_ME_PRTN_N_PCONF_OFF);
 	writel(MC_ME_PRTN_N_CORE_M_PUPD_CCUPD,
-	       MC_ME_PRTN_N_CORE_M_PUPD(prtn, pconf_index));
+	       MC_ME_PRTN_PART(prtn, pconf_cluster) + MC_ME_PRTN_N_PUPD_OFF);
 
 	/* Write valid key sequence to trigger the update. */
 	writel(MC_ME_CTL_KEY_KEY, MC_ME_CTL_KEY(MC_ME_BASE_ADDR));
 	writel(MC_ME_CTL_KEY_INVERTEDKEY, MC_ME_CTL_KEY(MC_ME_BASE_ADDR));
 
 	/* Wait for core clock enable status bit. */
-	while ((readl(MC_ME_PRTN_N_CORE_M_STAT(prtn, pconf_index)) &
-				MC_ME_PRTN_N_CORE_M_STAT_CCS) !=
-			MC_ME_PRTN_N_CORE_M_STAT_CCS)
-		;
+	do {
+		stat = readl(MC_ME_PRTN_PART(prtn, pconf_cluster) +
+			     MC_ME_PRTN_N_STAT_OFF);
+	} while ((stat & MC_ME_PRTN_N_CORE_M_STAT_CCS) !=
+		 MC_ME_PRTN_N_CORE_M_STAT_CCS);
+}
+
+static void fsl_s32_wake_secondary_core(u32 prtn, u32 core)
+{
+	u32 reset, resetc;
+
+	enable_a53_core_cluster(core);
+
+	/* MC_ME holds the low 32 bits of the start_address */
+	writel(gd->relocaddr, MC_ME_PRTN_N_CORE_M_ADDR(prtn, core));
 
 	/* Deassert core reset */
 	reset = readl(RGM_PRST(MC_RGM_BASE_ADDR, RGM_CORES_RESET_GROUP));
-	resetc = get_rgm_a53_bit(core);
+	resetc = BIT(get_rgm_a53_bit(core));
 	reset &= ~resetc;
 	writel(reset, RGM_PRST(MC_RGM_BASE_ADDR, RGM_CORES_RESET_GROUP));
 	while ((readl(RGM_PSTAT(MC_RGM_BASE_ADDR, RGM_CORES_RESET_GROUP))
@@ -142,7 +155,7 @@ int fsl_s32_wake_secondary_cores(void)
 	 */
 	for (i = 1; i <= fls(mask); i++) {
 		if (test_bit(i, &mask))
-			fsl_s32_wake_secondary_core(1, i);
+			fsl_s32_wake_secondary_core(MC_ME_CORES_PRTN, i);
 	}
 
 	smp_kick_all_cpus();
diff --git a/arch/arm/cpu/armv8/s32/s32-gen1/s32g3_soc.c b/arch/arm/cpu/armv8/s32/s32-gen1/s32g3_soc.c
index dcbd8b9411..dc58f7e88b 100644
--- a/arch/arm/cpu/armv8/s32/s32-gen1/s32g3_soc.c
+++ b/arch/arm/cpu/armv8/s32/s32-gen1/s32g3_soc.c
@@ -60,5 +60,5 @@ u8 get_rgm_a53_bit(u8 core)
 		[7] = 72,
 	};
 
-	return BIT(periph_rgm_cores[core] % 64);
+	return periph_rgm_cores[core] % 64;
 }
diff --git a/arch/arm/cpu/armv8/s32/s32-gen1/soc.c b/arch/arm/cpu/armv8/s32/s32-gen1/soc.c
index 8fb750b153..69277fe0c6 100644
--- a/arch/arm/cpu/armv8/s32/s32-gen1/soc.c
+++ b/arch/arm/cpu/armv8/s32/s32-gen1/soc.c
@@ -395,5 +395,5 @@ __weak u8 get_rgm_a53_bit(u8 core)
 	 * Bit corresponding to CA53_n in the cores'
 	 * RGM reset partition (n=0..3)
 	 */
-	return BIT(core + 1);
+	return core + 1;
 }
diff --git a/arch/arm/include/asm/arch-s32/s32-gen1/mc_me_regs.h b/arch/arm/include/asm/arch-s32/s32-gen1/mc_me_regs.h
index 50bde345c6..7aeaf903a3 100644
--- a/arch/arm/include/asm/arch-s32/s32-gen1/mc_me_regs.h
+++ b/arch/arm/include/asm/arch-s32/s32-gen1/mc_me_regs.h
@@ -1,8 +1,7 @@
+/* SPDX-License-Identifier: BSD-3-Clause */
 /*
  * (C) Copyright 2015-2016 Freescale Semiconductor, Inc.
- * (C) Copyright 2017-2020 NXP
- *
- * SPDX-License-Identifier:	GPL-2.0+
+ * Copyright 2017-2021 NXP
  */
 
 #ifndef __ARCH_ARM_MACH_S32GEN1_MCME_REGS_H__
@@ -45,13 +44,24 @@
 #define MC_ME_PRTN_N_REQ(n)		BIT(n)
 
 /* MC_ME partition 1 m M definitions. */
-#define MC_ME_PRTN_N_CORE_M(n, m)	(MC_ME_BASE_ADDR + 0x140 + \
-					 (n) * 0x200 + \
-					 mc_me_core2prtn_core_id(n, m) * 0x20)
+#define MC_ME_PRTN_PART(PART, PRTN)	(MC_ME_BASE_ADDR + 0x140UL + \
+					 (PART) * 0x200UL + \
+					 (PRTN) * 0x20UL)
+#define MC_ME_PRTN_N_CORE_M(n, m)	\
+	MC_ME_PRTN_PART(n, mc_me_core2prtn_core_id((n), (m)))
+
+#define MC_ME_PRTN_N_PCONF_OFF	0x0
+#define MC_ME_PRTN_N_PUPD_OFF	0x4
+#define MC_ME_PRTN_N_STAT_OFF	0x8
+#define MC_ME_PRTN_N_ADDR_OFF	0xC
+
 #define MC_ME_PRTN_N_CORE_M_PCONF(n, m)	(MC_ME_PRTN_N_CORE_M(n, m))
-#define MC_ME_PRTN_N_CORE_M_PUPD(n, m)	(MC_ME_PRTN_N_CORE_M(n, m) + 0x4)
-#define MC_ME_PRTN_N_CORE_M_STAT(n, m)	(MC_ME_PRTN_N_CORE_M(n, m) + 0x8)
-#define MC_ME_PRTN_N_CORE_M_ADDR(n, m)	(MC_ME_PRTN_N_CORE_M(n, m) + 0xC)
+#define MC_ME_PRTN_N_CORE_M_PUPD(n, m)	(MC_ME_PRTN_N_CORE_M(n, m) +\
+					 MC_ME_PRTN_N_PUPD_OFF)
+#define MC_ME_PRTN_N_CORE_M_STAT(n, m)	(MC_ME_PRTN_N_CORE_M(n, m) +\
+					 MC_ME_PRTN_N_STAT_OFF)
+#define MC_ME_PRTN_N_CORE_M_ADDR(n, m)	(MC_ME_PRTN_N_CORE_M(n, m) +\
+					 MC_ME_PRTN_N_ADDR_OFF)
 
 /* MC_ME_PRTN_N_CORE_M_* registers fields. */
 #define MC_ME_PRTN_N_CORE_M_PCONF_CCE		BIT(0)
-- 
2.17.1

