From 9fdbd07d39611e5bf2cf971e0d8da848f70f73f3 Mon Sep 17 00:00:00 2001
From: Bogdan Folea <bogdan.folea@nxp.com>
Date: Fri, 21 Jan 2022 14:43:20 +0200
Subject: [PATCH] examples: add low-level libhse example

Issue: ALB-8319
Upstream-Status: Pending 

Signed-off-by: Bogdan Folea <bogdan.folea@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 examples/Makefile      |  31 ++++++--
 examples/hse-encrypt.c | 165 +++++++++++++++++++++++++++++++++++++++++
 2 files changed, 190 insertions(+), 6 deletions(-)
 create mode 100644 examples/hse-encrypt.c

diff --git a/examples/Makefile b/examples/Makefile
index 73d1cc5..62b214e 100644
--- a/examples/Makefile
+++ b/examples/Makefile
@@ -2,10 +2,13 @@
 # Copyright 2021 NXP
 #
 
-CROSS_COMPILE?=
 CFLAGS ?= -Wall -g
 LDFLAGS ?= -lcrypto -lp11
 
+ifeq (,$(CROSS_COMPILE))
+    $(error CROSS_COMPILE is not set)
+endif
+
 ifeq (,$(OPENSSL_DIR))
 $(warning Path to cross-compiled OpenSSL not defined, using default location)
 endif
@@ -16,16 +19,32 @@ $(warning Path to cross-compiled libp11 not defined, using default location)
 endif
 LIBP11_DIR ?= $(HOME)/libp11-aarch64
 
-INCLUDE ?= -I$(OPENSSL_DIR)/include \
-		-I$(LIBP11_DIR)/include
+ifeq (,$(HSE_FWDIR))
+$(warning Path to HSE firmware package not defined, using default location)
+endif
+HSE_FWDIR ?= $(HOME)/HSE_FW_S32G2_0_1_0_0
+LIBHSE_SRCDIR ?= ../libhse
+LIBHSE_DIR ?= ..
+
+INCLUDE1 ?= -I$(OPENSSL_DIR)/include \
+	    -I$(LIBP11_DIR)/include
+
+INCLUDE2 := -I$(LIBHSE_SRCDIR) \
+	    -I$(HSE_FWDIR)/interface \
+	    -I$(HSE_FWDIR)/interface/config \
+	    -I$(HSE_FWDIR)/interface/inc_common \
+	    -I$(HSE_FWDIR)/interface/inc_services
 
 LIBS ?= -L$(OPENSSL_DIR)/lib \
 	-L$(LIBP11_DIR)/lib
 
-all: pkcs-keyop
+all: pkcs-keyop hse-encrypt
 
 pkcs-keyop: pkcs-keyop.c
-	$(CROSS_COMPILE)gcc $(LIBS) $(INCLUDE) $(CFLAGS) $^ -o $@ $(LDFLAGS)
+	$(CROSS_COMPILE)gcc $(LIBS) $(INCLUDE1) $(CFLAGS) $^ -o $@ $(LDFLAGS)
+
+hse-encrypt: hse-encrypt.c
+	$(CROSS_COMPILE)gcc -L$(LIBHSE_DIR) $(INCLUDE2) $(CFLAGS) $^ -o $@ -lhse
 
 clean:
-	rm -f pkcs-keyop
+	rm -f pkcs-keyop hse-encrypt
diff --git a/examples/hse-encrypt.c b/examples/hse-encrypt.c
new file mode 100644
index 0000000..d944a42
--- /dev/null
+++ b/examples/hse-encrypt.c
@@ -0,0 +1,165 @@
+// SPDX-License-Identifier: BSD-3-Clause
+/*
+ * Demo using libhse interface
+ *
+ * This is a simple application that generates an AES-256 key, encrypts some
+ * data using AES-CBC, then decrypts it in-place and compares the result.
+ *
+ * Copyright 2022 NXP
+ */
+
+#include <stdio.h>
+#include <stdint.h>
+#include <string.h>
+#include <errno.h>
+
+#include "libhse.h"
+#include "hse_interface.h"
+
+#define AES_BLOCK_SIZE    16u
+
+#define INPUT_SIZE    256u
+
+int main(int argc, char *argv[])
+{
+	hseSrvDescriptor_t srv_desc = {0};
+	void *iv, *plaintext, *ciphertext;
+	unsigned int group_id, slot_id;
+	uint32_t key_handle;
+	uint16_t status;
+	int err;
+
+	switch (argc) {
+	case 1:
+		/* when no arguments are given, use handle 020103 by default */
+		group_id = 0x01u;
+		slot_id = 0x03u;
+		break;
+	case 3:
+		/* parse input key group and slot index */
+		 sscanf(argv[1], "%d", &group_id);
+		 sscanf(argv[2], "%d", &slot_id);
+		 break;
+	default:
+		printf("usage: %s <group_id> <slot_index>\n", argv[1]);
+		printf("- must point to a valid AES-256 slot in RAM catalog\n");
+		return EINVAL;
+	}
+	key_handle = GET_KEY_HANDLE(HSE_KEY_CATALOG_ID_RAM, group_id, slot_id);
+
+	/* open HSE device */
+	err = hse_dev_open();
+	if (err) {
+		printf("DEMO: failed to open HSE device: error %d\n", err);
+		return err;
+	}
+
+	/* check firmware global status */
+	status = hse_check_status();
+	if (!(status & HSE_STATUS_INSTALL_OK)) {
+		printf("DEMO: key catalogs not formatted\n");
+		err = ENODEV;
+		goto out_dev_close;
+	}
+	printf("DEMO: using RAM key group %d, slot %d\n", group_id, slot_id);
+
+	/* fill in key generation service descriptor */
+	srv_desc.srvId = HSE_SRV_ID_KEY_GENERATE;
+	srv_desc.hseSrv.keyGenReq.targetKeyHandle = key_handle;
+	srv_desc.hseSrv.keyGenReq.keyInfo.keyBitLen = 256u;
+	srv_desc.hseSrv.keyGenReq.keyInfo.keyFlags = HSE_KF_USAGE_ENCRYPT |
+						     HSE_KF_USAGE_DECRYPT;
+	srv_desc.hseSrv.keyGenReq.keyInfo.smrFlags = 0u;
+	srv_desc.hseSrv.keyGenReq.keyInfo.keyType = HSE_KEY_TYPE_AES;
+	srv_desc.hseSrv.keyGenReq.keyGenScheme = HSE_KEY_GEN_SYM_RANDOM_KEY;
+
+	/* issue key generation service request */
+	err = hse_srv_req_sync(HSE_CHANNEL_ANY, &srv_desc);
+	if (err) {
+		printf("DEMO: generate key request failed: error %d\n", err);
+		goto out_dev_close;
+	}
+	printf("DEMO: key generation successful\n");
+
+	/* allocate IV, input and output buffers */
+	iv = hse_mem_alloc(AES_BLOCK_SIZE);
+	if (!iv) {
+		return ENOMEM;
+		goto out_dev_close;
+	}
+	memset(iv, 0, AES_BLOCK_SIZE);
+
+	plaintext = hse_mem_alloc(INPUT_SIZE);
+	if (!plaintext) {
+		err = ENOMEM;
+		goto out_free_iv;
+	}
+	memcpy(plaintext, "Simple symmetric cipher encryption test", 40u);
+
+	ciphertext = hse_mem_alloc(INPUT_SIZE);
+	if (!ciphertext) {
+		err = ENOMEM;
+		goto out_free_input;
+	}
+
+	/* fill in symmetric cipher encrypt service descriptor */
+	srv_desc.srvId = HSE_SRV_ID_SYM_CIPHER;
+	srv_desc.hseSrv.symCipherReq.accessMode = HSE_ACCESS_MODE_ONE_PASS;
+	srv_desc.hseSrv.symCipherReq.cipherAlgo = HSE_CIPHER_ALGO_AES;
+	srv_desc.hseSrv.symCipherReq.cipherBlockMode = HSE_CIPHER_BLOCK_MODE_CBC;
+	srv_desc.hseSrv.symCipherReq.cipherDir = HSE_CIPHER_DIR_ENCRYPT;
+	srv_desc.hseSrv.symCipherReq.sgtOption = HSE_SGT_OPTION_NONE;
+	srv_desc.hseSrv.symCipherReq.keyHandle = key_handle;
+	srv_desc.hseSrv.symCipherReq.pIV = hse_virt_to_dma(iv);
+	srv_desc.hseSrv.symCipherReq.inputLength = INPUT_SIZE;
+	srv_desc.hseSrv.symCipherReq.pInput = hse_virt_to_dma(plaintext);
+	srv_desc.hseSrv.symCipherReq.pOutput = hse_virt_to_dma(ciphertext);
+
+	/* issue encrypt service request */
+	err = hse_srv_req_sync(HSE_CHANNEL_ANY, &srv_desc);
+	if (err) {
+		printf("DEMO: encrypt request failed: error %d\n", err);
+		goto out_free_output;
+	}
+	printf("DEMO: encrypt operation successful\n");
+
+	/* fill in symmetric cipher decrypt service descriptor */
+	srv_desc.srvId = HSE_SRV_ID_SYM_CIPHER;
+	srv_desc.hseSrv.symCipherReq.accessMode = HSE_ACCESS_MODE_ONE_PASS;
+	srv_desc.hseSrv.symCipherReq.cipherAlgo = HSE_CIPHER_ALGO_AES;
+	srv_desc.hseSrv.symCipherReq.cipherBlockMode = HSE_CIPHER_BLOCK_MODE_CBC;
+	srv_desc.hseSrv.symCipherReq.cipherDir = HSE_CIPHER_DIR_DECRYPT;
+	srv_desc.hseSrv.symCipherReq.sgtOption = HSE_SGT_OPTION_NONE;
+	srv_desc.hseSrv.symCipherReq.keyHandle = key_handle;
+	srv_desc.hseSrv.symCipherReq.pIV = hse_virt_to_dma(iv);
+	srv_desc.hseSrv.symCipherReq.inputLength = INPUT_SIZE;
+	srv_desc.hseSrv.symCipherReq.pInput = hse_virt_to_dma(ciphertext);
+	srv_desc.hseSrv.symCipherReq.pOutput = hse_virt_to_dma(ciphertext);
+
+	/* issue decrypt service request */
+	err = hse_srv_req_sync(HSE_CHANNEL_ANY, &srv_desc);
+	if (err) {
+		printf("DEMO: decrypt request failed: error %d\n", err);
+		goto out_free_output;
+	}
+	printf("DEMO: decrypt operation successful\n");
+
+	/* check result against initial input */
+	err = memcmp(plaintext, ciphertext, INPUT_SIZE);
+	if (err != 0) {
+		printf("DEMO: error - result does not match plaintext\n");
+		err = EBADMSG;
+		goto out_free_output;
+	}
+	printf("DEMO: result check successful\n");
+
+out_free_output:
+	hse_mem_free(ciphertext);
+out_free_input:
+	hse_mem_free(plaintext);
+out_free_iv:
+	hse_mem_free(iv);
+out_dev_close:
+	hse_dev_close();
+	return err;
+}
-- 
2.17.1

