From 58ab4fec417859908719f34518b16d8406a0f9df Mon Sep 17 00:00:00 2001
From: Vlad Pelin <vlad.pelin@nxp.com>
Date: Fri, 7 Jan 2022 14:07:02 +0200
Subject: [PATCH 3/3] pkcs: fix goto labels for consistency

Upstream-Status: Pending

Issue: ALB-8288
Signed-off-by: Vlad Pelin <vlad.pelin@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 libpkcs/pkcs11_crypt.c  | 170 ++++++++++++++++------------------------
 libpkcs/pkcs11_object.c |  87 +++++++++-----------
 libpkcs/pkcs11_random.c |  29 +++----
 3 files changed, 118 insertions(+), 168 deletions(-)

diff --git a/libpkcs/pkcs11_crypt.c b/libpkcs/pkcs11_crypt.c
index 4b203d1..482c607 100644
--- a/libpkcs/pkcs11_crypt.c
+++ b/libpkcs/pkcs11_crypt.c
@@ -61,52 +61,42 @@ CK_DEFINE_FUNCTION(CK_RV, C_Encrypt)(
 	CK_RV rc = CKR_OK;
 	int err;
 
-	if (gCtx->cryptokiInit == CK_FALSE) {
-		rc = CKR_CRYPTOKI_NOT_INITIALIZED;
-		goto gen_err;
-	}
+	if (gCtx->cryptokiInit == CK_FALSE)
+		return CKR_CRYPTOKI_NOT_INITIALIZED;
 
-	if (gCtx->cryptCtx.init == CK_FALSE) {
-		rc = CKR_OPERATION_NOT_INITIALIZED;
-		goto gen_err;
-	}
+	if (gCtx->cryptCtx.init == CK_FALSE)
+		return CKR_OPERATION_NOT_INITIALIZED;
 
-	if (hSession != SESSION_ID) {
-		rc = CKR_SESSION_HANDLE_INVALID;
-		goto gen_err;
-	}
+	if (hSession != SESSION_ID)
+		return CKR_SESSION_HANDLE_INVALID;
 
-	if (pData == NULL || pEncryptedData == NULL || pulEncryptedDataLen == NULL) {
-		rc = CKR_ARGUMENTS_BAD;
-		goto gen_err;
-	}
+	if (pData == NULL || pEncryptedData == NULL || pulEncryptedDataLen == NULL)
+		return CKR_ARGUMENTS_BAD;
 
 	key = (struct hse_keyObject *)list_seek(&gCtx->objects, &gCtx->cryptCtx.keyHandle);
 
 	input = hse_mem_alloc(ulDataLen);
-	if (input == NULL) {
-		rc = CKR_HOST_MEMORY;
-		goto gen_err;
-	}
+	if (input == NULL) 
+		return CKR_HOST_MEMORY;
 	memcpy(input, pData, ulDataLen);
 
 	output_len = hse_mem_alloc(sizeof(uint32_t));
 	if (output_len == NULL) {
 		rc = CKR_HOST_MEMORY;
-		goto output_len_err;
+		goto err_free_input;
 	}
 	memcpy(output_len, pulEncryptedDataLen, sizeof(uint32_t));
 	output = hse_mem_alloc(*(uint32_t *)output_len);
 	if (output == NULL) {
 		rc = CKR_HOST_MEMORY;
-		goto output_err;
+		goto err_free_output_len;
 	}
 
 	if (gCtx->cryptCtx.mechanism->pParameter != NULL) {
 		pIV = hse_mem_alloc(gCtx->cryptCtx.mechanism->ulParameterLen);
 		if (pIV == NULL) {
 			rc = CKR_HOST_MEMORY;
-			goto piv_err;
+			goto err_free_output;
 		}
 		memcpy(pIV, gCtx->cryptCtx.mechanism->pParameter, gCtx->cryptCtx.mechanism->ulParameterLen);
 	}
@@ -159,27 +149,26 @@ CK_DEFINE_FUNCTION(CK_RV, C_Encrypt)(
 
 		default:
 			rc = CKR_ARGUMENTS_BAD;
-			goto req_err;
+			goto err_free_piv;
 	}
 
 	err = hse_srv_req_sync(HSE_CHANNEL_ANY, &srv_desc);
 	if (err) {
 		rc = CKR_FUNCTION_FAILED;
-		goto req_err;
+		goto err_free_piv;
 	}
 
 	memcpy(pEncryptedData, output, *(uint32_t *)output_len);
 	memcpy(pulEncryptedDataLen, output_len, sizeof(uint32_t));
 
-req_err:
+err_free_piv:
 	hse_mem_free(pIV);
-piv_err:
+err_free_output:
 	hse_mem_free(output);
-output_err:
+err_free_output_len:
 	hse_mem_free(output_len);
-output_len_err:
+err_free_input:
 	hse_mem_free(input);
-gen_err:
 	return rc;
 }
 
@@ -235,52 +224,42 @@ CK_DEFINE_FUNCTION(CK_RV, C_Decrypt)(
 	CK_RV rc = CKR_OK;
 	int err;
 
-	if (gCtx->cryptokiInit == CK_FALSE) {
-		rc = CKR_CRYPTOKI_NOT_INITIALIZED;
-		goto gen_err;
-	}
+	if (gCtx->cryptokiInit == CK_FALSE)
+		return CKR_CRYPTOKI_NOT_INITIALIZED;
 
-	if (gCtx->cryptCtx.init == CK_FALSE) {
-		rc = CKR_OPERATION_NOT_INITIALIZED;
-		goto gen_err;
-	}
+	if (gCtx->cryptCtx.init == CK_FALSE)
+		return CKR_OPERATION_NOT_INITIALIZED;
 
-	if (hSession != SESSION_ID) {
-		rc = CKR_SESSION_HANDLE_INVALID;
-		goto gen_err;
-	}
+	if (hSession != SESSION_ID)
+		return CKR_SESSION_HANDLE_INVALID;
 
-	if (pData == NULL || pEncryptedData == NULL || pulDataLen == NULL) {
-		rc = CKR_ARGUMENTS_BAD;
-		goto gen_err;
-	}
+	if (pData == NULL || pEncryptedData == NULL || pulDataLen == NULL)
+		return CKR_ARGUMENTS_BAD;
 
 	key = (struct hse_keyObject *)list_seek(&gCtx->objects, &gCtx->cryptCtx.keyHandle);
 
 	input = hse_mem_alloc(ulEncryptedDataLen);
-	if (input == NULL) {
-		rc = CKR_HOST_MEMORY;
-		goto gen_err;
-	}
+	if (input == NULL)
+		return CKR_HOST_MEMORY;
 	memcpy(input, pEncryptedData, ulEncryptedDataLen);
 
 	output_len = hse_mem_alloc(sizeof(uint32_t));
 	if (output_len == NULL) {
 		rc = CKR_HOST_MEMORY;
-		goto output_len_err;
+		goto err_free_input;
 	}
 	memcpy(output_len, pulDataLen, sizeof(uint32_t));
 	output = hse_mem_alloc(*(uint32_t *)output_len);
 	if (output == NULL) {
 		rc = CKR_HOST_MEMORY;
-		goto output_err;
+		goto err_free_output_len;
 	}
 
 	if (gCtx->cryptCtx.mechanism->pParameter != NULL) {
 		pIV = hse_mem_alloc(gCtx->cryptCtx.mechanism->ulParameterLen);
 		if (pIV == NULL) {
 			rc = CKR_HOST_MEMORY;
-			goto piv_err;
+			goto err_free_output;
 		}
 		memcpy(pIV, gCtx->cryptCtx.mechanism->pParameter, gCtx->cryptCtx.mechanism->ulParameterLen);
 	}
@@ -333,27 +312,26 @@ CK_DEFINE_FUNCTION(CK_RV, C_Decrypt)(
 
 		default:
 			rc = CKR_ARGUMENTS_BAD;
-			goto req_err;
+			goto err_free_piv;
 	}
 
 	err = hse_srv_req_sync(HSE_CHANNEL_ANY, &srv_desc);
 	if (err) {
 		rc = CKR_FUNCTION_FAILED;
-		goto req_err;
+		goto err_free_piv;
 	}
 
 	memcpy(pData, output, *(uint32_t *)output_len);
 	memcpy(pulDataLen, output_len, sizeof(uint32_t));
 
-req_err:
+err_free_piv:
 	hse_mem_free(pIV);
-piv_err:
+err_free_output:
 	hse_mem_free(output);
-output_err:
+err_free_output_len:
 	hse_mem_free(output_len);
-output_len_err:
+err_free_input:
 	hse_mem_free(input);
-gen_err:
 	return rc;
 }
 
@@ -404,10 +382,8 @@ CK_DEFINE_FUNCTION(CK_RV, C_Sign)(
 	CK_RV rc = CKR_OK;
 	int err;
 
-	if (gCtx->cryptokiInit == CK_FALSE) {
-		rc = CKR_CRYPTOKI_NOT_INITIALIZED;
-		goto gen_err;
-	}
+	if (gCtx->cryptokiInit == CK_FALSE)
+		return CKR_CRYPTOKI_NOT_INITIALIZED;
 
 	if (hSession != SESSION_ID)
 		return CKR_SESSION_HANDLE_INVALID;
@@ -430,16 +406,14 @@ CK_DEFINE_FUNCTION(CK_RV, C_Sign)(
 	key = (struct hse_keyObject *)list_seek(&gCtx->objects, &gCtx->signCtx.keyHandle);
 
 	input = hse_mem_alloc(ulDataLen);
-	if (input == NULL) {
-		rc = CKR_HOST_MEMORY;
-		goto gen_err;
-	}
+	if (input == NULL)
+		return CKR_HOST_MEMORY;
 	memcpy(input, pData, ulDataLen);
 
 	output_len = hse_mem_alloc(sizeof(uint32_t));
 	if (output_len == NULL) {
 		rc = CKR_HOST_MEMORY;
-		goto output_len_err;
+		goto err_free_input;
 	}
 	memcpy(output_len, pulSignatureLen, sizeof(uint32_t));
 
@@ -452,7 +426,7 @@ CK_DEFINE_FUNCTION(CK_RV, C_Sign)(
 			sign0 = hse_mem_alloc(*(uint32_t *)output_len);
 			if (sign0 == NULL) {
 				rc = CKR_HOST_MEMORY;
-				goto sign0_err;
+				goto err_free_output_len;
 			}
 
 			sign_scheme->signSch = HSE_SIGN_RSASSA_PKCS1_V15;
@@ -474,12 +448,12 @@ CK_DEFINE_FUNCTION(CK_RV, C_Sign)(
 			sign0 = hse_mem_alloc(*(uint32_t *)output_len);
 			if (sign0 == NULL) {
 				rc = CKR_HOST_MEMORY;
-				goto sign0_err;
+				goto err_free_output_len;
 			}
 			sign1 = hse_mem_alloc(*(uint32_t *)output_len);
 			if (sign1 == NULL) {
 				rc = CKR_HOST_MEMORY;
-				goto sign1_err;
+				goto err_free_sign0;
 			}
 
 			sign_scheme->signSch = HSE_SIGN_ECDSA;
@@ -493,7 +467,7 @@ CK_DEFINE_FUNCTION(CK_RV, C_Sign)(
 			break;
 		default:
 			rc = CKR_ARGUMENTS_BAD;
-			goto req_err;
+			goto err_free_output_len;
 	}
 
 	srv_desc.srvId = HSE_SRV_ID_SIGN;
@@ -509,7 +483,7 @@ CK_DEFINE_FUNCTION(CK_RV, C_Sign)(
 	err = hse_srv_req_sync(HSE_CHANNEL_ANY, &srv_desc);
 	if (err) {
 		rc = CKR_FUNCTION_FAILED;
-		goto req_err;
+		goto err_free_sign1;
 	}
 
 	switch (gCtx->signCtx.mechanism->mechanism) {
@@ -531,18 +505,17 @@ CK_DEFINE_FUNCTION(CK_RV, C_Sign)(
 			break;
 		default:
 			rc = CKR_ARGUMENTS_BAD;
-			goto req_err;
+			goto err_free_sign1;
 	}
 
-req_err:
+err_free_sign1:
 	hse_mem_free(sign1);
-sign1_err:
+err_free_sign0:
 	hse_mem_free(sign0);
-sign0_err:
+err_free_output_len:
 	hse_mem_free(output_len);
-output_len_err:
+err_free_input:
 	hse_mem_free(input);
-gen_err:
 	return rc;
 }
 
@@ -593,10 +566,8 @@ CK_DEFINE_FUNCTION(CK_RV, C_Verify)(
 	CK_RV rc = CKR_OK;
 	int err;
 
-	if (gCtx->cryptokiInit == CK_FALSE) {
-		rc = CKR_CRYPTOKI_NOT_INITIALIZED;
-		goto gen_err;
-	}
+	if (gCtx->cryptokiInit == CK_FALSE)
+		return CKR_CRYPTOKI_NOT_INITIALIZED;
 
 	if (hSession != SESSION_ID)
 		return CKR_SESSION_HANDLE_INVALID;
@@ -613,22 +584,20 @@ CK_DEFINE_FUNCTION(CK_RV, C_Verify)(
 	if (ulSignatureLen == 0)
 		return CKR_SIGNATURE_LEN_RANGE;
 
-	if (gCtx->signCtx.init == CK_FALSE)
+	if (gCtx->signCtx.init == CK_FALSE) 
 		return CKR_OPERATION_NOT_INITIALIZED;
 
 	key = (struct hse_keyObject *)list_seek(&gCtx->objects, &gCtx->signCtx.keyHandle);
 
 	input = hse_mem_alloc(ulDataLen);
-	if (input == NULL) {
-		rc = CKR_HOST_MEMORY;
-		goto gen_err;
-	}
+	if (input == NULL)
+		return CKR_HOST_MEMORY;
 	memcpy(input, pData, ulDataLen);
 
 	output_len = hse_mem_alloc(sizeof(uint32_t));
 	if (output_len == NULL) {
 		rc = CKR_HOST_MEMORY;
-		goto output_len_err;
+		goto err_free_input;
 	}
 	memcpy(output_len, &ulSignatureLen, sizeof(uint32_t));
 
@@ -641,7 +610,7 @@ CK_DEFINE_FUNCTION(CK_RV, C_Verify)(
 			sign0 = hse_mem_alloc(ulSignatureLen);
 			if (sign0 == NULL) {
 				rc = CKR_HOST_MEMORY;
-				goto sign0_err;
+				goto err_free_output_len;
 			}
 			memcpy(sign0, pSignature, ulSignatureLen);
 
@@ -664,12 +633,12 @@ CK_DEFINE_FUNCTION(CK_RV, C_Verify)(
 			sign0 = hse_mem_alloc(*(uint32_t *)output_len);
 			if (sign0 == NULL) {
 				rc = CKR_HOST_MEMORY;
-				goto sign0_err;
+				goto err_free_output_len;
 			}
 			sign1 = hse_mem_alloc(*(uint32_t *)output_len);
 			if (sign1 == NULL) {
 				rc = CKR_HOST_MEMORY;
-				goto sign1_err;
+				goto err_free_sign0;
 			}
 			memcpy(sign0, pSignature, *(uint32_t *)output_len);
 			memcpy(sign1, pSignature + *(uint32_t *)output_len, *(uint32_t *)output_len);
@@ -684,7 +653,7 @@ CK_DEFINE_FUNCTION(CK_RV, C_Verify)(
 
 		default:
 			rc = CKR_ARGUMENTS_BAD;
-			goto req_err;
+			goto err_free_output_len;
 	}
 
 	srv_desc.srvId = HSE_SRV_ID_SIGN;
@@ -700,21 +669,20 @@ CK_DEFINE_FUNCTION(CK_RV, C_Verify)(
 	err = hse_srv_req_sync(HSE_CHANNEL_ANY, &srv_desc);
 	if (err == EBADMSG) {
 		rc = CKR_SIGNATURE_INVALID;
-		goto req_err;
+		goto err_free_sign1;
 	} else {
 		rc = CKR_FUNCTION_FAILED;
-		goto req_err;
+		goto err_free_sign1;
 	}
 
-req_err:
+err_free_sign1:
 	hse_mem_free(sign1);
-sign1_err:
+err_free_sign0:
 	hse_mem_free(sign0);
-sign0_err:
+err_free_output_len:
 	hse_mem_free(output_len);
-output_len_err:
+err_free_input:
 	hse_mem_free(input);
-gen_err:
 	return rc;
 }
 
diff --git a/libpkcs/pkcs11_object.c b/libpkcs/pkcs11_object.c
index 9f6b660..a4e40dc 100644
--- a/libpkcs/pkcs11_object.c
+++ b/libpkcs/pkcs11_object.c
@@ -109,48 +109,40 @@ CK_DEFINE_FUNCTION(CK_RV, C_CreateObject)(
 	CK_RV rc = CKR_OK;
 	int err;
 
-	if (gCtx->cryptokiInit == CK_FALSE) {
-		rc = CKR_CRYPTOKI_NOT_INITIALIZED;
-		goto gen_err;
-	}
+	if (gCtx->cryptokiInit == CK_FALSE)
+		return CKR_CRYPTOKI_NOT_INITIALIZED;
 
-	if (pTemplate == NULL || ulCount == 0) {
-		rc = CKR_ARGUMENTS_BAD;
-		goto gen_err;
-	}
+	if (pTemplate == NULL || ulCount == 0)
+		return CKR_ARGUMENTS_BAD;
 
-	if (hSession != SESSION_ID) {
-		rc = CKR_SESSION_HANDLE_INVALID;
-		goto gen_err;
-	}
+	if (hSession != SESSION_ID)
+		return CKR_SESSION_HANDLE_INVALID;
 
 	key_info = (hseKeyInfo_t *)hse_mem_alloc(sizeof(hseKeyInfo_t));
-	if (key_info == NULL) {
-		rc = CKR_HOST_MEMORY;
-		goto gen_err;
-	}
+	if (key_info == NULL)
+		return CKR_HOST_MEMORY;
 
 	key = malloc(sizeof(*key));
 	if (key == NULL) {
 		rc = CKR_HOST_MEMORY;
-		goto key_err;
+		goto err_free_key_info;
 	}
 
 	/* get key data and create key object struct */
 	key->id_len = getattr_len(pTemplate, CKA_ID, ulCount);
 	if (!key->id_len) {
 		rc = CKR_ARGUMENTS_BAD;
-		goto key_err;
+		goto err_free_key;
 	}
 	key->id = malloc(key->id_len);
 	if (key->id == NULL) {
 		rc = CKR_HOST_MEMORY;
-		goto id_err;
+		goto err_free_key;
 	}
 	idtemp = (CK_BYTE *)getattr_pval(pTemplate, CKA_ID, ulCount);
 	if (idtemp == NULL) {
 		rc = CKR_ARGUMENTS_BAD;
-		goto id_err;
+		goto err_free_key_id;
 	}
 	memcpy(key->id, idtemp, key->id_len);
 
@@ -158,14 +150,14 @@ CK_DEFINE_FUNCTION(CK_RV, C_CreateObject)(
 
 	if ((CK_KEY_TYPE *)getattr_pval(pTemplate, CKA_KEY_TYPE, ulCount) == NULL) {
 		rc = CKR_ARGUMENTS_BAD;
-		goto id_err;
+		goto err_free_key_id;
 	} else {
 		key->key_type = *(CK_KEY_TYPE *)getattr_pval(pTemplate, CKA_KEY_TYPE, ulCount);
 	}
 
 	if ((CK_OBJECT_CLASS *)getattr_pval(pTemplate, CKA_CLASS, ulCount) == NULL) {
 		rc = CKR_ARGUMENTS_BAD;
-		goto id_err;
+		goto err_free_key_id;
 	} else {
 		key->key_class = *(CK_OBJECT_CLASS *)getattr_pval(pTemplate, CKA_CLASS, ulCount);
 	}
@@ -173,17 +165,17 @@ CK_DEFINE_FUNCTION(CK_RV, C_CreateObject)(
 	key->label_len = getattr_len(pTemplate, CKA_LABEL, ulCount);
 	if (!key->label_len) {
 		rc = CKR_ARGUMENTS_BAD;
-		goto id_err;
+		goto err_free_key_id;
 	}
 	key->label = (CK_UTF8CHAR *)malloc(key->label_len);
 	if (key->label == NULL) {
 		rc = CKR_HOST_MEMORY;
-		goto label_err;
+		goto err_free_key_id;
 	}
 	labeltemp = (CK_UTF8CHAR *)getattr_pval(pTemplate, CKA_LABEL, ulCount);
 	if (labeltemp == NULL) {
 		rc = CKR_ARGUMENTS_BAD;
-		goto label_err;
+		goto err_free_key_label;
 	}
 	memcpy(key->label, labeltemp, key->label_len);
 
@@ -216,24 +208,24 @@ CK_DEFINE_FUNCTION(CK_RV, C_CreateObject)(
 			pkey0_len = getattr_len(pTemplate, CKA_MODULUS, ulCount);
 			if (!pkey0_len) {
 				rc = CKR_ARGUMENTS_BAD;
-				goto label_err;
+				goto err_free_key_label;
 			}
 			pkey0 = hse_mem_alloc(pkey0_len);
 			if (pkey0 == NULL) {
 				rc = CKR_HOST_MEMORY;
-				goto pkey0_err;
+				goto err_free_key_label;
 			}
 			memcpy(pkey0, getattr_pval(pTemplate, CKA_MODULUS, ulCount), pkey0_len);
 
 			pkey1_len = getattr_len(pTemplate, CKA_PUBLIC_EXPONENT, ulCount);
 			if (!pkey1_len) {
 				rc = CKR_ARGUMENTS_BAD;
-				goto pkey0_err;
+				goto err_free_pkey0;
 			}
 			pkey1 = hse_mem_alloc(pkey1_len);
 			if (pkey1 == NULL) {
 				rc = CKR_HOST_MEMORY;
-				goto pkey1_err;
+				goto err_free_pkey0;
 			}
 			memcpy(pkey1, getattr_pval(pTemplate, CKA_PUBLIC_EXPONENT, ulCount), pkey1_len);
 
@@ -255,12 +247,12 @@ CK_DEFINE_FUNCTION(CK_RV, C_CreateObject)(
 				pkey2_len = getattr_len(pTemplate, CKA_PRIVATE_EXPONENT, ulCount);
 				if (!pkey2_len) {
 					rc = CKR_ARGUMENTS_BAD;
-					goto pkey1_err;
+					goto err_free_pkey1;
 				}
 				pkey2 = hse_mem_alloc(pkey2_len);
 				if (pkey2 == NULL) {
 					rc = CKR_HOST_MEMORY;
-					goto pkey2_err;
+					goto err_free_pkey1;
 				}
 				memcpy(pkey2, getattr_pval(pTemplate, CKA_PRIVATE_EXPONENT, ulCount), pkey2_len);
 
@@ -277,7 +269,7 @@ CK_DEFINE_FUNCTION(CK_RV, C_CreateObject)(
 			pkey0_len = getattr_len(pTemplate, CKA_EC_POINT, ulCount);
 			if (pkey0_len < 3) {
 				rc = CKR_ARGUMENTS_BAD;
-				goto label_err;
+				goto err_free_key_label;
 			}
 
 			/* bypass DER encoding header, we don't support it */
@@ -285,7 +277,7 @@ CK_DEFINE_FUNCTION(CK_RV, C_CreateObject)(
 			pkey0 = hse_mem_alloc(pkey0_len);
 			if (pkey0 == NULL) {
 				rc = CKR_HOST_MEMORY;
-				goto pkey0_err;
+				goto err_free_key_label;
 			}
 			ec_point = getattr_pval(pTemplate, CKA_EC_POINT, ulCount);
 			ec_point = (uint8_t *)ec_point + 3;
@@ -294,7 +286,7 @@ CK_DEFINE_FUNCTION(CK_RV, C_CreateObject)(
 			ecc_oid = getattr_pval(pTemplate, CKA_EC_PARAMS, ulCount);
 			if (ecc_oid == NULL) {
 				rc = CKR_ARGUMENTS_BAD;
-				goto pkey0_err;
+				goto err_free_pkey0;
 			}
 
 			/* ecc keys can only be used for sign/verify */
@@ -315,12 +307,12 @@ CK_DEFINE_FUNCTION(CK_RV, C_CreateObject)(
 				pkey2_len = getattr_len(pTemplate, CKA_VALUE, ulCount);
 				if (!pkey2_len) {
 					rc = CKR_ARGUMENTS_BAD;
-					goto pkey0_err;
+					goto err_free_pkey0;
 				}
 				pkey2 = hse_mem_alloc(pkey2_len);
 				if (pkey2 == NULL) {
 					rc = CKR_HOST_MEMORY;
-					goto pkey2_err;
+					goto err_free_pkey0;
 				}
 				memcpy(pkey2, getattr_pval(pTemplate, CKA_VALUE, ulCount), pkey2_len);
 
@@ -337,12 +329,12 @@ CK_DEFINE_FUNCTION(CK_RV, C_CreateObject)(
 			pkey2_len = getattr_len(pTemplate, CKA_VALUE, ulCount);
 			if (!pkey2_len) {
 				rc = CKR_ARGUMENTS_BAD;
-				goto label_err;
+				goto err_free_key_label;
 			}
 			pkey2 = hse_mem_alloc(pkey2_len);
 			if (pkey2 == NULL) {
 				rc = CKR_HOST_MEMORY;
-				goto pkey2_err;
+				goto err_free_key_label;
 			}
 			memcpy(pkey2, getattr_pval(pTemplate, CKA_VALUE, ulCount), pkey2_len);
 
@@ -361,13 +353,13 @@ CK_DEFINE_FUNCTION(CK_RV, C_CreateObject)(
 			break;
 		default:
 			rc = CKR_ARGUMENTS_BAD;
-			goto req_err;
+			goto err_free_key_label;
 	}
 
 	err = hse_srv_req_sync(HSE_CHANNEL_ANY, &srv_desc);
 	if (err) {
 		rc = CKR_FUNCTION_FAILED;
-		goto req_err;
+		goto err_free_pkey2;
 	}
 
 	*phObject = key->key_handle;
@@ -380,21 +372,20 @@ CK_DEFINE_FUNCTION(CK_RV, C_CreateObject)(
 	hse_mem_free(key_info);
 
 	return CKR_OK;
-req_err:
+err_free_pkey2:
 	hse_mem_free(pkey2);
-pkey2_err:
+err_free_pkey1:
 	hse_mem_free(pkey1);
-pkey1_err:
+err_free_pkey0:
 	hse_mem_free(pkey0);
-pkey0_err:
+err_free_key_label:
 	free(key->label);
-label_err:
+err_free_key_id:
 	free(key->id);
-id_err:
+err_free_key:
 	free(key);
-key_err:
+err_free_key_info:
 	hse_mem_free(key_info);
-gen_err:
 	return rc;
 }
 
diff --git a/libpkcs/pkcs11_random.c b/libpkcs/pkcs11_random.c
index 9e7b6a3..cc72835 100644
--- a/libpkcs/pkcs11_random.c
+++ b/libpkcs/pkcs11_random.c
@@ -32,27 +32,19 @@ CK_DEFINE_FUNCTION(CK_RV, C_GenerateRandom)(
 	int err;
 	CK_RV rc = CKR_OK;
 
-	if (gCtx->cryptokiInit == CK_FALSE) {
-		rc = CKR_CRYPTOKI_NOT_INITIALIZED;
-		goto gen_err;
-	}
+	if (gCtx->cryptokiInit == CK_FALSE)
+		return CKR_CRYPTOKI_NOT_INITIALIZED;
 
 	if (pRandomData == NULL || ulRandomLen < 32 ||
-			ulRandomLen > 2048 || ulRandomLen % 4 != 0) {
-		rc = CKR_ARGUMENTS_BAD;
-		goto gen_err;
-	}
+			ulRandomLen > 2048 || ulRandomLen % 4 != 0)
+		return CKR_ARGUMENTS_BAD;
 
-	if (hSession != SESSION_ID) {
-		rc = CKR_SESSION_HANDLE_INVALID;
-		goto gen_err;
-	}
+	if (hSession != SESSION_ID)
+		return CKR_SESSION_HANDLE_INVALID;
 
 	rng_output = hse_mem_alloc(ulRandomLen);
-	if (rng_output == NULL) {
-		rc = CKR_HOST_MEMORY;
-		goto gen_err;
-	}
+	if (rng_output == NULL)
+		return CKR_HOST_MEMORY;
 
 	rng_req = &srv_desc.hseSrv.getRandomNumReq;
 	
@@ -64,13 +56,12 @@ CK_DEFINE_FUNCTION(CK_RV, C_GenerateRandom)(
 	err = hse_srv_req_sync(HSE_CHANNEL_ANY, &srv_desc);
 	if (err) {
 		rc = CKR_FUNCTION_FAILED;
-		goto req_err;
+		goto err_free_output;
 	}
 
 	memcpy(pRandomData, rng_output, ulRandomLen);
 
-req_err:
+err_free_output:
 	hse_mem_free(rng_output);
-gen_err:
 	return rc;
 }
-- 
2.17.1

