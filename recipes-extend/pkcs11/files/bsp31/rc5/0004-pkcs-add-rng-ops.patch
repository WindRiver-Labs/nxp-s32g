From 59c3e178b889d2d3324d3f298a2f424a75d6dcb0 Mon Sep 17 00:00:00 2001
From: Vlad Pelin <vlad.pelin@nxp.com>
Date: Mon, 8 Nov 2021 14:29:08 +0200
Subject: [PATCH 4/4] pkcs: add rng ops

C_SeedRandom() returns error, not supported by HSE
C_GenerateRandom() behaves as expected

Issue: ALB-7129
Upstream-Status: Pending 

Signed-off-by: Vlad Pelin <vlad.pelin@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 libpkcs/pkcs11.c        |  2 ++
 libpkcs/pkcs11_random.c | 76 +++++++++++++++++++++++++++++++++++++++++
 2 files changed, 78 insertions(+)
 create mode 100644 libpkcs/pkcs11_random.c

diff --git a/libpkcs/pkcs11.c b/libpkcs/pkcs11.c
index 2ba01de..e00ad2c 100644
--- a/libpkcs/pkcs11.c
+++ b/libpkcs/pkcs11.c
@@ -57,6 +57,8 @@ static CK_FUNCTION_LIST gFunctionList = {
 	.C_Sign =                               C_Sign,
 	.C_VerifyInit =                         C_VerifyInit,
 	.C_Verify =                             C_Verify
+	.C_SeedRandom =                         C_SeedRandom,
+	.C_GenerateRandom =                     C_GenerateRandom
 };
 
 /*
diff --git a/libpkcs/pkcs11_random.c b/libpkcs/pkcs11_random.c
new file mode 100644
index 0000000..9e7b6a3
--- /dev/null
+++ b/libpkcs/pkcs11_random.c
@@ -0,0 +1,76 @@
+// SPDX-License-Identifier: BSD-3-Clause
+/*
+ * Copyright 2021 NXP
+ */
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+
+#include "pkcs11_context.h"
+
+CK_DEFINE_FUNCTION(CK_RV, C_SeedRandom)(
+		CK_SESSION_HANDLE hSession,
+		CK_BYTE_PTR pSeed,
+		CK_ULONG ulSeedLen
+)
+{
+	/* HSE does not support RNG seeding */
+	return CKR_RANDOM_SEED_NOT_SUPPORTED;
+}
+
+CK_DEFINE_FUNCTION(CK_RV, C_GenerateRandom)(
+		CK_SESSION_HANDLE hSession,
+		CK_BYTE_PTR pRandomData,
+		CK_ULONG ulRandomLen
+)
+{
+	struct globalCtx *gCtx = getCtx();
+	hseSrvDescriptor_t srv_desc;
+	hseGetRandomNumSrv_t *rng_req;
+	void *rng_output;
+	int err;
+	CK_RV rc = CKR_OK;
+
+	if (gCtx->cryptokiInit == CK_FALSE) {
+		rc = CKR_CRYPTOKI_NOT_INITIALIZED;
+		goto gen_err;
+	}
+
+	if (pRandomData == NULL || ulRandomLen < 32 ||
+			ulRandomLen > 2048 || ulRandomLen % 4 != 0) {
+		rc = CKR_ARGUMENTS_BAD;
+		goto gen_err;
+	}
+
+	if (hSession != SESSION_ID) {
+		rc = CKR_SESSION_HANDLE_INVALID;
+		goto gen_err;
+	}
+
+	rng_output = hse_mem_alloc(ulRandomLen);
+	if (rng_output == NULL) {
+		rc = CKR_HOST_MEMORY;
+		goto gen_err;
+	}
+
+	rng_req = &srv_desc.hseSrv.getRandomNumReq;
+	
+	srv_desc.srvId = HSE_SRV_ID_GET_RANDOM_NUM;
+	rng_req->rngClass = HSE_RNG_CLASS_PTG3;
+	rng_req->randomNumLength = ulRandomLen;
+	rng_req->pRandomNum = hse_virt_to_dma(rng_output);
+
+	err = hse_srv_req_sync(HSE_CHANNEL_ANY, &srv_desc);
+	if (err) {
+		rc = CKR_FUNCTION_FAILED;
+		goto req_err;
+	}
+
+	memcpy(pRandomData, rng_output, ulRandomLen);
+
+req_err:
+	hse_mem_free(rng_output);
+gen_err:
+	return rc;
+}
-- 
2.17.1

